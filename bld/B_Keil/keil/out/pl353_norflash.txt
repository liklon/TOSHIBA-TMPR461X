; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\pl353_norflash.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\pl353_norflash.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\pl353_norflash.crf ..\..\..\..\hldd\src\pl353_norflash.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  eFLASH_CheckResult PROC
;;;52     /***************************************************************************/
;;;53     static flash_errcodes_e eFLASH_CheckResult(uint16_t* pui16Addr, uint16_t ui16Expect)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;54     {
000004  e1a05000          MOV      r5,r0
000008  e1a06001          MOV      r6,r1
;;;55         uint16_t ui16Status;
;;;56         uint16_t u32StatusCnt = 0;
00000c  e3a07000          MOV      r7,#0
;;;57     
;;;58         while( 1 )
000010  ea00001a          B        |L1.128|
                  |L1.20|
;;;59         {
;;;60             ui16Status = *pui16Addr;
000014  e1d540b0          LDRH     r4,[r5,#0]
;;;61             __DSB();
000018  ebfffffe          BL       __DSB
;;;62     
;;;63             if( ui16Expect == (ui16Status & FLASH_DQ7) )
00001c  e2040080          AND      r0,r4,#0x80
000020  e1500006          CMP      r0,r6
000024  1a000001          BNE      |L1.48|
;;;64             {
;;;65                 return FLASH_OK;
000028  e3a00000          MOV      r0,#0
                  |L1.44|
;;;66             }
;;;67             else
;;;68             {
;;;69                 /* Completed? */
;;;70                 if( FLASH_DQ5 == (ui16Status & FLASH_DQ5) )
;;;71                 {
;;;72                     /* Re-read the status */
;;;73                     ui16Status = *pui16Addr;
;;;74                     __DSB();
;;;75     
;;;76                     if( ui16Expect == (ui16Status & FLASH_DQ7) )
;;;77                     {
;;;78                         return FLASH_OK;
;;;79                     }
;;;80                     else
;;;81                     {
;;;82                         /* Timeout expired */
;;;83                         return FLASH_TIMEOUT;  
;;;84                     }
;;;85                 }
;;;86             }
;;;87             /* Status indication */
;;;88             u32StatusCnt++;
;;;89             if( FLASH_ERASE_INDICATOR_INTERVAL == u32StatusCnt )
;;;90             {
;;;91                 printf(".");
;;;92                 u32StatusCnt = 0;
;;;93             }
;;;94         }
;;;95     }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.48|
000030  e2040020          AND      r0,r4,#0x20           ;70
000034  e3500020          CMP      r0,#0x20              ;70
000038  1a000008          BNE      |L1.96|
00003c  e1d540b0          LDRH     r4,[r5,#0]            ;73
000040  ebfffffe          BL       __DSB
000044  e2040080          AND      r0,r4,#0x80           ;76
000048  e1500006          CMP      r0,r6                 ;76
00004c  1a000001          BNE      |L1.88|
000050  e3a00000          MOV      r0,#0                 ;78
000054  eafffff4          B        |L1.44|
                  |L1.88|
000058  e3a00004          MOV      r0,#4                 ;83
00005c  eafffff2          B        |L1.44|
                  |L1.96|
000060  e2870001          ADD      r0,r7,#1              ;88
000064  e6ff7070          UXTH     r7,r0                 ;88
000068  e59f01f0          LDR      r0,|L1.608|
00006c  e1570000          CMP      r7,r0                 ;89
000070  1a000002          BNE      |L1.128|
000074  e28f0f7a          ADR      r0,|L1.612|
000078  ebfffffe          BL       __2printf
00007c  e3a07000          MOV      r7,#0                 ;92
                  |L1.128|
000080  eaffffe3          B        |L1.20|
;;;96     
                          ENDP

                  eFLASH_EraseSector PROC
;;;98     /***************************************************************************/
;;;99     static flash_errcodes_e eFLASH_EraseSector(uint32_t u32StartAddr)
000084  e92d4010          PUSH     {r4,lr}
;;;100    {
000088  e1a04000          MOV      r4,r0
;;;101        /* Send the erase command */
;;;102        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA;  /* Unlock cycle 1 */
00008c  e3a000aa          MOV      r0,#0xaa
000090  e59f11d0          LDR      r1,|L1.616|
000094  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000098  e2811202          ADD      r1,r1,#0x20000000
00009c  e2811c0a          ADD      r1,r1,#0xa00
0000a0  e1c10aba          STRH     r0,[r1,#0xaa]
;;;103        __DSB();
0000a4  ebfffffe          BL       __DSB
;;;104        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055;  /* Unlock cycle 2 */
0000a8  e3a00055          MOV      r0,#0x55
0000ac  e59f11b4          LDR      r1,|L1.616|
0000b0  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0000b4  e2811202          ADD      r1,r1,#0x20000000
0000b8  e2811c05          ADD      r1,r1,#0x500
0000bc  e1c105b4          STRH     r0,[r1,#0x54]
;;;105        __DSB();
0000c0  ebfffffe          BL       __DSB
;;;106        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x0080;  /* Setup command */
0000c4  e3a00080          MOV      r0,#0x80
0000c8  e59f1198          LDR      r1,|L1.616|
0000cc  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0000d0  e2811202          ADD      r1,r1,#0x20000000
0000d4  e2811c0a          ADD      r1,r1,#0xa00
0000d8  e1c10aba          STRH     r0,[r1,#0xaa]
;;;107        __DSB();
0000dc  ebfffffe          BL       __DSB
;;;108    
;;;109        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA;  /* Unlock cycle 1 */
0000e0  e3a000aa          MOV      r0,#0xaa
0000e4  e59f117c          LDR      r1,|L1.616|
0000e8  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0000ec  e2811202          ADD      r1,r1,#0x20000000
0000f0  e2811c0a          ADD      r1,r1,#0xa00
0000f4  e1c10aba          STRH     r0,[r1,#0xaa]
;;;110        __DSB();
0000f8  ebfffffe          BL       __DSB
;;;111        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055;  /* Unlock cycle 2 */
0000fc  e3a00055          MOV      r0,#0x55
000100  e59f1160          LDR      r1,|L1.616|
000104  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000108  e2811202          ADD      r1,r1,#0x20000000
00010c  e2811c05          ADD      r1,r1,#0x500
000110  e1c105b4          STRH     r0,[r1,#0x54]
;;;112        __DSB();
000114  ebfffffe          BL       __DSB
;;;113        /* Start address range: 0x0000000 - 0x3FF0000 */
;;;114        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + u32StartAddr) = 0x0030;    /* Sector erase command */ 
000118  e3a00030          MOV      r0,#0x30
00011c  e59f1144          LDR      r1,|L1.616|
000120  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000124  e2811202          ADD      r1,r1,#0x20000000
000128  e18100b4          STRH     r0,[r1,r4]
;;;115        __DSB();
00012c  ebfffffe          BL       __DSB
;;;116    
;;;117        return eFLASH_CheckResult((uint16_t*)(FLASH_BASE + u32NorDevOffset), FLASH_DQ7);
000130  e59f1130          LDR      r1,|L1.616|
000134  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000138  e2810202          ADD      r0,r1,#0x20000000
00013c  e3a01080          MOV      r1,#0x80
000140  ebfffffe          BL       eFLASH_CheckResult
;;;118    }
000144  e8bd8010          POP      {r4,pc}
;;;119    
                          ENDP

                  eFLASH_Erase PROC
;;;121    /***************************************************************************/
;;;122    flash_errcodes_e eFLASH_Erase(void)
000148  e92d4010          PUSH     {r4,lr}
;;;123    {    
;;;124        /* Send the erase command */
;;;125        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA;  /* Unlock cycle 1 */
00014c  e3a000aa          MOV      r0,#0xaa
000150  e59f1110          LDR      r1,|L1.616|
000154  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000158  e2811202          ADD      r1,r1,#0x20000000
00015c  e2811c0a          ADD      r1,r1,#0xa00
000160  e1c10aba          STRH     r0,[r1,#0xaa]
;;;126        __DSB();
000164  ebfffffe          BL       __DSB
;;;127        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055;  /* Unlock cycle 2 */
000168  e3a00055          MOV      r0,#0x55
00016c  e59f10f4          LDR      r1,|L1.616|
000170  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000174  e2811202          ADD      r1,r1,#0x20000000
000178  e2811c05          ADD      r1,r1,#0x500
00017c  e1c105b4          STRH     r0,[r1,#0x54]
;;;128        __DSB();
000180  ebfffffe          BL       __DSB
;;;129        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x0080;  /* Setup command */
000184  e3a00080          MOV      r0,#0x80
000188  e59f10d8          LDR      r1,|L1.616|
00018c  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000190  e2811202          ADD      r1,r1,#0x20000000
000194  e2811c0a          ADD      r1,r1,#0xa00
000198  e1c10aba          STRH     r0,[r1,#0xaa]
;;;130        __DSB();
00019c  ebfffffe          BL       __DSB
;;;131    
;;;132        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA;  /* Unlock cycle 1 */
0001a0  e3a000aa          MOV      r0,#0xaa
0001a4  e59f10bc          LDR      r1,|L1.616|
0001a8  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0001ac  e2811202          ADD      r1,r1,#0x20000000
0001b0  e2811c0a          ADD      r1,r1,#0xa00
0001b4  e1c10aba          STRH     r0,[r1,#0xaa]
;;;133        __DSB();
0001b8  ebfffffe          BL       __DSB
;;;134        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055;  /* Unlock cycle 2 */
0001bc  e3a00055          MOV      r0,#0x55
0001c0  e59f10a0          LDR      r1,|L1.616|
0001c4  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0001c8  e2811202          ADD      r1,r1,#0x20000000
0001cc  e2811c05          ADD      r1,r1,#0x500
0001d0  e1c105b4          STRH     r0,[r1,#0x54]
;;;135        __DSB();
0001d4  ebfffffe          BL       __DSB
;;;136        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x0010;  /* Chip erase command */ 
0001d8  e3a00010          MOV      r0,#0x10
0001dc  e59f1084          LDR      r1,|L1.616|
0001e0  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0001e4  e2811202          ADD      r1,r1,#0x20000000
0001e8  e2811c0a          ADD      r1,r1,#0xa00
0001ec  e1c10aba          STRH     r0,[r1,#0xaa]
;;;137        __DSB();
0001f0  ebfffffe          BL       __DSB
;;;138    
;;;139        return eFLASH_CheckResult((uint16_t*)(FLASH_BASE + u32NorDevOffset), FLASH_DQ7);
0001f4  e59f106c          LDR      r1,|L1.616|
0001f8  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0001fc  e2810202          ADD      r0,r1,#0x20000000
000200  e3a01080          MOV      r1,#0x80
000204  ebfffffe          BL       eFLASH_CheckResult
;;;140    }
000208  e8bd8010          POP      {r4,pc}
;;;141    
                          ENDP

                  eFLASH_EraseSectors PROC
;;;143    /***************************************************************************/
;;;144    flash_errcodes_e eFLASH_EraseSectors(uint32_t u32DeviceAddr, uint32_t u32SectorCount)
00020c  e92d41f0          PUSH     {r4-r8,lr}
;;;145    {    
000210  e1a06000          MOV      r6,r0
000214  e1a05001          MOV      r5,r1
;;;146        flash_errcodes_e eRes = FLASH_OK;
000218  e3a07000          MOV      r7,#0
;;;147        uint32_t u32EraseIndex;
;;;148    
;;;149        /* Erase the complete device */
;;;150        if( 0 == u32SectorCount )
00021c  e3550000          CMP      r5,#0
000220  1a000001          BNE      |L1.556|
;;;151        {
;;;152            /* erase complete flash */
;;;153            eFLASH_Erase();
000224  ebfffffe          BL       eFLASH_Erase
000228  ea00000a          B        |L1.600|
                  |L1.556|
;;;154        }
;;;155        else
;;;156        {
;;;157            /* Erase the require sectors only */
;;;158            for(u32EraseIndex = 0; u32EraseIndex < u32SectorCount; u32EraseIndex++)
00022c  e3a04000          MOV      r4,#0
000230  ea000006          B        |L1.592|
                  |L1.564|
;;;159            {
;;;160                /* Erase sector */            
;;;161                eRes = eFLASH_EraseSector(u32DeviceAddr + u32EraseIndex*FLASH_SECTOR_SIZE_128KB);           
000234  e0860884          ADD      r0,r6,r4,LSL #17
000238  ebfffffe          BL       eFLASH_EraseSector
00023c  e1a07000          MOV      r7,r0
;;;162                printf("Erase sector: %d\n", u32EraseIndex);
000240  e1a01004          MOV      r1,r4
000244  e28f0020          ADR      r0,|L1.620|
000248  ebfffffe          BL       __2printf
00024c  e2844001          ADD      r4,r4,#1              ;158
                  |L1.592|
000250  e1540005          CMP      r4,r5                 ;158
000254  3afffff6          BCC      |L1.564|
                  |L1.600|
;;;163            }
;;;164        }
;;;165    
;;;166        return eRes;
000258  e1a00007          MOV      r0,r7
;;;167    }
00025c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.608|
                          DCD      0x00019876
                  |L1.612|
000264  2e00              DCB      ".",0
000266  00                DCB      0
000267  00                DCB      0
                  |L1.616|
                          DCD      u32NorDevOffset
                  |L1.620|
00026c  45726173          DCB      "Erase sector: %d\n",0
000270  65207365
000274  63746f72
000278  3a202564
00027c  0a00    
00027e  00                DCB      0
00027f  00                DCB      0
                          ENDP

                  eFLASH_Write PROC
;;;170    /***************************************************************************/
;;;171    flash_errcodes_e eFLASH_Write(uint16_t* pui16Dest, uint16_t ui16Data)
000280  e92d4070          PUSH     {r4-r6,lr}
;;;172    {    
000284  e1a05000          MOV      r5,r0
000288  e1a04001          MOV      r4,r1
;;;173        /* Send the command */
;;;174        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA; /* Unlock cycle 1 */ 
00028c  e3a000aa          MOV      r0,#0xaa
000290  e51f1030          LDR      r1,|L1.616|
000294  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000298  e2811202          ADD      r1,r1,#0x20000000
00029c  e2811c0a          ADD      r1,r1,#0xa00
0002a0  e1c10aba          STRH     r0,[r1,#0xaa]
;;;175        __DSB();
0002a4  ebfffffe          BL       __DSB
;;;176        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055; /* Unlock cycle 2 */ 
0002a8  e3a00055          MOV      r0,#0x55
0002ac  e51f104c          LDR      r1,|L1.616|
0002b0  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0002b4  e2811202          ADD      r1,r1,#0x20000000
0002b8  e2811c05          ADD      r1,r1,#0x500
0002bc  e1c105b4          STRH     r0,[r1,#0x54]
;;;177        __DSB();
0002c0  ebfffffe          BL       __DSB
;;;178        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00A0; /* Setup command */
0002c4  e3a000a0          MOV      r0,#0xa0
0002c8  e51f1068          LDR      r1,|L1.616|
0002cc  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0002d0  e2811202          ADD      r1,r1,#0x20000000
0002d4  e2811c0a          ADD      r1,r1,#0xa00
0002d8  e1c10aba          STRH     r0,[r1,#0xaa]
;;;179        __DSB();
0002dc  ebfffffe          BL       __DSB
;;;180    
;;;181        /* Send the data */
;;;182        *pui16Dest = ui16Data;   
0002e0  e1c540b0          STRH     r4,[r5,#0]
;;;183        __DSB();
0002e4  ebfffffe          BL       __DSB
;;;184    
;;;185        /* Poll the status */ 
;;;186        return eFLASH_CheckResult(pui16Dest, (ui16Data & FLASH_DQ7));
0002e8  e2041080          AND      r1,r4,#0x80
0002ec  e1a00005          MOV      r0,r5
0002f0  ebfffffe          BL       eFLASH_CheckResult
;;;187    }
0002f4  e8bd8070          POP      {r4-r6,pc}
;;;188    
                          ENDP

                  eFLASH_GetID PROC
;;;190    /***************************************************************************/
;;;191    flash_errcodes_e eFLASH_GetID(flash_devdescr_st* pstDeviceDesc)
0002f8  e92d4070          PUSH     {r4-r6,lr}
;;;192    {
0002fc  e1a04000          MOV      r4,r0
;;;193        flash_errcodes_e eRetVal = FLASH_OK;
000300  e3a05000          MOV      r5,#0
;;;194    
;;;195        /* Exit autoselect/Reset command */
;;;196        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset) = 0x00F0;
000304  e3a000f0          MOV      r0,#0xf0
000308  e51f10a8          LDR      r1,|L1.616|
00030c  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000310  e2811202          ADD      r1,r1,#0x20000000
000314  e1c100b0          STRH     r0,[r1,#0]
;;;197        __DSB();
000318  ebfffffe          BL       __DSB
;;;198    
;;;199        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x00AA; /* Unlock cycle 1 */
00031c  e3a000aa          MOV      r0,#0xaa
000320  e51f10c0          LDR      r1,|L1.616|
000324  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000328  e2811202          ADD      r1,r1,#0x20000000
00032c  e2811c0a          ADD      r1,r1,#0xa00
000330  e1c10aba          STRH     r0,[r1,#0xaa]
;;;200        __DSB();
000334  ebfffffe          BL       __DSB
;;;201        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_2AA) = 0x0055; /* Unlock cycle 2 */
000338  e3a00055          MOV      r0,#0x55
00033c  e51f10dc          LDR      r1,|L1.616|
000340  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000344  e2811202          ADD      r1,r1,#0x20000000
000348  e2811c05          ADD      r1,r1,#0x500
00034c  e1c105b4          STRH     r0,[r1,#0x54]
;;;202        __DSB();
000350  ebfffffe          BL       __DSB
;;;203        *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + FLASH_ADDR_555) = 0x0090; /* Autoselect command */
000354  e3a00090          MOV      r0,#0x90
000358  e51f10f8          LDR      r1,|L1.616|
00035c  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
000360  e2811202          ADD      r1,r1,#0x20000000
000364  e2811c0a          ADD      r1,r1,#0xa00
000368  e1c10aba          STRH     r0,[r1,#0xaa]
;;;204        __DSB();
00036c  ebfffffe          BL       __DSB
;;;205    
;;;206        if( C_NULL != pstDeviceDesc )
000370  e3540000          CMP      r4,#0
000374  0a000021          BEQ      |L1.1024|
;;;207        {    
;;;208            pstDeviceDesc->ui16MID = *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + 0);
000378  e51f0118          LDR      r0,|L1.616|
00037c  e5900000          LDR      r0,[r0,#0]  ; u32NorDevOffset
000380  e2800202          ADD      r0,r0,#0x20000000
000384  e1d000b0          LDRH     r0,[r0,#0]
000388  e1c400b0          STRH     r0,[r4,#0]
;;;209            __DSB();
00038c  ebfffffe          BL       __DSB
;;;210            pstDeviceDesc->ui16DID = *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset + (1<<1));
000390  e51f0130          LDR      r0,|L1.616|
000394  e5900000          LDR      r0,[r0,#0]  ; u32NorDevOffset
000398  e2800202          ADD      r0,r0,#0x20000000
00039c  e1d000b2          LDRH     r0,[r0,#2]
0003a0  e1c400b2          STRH     r0,[r4,#2]
;;;211            __DSB();
0003a4  ebfffffe          BL       __DSB
;;;212    
;;;213            /* Autoselect exit/Reset */
;;;214            *(volatile uint16_t*)(FLASH_BASE + u32NorDevOffset) = 0x00F0;
0003a8  e3a000f0          MOV      r0,#0xf0
0003ac  e51f114c          LDR      r1,|L1.616|
0003b0  e5911000          LDR      r1,[r1,#0]  ; u32NorDevOffset
0003b4  e2811202          ADD      r1,r1,#0x20000000
0003b8  e1c100b0          STRH     r0,[r1,#0]
;;;215            __DSB();
0003bc  ebfffffe          BL       __DSB
;;;216    
;;;217            printf("FLASH Manufacturer ID: 0x%X\n", pstDeviceDesc->ui16MID);    
0003c0  e1d410b0          LDRH     r1,[r4,#0]
0003c4  e28f0040          ADR      r0,|L1.1036|
0003c8  ebfffffe          BL       __2printf
;;;218            printf("FLASH Device ID: 0x%X\n", pstDeviceDesc->ui16DID);    
0003cc  e1d410b2          LDRH     r1,[r4,#2]
0003d0  e28f0054          ADR      r0,|L1.1068|
0003d4  ebfffffe          BL       __2printf
;;;219            
;;;220            /* !!! Add other manufacturer if needed !!! */
;;;221            if( (0x0001 != (pstDeviceDesc->ui16MID & 0x00FF)) && (0x0020 != (pstDeviceDesc->ui16MID & 0x00FF)) )	
0003d8  e5d40000          LDRB     r0,[r4,#0]
0003dc  e3500001          CMP      r0,#1
0003e0  0a000007          BEQ      |L1.1028|
0003e4  e5d40000          LDRB     r0,[r4,#0]
0003e8  e3500020          CMP      r0,#0x20
0003ec  0a000004          BEQ      |L1.1028|
;;;222            {
;;;223                printf("\nERROR: Unsupported FLASH Device Manufacturer ID!\n");
0003f0  e28f004c          ADR      r0,|L1.1092|
0003f4  ebfffffe          BL       __2printf
;;;224                eRetVal = FLASH_UNSUPPORTED_DEV;
0003f8  e3a05005          MOV      r5,#5
0003fc  ea000000          B        |L1.1028|
                  |L1.1024|
;;;225            }
;;;226        }
;;;227        else
;;;228        {
;;;229            eRetVal = FLASH_NULL_PTR;
000400  e3a05001          MOV      r5,#1
                  |L1.1028|
;;;230        }
;;;231    
;;;232        return eRetVal;
000404  e1a00005          MOV      r0,r5
;;;233    }
000408  e8bd8070          POP      {r4-r6,pc}
;;;234    
                          ENDP

                  |L1.1036|
00040c  464c4153          DCB      "FLASH Manufacturer ID: 0x%X\n",0
000410  48204d61
000414  6e756661
000418  63747572
00041c  65722049
000420  443a2030
000424  7825580a
000428  00      
000429  00                DCB      0
00042a  00                DCB      0
00042b  00                DCB      0
                  |L1.1068|
00042c  464c4153          DCB      "FLASH Device ID: 0x%X\n",0
000430  48204465
000434  76696365
000438  2049443a
00043c  20307825
000440  580a00  
000443  00                DCB      0
                  |L1.1092|
000444  0a455252          DCB      "\nERROR: Unsupported FLASH Device Manufacturer ID!\n",0
000448  4f523a20
00044c  556e7375
000450  70706f72
000454  74656420
000458  464c4153
00045c  48204465
000460  76696365
000464  204d616e
000468  75666163
00046c  74757265
000470  72204944
000474  210a00  
000477  00                DCB      0

                          AREA ||.data||, DATA, ALIGN=2

                  u32NorDevOffset
                          DCD      0x00000000
