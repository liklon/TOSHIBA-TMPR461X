L 1 "..\..\..\..\mw\src\fbuffer.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware Buffer definition
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/06/05 13:48:13 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "fbuffer.h"
L 1 "..\..\..\..\mw\inc\fbuffer.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Middleware Buffer definition
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/06/05 13:48:13 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef FBUFFER_H
N#define FBUFFER_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 25 "..\..\..\..\mw\inc\fbuffer.h" 2
N#include "config.h"
L 1 "..\..\inc\config.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: config.h,v $
N*   Description :
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : config
N*               : $Name:  $
N*   LIBRARIES   :
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/config.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef CONFIG_H
N#define CONFIG_H
N
N/*****************************************************************************************
N*                Include files
N*****************************************************************************************/
N#include "mw_definitions.h"
L 1 "..\..\..\..\mw\inc\mw_definitions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : MW specific definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.17 $
N*   DATE        : $Date: 2015/07/03 09:11:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef MW_DEFINITIONS_H
N#define MW_DEFINITIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_DEFINITIONS_H_REVISION     "$Revision: 1.17 $"
N#define MW_DEFINITIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/* general */
N#define ON      1
N#define OFF	    0
N
N/* Resolution Parameters  */
N#define QVGA_RES_50                   (0)
N#define QVGA_RES_60                   (1)
N#define HNTSC_RES_60                  (2)
N#define HVGA_RES_50                   (3)
N#define HVGA_RES_60                   (4)
N#define WIDE_RES_50                   (5)
N#define WIDE_RES_60                   (6)
N#define VGA_RES_50                    (7)
N#define VGA_RES_60                    (8)
N#define WVGA_RES_45                   (9)
N#define WVGA_RES_50                  (10)
N#define WVGA_RES_55                  (11)
N#define WVGA_RES_60                  (12)
N#define SVGA_RES_50                  (13)
N#define SVGA_RES_60                  (14)
N#define DVGA_RES_50                  (15)
N#define DVGA_RES_60                  (16)
N#define DVGA_1_RES_50                (17)
N#define DVGA_1_RES_60                (18)
N#define XGA_RES_50                   (19)
N#define XGA_RES_60                   (20)
N#define SXGA_RES_50                  (21)
N#define SXGA_RES_60                  (22)
N#define HD_RES                       (23)
N#define HITACHI_TX31D06VM2AAA_RES_50 (24)
N#define HITACHI_TX31D06VM2AAA_RES_60 (25)
N#define SHARP_1280_422_50            (26)
N#define SHARP_1280_422_60            (27)
N#define TX18D35VM0AAA_50             (28)
N#define TX18D35VM0AAA_60             (29)
N#define RES_960_720_50               (30) 
N#define AT070TN94_50             (31)
N#define AT070TN94_60             (32)
N#define  TC90195_60   (33)
N#define  CLAA121WB   (34) 
N#define	CLAA088WA	(35)
N/* definition if layer is not used */
N#define FMT_OFF         (0)
N
N/* Data Formats */
N#define FMT_RGBA32      (1)
N#define FMT_RGBA24      (2)
N#define FMT_RGB24       (3)
N#define FMT_RGB16       (4)
N
N#define FMT_GRAY8A     (10)
N#define FMT_GRAY8      (11)
N#define FMT_GRAY2      (12)
N#define FMT_GRAY1      (13)
N#define FMT_A          (14)
N
N#define FMT_RLERGBA32  (15)
N#define FMT_RLERGBA24  (16)
N#define FMT_RLERGB24   (17)
N#define FMT_RLERGB16   (18)
N#define FMT_RLECLUT8   (19)
N#define FMT_RLECLUT6   (20)
N#define FMT_RLECLUT4   (21)
N#define FMT_RLECLUT2   (22)
N#define FMT_RLECLUT1   (23)
N#define FMT_RLEGRAY8A  (24)
N#define FMT_RLEGRAY8   (25)
N#define FMT_RLEGRAY2   (26)
N#define FMT_RLEGRAY1   (27)
N#define FMT_RLEA       (28)
N
N#define FMT_PNGRGBA32  (29)
N#define FMT_PNGRGB24   (30)
N#define FMT_PNGCLUT8   (31)
N#define FMT_PNGCLUT4   (32)
N#define FMT_PNGCLUT2   (33)
N#define FMT_PNGCLUT1   (34)
N#define FMT_PNGGRAY8A  (35)
N#define FMT_PNGGRAY8   (36)
N#define FMT_PNGGRAY4   (37)
N#define FMT_PNGGRAY2   (38)
N#define FMT_PNGGRAY1   (39)
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/*********************************************/
N
N#endif /* MW_DEFINITIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\inc\config.h" 2
N#include "qspi.h"
L 1 "..\..\..\..\hldd\inc\qspi.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     : TSM-Driver
N*   MODULE      : General
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/06/24 15:14:52 $
N*   TAG         : $Name: HLDD_1_1 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _QSPI_H
N#define _QSPI_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "qspic.h"
L 1 "..\..\..\..\lldd\inc\qspic.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI controler low level register access
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : QSPI
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.35 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef QSPIC_H
N#define QSPIC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_QSPIC_H_REVISION     "$Revision: 1.35 $"
N#define LLDD_QSPIC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : disable No reuse of identifiers */
N#endif
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
Ntypedef enum tag_qspic_cntrl_e
N{
N#ifdef FPGA
S  QSPIC_CNTRL_0 = 0x0U,
S  QSPIC_CNTRL_1 = 0x800U,
S  QSPIC_CNTRL_2 = 0x1000
N#else
N  QSPIC_CNTRL_0 = 0,
N  QSPIC_CNTRL_1 = 0xAF8000,  
N  QSPIC_CNTRL_2 = 0x1000
N#endif   
N} qspic_cntrl_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
Nextern void    read_burst4(int32_t i32addr, uint32_t * pu32Data);
Nextern void    read_burst8(int32_t i32addr, uint32_t * pu32Data);
Nextern void    word_write(int32_t i32addr, int32_t data);
Nextern void    hword_write(int32_t i32addr, int32_t data);
Nextern void    byte_write(int32_t i32addr, int32_t data);
Nextern int32_t word_read(int32_t i32addr);
Nextern int32_t hword_read(int32_t i32addr);
Nextern int32_t byte_read(int32_t i32addr);
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* Command Operation Code */
Ntypedef enum tag_qspic_CmdOp_e
N{
N  QSPI_CMD_READ_SINGLE        = 0x03,
N  QSPI_CMD_FAST_READ_SINGLE   = 0x0B,
N  QSPI_CMD_FAST_READ_DUAL_OUT = 0x3B,
N  QSPI_CMD_FAST_READ_DUAL_IO  = 0xBB,
N  QSPI_CMD_FAST_READ_QUAD_OUT = 0x6B,
N  QSPI_CMD_FAST_READ_QUAD_IO  = 0xEB
N} qspi_CmdOp_e;
N
N/* SPI I/O Control */
Ntypedef enum tag_qspic_IOCtrl_e
N{
N  QSPI_SINGLE = 0,
N  QSPI_DUAL   = 1,
N  QSPI_QUAD   = 2
N} qspi_IOCtrl_e;
N
N/* Address byte count */
Ntypedef enum tag_qspic_AddrByte_e
N{
N  QSPI_ADDR_3BYTE = 0,
N  QSPI_ADDR_4BYTE = 1
N} qspi_AddrByte_e;
N
N/* QSPI flash device no. */
Ntypedef enum tag_qspic_dev_e
N{
N    QSPIC_DEV_0 = 0,                         /* QSPI flash on CS0 */
N    QSPIC_DEV_1 = 1                          /* QSPI flash on CS1 */
N} qspic_dev_e;
N
N/* SPI flash density */
Ntypedef enum tag_qspic_density_e
N{
N    /* dependant on SI_AddrByte */
N    /* SI_AddrByte = 0 */
N    QSPIC_64KB   = 0,                         /*  64 KB */
N    QSPIC_128KB  = 1,                         /* 128 KB */
N    QSPIC_256KB  = 2,                         /* 256 KB */
N    QSPIC_512KB  = 3,                         /* 512 KB */
N    QSPIC_1MB    = 4,                         /*   1 MB */
N    QSPIC_2MB    = 5,                         /*   2 MB */
N    QSPIC_4MB    = 6,                         /*   4 MB */
N    QSPIC_8MB    = 7,                         /*   8 MB */
N    QSPIC_16MB   = 8,                         /*  16 MB */
N    /* SI_AddrByte = 1 */
N    QSPIC_32MB   = 9,                         /*  32 MB */
N    QSPIC_64MB   = 10,                        /*  64 MB */
N    QSPIC_128MB  = 11,                        /* 128 MB */
N    QSPIC_256MB  = 12                         /* 256 MB */
N} qspic_density_e;
N
N/* SPI data capture edge */
Ntypedef enum tag_qspic_sdce_e
N{
N    QSPIC_1ST_POS_EDGE = 0x00,              /* data capture @ 1st positive edge */
N    QSPIC_1ST_NEG_EDGE = 0x01,              /* data capture @ 1st negative edge */ 
N    QSPIC_2ND_POS_EDGE = 0x02,              /* data capture @ 2nd positive edge */
N    QSPIC_2ND_NEG_EDGE = 0x03               /* data capture @ 2nd negative edge */ 
N} qspic_sdce_e;
N
N/* SPI program access opcode */
Ntypedef enum tag_qspic_opcode_e
N{
N    /* read */
N    QSPIC_OPCODE_FAST_READ   = 0x0B,            /* Fast READ opcode */
N    QSPIC_OPCODE_READ_ID     = 0x90,            /* Read ID */   
N    QSPIC_OPCODE_READ_EXTID  = 0x9F,            /* Read Extended ID */
N    /* write control */
N    QSPIC_OPCODE_WRITE_EN    = 0x06,            /* WRITE enable */
N    QSPIC_OPCODE_WRITE_DIS   = 0x04,            /* WRITE disable */
N    /* erase */
N    QSPIC_OPCODE_4KBS_ERASE  = 0x20,            /* 4kB sector ERASE */
N    QSPIC_OPCODE_8KBS_ERASE  = 0x40,            /* 8kB sector ERASE */
N    QSPIC_OPCODE_64KBS_ERASE = 0xD8,            /* 64kB sector ERASE */
N    QSPIC_OPCODE_CHIP_ERASE  = 0xC7,            /* full chip ERASE opcode */
N    /* program */
N    QSPIC_OPCODE_PAGE_PGRM   = 0x02,            /* Page PROGRAM opcode */
N    /* Status */
N    QSPIC_OPCODE_RFST_READ   = 0x70,            /* Read Flag status register */
N    QSPIC_OPCODE_STS_READ    = 0x05,            /* Status read opcode */
N    QSPIC_OPCODE_STS_CLEAR   = 0x30,            /* Status clear */
N    /* Configuration read */
N    QSPIC_OPCODE_CFG_READ    = 0x35,            /* Configuration register read */
N    QSPIC_OPCODE_CFGM_READ   = 0x15,            /* Configuration register read */
N    /* Register write */
N    QSPIC_OPCODE_WRITE_REG   = 0x01,            /* Write Configuration & Status register opcode */
N    /* Release deep power down */
N    QSPIC_OPCODE_RELEASE_DP  = 0xAB,            /* Release from deep power down mode */
N    /* set 3/4 byte mode */
N    QSPIC_OPCODE_3_BYTE_MODE  = 0xE9,           /* Enable 3-byte mode */
N    QSPIC_OPCODE_4_BYTE_MODE  = 0xB7            /* Enable 4-byte mode */
N} qspic_opcode_e;
N
N/* Enable/disable */
Ntypedef enum tag_qspic_en_e
N{
N    QSPIC_DISABLE = 0x0U,                       /* Disable */
N    QSPIC_ENABLE  = 0x1U                        /* Enable */
N} qspic_en_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/* SPI direct read control strucutre */
Ntypedef struct tag_qspic_direct_rd_ctrl_st
N{
N    qspi_CmdOp_e     eCmd;                  /* Quad-SPI command code   */
N    uint32_t         u32DummyByteCnt;       /* Number of dummy bytes   */
N    qspi_AddrByte_e  eAddrByteCnt;          /* Address mode 3-/4-Byte  */
N    qspi_IOCtrl_e    eSpiDatIOCtrl;         /* SPI Data I/O control    */
N    qspi_IOCtrl_e    eSpiDmyIOCtrl;         /* SPI Dummy I/O control   */
N    qspi_IOCtrl_e    eSpiAdrIOCtrl;         /* SPI Address I/O control */
N} qspic_direct_rd_ctrl_st;
N
Ntypedef struct tag_qspic_directconfig_st
N{
N    uint16_t                u16FlashBaseAddress;   /* physical base address (bits [31:16]), upper 4 bits are fixed and don't care */
N    qspic_density_e         eFlashDensity;         /* flash density */
N    qspic_en_e              eEnableMemMapRd;       /* enable memory map read */
N    qspic_direct_rd_ctrl_st stRdCtrl;              /* SPI mode read */
N    qspic_en_e              eWIPEnable;            /* WIP bit enable */
N    uint8_t                 u8CSTime;              /* deassertion time */
N    qspic_sdce_e            eEdge;                 /* capture edge */
N} qspic_directconfig_st;
N
Ntypedef struct tag_qspic_prgconfig_st
N{
N    uint8_t             u8CSTime;           /* deassertion time */
N    qspic_sdce_e        eEdge;              /* capture edge */
N    qspi_AddrByte_e     eAddrByteCnt;       /* Address mode 3-/4-Byte  */
N} qspic_prgconfig_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vQSPIC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigureDirectControl
N *
N * Purpose:       does complete configuration for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                pstDirConf     pointer to configuration for direct access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   The base address must be aligned on a boundary that is an integer
N *                 multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigureDirectControl(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_directconfig_st *pstDirConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigurePrgControl
N *
N * Purpose:       does complete configuration for program access
N *
N * Inputs:        eController     flash controller no.
N *                pstPrgConf      pointer to configuration for program access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigurePrgControl(qspic_cntrl_e eController, qspic_prgconfig_st *pstPrgConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashBaseAddress
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController           flash controller no.
N *                eDevice               device no.
N *                u16FlashBaseAddress   physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashBaseAddress 
N *
N * Purpose:       Reads memory base address of flash.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t * u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashDensity
N *
N * Purpose:       set flash size
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eFlashDensity    flash density (size)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashDensity 
N *
N * Purpose:       Reads flash density.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *
N * Outputs:       flash density (size)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e * eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableDirectMemMapRd 
N *
N * Purpose:       Enables and disables read access.
N *                If disabled, the SPI Flash device is not memory-mapped.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eEnableMemMap    enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableDirectMemMapRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectMemMapStatusRd 
N *
N * Purpose:       Reads status of direct memory map read.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectMemMapStatusRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashMemMap
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController            flash controller no.
N *                eDevice                device no.
N *                u16FlashBaseAddress    physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *                eFlashDensity          flash density (size)
N *                eEnableMemMapRd        enable/disable read
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashMemMap(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress,
N                                      qspic_density_e eFlashDensity, qspic_en_e eEnableMemMapRd);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetReadCtrl  
N *
N * Purpose:       specifies the configuration of the read command 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u32Ctrl        read control value 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   specifies the configuration of the read command
N *                that the hardware sequencer should issue to an
N *                SPI Flash device for direct read accesses.
N *                It affects Dual I/O and Quad I/O reads
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetReadCtrl 
N *
N * Purpose:       Reads the configuration of the read command.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       read control value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t * u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectEnableWIPPolling      
N *
N * Purpose:       Enables and disables the polling of the WIP bit of the
N *                status register in the SPI Flash (until the SPI Flash write
N *                is completed) before issuing a read command to it. 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectEnableWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetStatusWIPPolling 
N *
N * Purpose:       Reads Status of WIP polling bit.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetStatusWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetCSDeassertionTime
N *
N * Purpose:       Specifies the deassertion time of SPI_CS_N for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetCSDeassertionTime 
N *
N * Purpose:       Reads Direct Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetCSDeassertionTime
N *
N * Purpose:       specifies the deassertion time of SPI_CS_0/1 for program access
N *
N * Inputs:        eController    flash controller no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time) 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetCSDeassertionTime(qspic_cntrl_e eController, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetCSDeassertionTime 
N *
N * Purpose:       Reads Program Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetCSDeassertionTime(qspic_cntrl_e eController, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEdge          1st pos. edge / 1st neg. edge 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetDataCaptureEdge 
N *
N * Purpose:       Reads Direct Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for programm access
N *
N * Inputs:        eController    flash controller no.
N *                eEdge          capture edge: 1st pos. edge / 1st neg. edge
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetDataCaptureEdge 
N *
N * Purpose:       Reads Program Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Capture edge: 1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableInterrupt      
N *
N * Purpose:       Enables and disables SPI interrupts generated on completion
N *                of a program register access cycle 
N *
N * Inputs:        eController    flash controller no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   If enabled, generates an interrupt when the
N *                SPI Cycle Done bit is set to 1.
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableInterrupt(qspic_cntrl_e eController, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetInterruptStatus 
N *
N * Purpose:       Reads Interrupt status.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Interrupt Status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetInterruptStatus(qspic_cntrl_e eController, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       C_TRUE or C_FALSE
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_IsSpiCycleDone(qspic_cntrl_e eController, bool_t * bResult);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleInPgrs 
N *
N * Purpose:       checks if SPI cycle is in progress 
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleInPgrs(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: CC_TRUE or C_FALSE
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleDone(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WaitForCompletion 
N *
N * Purpose:       Wait for cycle completion of previous program access
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WaitForCompletion(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusFlagRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device for Micron
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusFlagRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmClearStatus 
N *
N * Purpose:       Clear the status register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmClearStatus(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmReleaseDP 
N *
N * Purpose:       Release from deep sleep power mode
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmReleaseDP(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationRead 
N *
N * Purpose:       Retrieve the current value of the configuration register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Configuration);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationWrite 
N *
N * Purpose:       Modify the value of the Status and Configuration registers
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8Status       Desired value of the Status register  
N *                u8Conf         Desired value of the Configuration register  
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationWrite(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Status,  uint8_t u8Conf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteEnable
N *
N * Purpose:       Enable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteEnable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteDisable
N *
N * Purpose:       Disable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteDisable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSectErase
N *
N * Purpose:       SPI Flash Sector Erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                eOpcode           Sector erase opcode
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSectErase(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_opcode_e eOpcode, uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmChipErase
N *
N * Purpose:       Full Chip Erase
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmChipErase(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmPagePgrm
N *
N * Purpose:       Programming 256 bytes of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer to be written into
N *                                  flash device
N *
N * Outputs:       
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmPagePgrm(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmFastRead 
N *
N * Purpose:       Perform fast reading of 256 byte of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *
N * Outputs:       pu8Data           pointer to data buffer 
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmFastRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetID 
N *
N * Purpose:       Retrieve device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8ManID          Manufacturer ID
N *                pu8DevID          Device ID
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8ManID, uint8_t* const pu8DevID);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetExtendedID 
N *
N * Purpose:       Retrieve extended device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetExtendedID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WriteByte 
N *
N * Purpose:       Write one Byte to the device
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Value           value to be send
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WriteByte(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetRegister 
N *
N * Purpose:       Retrieve content of register
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteRegister 
N *
N * Purpose:       Write data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *                pu8Information    Handle to the infromation buffer
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      u32QSPIC_DirectReadWord
N *
N * Purpose:       Perform reading of one word from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: read word
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32QSPIC_DirectReadWord(uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst4
N *
N * Purpose:       Perform reading 4 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst4(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst8
N *
N * Purpose:       Perform reading 8 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst8(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************/
N
N
N#endif /* QSPIC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "ccr.h"
L 1 "..\..\..\..\lldd\inc\ccr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : CCR Low-level register
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : CCR
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.22 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CCR_LLDD_H
N#define CCR_LLDD_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_CCR_H_REVISION     "$Revision: 1.22 $"
N#define LLDD_CCR_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N/* CCR unlock key value */
N#define CCR_KEY_VAL 0xA5C0F17BU
N
N/* CCR PDS unlock macro */
N#define vCCR_PDS_UNLOCK()(vSetCCR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/* CCR PDH unlock macro */
N#define vCCR_PDH_UNLOCK()(vSetPDHR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
Ntypedef enum tag_ccr_enable_e
N{
N  CCR_DISABLE = 0,  /* disable */
N  CCR_ENABLE  = 1   /* enable  */
N} ccr_enable_e;
N
Ntypedef enum tag_ccr_alarm_no_e
N{
N  CCR_ALARM_0  = 0,   /* Alarm 0 */
N  CCR_ALARM_1  = 1   /* Alarm 1  */
N} ccr_alarm_no_e;
N
N/* Controller selection */
Ntypedef enum tag_ccr_cntrl_e
N{
N    CCR_QSPI_0        =  0,   /* QSPI 0 */
N    CCR_QSPI_1        =  1,   /* QSPI 1 */
N    CCR_QSPI_INT      =  2,   /* QSPI Internal */
N    CCR_SDRAM         =  3,   /* SDRAM */
N    CCR_I2S           =  4,   /* I2S */
N    CCR_GDC_0         =  5,   /* GDC 0 */
N    CCR_GDC_1         =  6,   /* GDC 1 */
N    CCR_DMA           =  7,   /* DMA */
N    CCR_PARFLASH      =  8,   /* Parallel Flash */
N    CCR_DAP           =  9,   /*  */
N    CCR_GA            = 10,   /* GA Engine */
N    CCR_PNG           = 11,   /* PNG Decoder */
N    CCR_FG            = 12,   /* Framegrabber */
N    CCR_MLB           = 13,   /* MLB */
N    CCR_SMC           = 14,   /* Stepper Motor */
N    CCR_HSPWM         = 15,   /* HSPWM */
N    CCR_I2SM          = 16,   /* I2SM */
N    CCR_TSM           = 17,   /* TSM */
N    CCR_TRACE         = 18,   /* Trace */
N    CCR_320MHz        = 19    /* 320MHz */
N} ccr_cntrl_e;
N
N/* Modulation type */
Ntypedef enum tag_ccr_modulated_clk_e
N{
N    CCR_MODULATED     = 0,    /* modulated clock */
N    CCR_NON_MODULATED = 1     /* non modulated clock */
N} ccr_modulated_clk_e;
N
N/*  */
Ntypedef enum tag_ccr_clock_type_e
N{
N    CCR_MODULATED_GDC0       = 0,    /* Modulated clock for GDC0 */
N    CCR_MODULATED_GDC1       = 1,    /* Modulated clock for GDC1 */
N    CCR_NON_MODULATED_GDC0   = 2,    /* Non modulated clock for GDC0 */
N    CCR_NON_MODULATED_GDC1   = 3,    /* Non modulated clock for GDC1 */
N    CCR_DOTCLKIN             = 4,    /* DOTCLKIN for GDC0 or GDC1 */
N    CCR_MODULATED_I2S        = 5,    /* Modulated clock for I2S */
N    CCR_NON_MODULATED_I2S    = 6,    /* Non modulated clock for I2S */
N    CCR_I2SMCLKIN            = 7,    /* I2SMCLKIN for I2S */
N    CCR_MODULATED_320MHZ     = 8,    /* Modulated clock for 320MHz */
N    CCR_NON_MODULATED_320MHZ = 9     /* Non modulated clock for 320MHz */
N} ccr_clock_type_e;
N
N/* Clock divider values (input clock: 900MHz) */
Ntypedef enum tag_ccr_clk_freq_e
N{
N    CCR_CLKDIV_112_5MHz =  8,    /* 112,5 MHz output clk */
N    CCR_CLKDIV_100_0MHz =  9,    /* 100,0 MHz output clk */
N    CCR_CLKDIV_90_0MHz  = 10,    /*  90,0 MHz output clk */
N    CCR_CLKDIV_81_8MHz  = 11,    /*  81,8 MHz output clk */
N    CCR_CLKDIV_75_0MHz  = 12,    /*  75,0 MHz output clk */
N    CCR_CLKDIV_69_2MHz  = 13,    /*  69,2 MHz output clk */
N    CCR_CLKDIV_64_3MHz  = 14,    /*  64,3 MHz output clk */
N    CCR_CLKDIV_60_0MHz  = 15,    /*  60,0 MHz output clk */
N    CCR_CLKDIV_56_3MHz  = 16,    /*  56,3 MHz output clk */
N    CCR_CLKDIV_52_9MHz  = 17,    /*  52,9 MHz output clk */
N    CCR_CLKDIV_50_0MHz  = 18,    /*  50,0 MHz output clk */
N    CCR_CLKDIV_47_4MHz  = 19,    /*  47,4 MHz output clk */
N    CCR_CLKDIV_45_0MHz  = 20,    /*  45,0 MHz output clk */
N    CCR_CLKDIV_42_9MHz  = 21,    /*  42,9 MHz output clk */
N    CCR_CLKDIV_40_9MHz  = 22,    /*  40,9 MHz output clk */
N    CCR_CLKDIV_39_1MHz  = 23,    /*  39,1 MHz output clk */
N    CCR_CLKDIV_37_5MHz  = 24,    /*  37,5 MHz output clk */
N    CCR_CLKDIV_36_0MHz  = 25,    /*  36,0 MHz output clk */
N    CCR_CLKDIV_34_6MHz  = 26,    /*  34,6 MHz output clk */
N    CCR_CLKDIV_33_3MHz  = 27,    /*  33,3 MHz output clk */
N    CCR_CLKDIV_32_1MHz  = 28,    /*  32,1 MHz output clk */
N    CCR_CLKDIV_31_0MHz  = 29,    /*  31,0 MHz output clk */
N    CCR_CLKDIV_30_0MHz  = 30,    /*  30,0 MHz output clk */
N    CCR_CLKDIV_29_0MHz  = 31,    /*  29,0 MHz output clk */
N    CCR_CLKDIV_28_1MHz  = 32,    /*  28,1 MHz output clk */
N    CCR_CLKDIV_27_2MHz  = 33,    /*  27,2 MHz output clk */
N    CCR_CLKDIV_26_4MHz  = 34,    /*  26,4 MHz output clk */
N    CCR_CLKDIV_25_7MHz  = 35,    /*  25,7 MHz output clk */
N    CCR_CLKDIV_25_0MHz  = 36,    /*  25,0 MHz output clk */
N    CCR_CLKDIV_24_3MHz  = 37,    /*  24,3 MHz output clk */
N    CCR_CLKDIV_23_6MHz  = 38,    /*  23,6 MHz output clk */
N    CCR_CLKDIV_23_0MHz  = 39,    /*  23,0 MHz output clk */
N    CCR_CLKDIV_22_5MHz  = 40     /*  22,5 MHz output clk */
N} ccr_clk_freq_e;
N
N/* Clock stability */
Ntypedef enum tag_ccr_clock_stability_e
N{
N    CCR_CLOCK_NOT_STABLE     = 0,    /* Clock is not stable */
N    CCR_CLOCK_STABLE         = 1,    /* Clock is stable */
N    CCR_CLOCK_STABILITY_FAIL = 2     /* Clock stability faild */
N} ccr_clock_stability_e;
N
N/* Clocks */
Ntypedef enum tag_ccr_clocks_e
N{
N    CCR_OSC10M            = 0,    /* 10M clock */
N    CCR_OSC32K            = 1,    /* 32K clock */
N    CCR_RC100K            = 2,    /* RC100K clock */
N    CCR_MODULATED_PLL     = 3,    /* modulated PLL */
N    CCR_NON_MODULATED_PLL = 4     /* non-modulated PLL */
N} ccr_clocks_e;
N
N/* Reset types */
Ntypedef enum tag_reset_type_e
N{
N    CCR_FULL_RST    = 0,    /* Software full reset */
N    CCR_DBG_RST     = 1,    /* Debug reset */
N    CCR_SW_PART_RST = 2     /* Software part reset */
N} ccr_reset_type_e;
N
N/* target device mode */
Ntypedef enum tag_ccr_device_mode_e
N{
N    CCR_DEVICE_MODE_TRANSITION = 0x00000000,    /* M_PLL */
N    CCR_DEVICE_MODE_M_PLL      = 0x005C0001,    /* M_PLL */
N    CCR_DEVICE_MODE_M_OSC10    = 0x005C0002,    /* M_OSC10 */
N    CCR_DEVICE_MODE_STB_OSC10  = 0x005C0004,    /* STB_OSC10 */
N    CCR_DEVICE_MODE_SLP_OSC10  = 0x005C0008,    /* SLP_OSC10 */
N    CCR_DEVICE_MODE_SLP_RC10   = 0x005C0010,    /* SLP_RC10 */
N    CCR_DEVICE_MODE_STOP_R     = 0x005C0020,    /* STOP_R */
N    CCR_DEVICE_MODE_STOP       = 0x005C0040     /* STOP */
N} ccr_device_mode_e;
N
N/* Interupts */
Ntypedef enum tag_ccr_interrupts_e
N{
N    CCR_INTERRUPTS_STATE_CHANGE = 0,    /* state change interrupt*/
N    CCR_INTERRUPTS_ALARM_0      = 1,    /* alarm comparator 0 interrupt */
N    CCR_INTERRUPTS_ALARM_1      = 2,    /* alarm comparator 1 interrupt */
N    CCR_INTERRUPTS_BECC         = 3,    /* backup RAM ECC interrupt */
N    CCR_INTERRUPTS_MECC         = 4     /* main memory ECC interrupt */
N} ccr_interrupts_e;
N
N/* Interrupt occurred */
Ntypedef enum tag_ccr_int_occurred_e
N{
N  CCR_INT_NOT_OCCURRED = 0,  /* interrupt did not occur */
N  CCR_INT_OCCURRED     = 1   /* interrupt occurred */
N} ccr_int_occurred_e;
N
N/* Operation mode type */
Ntypedef enum tag_ccr_operation_mode_type_e
N{
N    CCR_SSCG_MODE_DECIMAL_FACTOR = 0,    /* Decimal factor mode */
N    CCR_SSCG_MODE_INTEGER_FACTOR = 1     /* Integer factor mode */
N} ccr_operation_mode_type_e;
N
N/* Modulation direction */
Ntypedef enum tag_ccr_modulation_direction
N{
N    CCR_SSCG_MD_DOWN_SPREAD   = 0,    /* modulation direction is down spread */
N    CCR_SSCG_MD_CENTER_SPREAD = 1     /* modulation direction is up spread */
N} ccr_modulation_direction;
N
N/* Feedback division ratio prescaler value */
Ntypedef enum tag_ccr_fdr_prescaler_e
N{
N    CCR_FDR_PRESCALER_1 = 0,    /* feedback division ratio not doubled */
N    CCR_FDR_PRESCALER_2 = 1     /* feedback division ratio doubled */
N} ccr_fdr_prescaler_e;
N
N/* Watchdof timer alarm output configuration */
Ntypedef enum tag_ccr_wdt_alarm_type_e
N{
N    CCR_WDT_ALARM_AS_NMI   = 0,    /* watchdog timer alarm as watchdog timer NMI */
N    CCR_WDT_ALARM_AS_RESET = 1     /* watchdog timer alarm as watchdog timer RESET */
N} ccr_wdt_alarm_type_e;
N
N/* CAN modes */
Ntypedef enum tag_ccr_can_mode_e
N{                                     /*             tranceiver , combined channels, sepatate channels, pin pairs, description */
N    CCR_CAN_MODE_T_1_1_1_1  = 0x0,    /* CAN mode  1:     yes   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_T_2_1_1    = 0x1,    /* CAN mode  2:     yes   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_T_2_2      = 0x2,    /* CAN mode  3:     yes   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_T_3_1      = 0x3,    /* CAN mode  4:     yes   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_T_ALL      = 0x4,    /* CAN mode  5:     yes   ,         4        ,         -        ,    1     , all to one  */
N    CCR_CAN_MODE_NT_1_1_1_1 = 0x8,    /* CAN mode  5:      no   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_NT_2_1_1   = 0x9,    /* CAN mode  6:      no   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_NT_2_2     = 0xA,    /* CAN mode  7:      no   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_NT_3_1     = 0xB,    /* CAN mode  8:      no   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_NT_ALL     = 0xC,    /* CAN mode  9:      no   ,         4        ,         -        ,    1     , all to all  */
N    CCR_CAN_MODE_NT_INTER   = 0xF     /* CAN mode 10:      no   ,         -        ,         4        ,    -     , internal    */
N} ccr_can_mode_e;
N
N/* ECC modes */
Ntypedef enum tag_ccr_ecc_mode_e
N{
N    CCR_ECC_MODE_256KB  = 0,    /* 256KB with ECC */
N    CCR_ECC_MODE_128KB  = 2,    /* 128KB with ECC */
N    CCR_ECC_MODE_NO_ECC = 3     /* without ECC */
N} ccr_ecc_mode_e;
N
N/* TBIO channel */
Ntypedef enum tag_ccr_tbio_channel_e
N{
N    CCR_TBIO_0 = 0,    /* TBIO channel 0 */
N    CCR_TBIO_1 = 1,    /* TBIO channel 1 */
N    CCR_TBIO_2 = 2,    /* TBIO channel 2 */
N    CCR_TBIO_3 = 3,    /* TBIO channel 3 */
N    CCR_TBIO_4 = 4,    /* TBIO channel 4 */
N    CCR_TBIO_5 = 5,    /* TBIO channel 5 */
N    CCR_TBIO_6 = 6,    /* TBIO channel 6 */
N    CCR_TBIO_7 = 7,    /* TBIO channel 7 */
N    CCR_TBIO_8 = 8,    /* TBIO channel 8 */
N    CCR_TBIO_9 = 9     /* TBIO channel 9 */
N} ccr_tbio_channel_e;
N
N/* TBIO port direction */
Ntypedef enum tag_ccr_tbio_direction_e
N{
N    CCR_TBIO_IN  = 0,    /* TBIO pin as input */
N    CCR_TBIO_OUT = 1     /* TBIO pin as output */
N} ccr_tbio_direction_e;
N
N/* TBIN0 signal select for Complex Timer 4 */
Ntypedef enum tag_ccr_tbin_source_ctimer4_e
N{
N    CCR_TBIN_CTIMER4_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER4_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER4_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER4_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER4_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER4_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER4_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER4_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER4_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER4_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER4_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER4_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER4_GDC_PWMOUT0    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is SIN_PLUS0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is SIN_MINUS0 */
N} ccr_tbin_source_ctimer4_e;
N
N/* TBIN0 signal select for Complex Timer 5 */
Ntypedef enum tag_ccr_tbin_source_ctimer5_e
N{
N    CCR_TBIN_CTIMER5_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER5_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER5_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER5_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER5_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER5_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER5_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER5_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER5_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER5_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER5_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER5_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER5_GDC_PWMOUT1    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT1 */
N    CCR_TBIN_CTIMER5_GDC_COS_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is COS_PLUS0 */
N    CCR_TBIN_CTIMER5_GDC_COS_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is COS_MINUS0 */
N} ccr_tbin_source_ctimer5_e;
N
N/* Synchronisation between GDC0 and GDC1 */
Ntypedef enum tag_ccr_gdc_sync_e
N{
N    CCR_GDC_SYNC_INDEPENDANT   = 0,    /* independant operation of GDC1 */
N    CCR_GDC_SYNC_GDC1_USE_GDC0 = 1     /* GDC1 uses GDC0 synchronisation signals */
N} ccr_gdc_sync_e;
N
N/* NOR channel */
Ntypedef enum tag_ccr_nor_channel_e
N{
N    CCR_NOR_CHANNEL_0 = 0,    /* NOR channel 0 */
N    CCR_NOR_CHANNEL_1 = 1     /* NOR channel 1 */
N} ccr_nor_channel_e;
N
N/* NAND channel */
Ntypedef enum tag_ccr_nand_channel_e
N{
N    CCR_NAND_CHANNEL_0 = 0,    /* NAND channel 0 */
N    CCR_NAND_CHANNEL_1 = 1     /* NAND channel 1 */
N} ccr_nand_channel_e;
N
N/* SRAM channel */
Ntypedef enum tag_ccr_sram_channel_e
N{
N    CCR_SRAM_CHANNEL_0 = 0,    /* SRAM channel 0 */
N    CCR_SRAM_CHANNEL_1 = 1,    /* SRAM channel 1 */
N    CCR_SRAM_CHANNEL_2 = 2,    /* SRAM channel 2 */
N    CCR_SRAM_CHANNEL_3 = 3     /* SRAM channel 3 */
N} ccr_sram_channel_e;
N
N/* Complex timer */
Ntypedef enum tag_ccr_complex_timer_e
N{
N    CCR_COMPLEX_TIMER_0_TO_5 = 0,    /* Complex timer 0 to 5 */
N    CCR_COMPLEX_TIMER_6_TO_9 = 1     /* Complex timer 6 to 9 */
N} ccr_complex_timer_e;
N
N/* Device version */
Ntypedef enum tag_ccr_device_version_e
N{
N    DEVICE_CAP_BT_1  = 0,    /* TMPR461XBG-300 (BGA-328, no SIP Flash)   */
N    DEVICE_CAP_C     = 1,    /* TMPR462XBG-300 (BGA-328, with SIP Flash) */
N    DEVICE_CAP_BT_0  = 2,    /* TMPR460XBG-300 (BGA-244, no SIP Flash)   */
N    DEVICE_INVALID   = 3     /* Reserved   */
N} ccr_device_version_e;
N
N/* SIP Flash size */
Ntypedef enum tag_ccr_SIPflash_size_e
N{
N    CCR_SIP_FLASH_SIZE_2MB  = 0,    /*  2MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_4MB  = 1,    /*  4MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_8MB  = 2,    /*  8MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_16MB = 3     /* 16MB SIP FLASH size */
N} ccr_SIPflash_size_e;
N
Ntypedef enum tag_processor_device_e
N{
N    CCR_CR4 = 0,    /* processor R4 */
N    CCR_M3  = 1     /* processor M3 */
N} ccr_processor_device_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_current_trim_e
N{
N    CCR_VREG_CURRENT_TRIM_M_40_PROZ = 4,    /* -40% */
N    CCR_VREG_CURRENT_TRIM_M_30_PROZ = 5,    /* -30% */
N    CCR_VREG_CURRENT_TRIM_M_20_PROZ = 6,    /* -20% */
N    CCR_VREG_CURRENT_TRIM_M_10_PROZ = 7,    /* -10% */
N    CCR_VREG_CURRENT_TRIM_0_PROZ    = 0,    /*   0% */
N    CCR_VREG_CURRENT_TRIM_P_10_PROZ = 1,    /*  10% */
N    CCR_VREG_CURRENT_TRIM_P_20_PROZ = 2,    /*  20% */
N    CCR_VREG_CURRENT_TRIM_P_30_PROZ = 3     /*  30% */
N} ccr_vreg_current_trim_e;
N
N/* Voltage regulator reference voltage trim */
Ntypedef enum tag_vreg_ref_voltage_trim_e
N{
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_5_PROZ = 15,    /* -7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_0_PROZ = 14,    /* -7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_5_PROZ = 13,    /* -6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_0_PROZ = 12,    /* -6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_5_PROZ = 11,    /* -5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_0_PROZ = 10,    /* -5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_5_PROZ =  9,    /* -4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_0_PROZ =  8,    /* -4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_5_PROZ =  7,    /* -3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_0_PROZ =  6,    /* -3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_5_PROZ =  5,    /* -2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_0_PROZ =  4,    /* -2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_5_PROZ =  3,    /* -1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_0_PROZ =  2,    /* -1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_0_5_PROZ =  1,    /* -0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_0_PROZ     =  0,    /*    0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_0_5_PROZ = 31,    /* 0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_0_PROZ = 30,    /* 1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_5_PROZ = 29,    /* 1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_0_PROZ = 28,    /* 2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_5_PROZ = 27,    /* 2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_0_PROZ = 26,    /* 3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_5_PROZ = 25,    /* 3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_0_PROZ = 24,    /* 4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_5_PROZ = 23,    /* 4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_0_PROZ = 22,    /* 5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_5_PROZ = 21,    /* 5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_0_PROZ = 20,    /* 6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_5_PROZ = 19,    /* 6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_0_PROZ = 18,    /* 7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_5_PROZ = 17,    /* 7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_8_0_PROZ = 16     /* 8.0% */
N} ccr_vreg_ref_voltage_trim_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_temperature_trim_e
N{
N    CCR_VREG_TEMPERATURE_TRIM_M_60_DEGC = 4,    /* -60degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_50_DEGC = 5,    /* -50degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_40_DEGC = 6,    /* -40degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_25_DEGC = 7,    /* -25degC */
N    CCR_VREG_TEMPERATURE_TRIM_0_DEGC    = 0,    /*   0degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_25_DEGC = 1,    /*  25degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_50_DEGC = 2,    /*  50degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_70_DEGC = 3     /*  70degC */
N} ccr_vreg_temperature_trim_e;
N
N/* Oscillator adjustment */
Ntypedef enum tag_osc_adjustment_e
N{
N    CCR_OSC_ADJUSTMENT_M_8 =  8,    /* -8 */
N    CCR_OSC_ADJUSTMENT_M_7 =  9,    /* -7 */
N    CCR_OSC_ADJUSTMENT_M_6 = 10,    /* -6 */
N    CCR_OSC_ADJUSTMENT_M_5 = 11,    /* -5 */
N    CCR_OSC_ADJUSTMENT_M_4 = 12,    /* -4 */
N    CCR_OSC_ADJUSTMENT_M_3 = 13,    /* -3 */
N    CCR_OSC_ADJUSTMENT_M_2 = 14,    /* -2 */
N    CCR_OSC_ADJUSTMENT_M_1 = 15,    /* -1 */
N    CCR_OSC_ADJUSTMENT_0   =  0,    /*  0 */
N    CCR_OSC_ADJUSTMENT_P_1 =  1,    /*  1 */
N    CCR_OSC_ADJUSTMENT_P_2 =  2,    /*  2 */
N    CCR_OSC_ADJUSTMENT_P_3 =  3,    /*  3 */
N    CCR_OSC_ADJUSTMENT_P_4 =  4,    /*  4 */
N    CCR_OSC_ADJUSTMENT_P_5 =  5,    /*  5 */
N    CCR_OSC_ADJUSTMENT_P_6 =  6,    /*  6 */
N    CCR_OSC_ADJUSTMENT_P_7 =  7     /*  7 */
N} ccr_osc_adjustment_e;
N
N/* Threshold for power-good sensing */
Ntypedef enum tag_threshold_power_good_sensing_e
N{
N    CCR_POWER_GOOD_SENSING_0 = 0,    /* threshold 0 */
N    CCR_POWER_GOOD_SENSING_1 = 1,    /* threshold 1 */
N    CCR_POWER_GOOD_SENSING_2 = 2,    /* threshold 2 */
N    CCR_POWER_GOOD_SENSING_3 = 3,    /* threshold 3 */
N    CCR_POWER_GOOD_SENSING_4 = 7,    /* threshold 4 */
N    CCR_POWER_GOOD_SENSING_5 = 6,    /* threshold 5 */
N    CCR_POWER_GOOD_SENSING_6 = 5,    /* threshold 6 */
N    CCR_POWER_GOOD_SENSING_7 = 4     /* threshold 7 */
N} ccr_threshold_power_good_sensing_e;
N
N/* SMC IO level */
Ntypedef enum tag_smc_io_level_e
N{
N    CCR_SMC_IO_LEVEL_5V0 = 0,    /* operate with 5V */
N    CCR_SMC_IO_LEVEL_3V3 = 1     /* operate with 3.3V */
N} ccr_smc_io_level_e;
N
N/* Interrupts */
Ntypedef enum tag_system_interrupt_e
N{
N    CCR_OSC10M_CLOCK_MISSING_INT = 0x00000001,    /* OSC10MHz */
N    CCR_OSC32K_CLOCK_MISSING_INT = 0x00000100,    /* OSC32KHz */
N    CCR_EROR_INT_0               = 0x00010000,    /* Error interrupt 0 */
N    CCR_EROR_INT_1               = 0x00020000,    /* Error interrupt 1 */
N    CCR_EROR_INT_2               = 0x00040000,    /* Error interrupt 2 */
N    CCR_BACKUP_ECC_RAM_INT       = 0x01000000,    /* Backup ECC-RAM */
N    CCR_MAIN_MEMORY_ECC_RAM_INT  = 0x02000000,    /* Main memory ECC-RAM */
N    CCR_STPU_INT                 = 0x04000000,    /* STPU */
N    CCR_WDT_INT                  = 0x08000000,    /* WDT */
N    CCR_IO_INT                   = 0x10000000     /* IO */
N} ccr_system_interrupt_e;
N
N/* ECC */
Ntypedef enum tag_ecc_e
N{
N    CCR_BACKUP_RAM_ECC  = 0,    /* Backup RAM ECC */
N    CCR_MAIN_MEMORY_ECC = 1     /* Main memory ECC */
N} ccr_ecc_e;
N
N/* ECC interrupt type */
Ntypedef enum tag_ecc_interrupt_type_e
N{
N    CCR_ECC_SYSC_INTR    = 0,    /* SYSC_INTR will be generated */
N    CCR_ECC_SYSC_NMI     = 1,    /* SYSC_NMI will be generated */
N    CCR_ECC_SW_FULL_RSTN = 2     /* SW_FULL_RSTN will be generated */
N} ccr_ecc_interrupt_type_e;
N
N/* Modes */
Ntypedef enum tag_modes_e
N{
N    CCR_STB_MODE      = 0,    /* mission state entered from STB_ISC10 */
N    CCR_SLPOSC10_MODE = 1,    /* mission state entered from SLP_OSC10 */
N    CCR_SLPRCOSC_MODE = 2,    /* mission state entered from SLP_RD100K */
N    CCR_STOPR_MODE    = 3,    /* mission state entered from STOP_R */
N    CCR_STOP_MODE     = 4     /* mission state entered from STOP */
N} ccr_modes_e;
N
N/* Wakeup attributes */
Ntypedef enum tag_wakeup_attribute_e
N{
N    CCR_LOW_LEVEL  = 0,    /* low level wakeup */
N    CCR_HIGH_LEVEL = 1,    /* high level wakeup */
N    CCR_FALL_EDGE  = 2,    /* falling edge wakeup */
N    CCR_RISE_EDGE  = 3     /* rising edge wakeup */
N} ccr_wakeup_attribute_e;
N
N/* Wakeup sources */
Ntypedef enum tag_wakeup_source_e
N{
N    CCR_WAKEUP_SOURCE_0     =  0,    /* wakeup source 0 */
N    CCR_WAKEUP_SOURCE_1     =  1,    /* wakeup source 1 */
N    CCR_WAKEUP_SOURCE_2     =  2,    /* wakeup source 2 */
N    CCR_WAKEUP_SOURCE_3     =  3,    /* wakeup source 3 */
N    CCR_WAKEUP_SOURCE_4     =  4,    /* wakeup source 4 */
N    CCR_WAKEUP_SOURCE_5     =  5,    /* wakeup source 5 */
N    CCR_WAKEUP_SOURCE_6     =  6,    /* wakeup source 6 */
N    CCR_WAKEUP_SOURCE_7     =  7,    /* wakeup source 7 */
N    CCR_WAKEUP_SOURCE_NMI   =  8,    /* wakeup source NMI */
N    CCR_WAKEUP_SOURCE_ALARM =  9,    /* wakeup source ALARM */
N    CCR_WAKEUP_SOURCE_RTC   = 10     /* wakeup source RTC */
N} ccr_wakeup_source_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* SSCG configuration structure */
Ntypedef struct tag_ccr_sscg_congig_st
N{
N    ccr_modulation_direction  eModulationDirection;
N    uint8_t                   u8ModulationCycleLengthFractionalN;
N    uint16_t                  u16ModulationDegree;
N} ccr_sscg_congig_st;
N
N/* SRAM bit error inspection configuration */
Ntypedef struct tag_ccr_sram_bit_error_insp_config_st
N{
N    uint8_t u8PosFirstError;     /* Position of first bit error to be injected in SRAM */
N    uint8_t u8PosSecondError;    /* Position of second bit error to be injected in SRAM */
N    uint8_t u8ByteSelect;        /* Byte select for bit error injection in SRAM */
N} ccr_sram_bit_error_insp_config_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vCCR_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IOPDHRevision  - pointer to PDH IO header revision string
N *                pau8IOPDHTag       - pointer to PDH IO header tag string
N *                pau8IOPDSRevision  - pointer to PDS IO header revision string
N *                pau8IOPDSTag       - pointer to PDS IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCCR_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IOPDHRevision, uint8_t** pau8IOPDHTag,
N                     uint8_t** pau8IOPDSRevision, uint8_t** pau8IOPDSTag);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eEn        CCR_Enable if clock should be enabled
N *                           CCR_Disable if clock should be disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetEnabledModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                peEn       status of module clock
N *                           CCR_Enable clock is enabled
N *                           CCR_Disable clock is disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetEnabledModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockFreq
N *
N * Purpose:       Configures clock frequency
N *                Clock frequency can be changed every time because no glitch
N *                should occur during switching. To be on the save side every
N *                action of the module should be finished.
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eFreq      Target frequency
N *                eModulated modulation type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockFreq(ccr_cntrl_e eCntrl, ccr_clk_freq_e eFreq, ccr_modulated_clk_e eModulated);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SelectClockType
N *
N * Purpose:       Select clock type
N *
N * Inputs:        eCntrl        Controller
N *                eClockType    Clock type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SelectClockType(ccr_cntrl_e eCntrl, ccr_clock_type_e eClockType);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPllClockStabilizationCompareValue
N *
N * Purpose:       Set Pll clock stabilization compare value
N *
N * Inputs:        u8Value    Stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPllClockStabilizationCompareValue(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      eCCR_ReadClockStability
N *
N * Purpose:       Read stability value of different oscillators and PLLs
N *
N * Inputs:        eClk        Clock or PLL
N *
N * Outputs:       none
N *
N * Return Values: clock stability value
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_clock_stability_e eCCR_ReadClockStability(ccr_clocks_e eClk);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GenerateReset
N *
N * Purpose:       Generate different types of reset
N *
N * Inputs:        eResetType     Reset type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GenerateReset(ccr_reset_type_e eResetType);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetDeviceMode
N *
N * Purpose:       Set device mode
N *
N * Inputs:        eMode     Device mode
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Transitions to STB_OSC10, SLP_OSC10, SLP_RC10, STOP_R
N *                and STOP are only possible in rom2ram-project without
N *                any probe connected.
N *
N ***************************************************************************/
Nint32_t i32CCR_SetDeviceMode(ccr_device_mode_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableInterrupt
N *
N * Purpose:       Enable interrupts
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableInterrupt(ccr_interrupts_e eInterrupt, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetInterruptStatusAll
N *
N * Purpose:       Read status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetInterruptStatus
N *
N * Purpose:       Read interrupt status
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       peIntOccurred  Status of interrupt
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetInterruptStatusSingle(ccr_interrupts_e eInterrupt, ccr_int_occurred_e * peIntOccurred);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearInterruptsAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearInterruptsAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearInterruptSingle(ccr_interrupts_e eInterrupt);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetCurrentDeviceMode
N *
N * Purpose:       Read current device mode
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Device mode
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_mode_e eCCR_GetCurrentDeviceMode(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSSCG
N *
N * Purpose:       Configure the SSCG and start it with new settings
N *
N * Inputs:        pstSSCGConfig    Pointer to SSCG-configuration
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSSCG(ccr_sscg_congig_st * pstSSCGConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetWDTAlarmType
N *
N * Purpose:       Configure WDT alarm type
N *
N * Inputs:        eAlarmType    WDT alarm type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetWDTAlarmType(ccr_wdt_alarm_type_e eAlarmType);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableBitErrorInjectionInRAM
N *
N * Purpose:       Enable or disable error injection in Back-up RAM
N *
N * Inputs:        eEn    Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableBitErrorInjectionInRAM(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPositionOfBitErrorInjectionInRAM
N *
N * Purpose:       Set bit positions to be injected in Back-up RAM
N *
N * Inputs:        u8FirstPosition     first position
N *                u8SecondPosition    second position
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPositionOfBitErrorInjectionInRAM(uint8_t u8FirstPosition, uint8_t u8SecondPosition);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetCANMode
N *
N * Purpose:       Set CAN mode
N *
N * Inputs:        eCANMode     CAN mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetCANMode(ccr_can_mode_e eCANMode);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetECCMode
N *
N * Purpose:       Set ECC mode
N *
N * Inputs:        eECCMode     ECC mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetECCMode(ccr_ecc_mode_e eECCMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetTBIODirection
N *
N * Purpose:       Set TBIO port direction
N *
N * Inputs:        eTBIOChannel     TBIO channel
N *                eDirection       Pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetTBIODirection(ccr_tbio_channel_e eTBIOChannel, ccr_tbio_direction_e eDirection);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer4
N *
N * Purpose:       Set signal for Complex Timer 4
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer4(ccr_tbin_source_ctimer4_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer5
N *
N * Purpose:       Set signal for Complex Timer 5
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer5(ccr_tbin_source_ctimer5_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC0Interface
N *
N * Purpose:       Enable/disable GDC0 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC0Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC1Interface
N *
N * Purpose:       Enable/disable GDC1 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC1Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDCPanelInterface
N *
N * Purpose:       Enable/disable GDC panel interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDCPanelInterface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetGDCSynchronisation
N *
N * Purpose:       Set synchronisation type between GDC0 and GDC1
N *
N * Inputs:        eGDCSync     GDC synchronisation type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetGDCSynchronisation(ccr_gdc_sync_e eGDCSync);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMask
N *
N * Purpose:       Set NOR-interface address mask
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMask(ccr_nor_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMatch
N *
N * Purpose:       Set NOR-interface address match
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMatch(ccr_nor_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMask
N *
N * Purpose:       Set NAND-interface address mask
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMask(ccr_nand_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMatch
N *
N * Purpose:       Set NAND-interface address match
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMatch(ccr_nand_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNORChipSelect
N *
N * Purpose:       Set NAND-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:   value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNORChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNANDChipSelect
N *
N * Purpose:       Set NOR-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:  value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNANDChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableSRAMBitErrorInspection
N *
N * Purpose:       Enable or disable SRAM bit error inspection
N *
N * Inputs:        eChannel    SRAM-channel
N *                eEn         Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableSRAMBitErrorInspection(ccr_sram_channel_e eChannel, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetSRAMBitErrorInspectionConfiguration
N *
N * Purpose:       Set SRAM bit error inspection configuration
N *
N * Inputs:        eChannel    SRAM-channel
N *                pstConfig   Pointer to configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetSRAMBitErrorInspectionConfiguration(ccr_sram_channel_e eChannel, ccr_sram_bit_error_insp_config_st * pstConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWDTAlarm
N *
N * Purpose:       Clear WDT alarm bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWDTAlarm(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearErrorIrgFlagOfBackupRAM
N *
N * Purpose:       Clear error IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearErrorIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWarningIrgFlagOfBackupRAM
N *
N * Purpose:       Clear warning IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWarningIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearErrorIrgFlagOfSRAM
N *
N * Purpose:       Clear error IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearErrorIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWarningIrgFlagOfSRAM
N *
N * Purpose:       Clear warning IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWarningIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_IssueSynchronPulseToCTimer
N *
N * Purpose:       Issue synchronous pulse to complex timer 0 to 5 or  to 9
N *
N * Inputs:        eComplexTimer    Complex timers
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_IssueSynchronPulseToCTimer(ccr_complex_timer_e eComplexTimer);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWDTAlarmStatusBit
N *
N * Purpose:       Get WDT alarm status bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWDTAlarmStatusBit(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQErrorFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for error condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQErrorFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQWarningFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for warning condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQWarningFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetPosOfBitErrorInBackupRAM
N *
N * Purpose:       Get position of bit error for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetPosOfBitErrorInBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetLastCheckResultForBackupRAM
N *
N * Purpose:       Get last check result for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetLastCheckResultForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDebuggerCR4PowerDownRequestStatus
N *
N * Purpose:       Get status of debugger CR4 power down request
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDebuggerCR4PowerDownRequestStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgErrorCondition
N *
N * Purpose:       Get IRQ flag error condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgErrorCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgWarningCondition
N *
N * Purpose:       Get IRQ flag warning condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgWarningCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMPositionOfBitError
N *
N * Purpose:       Get position of bit error for SRAM
N *
N * Inputs:        eChannel      SRAM-channel
N *                pu8Position   Pointer to position
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMPositionOfBitError(ccr_sram_channel_e eChannel, uint8_t * pu8Position);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMLastCheckResult
N *
N * Purpose:       Get last check result for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMLastCheckResult(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceVersion
N *
N * Purpose:       Read device version
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: device version
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_version_e eCCR_GetDeviceVersion(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSIPFlashSize
N *
N * Purpose:       Read size of SIP flash
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: SIP flash size
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_SIPflash_size_e eCCR_GetSIPFlashSize(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GeCR4DebugStatus
N *
N * Purpose:       Provides information about the availability of the debug port.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: CCR_DISABLE - Debug Port DISABLED
N *                CCR_ENABLE  - Debug Port ENABLED
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GeCR4DebugStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableR4DebugPort
N *
N * Purpose:       Enable or disable debug port of processors
N *
N * Inputs:        eProcessorType     Processor type
N *                eEn                Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableR4DebugPort(ccr_processor_device_e eProcessorType, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegCurrentTrim
N *
N * Purpose:       Set voltage regulator current trim value
N *
N * Inputs:        eValue     voltage regulator current trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegCurrentTrim(ccr_vreg_current_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegRefVoltageTrim
N *
N * Purpose:       Set voltage regulator reference voltage trim value
N *
N * Inputs:        eValue     voltage regulator reference voltage trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegRefVoltageTrim(ccr_vreg_ref_voltage_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegTemperatureTrim
N *
N * Purpose:       Set voltage regulator temperature trim value
N *
N * Inputs:        eValue     voltage regulator temperature trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegTemperatureTrim(ccr_vreg_temperature_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetOscAdjustment
N *
N * Purpose:       Set oscillator adjustment value
N *
N * Inputs:        eValue     oscillator adjustment value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetOscAdjustment(ccr_osc_adjustment_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetThresholdPowerGoodSensing
N *
N * Purpose:       Set threshold for power good sensing
N *
N * Inputs:        eValue     threshold for power good sensing
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetThresholdPowerGoodSensing(ccr_threshold_power_good_sensing_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetAlarmComparatorThreshold
N *
N * Purpose:       Set alarm comparator threshold for Alarm 0 or 1
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                u8Value     alarm comparator threshold setting (0..31)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetAlarmComparatorThreshold(ccr_alarm_no_e eAlarmNo, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableAlarm
N *
N * Purpose:       Enables/Disables CCR alarm comparator
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                eEn      :  enable/disbale alarm
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableAlarm(ccr_alarm_no_e eAlarmNo, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableClockSupervisor
N *
N * Purpose:       Enable/disable clock supervisor
N *
N * Inputs:        eClocks    clock type
N *                eEN        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableClockSupervisor(ccr_clocks_e eClocks, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC10MClockSupervisorOutputResetFunction
N *
N * Purpose:       Enable/disable OSC10M clock supervisor output reset function
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC10MClockSupervisorOutputResetFunction(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC32KHz
N *
N * Purpose:       Enable/disable OSC32KHz
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC32KHz(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSmcIOLevel
N *
N * Purpose:       Set SMC IO level
N *
N * Inputs:        eLevel     SMC IO level
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSmcIOLevel(ccr_smc_io_level_e eLevel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Set Clock Stabilization Compare Value
N *
N * Inputs:        eClocks    clock type
N *                u8Value    clock stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockStabilizationCompareValue(ccr_clocks_e eClocks, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      u16CCR_getBootOptions
N *
N * Purpose:       Read boot options
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Boot options
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetBootOptions(void);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetSystemIntStatusAll
N *
N * Purpose:       Read interrupt status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetSystemIntStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSystemIntStatusSingle
N *
N * Purpose:       Read interrupt status of a singe interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Clear interrupt status of a single interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableECCInterrupt
N *
N * Purpose:       Enable ECC interrupt
N *
N * Inputs:        eEccType      ECC type
N *                eEccIntType   ECC inte3rrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableECCInterrupt(ccr_ecc_e eEccType, ccr_ecc_interrupt_type_e eEccIntType);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetDeviceModesAll
N *
N * Purpose:       Read all device modes
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetDeviceModesAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceModesSingle
N *
N * Purpose:       read single device mode
N *
N * Inputs:        eMode      Device mode
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDeviceModesSingle(ccr_modes_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableWakeupSource
N *
N * Purpose:       Enable or disable wakeup source
N *
N * Inputs:        eSource    wakeup source
N *                eEn        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableWakeupSource(ccr_wakeup_source_e eSource, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetWakeupAttribute
N *
N * Purpose:       Set wakeup attribute
N *
N * Inputs:        eSource       wakeup source
N *                eAttribute    wakeup attribute
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetWakeupAttribute(ccr_wakeup_source_e eSource, ccr_wakeup_attribute_e eAttribute);
N
N/****************************************************************************
N *
N * Function:      u16CCR_GetWakeupSourceInterruptAll
N *
N * Purpose:       Read all wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: wakeup source interrupt status vector
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetWakeupSourceInterruptAll(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWakeupSourceInterruptSingle
N *
N * Purpose:       Read single wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWakeupSourceInterruptSingle(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWakeupInterruptSource
N *
N * Purpose:       Clear wakeup interrupt source
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWakeupInterruptSource(ccr_wakeup_source_e eSource);
N
N/****************************************************************************/
N
N
N#endif /* CCR_LLDD_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 27 "..\..\..\..\hldd\inc\qspi.h" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define QSPI_WIP      0x1
N#define QSPI_WE       0x80
N#define SIZE_64KB     0x10000
N#define SIZE_256B     0x100
N#define MASK_64KB     0xFFFF0000
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* qspi devices */
Ntypedef enum qspi_dev_type_e
N{
N    DEV_MX25L3235E            =  1,   /* QSPI Device Type Micronix  - MX25L3235E */
N    DEV_MX25L6435E            =  2,   /* QSPI Device Type Micronix  - MX25L6435E */
N    DEV_MX25L12835F           =  3,   /* QSPI Device Type Micronix  - MX25L12835F */
N    DEV_MX66L51239F_3BYTE_ADR =  4,   /* QSPI Device Type Micronix  - MX66L51239F 3 Byte Addressing */
N    DEV_MX66L51239F_4BYTE_ADR =  5,   /* QSPI Device Type Micronix  - MX66L51239F 4 Byte Addressing */
N    DEV_N25Q064A              =  6,   /* QSPI Device Type Micron    - DEV_N25Q064A new */
N    DEV_N25Q512A_3BYTE_ADR    =  7,   /* QSPI Device Type Micron    - DEV_N25Q512A 3 Byte Addressing */
N    DEV_N25Q512A_4BYTE_ADR    =  8,   /* QSPI Device Type Micron    - DEV_N25Q512A 4 Byte Addressing */
N    DEV_S25FL032P             =  9,   /* QSPI Device Type Spansion  - S25FL032P */
N    DEV_S25FL064P             = 10,   /* QSPI Device Type Spansion  - S25FL064P */
N    DEV_S25FL127P             = 11,   /* QSPI Device Type Spansion  - S25FL127P */
N    DEV_S25FL116KIF01         = 12,   /* QSPI Device Type Spansion  - DEV_S25FL116KIF01 */
N    DEV_S25FL132KIF01         = 13,   /* QSPI Device Type Spansion  - DEV_S25FL132KIF01 */
N    DEV_S25FL164KIF01         = 14,   /* QSPI Device Type Spansion  - DEV_S25FL164KIF01 */
N    DEV_W25Q32B               = 15,   /* QSPI Device Type Winbond   - W25Q32B */
N    DEV_W25Q64C               = 16,   /* QSPI Device Type Winbond   - W25Q64C */
N    DEV_W25Q256F_3BYTE_ADR    = 17,   /* QSPI Device Type Winbond   - W25Q256F 3 Byte Addressing */
N    DEV_W25Q256F_4BYTE_ADR    = 18,   /* QSPI Device Type Winbond   - W25Q256F 4 Byte Addressing */
N    DEV_INTERNAL_32MBIT       = 19,   /* Internal QSPI (MX25L3235E) - 32MBit */
N    DEV_INTERNAL_64MBIT       = 20,   /* Internal QSPI (MX25L6435E) - 64MBit */
N    DEV_TYPE_INVALID          = 21    /* Device Invalid */
N} qspi_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vAssignQSPISettings
N *
N * Purpose:       assign settings dependant on
N *
N * Inputs:        u32QSPI_DeviceType   QSPI device selection (0 uses config in qspi_settings.h)
N *                u16BaseAddress       physical base address
N *
N * Outputs:       peClocFreq           pointer to clock frequence
N *                peModulationType     pointer to clock modulation type
N *                pstDirectConfig      pointer to direct interface configuration
N *                pstProgConfig        pointer to program interface configuration
N *
N * Return Values: C_SUCCESS/C_FAILED (parameter error)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32AssignQSPISettings(qspi_dev_type_e eQSPI_DeviceType, uint16_t u16BaseAddress,
N                              ccr_clk_freq_e * peClocFreq, ccr_modulated_clk_e * peModulationType,
N                              qspic_directconfig_st * pstDirectConfig, qspic_prgconfig_st * pstProgConfig);
N
N/****************************************************************************
N *
N * Function:      i32ClearFlash
N *
N * Purpose:       clears flash sector by sector
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32SectorCount    number of sectors to be erased
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32ClearFlash(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32SectorCount);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWOE
N *
N * Purpose:       Perform program of Flash without erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWOE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWE
N *
N * Purpose:       Perform program of Flash with erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N
N#endif /* _QSPI_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 29 "..\..\inc\config.h" 2
N
N/*****************************************************************************************
N* select Drehbuch
N* 0: 600-450, 1: 440, 2: 325, 3: 225
N*****************************************************************************************/
N#define DREHBUCH    (2)
N/* select output device
N* 0: monitor
N* 1: displays
N*****************************************************************************************/
N#define OUTPUT_DEVICE    0
N
N/*****************************************************************************************
N* QSPI
N* 1: S25FL032P
N* 2: S25FL064P
N*****************************************************************************************/
N#define QSPI_DEVICE      (DEV_S25FL127P)
N
N/*****************************************************************************************
N* Parallel NOR
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NOR_DEVICE      1
N
N/*****************************************************************************************
N* NAND
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NAND_DEVICE      1
N
N/*****************************************************************************************
N* RAM
N*  1: MT46H8M32LFB5-6
N*  2: MT46H16M32LFB5-6
N*  3: IS42S32800D-6
N*****************************************************************************************/
N#define RAM_DEVICE    2
N
N/*****************************************************************************************
N*                 D I S P L A Y   -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* enable GDC0 and / or GDC1 */
N#define GDCx0		ON
N#define GDCx1		OFF
N
N/* TO DO: Set Resolution (QVGA_RES / HNTSC_RES / HVGA_RES / VGA_RES / WVGA_RES / WVGA_1_RES /
N                          SVGA_RES / DVGA_RES / DVGA_1_RES / DVGA_1_RES_60) */
N#define DISPLAY_RESOLUTION_0 CLAA121WB//WVGA_RES_50 //DAL 20151221
N#define DISPLAY_RESOLUTION_1 QVGA_RES_60
N
N/****************************************************************************************
N*                        G D C 0  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC0 */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A 	ON
N#define GDC0_LAYER_B 	OFF
N#define GDC0_LAYER_C 	OFF
N#define GDC0_LAYER_D 	OFF
N#define GDC0_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF (only possible for layer A) / FMT_RGB16 / FMT_RGBA32 */
N#define GDC0_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_D_DOUBLEFUFFERING		OFF
N#define GDC0_LAYER_E_DOUBLEFUFFERING		OFF
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC0_LAYERA_WIDTH     1280
N#define GDC0_LAYERA_HEIGHT    420
N#define GDC0_LAYERA_STARTX      0
N#define GDC0_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC0_LAYERB_WIDTH     400
N#define GDC0_LAYERB_HEIGHT    400
N#define GDC0_LAYERB_STARTX    550
N#define GDC0_LAYERB_STARTY    20
N
N/* Layer C */
N#define GDC0_LAYERC_WIDTH     800
N#define GDC0_LAYERC_HEIGHT    480
N#define GDC0_LAYERC_STARTX      0
N#define GDC0_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC0_LAYERD_WIDTH     800
N#define GDC0_LAYERD_HEIGHT    480
N#define GDC0_LAYERD_STARTX      0
N#define GDC0_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC0_LAYERE_WIDTH     800
N#define GDC0_LAYERE_HEIGHT    480
N#define GDC0_LAYERE_STARTX      0
N#define GDC0_LAYERE_STARTY      0
N
N
N/****************************************************************************************
N*                        G D C 1  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC1 */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A 	OFF
N#define GDC1_LAYER_B 	OFF
N#define GDC1_LAYER_C 	OFF
N#define GDC1_LAYER_D 	OFF
N#define GDC1_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF / FMT_RGB16 / FMT_RGBA32 */
N#define GDC1_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_D_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_E_DOUBLEFUFFERING		ON
N
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC1_LAYERA_WIDTH     320
N#define GDC1_LAYERA_HEIGHT    240
N#define GDC1_LAYERA_STARTX      0
N#define GDC1_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC1_LAYERB_WIDTH     640
N#define GDC1_LAYERB_HEIGHT    480
N#define GDC1_LAYERB_STARTX      0
N#define GDC1_LAYERB_STARTY      0
N
N/* Layer C */
N#define GDC1_LAYERC_WIDTH	    640
N#define GDC1_LAYERC_HEIGHT    480
N#define GDC1_LAYERC_STARTX      0
N#define GDC1_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC1_LAYERD_WIDTH     640
N#define GDC1_LAYERD_HEIGHT    480
N#define GDC1_LAYERD_STARTX      0
N#define GDC1_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC1_LAYERE_WIDTH     640
N#define GDC1_LAYERE_HEIGHT    480
N#define GDC1_LAYERE_STARTX      0
N#define GDC1_LAYERE_STARTY      0
N
N#endif /* CONFIG_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: config.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 26 "..\..\..\..\mw\inc\fbuffer.h" 2
N#include "gf.h"
L 1 "..\..\..\..\mw\inc\gf.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronic Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Contains declarations for Image structures
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/07/21 12:38:02 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef GF_H
N#define GF_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GF_H_REVISION     "$Revision: 1.8 $"
N#define MW_GF_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N/*---------------------------------------
N|             MATH LIBRARY USE           |
N ---------------------------------------*/
N/* Enables use of standard math library */
N/* if following define is disabled, LLDD/GA rotation and scaling are using integer instead of float */
N/* and sin/cos lookup table is used instead of math library functions */
N
N#define GA_USE_MATH_LIB
N
N#ifdef GA_USE_MATH_LIB
N/* Pi Constant Value */
N#define GA_CONST_PI 3.1415926535897932384626433
N#endif
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Transformation table structure
N*/
Ntypedef struct tag_table_st
N{
N    uint32_t    u32Address;         /*!< Table source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N} gf_table_st;
N
N
N/**
N* @brief Image description structure
N*/
Ntypedef struct tag_image_st
N{
N    uint32_t    u32Address;         /*!< Image source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N    int16_t     i16CenterX;         /*!< Image rotation center X-coord (optional) */
N    int16_t     i16CenterY;         /*!< Image rotation center Y-coord (optional) */
N    uint8_t     eFormat;            /*!< Image Format */
N    uint32_t    u32Paletteaddress;  /*!< palette address for PNG */
N} gf_image_st;
N
N
N/**
N* @brief CLUT description structure
N*/
Ntypedef struct tag_clut_st
N{
N    uint32_t    u32Address;         /*!< CLUT source address */
N    uint8_t     u8Length;           /*!< CLUT length */
N} gf_clut_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N
N/***************************************************************************/
N
N#endif /* GF_H */
N
N/***************************************************************************/
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 27 "..\..\..\..\mw\inc\fbuffer.h" 2
N#include "ga.h"
L 1 "..\..\..\..\lldd\inc\ga.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.19 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_H
N#define GA_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "ga_common.h"
L 1 "..\..\..\..\lldd\inc\ga_common.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/07/21 12:30:20 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_COMMON_H
N#define GA_COMMON_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "captypes.h"
N
N#define LLDD_GA_COMMON_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_GA_COMMON_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*==========================================================================
N|                       GA Configuration Parameters                         |
N ==========================================================================*/
N/*---------------------------------------
N|        GA Sub-Module inclusion         |
N ---------------------------------------*/
N/* Blitting Engine */
N#define GA_USE_BLITTING
N
N/* Transformation Engine */
N#define GA_USE_TRANSFORM
N
N/* Rotation Engine */
N#define GA_USE_ROTATION
N
N/* Drawing Engine */
N#define GA_USE_DRAWING
N
N/*---------------------------------------
N|         GA List Configuration          |
N ---------------------------------------*/
N/* Maximal Number of commands in one list */
N#define GA_CMD_MAX    2048
N
N/*---------------------------------------
N|  Enable/Disable boundary check for     |
N|         GA Command List                |
N ---------------------------------------*/
N/* Enable/Disable boundary check in drivers for command buffer: */
N/* #define GA_CMDSLIST_BOUNDARY_CHECK */
N
N
N/* 1 double word more will be reserved by calculation of needed
N   buffers for GA-API's. This is necesary to add later an END-Command to 
N   finalize the command: 
N*/   
N#define RESERVED_FOR_END_CMD    1
N
N/*======================================
N                Defs
N=======================================*/
N
N/*--------------------------------------
N|     GA General Purpose Registers      |
N --------------------------------------*/
N#define GA_GPR0   0
N#define GA_GPR1   1
N#define GA_GPR2   2
N#define GA_GPR3   3
N#define GA_GPR4   4
N#define GA_GPR5   5
N#define GA_GPR6   6
N#define GA_GPR7   7
N#define GA_GPR8   8
N#define GA_GPR9   9
N#define GA_GPR10  10
N#define GA_GPR11  11
N#define GA_GPR12  12
N#define GA_GPR13  13
N#define GA_GPR14  14
N#define GA_GPR15  15
N#define GA_GPR16  16
N#define GA_GPR17  17
N#define GA_GPR18  18
N#define GA_GPR19  19
N#define GA_GPR20  20
N#define GA_GPR21  21
N#define GA_GPR22  22
N#define GA_GPR23  23
N#define GA_GPR24  24
N#define GA_GPR25  25
N#define GA_GPR26  26
N#define GA_GPR27  27
N#define GA_GPR28  28
N#define GA_GPR29  29
N#define GA_GPR30  30
N#define GA_GPR31  31
N
N
N/*--------------------------------------
N|         GA Command Parameters         |
N --------------------------------------*/
N/* Selection of module to wait on */
Ntypedef enum tag_ga_modul_e
N{
N    GA_GDC0        = 0x0u,
N    GA_FG0         = 0x1u,
N    GA_GDC1        = 0x2u
N} ga_modul_e;
N
N/* Enables/Disables option */
Ntypedef enum tag_ga_en_e
N{
N    GA_DIS         = 0x0u,     /* Disable/off */
N    GA_EN          = 0x1u      /* Enable/on */
N} ga_en_e;
N
N/* Blending Order */
Ntypedef enum tag_blendOrd_e
N{
N    GA_ONTO_DEST   = 0x0u,     /* Onto destination */
N    GA_BEHIND_DEST = 0x1u      /* Behind destination */
N} ga_blendOrd_e;
N
N/* Color format selection */
Ntypedef enum tag_ga_colFmt_e
N{
N    GA_RGB16       = 0x0u,      /* 16-bit RGB format */
N    GA_RGBA32      = 0x1u       /* 32-bit RGBA format */
N} ga_colFmt_e;
N
N/*--------------------------------------
N|        GA Command Construction        |
N --------------------------------------*/
N/* Command Field Masks */
N#define GA_MASK1           0x1u
N#define GA_MASK2           0x3u
N#define GA_MASK3           0x7u
N#define GA_MASK4           0xfu
N#define GA_MASK5           0x1fu
N#define GA_MASK6           0x3fu
N#define GA_MASK7           0x7fu
N#define GA_MASK8           0xffu
N#define GA_MASK9           0x1ffu
N#define GA_MASK10          0x3ffu
N#define GA_MASK12          0xfffu
N#define GA_MASK14          0x3fffu
N#define GA_MASK15          0x7fffu
N#define GA_MASK16          0xffffu
N#define GA_MASK22          0x3fffffu
N#define GA_MASK24          0xffffffu
N#define GA_MASK32          0xffffffffu
N#define GA_MASK36          0xfffffffffull
N#define GA_MASK48          0xffffffffffffull
N#define GA_MASK64          0xffffffffffffffffull
N
N/* GA Unit selection */
N#define GA_SCHED           0x0u
N#define GA_BLITING         0x1u
N#define GA_DRAWING         0x2u
N#define GA_ROTATION        0x3u
N#define GA_TRANSFORM       0x4u
N
N/*** Command Codes ***/
N#define GA_CMC_LGPR        0x1u
N#define GA_CMC_CSWVSYNC    0x2u
N#define GA_CMC_CSUIC	     0x3u
N#define GA_CMC_CSGDC0CC	   0x4u
N#define GA_CMC_CSGDC1CC	   0x5u
N#define GA_CMC_END         0xffu
N
N/* Blitting Engine Command Codes */
N
N#define GA_CMC_BLTO16      0x02u
N#define GA_CMC_BLTO32      0x04u
N#define GA_CMC_BLTORLEI16  0x0au
N#define GA_CMC_BLTORLEI24  0x06u
N#define GA_CMC_BLTORLEI24A 0x0Eu
N#define GA_CMC_BLTORLEI32  0x0cu
N#define GA_CMC_BLTOP16     0x12u
N#define GA_CMC_BLTOP32     0x14u
N#define GA_CMC_BLTB16      0x03u
N#define GA_CMC_BLTB32      0x07u
N#define GA_CMC_BLTBRLEI16  0x0bu
N#define GA_CMC_BLTBRLEI24  0x05u
N#define GA_CMC_BLTBRLEI24A 0x0fu
N#define GA_CMC_BLTBRLEI32  0x0du
N#define GA_CMC_BLTBP16     0x13u
N#define GA_CMC_BLTBP32     0x17u
N
N/* Transformation Engine Command Code */
N#define GA_CMC_TRANSF      0x01u
N#define GA_CMC_TRANSFB     0x00u
N
N/* Rotation Engine Command Code */
N#define GA_CMC_ROT         0x01u
N#define GA_CMC_ROTB        0x00u
N
N/* Drawing Engine Command Codes */
N#define GA_CMC_DE_DLRGBA32 0x03u
N#define GA_CMC_DE_DLRGB16  0x04u
N#define GA_CMC_DE_DTRGBA32 0x05u
N#define GA_CMC_DE_DTRGB16  0x06u
N
N/* Command Field Offsets */
N#define GA_ENG_OFF         60
N#define GA_LEN_OFF         56
N#define GA_CMC_OFF         48
N#define GA_SPC_OFF          0
N
N/* Command Field Masks */
N#define GA_ENG_MSK         (GA_MASK3)
N#define GA_LEN_MSK         (GA_MASK4)
N#define GA_CMC_MSK         (GA_MASK8)
N#define GA_SPC_MSK         (GA_MASK48)
N
N/* Macro for command field positioning */
N#define GA_FP(val, offset, mask) (((uint64_t)(val) & (mask)) << (offset))
N
N/* GA Command Fields (Engine, Length, Command code, Cmd Specific Params.)*/
N#define GA_ENG(Engine) (GA_FP((Engine), GA_ENG_OFF, GA_ENG_MSK))
N#define GA_LEN(Len)    (GA_FP((Len)   , GA_LEN_OFF, GA_LEN_MSK))
N#define GA_CMC(Code)   (GA_FP((Code)  , GA_CMC_OFF, GA_CMC_MSK))
N#define GA_SPC(spec)   (GA_FP((spec)  , GA_SPC_OFF, GA_SPC_MSK))
N
N/* GA Command Construction Macro */
N#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    | \
N                                                GA_ENG((Engine))   | \
N                                                GA_LEN((Len))      | \
N                                                GA_CMC((CmdCode))  | \
N                                                GA_SPC((CmdSpec)))
X#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    |                                                 GA_ENG((Engine))   |                                                 GA_LEN((Len))      |                                                 GA_CMC((CmdCode))  |                                                 GA_SPC((CmdSpec)))
N
N/*=========================================================================
N|                        SCHEDULER OPERATION COMMANDS                      |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load General-Purpose Register Command (LGPR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to configure
N|             one out of the 32 General-Purpose Registers. The command
N|             specific parameter for this command is the number of the
N|             register that should be loaded and the value itself.
N|
N|  Params:    regNr   - The number of the General-Purpose Register that
N|                       should be loaded
N|
N|             uiVal   - Value that should be stored within the selected
N|                       register. If the register does not encapsulate
N|                       32 bits the value within the command has to be right
N|                       aligned.
N|
N -------------------------------------------------------------------------*/
N#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,       \
N                               GA_FP ((regNr), 32, GA_MASK5)      |   \
N                               GA_FP ((uiVal),  0,  GA_MASK32)))
X#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,                                      GA_FP ((regNr), 32, GA_MASK5)      |                                  GA_FP ((uiVal),  0,  GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   END Command (CSEND)
N|
N|  Descr  :   The CSEND command must be placed at the end of every command
N|             list. It signals the Command Scheduler that all commands have
N|             been executed. When the Command Scheduler is detecting this
N|             mark, a flag in the status register signals that the command
N|             list was executed. Optionally an interrupt is generated.
N|
N|  Params:    none
N|
N -------------------------------------------------------------------------*/
N#define GA_END() (GA_CMN(GA_SCHED, 0x1u, GA_CMC_END,0x0u))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Wait VSYNC Command (CSWVSYNC)
N|
N|  Descr  :   The CSWVSYNC command can be used to synchronize parts of the
N|             command list with the vertical synchronization signal VSYNC
N|             from the GDC or the Frame Grabber.
N|
N|             When the Command Scheduler is reading the CSWVSYNC command
N|             it waits until the next vertical synchronization of the
N|             display/camera input takes place before executing the next
N|             command.
N|
N|  Params:    module   -  VSYNC select:
N|                         Use: GA_GDC0     - Wait on GDC0
N|                              GA_FG0      - Wait on FG0
N|                              GA_GDC1     - Wait on GDC1
N|                              GA_FG1      - Wait on FG1
N|
N|
N -------------------------------------------------------------------------*/
N#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,        \
N                         GA_FP ((module), 0, GA_MASK2)))
X#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,                                 GA_FP ((module), 0, GA_MASK2)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   User Interrupt Command (CSUIC)
N|
N|  Descr  :   The CSUIC command can be used to signal the MCU that a
N|             certain part of the Command List is already executed or
N|             will now start execution.
N|
N|  Params:    interrupt number:
N|                          Use: 0 - 23
N|                               values > 23 will be ignored
N|
N -------------------------------------------------------------------------*/
N#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,    \
N                                  GA_FP ((number), 0, GA_MASK6)))
X#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,                                      GA_FP ((number), 0, GA_MASK6)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC0 Configuration Command (CSGDC0CC)
N|
N|  Descr  :   The CSGDC0CC command can be used to change the content of GDC0 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC0 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC1 Configuration Command (CSGDC1CC)
N|
N|  Descr  :   The CSGDC1CC command can be used to change the content of GDC1 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC1 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N
N/*======================================
N              Structures
N=======================================*/
N/* Command List Structure */
Ntypedef struct tag_ga_list_st
N{
N    uint64_t  ullCommands[GA_CMD_MAX] ;
X    uint64_t  ullCommands[2048] ;
N    uint64_t* pu64Current;
N    uint32_t  u32UsedDoubleWords; /* used or needed double words for an  GA-API */
N    int32_t   i32FreeSpaceStat;   /* C_SUCCESS: OK no space free error,
N                                     C_FAILED:  No free space for GA-API */
N} ga_list_st ;
N
N/****************************************************************************/
N
N
N#endif /* GA_COMMON_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: ga_common.h
N**  $Revision: 1.14 $
N**  $Date: 2015/07/21 12:30:20 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** | CONS.  : 
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\lldd\inc\ga.h" 2
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_H_REVISION     "$Revision: 1.19 $"
N#define LLDD_GA_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/* Timeout */
N#define GA_TIMEOUT  10000
N
N/* Size of Draw Engine Filter RAM (in doublewords) */
N#define GA_DE_FILTER_SIZE 64
N
N/* GA Interrupt Masks */
N#define GA_IRQ_MASK_CENDIM  0x00000001U    /* GA Command End Interrupt Mask.                          */
N#define GA_IRQ_MASK_CSCEIM  0x00000004U    /* Command Scheduler Command Error Interrupt Mask          */
N#define GA_IRQ_MASK_CSLEIM  0x00000008U    /* Command Scheduler Command List Executed Interrupt Mask  */
N#define GA_IRQ_MASK_WBWIM   0x00000010U    /* GA Write Buffer Write Bus-Error Interrupt Mask          */
N#define GA_IRQ_MASK_WBRIM   0x00000020U    /* GA Write Buffer Read Bus-Error Interrupt Mask           */
N#define GA_IRQ_MASK_CBIM    0x00000040U    /* GA Cache Buffer Bus-Error Interrupt Mask                */
N#define GA_IRQ_MASK_RBIM    0x00000080U    /* GA Read Buffer Bus-Error Interrupt Mask                 */
N#define GA_IRQ_MASK_CSLUIM  0xFFFFFF00U    /* Command List User Interrupt Mask 0 – 23                 */
N
N/*======================================
N                Enums
N=======================================*/
N/****************************************
N*         GAIMR Param.Values
N****************************************/
N/* IRQ Mask */
Ntypedef enum tag_ga_irqen_e
N{
N    GA_IRQ_EN  = 0x1u,     /* Enable IRQ */
N    GA_IRQ_DIS = 0x0u      /* Disable IRQ */
N} ga_irqen_e;
N
N/* Bus type */
Ntypedef enum tag_ga_bus_type_e
N{
N    GA_READ_BUF_BUS        = 0x00U,
N    GA_CACHE_BUF_BUS       = 0x01U,
N    GA_WRITE_BUF_READ_BUS  = 0x02U,
N    GA_WRITE_BUF_WRITE_BUS = 0x03U,
N    GA_MAX_TYPE_BUS        = 0x04U
N} ga_bus_type_e;
N
N/* Read / Write Direction */
Ntypedef enum tag_ga_buserr_dir_e
N{
N    GA_BUSERR_READ_TRANSF   = 0x0U,
N    GA_BUSERR_WRITE_TRANSF  = 0x1U
N} ga_buserr_dir_e;
N
N/* Burs error Type */
Ntypedef enum tag_ga_buserr_bursttype
N{
N    GA_BUSERR_BURST_TYPE_FIXED   = 0x0U,
N    GA_BUSERR_BURST_TYPE_INCR    = 0x1U
N} ga_buserr_bursttype;
N
N/* Burst Size */
Ntypedef enum tag_ga_buserr_burstsize
N{
N    GA_BUSERR_BURST_1BYTE     = 0x0U,
N    GA_BUSERR_BURST_2BYTE     = 0x1U,
N    GA_BUSERR_BURST_4BYTE     = 0x2U,
N    GA_BUSERR_BURST_81BYTE    = 0x3U,
N    GA_BUSERR_BURST_16BYTE    = 0x4U,
N    GA_BUSERR_BURST_32BYTE    = 0x5U,
N    GA_BUSERR_BURST_64BYTE    = 0x6U,
N    GA_BUSERR_BURST_128BYTE   = 0x7U
N} ga_buserr_burstsize;
N
N
N/* Response Type */
Ntypedef enum tag_ga_buserr_resptype
N{
N    GA_BUSERR_RESP_OK        = 0x0U,
N    GA_BUSERR_RESP_EXOKAY    = 0x1U,
N    GA_BUSERR_RESP_SLVERR    = 0x2U,
N    GA_BUSERR_RESP_DECERR    = 0x3U
N} ga_buserr_resptype;
N
N/* Memory Protection Region */
Ntypedef enum tag_ga_memory_region_e
N{
N    GA_MEMORY_PROT_REGION_0   = 0x0U,
N    GA_MEMORY_PROT_REGION_1   = 0x1U,
N    GA_MEMORY_PROT_REGION_MAX = 0x2U
N} ga_memory_region_e;
N
N/*======================================
N              Structures
N=======================================*/
N/* GA bus Error Control Signal-Structure */
Ntypedef struct tag_ga_bus_err_ctrl_st
N{
N    ga_buserr_dir_e      eDirection;       /* Read / Write direction */
N    ga_buserr_bursttype  eBurstType;       /* Burst type */
N    ga_buserr_burstsize  eBurstSize;       /* Burst size */
N    ga_buserr_resptype   eRespType;        /* Response Type */
N    uint8_t              u8ByteEnables;    /* Byte-enables for the erroneous transfer. */
N    uint8_t              u8ID;             /* ID tag of the read/write transaction that triggered an error response. */
N    uint8_t              u8BurstLength;    /* Burst length of the read/write transaction that triggered an error response */
N} ga_bus_err_ctrl_st;
N
N/*======================================
N      Exported Function Prototypes
N=======================================*/
N
N/****************************************************************************
N *
N * Function:      vGA_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8CommonRevision - pointer to common header revision string
N *                pau8CommonTag      - pointer to common header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                    uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                    uint8_t** pau8CommonRevision, uint8_t** pau8CommonTag,
N                    uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetMaxUsedBuffSize
N *
N * Purpose:       Resets the counter for used buffer of command list
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ResetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      u32Ga_GetMaxUsedBuffSize
N *
N * Purpose:       To get max. used size of command buffer. This API can be
N *                used to optimize the need size of "GA_CMD_MAX" in ga_list_st
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_GetLastCmdBuffStatus
N *
N * Purpose:       returns the information if there was enough space free for
N *                command over API
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: space status for command list
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_GetLastCmdBuffStatus(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetLastCmdSize
N *
N * Purpose:       returns the uesed buffer size for last API call (in case it
N *                was enough memory in buffer) or it returns needed size of buffer
N *                for last API call (if there was not enough memory in command buffer)
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: sized of used buffer
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetLastCmdSize(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_CheckList
N *
N * Purpose:       To check whether there is enough space in command buffer
N *                to wrote some doble words 
N *
N * Inputs:        pstCmdList  - pointer to command list
N *                u32NeededDW - needed double words 
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED  requested number of commands will not fit into list
N *                C_SUCCESS requested number of commands will fit into list   
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_CheckList(ga_list_st* pstCmdList, uint32_t u32NeededDW);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetList
N *
N * Purpose:       Resets the Command List
N *
N * Inputs:        pstCmdList - Pointer to command list
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   The pointer to current list position will be reset, the
N *                content of the list will remain un-touched.
N *
N ***************************************************************************/
Nvoid vGA_ResetList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CloseList
N *
N * Purpose:       Closes the given list by inserting CSEND command
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CloseList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SyncList
N *
N * Purpose:       Inserts the VSYNC command in the command list in order to
N *                synchronize the execution of the list with vertical (VSYNC)
N *                signal from the GDC or Frame Grabber. When the command
N *                sceduler reaches this command it will stop the list
N *                execution until next VSYNC signal.
N *
N * Inputs:        eModul     - Modul selection to wait on (GDC/FG)
N *                pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SyncList(ga_modul_e eModule, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetUserInt
N *
N * Purpose:       defines Interrupt to CPU
N *
N * Inputs:        u8Number   - Interrupt number
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetUserInt(uint8_t u8Number, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_Enable
N *
N * Purpose:       Enables/Disables the Graphic Accelerator
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_Enable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ReadAheadEnable
N *
N * Purpose:       Enables/Disables ReadBuffer Read Ahead feature
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ReadAheadEnable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_Reset
N *
N * Purpose:       Resets the Graphic Accelerator
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS - Reset successful
N *                C_FAILED  - Reset timeout (Reset was not completted in
N *                            predefined time interval)
N *
N * Limitations:   The function will wait the reset to complete (it can take
N *                until recent bus cycle execution is finished)
N *
N ***************************************************************************/
Nint32_t i32GA_Reset(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetCmdListAddr
N *
N * Purpose:       Sets the physical address of the current command list
N *
N * Inputs:        u32Addr  - Physical address of the command list
N *                           (Must be 64-bit alligned -> uiAddr[2:0] = 0x0)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Make sure that when calling this function command scheduler
N *                is NOT executing a command list !!! Please note, that after
N *                the address is once written, the GA will automatically
N *                start the command list execution.
N *
N ***************************************************************************/
Nvoid vGA_SetCmdListAddr(uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      u8GA_GetStatus
N *
N * Purpose:       Reads the Graphic Accelerator Status register
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA Status Register (GASR) value
N *
N * Limitations:   The caller must parse returned status byte. For this
N *                purpose see the description of GASR Register.
N *
N ***************************************************************************/
Nuint8_t u8GA_GetStatus(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListFinished
N *
N * Purpose:       Indicates that the operation of a command list was finished or
N *                the GA was reset. This bit will be set to zero, when a new pointer
N *                is written.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  command List Finished (ready to get new values)
N *                C_FALSE: command List is not Finished (not ready to get new values)
N *
N * Limitations: 
N *
N ***************************************************************************/
Nbool_t boGA_CmdListFinished(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListError
N *
N * Purpose:       This function shows if the Command Scheduler detects an invalid command
N *                or not. The Graphics Accelerator halts its operation and has to be reset
N *                if error is any detected. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  any Error detected by command list
N *                C_FALSE: no error detected
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdListError(void);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      boGA_CmdReg_IsBusy
N *
N * Purpose:       This function shows when any of the GA engines is currently operating.
N *                Then also the write access to many registers is prohibited.
N *                NOTE:
N *                  This function should be used from user by using direct comamnd 
N *                  registers instead of command list, before writing new commands. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  GA engine is busy.
N *                C_FALSE: GA engine is ready (not busy).
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdReg_IsBusy(void);
N#endif
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetIrqCause
N *
N * Purpose:       Reads the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA IRQ Cause value
N *
N * Limitations:   The calling function must parse returned IRQ cause byte.
N *                For this purpose see the GAICR register description.
N *                Please note that the funtion will automatically clear
N *                the interrupt source !!!
N *
N ***************************************************************************/
Nuint32_t u32GA_GetIrqCause(void);
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCause
N *
N * Purpose:       Clears the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        u32CauseMask: Mask to clear the bits ("1" in the mask means clear Bit)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCause(uint32_t u32CauseMask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetIrqMask
N *
N * Purpose:       Sets all GA Interrupt masks in one shot
N *
N * Inputs:        u32Mask - Interrupt Mask. For this purpose you may use defines:
N *                         GA_IRQ_MASK_CENDIM, GA_IRQ_MASK_CSCEIM, GA_IRQ_MASK_CSLEIM,
N *                         GA_IRQ_MASK_WBWIM, GA_IRQ_MASK_WBRIM, GA_IRQ_MASK_CBIM,
N *                         GA_IRQ_MASK_RBIM, GA_IRQ_MASK_CSLUIM   
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetIrqMask(uint32_t u32Mask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableUserIrq
N *
N * Purpose:       Enables/Disables interrupt to CPU
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *		  u8Number - interrupt line to be enabled/disabled
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableUserIrq(uint8_t u8Number, ga_en_e eEn);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_EnableIrqCmdEnd
N *
N * Purpose:       Enables/Disables GA Command End Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_EnableIrqCmdEnd(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_ClearIrqCmdEnd
N *
N * Purpose:       Clears GA Command End Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_ClearIrqCmdEnd(void);
N
N
N#endif
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSLEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command List
N *                Executed Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSLEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSLEI
N *
N * Purpose:       Clears Command Scheduler Command List Executed Interrupt. 
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSLEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSCEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command Error IRQ
N *                Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSCEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSCEI
N *
N * Purpose:       Clears GA Command Scheduler Command Error IRQ
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSCEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetGADelay
N *
N * Purpose:       Sets the minimum delay in System Clock cycles between two
N *                consecutive memory accesses performed by any Graphics 
N *                Accelerator engine
N *
N * Inputs:        u16Delay: Delay Value (0x0000 .. 0xFFFF)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetGADelay(uint16_t u16Delay);
N
N
N/****************************************************************************/
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBWI
N *
N * Purpose:       Enables/Disables GA Write Buffer Write Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBWI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBWI
N *
N * Purpose:       Clears GA Write Buffer Write Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBWI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBRI
N *
N * Purpose:       Enables/Disables GA Write Buffer Read Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBRI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBRI
N *
N * Purpose:       Clears GA Write Buffer Read Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBRI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGACBIM
N *
N * Purpose:       Enables/Disables GA Cache Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGACBI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGACBI
N *
N * Purpose:       Clears GA Cache Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGACBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGARBI
N *
N * Purpose:       Enables/Disables GA Read Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGARBI(ga_en_e eEn);
N
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGARBI
N *
N * Purpose:       Clears GA Read Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGARBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearUserIrq
N *
N * Purpose:       Clears GA Command List User Interrupt 0 - 23
N *
N * Inputs:        u8CmdListIntr: No. of Interruot (0..23) to be cleared
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearUserIrq(uint8_t u8CmdListIntr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrAddr
N *
N * Purpose:       Returns the address after bus error on GA 
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       pu32BusErrAddr: Pointer to bus error address
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrAddr(ga_bus_type_e eBusType, uint32_t* pu32BusErrAddr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrCtrlStatus
N *
N * Purpose:       Returns the triggering access’s control status after bus error on GA
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       control status structure
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrCtrlStatus(ga_bus_type_e eBusType, ga_bus_err_ctrl_st* pstCtrlStatus);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetMemoryProtRegionAddr
N *
N * Purpose:       Defines the lower and upper address of the memory region
N *                0 or 1 (primary, secondary) GA is allowed to perform write accesses.
N *                Write accesses outside the memory regions are discarded.
N *                NOTE:
N *                   The memory regions are defined with a granularity of 4Kbyte.
N *
N * Inputs:        eRegion  Related Region (0/1)
N *                u32LowAddress: Lower protected address
N *                u32HighAddress: Higher protected address
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_SetMemoryProtRegionAddr(ga_memory_region_e eRegion, uint32_t u32LowAddress, uint32_t u32HighAddress);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecConfigIrq
N *
N * Purpose:       Enables/Disables interrupt, set if a non-privileged access 
N *                tries to write to GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR,
N *                or GAMPIMR.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecConfigIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecAccessIrq
N *
N * Purpose:       Enables/Disables interrupt, set if GA tries to write to 
N *                memory outside the address range defined by GAMR0L-GAMR0H 
N *                and GAMR1L-GAMR1H.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecAccessIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecConfigIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to have a non-privileged access 
N *                tries to write to protection control registers
N *                (GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR, or GAMPIMR)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecConfigIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecAccessIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to write to memory 
N *                outside the address range defined by GAMR0L-GAMR0H and GAMR1L-GAMR1H
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecAccessIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetMemoryProtecErr_CaptAddr
N *
N * Purpose:       Get the address of the first write access performed by the 
N *                Write Buffer’s write interface that caused a memory protection
N *                violation. The register is automatically set by the Graphics 
N *                Accelerator in case of a protection violation, it is reset to
N *                zero automatically if the corresponding interrupt bit GAMPI is
N *                cleared in the Graphics Accelerator Interrupt Cause Register (GAMPICR).
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: Address caused portection error
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMemoryProtecErr_CaptAddr(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetGeneralPurposeRegister
N *
N * Purpose:       Set one of 32 Purpose Registers of GA, which are used to define  
N *                the required parameters for the triggered engine.
N *                Read access is possible all the time, write access is only allowed
N *                if no engine is currently operating (GASR.BUSY=0). Nevertheless, 
N *                it is recommended to configure these registers using Command Lists.
N *
N * Inputs:        u8RegNo      No. of Register (0..31)
N *                u32RegValue: Register value to be written
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo or GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t u32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetGeneralPurposeRegister
N *
N * Purpose:       Get content of one of 32 Purpose Registers of GA, which are used   
N *                to define the required parameters for the triggered engine.
N *
N * Inputs:        u8RegNo       No. of Register (0..31)
N *                pu32RegValue: Pointer to Register value to be read
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo NULL pointer 
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_GetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t* pu32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetCommandRegisterLowHigh
N *
N * Purpose:       Set command register directly (as alternative to command List).
N *                For this mode, user should take care that GA should be ready 
N *                (not busy) before writng in registers. 
N *
N * Inputs:        u32LowValue:  Lower 32 bits of 64 bits command (0..31)
N *                u32HighValue: Higher 32 bits of 64 bits command (32..63)
N *                NOTE:
N *                  1) API should write first Lowe Part and then higher Part. 
N *                    By writing of higehr word thorugh API GA will be trigegred 
N *                    to execute command if it was not busy before.
N *                  2) Related general purpose registers for command should be
N *                     written before, 
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetCommandRegisterLowHigh (uint32_t u32LowValue,  uint32_t u32HighValue);
N
N
N#endif /* _EXTENDED_GA_APIS_DISABLED_ */
N
N#endif /* GA_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 28 "..\..\..\..\mw\inc\fbuffer.h" 2
N
N/**********************************************
N*               Defs                          *
N**********************************************/
N
N
N/**********************************************
N*               Structs                       *
N**********************************************/
N
N
N/**********************************************
N*         External variables                  *
N**********************************************/
N/* Command-Lists */
Nextern ga_list_st* pstExecList;
Nextern ga_list_st* pstWriteList;
N
N
N#ifdef LAYERA_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERA_EFF_WIDTH (GDC0_LAYERA_WIDTH + GDC1_LAYERA_WIDTH)
N#else
N    #define GDC0_LAYERA_EFF_WIDTH (GDC0_LAYERA_WIDTH)
N#endif
N
N#ifdef LAYERB_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERB_EFF_WIDTH (GDC0_LAYERB_WIDTH + GDC1_LAYERB_WIDTH)
N#else
N    #define GDC0_LAYERB_EFF_WIDTH (GDC0_LAYERB_WIDTH)
N#endif
N
N#ifdef LAYERC_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERC_EFF_WIDTH (GDC0_LAYERC_WIDTH + GDC1_LAYERC_WIDTH)
N#else
N    #define GDC0_LAYERC_EFF_WIDTH (GDC0_LAYERC_WIDTH)
N#endif
N
N#ifdef LAYERD_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERD_EFF_WIDTH (GDC0_LAYERD_WIDTH + GDC1_LAYERD_WIDTH)
N#else
N    #define GDC0_LAYERD_EFF_WIDTH (GDC0_LAYERD_WIDTH)
N#endif
N
N#ifdef LAYERE_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERE_EFF_WIDTH (GDC0_LAYERE_WIDTH + GDC1_LAYERE_WIDTH)
N#else
N    #define GDC0_LAYERE_EFF_WIDTH (GDC0_LAYERE_WIDTH)
N#endif
N
N/* GDC 0 Frame Buffers */
N#if (GDCx0 == ON)
X#if (1 == 1)
N
N/* GDC0 framebuffer */
N#if (GDC0_LAYER_A == ON)
X#if (1 == 1)
N		#if(GDC0_LAYER_A_COLOR_FORMAT != FMT_OFF)
X		#if((1) != (0))
N				#if(GDC0_LAYER_A_COLOR_FORMAT == FMT_RGB16)
X				#if((1) == (4))
S						extern  uint16_t FBuffRGB_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S						#if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
S								extern  uint16_t FBuffRGB_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S						#endif
N				#else
N						extern  uint32_t FBuffRGBA_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X						extern  uint32_t FBuffRGBA_GDC0_A0 [(1280)*420];
N						#if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
X						#if(1 == 1)
N								extern  uint32_t FBuffRGBA_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X								extern  uint32_t FBuffRGBA_GDC0_A1 [(1280)*420];
N						#endif
N				#endif
N		#endif
N#endif
N
N#if (GDC0_LAYER_B == ON)
X#if (0 == 1)
S		#if(GDC0_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if (GDC0_LAYER_C == ON)
X#if (0 == 1)
S		#if(GDC0_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if(GDC0_LAYER_D == ON)
X#if(0 == 1)
S		#if(GDC0_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if(GDC0_LAYER_E == ON)
X#if(0 == 1)
S		#if(GDC0_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#endif /* GDC0 */
N
N
N/* GDC 1 Frame Buffers */
N#if (GDCx1 == ON)
X#if (0 == 1)
S
S#ifndef LAYERA_FULL_SIZE
S    /* GDC1 framebuffer */
S    #if(GDC1_LAYER_A == ON)
S            #if(GDC1_LAYER_A_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERB_FULL_SIZE
S    #if(GDC1_LAYER_B == ON)
S            #if(GDC1_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERC_FULL_SIZE
S    #if(GDC1_LAYER_C == ON)
S            #if(GDC1_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERD_FULL_SIZE
S    #if(GDC1_LAYER_D == ON)
S            #if(GDC1_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERE_FULL_SIZE
S    #if(GDC1_LAYER_E == ON)
S            #if(GDC1_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_E0 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_E0 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
N#endif /* GDC1 */
N
N/* FG Frame Buffers */
N#if (FRAMEGRABBER == ON)
X#if (FRAMEGRABBER == 1)
S
S#if(FG_BUFFER_1 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
S#if(FG_BUFFER_2 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
S#if(FG_BUFFER_3 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
N#endif /* FG */
N
N
N#endif /* FBUFFER_H */
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 23 "..\..\..\..\mw\src\fbuffer.c" 2
N
N
N/**********************************************
N*                commandlist                  *
N**********************************************/
N/* Command lists allocation */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section bss = ".CommandLists"
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#pragma arm section zidata = ".CommandLists"
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
Nga_list_st stList1;
Nga_list_st stList2;
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section bss = default
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#pragma arm section zidata
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N
N/**********************************************
N*                framebuffer                  *
N**********************************************/
N/* GDC 0 Frame Buffers */
N#if (GDCx0 == ON)
X#if (1 == 1)
N
N    #if (GDC0_LAYER_A == ON)
X    #if (1 == 1)
N
N        #if defined(__GHS__) || defined(__ghs__)
X        #if 0L || 0L
S        #pragma ghs section bss = ".FBGDC0LA"
N        #endif /* defined(__GHS__) || defined(__ghs__) */
N
N        #if defined(__arm__) && defined(__ARMCC_VERSION)
X        #if 1L && 1L
N        #pragma arm section zidata = ".FBGDC0LA"
N        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N        #if(GDC0_LAYER_A_COLOR_FORMAT != FMT_OFF)
X        #if((1) != (0))
N            #if(GDC0_LAYER_A_COLOR_FORMAT == FMT_RGB16)
X            #if((1) == (4))
S                uint16_t FBuffRGB_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S                #if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
S                    uint16_t FBuffRGB_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S                #endif
N            #else
N                uint32_t FBuffRGBA_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X                uint32_t FBuffRGBA_GDC0_A0 [(1280)*420];
N                #if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
X                #if(1 == 1)
N                    uint32_t FBuffRGBA_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X                    uint32_t FBuffRGBA_GDC0_A1 [(1280)*420];
N                #endif
N            #endif
N        #endif
N    #endif
N    
N    #if (GDC0_LAYER_B == ON)
X    #if (0 == 1)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC0LB"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC0LB"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC0_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S            #if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S            #if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S            #endif
S        #endif
N    #endif
N
N    #if (GDC0_LAYER_C == ON)
X    #if (0 == 1)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC0LC"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC0LC"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC0_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S            #if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S            #if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S            #endif
S        #endif
N    #endif
N
N    #if(GDC0_LAYER_D == ON)
X    #if(0 == 1)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC0LD"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC0LD"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC0_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S            #if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S            #if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S            #endif
S        #endif
N    #endif
N
N    #if(GDC0_LAYER_E == ON)
X    #if(0 == 1)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC0LE"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC0LE"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC0_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S            #if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S            #if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S            #endif
S        #endif
N    #endif
N
N    #if defined(__GHS__) || defined(__ghs__)
X    #if 0L || 0L
S    #pragma ghs section bss = default
N    #endif /* defined(__GHS__) || defined(__ghs__) */
N
N    #if defined(__arm__) && defined(__ARMCC_VERSION)
X    #if 1L && 1L
N    #pragma arm section zidata 
N    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N#endif /* GDCx0 */
N
N
N
N/* GDC 1 Frame Buffers */
N#if (GDCx1 == ON)
X#if (0 == 1)
S
S#ifndef LAYERA_FULL_SIZE
S    #if(GDC1_LAYER_A == ON)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC1LA"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC1LA"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC1_LAYER_A_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S            #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S            #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S            #endif
S        #endif
S    #endif
S#endif
S   
S#ifndef LAYERB_FULL_SIZE
S    #if(GDC1_LAYER_B == ON)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC1LB"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC1LB"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC1_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S            #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S            #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S            #endif
S        #endif
S    #endif
S#endif
S
S#ifndef LAYERC_FULL_SIZE
S    #if(GDC1_LAYER_C == ON)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC1LC"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC1LC"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC1_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S            #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S            #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S            #endif
S        #endif
S    #endif
S#endif
S
S#ifndef LAYERD_FULL_SIZE
S    #if(GDC1_LAYER_D == ON)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC1LD"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC1LD"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC1_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S            #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S            #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S            #endif
S        #endif
S    #endif
S#endif
S
S#ifndef LAYERE_FULL_SIZE
S    #if(GDC1_LAYER_E == ON)
S
S        #if defined(__GHS__) || defined(__ghs__)
S        #pragma ghs section bss = ".FBGDC1LE"
S        #endif /* defined(__GHS__) || defined(__ghs__) */
S
S        #if defined(__arm__) && defined(__ARMCC_VERSION)
S        #pragma arm section zidata = ".FBGDC1LE"
S        #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S        #if(GDC1_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S            uint16_t FBuffRGB_GDC1_E0 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S            #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                uint16_t FBuffRGB_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S            #endif
S        #else
S            uint32_t FBuffRGBA_GDC1_E0[GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S            #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                uint32_t FBuffRGBA_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S            #endif
S        #endif
S    #endif
S#endif
S
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = default
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata 
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
N#endif /* GDCx1 */
N
N
N/* FG Frame Buffers */
N#if (FRAMEGRABBER == ON)
X#if (FRAMEGRABBER == 1)
S
S#if(FG_BUFFER_1 == ON)
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = ".FGBUFF0"
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata = ".FGBUFF0"
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				uint16_t FG_RGBBuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				uint32_t FG_RGBABuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = default
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata 
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S#endif
S
S#if(FG_BUFFER_2 == ON)
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = ".FGBUFF1"
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata = ".FGBUFF1"
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				uint16_t FG_RGBBuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				uint32_t FG_RGBABuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = default
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata 
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S#endif
S
S#if(FG_BUFFER_3 == ON)
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = ".FGBUFF2"
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata = ".FGBUFF2"
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				uint16_t FG_RGBBuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				uint32_t FG_RGBABuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S
S    #if defined(__GHS__) || defined(__ghs__)
S    #pragma ghs section bss = default
S    #endif /* defined(__GHS__) || defined(__ghs__) */
S
S    #if defined(__arm__) && defined(__ARMCC_VERSION)
S    #pragma arm section zidata 
S    #endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
S
S#endif
S
N#endif /* FG */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
