; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\wdt.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\wdt.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\wdt.crf ..\..\..\..\lldd\src\wdt.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vWDT_GetVersion PROC
;;;52     
;;;53     void vWDT_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;54                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;55                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;56     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;57        *pau8ModuleRevision = &au8LLDD_WDT_C_REVISION[0];
000008  e59f60c4          LDR      r6,|L1.212|
00000c  e5806000          STR      r6,[r0,#0]
;;;58        *pau8ModuleTag      = &au8LLDD_WDT_C_TAG[0];
000010  e59f60c0          LDR      r6,|L1.216|
000014  e5816000          STR      r6,[r1,#0]
;;;59        *pau8HeaderRevision = &au8LLDD_WDT_H_REVISION[0];
000018  e59f60bc          LDR      r6,|L1.220|
00001c  e5826000          STR      r6,[r2,#0]
;;;60        *pau8HeaderTag      = &au8LLDD_WDT_H_TAG[0];
000020  e59f60b8          LDR      r6,|L1.224|
000024  e5836000          STR      r6,[r3,#0]
;;;61        *pau8IORevision     = &au8LLDD_WDT_IO_H_REVISION[0];
000028  e59f60b4          LDR      r6,|L1.228|
00002c  e5846000          STR      r6,[r4,#0]
;;;62        *pau8IOTag          = &au8LLDD_WDT_IO_H_TAG[0];
000030  e59f60b0          LDR      r6,|L1.232|
000034  e5856000          STR      r6,[r5,#0]
;;;63     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;64     
                          ENDP

                  u32WDT_GetCounterValue PROC
;;;66     /****************************************************************************/
;;;67     uint32_t u32WDT_GetCounterValue(void)
00003c  e59f00a8          LDR      r0,|L1.236|
;;;68     {
;;;69         return u32GetCNT();
000040  e5900000          LDR      r0,[r0,#0]
;;;70     }
000044  e12fff1e          BX       lr
;;;71     
                          ENDP

                  vWDT_SetLowerLimit PROC
;;;73     /****************************************************************************/
;;;74     void vWDT_SetLowerLimit(uint32_t u32Value)
000048  e59f109c          LDR      r1,|L1.236|
;;;75     {
;;;76         vSetMIN(u32Value);
00004c  e5810004          STR      r0,[r1,#4]
;;;77     }
000050  e12fff1e          BX       lr
;;;78     
                          ENDP

                  u32WDT_GetLowerLimit PROC
;;;80     /****************************************************************************/
;;;81     uint32_t u32WDT_GetLowerLimit(void)
000054  e59f0090          LDR      r0,|L1.236|
;;;82     {
;;;83         return u32GetMIN();
000058  e5900004          LDR      r0,[r0,#4]
;;;84     }
00005c  e12fff1e          BX       lr
;;;85     
                          ENDP

                  vWDT_SetUpperLimit PROC
;;;87     /****************************************************************************/
;;;88     void vWDT_SetUpperLimit(uint32_t u32Value)
000060  e59f1084          LDR      r1,|L1.236|
;;;89     {
;;;90         vSetMAX(u32Value);
000064  e5810008          STR      r0,[r1,#8]
;;;91     }
000068  e12fff1e          BX       lr
;;;92     
                          ENDP

                  u32WDT_GetUppererLimit PROC
;;;94     /****************************************************************************/
;;;95     uint32_t u32WDT_GetUppererLimit(void)
00006c  e59f0078          LDR      r0,|L1.236|
;;;96     {
;;;97         return u32GetMAX();
000070  e5900008          LDR      r0,[r0,#8]
;;;98     }
000074  e12fff1e          BX       lr
;;;99     
                          ENDP

                  vWDT_Enable PROC
;;;101    /****************************************************************************/
;;;102    void vWDT_Enable(wdt_enable_e eEn)
000078  e59f106c          LDR      r1,|L1.236|
;;;103    {
;;;104        vSetCTL_WDTDIS(eEn);
00007c  e5d1100c          LDRB     r1,[r1,#0xc]
000080  e7c01010          BFI      r1,r0,#0,#1
000084  e59f2060          LDR      r2,|L1.236|
000088  e5c2100c          STRB     r1,[r2,#0xc]
;;;105    }
00008c  e12fff1e          BX       lr
;;;106    
                          ENDP

                  eWDT_CheckIfEnabled PROC
;;;108    /****************************************************************************/
;;;109    wdt_enable_e eWDT_CheckIfEnabled(void)
000090  e59f0054          LDR      r0,|L1.236|
;;;110    {
;;;111        return (wdt_enable_e)biGetCTL_WDTDIS();
000094  e5d0000c          LDRB     r0,[r0,#0xc]
000098  e2000001          AND      r0,r0,#1
;;;112    }
00009c  e12fff1e          BX       lr
;;;113    
                          ENDP

                  vWDT_SetCommand PROC
;;;115    /****************************************************************************/
;;;116    void vWDT_SetCommand(wdt_command_e eCommand)
0000a0  e59f1044          LDR      r1,|L1.236|
;;;117    {
;;;118        vSetCMD_CMD(eCommand);
0000a4  e1d111b0          LDRH     r1,[r1,#0x10]
0000a8  e7cf1010          BFI      r1,r0,#0,#16
0000ac  e59f2038          LDR      r2,|L1.236|
0000b0  e1c211b0          STRH     r1,[r2,#0x10]
;;;119    }
0000b4  e12fff1e          BX       lr
;;;120    
                          ENDP

                  vWDT_Config PROC
;;;122    /****************************************************************************/
;;;123    void vWDT_Config(wdt_config_st stConfig)
0000b8  e92d4007          PUSH     {r0-r2,lr}
;;;124    {
;;;125        vSetMIN(stConfig.u32LowerLimit);
0000bc  e59d0004          LDR      r0,[sp,#4]
0000c0  e59f1024          LDR      r1,|L1.236|
0000c4  e5810004          STR      r0,[r1,#4]
;;;126        vSetMAX(stConfig.u32UpperLimit);
0000c8  e59d0008          LDR      r0,[sp,#8]
0000cc  e5810008          STR      r0,[r1,#8]
;;;127    }
0000d0  e8bd800e          POP      {r1-r3,pc}
;;;128    
                          ENDP

                  |L1.212|
                          DCD      au8LLDD_WDT_C_REVISION
                  |L1.216|
                          DCD      au8LLDD_WDT_C_TAG
                  |L1.220|
                          DCD      au8LLDD_WDT_H_REVISION
                  |L1.224|
                          DCD      au8LLDD_WDT_H_TAG
                  |L1.228|
                          DCD      au8LLDD_WDT_IO_H_REVISION
                  |L1.232|
                          DCD      au8LLDD_WDT_IO_H_TAG
                  |L1.236|
                          DCD      0xc0002000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_WDT_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e382024          DCB      0x2e,0x38,0x20,0x24
000010  00                DCB      0x00
                  au8LLDD_WDT_C_TAG
000011  244e61            DCB      0x24,0x4e,0x61
000014  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000018  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
00001c  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000020  202400            DCB      0x20,0x24,0x00
                  au8LLDD_WDT_H_REVISION
000023  24                DCB      0x24
000024  52657669          DCB      0x52,0x65,0x76,0x69
000028  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00002c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000030  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_WDT_H_TAG
000034  244e616d          DCB      0x24,0x4e,0x61,0x6d
000038  653a204c          DCB      0x65,0x3a,0x20,0x4c
00003c  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000040  315f3620          DCB      0x31,0x5f,0x36,0x20
000044  2400              DCB      0x24,0x00
                  au8LLDD_WDT_IO_H_REVISION
000046  2452              DCB      0x24,0x52
000048  65766973          DCB      0x65,0x76,0x69,0x73
00004c  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000050  20312e31          DCB      0x20,0x31,0x2e,0x31
000054  30202400          DCB      0x30,0x20,0x24,0x00
                  au8LLDD_WDT_IO_H_TAG
000058  244e616d          DCB      0x24,0x4e,0x61,0x6d
00005c  653a204c          DCB      0x65,0x3a,0x20,0x4c
000060  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000064  315f3620          DCB      0x31,0x5f,0x36,0x20
000068  2400              DCB      0x24,0x00
