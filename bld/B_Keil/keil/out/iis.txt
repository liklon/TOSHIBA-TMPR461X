; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\iis.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\iis.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\iis.crf ..\..\..\..\lldd\src\iis.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vIIS_GetVersion PROC
;;;53     /****************************************************************************/
;;;54     void vIIS_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;55                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;56                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;57     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;58        *pau8ModuleRevision = &au8LLDD_IIS_C_REVISION[0];
000008  e59f6704          LDR      r6,|L1.1812|
00000c  e5806000          STR      r6,[r0,#0]
;;;59        *pau8ModuleTag      = &au8LLDD_IIS_C_TAG[0];
000010  e59f6700          LDR      r6,|L1.1816|
000014  e5816000          STR      r6,[r1,#0]
;;;60        *pau8HeaderRevision = &au8LLDD_IIS_H_REVISION[0];
000018  e59f66fc          LDR      r6,|L1.1820|
00001c  e5826000          STR      r6,[r2,#0]
;;;61        *pau8HeaderTag      = &au8LLDD_IIS_H_TAG[0];
000020  e59f66f8          LDR      r6,|L1.1824|
000024  e5836000          STR      r6,[r3,#0]
;;;62        *pau8IORevision     = &au8LLDD_IIS_IO_H_REVISION[0];
000028  e59f66f4          LDR      r6,|L1.1828|
00002c  e5846000          STR      r6,[r4,#0]
;;;63        *pau8IOTag          = &au8LLDD_IIS_IO_H_TAG[0];
000030  e59f66f0          LDR      r6,|L1.1832|
000034  e5856000          STR      r6,[r5,#0]
;;;64     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;65     
                          ENDP

                  eIIS_SetTxRxOper PROC
;;;192    /****************************************************************************/
;;;193    iis_ErrCode_e eIIS_SetTxRxOper(iis_Ch_e eCh, iis_TrsfOper_e eTrsfOper)
00003c  e92d4030          PUSH     {r4,r5,lr}
;;;194    {
000040  e1a02000          MOV      r2,r0
;;;195        iis_ErrCode_e eErrCode = IIS_FAIL;
000044  e3a00001          MOV      r0,#1
;;;196        
;;;197        /* Check if the parameters are in range and write them */
;;;198        if( (IIS_TRSF_OPER_DISABLE == eTrsfOper) || (IIS_TRSF_OPER_ENABLE == eTrsfOper) )
000048  e3510000          CMP      r1,#0
00004c  0a000001          BEQ      |L1.88|
000050  e3510001          CMP      r1,#1
000054  1a000007          BNE      |L1.120|
                  |L1.88|
;;;199        {
;;;200            vSetI2SCTRL_TXRXEN(eCh, eTrsfOper);
000058  e59f46cc          LDR      r4,|L1.1836|
00005c  e0843602          ADD      r3,r4,r2,LSL #12
000060  e1d330b0          LDRH     r3,[r3,#0]
000064  e7c03011          BFI      r3,r1,#0,#1
000068  e1a05004          MOV      r5,r4
00006c  e0854602          ADD      r4,r5,r2,LSL #12
000070  e1c430b0          STRH     r3,[r4,#0]
;;;201            eErrCode = IIS_OK;
000074  e3a00000          MOV      r0,#0
                  |L1.120|
;;;202        }
;;;203        return eErrCode;
;;;204    }
000078  e8bd8030          POP      {r4,r5,pc}
;;;205    
                          ENDP

                  eIIS_SetMClkOper PROC
;;;234    /****************************************************************************/
;;;235    iis_ErrCode_e eIIS_SetMClkOper(iis_Ch_e eCh, iis_MClkOper_e eMClkOper)
00007c  e92d40f0          PUSH     {r4-r7,lr}
;;;236    {
000080  e1a02000          MOV      r2,r0
;;;237        iis_ErrCode_e eErrCode = IIS_FAIL;
000084  e3a00001          MOV      r0,#1
;;;238        uint32_t u32ClkConfReg = 0;
000088  e3a03000          MOV      r3,#0
;;;239        uint32_t u32MClkOper = 0;
00008c  e3a05000          MOV      r5,#0
;;;240        uint32_t u32ClrMask = 0;
000090  e3a04000          MOV      r4,#0
;;;241        
;;;242        /* Check if the parameters are in range and write them  */
;;;243        if( (IIS_MCLKOPER_DISABLE == eMClkOper) || (IIS_MCLKOPER_ENABLE == eMClkOper) )
000094  e3510000          CMP      r1,#0
000098  0a000001          BEQ      |L1.164|
00009c  e3510602          CMP      r1,#0x200000
0000a0  1a000009          BNE      |L1.204|
                  |L1.164|
;;;244        {
;;;245            u32MClkOper = (uint32_t)eMClkOper;
0000a4  e1a05001          MOV      r5,r1
;;;246            u32ClrMask = ~((uint32_t)IIS_MCLKOPER_ENABLE);
0000a8  e3e04602          MVN      r4,#0x200000
;;;247    
;;;248            /* 
;;;249             *  get the old register value
;;;250             *  Clear the enable bit and apply ne bit value to 
;;;251             *  enable or disable MCLK
;;;252             */
;;;253            u32ClkConfReg = u32GetI2SCLKCONF(eCh);            
0000ac  e59f7678          LDR      r7,|L1.1836|
0000b0  e0876602          ADD      r6,r7,r2,LSL #12
0000b4  e5963008          LDR      r3,[r6,#8]
;;;254            u32ClkConfReg = u32ClkConfReg & u32ClrMask;
0000b8  e0033004          AND      r3,r3,r4
;;;255            u32ClkConfReg = u32ClkConfReg | u32MClkOper;            
0000bc  e1833005          ORR      r3,r3,r5
;;;256            vSetI2SCLKCONF(eCh, u32ClkConfReg);            
0000c0  e0876602          ADD      r6,r7,r2,LSL #12
0000c4  e5863008          STR      r3,[r6,#8]
;;;257            eErrCode = IIS_OK;
0000c8  e3a00000          MOV      r0,#0
                  |L1.204|
;;;258        }
;;;259        return eErrCode;
;;;260    }
0000cc  e8bd80f0          POP      {r4-r7,pc}
;;;261    
                          ENDP

                  eIIS_GetMClkOper PROC
;;;263    /****************************************************************************/
;;;264    iis_MClkOper_e eIIS_GetMClkOper(iis_Ch_e eCh)
0000d0  e1a01000          MOV      r1,r0
;;;265    {
;;;266        iis_MClkOper_e eMClkOper = IIS_MCLKOPER_DISABLE;
0000d4  e3a00000          MOV      r0,#0
;;;267        
;;;268        /* Read the current value of the MCLK enable bit */
;;;269        eMClkOper = (iis_MClkOper_e)(u32GetI2SCLKCONF(eCh) & IIS_MCLKOPER_ENABLE);
0000d8  e59f364c          LDR      r3,|L1.1836|
0000dc  e0832601          ADD      r2,r3,r1,LSL #12
0000e0  e5922008          LDR      r2,[r2,#8]
0000e4  e2020602          AND      r0,r2,#0x200000
;;;270    
;;;271        /* Return the respective enumeration value according the MCLKEN bit value */
;;;272        return eMClkOper;
;;;273    }
0000e8  e12fff1e          BX       lr
;;;274    
                          ENDP

                  eIIS_SetClkAttr PROC
;;;276    /****************************************************************************/
;;;277    iis_ErrCode_e eIIS_SetClkAttr(iis_Ch_e eCh,iis_MClkOut_e eMClkOut,
0000ec  e92d47f0          PUSH     {r4-r10,lr}
;;;278                                  iis_LatchTime_e eLatchTime, iis_BClkDiv_e eBClkDiv)
;;;279    {
0000f0  e1a07000          MOV      r7,r0
0000f4  e1a05001          MOV      r5,r1
0000f8  e1a06002          MOV      r6,r2
0000fc  e1a04003          MOV      r4,r3
;;;280        iis_ErrCode_e eErrCode = IIS_FAIL;
000100  e3a08001          MOV      r8,#1
;;;281        iis_MClkOper_e eMClkOperOld;            
;;;282        
;;;283        /*     
;;;284         *  MCLK should be disabled during set-up. Preserve the old value
;;;285         *  and restore it after applying new settings
;;;286         */
;;;287        if (((eLatchTime >= IIS_LTIME_2) && (eLatchTime <= IIS_LTIME_32))
000104  e3560004          CMP      r6,#4
000108  ba000018          BLT      |L1.368|
00010c  e356007c          CMP      r6,#0x7c
000110  ca000016          BGT      |L1.368|
;;;288            && ((IIS_MCLKOUT_DISABLE == eMClkOut) ||
000114  e3550000          CMP      r5,#0
000118  0a000001          BEQ      |L1.292|
;;;289                (IIS_MCLKOUT_ENABLE == eMClkOut))
00011c  e3550602          CMP      r5,#0x200000
000120  1a000012          BNE      |L1.368|
                  |L1.292|
;;;290            && ((IIS_BCLKDIV_8 == eBClkDiv) || (IIS_BCLKDIV_16 == eBClkDiv) ||
000124  e3540000          CMP      r4,#0
000128  0a000003          BEQ      |L1.316|
00012c  e3540001          CMP      r4,#1
000130  0a000001          BEQ      |L1.316|
;;;291                (IIS_BCLKDIV_32 == eBClkDiv)))
000134  e3540002          CMP      r4,#2
000138  1a00000c          BNE      |L1.368|
                  |L1.316|
;;;292        {
;;;293            /* 
;;;294             *  Prepare the value to be written
;;;295             *  Choose IIS channel
;;;296             *  Store the current setting of MCLKEN bit
;;;297             *  Change clock attributes
;;;298             *  Restore the original MCLKEN bit setting
;;;299             */
;;;300            uint32_t u32Attr = (uint32_t)(eMClkOut | eLatchTime | eBClkDiv);
00013c  e1850006          ORR      r0,r5,r6
000140  e1809004          ORR      r9,r0,r4
;;;301            
;;;302            eMClkOperOld = eIIS_GetMClkOper(eCh);            
000144  e1a00007          MOV      r0,r7
000148  ebfffffe          BL       eIIS_GetMClkOper
00014c  e1a0a000          MOV      r10,r0
;;;303            vSetI2SCLKCONF(eCh, u32Attr);            
000150  e59f15d4          LDR      r1,|L1.1836|
000154  e0810607          ADD      r0,r1,r7,LSL #12
000158  e5809008          STR      r9,[r0,#8]
;;;304            eErrCode = eIIS_SetMClkOper (eCh, eMClkOperOld);
00015c  e1a0100a          MOV      r1,r10
000160  e1a00007          MOV      r0,r7
000164  ebfffffe          BL       eIIS_SetMClkOper
000168  e1a08000          MOV      r8,r0
;;;305        }
00016c  e320f000          NOP      
                  |L1.368|
;;;306        return eErrCode;
000170  e1a00008          MOV      r0,r8
;;;307    }
000174  e8bd87f0          POP      {r4-r10,pc}
;;;308    
                          ENDP

                  vIIS_EnableInt PROC
;;;326    /****************************************************************************/
;;;327    void vIIS_EnableInt(iis_Ch_e eCh, uint8_t u8Mask)
000178  e92d4010          PUSH     {r4,lr}
;;;328    {
00017c  e1a02001          MOV      r2,r1
;;;329        uint32_t u8TmpMask = 0x00;
000180  e3a01000          MOV      r1,#0
;;;330        
;;;331        /* 
;;;332         *  Get the current mask
;;;333         *  Clear bits to unmask and set the new mask
;;;334         */
;;;335        u8TmpMask = u8GetI2SIRMASK(eCh);        
000184  e59f45a0          LDR      r4,|L1.1836|
000188  e0843600          ADD      r3,r4,r0,LSL #12
00018c  e5d31014          LDRB     r1,[r3,#0x14]
;;;336        u8TmpMask = u8TmpMask & ~u8Mask;        
000190  e1c11002          BIC      r1,r1,r2
;;;337        vSetI2SIRMASK(eCh, u8TmpMask);        
000194  e0843600          ADD      r3,r4,r0,LSL #12
000198  e5c31014          STRB     r1,[r3,#0x14]
;;;338    }
00019c  e8bd8010          POP      {r4,pc}
;;;339    
                          ENDP

                  vIIS_ClearIrq PROC
;;;341    /****************************************************************************/
;;;342    void vIIS_ClearIrq(iis_Ch_e eCh, uint32_t u32Mask)
0001a0  e92d4010          PUSH     {r4,lr}
;;;343    {
;;;344        /*  Write the IRQ clear mask bits */          
;;;345        vSetI2SIRCLR(eCh, u32Mask);        
0001a4  e59f4580          LDR      r4,|L1.1836|
0001a8  e0843600          ADD      r3,r4,r0,LSL #12
0001ac  e5c31010          STRB     r1,[r3,#0x10]
;;;346    }
0001b0  e8bd8010          POP      {r4,pc}
;;;347    
                          ENDP

                  eIIS_SetWidthLength PROC
;;;207    /****************************************************************************/
;;;208    iis_ErrCode_e eIIS_SetWidthLength(iis_Ch_e eCh, iis_DataWid_e eDataWidth, iis_WsLen_e eWsLen)
0001b4  e92d40f0          PUSH     {r4-r7,lr}
;;;209    {
0001b8  e1a03000          MOV      r3,r0
;;;210        iis_ErrCode_e eErrCode = IIS_FAIL;
0001bc  e3a00001          MOV      r0,#1
;;;211        uint32_t u32LenWid = 0;
0001c0  e3a04000          MOV      r4,#0
;;;212        uint32_t u32DataWidth_1;
;;;213        uint32_t u32DataWidth_32;
;;;214    
;;;215        u32DataWidth_1  = IIS_DATAWID_1;
0001c4  e3a06000          MOV      r6,#0
;;;216        u32DataWidth_32 = IIS_DATAWID_32;
0001c8  e3015f00          MOVW     r5,#0x1f00
;;;217        /* 
;;;218         *  Check if the parameters are in range and write them
;;;219         *  Combine both params to create one Word to be written
;;;220         */
;;;221        if ((eDataWidth >= u32DataWidth_1) && (eDataWidth <= u32DataWidth_32))
0001cc  e1510006          CMP      r1,r6
0001d0  3a000006          BCC      |L1.496|
0001d4  e1510005          CMP      r1,r5
0001d8  8a000004          BHI      |L1.496|
;;;222        {
;;;223            u32LenWid = (uint32_t)(eDataWidth | eWsLen);
0001dc  e1814002          ORR      r4,r1,r2
;;;224            
;;;225            vSetI2SLENGTH(eCh,u32LenWid);
0001e0  e59fe544          LDR      lr,|L1.1836|
0001e4  e08ec603          ADD      r12,lr,r3,LSL #12
0001e8  e1cc40b4          STRH     r4,[r12,#4]
;;;226            
;;;227            eErrCode = IIS_OK;
0001ec  e3a00000          MOV      r0,#0
                  |L1.496|
;;;228        }
;;;229    
;;;230        return eErrCode;
;;;231    }
0001f0  e8bd80f0          POP      {r4-r7,pc}
;;;232    
                          ENDP

                  eIIS_SetWrdSelTxPol PROC
;;;137    /****************************************************************************/
;;;138    iis_ErrCode_e eIIS_SetWrdSelTxPol(iis_Ch_e eCh, iis_WrdSelPol_e eWrdSelPol,
0001f4  e92d4070          PUSH     {r4-r6,lr}
;;;139                                      iis_TxPol_e eTxPol)
;;;140    {
0001f8  e1a03000          MOV      r3,r0
;;;141        iis_ErrCode_e eErrCode = IIS_FAIL;
0001fc  e3a00001          MOV      r0,#1
;;;142        
;;;143        /* Check if the parameters are in range and write them */
;;;144        if( ((IIS_WRDSEL_START_LOW == eWrdSelPol) || (IIS_WRDSEL_START_HIGH == eWrdSelPol))
000200  e3510000          CMP      r1,#0
000204  0a000001          BEQ      |L1.528|
000208  e3510001          CMP      r1,#1
00020c  1a000011          BNE      |L1.600|
                  |L1.528|
;;;145            && ((IIS_TXPOL_FALL_EDGE == eTxPol) || (IIS_TXPOL_RISE_EDGE == eTxPol)) )
000210  e3520000          CMP      r2,#0
000214  0a000001          BEQ      |L1.544|
000218  e3520001          CMP      r2,#1
00021c  1a00000d          BNE      |L1.600|
                  |L1.544|
;;;146        {
;;;147            vSetI2SCTRL_POL(eCh, eTxPol);
000220  e59f5504          LDR      r5,|L1.1836|
000224  e0854603          ADD      r4,r5,r3,LSL #12
000228  e1d440b0          LDRH     r4,[r4,#0]
00022c  e7c84412          BFI      r4,r2,#8,#1
000230  e1a06005          MOV      r6,r5
000234  e0865603          ADD      r5,r6,r3,LSL #12
000238  e1c540b0          STRH     r4,[r5,#0]
;;;148            vSetI2SCTRL_WSPol(eCh, eWrdSelPol);
00023c  e1a05006          MOV      r5,r6
000240  e0854603          ADD      r4,r5,r3,LSL #12
000244  e1d440b0          LDRH     r4,[r4,#0]
000248  e7c94491          BFI      r4,r1,#9,#1
00024c  e0865603          ADD      r5,r6,r3,LSL #12
000250  e1c540b0          STRH     r4,[r5,#0]
;;;149            eErrCode = IIS_OK;
000254  e3a00000          MOV      r0,#0
                  |L1.600|
;;;150        }
;;;151        return eErrCode;
;;;152    }
000258  e8bd8070          POP      {r4-r6,pc}
;;;153    
                          ENDP

                  eIIS_SetErrResolve PROC
;;;155    /****************************************************************************/
;;;156    iis_ErrCode_e eIIS_SetErrResolve(iis_Ch_e eCh, iis_ErrOvrRes_e eErrOvrRes,
00025c  e92d4070          PUSH     {r4-r6,lr}
;;;157                                     iis_ErrUdrRes_e eErrUdrRes)
;;;158    {
000260  e1a03000          MOV      r3,r0
;;;159        iis_ErrCode_e eErrCode = IIS_FAIL;
000264  e3a00001          MOV      r0,#1
;;;160        
;;;161        /* Check if the parameters are in range and write them  */
;;;162        if( ((IIS_ERR_OVR_DISCARD == eErrOvrRes) || (IIS_ERR_OVR_STOP_WS == eErrOvrRes))
000268  e3510000          CMP      r1,#0
00026c  0a000001          BEQ      |L1.632|
000270  e3510001          CMP      r1,#1
000274  1a000011          BNE      |L1.704|
                  |L1.632|
;;;163            && ((IIS_ERR_UDR_SND_ZEROS == eErrUdrRes) || (IIS_ERR_UDR_STOP_WS == eErrUdrRes))
000278  e3520000          CMP      r2,#0
00027c  0a000001          BEQ      |L1.648|
000280  e3520001          CMP      r2,#1
000284  1a00000d          BNE      |L1.704|
                  |L1.648|
;;;164          )
;;;165        {
;;;166            vSetI2SCTRL_FullRes(eCh, eErrOvrRes);
000288  e59f549c          LDR      r5,|L1.1836|
00028c  e0854603          ADD      r4,r5,r3,LSL #12
000290  e1d440b0          LDRH     r4,[r4,#0]
000294  e7c54291          BFI      r4,r1,#5,#1
000298  e1a06005          MOV      r6,r5
00029c  e0865603          ADD      r5,r6,r3,LSL #12
0002a0  e1c540b0          STRH     r4,[r5,#0]
;;;167            vSetI2SCTRL_EmptyRes(eCh, eErrUdrRes);
0002a4  e1a05006          MOV      r5,r6
0002a8  e0854603          ADD      r4,r5,r3,LSL #12
0002ac  e1d440b0          LDRH     r4,[r4,#0]
0002b0  e7c44212          BFI      r4,r2,#4,#1
0002b4  e0865603          ADD      r5,r6,r3,LSL #12
0002b8  e1c540b0          STRH     r4,[r5,#0]
;;;168            eErrCode = IIS_OK;
0002bc  e3a00000          MOV      r0,#0
                  |L1.704|
;;;169        }
;;;170        return eErrCode;
;;;171    }
0002c0  e8bd8070          POP      {r4-r6,pc}
;;;172    
                          ENDP

                  eIIS_SetModeDir PROC
;;;174    /****************************************************************************/
;;;175    iis_ErrCode_e eIIS_SetModeDir (iis_Ch_e eCh, iis_Mode_e eMode, iis_Dir_e eDir)
0002c4  e92d4070          PUSH     {r4-r6,lr}
;;;176    {
0002c8  e1a03000          MOV      r3,r0
;;;177        iis_ErrCode_e eErrCode = IIS_FAIL;
0002cc  e3a00001          MOV      r0,#1
;;;178        
;;;179        /* Check if the parameters are in range and write them */
;;;180        if( ((IIS_MODE_SLAVE == eMode) || (IIS_MODE_MASTER == eMode))
0002d0  e3510000          CMP      r1,#0
0002d4  0a000001          BEQ      |L1.736|
0002d8  e3510001          CMP      r1,#1
0002dc  1a000011          BNE      |L1.808|
                  |L1.736|
;;;181            && ((IIS_DIR_RX == eDir) || (IIS_DIR_TX == eDir)) )
0002e0  e3520000          CMP      r2,#0
0002e4  0a000001          BEQ      |L1.752|
0002e8  e3520001          CMP      r2,#1
0002ec  1a00000d          BNE      |L1.808|
                  |L1.752|
;;;182        {
;;;183            vSetI2SCTRL_MSSLV(eCh, eMode);
0002f0  e59f5434          LDR      r5,|L1.1836|
0002f4  e0854603          ADD      r4,r5,r3,LSL #12
0002f8  e1d440b0          LDRH     r4,[r4,#0]
0002fc  e7c24111          BFI      r4,r1,#2,#1
000300  e1a06005          MOV      r6,r5
000304  e0865603          ADD      r5,r6,r3,LSL #12
000308  e1c540b0          STRH     r4,[r5,#0]
;;;184            vSetI2SCTRL_TXRXSEL(eCh, eDir);
00030c  e1a05006          MOV      r5,r6
000310  e0854603          ADD      r4,r5,r3,LSL #12
000314  e1d440b0          LDRH     r4,[r4,#0]
000318  e7c14092          BFI      r4,r2,#1,#1
00031c  e0865603          ADD      r5,r6,r3,LSL #12
000320  e1c540b0          STRH     r4,[r5,#0]
;;;185            eErrCode = IIS_OK;
000324  e3a00000          MOV      r0,#0
                  |L1.808|
;;;186        }
;;;187        
;;;188        return eErrCode;
;;;189    }
000328  e8bd8070          POP      {r4-r6,pc}
;;;190    
                          ENDP

                  eIIS_InitAsDAC PROC
;;;67     /****************************************************************************/
;;;68     iis_ErrCode_e eIIS_InitAsDAC(iis_Ch_e eCh)
00032c  e92d4030          PUSH     {r4,r5,lr}
;;;69     {
000330  e1a05000          MOV      r5,r0
;;;70         iis_ErrCode_e eErrCode = IIS_OK;
000334  e3a04000          MOV      r4,#0
;;;71         
;;;72         /* CTRL register configuration */
;;;73         eErrCode |= eIIS_SetModeDir(eCh, IIS_MODE_MASTER, IIS_DIR_TX);
000338  e3a02001          MOV      r2,#1
00033c  e1a01002          MOV      r1,r2
000340  e1a00005          MOV      r0,r5
000344  ebfffffe          BL       eIIS_SetModeDir
000348  e1844000          ORR      r4,r4,r0
;;;74     
;;;75         /* FIFO-Errors handling configuration */
;;;76         eErrCode |= eIIS_SetErrResolve(eCh, IIS_ERR_OVR_DISCARD, IIS_ERR_UDR_SND_ZEROS);
00034c  e3a02000          MOV      r2,#0
000350  e1a01002          MOV      r1,r2
000354  e1a00005          MOV      r0,r5
000358  ebfffffe          BL       eIIS_SetErrResolve
00035c  e1844000          ORR      r4,r4,r0
;;;77     
;;;78         /* Signals polarities confgiguration */
;;;79         eErrCode |= eIIS_SetWrdSelTxPol(eCh, IIS_WRDSEL_START_LOW, IIS_TXPOL_FALL_EDGE);
000360  e3a02000          MOV      r2,#0
000364  e1a01002          MOV      r1,r2
000368  e1a00005          MOV      r0,r5
00036c  ebfffffe          BL       eIIS_SetWrdSelTxPol
000370  e1844000          ORR      r4,r4,r0
;;;80     
;;;81         /* Data with configuration */
;;;82         eErrCode |= eIIS_SetWidthLength(eCh, IIS_DATAWID_16, IIS_WSLEN_16);
000374  e3a0200f          MOV      r2,#0xf
000378  e3001f00          MOVW     r1,#0xf00
00037c  e1a00005          MOV      r0,r5
000380  ebfffffe          BL       eIIS_SetWidthLength
000384  e1844000          ORR      r4,r4,r0
;;;83     
;;;84         /* Clear any pending interrupts */
;;;85         vIIS_ClearIrq(eCh, IIS_INT_RX_ERR | IIS_INT_TX_ERR);
000388  e3a01022          MOV      r1,#0x22
00038c  e1a00005          MOV      r0,r5
000390  ebfffffe          BL       vIIS_ClearIrq
;;;86     
;;;87         /* Interrupt mask register configuration (if interrupts used) */
;;;88         vIIS_EnableInt(eCh, IIS_INT_TX_AE_INT);
000394  e3a01001          MOV      r1,#1
000398  e1a00005          MOV      r0,r5
00039c  ebfffffe          BL       vIIS_EnableInt
;;;89     
;;;90         /* Initialize clocks */
;;;91         eErrCode |= eIIS_SetClkAttr(eCh,IIS_MCLKOUT_DISABLE, IIS_LTIME_31, IIS_BCLKDIV_8);
0003a0  e3a03000          MOV      r3,#0
0003a4  e3a02078          MOV      r2,#0x78
0003a8  e1a01003          MOV      r1,r3
0003ac  e1a00005          MOV      r0,r5
0003b0  ebfffffe          BL       eIIS_SetClkAttr
0003b4  e1844000          ORR      r4,r4,r0
;;;92         /* Activate MCLK for IIS */
;;;93         eErrCode |= eIIS_SetMClkOper(eCh, IIS_MCLKOPER_ENABLE);
0003b8  e3a01602          MOV      r1,#0x200000
0003bc  e1a00005          MOV      r0,r5
0003c0  ebfffffe          BL       eIIS_SetMClkOper
0003c4  e1844000          ORR      r4,r4,r0
;;;94     
;;;95         /* Starting first recording/playback: IIS enabled for RX/TX */
;;;96         eErrCode |= eIIS_SetTxRxOper (eCh, IIS_TRSF_OPER_ENABLE);
0003c8  e3a01001          MOV      r1,#1
0003cc  e1a00005          MOV      r0,r5
0003d0  ebfffffe          BL       eIIS_SetTxRxOper
0003d4  e1844000          ORR      r4,r4,r0
;;;97     
;;;98         return eErrCode;
0003d8  e1a00004          MOV      r0,r4
;;;99     }
0003dc  e8bd8030          POP      {r4,r5,pc}
;;;100    
                          ENDP

                  eIIS_InitAsADC PROC
;;;102    /****************************************************************************/
;;;103    iis_ErrCode_e eIIS_InitAsADC(iis_Ch_e eCh)
0003e0  e92d4030          PUSH     {r4,r5,lr}
;;;104    {
0003e4  e1a05000          MOV      r5,r0
;;;105        iis_ErrCode_e eErrCode = IIS_OK;
0003e8  e3a04000          MOV      r4,#0
;;;106        
;;;107        /* Configure as master RX */
;;;108        eErrCode |= eIIS_SetModeDir(eCh, IIS_MODE_MASTER, IIS_DIR_RX);
0003ec  e3a02000          MOV      r2,#0
0003f0  e3a01001          MOV      r1,#1
0003f4  e1a00005          MOV      r0,r5
0003f8  ebfffffe          BL       eIIS_SetModeDir
0003fc  e1844000          ORR      r4,r4,r0
;;;109    
;;;110        /* FIFO-Errors handling configuration */
;;;111        eErrCode |= eIIS_SetErrResolve(eCh, IIS_ERR_OVR_DISCARD, IIS_ERR_UDR_SND_ZEROS);
000400  e3a02000          MOV      r2,#0
000404  e1a01002          MOV      r1,r2
000408  e1a00005          MOV      r0,r5
00040c  ebfffffe          BL       eIIS_SetErrResolve
000410  e1844000          ORR      r4,r4,r0
;;;112    
;;;113        /* Signals polarities configuration */
;;;114        eErrCode |= eIIS_SetWrdSelTxPol(eCh, IIS_WRDSEL_START_LOW, IIS_TXPOL_FALL_EDGE);
000414  e3a02000          MOV      r2,#0
000418  e1a01002          MOV      r1,r2
00041c  e1a00005          MOV      r0,r5
000420  ebfffffe          BL       eIIS_SetWrdSelTxPol
000424  e1844000          ORR      r4,r4,r0
;;;115    
;;;116        /* Data with configuration */
;;;117        eErrCode |= eIIS_SetWidthLength(eCh, IIS_DATAWID_16, IIS_WSLEN_16);
000428  e3a0200f          MOV      r2,#0xf
00042c  e3001f00          MOVW     r1,#0xf00
000430  e1a00005          MOV      r0,r5
000434  ebfffffe          BL       eIIS_SetWidthLength
000438  e1844000          ORR      r4,r4,r0
;;;118    
;;;119        /* Clear any pending interrupts */
;;;120        vIIS_ClearIrq(eCh, IIS_INT_RX_ERR | IIS_INT_TX_ERR);
00043c  e3a01022          MOV      r1,#0x22
000440  e1a00005          MOV      r0,r5
000444  ebfffffe          BL       vIIS_ClearIrq
;;;121    
;;;122        /* Interrupt mask register configuration (if interrupts used) */
;;;123        vIIS_EnableInt(eCh, IIS_INT_RX_AF_INT);
000448  e3a01008          MOV      r1,#8
00044c  e1a00005          MOV      r0,r5
000450  ebfffffe          BL       vIIS_EnableInt
;;;124    
;;;125        /* Initialize clocks */
;;;126        eErrCode |= eIIS_SetClkAttr(eCh,IIS_MCLKOUT_ENABLE, IIS_LTIME_31, IIS_BCLKDIV_8);
000454  e3a03000          MOV      r3,#0
000458  e3a02078          MOV      r2,#0x78
00045c  e3a01602          MOV      r1,#0x200000
000460  e1a00005          MOV      r0,r5
000464  ebfffffe          BL       eIIS_SetClkAttr
000468  e1844000          ORR      r4,r4,r0
;;;127        /* Activate MCLK for IIS */
;;;128        eErrCode |= eIIS_SetMClkOper(eCh, IIS_MCLKOPER_ENABLE);
00046c  e3a01602          MOV      r1,#0x200000
000470  e1a00005          MOV      r0,r5
000474  ebfffffe          BL       eIIS_SetMClkOper
000478  e1844000          ORR      r4,r4,r0
;;;129    
;;;130        /* Starting first recording/playback: I2S0 enable for RX */
;;;131        eErrCode |= eIIS_SetTxRxOper(eCh, IIS_TRSF_OPER_ENABLE);
00047c  e3a01001          MOV      r1,#1
000480  e1a00005          MOV      r0,r5
000484  ebfffffe          BL       eIIS_SetTxRxOper
000488  e1844000          ORR      r4,r4,r0
;;;132    
;;;133        return eErrCode;
00048c  e1a00004          MOV      r0,r4
;;;134    }
000490  e8bd8030          POP      {r4,r5,pc}
;;;135    
                          ENDP

                  vIIS_DisableInt PROC
;;;310    /****************************************************************************/
;;;311    void vIIS_DisableInt(iis_Ch_e eCh, uint8_t u8Mask)
000494  e92d4010          PUSH     {r4,lr}
;;;312    {
;;;313        uint8_t u8TmpMask = 0x00;
000498  e3a02000          MOV      r2,#0
;;;314        
;;;315        /* 
;;;316         *  Get the current mask
;;;317         *  Set bits to mask out
;;;318         *  Set the new mask
;;;319         */
;;;320        u8TmpMask = u8GetI2SIRMASK(eCh);        
00049c  e59f4288          LDR      r4,|L1.1836|
0004a0  e0843600          ADD      r3,r4,r0,LSL #12
0004a4  e5d32014          LDRB     r2,[r3,#0x14]
;;;321        u8TmpMask = u8TmpMask | u8Mask;        
0004a8  e1822001          ORR      r2,r2,r1
;;;322        vSetI2SIRMASK(eCh, u8TmpMask);        
0004ac  e0843600          ADD      r3,r4,r0,LSL #12
0004b0  e5c32014          STRB     r2,[r3,#0x14]
;;;323    }
0004b4  e8bd8010          POP      {r4,pc}
;;;324    
                          ENDP

                  u8IIS_GetIrqStatus PROC
;;;349    /****************************************************************************/
;;;350    uint8_t u8IIS_GetIrqStatus(iis_Ch_e eCh)
0004b8  e1a01000          MOV      r1,r0
;;;351    {
;;;352        uint8_t u8IrqStat = 0;
0004bc  e3a00000          MOV      r0,#0
;;;353        
;;;354        /* Get the current IRQ status */       
;;;355        u8IrqStat = u8GetI2SIRSTAT(eCh);        
0004c0  e59f3264          LDR      r3,|L1.1836|
0004c4  e0832601          ADD      r2,r3,r1,LSL #12
0004c8  e5d2000c          LDRB     r0,[r2,#0xc]
;;;356    
;;;357        return u8IrqStat;
;;;358    }
0004cc  e12fff1e          BX       lr
;;;359    
                          ENDP

                  u32IIS_GetFifoStatus PROC
;;;361    /****************************************************************************/
;;;362    uint32_t u32IIS_GetFifoStatus(iis_Ch_e eCh)
0004d0  e1a01000          MOV      r1,r0
;;;363    {
;;;364        uint32_t u32FifoStat = 0;
0004d4  e3a00000          MOV      r0,#0
;;;365        
;;;366        /* Get the current FIFO status */    
;;;367        u32FifoStat = u32GetI2SFIFOSTAT(eCh);        
0004d8  e59f324c          LDR      r3,|L1.1836|
0004dc  e0832601          ADD      r2,r3,r1,LSL #12
0004e0  e592003c          LDR      r0,[r2,#0x3c]
;;;368    
;;;369        return u32FifoStat;
;;;370    }
0004e4  e12fff1e          BX       lr
;;;371    
                          ENDP

                  u16IIS_GetCtrlReg PROC
;;;373    /****************************************************************************/
;;;374    uint16_t u16IIS_GetCtrlReg(iis_Ch_e eCh)
0004e8  e1a01000          MOV      r1,r0
;;;375    {
;;;376        uint16_t u16CtrlReg = 0;
0004ec  e3a00000          MOV      r0,#0
;;;377        
;;;378        /* Get the control register value */
;;;379        u16CtrlReg = u16GetI2SCTRL(eCh);        
0004f0  e59f3234          LDR      r3,|L1.1836|
0004f4  e0832601          ADD      r2,r3,r1,LSL #12
0004f8  e1d200b0          LDRH     r0,[r2,#0]
;;;380    
;;;381        return u16CtrlReg;
;;;382    }
0004fc  e12fff1e          BX       lr
;;;383    
                          ENDP

                  u16IIS_GetLengthReg PROC
;;;385    /****************************************************************************/
;;;386    uint16_t u16IIS_GetLengthReg(iis_Ch_e eCh)
000500  e1a01000          MOV      r1,r0
;;;387    {
;;;388        uint16_t u16LengthReg = 0;
000504  e3a00000          MOV      r0,#0
;;;389        
;;;390        /* Get the length */
;;;391        u16LengthReg = u16GetI2SLENGTH(eCh);     
000508  e59f321c          LDR      r3,|L1.1836|
00050c  e0832601          ADD      r2,r3,r1,LSL #12
000510  e1d200b4          LDRH     r0,[r2,#4]
;;;392    
;;;393        return u16LengthReg;
;;;394    }
000514  e12fff1e          BX       lr
;;;395    
                          ENDP

                  u32IIS_GetClkCfgReg PROC
;;;397    /****************************************************************************/
;;;398    uint32_t u32IIS_GetClkCfgReg(iis_Ch_e eCh)
000518  e1a01000          MOV      r1,r0
;;;399    {
;;;400        uint32_t u32ClkCfgReg = 0;
00051c  e3a00000          MOV      r0,#0
;;;401        
;;;402        /* Get the current clock configuration */
;;;403        u32ClkCfgReg = u32GetI2SCLKCONF(eCh);    
000520  e59f3204          LDR      r3,|L1.1836|
000524  e0832601          ADD      r2,r3,r1,LSL #12
000528  e5920008          LDR      r0,[r2,#8]
;;;404        
;;;405        return u32ClkCfgReg;
;;;406    }
00052c  e12fff1e          BX       lr
;;;407    
                          ENDP

                  u8IIS_GetIntMaskReg PROC
;;;409    /****************************************************************************/
;;;410    uint8_t u8IIS_GetIntMaskReg(iis_Ch_e eCh)
000530  e1a01000          MOV      r1,r0
;;;411    {
;;;412        uint8_t u8IntMaskReg = 0;
000534  e3a00000          MOV      r0,#0
;;;413        
;;;414        /* Get the current IRQ mask */
;;;415        u8IntMaskReg = u8GetI2SIRMASK(eCh);      
000538  e59f31ec          LDR      r3,|L1.1836|
00053c  e0832601          ADD      r2,r3,r1,LSL #12
000540  e5d20014          LDRB     r0,[r2,#0x14]
;;;416    
;;;417        return u8IntMaskReg;
;;;418    }
000544  e12fff1e          BX       lr
;;;419    
                          ENDP

                  vIIS_WriteWord PROC
;;;421    /****************************************************************************/
;;;422    void vIIS_WriteWord(iis_Ch_e eCh, uint32_t u32Data)
000548  e59f31dc          LDR      r3,|L1.1836|
;;;423    {
;;;424        /* Write the word to the TX FIFO */
;;;425        vSetI2STXDATA(eCh, u32Data);      
00054c  e0832600          ADD      r2,r3,r0,LSL #12
000550  e5821018          STR      r1,[r2,#0x18]
;;;426    }
000554  e12fff1e          BX       lr
;;;427    
                          ENDP

                  u32IIS_ReadWord PROC
;;;429    /****************************************************************************/
;;;430    uint32_t u32IIS_ReadWord(iis_Ch_e eCh)
000558  e1a01000          MOV      r1,r0
;;;431    {
;;;432        uint32_t u32RdWord = 0;
00055c  e3a00000          MOV      r0,#0
;;;433        
;;;434        /* Get the word from the RX FIFO */
;;;435        u32RdWord = u32GetI2SRXDATA(eCh);
000560  e59f31c4          LDR      r3,|L1.1836|
000564  e0832601          ADD      r2,r3,r1,LSL #12
000568  e592001c          LDR      r0,[r2,#0x1c]
;;;436    
;;;437        return u32RdWord;
;;;438    }
00056c  e12fff1e          BX       lr
;;;439    
                          ENDP

                  eIIS_WriteData PROC
;;;441    /****************************************************************************/
;;;442    iis_ErrCode_e eIIS_WriteData(iis_Ch_e eCh, uint32_t u32DataLen, const uint32_t u32Data[])
000570  e92d4ff0          PUSH     {r4-r11,lr}
;;;443    {
000574  e1a0b000          MOV      r11,r0
000578  e1a04001          MOV      r4,r1
00057c  e1a08002          MOV      r8,r2
;;;444        iis_ErrCode_e eErrCode = IIS_FAIL;
000580  e3a09001          MOV      r9,#1
;;;445        uint32_t u32FifoStat = 0;
000584  e3a06000          MOV      r6,#0
;;;446        uint32_t u32DataIdx = 0;
000588  e3a05000          MOV      r5,#0
;;;447        uint32_t u32DataToSnd = u32DataLen;
00058c  e1a07004          MOV      r7,r4
;;;448        uint32_t u32CurFifoEmpty = 0;
000590  e3a0a000          MOV      r10,#0
;;;449        
;;;450        /* If FIFO has space write appropriate number of words */
;;;451        if( u32DataIdx < u32DataLen )
000594  e1550004          CMP      r5,r4
000598  2a000003          BCS      |L1.1452|
;;;452        {
;;;453            eErrCode = eIIS_SetTxRxOper(eCh, IIS_TRSF_OPER_ENABLE);
00059c  e3a01001          MOV      r1,#1
0005a0  e1a0000b          MOV      r0,r11
0005a4  ebfffffe          BL       eIIS_SetTxRxOper
0005a8  e1a09000          MOV      r9,r0
                  |L1.1452|
;;;454        }
;;;455        if( IIS_OK == eErrCode )
0005ac  e3590000          CMP      r9,#0
0005b0  1a00001f          BNE      |L1.1588|
;;;456        {
;;;457            while( u32DataIdx < u32DataLen )
0005b4  ea000019          B        |L1.1568|
                  |L1.1464|
;;;458            {
;;;459                u32FifoStat = u32IIS_GetFifoStatus(eCh);
0005b8  e1a0000b          MOV      r0,r11
0005bc  ebfffffe          BL       u32IIS_GetFifoStatus
0005c0  e1a06000          MOV      r6,r0
;;;460                u32FifoStat = (u32FifoStat & IIS_FIFO_TX_MASKS);
0005c4  e206681f          AND      r6,r6,#0x1f0000
;;;461                
;;;462                if( IIS_FIFO_TX_AE == (u32FifoStat & IIS_FIFO_TX_AE) )
0005c8  e2060702          AND      r0,r6,#0x80000
0005cc  e3500702          CMP      r0,#0x80000
0005d0  1a000001          BNE      |L1.1500|
;;;463                {
;;;464                    u32CurFifoEmpty = 24;
0005d4  e3a0a018          MOV      r10,#0x18
0005d8  ea000005          B        |L1.1524|
                  |L1.1500|
;;;465                }
;;;466                else
;;;467                {
;;;468                    if( IIS_FIFO_TX_EMPTY == (u32FifoStat & IIS_FIFO_TX_EMPTY) )
0005dc  e2060601          AND      r0,r6,#0x100000
0005e0  e3500601          CMP      r0,#0x100000
0005e4  1a000001          BNE      |L1.1520|
;;;469                    {
;;;470                        u32CurFifoEmpty = IIS_FIFO_TX_SIZE;
0005e8  e3a0a020          MOV      r10,#0x20
0005ec  ea000000          B        |L1.1524|
                  |L1.1520|
;;;471                    }
;;;472                    else
;;;473                    {
;;;474                        u32CurFifoEmpty = 0;
0005f0  e3a0a000          MOV      r10,#0
                  |L1.1524|
;;;475                    }
;;;476                }
;;;477                while( (u32DataToSnd > 0) && (u32CurFifoEmpty > 0) )
0005f4  ea000005          B        |L1.1552|
                  |L1.1528|
;;;478                {
;;;479                    vIIS_WriteWord(eCh, u32Data[u32DataIdx]);
0005f8  e7981105          LDR      r1,[r8,r5,LSL #2]
0005fc  e1a0000b          MOV      r0,r11
000600  ebfffffe          BL       vIIS_WriteWord
;;;480                    u32DataIdx++;
000604  e2855001          ADD      r5,r5,#1
;;;481                    u32DataToSnd--;
000608  e2477001          SUB      r7,r7,#1
;;;482                    u32CurFifoEmpty--;
00060c  e24aa001          SUB      r10,r10,#1
                  |L1.1552|
000610  e3570000          CMP      r7,#0                 ;477
000614  0a000001          BEQ      |L1.1568|
000618  e35a0000          CMP      r10,#0                ;477
00061c  1afffff5          BNE      |L1.1528|
                  |L1.1568|
000620  e1550004          CMP      r5,r4                 ;457
000624  3affffe3          BCC      |L1.1464|
;;;483                }
;;;484            }
;;;485            /* Check if all data has been written */
;;;486            if( u32DataIdx == u32DataLen )
000628  e1550004          CMP      r5,r4
00062c  1a000000          BNE      |L1.1588|
;;;487            {
;;;488              eErrCode = IIS_OK;
000630  e3a09000          MOV      r9,#0
                  |L1.1588|
;;;489            }
;;;490        }
;;;491        return eErrCode;
000634  e1a00009          MOV      r0,r9
;;;492    }
000638  e8bd8ff0          POP      {r4-r11,pc}
;;;493    
                          ENDP

                  eIIS_ReadData PROC
;;;495    /****************************************************************************/
;;;496    iis_ErrCode_e eIIS_ReadData(iis_Ch_e eCh, uint32_t *pu32DataLen, uint32_t u32Data[])
00063c  e92d47f0          PUSH     {r4-r10,lr}
;;;497    {
000640  e1a0a000          MOV      r10,r0
000644  e1a04001          MOV      r4,r1
000648  e1a06002          MOV      r6,r2
;;;498        iis_ErrCode_e eErrCode = IIS_FAIL;
00064c  e3a07001          MOV      r7,#1
;;;499        uint32_t u32FifoStat = 0;
000650  e3a05000          MOV      r5,#0
;;;500        uint32_t u32DataIdx = 0;
000654  e3a08000          MOV      r8,#0
;;;501        uint32_t u32CurFifoFull = 0;    
000658  e3a09000          MOV      r9,#0
;;;502        *pu32DataLen = 0;
00065c  e3a00000          MOV      r0,#0
000660  e5840000          STR      r0,[r4,#0]
;;;503    
;;;504        /* Enable */
;;;505        eErrCode = eIIS_SetTxRxOper(eCh, IIS_TRSF_OPER_ENABLE);
000664  e3a01001          MOV      r1,#1
000668  e1a0000a          MOV      r0,r10
00066c  ebfffffe          BL       eIIS_SetTxRxOper
000670  e1a07000          MOV      r7,r0
;;;506        
;;;507        if( IIS_OK == eErrCode )
000674  e3570000          CMP      r7,#0
000678  1a000023          BNE      |L1.1804|
;;;508        {
;;;509            u32FifoStat = u32IIS_GetFifoStatus(eCh);
00067c  e1a0000a          MOV      r0,r10
000680  ebfffffe          BL       u32IIS_GetFifoStatus
000684  e1a05000          MOV      r5,r0
;;;510            u32FifoStat = (u32FifoStat & IIS_FIFO_RX_MASKS);
000688  e205501f          AND      r5,r5,#0x1f
;;;511            
;;;512            if( IIS_FIFO_RX_AF == (u32FifoStat & IIS_FIFO_RX_AF) )
00068c  e2050002          AND      r0,r5,#2
000690  e3500002          CMP      r0,#2
000694  1a000001          BNE      |L1.1696|
;;;513            {
;;;514                u32CurFifoFull = 24;
000698  e3a09018          MOV      r9,#0x18
00069c  ea000005          B        |L1.1720|
                  |L1.1696|
;;;515            }
;;;516            else
;;;517            {
;;;518                if( IIS_FIFO_RX_FULL == (u32FifoStat & IIS_FIFO_RX_FULL) )
0006a0  e2050001          AND      r0,r5,#1
0006a4  e3500000          CMP      r0,#0
0006a8  0a000001          BEQ      |L1.1716|
;;;519                {
;;;520                    u32CurFifoFull = IIS_FIFO_RX_SIZE;
0006ac  e3a09020          MOV      r9,#0x20
0006b0  ea000000          B        |L1.1720|
                  |L1.1716|
;;;521                }
;;;522                else
;;;523                {
;;;524                    u32CurFifoFull = 0; /* ??? */
0006b4  e3a09000          MOV      r9,#0
                  |L1.1720|
;;;525                }
;;;526            }
;;;527            while( (u32CurFifoFull > 0) && ((*pu32DataLen) < IIS_FIFO_RX_SIZE) )
0006b8  ea000007          B        |L1.1756|
                  |L1.1724|
;;;528            {
;;;529                u32Data[u32DataIdx] = u32IIS_ReadWord(eCh);
0006bc  e1a0000a          MOV      r0,r10
0006c0  ebfffffe          BL       u32IIS_ReadWord
0006c4  e7860108          STR      r0,[r6,r8,LSL #2]
;;;530                u32DataIdx++;
0006c8  e2888001          ADD      r8,r8,#1
;;;531                u32CurFifoFull--;
0006cc  e2499001          SUB      r9,r9,#1
;;;532                (*pu32DataLen)++;
0006d0  e5940000          LDR      r0,[r4,#0]
0006d4  e2800001          ADD      r0,r0,#1
0006d8  e5840000          STR      r0,[r4,#0]
                  |L1.1756|
0006dc  e3590000          CMP      r9,#0                 ;527
0006e0  0a000002          BEQ      |L1.1776|
0006e4  e5940000          LDR      r0,[r4,#0]            ;527
0006e8  e3500020          CMP      r0,#0x20              ;527
0006ec  3afffff2          BCC      |L1.1724|
                  |L1.1776|
;;;533            }
;;;534            /* Check if all  has been read */
;;;535            if( ((*pu32DataLen) > 0) && ((*pu32DataLen) < IIS_FIFO_RX_SIZE) )
0006f0  e5940000          LDR      r0,[r4,#0]
0006f4  e3500000          CMP      r0,#0
0006f8  0a000003          BEQ      |L1.1804|
0006fc  e5940000          LDR      r0,[r4,#0]
000700  e3500020          CMP      r0,#0x20
000704  2a000000          BCS      |L1.1804|
;;;536            {
;;;537                eErrCode = IIS_OK;
000708  e3a07000          MOV      r7,#0
                  |L1.1804|
;;;538            }
;;;539        }
;;;540        return eErrCode;
00070c  e1a00007          MOV      r0,r7
;;;541    }
000710  e8bd87f0          POP      {r4-r10,pc}
;;;542    
                          ENDP

                  |L1.1812|
                          DCD      au8LLDD_IIS_C_REVISION
                  |L1.1816|
                          DCD      au8LLDD_IIS_C_TAG
                  |L1.1820|
                          DCD      au8LLDD_IIS_H_REVISION
                  |L1.1824|
                          DCD      au8LLDD_IIS_H_TAG
                  |L1.1828|
                          DCD      au8LLDD_IIS_IO_H_REVISION
                  |L1.1832|
                          DCD      au8LLDD_IIS_IO_H_TAG
                  |L1.1836|
                          DCD      0xc0406000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_IIS_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e372024          DCB      0x2e,0x37,0x20,0x24
000010  00                DCB      0x00
                  au8LLDD_IIS_C_TAG
000011  244e61            DCB      0x24,0x4e,0x61
000014  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000018  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
00001c  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000020  202400            DCB      0x20,0x24,0x00
                  au8LLDD_IIS_H_REVISION
000023  24                DCB      0x24
000024  52657669          DCB      0x52,0x65,0x76,0x69
000028  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00002c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000030  38202400          DCB      0x38,0x20,0x24,0x00
                  au8LLDD_IIS_H_TAG
000034  244e616d          DCB      0x24,0x4e,0x61,0x6d
000038  653a204c          DCB      0x65,0x3a,0x20,0x4c
00003c  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000040  315f3620          DCB      0x31,0x5f,0x36,0x20
000044  2400              DCB      0x24,0x00
                  au8LLDD_IIS_IO_H_REVISION
000046  2452              DCB      0x24,0x52
000048  65766973          DCB      0x65,0x76,0x69,0x73
00004c  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000050  20312e39          DCB      0x20,0x31,0x2e,0x39
000054  202400            DCB      0x20,0x24,0x00
                  au8LLDD_IIS_IO_H_TAG
000057  24                DCB      0x24
000058  4e616d65          DCB      0x4e,0x61,0x6d,0x65
00005c  3a204c4c          DCB      0x3a,0x20,0x4c,0x4c
000060  44445f31          DCB      0x44,0x44,0x5f,0x31
000064  5f362024          DCB      0x5f,0x36,0x20,0x24
000068  00                DCB      0x00
