; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\dmc.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\dmc.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\dmc.crf ..\..\..\..\lldd\src\dmc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vDMC_GetVersion PROC
;;;66     
;;;67     void vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;68                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;69                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;70     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;71        *pau8ModuleRevision = &au8LLDD_DMC_C_REVISION[0];
000008  e59f6edc          LDR      r6,|L1.3820|
00000c  e5806000          STR      r6,[r0,#0]
;;;72        *pau8ModuleTag      = &au8LLDD_DMC_C_TAG[0];
000010  e59f6ed8          LDR      r6,|L1.3824|
000014  e5816000          STR      r6,[r1,#0]
;;;73        *pau8HeaderRevision = &au8LLDD_DMC_H_REVISION[0];
000018  e59f6ed4          LDR      r6,|L1.3828|
00001c  e5826000          STR      r6,[r2,#0]
;;;74        *pau8HeaderTag      = &au8LLDD_DMC_H_TAG[0];
000020  e59f6ed0          LDR      r6,|L1.3832|
000024  e5836000          STR      r6,[r3,#0]
;;;75        *pau8IORevision     = &au8LLDD_DMC_IO_H_REVISION[0];
000028  e59f6ecc          LDR      r6,|L1.3836|
00002c  e5846000          STR      r6,[r4,#0]
;;;76        *pau8IOTag          = &au8LLDD_DMC_IO_H_TAG[0];
000030  e59f6ec8          LDR      r6,|L1.3840|
000034  e5856000          STR      r6,[r5,#0]
;;;77     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;78     
                          ENDP

                  vDMC_SetDirectCommand PROC
;;;469    /****************************************************************************/
;;;470    void vDMC_SetDirectCommand(uint32_t u32Value)
00003c  e59f1ec0          LDR      r1,|L1.3844|
;;;471    {
;;;472        vSetdirect_cmd(u32Value);
000040  e5810008          STR      r0,[r1,#8]
;;;473    }
000044  e12fff1e          BX       lr
;;;474    
                          ENDP

                  vDMC_MemoryDeviceInit PROC
;;;217    /****************************************************************************/
;;;218    void vDMC_MemoryDeviceInit(void)
000048  e52de004          PUSH     {lr}
;;;219    {
;;;220        vDMC_SetDirectCommand(0x000C0000U);      /* NOP */
00004c  e3a00703          MOV      r0,#0xc0000
000050  ebfffffe          BL       vDMC_SetDirectCommand
;;;221        vDMC_SetDirectCommand(0x00000000U);      /* PRECHARGEALL */
000054  e3a00000          MOV      r0,#0
000058  ebfffffe          BL       vDMC_SetDirectCommand
;;;222        vDMC_SetDirectCommand(0x00040000U);      /* AUTOREFRESH */
00005c  e3a00701          MOV      r0,#0x40000
000060  ebfffffe          BL       vDMC_SetDirectCommand
;;;223        vDMC_SetDirectCommand(0x00040000U);      /* AUTOREFRESH */
000064  e3a00701          MOV      r0,#0x40000
000068  ebfffffe          BL       vDMC_SetDirectCommand
;;;224        vDMC_SetDirectCommand(0x00080031U);      /* Configure Mode Registers */
00006c  e59f0e94          LDR      r0,|L1.3848|
000070  ebfffffe          BL       vDMC_SetDirectCommand
;;;225        vDMC_SetDirectCommand(0x000A0020U);      /* Configure Extended Mode Registers */
000074  e59f0e90          LDR      r0,|L1.3852|
000078  ebfffffe          BL       vDMC_SetDirectCommand
;;;226    
;;;227        vDMC_SetDirectCommand(0x00000000U);      /* go */
00007c  e3a00000          MOV      r0,#0
000080  ebfffffe          BL       vDMC_SetDirectCommand
;;;228    }
000084  e49df004          POP      {pc}
;;;229    
                          ENDP

                  vDMC_SetExternalMemCommand PROC
;;;475    /****************************************************************************/
;;;476    void vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd)
000088  e1a01000          MOV      r1,r0
;;;477    {
;;;478        /* Temp Variable added To Avoid MISRA warning */
;;;479        uint8_t u8DirCommand = (uint8_t)eDirCmd;
;;;480    
;;;481        vSetdirect_cmd_ext_mem_cmd((u8DirCommand >> 0x02U));
00008c  e1a03141          ASR      r3,r1,#2
000090  e59f2e6c          LDR      r2,|L1.3844|
000094  e5922008          LDR      r2,[r2,#8]
000098  e7d62b13          BFI      r2,r3,#22,#1
00009c  e59f3e60          LDR      r3,|L1.3844|
0000a0  e5832008          STR      r2,[r3,#8]
;;;482        vSetdirect_cmd_memory_cmd((u8DirCommand & 0x03U));
0000a4  e1a02003          MOV      r2,r3
0000a8  e5922008          LDR      r2,[r2,#8]
0000ac  e7d32911          BFI      r2,r1,#18,#2
0000b0  e5832008          STR      r2,[r3,#8]
;;;483    }
0000b4  e12fff1e          BX       lr
;;;484    
                          ENDP

                  eDMC_GetStatus PROC
;;;436    /****************************************************************************/
;;;437    dmc_status_e eDMC_GetStatus(void)
0000b8  e59f1e44          LDR      r1,|L1.3844|
;;;438    {
;;;439        dmc_status_e eStatus;
;;;440    
;;;441        eStatus = (dmc_status_e)biGetmemc_status_memc_status();
0000bc  e5911000          LDR      r1,[r1,#0]
0000c0  e2010003          AND      r0,r1,#3
;;;442        return eStatus;
;;;443    }
0000c4  e12fff1e          BX       lr
;;;444    
                          ENDP

                  vDMC_SetMemCntrlCommand PROC
;;;462    /****************************************************************************/
;;;463    void vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd)
0000c8  e59f1e34          LDR      r1,|L1.3844|
;;;464    {
;;;465        vSetmemc_cmd_memc_cmd(eCmd);
0000cc  e5911004          LDR      r1,[r1,#4]
0000d0  e7c21010          BFI      r1,r0,#0,#3
0000d4  e59f2e28          LDR      r2,|L1.3844|
0000d8  e5821004          STR      r1,[r2,#4]
;;;466    }
0000dc  e12fff1e          BX       lr
;;;467    
                          ENDP

                  i32DMC_EnterDeviceMode PROC
;;;231    /****************************************************************************/
;;;232    int32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
0000e0  e92d40f0          PUSH     {r4-r7,lr}
;;;233                                   mem_device_st *pstDeviceParams)
;;;234    {
0000e4  e1a04000          MOV      r4,r0
0000e8  e1a06001          MOV      r6,r1
0000ec  e1a05002          MOV      r5,r2
;;;235        int32_t i32Ret = C_SUCCESS;
0000f0  e3a07000          MOV      r7,#0
;;;236        
;;;237        if (pstDeviceParams->eType == DMC_TYPE_SDRAM)
0000f4  e5d50000          LDRB     r0,[r5,#0]
0000f8  e3500000          CMP      r0,#0
0000fc  1a000011          BNE      |L1.328|
;;;238        {
;;;239            switch(eOpMode)
000100  e3540003          CMP      r4,#3
000104  1a00000c          BNE      |L1.316|
;;;240            {
;;;241            case SYS_STATE_STANDBY_MODE:
;;;242                /*Change to the Pause State*/
;;;243                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
000108  e3a00003          MOV      r0,#3
00010c  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;244    
;;;245                /*Check, that the Pause State is reached*/
;;;246                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
000110  e320f000          NOP      
                  |L1.276|
000114  ebfffffe          BL       eDMC_GetStatus
000118  e3500002          CMP      r0,#2
00011c  1afffffc          BNE      |L1.276|
;;;247    
;;;248                /* Change to Low Power State */
;;;249                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
000120  e3a00001          MOV      r0,#1
000124  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;250                /*Check, that the Low Power State is reached*/
;;;251                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
000128  e320f000          NOP      
                  |L1.300|
00012c  ebfffffe          BL       eDMC_GetStatus
000130  e3500003          CMP      r0,#3
000134  1afffffc          BNE      |L1.300|
;;;252                break;
000138  ea000001          B        |L1.324|
                  |L1.316|
;;;253            default:
00013c  e320f000          NOP      
;;;254                break;
000140  e320f000          NOP      
                  |L1.324|
000144  ea000055          B        |L1.672|
                  |L1.328|
;;;255            }
;;;256        }
;;;257        else if(pstDeviceParams->eType == DMC_TYPE_LPDDR)
000148  e5d50000          LDRB     r0,[r5,#0]
00014c  e3500003          CMP      r0,#3
000150  1a000051          BNE      |L1.668|
;;;258        {
;;;259            switch(eOpMode)
000154  e3540001          CMP      r4,#1
000158  0a000010          BEQ      |L1.416|
00015c  e3540002          CMP      r4,#2
000160  0a000020          BEQ      |L1.488|
000164  e3540003          CMP      r4,#3
000168  1a000048          BNE      |L1.656|
;;;260            {
;;;261            case SYS_STATE_STANDBY_MODE:
;;;262                /*Change to the Pause State*/
;;;263                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
00016c  e3a00003          MOV      r0,#3
000170  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;264                /*Check, that the Pause State is reached*/
;;;265                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
000174  e320f000          NOP      
                  |L1.376|
000178  ebfffffe          BL       eDMC_GetStatus
00017c  e3500002          CMP      r0,#2
000180  1afffffc          BNE      |L1.376|
;;;266    
;;;267                /* Change to Low Power State */
;;;268                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
000184  e3a00001          MOV      r0,#1
000188  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;269                /*Check, that the Low Power State is reached*/
;;;270                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
00018c  e320f000          NOP      
                  |L1.400|
000190  ebfffffe          BL       eDMC_GetStatus
000194  e3500003          CMP      r0,#3
000198  1afffffc          BNE      |L1.400|
;;;271                break;
00019c  ea00003d          B        |L1.664|
                  |L1.416|
;;;272    
;;;273            case SYS_STATE_STOP_MODE:
0001a0  e320f000          NOP      
;;;274                /*Change to the Pause State*/
;;;275                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
0001a4  e3a00003          MOV      r0,#3
0001a8  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;276                /*Check, that the Pause State is reached*/
;;;277                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
0001ac  e320f000          NOP      
                  |L1.432|
0001b0  ebfffffe          BL       eDMC_GetStatus
0001b4  e3500002          CMP      r0,#2
0001b8  1afffffc          BNE      |L1.432|
;;;278    
;;;279                /*Change to the SLEEP State*/
;;;280                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
0001bc  e3a00001          MOV      r0,#1
0001c0  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;281                /*Check, that the SLEEP State is reached*/
;;;282                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
0001c4  e320f000          NOP      
                  |L1.456|
0001c8  ebfffffe          BL       eDMC_GetStatus
0001cc  e3500003          CMP      r0,#3
0001d0  1afffffc          BNE      |L1.456|
;;;283    
;;;284                /* Set PRECHARGEALL */
;;;285                vDMC_SetExternalMemCommand(DMC_PRECHARGEALL);
0001d4  e3a00000          MOV      r0,#0
0001d8  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;286                /* Set DPD */
;;;287                vDMC_SetExternalMemCommand(DMC_DPD);
0001dc  e3a00004          MOV      r0,#4
0001e0  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;288                break;
0001e4  ea00002b          B        |L1.664|
                  |L1.488|
;;;289            
;;;290            case SYS_STATE_SLEEP_MODE:
0001e8  e320f000          NOP      
;;;291                switch(eState)
0001ec  e3560001          CMP      r6,#1
0001f0  0a000002          BEQ      |L1.512|
0001f4  e3560003          CMP      r6,#3
0001f8  1a000020          BNE      |L1.640|
0001fc  ea00000d          B        |L1.568|
                  |L1.512|
;;;292                {
;;;293                case DMC_DEV_STATE_SELF_REFRESH:
000200  e320f000          NOP      
;;;294                    /*Change to the Pause State*/
;;;295                    vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
000204  e3a00003          MOV      r0,#3
000208  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;296                    /*Check, that the Pause State is reached*/
;;;297                    while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
00020c  e320f000          NOP      
                  |L1.528|
000210  ebfffffe          BL       eDMC_GetStatus
000214  e3500002          CMP      r0,#2
000218  1afffffc          BNE      |L1.528|
;;;298    
;;;299                    /* Change to Low Power State */
;;;300                    vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
00021c  e3a00001          MOV      r0,#1
000220  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;301                    /*Check, that the Low Power State is reached*/
;;;302                    while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
000224  e320f000          NOP      
                  |L1.552|
000228  ebfffffe          BL       eDMC_GetStatus
00022c  e3500003          CMP      r0,#3
000230  1afffffc          BNE      |L1.552|
;;;303                    break;
000234  ea000013          B        |L1.648|
                  |L1.568|
;;;304                case DMC_DEV_STATE_DEEP_POWER_DOWN:
000238  e320f000          NOP      
;;;305                    /*Change to the Pause State*/
;;;306                    vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
00023c  e3a00003          MOV      r0,#3
000240  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;307                    /*Check, that the Pause State is reached*/
;;;308                    while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
000244  e320f000          NOP      
                  |L1.584|
000248  ebfffffe          BL       eDMC_GetStatus
00024c  e3500002          CMP      r0,#2
000250  1afffffc          BNE      |L1.584|
;;;309    
;;;310                    /*Change to the SLEEP State*/
;;;311                    vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
000254  e3a00001          MOV      r0,#1
000258  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;312                    /*Check, that the SLEEP State is reached*/
;;;313                    while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
00025c  e320f000          NOP      
                  |L1.608|
000260  ebfffffe          BL       eDMC_GetStatus
000264  e3500003          CMP      r0,#3
000268  1afffffc          BNE      |L1.608|
;;;314    
;;;315                    /* Set PRECHARGEALL */
;;;316                    vDMC_SetExternalMemCommand(DMC_PRECHARGEALL);
00026c  e3a00000          MOV      r0,#0
000270  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;317                    /* Set DPD */
;;;318                    vDMC_SetExternalMemCommand(DMC_DPD);
000274  e3a00004          MOV      r0,#4
000278  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;319                    break;
00027c  ea000001          B        |L1.648|
                  |L1.640|
;;;320                default:
000280  e320f000          NOP      
;;;321                    break;
000284  e320f000          NOP      
                  |L1.648|
000288  e320f000          NOP                            ;303
;;;322                }
;;;323                break;
00028c  ea000001          B        |L1.664|
                  |L1.656|
;;;324            default:
000290  e320f000          NOP      
;;;325                break;
000294  e320f000          NOP      
                  |L1.664|
000298  ea000000          B        |L1.672|
                  |L1.668|
;;;326            }
;;;327        }
;;;328        else
;;;329        {
;;;330            i32Ret = C_FAILED;
00029c  e3e07000          MVN      r7,#0
                  |L1.672|
;;;331        }
;;;332        return i32Ret;
0002a0  e1a00007          MOV      r0,r7
;;;333    }
0002a4  e8bd80f0          POP      {r4-r7,pc}
;;;334    
                          ENDP

                  i32DMC_ExitDeviceMode PROC
;;;336    /****************************************************************************/
;;;337    int32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
0002a8  e92d40f0          PUSH     {r4-r7,lr}
;;;338                                  mem_device_st *pstDeviceParams)
;;;339    {
0002ac  e1a05000          MOV      r5,r0
0002b0  e1a06001          MOV      r6,r1
0002b4  e1a04002          MOV      r4,r2
;;;340        int32_t i32Ret = C_SUCCESS;
0002b8  e3a07000          MOV      r7,#0
;;;341        
;;;342        if (pstDeviceParams->eType == DMC_TYPE_SDRAM)
0002bc  e5d40000          LDRB     r0,[r4,#0]
0002c0  e3500000          CMP      r0,#0
0002c4  1a000011          BNE      |L1.784|
;;;343        {
;;;344            switch(eOpMode)
0002c8  e3550003          CMP      r5,#3
0002cc  1a00000c          BNE      |L1.772|
;;;345            {
;;;346            case SYS_STATE_STANDBY_MODE:
;;;347                /*Change to the Pause State*/
;;;348                vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
0002d0  e3a00002          MOV      r0,#2
0002d4  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;349                /*Check, that the Pause State is reached*/
;;;350                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
0002d8  e320f000          NOP      
                  |L1.732|
0002dc  ebfffffe          BL       eDMC_GetStatus
0002e0  e3500002          CMP      r0,#2
0002e4  1afffffc          BNE      |L1.732|
;;;351                
;;;352                /* Change to Ready State */
;;;353                vDMC_SetMemCntrlCommand(DMC_CMD_GO);
0002e8  e3a00000          MOV      r0,#0
0002ec  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;354                /*Check, that the Ready State is reached*/
;;;355                while(DMC_STATUS_READY != eDMC_GetStatus()){}
0002f0  e320f000          NOP      
                  |L1.756|
0002f4  ebfffffe          BL       eDMC_GetStatus
0002f8  e3500001          CMP      r0,#1
0002fc  1afffffc          BNE      |L1.756|
;;;356                break;
000300  ea000001          B        |L1.780|
                  |L1.772|
;;;357            default:
000304  e320f000          NOP      
;;;358                break;
000308  e320f000          NOP      
                  |L1.780|
00030c  ea00004f          B        |L1.1104|
                  |L1.784|
;;;359            }
;;;360        }
;;;361        else if(pstDeviceParams->eType == DMC_TYPE_LPDDR)
000310  e5d40000          LDRB     r0,[r4,#0]
000314  e3500003          CMP      r0,#3
000318  1a00004b          BNE      |L1.1100|
;;;362        {
;;;363            switch(eOpMode)
00031c  e3550001          CMP      r5,#1
000320  0a000010          BEQ      |L1.872|
000324  e3550002          CMP      r5,#2
000328  0a000014          BEQ      |L1.896|
00032c  e3550003          CMP      r5,#3
000330  1a000042          BNE      |L1.1088|
;;;364            {
;;;365            case SYS_STATE_STANDBY_MODE:
;;;366                /*Change to the Pause State*/
;;;367                vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
000334  e3a00002          MOV      r0,#2
000338  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;368                /*Check, that the Pause State is reached*/
;;;369                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
00033c  e320f000          NOP      
                  |L1.832|
000340  ebfffffe          BL       eDMC_GetStatus
000344  e3500002          CMP      r0,#2
000348  1afffffc          BNE      |L1.832|
;;;370                
;;;371                /* Change to Ready State */
;;;372                vDMC_SetMemCntrlCommand(DMC_CMD_GO);
00034c  e3a00000          MOV      r0,#0
000350  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;373                /*Check, that the Ready State is reached*/
;;;374                while(DMC_STATUS_READY != eDMC_GetStatus()){}
000354  e320f000          NOP      
                  |L1.856|
000358  ebfffffe          BL       eDMC_GetStatus
00035c  e3500001          CMP      r0,#1
000360  1afffffc          BNE      |L1.856|
;;;375                break;
000364  ea000037          B        |L1.1096|
                  |L1.872|
;;;376    
;;;377            case SYS_STATE_STOP_MODE:
000368  e320f000          NOP      
;;;378                /* Set NOP */
;;;379                vDMC_SetExternalMemCommand(DMC_NOP);
00036c  e3a00003          MOV      r0,#3
000370  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;380                /* Initialize DMC */
;;;381                vDMC_Init(pstDeviceParams);
000374  e1a00004          MOV      r0,r4
000378  ebfffffe          BL       vDMC_Init
;;;382                break;
00037c  ea000031          B        |L1.1096|
                  |L1.896|
;;;383            
;;;384            case SYS_STATE_SLEEP_MODE:
000380  e320f000          NOP      
;;;385                switch(eState)
000384  e3560001          CMP      r6,#1
000388  0a000002          BEQ      |L1.920|
00038c  e3560003          CMP      r6,#3
000390  1a000026          BNE      |L1.1072|
000394  ea00001f          B        |L1.1048|
                  |L1.920|
;;;386                {
;;;387                case DMC_DEV_STATE_SELF_REFRESH:
000398  e320f000          NOP      
;;;388                    /* Change to the Pause State */
;;;389                    vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
00039c  e3a00003          MOV      r0,#3
0003a0  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;390                    /*Check, that the Pause State is reached*/
;;;391                    while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
0003a4  e320f000          NOP      
                  |L1.936|
0003a8  ebfffffe          BL       eDMC_GetStatus
0003ac  e3500002          CMP      r0,#2
0003b0  1afffffc          BNE      |L1.936|
;;;392    
;;;393                    /* Change to Low Power State */
;;;394                    vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
0003b4  e3a00001          MOV      r0,#1
0003b8  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;395                    /*Check, that the Low Power State is reached*/
;;;396                    while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
0003bc  e320f000          NOP      
                  |L1.960|
0003c0  ebfffffe          BL       eDMC_GetStatus
0003c4  e3500003          CMP      r0,#3
0003c8  1afffffc          BNE      |L1.960|
;;;397    
;;;398                    /* Enable the CKE Pin */
;;;399                    vSetDDR_CKE_CK_DDR_CK_LATCHN(1);
0003cc  e59f0b3c          LDR      r0,|L1.3856|
0003d0  e590002c          LDR      r0,[r0,#0x2c]
0003d4  e3c00202          BIC      r0,r0,#0x20000000
0003d8  e2800202          ADD      r0,r0,#0x20000000
0003dc  e59f1b2c          LDR      r1,|L1.3856|
0003e0  e581002c          STR      r0,[r1,#0x2c]
;;;400    
;;;401                    /* Change to the Pause State */
;;;402                    vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
0003e4  e3a00002          MOV      r0,#2
0003e8  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;403                    /*Check, that the Pause State is reached*/
;;;404                    while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
0003ec  e320f000          NOP      
                  |L1.1008|
0003f0  ebfffffe          BL       eDMC_GetStatus
0003f4  e3500002          CMP      r0,#2
0003f8  1afffffc          BNE      |L1.1008|
;;;405    
;;;406                    /* Change to Ready State */
;;;407                    vDMC_SetMemCntrlCommand(DMC_CMD_GO);
0003fc  e3a00000          MOV      r0,#0
000400  ebfffffe          BL       vDMC_SetMemCntrlCommand
;;;408                    /*Check, that the Ready State is reached*/
;;;409                    while(DMC_STATUS_READY != eDMC_GetStatus()){}
000404  e320f000          NOP      
                  |L1.1032|
000408  ebfffffe          BL       eDMC_GetStatus
00040c  e3500001          CMP      r0,#1
000410  1afffffc          BNE      |L1.1032|
;;;410                    break;
000414  ea000007          B        |L1.1080|
                  |L1.1048|
;;;411    
;;;412                case DMC_DEV_STATE_DEEP_POWER_DOWN:
000418  e320f000          NOP      
;;;413                    /* Set NOP */
;;;414                    vDMC_SetExternalMemCommand(DMC_NOP);
00041c  e3a00003          MOV      r0,#3
000420  ebfffffe          BL       vDMC_SetExternalMemCommand
;;;415                    /* Initialize DMC */
;;;416                    vDMC_Init(pstDeviceParams);
000424  e1a00004          MOV      r0,r4
000428  ebfffffe          BL       vDMC_Init
;;;417                    break;
00042c  ea000001          B        |L1.1080|
                  |L1.1072|
;;;418    
;;;419                default:
000430  e320f000          NOP      
;;;420                    break;
000434  e320f000          NOP      
                  |L1.1080|
000438  e320f000          NOP                            ;410
;;;421                }
;;;422                break;
00043c  ea000001          B        |L1.1096|
                  |L1.1088|
;;;423                
;;;424            default:
000440  e320f000          NOP      
;;;425                break;
000444  e320f000          NOP      
                  |L1.1096|
000448  ea000000          B        |L1.1104|
                  |L1.1100|
;;;426            }   
;;;427        }
;;;428        else
;;;429        {
;;;430            i32Ret = C_FAILED;
00044c  e3e07000          MVN      r7,#0
                  |L1.1104|
;;;431        }
;;;432        return i32Ret;
000450  e1a00007          MOV      r0,r7
;;;433    }
000454  e8bd80f0          POP      {r4-r7,pc}
;;;434    
                          ENDP

                  vDMC_GetFixedConfig PROC
;;;446    /****************************************************************************/
;;;447    void vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus)
000458  e59f3aa4          LDR      r3,|L1.3844|
;;;448    {
;;;449        /* Temp Variables added To Avoid MISRA warning */
;;;450        uint32_t u32BanksBit0 = (uint32_t)biGetmemc_status_banks_bit0();
00045c  e5933000          LDR      r3,[r3,#0]
000460  e7e024d3          UBFX     r2,r3,#9,#1
;;;451        uint32_t u32BanksBit1 = (uint32_t)biGetmemc_status_banks_bit1();
000464  e59f3a98          LDR      r3,|L1.3844|
000468  e5933000          LDR      r3,[r3,#0]
00046c  e7e01653          UBFX     r1,r3,#12,#1
;;;452    
;;;453        pstMemcStatus->eMemcStatus  = (dmc_status_e)biGetmemc_status_memc_status(); 
000470  e59f3a8c          LDR      r3,|L1.3844|
000474  e5933000          LDR      r3,[r3,#0]
000478  e2033003          AND      r3,r3,#3
00047c  e5c03000          STRB     r3,[r0,#0]
;;;454        pstMemcStatus->eMemoryWidth = (dmc_width_e)biGetmemc_status_max_memory_width();
000480  e59f3a7c          LDR      r3,|L1.3844|
000484  e5933000          LDR      r3,[r3,#0]
000488  e7e13153          UBFX     r3,r3,#2,#2
00048c  e5c03001          STRB     r3,[r0,#1]
;;;455        pstMemcStatus->eMemoryType  = (dmc_type_e)biGetmemc_status_memory_support(); 
000490  e59f3a6c          LDR      r3,|L1.3844|
000494  e5933000          LDR      r3,[r3,#0]
000498  e7e23253          UBFX     r3,r3,#4,#3
00049c  e5c03002          STRB     r3,[r0,#2]
;;;456        pstMemcStatus->eMemChips    = (dmc_mem_chips_e)biGetmemc_status_memory_chips();   
0004a0  e59f3a5c          LDR      r3,|L1.3844|
0004a4  e5933000          LDR      r3,[r3,#0]
0004a8  e7e133d3          UBFX     r3,r3,#7,#2
0004ac  e5c03003          STRB     r3,[r0,#3]
;;;457        pstMemcStatus->eMemBanks    = (dmc_mem_banks_e)(u32BanksBit0 | (u32BanksBit1 << 0x1U));   
0004b0  e1823081          ORR      r3,r2,r1,LSL #1
0004b4  e5c03004          STRB     r3,[r0,#4]
;;;458        pstMemcStatus->eMonitors    = (dmc_monitors_e)biGetmemc_status_exclusive_monitors();   
0004b8  e59f3a44          LDR      r3,|L1.3844|
0004bc  e5933000          LDR      r3,[r3,#0]
0004c0  e7e13553          UBFX     r3,r3,#10,#2
0004c4  e5c03005          STRB     r3,[r0,#5]
;;;459    }
0004c8  e12fff1e          BX       lr
;;;460    
                          ENDP

                  vDMC_SetChipNumber PROC
;;;486    /****************************************************************************/
;;;487    void vDMC_SetChipNumber(uint8_t u8ChipNo)
0004cc  e59f1a30          LDR      r1,|L1.3844|
;;;488    {
;;;489        vSetdirect_cmd_chip_nmbr(u8ChipNo);
0004d0  e5911008          LDR      r1,[r1,#8]
0004d4  e7d51a10          BFI      r1,r0,#20,#2
0004d8  e59f2a24          LDR      r2,|L1.3844|
0004dc  e5821008          STR      r1,[r2,#8]
;;;490    }
0004e0  e12fff1e          BX       lr
;;;491    
                          ENDP

                  vDMC_SetBankAddress PROC
;;;493    /****************************************************************************/
;;;494    void vDMC_SetBankAddress(uint8_t u8BankAddr)
0004e4  e59f1a18          LDR      r1,|L1.3844|
;;;495    {
;;;496        vSetdirect_cmd_bank_addr(u8BankAddr);
0004e8  e5911008          LDR      r1,[r1,#8]
0004ec  e7d11810          BFI      r1,r0,#16,#2
0004f0  e59f2a0c          LDR      r2,|L1.3844|
0004f4  e5821008          STR      r1,[r2,#8]
;;;497    }
0004f8  e12fff1e          BX       lr
;;;498    
                          ENDP

                  vDMC_SetMemoryAddress PROC
;;;500    /****************************************************************************/
;;;501    void vDMC_SetMemoryAddress(uint16_t u16Address)
0004fc  e59f1a00          LDR      r1,|L1.3844|
;;;502    {
;;;503        vSetdirect_cmd_addr_13_to_0(u16Address);
000500  e5911008          LDR      r1,[r1,#8]
000504  e7cd1010          BFI      r1,r0,#0,#14
000508  e59f29f4          LDR      r2,|L1.3844|
00050c  e5821008          STR      r1,[r2,#8]
;;;504    }
000510  e12fff1e          BX       lr
;;;505    
                          ENDP

                  vDMC_SetMemConfig PROC
;;;507    /****************************************************************************/
;;;508    void vDMC_SetMemConfig(uint32_t u32Config)
000514  e59f19e8          LDR      r1,|L1.3844|
;;;509    {
;;;510        vSetmemory_cfg(u32Config);
000518  e581000c          STR      r0,[r1,#0xc]
;;;511    }
00051c  e12fff1e          BX       lr
;;;512    
                          ENDP

                  u32DMC_GetMemConfig PROC
;;;514    /****************************************************************************/
;;;515    uint32_t u32DMC_GetMemConfig(void)
000520  e59f09dc          LDR      r0,|L1.3844|
;;;516    {
;;;517        return (uint32_t)u32Getmemory_cfg();
000524  e590000c          LDR      r0,[r0,#0xc]
;;;518    }
000528  e12fff1e          BX       lr
;;;519    
                          ENDP

                  vDMC_SetMemConfigActiveChips PROC
;;;521    /****************************************************************************/
;;;522    void vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips)
00052c  e59f19d0          LDR      r1,|L1.3844|
;;;523    {
;;;524        vSetmemory_cfg_active_chips(eActChips);
000530  e591100c          LDR      r1,[r1,#0xc]
000534  e7d61a90          BFI      r1,r0,#21,#2
000538  e59f29c4          LDR      r2,|L1.3844|
00053c  e582100c          STR      r1,[r2,#0xc]
;;;525    }
000540  e12fff1e          BX       lr
;;;526    
                          ENDP

                  eDMC_GetMemConfigActiveChips PROC
;;;528    /****************************************************************************/
;;;529    dmc_mem_chips_e eDMC_GetMemConfigActiveChips(void)
000544  e59f09b8          LDR      r0,|L1.3844|
;;;530    {
;;;531        return (dmc_mem_chips_e)biGetmemory_cfg_active_chips();
000548  e590000c          LDR      r0,[r0,#0xc]
00054c  e7e10ad0          UBFX     r0,r0,#21,#2
;;;532    }
000550  e12fff1e          BX       lr
;;;533    
                          ENDP

                  vDMC_SetMemConfigQoS PROC
;;;535    /****************************************************************************/
;;;536    void vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS)
000554  e59f19a8          LDR      r1,|L1.3844|
;;;537    {
;;;538        vSetmemory_cfg_qos_master_bits(eQoS);
000558  e591100c          LDR      r1,[r1,#0xc]
00055c  e7d41910          BFI      r1,r0,#18,#3
000560  e59f299c          LDR      r2,|L1.3844|
000564  e582100c          STR      r1,[r2,#0xc]
;;;539    }
000568  e12fff1e          BX       lr
;;;540    
                          ENDP

                  eDMC_GetMemConfigQoS PROC
;;;542    /****************************************************************************/
;;;543    dmc_mem_config_e eDMC_GetMemConfigQoS(void)
00056c  e59f0990          LDR      r0,|L1.3844|
;;;544    {
;;;545        return (dmc_mem_config_e)biGetmemory_cfg_qos_master_bits();
000570  e590000c          LDR      r0,[r0,#0xc]
000574  e7e20950          UBFX     r0,r0,#18,#3
;;;546    }
000578  e12fff1e          BX       lr
;;;547    
                          ENDP

                  vDMC_SetMemConfigBurst PROC
;;;549    /****************************************************************************/
;;;550    void vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst)
00057c  e59f1980          LDR      r1,|L1.3844|
;;;551    {
;;;552        vSetmemory_cfg_memory_burst(eBurst);
000580  e591100c          LDR      r1,[r1,#0xc]
000584  e7d11790          BFI      r1,r0,#15,#3
000588  e59f2974          LDR      r2,|L1.3844|
00058c  e582100c          STR      r1,[r2,#0xc]
;;;553    }
000590  e12fff1e          BX       lr
;;;554    
                          ENDP

                  eDMC_GetMemConfigBurst PROC
;;;556    /****************************************************************************/
;;;557    dmc_mem_config_e eDMC_GetMemConfigBurst(void)
000594  e59f0968          LDR      r0,|L1.3844|
;;;558    {
;;;559        return (dmc_mem_config_e)biGetmemory_cfg_memory_burst();
000598  e590000c          LDR      r0,[r0,#0xc]
00059c  e7e207d0          UBFX     r0,r0,#15,#3
;;;560    }
0005a0  e12fff1e          BX       lr
;;;561    
                          ENDP

                  vDMC_SetMemConfigRowAddr PROC
;;;563    /****************************************************************************/
;;;564    void vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr)
0005a4  e59f1958          LDR      r1,|L1.3844|
;;;565    {
;;;566        vSetmemory_cfg_row_bits(eRowAddr);
0005a8  e591100c          LDR      r1,[r1,#0xc]
0005ac  e7c51190          BFI      r1,r0,#3,#3
0005b0  e59f294c          LDR      r2,|L1.3844|
0005b4  e582100c          STR      r1,[r2,#0xc]
;;;567    }
0005b8  e12fff1e          BX       lr
;;;568    
                          ENDP

                  eDMC_GetMemConfigRowAddr PROC
;;;570    /****************************************************************************/
;;;571    dmc_mem_config_e eDMC_GetMemConfigRowAddr(void)
0005bc  e59f0940          LDR      r0,|L1.3844|
;;;572    {
;;;573        return (dmc_mem_config_e)biGetmemory_cfg_row_bits();
0005c0  e590000c          LDR      r0,[r0,#0xc]
0005c4  e7e201d0          UBFX     r0,r0,#3,#3
;;;574    }
0005c8  e12fff1e          BX       lr
;;;575    
                          ENDP

                  vDMC_SetMemConfigColAddr PROC
;;;577    /****************************************************************************/
;;;578    void vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr)
0005cc  e59f1930          LDR      r1,|L1.3844|
;;;579    {
;;;580        vSetmemory_cfg_column_bits(eColAddr);
0005d0  e591100c          LDR      r1,[r1,#0xc]
0005d4  e7c21010          BFI      r1,r0,#0,#3
0005d8  e59f2924          LDR      r2,|L1.3844|
0005dc  e582100c          STR      r1,[r2,#0xc]
;;;581    }
0005e0  e12fff1e          BX       lr
;;;582    
                          ENDP

                  eDMC_GetMemConfigColAddr PROC
;;;584    /****************************************************************************/
;;;585    dmc_mem_config_e eDMC_GetMemConfigColAddr(void)
0005e4  e59f0918          LDR      r0,|L1.3844|
;;;586    {
;;;587        return (dmc_mem_config_e)biGetmemory_cfg_column_bits();
0005e8  e590000c          LDR      r0,[r0,#0xc]
0005ec  e2000007          AND      r0,r0,#7
;;;588    }
0005f0  e12fff1e          BX       lr
;;;589    
                          ENDP

                  vDMC_SetMemConfigStopClk PROC
;;;591    /****************************************************************************/
;;;592    void vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk)
0005f4  e59f1908          LDR      r1,|L1.3844|
;;;593    {
;;;594        vSetmemory_cfg_stop_mem_clock(eStopClk);
0005f8  e591100c          LDR      r1,[r1,#0xc]
0005fc  e7ce1710          BFI      r1,r0,#14,#1
000600  e59f28fc          LDR      r2,|L1.3844|
000604  e582100c          STR      r1,[r2,#0xc]
;;;595    }
000608  e12fff1e          BX       lr
;;;596    
                          ENDP

                  eDMC_GetMemConfigStopClk PROC
;;;598    /****************************************************************************/
;;;599    dmc_enable_e eDMC_GetMemConfigStopClk(void)
00060c  e59f08f0          LDR      r0,|L1.3844|
;;;600    {
;;;601        return (dmc_enable_e)biGetmemory_cfg_stop_mem_clock();
000610  e590000c          LDR      r0,[r0,#0xc]
000614  e7e00750          UBFX     r0,r0,#14,#1
;;;602    }
000618  e12fff1e          BX       lr
;;;603    
                          ENDP

                  vDMC_SetMemConfigAutoPowerDown PROC
;;;605    /****************************************************************************/
;;;606    void vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown)
00061c  e59f18e0          LDR      r1,|L1.3844|
;;;607    {
;;;608        vSetmemory_cfg_auto_power_down(ePoweDown);
000620  e591100c          LDR      r1,[r1,#0xc]
000624  e7cd1690          BFI      r1,r0,#13,#1
000628  e59f28d4          LDR      r2,|L1.3844|
00062c  e582100c          STR      r1,[r2,#0xc]
;;;609    }
000630  e12fff1e          BX       lr
;;;610    
                          ENDP

                  eDMC_GetMemConfigAutoPowerDown PROC
;;;612    /****************************************************************************/
;;;613    dmc_enable_e eDMC_GetMemConfigAutoPowerDown(void)
000634  e59f08c8          LDR      r0,|L1.3844|
;;;614    {
;;;615        return (dmc_enable_e)biGetmemory_cfg_auto_power_down();
000638  e590000c          LDR      r0,[r0,#0xc]
00063c  e7e006d0          UBFX     r0,r0,#13,#1
;;;616    }
000640  e12fff1e          BX       lr
;;;617    
                          ENDP

                  vDMC_SetMemConfigAutoPreCharge PROC
;;;619    /****************************************************************************/
;;;620    void vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge)
000644  e59f18b8          LDR      r1,|L1.3844|
;;;621    {
;;;622        vSetmemory_cfg_ap_bit(ePrecharge);
000648  e591100c          LDR      r1,[r1,#0xc]
00064c  e7c61310          BFI      r1,r0,#6,#1
000650  e59f28ac          LDR      r2,|L1.3844|
000654  e582100c          STR      r1,[r2,#0xc]
;;;623    }
000658  e12fff1e          BX       lr
;;;624    
                          ENDP

                  eDMC_GetMemConfigAutoPreCharge PROC
;;;626    /****************************************************************************/
;;;627    dmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void)
00065c  e59f08a0          LDR      r0,|L1.3844|
;;;628    {
;;;629        return (dmc_auto_precharge_e)biGetmemory_cfg_ap_bit();
000660  e590000c          LDR      r0,[r0,#0xc]
000664  e7e00350          UBFX     r0,r0,#6,#1
;;;630    }
000668  e12fff1e          BX       lr
;;;631    
                          ENDP

                  vDMC_SetMemConfigPwrDownPrd PROC
;;;633    /****************************************************************************/
;;;634    void vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd)
00066c  e59f1890          LDR      r1,|L1.3844|
;;;635    {
;;;636        vSetmemory_cfg_power_dwn_prd(u8PwrDownPrd);
000670  e591100c          LDR      r1,[r1,#0xc]
000674  e7cc1390          BFI      r1,r0,#7,#6
000678  e59f2884          LDR      r2,|L1.3844|
00067c  e582100c          STR      r1,[r2,#0xc]
;;;637    }
000680  e12fff1e          BX       lr
;;;638    
                          ENDP

                  u8DMC_GetMemConfigPwrDownPrd PROC
;;;640    /****************************************************************************/
;;;641    uint8_t u8DMC_GetMemConfigPwrDownPrd(void)
000684  e59f0878          LDR      r0,|L1.3844|
;;;642    {
;;;643        return (uint8_t)biGetmemory_cfg_power_dwn_prd();
000688  e590000c          LDR      r0,[r0,#0xc]
00068c  e7e503d0          UBFX     r0,r0,#7,#6
;;;644    }
000690  e12fff1e          BX       lr
;;;645    
                          ENDP

                  vDMC_SetRefreshPeriod PROC
;;;647    /****************************************************************************/
;;;648    void vDMC_SetRefreshPeriod(uint16_t u16RefPrd)
000694  e59f1868          LDR      r1,|L1.3844|
;;;649    {
;;;650        vSetrefresh_prd_refresh_prd(u16RefPrd);
000698  e5911010          LDR      r1,[r1,#0x10]
00069c  e7ce1010          BFI      r1,r0,#0,#15
0006a0  e59f285c          LDR      r2,|L1.3844|
0006a4  e5821010          STR      r1,[r2,#0x10]
;;;651    }
0006a8  e12fff1e          BX       lr
;;;652    
                          ENDP

                  u16DMC_GetRefreshPeriod PROC
;;;654    /****************************************************************************/
;;;655    uint16_t u16DMC_GetRefreshPeriod(void)
0006ac  e59f0850          LDR      r0,|L1.3844|
;;;656    {
;;;657        return (uint16_t)biGetrefresh_prd_refresh_prd();
0006b0  e5900010          LDR      r0,[r0,#0x10]
0006b4  e7df079f          BFC      r0,#15,#17
;;;658    }
0006b8  e12fff1e          BX       lr
;;;659    
                          ENDP

                  vDMC_SetCASLatency PROC
;;;661    /****************************************************************************/
;;;662    void vDMC_SetCASLatency(uint8_t u8CASLatency)
0006bc  e59f1840          LDR      r1,|L1.3844|
;;;663    {
;;;664        vSetcas_latency(u8CASLatency);
0006c0  e5810014          STR      r0,[r1,#0x14]
;;;665    }
0006c4  e12fff1e          BX       lr
;;;666    
                          ENDP

                  u8DMC_GetCASLatency PROC
;;;668    /****************************************************************************/
;;;669    uint8_t u8DMC_GetCASLatency(void)
0006c8  e59f0834          LDR      r0,|L1.3844|
;;;670    {
;;;671        return (uint8_t)u32Getcas_latency();
0006cc  e5900014          LDR      r0,[r0,#0x14]
0006d0  e20000ff          AND      r0,r0,#0xff
;;;672    }
0006d4  e12fff1e          BX       lr
;;;673    
                          ENDP

                  vDMC_SetCASHalfCycle PROC
;;;675    /****************************************************************************/
;;;676    void vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle)
0006d8  e59f1824          LDR      r1,|L1.3844|
;;;677    {
;;;678        vSetcas_latency_cas_half_cycle(eHalfCycle);
0006dc  e5911014          LDR      r1,[r1,#0x14]
0006e0  e7c01010          BFI      r1,r0,#0,#1
0006e4  e59f2818          LDR      r2,|L1.3844|
0006e8  e5821014          STR      r1,[r2,#0x14]
;;;679    }
0006ec  e12fff1e          BX       lr
;;;680    
                          ENDP

                  eDMC_GetCASHalfCycle PROC
;;;682    /****************************************************************************/
;;;683    dmc_enable_e eDMC_GetCASHalfCycle(void)
0006f0  e59f080c          LDR      r0,|L1.3844|
;;;684    {
;;;685        return (dmc_enable_e)biGetcas_latency_cas_half_cycle();
0006f4  e5900014          LDR      r0,[r0,#0x14]
0006f8  e2000001          AND      r0,r0,#1
;;;686    }
0006fc  e12fff1e          BX       lr
;;;687    
                          ENDP

                  vDMC_SetDQSTiming PROC
;;;689    /****************************************************************************/
;;;690    void vDMC_SetDQSTiming(uint8_t u8DQSTiming)
000700  e59f17fc          LDR      r1,|L1.3844|
;;;691    {
;;;692        vSett_dqss(u8DQSTiming);
000704  e5810018          STR      r0,[r1,#0x18]
;;;693    }
000708  e12fff1e          BX       lr
;;;694    
                          ENDP

                  u8DMC_GetDQSTiming PROC
;;;696    /****************************************************************************/
;;;697    uint8_t u8DMC_GetDQSTiming(void)
00070c  e59f07f0          LDR      r0,|L1.3844|
;;;698    {
;;;699        return (uint8_t)u32Gett_dqss();
000710  e5900018          LDR      r0,[r0,#0x18]
000714  e20000ff          AND      r0,r0,#0xff
;;;700    }
000718  e12fff1e          BX       lr
;;;701    
                          ENDP

                  vDMC_SetModeRegTiming PROC
;;;703    /****************************************************************************/
;;;704    void vDMC_SetModeRegTiming(uint8_t u8Timing)
00071c  e59f17e0          LDR      r1,|L1.3844|
;;;705    {
;;;706        vSett_mrd(u8Timing);
000720  e581001c          STR      r0,[r1,#0x1c]
;;;707    }
000724  e12fff1e          BX       lr
;;;708    
                          ENDP

                  u8DMC_GetModeRegTiming PROC
;;;710    /****************************************************************************/
;;;711    uint8_t u8DMC_GetModeRegTiming(void)
000728  e59f07d4          LDR      r0,|L1.3844|
;;;712    {
;;;713        return (uint8_t)u32Gett_mrd();
00072c  e590001c          LDR      r0,[r0,#0x1c]
000730  e20000ff          AND      r0,r0,#0xff
;;;714    }
000734  e12fff1e          BX       lr
;;;715    
                          ENDP

                  vDMC_SetActiveToPrechargeTiming PROC
;;;717    /****************************************************************************/
;;;718    void vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing)
000738  e59f17c4          LDR      r1,|L1.3844|
;;;719    {
;;;720        vSett_ras(u8Timing);
00073c  e5810020          STR      r0,[r1,#0x20]
;;;721    }
000740  e12fff1e          BX       lr
;;;722    
                          ENDP

                  u8DMC_GetActiveToPrechargeTiming PROC
;;;724    /****************************************************************************/
;;;725    uint8_t u8DMC_GetActiveToPrechargeTiming(void)
000744  e59f07b8          LDR      r0,|L1.3844|
;;;726    {
;;;727        return (uint8_t)u32Gett_ras();
000748  e5900020          LDR      r0,[r0,#0x20]
00074c  e20000ff          AND      r0,r0,#0xff
;;;728    }
000750  e12fff1e          BX       lr
;;;729    
                          ENDP

                  vDMC_SetActiveToActiveTiming PROC
;;;731    /****************************************************************************/
;;;732    void vDMC_SetActiveToActiveTiming(uint8_t u8Timing)
000754  e59f17a8          LDR      r1,|L1.3844|
;;;733    {
;;;734        vSett_rc(u8Timing);
000758  e5810024          STR      r0,[r1,#0x24]
;;;735    }
00075c  e12fff1e          BX       lr
;;;736    
                          ENDP

                  u8DMC_GetActiveToActiveTiming PROC
;;;738    /****************************************************************************/
;;;739    uint8_t u8DMC_GetActiveToActiveTiming(void)
000760  e59f079c          LDR      r0,|L1.3844|
;;;740    {
;;;741        return (uint8_t)u32Gett_rc();
000764  e5900024          LDR      r0,[r0,#0x24]
000768  e20000ff          AND      r0,r0,#0xff
;;;742    }
00076c  e12fff1e          BX       lr
;;;743    
                          ENDP

                  vDMC_SetActiveToRWTiming PROC
;;;745    /****************************************************************************/
;;;746    void vDMC_SetActiveToRWTiming(uint8_t u8Timing)
000770  e59f178c          LDR      r1,|L1.3844|
;;;747    {
;;;748        vSett_rcd(u8Timing);
000774  e5810028          STR      r0,[r1,#0x28]
;;;749    }
000778  e12fff1e          BX       lr
;;;750    
                          ENDP

                  u8DMC_GetActiveToRWTiming PROC
;;;752    /****************************************************************************/
;;;753    uint8_t u8DMC_GetActiveToRWTiming(void)
00077c  e59f0780          LDR      r0,|L1.3844|
;;;754    {
;;;755        return (uint8_t)u32Gett_rcd();
000780  e5900028          LDR      r0,[r0,#0x28]
000784  e20000ff          AND      r0,r0,#0xff
;;;756    }
000788  e12fff1e          BX       lr
;;;757    
                          ENDP

                  vDMC_SetScheduleRCD PROC
;;;759    /****************************************************************************/
;;;760    void vDMC_SetScheduleRCD(uint8_t u8Timing)
00078c  e59f1770          LDR      r1,|L1.3844|
;;;761    {
;;;762        vSett_rcd_schedule_rcd(u8Timing);
000790  e5911028          LDR      r1,[r1,#0x28]
000794  e7c51190          BFI      r1,r0,#3,#3
000798  e59f2764          LDR      r2,|L1.3844|
00079c  e5821028          STR      r1,[r2,#0x28]
;;;763    }
0007a0  e12fff1e          BX       lr
;;;764    
                          ENDP

                  u8DMC_GetScheduleRCD PROC
;;;766    /****************************************************************************/
;;;767    uint8_t u8DMC_GetScheduleRCD(void)
0007a4  e59f0758          LDR      r0,|L1.3844|
;;;768    {
;;;769        return (uint8_t)biGett_rcd_schedule_rcd();
0007a8  e5900028          LDR      r0,[r0,#0x28]
0007ac  e7e201d0          UBFX     r0,r0,#3,#3
;;;770    }
0007b0  e12fff1e          BX       lr
;;;771    
                          ENDP

                  vDMC_Set_T_RCD PROC
;;;773    /****************************************************************************/
;;;774    void vDMC_Set_T_RCD(uint8_t u8Timing)
0007b4  e59f1748          LDR      r1,|L1.3844|
;;;775    {
;;;776        vSett_rcd_t_rcd(u8Timing);
0007b8  e5911028          LDR      r1,[r1,#0x28]
0007bc  e7c21010          BFI      r1,r0,#0,#3
0007c0  e59f273c          LDR      r2,|L1.3844|
0007c4  e5821028          STR      r1,[r2,#0x28]
;;;777    }
0007c8  e12fff1e          BX       lr
;;;778    
                          ENDP

                  u8DMC_Get_T_RCD PROC
;;;780    /****************************************************************************/
;;;781    uint8_t u8DMC_Get_T_RCD(void)
0007cc  e59f0730          LDR      r0,|L1.3844|
;;;782    {
;;;783        return (uint8_t)biGett_rcd_t_rcd();
0007d0  e5900028          LDR      r0,[r0,#0x28]
0007d4  e2000007          AND      r0,r0,#7
;;;784    }
0007d8  e12fff1e          BX       lr
;;;785    
                          ENDP

                  vDMC_SetAutoRefreshTiming PROC
;;;787    /****************************************************************************/
;;;788    void vDMC_SetAutoRefreshTiming(uint16_t u16Timing)
0007dc  e59f1720          LDR      r1,|L1.3844|
;;;789    {
;;;790        vSett_rfc(u16Timing);
0007e0  e581002c          STR      r0,[r1,#0x2c]
;;;791    }
0007e4  e12fff1e          BX       lr
;;;792    
                          ENDP

                  u16DMC_GetAutoRefreshTiming PROC
;;;794    /****************************************************************************/
;;;795    uint16_t u16DMC_GetAutoRefreshTiming(void)
0007e8  e59f0714          LDR      r0,|L1.3844|
;;;796    {
;;;797        return (uint16_t)u32Gett_rfc();
0007ec  e590002c          LDR      r0,[r0,#0x2c]
0007f0  e6ff0070          UXTH     r0,r0
;;;798    }
0007f4  e12fff1e          BX       lr
;;;799    
                          ENDP

                  vDMC_SetScheduleRFC PROC
;;;801    /****************************************************************************/
;;;802    void vDMC_SetScheduleRFC(uint8_t u8Timing)
0007f8  e59f1704          LDR      r1,|L1.3844|
;;;803    {
;;;804        vSett_rfc_schedule_rfc(u8Timing);
0007fc  e591102c          LDR      r1,[r1,#0x2c]
000800  e7c91290          BFI      r1,r0,#5,#5
000804  e59f26f8          LDR      r2,|L1.3844|
000808  e582102c          STR      r1,[r2,#0x2c]
;;;805    }
00080c  e12fff1e          BX       lr
;;;806    
                          ENDP

                  u8DMC_GetScheduleRFC PROC
;;;808    /****************************************************************************/
;;;809    uint8_t u8DMC_GetScheduleRFC(void)
000810  e59f06ec          LDR      r0,|L1.3844|
;;;810    {
;;;811        return (uint8_t)biGett_rfc_schedule_rfc();
000814  e590002c          LDR      r0,[r0,#0x2c]
000818  e7e402d0          UBFX     r0,r0,#5,#5
;;;812    }
00081c  e12fff1e          BX       lr
;;;813    
                          ENDP

                  vDMC_Set_T_RFC PROC
;;;815    /****************************************************************************/
;;;816    void vDMC_Set_T_RFC(uint8_t u8Timing)
000820  e59f16dc          LDR      r1,|L1.3844|
;;;817    {
;;;818        vSett_rfc_t_rfc(u8Timing);
000824  e591102c          LDR      r1,[r1,#0x2c]
000828  e7c41010          BFI      r1,r0,#0,#5
00082c  e59f26d0          LDR      r2,|L1.3844|
000830  e582102c          STR      r1,[r2,#0x2c]
;;;819    }
000834  e12fff1e          BX       lr
;;;820    
                          ENDP

                  u8DMC_Get_T_RFC PROC
;;;822    /****************************************************************************/
;;;823    uint8_t u8DMC_Get_T_RFC(void)
000838  e59f06c4          LDR      r0,|L1.3844|
;;;824    {
;;;825        return (uint8_t)biGett_rfc_t_rfc();
00083c  e590002c          LDR      r0,[r0,#0x2c]
000840  e200001f          AND      r0,r0,#0x1f
;;;826    }
000844  e12fff1e          BX       lr
;;;827    
                          ENDP

                  vDMC_SetPrechargeTiming PROC
;;;829    /****************************************************************************/
;;;830    void vDMC_SetPrechargeTiming(uint8_t u8Timing)
000848  e59f16b4          LDR      r1,|L1.3844|
;;;831    {
;;;832        vSett_rp(u8Timing);
00084c  e5810030          STR      r0,[r1,#0x30]
;;;833    }
000850  e12fff1e          BX       lr
;;;834    
                          ENDP

                  u8DMC_GetPrechargeTiming PROC
;;;836    /****************************************************************************/
;;;837    uint8_t u8DMC_GetPrechargeTiming(void)
000854  e59f06a8          LDR      r0,|L1.3844|
;;;838    {
;;;839        return (uint8_t)u32Gett_rp();
000858  e5900030          LDR      r0,[r0,#0x30]
00085c  e20000ff          AND      r0,r0,#0xff
;;;840    }
000860  e12fff1e          BX       lr
;;;841    
                          ENDP

                  vDMC_SetScheduleRP PROC
;;;843    /****************************************************************************/
;;;844    void vDMC_SetScheduleRP(uint8_t u8Timing)
000864  e59f1698          LDR      r1,|L1.3844|
;;;845    {
;;;846        vSett_rp_schedule_rp(u8Timing);
000868  e5911030          LDR      r1,[r1,#0x30]
00086c  e7c51190          BFI      r1,r0,#3,#3
000870  e59f268c          LDR      r2,|L1.3844|
000874  e5821030          STR      r1,[r2,#0x30]
;;;847    }
000878  e12fff1e          BX       lr
;;;848    
                          ENDP

                  u8DMC_GetScheduleRP PROC
;;;850    /****************************************************************************/
;;;851    uint8_t u8DMC_GetScheduleRP(void)
00087c  e59f0680          LDR      r0,|L1.3844|
;;;852    {
;;;853        return (uint8_t)biGett_rp_schedule_rp();
000880  e5900030          LDR      r0,[r0,#0x30]
000884  e7e201d0          UBFX     r0,r0,#3,#3
;;;854    }
000888  e12fff1e          BX       lr
;;;855    
                          ENDP

                  vDMC_Set_T_RP PROC
;;;857    /****************************************************************************/
;;;858    void vDMC_Set_T_RP(uint8_t u8Timing)
00088c  e59f1670          LDR      r1,|L1.3844|
;;;859    {
;;;860        vSett_rp_t_rp(u8Timing);
000890  e5911030          LDR      r1,[r1,#0x30]
000894  e7c21010          BFI      r1,r0,#0,#3
000898  e59f2664          LDR      r2,|L1.3844|
00089c  e5821030          STR      r1,[r2,#0x30]
;;;861    }
0008a0  e12fff1e          BX       lr
;;;862    
                          ENDP

                  u8DMC_Get_T_RP PROC
;;;864    /****************************************************************************/
;;;865    uint8_t u8DMC_Get_T_RP(void)
0008a4  e59f0658          LDR      r0,|L1.3844|
;;;866    {
;;;867        return (uint8_t)biGett_rp_t_rp();
0008a8  e5900030          LDR      r0,[r0,#0x30]
0008ac  e2000007          AND      r0,r0,#7
;;;868    }
0008b0  e12fff1e          BX       lr
;;;869    
                          ENDP

                  vDMC_SetActiveDiffBankTiming PROC
;;;871    /****************************************************************************/
;;;872    void vDMC_SetActiveDiffBankTiming(uint8_t u8Timing)
0008b4  e59f1648          LDR      r1,|L1.3844|
;;;873    {
;;;874        vSett_rrd(u8Timing);
0008b8  e5810034          STR      r0,[r1,#0x34]
;;;875    }
0008bc  e12fff1e          BX       lr
;;;876    
                          ENDP

                  u8DMC_GetActiveDiffBankTiming PROC
;;;878    /****************************************************************************/
;;;879    uint8_t u8DMC_GetActiveDiffBankTiming(void)
0008c0  e59f063c          LDR      r0,|L1.3844|
;;;880    {
;;;881        return (uint8_t)u32Gett_rrd();
0008c4  e5900034          LDR      r0,[r0,#0x34]
0008c8  e20000ff          AND      r0,r0,#0xff
;;;882    }
0008cc  e12fff1e          BX       lr
;;;883    
                          ENDP

                  vDMC_SetWriteToPrechargeTiming PROC
;;;885    /****************************************************************************/
;;;886    void vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing)
0008d0  e59f162c          LDR      r1,|L1.3844|
;;;887    {
;;;888        vSett_wr(u8Timing);
0008d4  e5810038          STR      r0,[r1,#0x38]
;;;889    }
0008d8  e12fff1e          BX       lr
;;;890    
                          ENDP

                  u8DMC_GetWriteToPrechargeTiming PROC
;;;892    /****************************************************************************/
;;;893    uint8_t u8DMC_GetWriteToPrechargeTiming(void)
0008dc  e59f0620          LDR      r0,|L1.3844|
;;;894    {
;;;895        return (uint8_t)u32Gett_wr();
0008e0  e5900038          LDR      r0,[r0,#0x38]
0008e4  e20000ff          AND      r0,r0,#0xff
;;;896    }
0008e8  e12fff1e          BX       lr
;;;897    
                          ENDP

                  vDMC_SetWriteToReadTiming PROC
;;;899    /****************************************************************************/
;;;900    void vDMC_SetWriteToReadTiming(uint8_t u8Timing)
0008ec  e59f1610          LDR      r1,|L1.3844|
;;;901    {
;;;902        vSett_wtr(u8Timing);
0008f0  e581003c          STR      r0,[r1,#0x3c]
;;;903    }
0008f4  e12fff1e          BX       lr
;;;904    
                          ENDP

                  u8DMC_GetWriteToReadTiming PROC
;;;906    /****************************************************************************/
;;;907    uint8_t u8DMC_GetWriteToReadTiming(void)
0008f8  e59f0604          LDR      r0,|L1.3844|
;;;908    {
;;;909        return (uint8_t)u32Gett_wtr();
0008fc  e590003c          LDR      r0,[r0,#0x3c]
000900  e20000ff          AND      r0,r0,#0xff
;;;910    }
000904  e12fff1e          BX       lr
;;;911    
                          ENDP

                  vDMC_SetExitPowerDownTiming PROC
;;;913    /****************************************************************************/
;;;914    void vDMC_SetExitPowerDownTiming(uint8_t u8Timing)
000908  e59f15f4          LDR      r1,|L1.3844|
;;;915    {
;;;916        vSett_xp(u8Timing);
00090c  e5810040          STR      r0,[r1,#0x40]
;;;917    }
000910  e12fff1e          BX       lr
;;;918    
                          ENDP

                  u8DMC_GetExitPowerDownTiming PROC
;;;920    /****************************************************************************/
;;;921    uint8_t u8DMC_GetExitPowerDownTiming(void)
000914  e59f05e8          LDR      r0,|L1.3844|
;;;922    {
;;;923        return (uint8_t)u32Gett_xp();
000918  e5900040          LDR      r0,[r0,#0x40]
00091c  e20000ff          AND      r0,r0,#0xff
;;;924    }
000920  e12fff1e          BX       lr
;;;925    
                          ENDP

                  vDMC_SetExitSelfRefreshTiming PROC
;;;927    /****************************************************************************/
;;;928    void vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing)
000924  e59f15d8          LDR      r1,|L1.3844|
;;;929    {
;;;930        vSett_xsr(u8Timing);
000928  e5810044          STR      r0,[r1,#0x44]
;;;931    }
00092c  e12fff1e          BX       lr
;;;932    
                          ENDP

                  u8DMC_GetExitSelfRefreshTiming PROC
;;;934    /****************************************************************************/
;;;935    uint8_t u8DMC_GetExitSelfRefreshTiming(void)
000930  e59f05cc          LDR      r0,|L1.3844|
;;;936    {
;;;937        return (uint8_t)u32Gett_xsr();
000934  e5900044          LDR      r0,[r0,#0x44]
000938  e20000ff          AND      r0,r0,#0xff
;;;938    }
00093c  e12fff1e          BX       lr
;;;939    
                          ENDP

                  vDMC_SetSelfRefreshTiming PROC
;;;941    /****************************************************************************/
;;;942    void vDMC_SetSelfRefreshTiming(uint8_t u8Timing)
000940  e59f15bc          LDR      r1,|L1.3844|
;;;943    {
;;;944        vSett_esr(u8Timing);
000944  e5810048          STR      r0,[r1,#0x48]
;;;945    }
000948  e12fff1e          BX       lr
;;;946    
                          ENDP

                  u8DMC_GetSelfRefreshTiming PROC
;;;948    /****************************************************************************/
;;;949    uint8_t u8DMC_GetSelfRefreshTiming(void)
00094c  e59f05b0          LDR      r0,|L1.3844|
;;;950    {
;;;951        return (uint8_t)u32Gett_esr();
000950  e5900048          LDR      r0,[r0,#0x48]
000954  e20000ff          AND      r0,r0,#0xff
;;;952    }
000958  e12fff1e          BX       lr
;;;953    
                          ENDP

                  vDMC_SetMemConfig2 PROC
;;;955    /****************************************************************************/
;;;956    void vDMC_SetMemConfig2(uint32_t u32Config)
00095c  e59f15a0          LDR      r1,|L1.3844|
;;;957    {
;;;958        vSetmemory_cfg2(u32Config);
000960  e581004c          STR      r0,[r1,#0x4c]
;;;959    }
000964  e12fff1e          BX       lr
;;;960    
                          ENDP

                  u32DMC_GetMemConfig2 PROC
;;;962    /****************************************************************************/
;;;963    uint32_t u32DMC_GetMemConfig2(void)
000968  e59f0594          LDR      r0,|L1.3844|
;;;964    {
;;;965        return (uint32_t)u32Getmemory_cfg2();
00096c  e590004c          LDR      r0,[r0,#0x4c]
;;;966    }
000970  e12fff1e          BX       lr
;;;967    
                          ENDP

                  vDMC_SetMemCfg2ReadDelay PROC
;;;969    /****************************************************************************/
;;;970    void vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay)
000974  e59f1588          LDR      r1,|L1.3844|
;;;971    {
;;;972        vSetmemory_cfg2_read_delay(u8Delay);
000978  e591104c          LDR      r1,[r1,#0x4c]
00097c  e7ca1490          BFI      r1,r0,#9,#2
000980  e59f257c          LDR      r2,|L1.3844|
000984  e582104c          STR      r1,[r2,#0x4c]
;;;973    }
000988  e12fff1e          BX       lr
;;;974    
                          ENDP

                  u8DMC_GetMemCfg2ReadDelay PROC
;;;976    /****************************************************************************/
;;;977    uint8_t u8DMC_GetMemCfg2ReadDelay(void)
00098c  e59f0570          LDR      r0,|L1.3844|
;;;978    {
;;;979        return (uint8_t)biGetmemory_cfg2_read_delay();
000990  e590004c          LDR      r0,[r0,#0x4c]
000994  e7e104d0          UBFX     r0,r0,#9,#2
;;;980    }
000998  e12fff1e          BX       lr
;;;981    
                          ENDP

                  vDMC_SetMemCfg2MemProtocol PROC
;;;983    /****************************************************************************/
;;;984    void vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol)
00099c  e59f1560          LDR      r1,|L1.3844|
;;;985    {
;;;986        vSetmemory_cfg2_memory_protocol(eProtocol);
0009a0  e591104c          LDR      r1,[r1,#0x4c]
0009a4  e7c81310          BFI      r1,r0,#6,#3
0009a8  e59f2554          LDR      r2,|L1.3844|
0009ac  e582104c          STR      r1,[r2,#0x4c]
;;;987    }
0009b0  e12fff1e          BX       lr
;;;988    
                          ENDP

                  eDMC_GetMemCfg2MemProtocol PROC
;;;990    /****************************************************************************/
;;;991    dmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void)
0009b4  e59f0548          LDR      r0,|L1.3844|
;;;992    {
;;;993        return (dmc_mem_protocol_e)biGetmemory_cfg2_memory_protocol();
0009b8  e590004c          LDR      r0,[r0,#0x4c]
0009bc  e7e20350          UBFX     r0,r0,#6,#3
;;;994    }
0009c0  e12fff1e          BX       lr
;;;995    
                          ENDP

                  vDMC_SetMemCfg2MemWidth PROC
;;;997    /****************************************************************************/
;;;998    void vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth)
0009c4  e59f1538          LDR      r1,|L1.3844|
;;;999    {
;;;1000       vSetmemory_cfg2_memory_width(eMemWidth);
0009c8  e591104c          LDR      r1,[r1,#0x4c]
0009cc  e7c51210          BFI      r1,r0,#4,#2
0009d0  e59f252c          LDR      r2,|L1.3844|
0009d4  e582104c          STR      r1,[r2,#0x4c]
;;;1001   }
0009d8  e12fff1e          BX       lr
;;;1002   
                          ENDP

                  eDMC_GetMemCfg2MemWidth PROC
;;;1004   /****************************************************************************/
;;;1005   dmc_width_e eDMC_GetMemCfg2MemWidth(void)
0009dc  e59f0520          LDR      r0,|L1.3844|
;;;1006   {
;;;1007       return (dmc_width_e)biGetmemory_cfg2_memory_width();
0009e0  e590004c          LDR      r0,[r0,#0x4c]
0009e4  e7e10250          UBFX     r0,r0,#4,#2
;;;1008   }
0009e8  e12fff1e          BX       lr
;;;1009   
                          ENDP

                  vDMC_SetMemCfg2CkeInit PROC
;;;1011   /****************************************************************************/
;;;1012   void vDMC_SetMemCfg2CkeInit(dmc_high_e eInit)
0009ec  e59f1510          LDR      r1,|L1.3844|
;;;1013   {
;;;1014       vSetmemory_cfg2_cke_init(eInit);
0009f0  e591104c          LDR      r1,[r1,#0x4c]
0009f4  e7c31190          BFI      r1,r0,#3,#1
0009f8  e59f2504          LDR      r2,|L1.3844|
0009fc  e582104c          STR      r1,[r2,#0x4c]
;;;1015   }
000a00  e12fff1e          BX       lr
;;;1016   
                          ENDP

                  eDMC_GetMemCfg2CkeInit PROC
;;;1018   /****************************************************************************/
;;;1019   dmc_high_e eDMC_GetMemCfg2CkeInit(void)
000a04  e59f04f8          LDR      r0,|L1.3844|
;;;1020   {
;;;1021       return (dmc_high_e)biGetmemory_cfg2_cke_init();
000a08  e590004c          LDR      r0,[r0,#0x4c]
000a0c  e7e001d0          UBFX     r0,r0,#3,#1
;;;1022   }
000a10  e12fff1e          BX       lr
;;;1023   
                          ENDP

                  vDMC_SetMemCfg2DqmInit PROC
;;;1025   /****************************************************************************/
;;;1026   void vDMC_SetMemCfg2DqmInit(dmc_high_e eInit)
000a14  e59f14e8          LDR      r1,|L1.3844|
;;;1027   {
;;;1028       vSetmemory_cfg2_dqm_init(eInit);
000a18  e591104c          LDR      r1,[r1,#0x4c]
000a1c  e7c21110          BFI      r1,r0,#2,#1
000a20  e59f24dc          LDR      r2,|L1.3844|
000a24  e582104c          STR      r1,[r2,#0x4c]
;;;1029   }
000a28  e12fff1e          BX       lr
;;;1030   
                          ENDP

                  eDMC_GetMemCfg2DqmInit PROC
;;;1032   /****************************************************************************/
;;;1033   dmc_high_e eDMC_GetMemCfg2DqmInit(void)
000a2c  e59f04d0          LDR      r0,|L1.3844|
;;;1034   {
;;;1035       return (dmc_high_e)biGetmemory_cfg2_dqm_init();
000a30  e590004c          LDR      r0,[r0,#0x4c]
000a34  e7e00150          UBFX     r0,r0,#2,#1
;;;1036   }
000a38  e12fff1e          BX       lr
;;;1037   
                          ENDP

                  vDMC_SetMemConfig3 PROC
;;;1039   /****************************************************************************/
;;;1040   void vDMC_SetMemConfig3(uint32_t u32Config)
000a3c  e59f14c0          LDR      r1,|L1.3844|
;;;1041   {
;;;1042       vSetmemory_cfg3(u32Config);
000a40  e5810050          STR      r0,[r1,#0x50]
;;;1043   }
000a44  e12fff1e          BX       lr
;;;1044   
                          ENDP

                  u32DMC_GetMemConfig3 PROC
;;;1046   /****************************************************************************/
;;;1047   uint32_t u32DMC_GetMemConfig3(void)
000a48  e59f04b4          LDR      r0,|L1.3844|
;;;1048   {
;;;1049       return (uint32_t)u32Getmemory_cfg3();
000a4c  e5900050          LDR      r0,[r0,#0x50]
;;;1050   }
000a50  e12fff1e          BX       lr
;;;1051   
                          ENDP

                  vDMC_SetMemCfg3PreScale PROC
;;;1053   /****************************************************************************/
;;;1054   void vDMC_SetMemCfg3PreScale(uint16_t u16Prescale)
000a54  e59f14a8          LDR      r1,|L1.3844|
;;;1055   {
;;;1056       vSetmemory_cfg3_prescale(u16Prescale);
000a58  e5911050          LDR      r1,[r1,#0x50]
000a5c  e7cc1190          BFI      r1,r0,#3,#10
000a60  e59f249c          LDR      r2,|L1.3844|
000a64  e5821050          STR      r1,[r2,#0x50]
;;;1057   }
000a68  e12fff1e          BX       lr
;;;1058   
                          ENDP

                  u16DMC_GetMemCfg3PreScale PROC
;;;1060   /****************************************************************************/
;;;1061   uint16_t u16DMC_GetMemCfg3PreScale(void)
000a6c  e59f0490          LDR      r0,|L1.3844|
;;;1062   {
;;;1063       return (uint16_t)biGetmemory_cfg3_prescale();
000a70  e5900050          LDR      r0,[r0,#0x50]
000a74  e7e901d0          UBFX     r0,r0,#3,#10
;;;1064   }
000a78  e12fff1e          BX       lr
;;;1065   
                          ENDP

                  vDMC_SetMemCfg3MaxRefsCmds PROC
;;;1067   /****************************************************************************/
;;;1068   void vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds)
000a7c  e59f1480          LDR      r1,|L1.3844|
;;;1069   {
;;;1070       vSetmemory_cfg3_max_outs_refs(u8MaxRefsCmds);
000a80  e5911050          LDR      r1,[r1,#0x50]
000a84  e7c21010          BFI      r1,r0,#0,#3
000a88  e59f2474          LDR      r2,|L1.3844|
000a8c  e5821050          STR      r1,[r2,#0x50]
;;;1071   }
000a90  e12fff1e          BX       lr
;;;1072   
                          ENDP

                  u8DMC_GetMemCfg3MaxRefsCmds PROC
;;;1074   /****************************************************************************/
;;;1075   uint8_t u8DMC_GetMemCfg3MaxRefsCmds(void)
000a94  e59f0468          LDR      r0,|L1.3844|
;;;1076   {
;;;1077       return (uint8_t)biGetmemory_cfg3_max_outs_refs();
000a98  e5900050          LDR      r0,[r0,#0x50]
000a9c  e2000007          AND      r0,r0,#7
;;;1078   }
000aa0  e12fff1e          BX       lr
;;;1079   
                          ENDP

                  vDMC_SetReadTransferDelay PROC
;;;1081   /****************************************************************************/
;;;1082   void vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay)
000aa4  e59f1458          LDR      r1,|L1.3844|
;;;1083   {
;;;1084       vSetread_transfer_delay_read_transfer_delay(eDelay);
000aa8  e591107c          LDR      r1,[r1,#0x7c]
000aac  e7c11010          BFI      r1,r0,#0,#2
000ab0  e59f244c          LDR      r2,|L1.3844|
000ab4  e582107c          STR      r1,[r2,#0x7c]
;;;1085   }
000ab8  e12fff1e          BX       lr
;;;1086   
                          ENDP

                  eDMC_GetReadTransferDelay PROC
;;;1088   /****************************************************************************/
;;;1089   dmc_read_delay_e eDMC_GetReadTransferDelay(void)
000abc  e59f0440          LDR      r0,|L1.3844|
;;;1090   {
;;;1091       return (dmc_read_delay_e)biGetread_transfer_delay_read_transfer_delay();
000ac0  e590007c          LDR      r0,[r0,#0x7c]
000ac4  e2000003          AND      r0,r0,#3
;;;1092   }
000ac8  e12fff1e          BX       lr
;;;1093   
                          ENDP

                  vDMC_SetIdConfig PROC
;;;1095   /****************************************************************************/
;;;1096   void vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
000acc  e92d4030          PUSH     {r4,r5,lr}
;;;1097                         dmc_enable_e eQosMin, dmc_enable_e eQosEnable)
;;;1098   {
;;;1099       switch(u8CfgID)
000ad0  e3500010          CMP      r0,#0x10
000ad4  308ff100          ADDCC    pc,pc,r0,LSL #2
000ad8  ea0000ff          B        |L1.3804|
000adc  ea00000e          B        |L1.2844|
000ae0  ea00001c          B        |L1.2904|
000ae4  ea00002a          B        |L1.2964|
000ae8  ea000038          B        |L1.3024|
000aec  ea000046          B        |L1.3084|
000af0  ea000054          B        |L1.3144|
000af4  ea000062          B        |L1.3204|
000af8  ea000070          B        |L1.3264|
000afc  ea00007e          B        |L1.3324|
000b00  ea00008c          B        |L1.3384|
000b04  ea00009a          B        |L1.3444|
000b08  ea0000a8          B        |L1.3504|
000b0c  ea0000b6          B        |L1.3564|
000b10  ea0000c4          B        |L1.3624|
000b14  ea0000d2          B        |L1.3684|
000b18  ea0000e0          B        |L1.3744|
                  |L1.2844|
;;;1100       {
;;;1101           case 0 :
000b1c  e320f000          NOP      
;;;1102                   vSetid_0_cfg_qos_enable0(eQosEnable);
000b20  e59f43dc          LDR      r4,|L1.3844|
000b24  e5944100          LDR      r4,[r4,#0x100]
000b28  e7c04013          BFI      r4,r3,#0,#1
000b2c  e59f53d0          LDR      r5,|L1.3844|
000b30  e5854100          STR      r4,[r5,#0x100]
;;;1103                   vSetid_0_cfg_qos_min0(eQosMin);
000b34  e1a04005          MOV      r4,r5
000b38  e5944100          LDR      r4,[r4,#0x100]
000b3c  e7c14092          BFI      r4,r2,#1,#1
000b40  e5854100          STR      r4,[r5,#0x100]
;;;1104                   vSetid_0_cfg_qos_max0(u8QosMax);
000b44  e1a04005          MOV      r4,r5
000b48  e5944100          LDR      r4,[r4,#0x100]
000b4c  e7c94111          BFI      r4,r1,#2,#8
000b50  e5854100          STR      r4,[r5,#0x100]
;;;1105                   break;
000b54  ea0000e2          B        |L1.3812|
                  |L1.2904|
;;;1106           case 1 :
000b58  e320f000          NOP      
;;;1107                   vSetid_1_cfg_qos_enable1(eQosEnable);
000b5c  e59f43a0          LDR      r4,|L1.3844|
000b60  e5944104          LDR      r4,[r4,#0x104]
000b64  e7c04013          BFI      r4,r3,#0,#1
000b68  e59f5394          LDR      r5,|L1.3844|
000b6c  e5854104          STR      r4,[r5,#0x104]
;;;1108                   vSetid_1_cfg_qos_min1(eQosMin);
000b70  e1a04005          MOV      r4,r5
000b74  e5944104          LDR      r4,[r4,#0x104]
000b78  e7c14092          BFI      r4,r2,#1,#1
000b7c  e5854104          STR      r4,[r5,#0x104]
;;;1109                   vSetid_1_cfg_qos_max1(u8QosMax);
000b80  e1a04005          MOV      r4,r5
000b84  e5944104          LDR      r4,[r4,#0x104]
000b88  e7c94111          BFI      r4,r1,#2,#8
000b8c  e5854104          STR      r4,[r5,#0x104]
;;;1110                   break;
000b90  ea0000d3          B        |L1.3812|
                  |L1.2964|
;;;1111           case 2 :
000b94  e320f000          NOP      
;;;1112                   vSetid_2_cfg_qos_enable2(eQosEnable);
000b98  e59f4364          LDR      r4,|L1.3844|
000b9c  e5944108          LDR      r4,[r4,#0x108]
000ba0  e7c04013          BFI      r4,r3,#0,#1
000ba4  e59f5358          LDR      r5,|L1.3844|
000ba8  e5854108          STR      r4,[r5,#0x108]
;;;1113                   vSetid_2_cfg_qos_min2(eQosMin);
000bac  e1a04005          MOV      r4,r5
000bb0  e5944108          LDR      r4,[r4,#0x108]
000bb4  e7c14092          BFI      r4,r2,#1,#1
000bb8  e5854108          STR      r4,[r5,#0x108]
;;;1114                   vSetid_2_cfg_qos_max2(u8QosMax);
000bbc  e1a04005          MOV      r4,r5
000bc0  e5944108          LDR      r4,[r4,#0x108]
000bc4  e7c94111          BFI      r4,r1,#2,#8
000bc8  e5854108          STR      r4,[r5,#0x108]
;;;1115                   break;
000bcc  ea0000c4          B        |L1.3812|
                  |L1.3024|
;;;1116           case 3 :
000bd0  e320f000          NOP      
;;;1117                   vSetid_3_cfg_qos_enable3(eQosEnable);
000bd4  e59f4328          LDR      r4,|L1.3844|
000bd8  e594410c          LDR      r4,[r4,#0x10c]
000bdc  e7c04013          BFI      r4,r3,#0,#1
000be0  e59f531c          LDR      r5,|L1.3844|
000be4  e585410c          STR      r4,[r5,#0x10c]
;;;1118                   vSetid_3_cfg_qos_min3(eQosMin);
000be8  e1a04005          MOV      r4,r5
000bec  e594410c          LDR      r4,[r4,#0x10c]
000bf0  e7c14092          BFI      r4,r2,#1,#1
000bf4  e585410c          STR      r4,[r5,#0x10c]
;;;1119                   vSetid_3_cfg_qos_max3(u8QosMax);
000bf8  e1a04005          MOV      r4,r5
000bfc  e594410c          LDR      r4,[r4,#0x10c]
000c00  e7c94111          BFI      r4,r1,#2,#8
000c04  e585410c          STR      r4,[r5,#0x10c]
;;;1120                   break;
000c08  ea0000b5          B        |L1.3812|
                  |L1.3084|
;;;1121           case 4 :
000c0c  e320f000          NOP      
;;;1122                   vSetid_4_cfg_qos_enable4(eQosEnable);
000c10  e59f42ec          LDR      r4,|L1.3844|
000c14  e5944110          LDR      r4,[r4,#0x110]
000c18  e7c04013          BFI      r4,r3,#0,#1
000c1c  e59f52e0          LDR      r5,|L1.3844|
000c20  e5854110          STR      r4,[r5,#0x110]
;;;1123                   vSetid_4_cfg_qos_min4(eQosMin);
000c24  e1a04005          MOV      r4,r5
000c28  e5944110          LDR      r4,[r4,#0x110]
000c2c  e7c14092          BFI      r4,r2,#1,#1
000c30  e5854110          STR      r4,[r5,#0x110]
;;;1124                   vSetid_4_cfg_qos_max4(u8QosMax);
000c34  e1a04005          MOV      r4,r5
000c38  e5944110          LDR      r4,[r4,#0x110]
000c3c  e7c94111          BFI      r4,r1,#2,#8
000c40  e5854110          STR      r4,[r5,#0x110]
;;;1125                   break;
000c44  ea0000a6          B        |L1.3812|
                  |L1.3144|
;;;1126           case 5 :
000c48  e320f000          NOP      
;;;1127                   vSetid_5_cfg_qos_enable5(eQosEnable);
000c4c  e59f42b0          LDR      r4,|L1.3844|
000c50  e5944114          LDR      r4,[r4,#0x114]
000c54  e7c04013          BFI      r4,r3,#0,#1
000c58  e59f52a4          LDR      r5,|L1.3844|
000c5c  e5854114          STR      r4,[r5,#0x114]
;;;1128                   vSetid_5_cfg_qos_min5(eQosMin);
000c60  e1a04005          MOV      r4,r5
000c64  e5944114          LDR      r4,[r4,#0x114]
000c68  e7c14092          BFI      r4,r2,#1,#1
000c6c  e5854114          STR      r4,[r5,#0x114]
;;;1129                   vSetid_5_cfg_qos_max5(u8QosMax);
000c70  e1a04005          MOV      r4,r5
000c74  e5944114          LDR      r4,[r4,#0x114]
000c78  e7c94111          BFI      r4,r1,#2,#8
000c7c  e5854114          STR      r4,[r5,#0x114]
;;;1130                   break;
000c80  ea000097          B        |L1.3812|
                  |L1.3204|
;;;1131           case 6 :
000c84  e320f000          NOP      
;;;1132                   vSetid_6_cfg_qos_enable6(eQosEnable);
000c88  e59f4274          LDR      r4,|L1.3844|
000c8c  e5944118          LDR      r4,[r4,#0x118]
000c90  e7c04013          BFI      r4,r3,#0,#1
000c94  e59f5268          LDR      r5,|L1.3844|
000c98  e5854118          STR      r4,[r5,#0x118]
;;;1133                   vSetid_6_cfg_qos_min6(eQosMin);
000c9c  e1a04005          MOV      r4,r5
000ca0  e5944118          LDR      r4,[r4,#0x118]
000ca4  e7c14092          BFI      r4,r2,#1,#1
000ca8  e5854118          STR      r4,[r5,#0x118]
;;;1134                   vSetid_6_cfg_qos_max6(u8QosMax);
000cac  e1a04005          MOV      r4,r5
000cb0  e5944118          LDR      r4,[r4,#0x118]
000cb4  e7c94111          BFI      r4,r1,#2,#8
000cb8  e5854118          STR      r4,[r5,#0x118]
;;;1135                   break;
000cbc  ea000088          B        |L1.3812|
                  |L1.3264|
;;;1136           case 7 :
000cc0  e320f000          NOP      
;;;1137                   vSetid_7_cfg_qos_enable7(eQosEnable);
000cc4  e59f4238          LDR      r4,|L1.3844|
000cc8  e594411c          LDR      r4,[r4,#0x11c]
000ccc  e7c04013          BFI      r4,r3,#0,#1
000cd0  e59f522c          LDR      r5,|L1.3844|
000cd4  e585411c          STR      r4,[r5,#0x11c]
;;;1138                   vSetid_7_cfg_qos_min7(eQosMin);
000cd8  e1a04005          MOV      r4,r5
000cdc  e594411c          LDR      r4,[r4,#0x11c]
000ce0  e7c14092          BFI      r4,r2,#1,#1
000ce4  e585411c          STR      r4,[r5,#0x11c]
;;;1139                   vSetid_7_cfg_qos_max7(u8QosMax);
000ce8  e1a04005          MOV      r4,r5
000cec  e594411c          LDR      r4,[r4,#0x11c]
000cf0  e7c94111          BFI      r4,r1,#2,#8
000cf4  e585411c          STR      r4,[r5,#0x11c]
;;;1140                   break;
000cf8  ea000079          B        |L1.3812|
                  |L1.3324|
;;;1141           case 8 :
000cfc  e320f000          NOP      
;;;1142                   vSetid_8_cfg_qos_enable8(eQosEnable);
000d00  e59f41fc          LDR      r4,|L1.3844|
000d04  e5944120          LDR      r4,[r4,#0x120]
000d08  e7c04013          BFI      r4,r3,#0,#1
000d0c  e59f51f0          LDR      r5,|L1.3844|
000d10  e5854120          STR      r4,[r5,#0x120]
;;;1143                   vSetid_8_cfg_qos_min8(eQosMin);
000d14  e1a04005          MOV      r4,r5
000d18  e5944120          LDR      r4,[r4,#0x120]
000d1c  e7c14092          BFI      r4,r2,#1,#1
000d20  e5854120          STR      r4,[r5,#0x120]
;;;1144                   vSetid_8_cfg_qos_max8(u8QosMax);
000d24  e1a04005          MOV      r4,r5
000d28  e5944120          LDR      r4,[r4,#0x120]
000d2c  e7c94111          BFI      r4,r1,#2,#8
000d30  e5854120          STR      r4,[r5,#0x120]
;;;1145                   break;
000d34  ea00006a          B        |L1.3812|
                  |L1.3384|
;;;1146           case 9 :
000d38  e320f000          NOP      
;;;1147                   vSetid_9_cfg_qos_enable9(eQosEnable);
000d3c  e59f41c0          LDR      r4,|L1.3844|
000d40  e5944124          LDR      r4,[r4,#0x124]
000d44  e7c04013          BFI      r4,r3,#0,#1
000d48  e59f51b4          LDR      r5,|L1.3844|
000d4c  e5854124          STR      r4,[r5,#0x124]
;;;1148                   vSetid_9_cfg_qos_min9(eQosMin);
000d50  e1a04005          MOV      r4,r5
000d54  e5944124          LDR      r4,[r4,#0x124]
000d58  e7c14092          BFI      r4,r2,#1,#1
000d5c  e5854124          STR      r4,[r5,#0x124]
;;;1149                   vSetid_9_cfg_qos_max9(u8QosMax);
000d60  e1a04005          MOV      r4,r5
000d64  e5944124          LDR      r4,[r4,#0x124]
000d68  e7c94111          BFI      r4,r1,#2,#8
000d6c  e5854124          STR      r4,[r5,#0x124]
;;;1150                   break;
000d70  ea00005b          B        |L1.3812|
                  |L1.3444|
;;;1151           case 10 :
000d74  e320f000          NOP      
;;;1152                   vSetid_10_cfg_qos_enable10(eQosEnable);
000d78  e59f4184          LDR      r4,|L1.3844|
000d7c  e5944128          LDR      r4,[r4,#0x128]
000d80  e7c04013          BFI      r4,r3,#0,#1
000d84  e59f5178          LDR      r5,|L1.3844|
000d88  e5854128          STR      r4,[r5,#0x128]
;;;1153                   vSetid_10_cfg_qos_min10(eQosMin);
000d8c  e1a04005          MOV      r4,r5
000d90  e5944128          LDR      r4,[r4,#0x128]
000d94  e7c14092          BFI      r4,r2,#1,#1
000d98  e5854128          STR      r4,[r5,#0x128]
;;;1154                   vSetid_10_cfg_qos_max10(u8QosMax);
000d9c  e1a04005          MOV      r4,r5
000da0  e5944128          LDR      r4,[r4,#0x128]
000da4  e7c94111          BFI      r4,r1,#2,#8
000da8  e5854128          STR      r4,[r5,#0x128]
;;;1155                   break;
000dac  ea00004c          B        |L1.3812|
                  |L1.3504|
;;;1156           case 11 :
000db0  e320f000          NOP      
;;;1157                   vSetid_11_cfg_qos_enable11(eQosEnable);
000db4  e59f4148          LDR      r4,|L1.3844|
000db8  e594412c          LDR      r4,[r4,#0x12c]
000dbc  e7c04013          BFI      r4,r3,#0,#1
000dc0  e59f513c          LDR      r5,|L1.3844|
000dc4  e585412c          STR      r4,[r5,#0x12c]
;;;1158                   vSetid_11_cfg_qos_min11(eQosMin);
000dc8  e1a04005          MOV      r4,r5
000dcc  e594412c          LDR      r4,[r4,#0x12c]
000dd0  e7c14092          BFI      r4,r2,#1,#1
000dd4  e585412c          STR      r4,[r5,#0x12c]
;;;1159                   vSetid_11_cfg_qos_max11(u8QosMax);
000dd8  e1a04005          MOV      r4,r5
000ddc  e594412c          LDR      r4,[r4,#0x12c]
000de0  e7c94111          BFI      r4,r1,#2,#8
000de4  e585412c          STR      r4,[r5,#0x12c]
;;;1160                   break;
000de8  ea00003d          B        |L1.3812|
                  |L1.3564|
;;;1161           case 12 :
000dec  e320f000          NOP      
;;;1162                   vSetid_12_cfg_qos_enable12(eQosEnable);
000df0  e59f410c          LDR      r4,|L1.3844|
000df4  e5944130          LDR      r4,[r4,#0x130]
000df8  e7c04013          BFI      r4,r3,#0,#1
000dfc  e59f5100          LDR      r5,|L1.3844|
000e00  e5854130          STR      r4,[r5,#0x130]
;;;1163                   vSetid_12_cfg_qos_min12(eQosMin);
000e04  e1a04005          MOV      r4,r5
000e08  e5944130          LDR      r4,[r4,#0x130]
000e0c  e7c14092          BFI      r4,r2,#1,#1
000e10  e5854130          STR      r4,[r5,#0x130]
;;;1164                   vSetid_12_cfg_qos_max12(u8QosMax);
000e14  e1a04005          MOV      r4,r5
000e18  e5944130          LDR      r4,[r4,#0x130]
000e1c  e7c94111          BFI      r4,r1,#2,#8
000e20  e5854130          STR      r4,[r5,#0x130]
;;;1165                   break;
000e24  ea00002e          B        |L1.3812|
                  |L1.3624|
;;;1166           case 13 :
000e28  e320f000          NOP      
;;;1167                   vSetid_13_cfg_qos_enable13(eQosEnable);
000e2c  e59f40d0          LDR      r4,|L1.3844|
000e30  e5944134          LDR      r4,[r4,#0x134]
000e34  e7c04013          BFI      r4,r3,#0,#1
000e38  e59f50c4          LDR      r5,|L1.3844|
000e3c  e5854134          STR      r4,[r5,#0x134]
;;;1168                   vSetid_13_cfg_qos_min13(eQosMin);
000e40  e1a04005          MOV      r4,r5
000e44  e5944134          LDR      r4,[r4,#0x134]
000e48  e7c14092          BFI      r4,r2,#1,#1
000e4c  e5854134          STR      r4,[r5,#0x134]
;;;1169                   vSetid_13_cfg_qos_max13(u8QosMax);
000e50  e1a04005          MOV      r4,r5
000e54  e5944134          LDR      r4,[r4,#0x134]
000e58  e7c94111          BFI      r4,r1,#2,#8
000e5c  e5854134          STR      r4,[r5,#0x134]
;;;1170                   break;
000e60  ea00001f          B        |L1.3812|
                  |L1.3684|
;;;1171           case 14 :
000e64  e320f000          NOP      
;;;1172                   vSetid_14_cfg_qos_enable14(eQosEnable);
000e68  e59f4094          LDR      r4,|L1.3844|
000e6c  e5944138          LDR      r4,[r4,#0x138]
000e70  e7c04013          BFI      r4,r3,#0,#1
000e74  e59f5088          LDR      r5,|L1.3844|
000e78  e5854138          STR      r4,[r5,#0x138]
;;;1173                   vSetid_14_cfg_qos_min14(eQosMin);
000e7c  e1a04005          MOV      r4,r5
000e80  e5944138          LDR      r4,[r4,#0x138]
000e84  e7c14092          BFI      r4,r2,#1,#1
000e88  e5854138          STR      r4,[r5,#0x138]
;;;1174                   vSetid_14_cfg_qos_max14(u8QosMax);
000e8c  e1a04005          MOV      r4,r5
000e90  e5944138          LDR      r4,[r4,#0x138]
000e94  e7c94111          BFI      r4,r1,#2,#8
000e98  e5854138          STR      r4,[r5,#0x138]
;;;1175                   break;
000e9c  ea000010          B        |L1.3812|
                  |L1.3744|
;;;1176           case 15 :
000ea0  e320f000          NOP      
;;;1177                   vSetid_15_cfg_qos_enable15(eQosEnable);
000ea4  e59f4058          LDR      r4,|L1.3844|
000ea8  e594413c          LDR      r4,[r4,#0x13c]
000eac  e7c04013          BFI      r4,r3,#0,#1
000eb0  e59f504c          LDR      r5,|L1.3844|
000eb4  e585413c          STR      r4,[r5,#0x13c]
;;;1178                   vSetid_15_cfg_qos_min15(eQosMin);
000eb8  e1a04005          MOV      r4,r5
000ebc  e594413c          LDR      r4,[r4,#0x13c]
000ec0  e7c14092          BFI      r4,r2,#1,#1
000ec4  e585413c          STR      r4,[r5,#0x13c]
;;;1179                   vSetid_15_cfg_qos_max15(u8QosMax);
000ec8  e1a04005          MOV      r4,r5
000ecc  e594413c          LDR      r4,[r4,#0x13c]
000ed0  e7c94111          BFI      r4,r1,#2,#8
000ed4  e585413c          STR      r4,[r5,#0x13c]
;;;1180                   break;                
000ed8  ea000001          B        |L1.3812|
                  |L1.3804|
;;;1181           default :
000edc  e320f000          NOP      
;;;1182                   break;
000ee0  e320f000          NOP      
                  |L1.3812|
000ee4  e320f000          NOP                            ;1105
;;;1183       }
;;;1184   }
000ee8  e8bd8030          POP      {r4,r5,pc}
                  |L1.3820|
                          DCD      au8LLDD_DMC_C_REVISION
                  |L1.3824|
                          DCD      au8LLDD_DMC_C_TAG
                  |L1.3828|
                          DCD      au8LLDD_DMC_H_REVISION
                  |L1.3832|
                          DCD      au8LLDD_DMC_H_TAG
                  |L1.3836|
                          DCD      au8LLDD_DMC_IO_H_REVISION
                  |L1.3840|
                          DCD      au8LLDD_DMC_IO_H_TAG
                  |L1.3844|
                          DCD      0xc0d01000
                  |L1.3848|
                          DCD      0x00080031
                  |L1.3852|
                          DCD      0x000a0020
                  |L1.3856|
                          DCD      0xc0302000
                          ENDP

                  vDMC_GetIdConfig PROC
;;;1187   /****************************************************************************/
;;;1188   void vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
000f14  e92d4010          PUSH     {r4,lr}
;;;1189                           dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable)
;;;1190   {
;;;1191       switch(u8CfgID)
000f18  e3500010          CMP      r0,#0x10
000f1c  308ff100          ADDCC    pc,pc,r0,LSL #2
000f20  ea0000ef          B        |L1.4836|
000f24  ea00000e          B        |L1.3940|
000f28  ea00001b          B        |L1.3996|
000f2c  ea000028          B        |L1.4052|
000f30  ea000035          B        |L1.4108|
000f34  ea000042          B        |L1.4164|
000f38  ea00004f          B        |L1.4220|
000f3c  ea00005c          B        |L1.4276|
000f40  ea000069          B        |L1.4332|
000f44  ea000076          B        |L1.4388|
000f48  ea000083          B        |L1.4444|
000f4c  ea000090          B        |L1.4500|
000f50  ea00009d          B        |L1.4556|
000f54  ea0000aa          B        |L1.4612|
000f58  ea0000b7          B        |L1.4668|
000f5c  ea0000c4          B        |L1.4724|
000f60  ea0000d1          B        |L1.4780|
                  |L1.3940|
;;;1192       {
;;;1193           case 0 :
000f64  e320f000          NOP      
;;;1194                   *pQosEnable = (dmc_enable_e)biGetid_0_cfg_qos_enable0();
000f68  e51f406c          LDR      r4,|L1.3844|
000f6c  e5944100          LDR      r4,[r4,#0x100]
000f70  e2044001          AND      r4,r4,#1
000f74  e5c34000          STRB     r4,[r3,#0]
;;;1195                   *pQosMin    = (dmc_enable_e)biGetid_0_cfg_qos_min0();
000f78  e51f407c          LDR      r4,|L1.3844|
000f7c  e5944100          LDR      r4,[r4,#0x100]
000f80  e7e040d4          UBFX     r4,r4,#1,#1
000f84  e5c24000          STRB     r4,[r2,#0]
;;;1196                   *pu8QosMax  = biGetid_0_cfg_qos_max0();
000f88  e51f408c          LDR      r4,|L1.3844|
000f8c  e5944100          LDR      r4,[r4,#0x100]
000f90  e7e74154          UBFX     r4,r4,#2,#8
000f94  e5c14000          STRB     r4,[r1,#0]
;;;1197                   break;
000f98  ea0000d3          B        |L1.4844|
                  |L1.3996|
;;;1198           case 1 :
000f9c  e320f000          NOP      
;;;1199                   *pQosEnable = (dmc_enable_e)biGetid_1_cfg_qos_enable1();
000fa0  e51f40a4          LDR      r4,|L1.3844|
000fa4  e5944104          LDR      r4,[r4,#0x104]
000fa8  e2044001          AND      r4,r4,#1
000fac  e5c34000          STRB     r4,[r3,#0]
;;;1200                   *pQosMin    = (dmc_enable_e)biGetid_1_cfg_qos_min1();
000fb0  e51f40b4          LDR      r4,|L1.3844|
000fb4  e5944104          LDR      r4,[r4,#0x104]
000fb8  e7e040d4          UBFX     r4,r4,#1,#1
000fbc  e5c24000          STRB     r4,[r2,#0]
;;;1201                   *pu8QosMax  = biGetid_1_cfg_qos_max1();
000fc0  e51f40c4          LDR      r4,|L1.3844|
000fc4  e5944104          LDR      r4,[r4,#0x104]
000fc8  e7e74154          UBFX     r4,r4,#2,#8
000fcc  e5c14000          STRB     r4,[r1,#0]
;;;1202                   break;
000fd0  ea0000c5          B        |L1.4844|
                  |L1.4052|
;;;1203           case 2 :
000fd4  e320f000          NOP      
;;;1204                   *pQosEnable = (dmc_enable_e)biGetid_2_cfg_qos_enable2();
000fd8  e51f40dc          LDR      r4,|L1.3844|
000fdc  e5944108          LDR      r4,[r4,#0x108]
000fe0  e2044001          AND      r4,r4,#1
000fe4  e5c34000          STRB     r4,[r3,#0]
;;;1205                   *pQosMin    = (dmc_enable_e)biGetid_2_cfg_qos_min2();
000fe8  e51f40ec          LDR      r4,|L1.3844|
000fec  e5944108          LDR      r4,[r4,#0x108]
000ff0  e7e040d4          UBFX     r4,r4,#1,#1
000ff4  e5c24000          STRB     r4,[r2,#0]
;;;1206                   *pu8QosMax  = biGetid_2_cfg_qos_max2();
000ff8  e51f40fc          LDR      r4,|L1.3844|
000ffc  e5944108          LDR      r4,[r4,#0x108]
001000  e7e74154          UBFX     r4,r4,#2,#8
001004  e5c14000          STRB     r4,[r1,#0]
;;;1207                   break;
001008  ea0000b7          B        |L1.4844|
                  |L1.4108|
;;;1208           case 3 :
00100c  e320f000          NOP      
;;;1209                   *pQosEnable = (dmc_enable_e)biGetid_3_cfg_qos_enable3();
001010  e51f4114          LDR      r4,|L1.3844|
001014  e594410c          LDR      r4,[r4,#0x10c]
001018  e2044001          AND      r4,r4,#1
00101c  e5c34000          STRB     r4,[r3,#0]
;;;1210                   *pQosMin    = (dmc_enable_e)biGetid_3_cfg_qos_min3();
001020  e51f4124          LDR      r4,|L1.3844|
001024  e594410c          LDR      r4,[r4,#0x10c]
001028  e7e040d4          UBFX     r4,r4,#1,#1
00102c  e5c24000          STRB     r4,[r2,#0]
;;;1211                   *pu8QosMax  = biGetid_3_cfg_qos_max3();
001030  e51f4134          LDR      r4,|L1.3844|
001034  e594410c          LDR      r4,[r4,#0x10c]
001038  e7e74154          UBFX     r4,r4,#2,#8
00103c  e5c14000          STRB     r4,[r1,#0]
;;;1212                   break;
001040  ea0000a9          B        |L1.4844|
                  |L1.4164|
;;;1213           case 4 :
001044  e320f000          NOP      
;;;1214                   *pQosEnable = (dmc_enable_e)biGetid_4_cfg_qos_enable4();
001048  e51f414c          LDR      r4,|L1.3844|
00104c  e5944110          LDR      r4,[r4,#0x110]
001050  e2044001          AND      r4,r4,#1
001054  e5c34000          STRB     r4,[r3,#0]
;;;1215                   *pQosMin    = (dmc_enable_e)biGetid_4_cfg_qos_min4();
001058  e51f415c          LDR      r4,|L1.3844|
00105c  e5944110          LDR      r4,[r4,#0x110]
001060  e7e040d4          UBFX     r4,r4,#1,#1
001064  e5c24000          STRB     r4,[r2,#0]
;;;1216                   *pu8QosMax  = biGetid_4_cfg_qos_max4();
001068  e51f416c          LDR      r4,|L1.3844|
00106c  e5944110          LDR      r4,[r4,#0x110]
001070  e7e74154          UBFX     r4,r4,#2,#8
001074  e5c14000          STRB     r4,[r1,#0]
;;;1217                   break;
001078  ea00009b          B        |L1.4844|
                  |L1.4220|
;;;1218           case 5 :
00107c  e320f000          NOP      
;;;1219                   *pQosEnable = (dmc_enable_e)biGetid_5_cfg_qos_enable5();
001080  e51f4184          LDR      r4,|L1.3844|
001084  e5944114          LDR      r4,[r4,#0x114]
001088  e2044001          AND      r4,r4,#1
00108c  e5c34000          STRB     r4,[r3,#0]
;;;1220                   *pQosMin    = (dmc_enable_e)biGetid_5_cfg_qos_min5();
001090  e51f4194          LDR      r4,|L1.3844|
001094  e5944114          LDR      r4,[r4,#0x114]
001098  e7e040d4          UBFX     r4,r4,#1,#1
00109c  e5c24000          STRB     r4,[r2,#0]
;;;1221                   *pu8QosMax  = biGetid_5_cfg_qos_max5();
0010a0  e51f41a4          LDR      r4,|L1.3844|
0010a4  e5944114          LDR      r4,[r4,#0x114]
0010a8  e7e74154          UBFX     r4,r4,#2,#8
0010ac  e5c14000          STRB     r4,[r1,#0]
;;;1222                   break;
0010b0  ea00008d          B        |L1.4844|
                  |L1.4276|
;;;1223           case 6 :
0010b4  e320f000          NOP      
;;;1224                   *pQosEnable = (dmc_enable_e)biGetid_6_cfg_qos_enable6();
0010b8  e51f41bc          LDR      r4,|L1.3844|
0010bc  e5944118          LDR      r4,[r4,#0x118]
0010c0  e2044001          AND      r4,r4,#1
0010c4  e5c34000          STRB     r4,[r3,#0]
;;;1225                   *pQosMin    = (dmc_enable_e)biGetid_6_cfg_qos_min6();
0010c8  e51f41cc          LDR      r4,|L1.3844|
0010cc  e5944118          LDR      r4,[r4,#0x118]
0010d0  e7e040d4          UBFX     r4,r4,#1,#1
0010d4  e5c24000          STRB     r4,[r2,#0]
;;;1226                   *pu8QosMax  = biGetid_6_cfg_qos_max6();
0010d8  e51f41dc          LDR      r4,|L1.3844|
0010dc  e5944118          LDR      r4,[r4,#0x118]
0010e0  e7e74154          UBFX     r4,r4,#2,#8
0010e4  e5c14000          STRB     r4,[r1,#0]
;;;1227                   break;
0010e8  ea00007f          B        |L1.4844|
                  |L1.4332|
;;;1228           case 7 :
0010ec  e320f000          NOP      
;;;1229                   *pQosEnable = (dmc_enable_e)biGetid_7_cfg_qos_enable7();
0010f0  e51f41f4          LDR      r4,|L1.3844|
0010f4  e594411c          LDR      r4,[r4,#0x11c]
0010f8  e2044001          AND      r4,r4,#1
0010fc  e5c34000          STRB     r4,[r3,#0]
;;;1230                   *pQosMin    = (dmc_enable_e)biGetid_7_cfg_qos_min7();
001100  e51f4204          LDR      r4,|L1.3844|
001104  e594411c          LDR      r4,[r4,#0x11c]
001108  e7e040d4          UBFX     r4,r4,#1,#1
00110c  e5c24000          STRB     r4,[r2,#0]
;;;1231                   *pu8QosMax  = biGetid_7_cfg_qos_max7();
001110  e51f4214          LDR      r4,|L1.3844|
001114  e594411c          LDR      r4,[r4,#0x11c]
001118  e7e74154          UBFX     r4,r4,#2,#8
00111c  e5c14000          STRB     r4,[r1,#0]
;;;1232                   break;
001120  ea000071          B        |L1.4844|
                  |L1.4388|
;;;1233           case 8 :
001124  e320f000          NOP      
;;;1234                   *pQosEnable = (dmc_enable_e)biGetid_8_cfg_qos_enable8();
001128  e51f422c          LDR      r4,|L1.3844|
00112c  e5944120          LDR      r4,[r4,#0x120]
001130  e2044001          AND      r4,r4,#1
001134  e5c34000          STRB     r4,[r3,#0]
;;;1235                   *pQosMin    = (dmc_enable_e)biGetid_8_cfg_qos_min8();
001138  e51f423c          LDR      r4,|L1.3844|
00113c  e5944120          LDR      r4,[r4,#0x120]
001140  e7e040d4          UBFX     r4,r4,#1,#1
001144  e5c24000          STRB     r4,[r2,#0]
;;;1236                   *pu8QosMax  = biGetid_8_cfg_qos_max8();
001148  e51f424c          LDR      r4,|L1.3844|
00114c  e5944120          LDR      r4,[r4,#0x120]
001150  e7e74154          UBFX     r4,r4,#2,#8
001154  e5c14000          STRB     r4,[r1,#0]
;;;1237                   break;
001158  ea000063          B        |L1.4844|
                  |L1.4444|
;;;1238           case 9 :
00115c  e320f000          NOP      
;;;1239                   *pQosEnable = (dmc_enable_e)biGetid_9_cfg_qos_enable9();
001160  e51f4264          LDR      r4,|L1.3844|
001164  e5944124          LDR      r4,[r4,#0x124]
001168  e2044001          AND      r4,r4,#1
00116c  e5c34000          STRB     r4,[r3,#0]
;;;1240                   *pQosMin    = (dmc_enable_e)biGetid_9_cfg_qos_min9();
001170  e51f4274          LDR      r4,|L1.3844|
001174  e5944124          LDR      r4,[r4,#0x124]
001178  e7e040d4          UBFX     r4,r4,#1,#1
00117c  e5c24000          STRB     r4,[r2,#0]
;;;1241                   *pu8QosMax  = biGetid_9_cfg_qos_max9();
001180  e51f4284          LDR      r4,|L1.3844|
001184  e5944124          LDR      r4,[r4,#0x124]
001188  e7e74154          UBFX     r4,r4,#2,#8
00118c  e5c14000          STRB     r4,[r1,#0]
;;;1242                   break;
001190  ea000055          B        |L1.4844|
                  |L1.4500|
;;;1243           case 10 :
001194  e320f000          NOP      
;;;1244                   *pQosEnable = (dmc_enable_e)biGetid_10_cfg_qos_enable10();
001198  e51f429c          LDR      r4,|L1.3844|
00119c  e5944128          LDR      r4,[r4,#0x128]
0011a0  e2044001          AND      r4,r4,#1
0011a4  e5c34000          STRB     r4,[r3,#0]
;;;1245                   *pQosMin    = (dmc_enable_e)biGetid_10_cfg_qos_min10();
0011a8  e51f42ac          LDR      r4,|L1.3844|
0011ac  e5944128          LDR      r4,[r4,#0x128]
0011b0  e7e040d4          UBFX     r4,r4,#1,#1
0011b4  e5c24000          STRB     r4,[r2,#0]
;;;1246                   *pu8QosMax  = biGetid_10_cfg_qos_max10();
0011b8  e51f42bc          LDR      r4,|L1.3844|
0011bc  e5944128          LDR      r4,[r4,#0x128]
0011c0  e7e74154          UBFX     r4,r4,#2,#8
0011c4  e5c14000          STRB     r4,[r1,#0]
;;;1247                   break;
0011c8  ea000047          B        |L1.4844|
                  |L1.4556|
;;;1248           case 11 :
0011cc  e320f000          NOP      
;;;1249                   *pQosEnable = (dmc_enable_e)biGetid_11_cfg_qos_enable11();
0011d0  e51f42d4          LDR      r4,|L1.3844|
0011d4  e594412c          LDR      r4,[r4,#0x12c]
0011d8  e2044001          AND      r4,r4,#1
0011dc  e5c34000          STRB     r4,[r3,#0]
;;;1250                   *pQosMin    = (dmc_enable_e)biGetid_11_cfg_qos_min11();
0011e0  e51f42e4          LDR      r4,|L1.3844|
0011e4  e594412c          LDR      r4,[r4,#0x12c]
0011e8  e7e040d4          UBFX     r4,r4,#1,#1
0011ec  e5c24000          STRB     r4,[r2,#0]
;;;1251                   *pu8QosMax  = biGetid_11_cfg_qos_max11();
0011f0  e51f42f4          LDR      r4,|L1.3844|
0011f4  e594412c          LDR      r4,[r4,#0x12c]
0011f8  e7e74154          UBFX     r4,r4,#2,#8
0011fc  e5c14000          STRB     r4,[r1,#0]
;;;1252                   break;
001200  ea000039          B        |L1.4844|
                  |L1.4612|
;;;1253           case 12 :
001204  e320f000          NOP      
;;;1254                   *pQosEnable = (dmc_enable_e)biGetid_12_cfg_qos_enable12();
001208  e51f430c          LDR      r4,|L1.3844|
00120c  e5944130          LDR      r4,[r4,#0x130]
001210  e2044001          AND      r4,r4,#1
001214  e5c34000          STRB     r4,[r3,#0]
;;;1255                   *pQosMin    = (dmc_enable_e)biGetid_12_cfg_qos_min12();
001218  e51f431c          LDR      r4,|L1.3844|
00121c  e5944130          LDR      r4,[r4,#0x130]
001220  e7e040d4          UBFX     r4,r4,#1,#1
001224  e5c24000          STRB     r4,[r2,#0]
;;;1256                   *pu8QosMax  = biGetid_12_cfg_qos_max12();
001228  e51f432c          LDR      r4,|L1.3844|
00122c  e5944130          LDR      r4,[r4,#0x130]
001230  e7e74154          UBFX     r4,r4,#2,#8
001234  e5c14000          STRB     r4,[r1,#0]
;;;1257                   break;
001238  ea00002b          B        |L1.4844|
                  |L1.4668|
;;;1258           case 13 :
00123c  e320f000          NOP      
;;;1259                   *pQosEnable = (dmc_enable_e)biGetid_13_cfg_qos_enable13();
001240  e51f4344          LDR      r4,|L1.3844|
001244  e5944134          LDR      r4,[r4,#0x134]
001248  e2044001          AND      r4,r4,#1
00124c  e5c34000          STRB     r4,[r3,#0]
;;;1260                   *pQosMin    = (dmc_enable_e)biGetid_13_cfg_qos_min13();
001250  e51f4354          LDR      r4,|L1.3844|
001254  e5944134          LDR      r4,[r4,#0x134]
001258  e7e040d4          UBFX     r4,r4,#1,#1
00125c  e5c24000          STRB     r4,[r2,#0]
;;;1261                   *pu8QosMax  = biGetid_13_cfg_qos_max13();
001260  e51f4364          LDR      r4,|L1.3844|
001264  e5944134          LDR      r4,[r4,#0x134]
001268  e7e74154          UBFX     r4,r4,#2,#8
00126c  e5c14000          STRB     r4,[r1,#0]
;;;1262                   break;
001270  ea00001d          B        |L1.4844|
                  |L1.4724|
;;;1263           case 14 :
001274  e320f000          NOP      
;;;1264                   *pQosEnable = (dmc_enable_e)biGetid_14_cfg_qos_enable14();
001278  e51f437c          LDR      r4,|L1.3844|
00127c  e5944138          LDR      r4,[r4,#0x138]
001280  e2044001          AND      r4,r4,#1
001284  e5c34000          STRB     r4,[r3,#0]
;;;1265                   *pQosMin    = (dmc_enable_e)biGetid_14_cfg_qos_min14();
001288  e51f438c          LDR      r4,|L1.3844|
00128c  e5944138          LDR      r4,[r4,#0x138]
001290  e7e040d4          UBFX     r4,r4,#1,#1
001294  e5c24000          STRB     r4,[r2,#0]
;;;1266                   *pu8QosMax  = biGetid_14_cfg_qos_max14();
001298  e51f439c          LDR      r4,|L1.3844|
00129c  e5944138          LDR      r4,[r4,#0x138]
0012a0  e7e74154          UBFX     r4,r4,#2,#8
0012a4  e5c14000          STRB     r4,[r1,#0]
;;;1267                   break;
0012a8  ea00000f          B        |L1.4844|
                  |L1.4780|
;;;1268           case 15 :
0012ac  e320f000          NOP      
;;;1269                   *pQosEnable = (dmc_enable_e)biGetid_15_cfg_qos_enable15();
0012b0  e51f43b4          LDR      r4,|L1.3844|
0012b4  e594413c          LDR      r4,[r4,#0x13c]
0012b8  e2044001          AND      r4,r4,#1
0012bc  e5c34000          STRB     r4,[r3,#0]
;;;1270                   *pQosMin    = (dmc_enable_e)biGetid_15_cfg_qos_min15();
0012c0  e51f43c4          LDR      r4,|L1.3844|
0012c4  e594413c          LDR      r4,[r4,#0x13c]
0012c8  e7e040d4          UBFX     r4,r4,#1,#1
0012cc  e5c24000          STRB     r4,[r2,#0]
;;;1271                   *pu8QosMax  = biGetid_15_cfg_qos_max15();
0012d0  e51f43d4          LDR      r4,|L1.3844|
0012d4  e594413c          LDR      r4,[r4,#0x13c]
0012d8  e7e74154          UBFX     r4,r4,#2,#8
0012dc  e5c14000          STRB     r4,[r1,#0]
;;;1272                   break;                
0012e0  ea000001          B        |L1.4844|
                  |L1.4836|
;;;1273               
;;;1274           default :
0012e4  e320f000          NOP      
;;;1275                   break;
0012e8  e320f000          NOP      
                  |L1.4844|
0012ec  e320f000          NOP                            ;1197
;;;1276       }
;;;1277   }
0012f0  e8bd8010          POP      {r4,pc}
;;;1278   
                          ENDP

                  vDMC_SetChipConfig PROC
;;;1280   /****************************************************************************/
;;;1281   void vDMC_SetChipConfig(uint32_t u32Config)
0012f4  e51f13f8          LDR      r1,|L1.3844|
;;;1282   {
;;;1283       vSetchip_cfg(u32Config);
0012f8  e5810200          STR      r0,[r1,#0x200]
;;;1284   }
0012fc  e12fff1e          BX       lr
;;;1285   
                          ENDP

                  u32DMC_GetChipConfig PROC
;;;1287   /****************************************************************************/
;;;1288   uint32_t u32DMC_GetChipConfig(void)
001300  e51f0404          LDR      r0,|L1.3844|
;;;1289   {
;;;1290       return (uint32_t)u32Getchip_cfg();
001304  e5900200          LDR      r0,[r0,#0x200]
;;;1291   }
001308  e12fff1e          BX       lr
;;;1292   
                          ENDP

                  vDMC_SetChipConfigAddrFmt PROC
;;;1294   /****************************************************************************/
;;;1295   void vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt)
00130c  e51f1410          LDR      r1,|L1.3844|
;;;1296   {
;;;1297       vSetchip_cfg_address_fmt(eAddrFmt);
001310  e5911200          LDR      r1,[r1,#0x200]
001314  e7d01810          BFI      r1,r0,#16,#1
001318  e51f241c          LDR      r2,|L1.3844|
00131c  e5821200          STR      r1,[r2,#0x200]
;;;1298   }
001320  e12fff1e          BX       lr
;;;1299   
                          ENDP

                  eDMC_GetChipConfigAddrFmt PROC
;;;1301   /****************************************************************************/
;;;1302   dmc_addr_format_e eDMC_GetChipConfigAddrFmt(void)
001324  e51f0428          LDR      r0,|L1.3844|
;;;1303   {
;;;1304       return (dmc_addr_format_e)biGetchip_cfg_address_fmt();
001328  e5900200          LDR      r0,[r0,#0x200]
00132c  e7e00850          UBFX     r0,r0,#16,#1
;;;1305   }
001330  e12fff1e          BX       lr
;;;1306   
                          ENDP

                  vDMC_SetChipConfigAddrMatch PROC
;;;1308   /****************************************************************************/
;;;1309   void vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch)
001334  e51f1438          LDR      r1,|L1.3844|
;;;1310   {
;;;1311       vSetchip_cfg_address_match(u8AddrMatch);
001338  e5911200          LDR      r1,[r1,#0x200]
00133c  e7cf1410          BFI      r1,r0,#8,#8
001340  e51f2444          LDR      r2,|L1.3844|
001344  e5821200          STR      r1,[r2,#0x200]
;;;1312   }
001348  e12fff1e          BX       lr
;;;1313   
                          ENDP

                  u8DMC_GetChipConfigAddrMatch PROC
;;;1315   /****************************************************************************/
;;;1316   uint8_t u8DMC_GetChipConfigAddrMatch(void)
00134c  e51f0450          LDR      r0,|L1.3844|
;;;1317   {
;;;1318       return (uint8_t)biGetchip_cfg_address_match();
001350  e5900200          LDR      r0,[r0,#0x200]
001354  e7e70450          UBFX     r0,r0,#8,#8
;;;1319   }
001358  e12fff1e          BX       lr
;;;1320   
                          ENDP

                  vDMC_SetChipConfigAddrMask PROC
;;;1322   /****************************************************************************/
;;;1323   void vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask)
00135c  e51f1460          LDR      r1,|L1.3844|
;;;1324   {
;;;1325       vSetchip_cfg_address_mask(u8AddrMask);
001360  e5911200          LDR      r1,[r1,#0x200]
001364  e7c71010          BFI      r1,r0,#0,#8
001368  e51f246c          LDR      r2,|L1.3844|
00136c  e5821200          STR      r1,[r2,#0x200]
;;;1326   }
001370  e12fff1e          BX       lr
;;;1327   
                          ENDP

                  u8DMC_GetChipConfigAddrMask PROC
;;;1329   /****************************************************************************/
;;;1330   uint8_t u8DMC_GetChipConfigAddrMask(void)
001374  e51f0478          LDR      r0,|L1.3844|
;;;1331   {
;;;1332       return (uint8_t)biGetchip_cfg_address_mask();
001378  e5900200          LDR      r0,[r0,#0x200]
00137c  e20000ff          AND      r0,r0,#0xff
;;;1333   }
001380  e12fff1e          BX       lr
;;;1334   
                          ENDP

                  eDMC_GetUserStatus PROC
;;;1336   /****************************************************************************/
;;;1337   dmc_enable_e eDMC_GetUserStatus(void)
001384  e51f0488          LDR      r0,|L1.3844|
;;;1338   {
;;;1339       return (dmc_enable_e)u32Getuser_status();
001388  e5900300          LDR      r0,[r0,#0x300]
00138c  e20000ff          AND      r0,r0,#0xff
;;;1340   }
001390  e12fff1e          BX       lr
;;;1341   
                          ENDP

                  vDMC_SetUserConfig PROC
;;;1343   /****************************************************************************/
;;;1344   void vDMC_SetUserConfig(uint32_t u32Config)
001394  e51f1498          LDR      r1,|L1.3844|
;;;1345   {
;;;1346       vSetuser_config(u32Config);
001398  e5810304          STR      r0,[r1,#0x304]
;;;1347   }
00139c  e12fff1e          BX       lr
;;;1348   
                          ENDP

                  vDMC_SetUserConfigGearRatio0 PROC
;;;1350   /****************************************************************************/
;;;1351   void vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio)
0013a0  e51f14a4          LDR      r1,|L1.3844|
;;;1352   {
;;;1353       vSetuser_config_gear_ratio0(u16GearRatio);
0013a4  e5911304          LDR      r1,[r1,#0x304]
0013a8  e7ca1010          BFI      r1,r0,#0,#11
0013ac  e51f24b0          LDR      r2,|L1.3844|
0013b0  e5821304          STR      r1,[r2,#0x304]
;;;1354   }
0013b4  e12fff1e          BX       lr
;;;1355   
                          ENDP

                  vDMC_SetUserConfigGearRatio1 PROC
;;;1357   /****************************************************************************/
;;;1358   void vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio)
0013b8  e51f14bc          LDR      r1,|L1.3844|
;;;1359   {
;;;1360       vSetuser_config_gear_ratio1(u16GearRatio);
0013bc  e5911304          LDR      r1,[r1,#0x304]
0013c0  e7da1810          BFI      r1,r0,#16,#11
0013c4  e51f24c8          LDR      r2,|L1.3844|
0013c8  e5821304          STR      r1,[r2,#0x304]
;;;1361   }
0013cc  e12fff1e          BX       lr
;;;1362   
                          ENDP

                  vDMC_SetUserConfig1 PROC
;;;1364   /****************************************************************************/
;;;1365   void vDMC_SetUserConfig1(uint32_t u32Config)
0013d0  e51f14d4          LDR      r1,|L1.3844|
;;;1366   {
;;;1367       vSetuser_config1(u32Config);
0013d4  e5810308          STR      r0,[r1,#0x308]
;;;1368   }
0013d8  e12fff1e          BX       lr
;;;1369   
                          ENDP

                  vDMC_SetUserConfig1GearRatio3 PROC
;;;1371   /****************************************************************************/
;;;1372   void vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio)
0013dc  e51f14e0          LDR      r1,|L1.3844|
;;;1373   {
;;;1374       vSetuser_config1_gear_ratio3(u16GearRatio);
0013e0  e5911308          LDR      r1,[r1,#0x308]
0013e4  e7da1810          BFI      r1,r0,#16,#11
0013e8  e51f24ec          LDR      r2,|L1.3844|
0013ec  e5821308          STR      r1,[r2,#0x308]
;;;1375   }
0013f0  e12fff1e          BX       lr
;;;1376   
                          ENDP

                  vDMC_SetUserConfig1UseMinDelay PROC
;;;1378   /****************************************************************************/
;;;1379   void vDMC_SetUserConfig1UseMinDelay(bool_t boDelay)
0013f4  e51f14f8          LDR      r1,|L1.3844|
;;;1380   {
;;;1381       vSetuser_config1_Use_Min_Delay(boDelay);
0013f8  e5911308          LDR      r1,[r1,#0x308]
0013fc  e7ce1710          BFI      r1,r0,#14,#1
001400  e51f2504          LDR      r2,|L1.3844|
001404  e5821308          STR      r1,[r2,#0x308]
;;;1382   }
001408  e12fff1e          BX       lr
;;;1383   
                          ENDP

                  vDMC_SetUserConfig1ClkModeChange PROC
;;;1385   /****************************************************************************/
;;;1386   void vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange)
00140c  e51f1510          LDR      r1,|L1.3844|
;;;1387   {
;;;1388       vSetuser_config1_Clock_Mode_Change(eModeChange);
001410  e5911308          LDR      r1,[r1,#0x308]
001414  e7cd1690          BFI      r1,r0,#13,#1
001418  e51f251c          LDR      r2,|L1.3844|
00141c  e5821308          STR      r1,[r2,#0x308]
;;;1389   }
001420  e12fff1e          BX       lr
;;;1390   
                          ENDP

                  vDMC_SetUserConfig1SignalEn PROC
;;;1392   /****************************************************************************/
;;;1393   void vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable)
001424  e51f1528          LDR      r1,|L1.3844|
;;;1394   {
;;;1395       vSetuser_config1_Enable(eEnable);
001428  e5911308          LDR      r1,[r1,#0x308]
00142c  e7cc1610          BFI      r1,r0,#12,#1
001430  e51f2534          LDR      r2,|L1.3844|
001434  e5821308          STR      r1,[r2,#0x308]
;;;1396   }
001438  e12fff1e          BX       lr
;;;1397   
                          ENDP

                  vDMC_SetUserConfig1GearRatio2 PROC
;;;1399   /****************************************************************************/
;;;1400   void vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio)
00143c  e51f1540          LDR      r1,|L1.3844|
;;;1401   {
;;;1402       vSetuser_config1_gear_ratio2(u16GearRatio);
001440  e5911308          LDR      r1,[r1,#0x308]
001444  e7ca1010          BFI      r1,r0,#0,#11
001448  e51f254c          LDR      r2,|L1.3844|
00144c  e5821308          STR      r1,[r2,#0x308]
;;;1403   }
001450  e12fff1e          BX       lr
;;;1404   
                          ENDP

                  vSetEarlyWriteResponse PROC
;;;1406   /****************************************************************************/
;;;1407   void vSetEarlyWriteResponse(dmc_enable_e eEnable)
001454  e3500001          CMP      r0,#1
;;;1408   {
;;;1409       if (eEnable == DMC_ENABLE)
001458  1a000005          BNE      |L1.5236|
;;;1410       {
;;;1411           vSetfeature_ctrl_stop_early_bresp((uint32_t)DMC_DISABLE);
00145c  e51f1560          LDR      r1,|L1.3844|
001460  e591130c          LDR      r1,[r1,#0x30c]
001464  e3c11001          BIC      r1,r1,#1
001468  e51f256c          LDR      r2,|L1.3844|
00146c  e582130c          STR      r1,[r2,#0x30c]
001470  ea000005          B        |L1.5260|
                  |L1.5236|
;;;1412       }
;;;1413       else
;;;1414       {
;;;1415           vSetfeature_ctrl_stop_early_bresp((uint32_t)DMC_ENABLE);
001474  e51f1578          LDR      r1,|L1.3844|
001478  e591130c          LDR      r1,[r1,#0x30c]
00147c  e3c11001          BIC      r1,r1,#1
001480  e2811001          ADD      r1,r1,#1
001484  e51f2588          LDR      r2,|L1.3844|
001488  e582130c          STR      r1,[r2,#0x30c]
                  |L1.5260|
;;;1416       }
;;;1417   }
00148c  e12fff1e          BX       lr
;;;1418   
                          ENDP


                          AREA init, CODE, READONLY, ALIGN=2

                  vDMC_Init PROC
;;;93     
;;;94     void vDMC_Init(mem_device_st *pstDeviceParams)
000000  e59f2224          LDR      r2,|L2.556|
;;;95     {
;;;96         uint32_t         u32GearRatio;
;;;97     
;;;98         *((volatile uint32_t *) 0xC0000000U) = 0xA5C0F17BU;      /* pds unlock */
000004  e3a03103          MOV      r3,#0xc0000000
000008  e5832000          STR      r2,[r3,#0]
;;;99         *((volatile uint32_t *) 0xC0000024U) = 0x001D3FC8U;      /* enable LPDDR-clock */
00000c  e59f221c          LDR      r2,|L2.560|
000010  e5832024          STR      r2,[r3,#0x24]
;;;100        
;;;101        /* set clockspeed */
;;;102        if (pstDeviceParams->eClock_rate == DMC_CLOCK_RATE_133MHz)
000014  e5d02002          LDRB     r2,[r0,#2]
000018  e3520001          CMP      r2,#1
00001c  1a000003          BNE      |L2.48|
;;;103        {
;;;104            *((volatile uint32_t *) 0xC0000000U) = 0xA5C0F17BU;  /* pds unlock */
000020  e59f2204          LDR      r2,|L2.556|
000024  e5832000          STR      r2,[r3,#0]
;;;105            *((volatile uint32_t *) 0xC0000008U) = 0x041E1E1EU;  /* enable LPDDR-clock */
000028  e59f2204          LDR      r2,|L2.564|
00002c  e5832008          STR      r2,[r3,#8]
                  |L2.48|
;;;106         }
;;;107    
;;;108        /* enable mux in dmc_wrapper */
;;;109        if (pstDeviceParams->eType == DMC_TYPE_SDRAM )
000030  e5d02000          LDRB     r2,[r0,#0]
000034  e3520000          CMP      r2,#0
000038  1a000003          BNE      |L2.76|
;;;110        {
;;;111            *((volatile uint32_t *) 0xC0302294U) = 0x00000002U;  /* SDRAM 32 bit */
00003c  e3a02002          MOV      r2,#2
000040  e59f31f0          LDR      r3,|L2.568|
000044  e5832294          STR      r2,[r3,#0x294]
000048  ea000009          B        |L2.116|
                  |L2.76|
;;;112        }
;;;113        else if ( pstDeviceParams->eWidth == DMC_BUSWIDTH_32BIT )
00004c  e5d02001          LDRB     r2,[r0,#1]
000050  e3520001          CMP      r2,#1
000054  1a000003          BNE      |L2.104|
;;;114        {
;;;115            *((volatile uint32_t *) 0xC0302294U) = 0x00000001U;  /* LPDDR 32 bit */
000058  e3a02001          MOV      r2,#1
00005c  e59f31d4          LDR      r3,|L2.568|
000060  e5832294          STR      r2,[r3,#0x294]
000064  ea000002          B        |L2.116|
                  |L2.104|
;;;116        }
;;;117        else
;;;118        {
;;;119            *((volatile uint32_t *) 0xC0302294U) = 0x00000003U;  /* LPDDR 16 bit */
000068  e3a02003          MOV      r2,#3
00006c  e59f31c4          LDR      r3,|L2.568|
000070  e5832294          STR      r2,[r3,#0x294]
                  |L2.116|
;;;120        }
;;;121    
;;;122        /* DDR-pin configuration */
;;;123        *((volatile uint32_t *) 0xC0302028U) = 0x28002800U;      /* pins DDR_CAS  and DDR_CS */
000074  e59f21c0          LDR      r2,|L2.572|
000078  e59f31b8          LDR      r3,|L2.568|
00007c  e5832028          STR      r2,[r3,#0x28]
;;;124        *((volatile uint32_t *) 0xC030202CU) = 0x28002800U;      /* pins DDR_CKE  and DDR_CK */
000080  e583202c          STR      r2,[r3,#0x2c]
;;;125        *((volatile uint32_t *) 0xC0302030U) = 0x28002800U;      /* pins DDR_CKN  and DDR_BA0 */
000084  e5832030          STR      r2,[r3,#0x30]
;;;126        *((volatile uint32_t *) 0xC0302024U) = 0x28002800U;      /* pins DDR_WE   and DDR_RAS */
000088  e5832024          STR      r2,[r3,#0x24]
;;;127    
;;;128        *((volatile uint32_t *) 0xC0302000U) = 0x28002800U;      /* pins DDR_DQ0  and DDR_DQ1 */
00008c  e5832000          STR      r2,[r3,#0]
;;;129        *((volatile uint32_t *) 0xC0302004U) = 0x28002800U;      /* pins DDR_DQ2  and DDR_DQ3 */
000090  e5832004          STR      r2,[r3,#4]
;;;130        *((volatile uint32_t *) 0xC0302008U) = 0x28002800U;      /* pins DDR_DQ4  and DDR_DQ5 */
000094  e5832008          STR      r2,[r3,#8]
;;;131        *((volatile uint32_t *) 0xC030200CU) = 0x28002800U;      /* pins DDR_DQ6  and DDR_DQ7 */
000098  e583200c          STR      r2,[r3,#0xc]
;;;132        *((volatile uint32_t *) 0xC0302010U) = 0x28002800U;      /* pins DDR_DQ8  and DDR_DQ9 */
00009c  e5832010          STR      r2,[r3,#0x10]
;;;133        *((volatile uint32_t *) 0xC0302014U) = 0x28002800U;      /* pins DDR_DQ10 and DDR_DQ11 */
0000a0  e5832014          STR      r2,[r3,#0x14]
;;;134        *((volatile uint32_t *) 0xC0302018U) = 0x28002800U;      /* pins DDR_DQ12 and DDR_DQ13 */
0000a4  e5832018          STR      r2,[r3,#0x18]
;;;135        *((volatile uint32_t *) 0xC030201CU) = 0x28002800U;      /* pins DDR_DQ14 and DDR_DQ15 */
0000a8  e583201c          STR      r2,[r3,#0x1c]
;;;136        *((volatile uint32_t *) 0xC0302020U) = 0x28002800U;      /* pins DDR_DM0  and DDR_DM1 */
0000ac  e5832020          STR      r2,[r3,#0x20]
;;;137        *((volatile uint32_t *) 0xC0302034U) = 0x28002800U;      /* pins DDR_BA1  and DDR_A0 */
0000b0  e5832034          STR      r2,[r3,#0x34]
;;;138        *((volatile uint32_t *) 0xC0302038U) = 0x28002800U;      /* pins DDR_A1   and DDR_A2 */
0000b4  e5832038          STR      r2,[r3,#0x38]
;;;139        *((volatile uint32_t *) 0xC030203CU) = 0x28002800U;      /* pins DDR_A3   and DDR_A4 */
0000b8  e583203c          STR      r2,[r3,#0x3c]
;;;140        *((volatile uint32_t *) 0xC0302040U) = 0x28002800U;      /* pins DDR_A5   and DDR_A6 */
0000bc  e5832040          STR      r2,[r3,#0x40]
;;;141        *((volatile uint32_t *) 0xC0302044U) = 0x28002800U;      /* pins DDR_A7   and DDR_A8 */
0000c0  e5832044          STR      r2,[r3,#0x44]
;;;142        *((volatile uint32_t *) 0xC0302048U) = 0x28002800U;      /* pins DDR_A9   and DDR_A10 */
0000c4  e5832048          STR      r2,[r3,#0x48]
;;;143        *((volatile uint32_t *) 0xC030204CU) = 0x28002800U;      /* pins DDR_A11  and DDR_A12 */
0000c8  e583204c          STR      r2,[r3,#0x4c]
;;;144        *((volatile uint32_t *) 0xC0302050U) = 0x28002800U;      /* pins DDR_A13  and DDR_DQS0 */
0000cc  e5832050          STR      r2,[r3,#0x50]
;;;145        *((volatile uint32_t *) 0xC0302054U) = 0x00002800U;      /* pins DDR_DQS1 */
0000d0  e3022800          MOVW     r2,#0x2800
0000d4  e5832054          STR      r2,[r3,#0x54]
;;;146        *((volatile uint32_t *) 0xC0302060U) = 0x28002800U;      /* pins DDR_DQS2 and DDR_DQS3 */
0000d8  e1822802          ORR      r2,r2,r2,LSL #16
0000dc  e5832060          STR      r2,[r3,#0x60]
;;;147        *((volatile uint32_t *) 0xC0302064U) = 0x28002800U;      /* pins DDR_DM2  and DDR_DM3 */
0000e0  e5832064          STR      r2,[r3,#0x64]
;;;148        *((volatile uint32_t *) 0xC0302068U) = 0x28002800U;      /* pins DDR_DQ16 and DDR_DQ17 */
0000e4  e5832068          STR      r2,[r3,#0x68]
;;;149        *((volatile uint32_t *) 0xC030206CU) = 0x28002800U;      /* pins DDR_DQ18 and DDR_DQ19 */
0000e8  e583206c          STR      r2,[r3,#0x6c]
;;;150        *((volatile uint32_t *) 0xC0302070U) = 0x28002800U;      /* pins DDR_DQ20 and DDR_DQ21 */
0000ec  e5832070          STR      r2,[r3,#0x70]
;;;151        *((volatile uint32_t *) 0xC0302074U) = 0x28002800U;      /* pins DDR_DQ22 and DDR_DQ23 */
0000f0  e5832074          STR      r2,[r3,#0x74]
;;;152        *((volatile uint32_t *) 0xC0302078U) = 0x28002800U;      /* pins DDR_DQ24 and DDR_DQ25 */
0000f4  e5832078          STR      r2,[r3,#0x78]
;;;153        *((volatile uint32_t *) 0xC030207CU) = 0x28002800U;      /* pins DDR_DQ26 and DDR_DQ27 */
0000f8  e583207c          STR      r2,[r3,#0x7c]
;;;154        *((volatile uint32_t *) 0xC0302080U) = 0x28002800U;      /* pins DDR_DQ28 and DDR_DQ29 */
0000fc  e5832080          STR      r2,[r3,#0x80]
;;;155        *((volatile uint32_t *) 0xC0302084U) = 0x28002800U;      /* pins DDR_DQ30 and DDR_DQ31 */
000100  e5832084          STR      r2,[r3,#0x84]
;;;156    
;;;157        /* Memory Controller Initialization*/
;;;158        *((volatile uint32_t *) 0xC0D0104CU) = 0x000002D4U;      /* memory_cfg2 */
000104  e30022d4          MOVW     r2,#0x2d4
000108  e59f3130          LDR      r3,|L2.576|
00010c  e583204c          STR      r2,[r3,#0x4c]
;;;159    
;;;160        u32GearRatio = (pstDeviceParams->u32GearRatio_1 << (uint32_t)16U) + pstDeviceParams->u32GearRatio_0;
000110  e5902004          LDR      r2,[r0,#4]
000114  e1d030b8          LDRH     r3,[r0,#8]
000118  e0821803          ADD      r1,r2,r3,LSL #16
;;;161        *((volatile uint32_t *) 0xC0D01304U) = u32GearRatio;    /* user_config */
00011c  e59f211c          LDR      r2,|L2.576|
000120  e5821304          STR      r1,[r2,#0x304]
;;;162        u32GearRatio = (pstDeviceParams->u32GearRatio_3 << (uint32_t)16U) + pstDeviceParams->u32GearRatio_2;
000124  e590200c          LDR      r2,[r0,#0xc]
000128  e1d031b0          LDRH     r3,[r0,#0x10]
00012c  e0821803          ADD      r1,r2,r3,LSL #16
;;;163        if (pstDeviceParams->eType == DMC_TYPE_LPDDR )
000130  e5d02000          LDRB     r2,[r0,#0]
000134  e3520003          CMP      r2,#3
000138  1a000000          BNE      |L2.320|
;;;164        {
;;;165            u32GearRatio = u32GearRatio + (uint32_t)((uint32_t)0x7U << (uint32_t)12U);
00013c  e2811a07          ADD      r1,r1,#0x7000
                  |L2.320|
;;;166        }
;;;167        *((volatile uint32_t *) 0xC0D01308U) = u32GearRatio;              /* user_config1 */
000140  e59f20f8          LDR      r2,|L2.576|
000144  e5821308          STR      r1,[r2,#0x308]
;;;168        *((volatile uint32_t *) 0xC0D01014U) = pstDeviceParams->u32T_CAS; /* t_cas */
000148  e1a03002          MOV      r3,r2
00014c  e5902014          LDR      r2,[r0,#0x14]
000150  e5832014          STR      r2,[r3,#0x14]
;;;169        if (pstDeviceParams->eType == DMC_TYPE_LPDDR )
000154  e5d02000          LDRB     r2,[r0,#0]
000158  e3520003          CMP      r2,#3
00015c  1a000002          BNE      |L2.364|
;;;170        {
;;;171            *((volatile uint32_t *) 0xC0D01018U) = 0x00000001U;  /* dqss */
000160  e3a02001          MOV      r2,#1
000164  e5832018          STR      r2,[r3,#0x18]
000168  ea000002          B        |L2.376|
                  |L2.364|
;;;172        }
;;;173        else
;;;174        {
;;;175            *((volatile uint32_t *) 0xC0D01018U) = 0x00000000U;  /* dqss */
00016c  e3a02000          MOV      r2,#0
000170  e59f30c8          LDR      r3,|L2.576|
000174  e5832018          STR      r2,[r3,#0x18]
                  |L2.376|
;;;176        }
;;;177        *((volatile uint32_t *) 0xC0D0101CU) = pstDeviceParams->u32T_MRD;    /* t_mrd */
000178  e590201c          LDR      r2,[r0,#0x1c]
00017c  e59f30bc          LDR      r3,|L2.576|
000180  e583201c          STR      r2,[r3,#0x1c]
;;;178        *((volatile uint32_t *) 0xC0D01020U) = pstDeviceParams->u32T_RAS;    /* t_ras */
000184  e5902018          LDR      r2,[r0,#0x18]
000188  e5832020          STR      r2,[r3,#0x20]
;;;179        *((volatile uint32_t *) 0xC0D01024U) = pstDeviceParams->u32T_RC;     /* t_rc  */
00018c  e5902020          LDR      r2,[r0,#0x20]
000190  e5832024          STR      r2,[r3,#0x24]
;;;180        *((volatile uint32_t *) 0xC0D01028U) = pstDeviceParams->u32T_RCD;    /* t_rcd */
000194  e5902024          LDR      r2,[r0,#0x24]
000198  e5832028          STR      r2,[r3,#0x28]
;;;181        *((volatile uint32_t *) 0xC0D0102CU) = pstDeviceParams->u32T_RFC;    /* t_rfc */
00019c  e5902028          LDR      r2,[r0,#0x28]
0001a0  e583202c          STR      r2,[r3,#0x2c]
;;;182        *((volatile uint32_t *) 0xC0D01030U) = pstDeviceParams->u32T_RP;     /* t_rp  */
0001a4  e590202c          LDR      r2,[r0,#0x2c]
0001a8  e5832030          STR      r2,[r3,#0x30]
;;;183        *((volatile uint32_t *) 0xC0D01034U) = pstDeviceParams->u32T_RRD;    /* t_rrd */
0001ac  e5902030          LDR      r2,[r0,#0x30]
0001b0  e5832034          STR      r2,[r3,#0x34]
;;;184        *((volatile uint32_t *) 0xC0D01038U) = pstDeviceParams->u32T_WR;     /* t_wr  */
0001b4  e5902034          LDR      r2,[r0,#0x34]
0001b8  e5832038          STR      r2,[r3,#0x38]
;;;185        *((volatile uint32_t *) 0xC0D0103CU) = pstDeviceParams->u32T_WTR;    /* t_wtr */
0001bc  e5902038          LDR      r2,[r0,#0x38]
0001c0  e583203c          STR      r2,[r3,#0x3c]
;;;186        *((volatile uint32_t *) 0xC0D01040U) = pstDeviceParams->u32T_XP;     /* t_xp  */
0001c4  e590203c          LDR      r2,[r0,#0x3c]
0001c8  e5832040          STR      r2,[r3,#0x40]
;;;187        *((volatile uint32_t *) 0xC0D01044U) = pstDeviceParams->u32T_XSR;    /* t_xsr */
0001cc  e5902040          LDR      r2,[r0,#0x40]
0001d0  e5832044          STR      r2,[r3,#0x44]
;;;188        *((volatile uint32_t *) 0xC0D01048U) = pstDeviceParams->u32T_ESR;    /* t_esr */
0001d4  e5902044          LDR      r2,[r0,#0x44]
0001d8  e5832048          STR      r2,[r3,#0x48]
;;;189        *((volatile uint32_t *) 0xC0D01010U) = 0x000004B0U;       /* setrefresh_prd */
0001dc  e30024b0          MOVW     r2,#0x4b0
0001e0  e5832010          STR      r2,[r3,#0x10]
;;;190        *((volatile uint32_t *) 0xC0D01200U) = 0x0001003EU;       /* setchip_cfg    */
0001e4  e59f2058          LDR      r2,|L2.580|
0001e8  e5832200          STR      r2,[r3,#0x200]
;;;191    //#if (DMC_DEVICE_TYPE ==(DEV_MT46H16M32LFB5))
;;;192     //   *((volatile uint32_t *) 0xC0D0100CU) = 0x000C8011U;       /* setmemory_cfg  8012 */ 
;;;193    //#else
;;;194        *((volatile uint32_t *) 0xC0D0100CU) = 0x000C8009U;       /* setmemory_cfg   */ 
0001ec  e59f2054          LDR      r2,|L2.584|
0001f0  e583200c          STR      r2,[r3,#0xc]
;;;195    //#endif
;;;196        
;;;197        /* memory device initialisation */
;;;198        *((volatile uint32_t *) 0xC0D01008U) = 0x000C0000U;      /* NOP */
0001f4  e3a02703          MOV      r2,#0xc0000
0001f8  e5832008          STR      r2,[r3,#8]
;;;199        *((volatile uint32_t *) 0xC0D01008U) = 0x00000000U;      /* PRECHARGEALL */
0001fc  e3a02000          MOV      r2,#0
000200  e5832008          STR      r2,[r3,#8]
;;;200        *((volatile uint32_t *) 0xC0D01008U) = 0x00040000U;      /* AUTOREFRESH */
000204  e3a02701          MOV      r2,#0x40000
000208  e5832008          STR      r2,[r3,#8]
;;;201        *((volatile uint32_t *) 0xC0D01008U) = 0x00040000U;      /* AUTOREFRESH */
00020c  e5832008          STR      r2,[r3,#8]
;;;202        *((volatile uint32_t *) 0xC0D01008U) = 0x00080031U;      /* Configure Mode Registers */
000210  e59f2034          LDR      r2,|L2.588|
000214  e5832008          STR      r2,[r3,#8]
;;;203        *((volatile uint32_t *) 0xC0D01008U) = 0x000A0020U;      /* Configure Extended Mode Registers */
000218  e59f2030          LDR      r2,|L2.592|
00021c  e5832008          STR      r2,[r3,#8]
;;;204    
;;;205        *((volatile uint32_t *) 0xc0d01004U) = 0x00000000U;      /* go */
000220  e3a02000          MOV      r2,#0
000224  e5832004          STR      r2,[r3,#4]
;;;206    }
000228  e12fff1e          BX       lr
;;;207    
                          ENDP

                  |L2.556|
                          DCD      0xa5c0f17b
                  |L2.560|
                          DCD      0x001d3fc8
                  |L2.564|
                          DCD      0x041e1e1e
                  |L2.568|
                          DCD      0xc0302000
                  |L2.572|
                          DCD      0x28002800
                  |L2.576|
                          DCD      0xc0d01000
                  |L2.580|
                          DCD      0x0001003e
                  |L2.584|
                          DCD      0x000c8009
                  |L2.588|
                          DCD      0x00080031
                  |L2.592|
                          DCD      0x000a0020

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_DMC_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e323020          DCB      0x2e,0x32,0x30,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_DMC_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_DMC_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313420          DCB      0x2e,0x31,0x34,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_DMC_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_DMC_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313020          DCB      0x2e,0x31,0x30,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_DMC_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
