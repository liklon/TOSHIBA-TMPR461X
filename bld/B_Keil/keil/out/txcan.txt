; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\txcan.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\txcan.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\txcan.crf ..\..\..\..\lldd\src\txcan.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTXCAN_GetVersion PROC
;;;85     
;;;86     void vTXCAN_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;87                            uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;88                            uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;89     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;90        *pau8ModuleRevision = &au8LLDD_TXCAN_C_REVISION[0];
000008  e59f6dd8          LDR      r6,|L1.3560|
00000c  e5806000          STR      r6,[r0,#0]
;;;91        *pau8ModuleTag      = &au8LLDD_TXCAN_C_TAG[0];
000010  e59f6dd4          LDR      r6,|L1.3564|
000014  e5816000          STR      r6,[r1,#0]
;;;92        *pau8HeaderRevision = &au8LLDD_TXCAN_H_REVISION[0];
000018  e59f6dd0          LDR      r6,|L1.3568|
00001c  e5826000          STR      r6,[r2,#0]
;;;93        *pau8HeaderTag      = &au8LLDD_TXCAN_H_TAG[0];
000020  e59f6dcc          LDR      r6,|L1.3572|
000024  e5836000          STR      r6,[r3,#0]
;;;94        *pau8IORevision     = &au8LLDD_TXCAN_IO_H_REVISION[0];
000028  e59f6dc8          LDR      r6,|L1.3576|
00002c  e5846000          STR      r6,[r4,#0]
;;;95        *pau8IOTag          = &au8LLDD_TXCAN_IO_H_TAG[0];
000030  e59f6dc4          LDR      r6,|L1.3580|
000034  e5856000          STR      r6,[r5,#0]
;;;96     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;97     
                          ENDP

                  vTXCAN_SetDatalength PROC
;;;99     
;;;100    void vTXCAN_SetDatalength(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Length)
00003c  e92d4010          PUSH     {r4,lr}
;;;101    {
;;;102        vSetFTS_MBn_DLC(eCh, eMB, (u8Length & 0x0F));
000040  e59f3db8          LDR      r3,|L1.3584|
000044  e0833000          ADD      r3,r3,r0
000048  e7933281          LDR      r3,[r3,r1,LSL #5]
00004c  e7c33012          BFI      r3,r2,#0,#4
000050  e59f4da8          LDR      r4,|L1.3584|
000054  e0844000          ADD      r4,r4,r0
000058  e7843281          STR      r3,[r4,r1,LSL #5]
;;;103    }
00005c  e8bd8010          POP      {r4,pc}
;;;104    
                          ENDP

                  vTXCAN_GetDatalength PROC
;;;106    
;;;107    uint8_t vTXCAN_GetDatalength(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000060  e1a02000          MOV      r2,r0
;;;108    {
;;;109        return biGetFTS_MBn_DLC(eCh, eMB);
000064  e59f0d94          LDR      r0,|L1.3584|
000068  e0800002          ADD      r0,r0,r2
00006c  e7900281          LDR      r0,[r0,r1,LSL #5]
000070  e200000f          AND      r0,r0,#0xf
;;;110    }
000074  e12fff1e          BX       lr
;;;111    
                          ENDP

                  vTXCAN_SetRemoteFrameTransmissionRequest PROC
;;;113    
;;;114    void vTXCAN_SetRemoteFrameTransmissionRequest(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_RemoteFrameTransmissionRequest_e eRTR)
000078  e92d4010          PUSH     {r4,lr}
;;;115    {
;;;116        vSetFTS_MBn_RTR(eCh, eMB, (eRTR & 0x01));
00007c  e59f3d7c          LDR      r3,|L1.3584|
000080  e0833000          ADD      r3,r3,r0
000084  e7933281          LDR      r3,[r3,r1,LSL #5]
000088  e7c43212          BFI      r3,r2,#4,#1
00008c  e59f4d6c          LDR      r4,|L1.3584|
000090  e0844000          ADD      r4,r4,r0
000094  e7843281          STR      r3,[r4,r1,LSL #5]
;;;117    }
000098  e8bd8010          POP      {r4,pc}
;;;118    
                          ENDP

                  eTXCAN_GetRemoteFrameTransmissionRequest PROC
;;;120    
;;;121    TXCAN_RemoteFrameTransmissionRequest_e eTXCAN_GetRemoteFrameTransmissionRequest(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00009c  e1a02000          MOV      r2,r0
;;;122    {
;;;123        return (TXCAN_RemoteFrameTransmissionRequest_e)biGetFTS_MBn_RTR(eCh, eMB);
0000a0  e59f0d58          LDR      r0,|L1.3584|
0000a4  e0800002          ADD      r0,r0,r2
0000a8  e7900281          LDR      r0,[r0,r1,LSL #5]
0000ac  e7e00250          UBFX     r0,r0,#4,#1
;;;124    }
0000b0  e12fff1e          BX       lr
;;;125    
                          ENDP

                  vTXCAN_SetTimeStampCounterValue PROC
;;;127    
;;;128    void vTXCAN_SetTimeStampCounterValue(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint16_t u16TSV)
0000b4  e92d4010          PUSH     {r4,lr}
;;;129    {
;;;130        vSetFTS_MBn_TSV(eCh, eMB, (u16TSV & 0x0FFFF));
0000b8  e59f3d40          LDR      r3,|L1.3584|
0000bc  e0833000          ADD      r3,r3,r0
0000c0  e7933281          LDR      r3,[r3,r1,LSL #5]
0000c4  e7df3812          BFI      r3,r2,#16,#16
0000c8  e59f4d30          LDR      r4,|L1.3584|
0000cc  e0844000          ADD      r4,r4,r0
0000d0  e7843281          STR      r3,[r4,r1,LSL #5]
;;;131    }
0000d4  e8bd8010          POP      {r4,pc}
;;;132    
                          ENDP

                  u16TXCAN_GetTimeStampCounterValue PROC
;;;134    
;;;135    uint16_t u16TXCAN_GetTimeStampCounterValue(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0000d8  e1a02000          MOV      r2,r0
;;;136    {
;;;137        return biGetFTS_MBn_TSV(eCh, eMB);
0000dc  e59f0d1c          LDR      r0,|L1.3584|
0000e0  e0800002          ADD      r0,r0,r2
0000e4  e7900281          LDR      r0,[r0,r1,LSL #5]
0000e8  e1a00820          LSR      r0,r0,#16
;;;138    }
0000ec  e12fff1e          BX       lr
;;;139    
                          ENDP

                  vTXCAN_SetExtID PROC
;;;141    
;;;142    void vTXCAN_SetExtID(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint16_t u16ID)
0000f0  e92d4010          PUSH     {r4,lr}
;;;143    {
0000f4  e1a03002          MOV      r3,r2
;;;144        vSetID_MBn_EXT_ID(eCh, eMB, (u16ID & 0x01FFFF));
0000f8  e7df389f          BFC      r3,#17,#15
0000fc  e24045ff          SUB      r4,r0,#0x3fc00000
000100  e7944281          LDR      r4,[r4,r1,LSL #5]
000104  e7d14013          BFI      r4,r3,#0,#18
000108  e24035ff          SUB      r3,r0,#0x3fc00000
00010c  e7834281          STR      r4,[r3,r1,LSL #5]
;;;145    }
000110  e8bd8010          POP      {r4,pc}
;;;146    
                          ENDP

                  u32TXCAN_GetExtID PROC
;;;148    
;;;149    uint32_t u32TXCAN_GetExtID(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000114  e1a02000          MOV      r2,r0
;;;150    {
;;;151        return biGetID_MBn_EXT_ID(eCh, eMB);
000118  e24205ff          SUB      r0,r2,#0x3fc00000
00011c  e7900281          LDR      r0,[r0,r1,LSL #5]
000120  e7df091f          BFC      r0,#18,#14
;;;152    }
000124  e12fff1e          BX       lr
;;;153    
                          ENDP

                  vTXCAN_SetStdID PROC
;;;155    
;;;156    void vTXCAN_SetStdID(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint16_t u16ID)
000128  e92d4010          PUSH     {r4,lr}
;;;157    {
00012c  e1a03002          MOV      r3,r2
;;;158        vSetID_MBn_STD_ID(eCh, eMB, (u16ID & 0x07FF));
000130  e7df359f          BFC      r3,#11,#21
000134  e24045ff          SUB      r4,r0,#0x3fc00000
000138  e7944281          LDR      r4,[r4,r1,LSL #5]
00013c  e7dc4913          BFI      r4,r3,#18,#11
000140  e24035ff          SUB      r3,r0,#0x3fc00000
000144  e7834281          STR      r4,[r3,r1,LSL #5]
;;;159    }
000148  e8bd8010          POP      {r4,pc}
;;;160    
                          ENDP

                  u16TXCAN_GetStdID PROC
;;;162    
;;;163    uint16_t u16TXCAN_GetStdID(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00014c  e1a02000          MOV      r2,r0
;;;164    {
;;;165        return biGetID_MBn_STD_ID(eCh, eMB);
000150  e24205ff          SUB      r0,r2,#0x3fc00000
000154  e7900281          LDR      r0,[r0,r1,LSL #5]
000158  e7ea0950          UBFX     r0,r0,#18,#11
;;;166    }
00015c  e12fff1e          BX       lr
;;;167    
                          ENDP

                  vTXCAN_SetRemoteFrameHandling PROC
;;;169    
;;;170    void vTXCAN_SetRemoteFrameHandling(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_RemoteFrameHandling_e eRFH)
000160  e92d4010          PUSH     {r4,lr}
;;;171    {
;;;172        vSetID_MBn_RFH(eCh, eMB, (eRFH & 0x01));
000164  e24035ff          SUB      r3,r0,#0x3fc00000
000168  e7933281          LDR      r3,[r3,r1,LSL #5]
00016c  e7dd3e92          BFI      r3,r2,#29,#1
000170  e24045ff          SUB      r4,r0,#0x3fc00000
000174  e7843281          STR      r3,[r4,r1,LSL #5]
;;;173    }
000178  e8bd8010          POP      {r4,pc}
;;;174    
                          ENDP

                  eTXCAN_GetRemoteFrameHandling PROC
;;;176    
;;;177    TXCAN_RemoteFrameHandling_e eTXCAN_GetRemoteFrameHandling(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00017c  e1a02000          MOV      r2,r0
;;;178    {
;;;179        return (TXCAN_RemoteFrameHandling_e)biGetID_MBn_RFH(eCh, eMB);
000180  e24205ff          SUB      r0,r2,#0x3fc00000
000184  e7900281          LDR      r0,[r0,r1,LSL #5]
000188  e7e00ed0          UBFX     r0,r0,#29,#1
;;;180    }
00018c  e12fff1e          BX       lr
;;;181    
                          ENDP

                  vTXCAN_SetGlobalAcceptanceMask PROC
;;;183    
;;;184    void vTXCAN_SetGlobalAcceptanceMask(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_GlobalAcceptanceMask_e eGAME)
000190  e92d4010          PUSH     {r4,lr}
;;;185    {
;;;186        vSetID_MBn_GAME(eCh, eMB, (eGAME & 0x01));
000194  e24035ff          SUB      r3,r0,#0x3fc00000
000198  e7933281          LDR      r3,[r3,r1,LSL #5]
00019c  e7de3f12          BFI      r3,r2,#30,#1
0001a0  e24045ff          SUB      r4,r0,#0x3fc00000
0001a4  e7843281          STR      r3,[r4,r1,LSL #5]
;;;187    }
0001a8  e8bd8010          POP      {r4,pc}
;;;188    
                          ENDP

                  eTXCAN_GetGlobalAcceptanceMask PROC
;;;190    
;;;191    TXCAN_GlobalAcceptanceMask_e eTXCAN_GetGlobalAcceptanceMask(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0001ac  e1a02000          MOV      r2,r0
;;;192    {
;;;193        return (TXCAN_GlobalAcceptanceMask_e)biGetID_MBn_GAME(eCh, eMB);
0001b0  e24205ff          SUB      r0,r2,#0x3fc00000
0001b4  e7900281          LDR      r0,[r0,r1,LSL #5]
0001b8  e7e00f50          UBFX     r0,r0,#30,#1
;;;194    }
0001bc  e12fff1e          BX       lr
;;;195    
                          ENDP

                  vTXCAN_SetFrameType PROC
;;;197    
;;;198    void vTXCAN_SetFrameType(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_FrameType_e eIDE)
0001c0  e92d4010          PUSH     {r4,lr}
;;;199    {
;;;200        vSetID_MBn_IDE(eCh, eMB, (eIDE & 0x01));
0001c4  e24035ff          SUB      r3,r0,#0x3fc00000
0001c8  e7933281          LDR      r3,[r3,r1,LSL #5]
0001cc  e7df3f92          BFI      r3,r2,#31,#1
0001d0  e24045ff          SUB      r4,r0,#0x3fc00000
0001d4  e7843281          STR      r3,[r4,r1,LSL #5]
;;;201    }
0001d8  e8bd8010          POP      {r4,pc}
;;;202    
                          ENDP

                  eTXCAN_GetFrameType PROC
;;;204    
;;;205    TXCAN_FrameType_e eTXCAN_GetFrameType(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0001dc  e1a02000          MOV      r2,r0
;;;206    {
;;;207        return (TXCAN_FrameType_e)biGetID_MBn_IDE(eCh, eMB);
0001e0  e24205ff          SUB      r0,r2,#0x3fc00000
0001e4  e7900281          LDR      r0,[r0,r1,LSL #5]
0001e8  e1a00fa0          LSR      r0,r0,#31
;;;208    }
0001ec  e12fff1e          BX       lr
;;;209    
                          ENDP

                  vTXCAN_WriteMailboxD0 PROC
;;;211    
;;;212    void vTXCAN_WriteMailboxD0(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
0001f0  e92d4010          PUSH     {r4,lr}
;;;213    {
;;;214        vSetDATL_MBn_D0(eCh, eMB, u8Data);
0001f4  e59f3c08          LDR      r3,|L1.3588|
0001f8  e0833000          ADD      r3,r3,r0
0001fc  e7933281          LDR      r3,[r3,r1,LSL #5]
000200  e7c73012          BFI      r3,r2,#0,#8
000204  e59f4bf8          LDR      r4,|L1.3588|
000208  e0844000          ADD      r4,r4,r0
00020c  e7843281          STR      r3,[r4,r1,LSL #5]
;;;215    }
000210  e8bd8010          POP      {r4,pc}
;;;216    
                          ENDP

                  u8TXCAN_ReadMailboxD0 PROC
;;;218    
;;;219    uint8_t u8TXCAN_ReadMailboxD0(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000214  e1a02000          MOV      r2,r0
;;;220    {
;;;221        return biGetDATL_MBn_D0(eCh, eMB);
000218  e59f0be4          LDR      r0,|L1.3588|
00021c  e0800002          ADD      r0,r0,r2
000220  e7900281          LDR      r0,[r0,r1,LSL #5]
000224  e20000ff          AND      r0,r0,#0xff
;;;222    }
000228  e12fff1e          BX       lr
;;;223    
                          ENDP

                  vTXCAN_WriteMailboxD1 PROC
;;;225    
;;;226    void vTXCAN_WriteMailboxD1(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
00022c  e92d4010          PUSH     {r4,lr}
;;;227    {
;;;228        vSetDATL_MBn_D1(eCh, eMB, u8Data);
000230  e59f3bcc          LDR      r3,|L1.3588|
000234  e0833000          ADD      r3,r3,r0
000238  e7933281          LDR      r3,[r3,r1,LSL #5]
00023c  e7cf3412          BFI      r3,r2,#8,#8
000240  e59f4bbc          LDR      r4,|L1.3588|
000244  e0844000          ADD      r4,r4,r0
000248  e7843281          STR      r3,[r4,r1,LSL #5]
;;;229    }
00024c  e8bd8010          POP      {r4,pc}
;;;230    
                          ENDP

                  u8TXCAN_ReadMailboxD1 PROC
;;;232    
;;;233    uint8_t u8TXCAN_ReadMailboxD1(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000250  e1a02000          MOV      r2,r0
;;;234    {
;;;235        return biGetDATL_MBn_D1(eCh, eMB);
000254  e59f0ba8          LDR      r0,|L1.3588|
000258  e0800002          ADD      r0,r0,r2
00025c  e7900281          LDR      r0,[r0,r1,LSL #5]
000260  e7e70450          UBFX     r0,r0,#8,#8
;;;236    }
000264  e12fff1e          BX       lr
;;;237    
                          ENDP

                  vTXCAN_WriteMailboxD2 PROC
;;;239    
;;;240    void vTXCAN_WriteMailboxD2(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
000268  e92d4010          PUSH     {r4,lr}
;;;241    {
;;;242        vSetDATL_MBn_D2(eCh, eMB, u8Data);
00026c  e59f3b90          LDR      r3,|L1.3588|
000270  e0833000          ADD      r3,r3,r0
000274  e7933281          LDR      r3,[r3,r1,LSL #5]
000278  e7d73812          BFI      r3,r2,#16,#8
00027c  e59f4b80          LDR      r4,|L1.3588|
000280  e0844000          ADD      r4,r4,r0
000284  e7843281          STR      r3,[r4,r1,LSL #5]
;;;243    }
000288  e8bd8010          POP      {r4,pc}
;;;244    
                          ENDP

                  u8TXCAN_ReadMailboxD2 PROC
;;;246    
;;;247    uint8_t u8TXCAN_ReadMailboxD2(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00028c  e1a02000          MOV      r2,r0
;;;248    {
;;;249        return biGetDATL_MBn_D2(eCh, eMB);
000290  e59f0b6c          LDR      r0,|L1.3588|
000294  e0800002          ADD      r0,r0,r2
000298  e7900281          LDR      r0,[r0,r1,LSL #5]
00029c  e7e70850          UBFX     r0,r0,#16,#8
;;;250    }
0002a0  e12fff1e          BX       lr
;;;251    
                          ENDP

                  vTXCAN_WriteMailboxD3 PROC
;;;253    
;;;254    void vTXCAN_WriteMailboxD3(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
0002a4  e92d4010          PUSH     {r4,lr}
;;;255    {
;;;256        vSetDATL_MBn_D3(eCh, eMB, u8Data);
0002a8  e59f3b54          LDR      r3,|L1.3588|
0002ac  e0833000          ADD      r3,r3,r0
0002b0  e7933281          LDR      r3,[r3,r1,LSL #5]
0002b4  e7df3c12          BFI      r3,r2,#24,#8
0002b8  e59f4b44          LDR      r4,|L1.3588|
0002bc  e0844000          ADD      r4,r4,r0
0002c0  e7843281          STR      r3,[r4,r1,LSL #5]
;;;257    }
0002c4  e8bd8010          POP      {r4,pc}
;;;258    
                          ENDP

                  u8TXCAN_ReadMailboxD3 PROC
;;;260    
;;;261    uint8_t u8TXCAN_ReadMailboxD3(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0002c8  e1a02000          MOV      r2,r0
;;;262    {
;;;263        return biGetDATL_MBn_D3(eCh, eMB);
0002cc  e59f0b30          LDR      r0,|L1.3588|
0002d0  e0800002          ADD      r0,r0,r2
0002d4  e7900281          LDR      r0,[r0,r1,LSL #5]
0002d8  e1a00c20          LSR      r0,r0,#24
;;;264    }
0002dc  e12fff1e          BX       lr
;;;265    
                          ENDP

                  vTXCAN_WriteMailboxD4 PROC
;;;267    
;;;268    void vTXCAN_WriteMailboxD4(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
0002e0  e92d4010          PUSH     {r4,lr}
;;;269    {
;;;270        vSetDATH_MBn_D4(eCh, eMB, u8Data);
0002e4  e59f3b1c          LDR      r3,|L1.3592|
0002e8  e0833000          ADD      r3,r3,r0
0002ec  e7933281          LDR      r3,[r3,r1,LSL #5]
0002f0  e7c73012          BFI      r3,r2,#0,#8
0002f4  e59f4b0c          LDR      r4,|L1.3592|
0002f8  e0844000          ADD      r4,r4,r0
0002fc  e7843281          STR      r3,[r4,r1,LSL #5]
;;;271    }
000300  e8bd8010          POP      {r4,pc}
;;;272    
                          ENDP

                  u8TXCAN_ReadMailboxD4 PROC
;;;274    
;;;275    uint8_t u8TXCAN_ReadMailboxD4(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000304  e1a02000          MOV      r2,r0
;;;276    {
;;;277        return biGetDATH_MBn_D4(eCh, eMB);
000308  e59f0af8          LDR      r0,|L1.3592|
00030c  e0800002          ADD      r0,r0,r2
000310  e7900281          LDR      r0,[r0,r1,LSL #5]
000314  e20000ff          AND      r0,r0,#0xff
;;;278    }
000318  e12fff1e          BX       lr
;;;279    
                          ENDP

                  vTXCAN_WriteMailboxD5 PROC
;;;281    
;;;282    void vTXCAN_WriteMailboxD5(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
00031c  e92d4010          PUSH     {r4,lr}
;;;283    {
;;;284        vSetDATH_MBn_D5(eCh, eMB, u8Data);
000320  e59f3ae0          LDR      r3,|L1.3592|
000324  e0833000          ADD      r3,r3,r0
000328  e7933281          LDR      r3,[r3,r1,LSL #5]
00032c  e7cf3412          BFI      r3,r2,#8,#8
000330  e59f4ad0          LDR      r4,|L1.3592|
000334  e0844000          ADD      r4,r4,r0
000338  e7843281          STR      r3,[r4,r1,LSL #5]
;;;285    }
00033c  e8bd8010          POP      {r4,pc}
;;;286    
                          ENDP

                  u8TXCAN_ReadMailboxD5 PROC
;;;288    
;;;289    uint8_t u8TXCAN_ReadMailboxD5(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000340  e1a02000          MOV      r2,r0
;;;290    {
;;;291        return biGetDATH_MBn_D5(eCh, eMB);
000344  e59f0abc          LDR      r0,|L1.3592|
000348  e0800002          ADD      r0,r0,r2
00034c  e7900281          LDR      r0,[r0,r1,LSL #5]
000350  e7e70450          UBFX     r0,r0,#8,#8
;;;292    }
000354  e12fff1e          BX       lr
;;;293    
                          ENDP

                  vTXCAN_WriteMailboxD6 PROC
;;;295    
;;;296    void vTXCAN_WriteMailboxD6(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
000358  e92d4010          PUSH     {r4,lr}
;;;297    {
;;;298        vSetDATH_MBn_D6(eCh, eMB, u8Data);
00035c  e59f3aa4          LDR      r3,|L1.3592|
000360  e0833000          ADD      r3,r3,r0
000364  e7933281          LDR      r3,[r3,r1,LSL #5]
000368  e7d73812          BFI      r3,r2,#16,#8
00036c  e59f4a94          LDR      r4,|L1.3592|
000370  e0844000          ADD      r4,r4,r0
000374  e7843281          STR      r3,[r4,r1,LSL #5]
;;;299    }
000378  e8bd8010          POP      {r4,pc}
;;;300    
                          ENDP

                  u8TXCAN_ReadMailboxD6 PROC
;;;302    
;;;303    uint8_t u8TXCAN_ReadMailboxD6(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00037c  e1a02000          MOV      r2,r0
;;;304    {
;;;305        return biGetDATH_MBn_D6(eCh, eMB);
000380  e59f0a80          LDR      r0,|L1.3592|
000384  e0800002          ADD      r0,r0,r2
000388  e7900281          LDR      r0,[r0,r1,LSL #5]
00038c  e7e70850          UBFX     r0,r0,#16,#8
;;;306    }
000390  e12fff1e          BX       lr
;;;307    
                          ENDP

                  vTXCAN_WriteMailboxD7 PROC
;;;309    
;;;310    void vTXCAN_WriteMailboxD7(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint8_t u8Data)
000394  e92d4010          PUSH     {r4,lr}
;;;311    {
;;;312        vSetDATH_MBn_D7(eCh, eMB, u8Data);
000398  e59f3a68          LDR      r3,|L1.3592|
00039c  e0833000          ADD      r3,r3,r0
0003a0  e7933281          LDR      r3,[r3,r1,LSL #5]
0003a4  e7df3c12          BFI      r3,r2,#24,#8
0003a8  e59f4a58          LDR      r4,|L1.3592|
0003ac  e0844000          ADD      r4,r4,r0
0003b0  e7843281          STR      r3,[r4,r1,LSL #5]
;;;313    }
0003b4  e8bd8010          POP      {r4,pc}
;;;314    
                          ENDP

                  u8TXCAN_ReadMailboxD7 PROC
;;;316    
;;;317    uint8_t u8TXCAN_ReadMailboxD7(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0003b8  e1a02000          MOV      r2,r0
;;;318    {
;;;319        return biGetDATH_MBn_D7(eCh, eMB);
0003bc  e59f0a44          LDR      r0,|L1.3592|
0003c0  e0800002          ADD      r0,r0,r2
0003c4  e7900281          LDR      r0,[r0,r1,LSL #5]
0003c8  e1a00c20          LSR      r0,r0,#24
;;;320    }
0003cc  e12fff1e          BX       lr
;;;321    
                          ENDP

                  vTXCAN_WriteMailboxLow PROC
;;;323    
;;;324    void vTXCAN_WriteMailboxLow(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint32_t u32Data)
0003d0  e59f3a2c          LDR      r3,|L1.3588|
;;;325    {
;;;326        vSetDATL_MBn(eCh, eMB, u32Data);
0003d4  e0833000          ADD      r3,r3,r0
0003d8  e7832281          STR      r2,[r3,r1,LSL #5]
;;;327    }
0003dc  e12fff1e          BX       lr
;;;328    
                          ENDP

                  u32TXCAN_ReadMailboxLow PROC
;;;330    
;;;331    uint32_t u32TXCAN_ReadMailboxLow(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0003e0  e1a02000          MOV      r2,r0
;;;332    {
;;;333        return u32GetDATL_MBn(eCh, eMB);
0003e4  e59f0a18          LDR      r0,|L1.3588|
0003e8  e0800002          ADD      r0,r0,r2
0003ec  e7900281          LDR      r0,[r0,r1,LSL #5]
;;;334    }
0003f0  e12fff1e          BX       lr
;;;335    
                          ENDP

                  vTXCAN_WriteMailboxHigh PROC
;;;337    
;;;338    void vTXCAN_WriteMailboxHigh(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint32_t u32Data)
0003f4  e59f3a0c          LDR      r3,|L1.3592|
;;;339    {
;;;340        vSetDATH_MBn(eCh, eMB, u32Data);
0003f8  e0833000          ADD      r3,r3,r0
0003fc  e7832281          STR      r2,[r3,r1,LSL #5]
;;;341    }
000400  e12fff1e          BX       lr
;;;342    
                          ENDP

                  u32TXCAN_ReadMailboxHigh PROC
;;;344    
;;;345    uint32_t u32TXCAN_ReadMailboxHigh(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000404  e1a02000          MOV      r2,r0
;;;346    {
;;;347        return u32GetDATH_MBn(eCh, eMB);
000408  e59f09f8          LDR      r0,|L1.3592|
00040c  e0800002          ADD      r0,r0,r2
000410  e7900281          LDR      r0,[r0,r1,LSL #5]
;;;348    }
000414  e12fff1e          BX       lr
;;;349    
                          ENDP

                  vTXCAN_WriteMailbox PROC
;;;351    
;;;352    void vTXCAN_WriteMailbox(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint64_t u64Data)
000418  e92d4030          PUSH     {r4,r5,lr}
;;;353    {
;;;354        vSetDATL_MBn(eCh, eMB, (u64Data & 0xFFFFFFFF));
00041c  e59f59e0          LDR      r5,|L1.3588|
000420  e0855000          ADD      r5,r5,r0
000424  e7852281          STR      r2,[r5,r1,LSL #5]
;;;355        vSetDATH_MBn(eCh, eMB, ((u64Data >> 32) & 0xFFFFFFFF));
000428  e59f59d8          LDR      r5,|L1.3592|
00042c  e0855000          ADD      r5,r5,r0
000430  e7853281          STR      r3,[r5,r1,LSL #5]
;;;356    }
000434  e8bd8030          POP      {r4,r5,pc}
;;;357    
                          ENDP

                  u64TXCAN_ReadMailbox PROC
;;;359    
;;;360    uint64_t u64TXCAN_ReadMailbox(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000438  e92d40f0          PUSH     {r4-r7,lr}
;;;361    {
00043c  e1a05000          MOV      r5,r0
000440  e1a02001          MOV      r2,r1
;;;362        uint64_t u64Value;
;;;363        
;;;364        u64Value = u32GetDATH_MBn(eCh, eMB);
000444  e59f09bc          LDR      r0,|L1.3592|
000448  e0800005          ADD      r0,r0,r5
00044c  e7903282          LDR      r3,[r0,r2,LSL #5]
000450  e1a04003          MOV      r4,r3
;;;365        u64Value = u64Value << 32;
000454  e3a03000          MOV      r3,#0
;;;366        u64Value = u64Value + u32GetDATL_MBn(eCh, eMB);
000458  e59f09a4          LDR      r0,|L1.3588|
00045c  e0800005          ADD      r0,r0,r5
000460  e7900282          LDR      r0,[r0,r2,LSL #5]
000464  e0933000          ADDS     r3,r3,r0
000468  e2a44000          ADC      r4,r4,#0
;;;367    
;;;368        return u64Value;
00046c  e1a00003          MOV      r0,r3
000470  e1a01004          MOV      r1,r4
;;;369    }
000474  e8bd80f0          POP      {r4-r7,pc}
;;;370    
                          ENDP

                  vTXCAN_MailboxEnableAll PROC
;;;372    
;;;373    void vTXCAN_MailboxEnableAll(TXCAN_CH_e eCh)
000478  e30f1fff          MOV      r1,#0xffff
;;;374    {
;;;375        vSetMC(eCh, 0xFFFF);
00047c  e24025ff          SUB      r2,r0,#0x3fc00000
000480  e5821400          STR      r1,[r2,#0x400]
;;;376    }
000484  e12fff1e          BX       lr
;;;377    
                          ENDP

                  vTXCAN_MailboxDisableAll PROC
;;;379    
;;;380    void vTXCAN_MailboxDisableAll(TXCAN_CH_e eCh)
000488  e3a01000          MOV      r1,#0
;;;381    {
;;;382        vSetMC(eCh, 0x0);
00048c  e24025ff          SUB      r2,r0,#0x3fc00000
000490  e5821400          STR      r1,[r2,#0x400]
;;;383    }
000494  e12fff1e          BX       lr
;;;384    
                          ENDP

                  vTXCAN_MailboxEnable PROC
;;;386    
;;;387    void vTXCAN_MailboxEnable(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000498  e92d4010          PUSH     {r4,lr}
;;;388    {
;;;389        uint32_t u32Value;
;;;390    
;;;391        u32Value = u32GetMC(eCh) | u32MBOne[eMB];
00049c  e24035ff          SUB      r3,r0,#0x3fc00000
0004a0  e5933400          LDR      r3,[r3,#0x400]
0004a4  e59f4960          LDR      r4,|L1.3596|
0004a8  e7944101          LDR      r4,[r4,r1,LSL #2]
0004ac  e1832004          ORR      r2,r3,r4
;;;392        vSetMC(eCh, u32Value);
0004b0  e24035ff          SUB      r3,r0,#0x3fc00000
0004b4  e5832400          STR      r2,[r3,#0x400]
;;;393    }
0004b8  e8bd8010          POP      {r4,pc}
;;;394    
                          ENDP

                  vTXCAN_MailboxDisable PROC
;;;396    
;;;397    void vTXCAN_MailboxDisable(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0004bc  e92d4010          PUSH     {r4,lr}
;;;398    {
;;;399        uint32_t u32Value;
;;;400    
;;;401        u32Value = u32GetMC(eCh) & ~u32MBOne[eMB];
0004c0  e24035ff          SUB      r3,r0,#0x3fc00000
0004c4  e5933400          LDR      r3,[r3,#0x400]
0004c8  e59f493c          LDR      r4,|L1.3596|
0004cc  e7944101          LDR      r4,[r4,r1,LSL #2]
0004d0  e1c32004          BIC      r2,r3,r4
;;;402        vSetMC(eCh, u32Value);
0004d4  e24035ff          SUB      r3,r0,#0x3fc00000
0004d8  e5832400          STR      r2,[r3,#0x400]
;;;403    }
0004dc  e8bd8010          POP      {r4,pc}
;;;404    
                          ENDP

                  vTXCAN_SetMailboxDirectionAll PROC
;;;406    
;;;407    void vTXCAN_SetMailboxDirectionAll(TXCAN_CH_e eCh, uint32_t u32DirectionCode)
0004e0  e24025ff          SUB      r2,r0,#0x3fc00000
;;;408    {
;;;409        vSetMD(eCh, u32DirectionCode);
0004e4  e5821408          STR      r1,[r2,#0x408]
;;;410    }
0004e8  e12fff1e          BX       lr
;;;411    
                          ENDP

                  u32TXCAN_GetMailboxDirectionAll PROC
;;;413    
;;;414    uint32_t u32TXCAN_GetMailboxDirectionAll(TXCAN_CH_e eCh)
0004ec  e1a01000          MOV      r1,r0
;;;415    {
;;;416        return u32GetMD(eCh);
0004f0  e24105ff          SUB      r0,r1,#0x3fc00000
0004f4  e5900408          LDR      r0,[r0,#0x408]
;;;417    }
0004f8  e12fff1e          BX       lr
;;;418    
                          ENDP

                  vTXCAN_SetMailboxDirection PROC
;;;420    
;;;421    void vTXCAN_SetMailboxDirection(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_MailboxDiretion_e eDirection)
0004fc  e92d4030          PUSH     {r4,r5,lr}
;;;422    {
;;;423        uint32_t u32Value;
;;;424    
;;;425        u32Value = u32GetMD(eCh) & ~u32MBOne[eMB];
000500  e24045ff          SUB      r4,r0,#0x3fc00000
000504  e5944408          LDR      r4,[r4,#0x408]
000508  e59f58fc          LDR      r5,|L1.3596|
00050c  e7955101          LDR      r5,[r5,r1,LSL #2]
000510  e1c43005          BIC      r3,r4,r5
;;;426        if (eDirection == 1)
000514  e3520001          CMP      r2,#1
000518  1a000002          BNE      |L1.1320|
;;;427        {
;;;428            u32Value = u32Value | u32MBOne[eMB];
00051c  e59f48e8          LDR      r4,|L1.3596|
000520  e7944101          LDR      r4,[r4,r1,LSL #2]
000524  e1833004          ORR      r3,r3,r4
                  |L1.1320|
;;;429        }
;;;430    
;;;431        vSetMD(eCh, u32Value);
000528  e24045ff          SUB      r4,r0,#0x3fc00000
00052c  e5843408          STR      r3,[r4,#0x408]
;;;432    }
000530  e8bd8030          POP      {r4,r5,pc}
;;;433    
                          ENDP

                  eGetMailboxDirection PROC
;;;435    
;;;436    TXCAN_MailboxDiretion_e eGetMailboxDirection(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000534  e92d4030          PUSH     {r4,r5,lr}
;;;437    {
000538  e1a02000          MOV      r2,r0
;;;438        uint32_t u32Value = 0;
00053c  e3a03000          MOV      r3,#0
;;;439        TXCAN_MailboxDiretion_e eDirection = TXCAN_Output;
000540  e3a00000          MOV      r0,#0
;;;440    
;;;441        u32Value = u32GetMD(eCh) & u32MBOne[eMB];
000544  e24245ff          SUB      r4,r2,#0x3fc00000
000548  e5944408          LDR      r4,[r4,#0x408]
00054c  e59f58b8          LDR      r5,|L1.3596|
000550  e7955101          LDR      r5,[r5,r1,LSL #2]
000554  e0043005          AND      r3,r4,r5
;;;442        if (u32Value > 0)
000558  e3530000          CMP      r3,#0
00055c  0a000000          BEQ      |L1.1380|
;;;443        {
;;;444            eDirection = TXCAN_Input;
000560  e3a00001          MOV      r0,#1
                  |L1.1380|
;;;445        }
;;;446    
;;;447        return eDirection;
;;;448    }
000564  e8bd8030          POP      {r4,r5,pc}
;;;449    
                          ENDP

                  vTXCAN_ConfigureMailbox PROC
;;;451    
;;;452    void vTXCAN_ConfigureMailbox(TXCAN_MBconfig_st * stMBConfig)
000568  e92d4010          PUSH     {r4,lr}
;;;453    {
00056c  e1a04000          MOV      r4,r0
;;;454        vTXCAN_SetDatalength(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->u8DataLength);
000570  e5d42003          LDRB     r2,[r4,#3]
000574  e5d41002          LDRB     r1,[r4,#2]
000578  e1d400b0          LDRH     r0,[r4,#0]
00057c  ebfffffe          BL       vTXCAN_SetDatalength
;;;455        vTXCAN_SetRemoteFrameTransmissionRequest(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->eRemoteFrameTransmissionRequest);
000580  e5d42004          LDRB     r2,[r4,#4]
000584  e5d41002          LDRB     r1,[r4,#2]
000588  e1d400b0          LDRH     r0,[r4,#0]
00058c  ebfffffe          BL       vTXCAN_SetRemoteFrameTransmissionRequest
;;;456        vTXCAN_SetTimeStampCounterValue(stMBConfig->eChannel, stMBConfig->eMailbox, 0x0);
000590  e5d41002          LDRB     r1,[r4,#2]
000594  e1d400b0          LDRH     r0,[r4,#0]
000598  e3a02000          MOV      r2,#0
00059c  ebfffffe          BL       vTXCAN_SetTimeStampCounterValue
;;;457        vTXCAN_SetExtID(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->u32ExtendedIdentifier);
0005a0  e1d430b8          LDRH     r3,[r4,#8]
0005a4  e6ff2073          UXTH     r2,r3
0005a8  e5d41002          LDRB     r1,[r4,#2]
0005ac  e1d400b0          LDRH     r0,[r4,#0]
0005b0  ebfffffe          BL       vTXCAN_SetExtID
;;;458        vTXCAN_SetStdID(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->u16StandardIdentifier);
0005b4  e1d420bc          LDRH     r2,[r4,#0xc]
0005b8  e5d41002          LDRB     r1,[r4,#2]
0005bc  e1d400b0          LDRH     r0,[r4,#0]
0005c0  ebfffffe          BL       vTXCAN_SetStdID
;;;459        vTXCAN_SetRemoteFrameHandling(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->eRemoteFrameHandling);
0005c4  e5d4200e          LDRB     r2,[r4,#0xe]
0005c8  e5d41002          LDRB     r1,[r4,#2]
0005cc  e1d400b0          LDRH     r0,[r4,#0]
0005d0  ebfffffe          BL       vTXCAN_SetRemoteFrameHandling
;;;460        vTXCAN_SetGlobalAcceptanceMask(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->eGlobalAcceptanceMask);
0005d4  e5d4200f          LDRB     r2,[r4,#0xf]
0005d8  e5d41002          LDRB     r1,[r4,#2]
0005dc  e1d400b0          LDRH     r0,[r4,#0]
0005e0  ebfffffe          BL       vTXCAN_SetGlobalAcceptanceMask
;;;461        vTXCAN_SetFrameType(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->eFrameType);
0005e4  e5d42010          LDRB     r2,[r4,#0x10]
0005e8  e5d41002          LDRB     r1,[r4,#2]
0005ec  e1d400b0          LDRH     r0,[r4,#0]
0005f0  ebfffffe          BL       vTXCAN_SetFrameType
;;;462        vTXCAN_SetMailboxDirection(stMBConfig->eChannel, stMBConfig->eMailbox, stMBConfig->eMailboxDirection);
0005f4  e5d42011          LDRB     r2,[r4,#0x11]
0005f8  e5d41002          LDRB     r1,[r4,#2]
0005fc  e1d400b0          LDRH     r0,[r4,#0]
000600  ebfffffe          BL       vTXCAN_SetMailboxDirection
;;;463        vTXCAN_MailboxEnable(stMBConfig->eChannel, stMBConfig->eMailbox);
000604  e5d41002          LDRB     r1,[r4,#2]
000608  e1d400b0          LDRH     r0,[r4,#0]
00060c  ebfffffe          BL       vTXCAN_MailboxEnable
;;;464    }
000610  e8bd8010          POP      {r4,pc}
;;;465    
                          ENDP

                  vTXCAN_TransmitAll PROC
;;;467    
;;;468    void vTXCAN_TransmitAll(TXCAN_CH_e eCh, uint32_t u32TransmitCode)
000614  e24025ff          SUB      r2,r0,#0x3fc00000
;;;469    {
;;;470        vSetTRS(eCh, u32TransmitCode);
000618  e5821410          STR      r1,[r2,#0x410]
;;;471    }
00061c  e12fff1e          BX       lr
;;;472    
                          ENDP

                  vTXCAN_Transmit PROC
;;;474    
;;;475    void vTXCAN_Transmit(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000620  e92d4010          PUSH     {r4,lr}
;;;476    {
;;;477        uint32_t u32Value;
;;;478    
;;;479        u32Value = u32GetMC(eCh) & ~u32MBOne[eMB];
000624  e24035ff          SUB      r3,r0,#0x3fc00000
000628  e5933400          LDR      r3,[r3,#0x400]
00062c  e59f47d8          LDR      r4,|L1.3596|
000630  e7944101          LDR      r4,[r4,r1,LSL #2]
000634  e1c32004          BIC      r2,r3,r4
;;;480        vSetTRS(eCh, u32Value);
000638  e24035ff          SUB      r3,r0,#0x3fc00000
00063c  e5832410          STR      r2,[r3,#0x410]
;;;481    }
000640  e8bd8010          POP      {r4,pc}
;;;482    
                          ENDP

                  vTXCAN_SendMsg PROC
;;;484    
;;;485    void vTXCAN_SendMsg(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint64_t u64Data)
000644  e92d4070          PUSH     {r4-r6,lr}
;;;486    {
;;;487        uint32_t u32Value;
;;;488    
;;;489        vSetDATL_MBn(eCh, eMB, (u64Data & 0xFFFFFFFF));
000648  e59f67b4          LDR      r6,|L1.3588|
00064c  e0866000          ADD      r6,r6,r0
000650  e7862281          STR      r2,[r6,r1,LSL #5]
;;;490        vSetDATH_MBn(eCh, eMB, ((u64Data >> 32) & 0xFFFFFFFF));
000654  e59f67ac          LDR      r6,|L1.3592|
000658  e0866000          ADD      r6,r6,r0
00065c  e7863281          STR      r3,[r6,r1,LSL #5]
;;;491    
;;;492        u32Value = u32GetTRS(eCh) | u32MBOne[eMB];
000660  e24055ff          SUB      r5,r0,#0x3fc00000
000664  e5955410          LDR      r5,[r5,#0x410]
000668  e59f679c          LDR      r6,|L1.3596|
00066c  e7966101          LDR      r6,[r6,r1,LSL #2]
000670  e1854006          ORR      r4,r5,r6
;;;493        vSetTRS(eCh, u32Value);
000674  e24055ff          SUB      r5,r0,#0x3fc00000
000678  e5854410          STR      r4,[r5,#0x410]
;;;494    }
00067c  e8bd8070          POP      {r4-r6,pc}
;;;495    
                          ENDP

                  vTXCAN_CancelTransmissionAll PROC
;;;497    
;;;498    void vTXCAN_CancelTransmissionAll(TXCAN_CH_e eCh, uint32_t u32CancelCode)
000680  e24025ff          SUB      r2,r0,#0x3fc00000
;;;499    {
;;;500        vSetTRR(eCh, u32CancelCode);
000684  e5821418          STR      r1,[r2,#0x418]
;;;501    }
000688  e12fff1e          BX       lr
;;;502    
                          ENDP

                  vTXCAN_CancelTransmission PROC
;;;504    
;;;505    void vTXCAN_CancelTransmission(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00068c  e92d4010          PUSH     {r4,lr}
;;;506    {
;;;507        uint32_t u32Value;
;;;508    
;;;509        u32Value = u32GetTRR(eCh) | u32MBOne[eMB];
000690  e24035ff          SUB      r3,r0,#0x3fc00000
000694  e5933418          LDR      r3,[r3,#0x418]
000698  e59f476c          LDR      r4,|L1.3596|
00069c  e7944101          LDR      r4,[r4,r1,LSL #2]
0006a0  e1832004          ORR      r2,r3,r4
;;;510        vSetTRR(eCh, u32Value);
0006a4  e24035ff          SUB      r3,r0,#0x3fc00000
0006a8  e5832418          STR      r2,[r3,#0x418]
;;;511    }
0006ac  e8bd8010          POP      {r4,pc}
;;;512    
                          ENDP

                  vTXCAN_ClearTransmissionAcknowledgeAll PROC
;;;514    
;;;515    void vTXCAN_ClearTransmissionAcknowledgeAll(TXCAN_CH_e eCh, uint32_t u32TransmissionCode)
0006b0  e24025ff          SUB      r2,r0,#0x3fc00000
;;;516    {
;;;517        vSetTA(eCh, u32TransmissionCode);
0006b4  e5821420          STR      r1,[r2,#0x420]
;;;518    }
0006b8  e12fff1e          BX       lr
;;;519    
                          ENDP

                  vTXCAN_ClearTransmissionAcknowledge PROC
;;;521    
;;;522    void vTXCAN_ClearTransmissionAcknowledge(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0006bc  e92d4010          PUSH     {r4,lr}
;;;523    {
;;;524        uint32_t u32Value;
;;;525    
;;;526        u32Value = u32GetTA(eCh) | u32MBOne[eMB];
0006c0  e24035ff          SUB      r3,r0,#0x3fc00000
0006c4  e5933420          LDR      r3,[r3,#0x420]
0006c8  e59f473c          LDR      r4,|L1.3596|
0006cc  e7944101          LDR      r4,[r4,r1,LSL #2]
0006d0  e1832004          ORR      r2,r3,r4
;;;527        vSetTA(eCh, u32Value);
0006d4  e24035ff          SUB      r3,r0,#0x3fc00000
0006d8  e5832420          STR      r2,[r3,#0x420]
;;;528    }
0006dc  e8bd8010          POP      {r4,pc}
;;;529    
                          ENDP

                  vTXCAN_ClearTransmissionAbortAcknowledgeAll PROC
;;;531    
;;;532    void vTXCAN_ClearTransmissionAbortAcknowledgeAll(TXCAN_CH_e eCh, uint32_t u32TransmissionCode)
0006e0  e24025ff          SUB      r2,r0,#0x3fc00000
;;;533    {
;;;534        vSetAA(eCh, u32TransmissionCode);
0006e4  e5821428          STR      r1,[r2,#0x428]
;;;535    }
0006e8  e12fff1e          BX       lr
;;;536    
                          ENDP

                  vTXCAN_ClearTransmissionAbortAcknowledge PROC
;;;538    
;;;539    void vTXCAN_ClearTransmissionAbortAcknowledge(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0006ec  e92d4010          PUSH     {r4,lr}
;;;540    {
;;;541        uint32_t u32Value;
;;;542    
;;;543        u32Value = u32GetAA(eCh) | u32MBOne[eMB];
0006f0  e24035ff          SUB      r3,r0,#0x3fc00000
0006f4  e5933428          LDR      r3,[r3,#0x428]
0006f8  e59f470c          LDR      r4,|L1.3596|
0006fc  e7944101          LDR      r4,[r4,r1,LSL #2]
000700  e1832004          ORR      r2,r3,r4
;;;544        vSetAA(eCh, u32Value);
000704  e24035ff          SUB      r3,r0,#0x3fc00000
000708  e5832428          STR      r2,[r3,#0x428]
;;;545    }
00070c  e8bd8010          POP      {r4,pc}
;;;546    
                          ENDP

                  vTXCAN_SetChangeDataRequestAll PROC
;;;548    
;;;549    void vTXCAN_SetChangeDataRequestAll(TXCAN_CH_e eCh, uint32_t u32Value)
000710  e24025ff          SUB      r2,r0,#0x3fc00000
;;;550    {
;;;551        vSetCDR(eCh, u32Value);
000714  e5821498          STR      r1,[r2,#0x498]
;;;552    }
000718  e12fff1e          BX       lr
;;;553    
                          ENDP

                  vTXCAN_SetChangeDataRequest PROC
;;;555    
;;;556    void vTXCAN_SetChangeDataRequest(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00071c  e92d4010          PUSH     {r4,lr}
;;;557    {
;;;558        uint32_t u32Value;
;;;559    
;;;560        u32Value = u32GetCDR(eCh) | u32MBOne[eMB];
000720  e24035ff          SUB      r3,r0,#0x3fc00000
000724  e5933498          LDR      r3,[r3,#0x498]
000728  e59f46dc          LDR      r4,|L1.3596|
00072c  e7944101          LDR      r4,[r4,r1,LSL #2]
000730  e1832004          ORR      r2,r3,r4
;;;561        vSetCDR(eCh, u32Value);
000734  e24035ff          SUB      r3,r0,#0x3fc00000
000738  e5832498          STR      r2,[r3,#0x498]
;;;562    }
00073c  e8bd8010          POP      {r4,pc}
;;;563    
                          ENDP

                  u32TXCAN_GetChangeDataRequestAll PROC
;;;565    
;;;566    uint32_t u32TXCAN_GetChangeDataRequestAll(TXCAN_CH_e eCh)
000740  e1a01000          MOV      r1,r0
;;;567    {
;;;568        return u32GetCDR(eCh);
000744  e24105ff          SUB      r0,r1,#0x3fc00000
000748  e5900498          LDR      r0,[r0,#0x498]
;;;569    }
00074c  e12fff1e          BX       lr
;;;570    
                          ENDP

                  u8TXCAN_GetChangeDataRequest PROC
;;;572    
;;;573    uint8_t u8TXCAN_GetChangeDataRequest(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000750  e92d4010          PUSH     {r4,lr}
;;;574    {
000754  e1a02000          MOV      r2,r0
;;;575        uint32_t u32Value;
;;;576    
;;;577        u32Value = u32GetCDR(eCh) & u32MBOne[eMB];
000758  e24205ff          SUB      r0,r2,#0x3fc00000
00075c  e5900498          LDR      r0,[r0,#0x498]
000760  e59f46a4          LDR      r4,|L1.3596|
000764  e7944101          LDR      r4,[r4,r1,LSL #2]
000768  e0003004          AND      r3,r0,r4
;;;578        if (u32Value == 0)
00076c  e3530000          CMP      r3,#0
000770  1a000001          BNE      |L1.1916|
;;;579        {
;;;580            return 0;
000774  e3a00000          MOV      r0,#0
                  |L1.1912|
;;;581        }
;;;582        else
;;;583        {
;;;584            return 1;
;;;585        }
;;;586    }
000778  e8bd8010          POP      {r4,pc}
                  |L1.1916|
00077c  e3a00001          MOV      r0,#1                 ;584
000780  eafffffc          B        |L1.1912|
;;;587    
                          ENDP

                  u32TXCAN_GetPendingReceiveMessages PROC
;;;589    
;;;590    uint32_t u32TXCAN_GetPendingReceiveMessages(TXCAN_CH_e eCh)
000784  e1a01000          MOV      r1,r0
;;;591    {
;;;592        return u32GetRMP(eCh);
000788  e24105ff          SUB      r0,r1,#0x3fc00000
00078c  e5900430          LDR      r0,[r0,#0x430]
;;;593    }
000790  e12fff1e          BX       lr
;;;594    
                          ENDP

                  u8TXCAN_GetPendingReceiveMessage PROC
;;;596    
;;;597    uint8_t u8TXCAN_GetPendingReceiveMessage(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000794  e92d4010          PUSH     {r4,lr}
;;;598    {
000798  e1a02000          MOV      r2,r0
;;;599        uint32_t u32Value;
;;;600    
;;;601        u32Value = u32GetRMP(eCh) & u32MBOne[eMB];
00079c  e24205ff          SUB      r0,r2,#0x3fc00000
0007a0  e5900430          LDR      r0,[r0,#0x430]
0007a4  e59f4660          LDR      r4,|L1.3596|
0007a8  e7944101          LDR      r4,[r4,r1,LSL #2]
0007ac  e0003004          AND      r3,r0,r4
;;;602        if (u32Value == 0)
0007b0  e3530000          CMP      r3,#0
0007b4  1a000001          BNE      |L1.1984|
;;;603        {
;;;604            return 0;
0007b8  e3a00000          MOV      r0,#0
                  |L1.1980|
;;;605        }
;;;606        else
;;;607        {
;;;608            return 1;
;;;609        }
;;;610    }
0007bc  e8bd8010          POP      {r4,pc}
                  |L1.1984|
0007c0  e3a00001          MOV      r0,#1                 ;608
0007c4  eafffffc          B        |L1.1980|
;;;611    
                          ENDP

                  vTXCAN_ClearPendingReceiveMessages PROC
;;;613    
;;;614    void vTXCAN_ClearPendingReceiveMessages(TXCAN_CH_e eCh, uint32_t u32Value)
0007c8  e24025ff          SUB      r2,r0,#0x3fc00000
;;;615    {
;;;616        vSetRMP(eCh, u32Value);
0007cc  e5821430          STR      r1,[r2,#0x430]
;;;617    }
0007d0  e12fff1e          BX       lr
;;;618    
                          ENDP

                  vTXCAN_ClearPendingReceiveMessage PROC
;;;620    
;;;621    void vTXCAN_ClearPendingReceiveMessage(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0007d4  e92d4010          PUSH     {r4,lr}
;;;622    {
;;;623        uint32_t u32Value;
;;;624    
;;;625        u32Value = u32GetRMP(eCh) | u32MBOne[eMB];
0007d8  e24035ff          SUB      r3,r0,#0x3fc00000
0007dc  e5933430          LDR      r3,[r3,#0x430]
0007e0  e59f4624          LDR      r4,|L1.3596|
0007e4  e7944101          LDR      r4,[r4,r1,LSL #2]
0007e8  e1832004          ORR      r2,r3,r4
;;;626        vSetRMP(eCh, u32Value);
0007ec  e24035ff          SUB      r3,r0,#0x3fc00000
0007f0  e5832430          STR      r2,[r3,#0x430]
;;;627    }
0007f4  e8bd8010          POP      {r4,pc}
;;;628    
                          ENDP

                  u32TXCAN_GetReceiveMessageLosts PROC
;;;630    
;;;631    uint32_t u32TXCAN_GetReceiveMessageLosts(TXCAN_CH_e eCh)
0007f8  e1a01000          MOV      r1,r0
;;;632    {
;;;633        return u32GetRML(eCh);
0007fc  e24105ff          SUB      r0,r1,#0x3fc00000
000800  e5900438          LDR      r0,[r0,#0x438]
;;;634    }
000804  e12fff1e          BX       lr
;;;635    
                          ENDP

                  u8TXCAN_GetReceiveMessageLost PROC
;;;637    
;;;638    uint8_t u8TXCAN_GetReceiveMessageLost(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000808  e92d4010          PUSH     {r4,lr}
;;;639    {
00080c  e1a02000          MOV      r2,r0
;;;640        uint32_t u32Value;
;;;641    
;;;642        u32Value = u32GetRML(eCh) & u32MBOne[eMB];
000810  e24205ff          SUB      r0,r2,#0x3fc00000
000814  e5900438          LDR      r0,[r0,#0x438]
000818  e59f45ec          LDR      r4,|L1.3596|
00081c  e7944101          LDR      r4,[r4,r1,LSL #2]
000820  e0003004          AND      r3,r0,r4
;;;643        if (u32Value == 0)
000824  e3530000          CMP      r3,#0
000828  1a000001          BNE      |L1.2100|
;;;644        {
;;;645            return 0;
00082c  e3a00000          MOV      r0,#0
                  |L1.2096|
;;;646        }
;;;647        else
;;;648        {
;;;649            return 1;
;;;650        }
;;;651    }
000830  e8bd8010          POP      {r4,pc}
                  |L1.2100|
000834  e3a00001          MOV      r0,#1                 ;649
000838  eafffffc          B        |L1.2096|
;;;652    
                          ENDP

                  vTXCAN_ClearReceiveMessageLosts PROC
;;;654    
;;;655    void vTXCAN_ClearReceiveMessageLosts(TXCAN_CH_e eCh, uint32_t u32Value)
00083c  e24025ff          SUB      r2,r0,#0x3fc00000
;;;656    {
;;;657        vSetRML(eCh, u32Value);
000840  e5821438          STR      r1,[r2,#0x438]
;;;658    }
000844  e12fff1e          BX       lr
;;;659    
                          ENDP

                  vTXCAN_ClearReceiveMessageLost PROC
;;;661    
;;;662    void vTXCAN_ClearReceiveMessageLost(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000848  e92d4010          PUSH     {r4,lr}
;;;663    {
;;;664        uint32_t u32Value;
;;;665    
;;;666        u32Value = u32GetRML(eCh) | u32MBOne[eMB];
00084c  e24035ff          SUB      r3,r0,#0x3fc00000
000850  e5933438          LDR      r3,[r3,#0x438]
000854  e59f45b0          LDR      r4,|L1.3596|
000858  e7944101          LDR      r4,[r4,r1,LSL #2]
00085c  e1832004          ORR      r2,r3,r4
;;;667        vSetRML(eCh, u32Value);
000860  e24035ff          SUB      r3,r0,#0x3fc00000
000864  e5832438          STR      r2,[r3,#0x438]
;;;668    }
000868  e8bd8010          POP      {r4,pc}
;;;669    
                          ENDP

                  u32TXCAN_GetPendingRemoteFrames PROC
;;;671    
;;;672    uint32_t u32TXCAN_GetPendingRemoteFrames(TXCAN_CH_e eCh)
00086c  e1a01000          MOV      r1,r0
;;;673    {
;;;674        return u32GetRFP(eCh);
000870  e24105ff          SUB      r0,r1,#0x3fc00000
000874  e59004a0          LDR      r0,[r0,#0x4a0]
;;;675    }
000878  e12fff1e          BX       lr
;;;676    
                          ENDP

                  u8TXCAN_GetPendingRemoteFrame PROC
;;;678    
;;;679    uint8_t u8TXCAN_GetPendingRemoteFrame(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00087c  e92d4010          PUSH     {r4,lr}
;;;680    {
000880  e1a02000          MOV      r2,r0
;;;681        uint32_t u32Value;
;;;682    
;;;683        u32Value = u32GetRFP(eCh) & u32MBOne[eMB];
000884  e24205ff          SUB      r0,r2,#0x3fc00000
000888  e59004a0          LDR      r0,[r0,#0x4a0]
00088c  e59f4578          LDR      r4,|L1.3596|
000890  e7944101          LDR      r4,[r4,r1,LSL #2]
000894  e0003004          AND      r3,r0,r4
;;;684        if (u32Value == 0)
000898  e3530000          CMP      r3,#0
00089c  1a000001          BNE      |L1.2216|
;;;685        {
;;;686            return 0;
0008a0  e3a00000          MOV      r0,#0
                  |L1.2212|
;;;687        }
;;;688        else
;;;689        {
;;;690            return 1;
;;;691        }
;;;692    }
0008a4  e8bd8010          POP      {r4,pc}
                  |L1.2216|
0008a8  e3a00001          MOV      r0,#1                 ;690
0008ac  eafffffc          B        |L1.2212|
;;;693    
                          ENDP

                  vSetAcceptanceMaskType PROC
;;;695    
;;;696    void vSetAcceptanceMaskType(TXCAN_CH_e eCh, TXCAN_MB_e eMB, TXCAN_AcceptanceMaskType_e eType)
0008b0  e92d4010          PUSH     {r4,lr}
;;;697    {
;;;698        vSetMBnAM_AMI(eCh, eMB, eType);
0008b4  e59f3554          LDR      r3,|L1.3600|
0008b8  e0833000          ADD      r3,r3,r0
0008bc  e7933181          LDR      r3,[r3,r1,LSL #3]
0008c0  e7df3f92          BFI      r3,r2,#31,#1
0008c4  e59f4544          LDR      r4,|L1.3600|
0008c8  e0844000          ADD      r4,r4,r0
0008cc  e7843181          STR      r3,[r4,r1,LSL #3]
;;;699    }
0008d0  e8bd8010          POP      {r4,pc}
;;;700    
                          ENDP

                  eGetAcceptanceMaskType PROC
;;;702    
;;;703    TXCAN_AcceptanceMaskType_e eGetAcceptanceMaskType(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0008d4  e1a02000          MOV      r2,r0
;;;704    {
;;;705        return (TXCAN_AcceptanceMaskType_e)biGetMBnAM_AMI(eCh, eMB);
0008d8  e59f0530          LDR      r0,|L1.3600|
0008dc  e0800002          ADD      r0,r0,r2
0008e0  e7900181          LDR      r0,[r0,r1,LSL #3]
0008e4  e1a00fa0          LSR      r0,r0,#31
;;;706    }
0008e8  e12fff1e          BX       lr
;;;707    
                          ENDP

                  vTXCAN_SetAcceptanceMask PROC
;;;709    
;;;710    void vTXCAN_SetAcceptanceMask(TXCAN_CH_e eCh, TXCAN_MB_e eMB, uint32_t u32Value)
0008ec  e92d4010          PUSH     {r4,lr}
;;;711    {
;;;712        vSetMBnAM_AM(eCh, eMB, u32Value);
0008f0  e59f3518          LDR      r3,|L1.3600|
0008f4  e0833000          ADD      r3,r3,r0
0008f8  e7933181          LDR      r3,[r3,r1,LSL #3]
0008fc  e7dc3012          BFI      r3,r2,#0,#29
000900  e59f4508          LDR      r4,|L1.3600|
000904  e0844000          ADD      r4,r4,r0
000908  e7843181          STR      r3,[r4,r1,LSL #3]
;;;713    }
00090c  e8bd8010          POP      {r4,pc}
;;;714    
                          ENDP

                  u32TXCAN_GetAcceptanceMask PROC
;;;716    
;;;717    uint32_t u32TXCAN_GetAcceptanceMask(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
000910  e1a02000          MOV      r2,r0
;;;718    {
;;;719        return biGetMBnAM_AM(eCh, eMB);
000914  e59f04f4          LDR      r0,|L1.3600|
000918  e0800002          ADD      r0,r0,r2
00091c  e7900181          LDR      r0,[r0,r1,LSL #3]
000920  e3c0020e          BIC      r0,r0,#0xe0000000
;;;720    }
000924  e12fff1e          BX       lr
;;;721    
                          ENDP

                  vTXCAN_ConfigureChannel PROC
;;;723    
;;;724    void vTXCAN_ConfigureChannel(TXCAN_CH_e eCh, TXCAN_CHconfig_st * stConfig)
000928  e5d13000          LDRB     r3,[r1,#0]
;;;725    {
;;;726        vSetMCR_SRES(eCh, stConfig->eSoftwareReset);
00092c  e59f24e0          LDR      r2,|L1.3604|
000930  e0822000          ADD      r2,r2,r0
000934  e1d225b0          LDRH     r2,[r2,#0x50]
000938  e7c02013          BFI      r2,r3,#0,#1
00093c  e59f34d0          LDR      r3,|L1.3604|
000940  e0833000          ADD      r3,r3,r0
000944  e1c325b0          STRH     r2,[r3,#0x50]
;;;727        vSetMCR_TSCC(eCh, stConfig->eTimeStampCounter);
000948  e5d13001          LDRB     r3,[r1,#1]
00094c  e59f24c0          LDR      r2,|L1.3604|
000950  e0822000          ADD      r2,r2,r0
000954  e1d225b0          LDRH     r2,[r2,#0x50]
000958  e7c12093          BFI      r2,r3,#1,#1
00095c  e59f34b0          LDR      r3,|L1.3604|
000960  e0833000          ADD      r3,r3,r0
000964  e1c325b0          STRH     r2,[r3,#0x50]
;;;728        vSetMCR_MTOS(eCh, stConfig->eTransmissionOrder);
000968  e5d13002          LDRB     r3,[r1,#2]
00096c  e59f24a0          LDR      r2,|L1.3604|
000970  e0822000          ADD      r2,r2,r0
000974  e1d225b0          LDRH     r2,[r2,#0x50]
000978  e7c32193          BFI      r2,r3,#3,#1
00097c  e59f3490          LDR      r3,|L1.3604|
000980  e0833000          ADD      r3,r3,r0
000984  e1c325b0          STRH     r2,[r3,#0x50]
;;;729        vSetMCR_WUBA(eCh, stConfig->eWakeUp);
000988  e5d13003          LDRB     r3,[r1,#3]
00098c  e59f2480          LDR      r2,|L1.3604|
000990  e0822000          ADD      r2,r2,r0
000994  e1d225b0          LDRH     r2,[r2,#0x50]
000998  e7c42213          BFI      r2,r3,#4,#1
00099c  e59f3470          LDR      r3,|L1.3604|
0009a0  e0833000          ADD      r3,r3,r0
0009a4  e1c325b0          STRH     r2,[r3,#0x50]
;;;730        vSetMCR_SMR(eCh, stConfig->eSleepMode);
0009a8  e5d13004          LDRB     r3,[r1,#4]
0009ac  e59f2460          LDR      r2,|L1.3604|
0009b0  e0822000          ADD      r2,r2,r0
0009b4  e1d225b0          LDRH     r2,[r2,#0x50]
0009b8  e7c62313          BFI      r2,r3,#6,#1
0009bc  e59f3450          LDR      r3,|L1.3604|
0009c0  e0833000          ADD      r3,r3,r0
0009c4  e1c325b0          STRH     r2,[r3,#0x50]
;;;731        vSetMCR_CCR(eCh, stConfig->eChangeConfig);
0009c8  e5d13005          LDRB     r3,[r1,#5]
0009cc  e59f2440          LDR      r2,|L1.3604|
0009d0  e0822000          ADD      r2,r2,r0
0009d4  e1d225b0          LDRH     r2,[r2,#0x50]
0009d8  e7c72393          BFI      r2,r3,#7,#1
0009dc  e59f3430          LDR      r3,|L1.3604|
0009e0  e0833000          ADD      r3,r3,r0
0009e4  e1c325b0          STRH     r2,[r3,#0x50]
;;;732        vSetMCR_TSTERR(eCh, stConfig->eTestError);
0009e8  e5d13006          LDRB     r3,[r1,#6]
0009ec  e59f2420          LDR      r2,|L1.3604|
0009f0  e0822000          ADD      r2,r2,r0
0009f4  e1d225b0          LDRH     r2,[r2,#0x50]
0009f8  e7c82413          BFI      r2,r3,#8,#1
0009fc  e59f3410          LDR      r3,|L1.3604|
000a00  e0833000          ADD      r3,r3,r0
000a04  e1c325b0          STRH     r2,[r3,#0x50]
;;;733        vSetMCR_TSTLB(eCh, stConfig->eTestLoopback);
000a08  e5d13007          LDRB     r3,[r1,#7]
000a0c  e59f2400          LDR      r2,|L1.3604|
000a10  e0822000          ADD      r2,r2,r0
000a14  e1d225b0          LDRH     r2,[r2,#0x50]
000a18  e7c92493          BFI      r2,r3,#9,#1
000a1c  e59f33f0          LDR      r3,|L1.3604|
000a20  e0833000          ADD      r3,r3,r0
000a24  e1c325b0          STRH     r2,[r3,#0x50]
;;;734        vSetMCR_INTLB(eCh, stConfig->eInternalLoopback);
000a28  e5d13008          LDRB     r3,[r1,#8]
000a2c  e59f23e0          LDR      r2,|L1.3604|
000a30  e0822000          ADD      r2,r2,r0
000a34  e1d225b0          LDRH     r2,[r2,#0x50]
000a38  e7ca2513          BFI      r2,r3,#10,#1
000a3c  e59f33d0          LDR      r3,|L1.3604|
000a40  e0833000          ADD      r3,r3,r0
000a44  e1c325b0          STRH     r2,[r3,#0x50]
;;;735        vSetMCR_SUR(eCh, stConfig->eSuspendMode);
000a48  e5d13009          LDRB     r3,[r1,#9]
000a4c  e59f23c0          LDR      r2,|L1.3604|
000a50  e0822000          ADD      r2,r2,r0
000a54  e1d225b0          LDRH     r2,[r2,#0x50]
000a58  e7cb2593          BFI      r2,r3,#11,#1
000a5c  e59f33b0          LDR      r3,|L1.3604|
000a60  e0833000          ADD      r3,r3,r0
000a64  e1c325b0          STRH     r2,[r3,#0x50]
;;;736    }
000a68  e12fff1e          BX       lr
;;;737    
                          ENDP

                  vTXCAN_GetChannelConfiguration PROC
;;;739    
;;;740    void vTXCAN_GetChannelConfiguration(TXCAN_CH_e eCh, TXCAN_CHconfig_st * stConfig)
000a6c  e59f23a0          LDR      r2,|L1.3604|
;;;741    {
;;;742        stConfig->eSoftwareReset = (TXCAN_SoftwareReset_e)biGetMCR_SRES(eCh);
000a70  e0822000          ADD      r2,r2,r0
000a74  e1d225b0          LDRH     r2,[r2,#0x50]
000a78  e2022001          AND      r2,r2,#1
000a7c  e5c12000          STRB     r2,[r1,#0]
;;;743        stConfig->eTimeStampCounter = (TXCAN_TimeStampCounter_e)biGetMCR_TSCC(eCh);
000a80  e59f238c          LDR      r2,|L1.3604|
000a84  e0822000          ADD      r2,r2,r0
000a88  e1d225b0          LDRH     r2,[r2,#0x50]
000a8c  e7e020d2          UBFX     r2,r2,#1,#1
000a90  e5c12001          STRB     r2,[r1,#1]
;;;744        stConfig->eTransmissionOrder = (TXCAN_TransmissionOrder_e)biGetMCR_MTOS(eCh);
000a94  e59f2378          LDR      r2,|L1.3604|
000a98  e0822000          ADD      r2,r2,r0
000a9c  e1d225b0          LDRH     r2,[r2,#0x50]
000aa0  e7e021d2          UBFX     r2,r2,#3,#1
000aa4  e5c12002          STRB     r2,[r1,#2]
;;;745        stConfig->eWakeUp = (TXCAN_WakeUpOnBus_e)biGetMCR_WUBA(eCh);
000aa8  e59f2364          LDR      r2,|L1.3604|
000aac  e0822000          ADD      r2,r2,r0
000ab0  e1d225b0          LDRH     r2,[r2,#0x50]
000ab4  e7e02252          UBFX     r2,r2,#4,#1
000ab8  e5c12003          STRB     r2,[r1,#3]
;;;746        stConfig->eSleepMode = (TXCAN_Sleep_e)biGetMCR_SMR(eCh);
000abc  e59f2350          LDR      r2,|L1.3604|
000ac0  e0822000          ADD      r2,r2,r0
000ac4  e1d225b0          LDRH     r2,[r2,#0x50]
000ac8  e7e02352          UBFX     r2,r2,#6,#1
000acc  e5c12004          STRB     r2,[r1,#4]
;;;747        stConfig->eChangeConfig = (TXCAN_ChangeConfig_e)biGetMCR_CCR(eCh);
000ad0  e59f233c          LDR      r2,|L1.3604|
000ad4  e0822000          ADD      r2,r2,r0
000ad8  e1d225b0          LDRH     r2,[r2,#0x50]
000adc  e7e023d2          UBFX     r2,r2,#7,#1
000ae0  e5c12005          STRB     r2,[r1,#5]
;;;748        stConfig->eTestError = (TXCAN_TestError_e)biGetMCR_TSTERR(eCh);
000ae4  e59f2328          LDR      r2,|L1.3604|
000ae8  e0822000          ADD      r2,r2,r0
000aec  e1d225b0          LDRH     r2,[r2,#0x50]
000af0  e7e02452          UBFX     r2,r2,#8,#1
000af4  e5c12006          STRB     r2,[r1,#6]
;;;749        stConfig->eTestLoopback = (TXCAN_TestLoopback_e)biGetMCR_TSTLB(eCh);
000af8  e59f2314          LDR      r2,|L1.3604|
000afc  e0822000          ADD      r2,r2,r0
000b00  e1d225b0          LDRH     r2,[r2,#0x50]
000b04  e7e024d2          UBFX     r2,r2,#9,#1
000b08  e5c12007          STRB     r2,[r1,#7]
;;;750        stConfig->eInternalLoopback = (TXCAN_InternalLoopback_e)biGetMCR_INTLB(eCh);
000b0c  e59f2300          LDR      r2,|L1.3604|
000b10  e0822000          ADD      r2,r2,r0
000b14  e1d225b0          LDRH     r2,[r2,#0x50]
000b18  e7e02552          UBFX     r2,r2,#10,#1
000b1c  e5c12008          STRB     r2,[r1,#8]
;;;751        stConfig->eSuspendMode = (TXCAN_Suspend_e)biGetMCR_SUR(eCh);
000b20  e59f22ec          LDR      r2,|L1.3604|
000b24  e0822000          ADD      r2,r2,r0
000b28  e1d225b0          LDRH     r2,[r2,#0x50]
000b2c  e7e025d2          UBFX     r2,r2,#11,#1
000b30  e5c12009          STRB     r2,[r1,#9]
;;;752    }
000b34  e12fff1e          BX       lr
;;;753    
                          ENDP

                  vTXCAN_ConfigureTiming PROC
;;;755    
;;;756    void vTXCAN_ConfigureTiming(TXCAN_CH_e eCh, TXCAN_timing_st * stTiming)
000b38  e59f22d4          LDR      r2,|L1.3604|
;;;757    {
;;;758        vSetMCR_CCR(eCh, 1);
000b3c  e0822000          ADD      r2,r2,r0
000b40  e1d225b0          LDRH     r2,[r2,#0x50]
000b44  e3c22080          BIC      r2,r2,#0x80
000b48  e2822080          ADD      r2,r2,#0x80
000b4c  e59f32c0          LDR      r3,|L1.3604|
000b50  e0833000          ADD      r3,r3,r0
000b54  e1c325b0          STRH     r2,[r3,#0x50]
;;;759        vSetBCR1_BRP(eCh, stTiming->u8BaudRatePrescaler);
000b58  e5d13000          LDRB     r3,[r1,#0]
000b5c  e59f22b0          LDR      r2,|L1.3604|
000b60  e0822000          ADD      r2,r2,r0
000b64  e1d226b0          LDRH     r2,[r2,#0x60]
000b68  e7c92013          BFI      r2,r3,#0,#10
000b6c  e59f32a0          LDR      r3,|L1.3604|
000b70  e0833000          ADD      r3,r3,r0
000b74  e1c326b0          STRH     r2,[r3,#0x60]
;;;760        vSetBCR2_TSEG1(eCh, stTiming->u8BitTiming1);
000b78  e5d13001          LDRB     r3,[r1,#1]
000b7c  e59f2290          LDR      r2,|L1.3604|
000b80  e0822000          ADD      r2,r2,r0
000b84  e1d226b8          LDRH     r2,[r2,#0x68]
000b88  e7c32013          BFI      r2,r3,#0,#4
000b8c  e59f3280          LDR      r3,|L1.3604|
000b90  e0833000          ADD      r3,r3,r0
000b94  e1c326b8          STRH     r2,[r3,#0x68]
;;;761        vSetBCR2_TSEG2(eCh, stTiming->u8BitTiming2);
000b98  e5d13002          LDRB     r3,[r1,#2]
000b9c  e59f2270          LDR      r2,|L1.3604|
000ba0  e0822000          ADD      r2,r2,r0
000ba4  e1d226b8          LDRH     r2,[r2,#0x68]
000ba8  e7c62213          BFI      r2,r3,#4,#3
000bac  e59f3260          LDR      r3,|L1.3604|
000bb0  e0833000          ADD      r3,r3,r0
000bb4  e1c326b8          STRH     r2,[r3,#0x68]
;;;762        vSetMCR_CCR(eCh, 0);
000bb8  e59f2254          LDR      r2,|L1.3604|
000bbc  e0822000          ADD      r2,r2,r0
000bc0  e1d225b0          LDRH     r2,[r2,#0x50]
000bc4  e3c22080          BIC      r2,r2,#0x80
000bc8  e59f3244          LDR      r3,|L1.3604|
000bcc  e0833000          ADD      r3,r3,r0
000bd0  e1c325b0          STRH     r2,[r3,#0x50]
;;;763    
;;;764        vSetBCR2_SAM(eCh, stTiming->eSamplingType);
000bd4  e5d13003          LDRB     r3,[r1,#3]
000bd8  e59f2234          LDR      r2,|L1.3604|
000bdc  e0822000          ADD      r2,r2,r0
000be0  e1d226b8          LDRH     r2,[r2,#0x68]
000be4  e7c72393          BFI      r2,r3,#7,#1
000be8  e59f3224          LDR      r3,|L1.3604|
000bec  e0833000          ADD      r3,r3,r0
000bf0  e1c326b8          STRH     r2,[r3,#0x68]
;;;765        vSetBCR2_SJW(eCh, stTiming->eBitLS);
000bf4  e5d13004          LDRB     r3,[r1,#4]
000bf8  e59f2214          LDR      r2,|L1.3604|
000bfc  e0822000          ADD      r2,r2,r0
000c00  e1d226b8          LDRH     r2,[r2,#0x68]
000c04  e7c92413          BFI      r2,r3,#8,#2
000c08  e59f3204          LDR      r3,|L1.3604|
000c0c  e0833000          ADD      r3,r3,r0
000c10  e1c326b8          STRH     r2,[r3,#0x68]
;;;766    }
000c14  e12fff1e          BX       lr
;;;767    
                          ENDP

                  vTXCAN_GetTimingConfiguration PROC
;;;769    
;;;770    void vTXCAN_GetTimingConfiguration(TXCAN_CH_e eCh, TXCAN_timing_st * stTiming)
000c18  e59f21f4          LDR      r2,|L1.3604|
;;;771    {
;;;772        stTiming->u8BaudRatePrescaler = (uint8_t)biGetBCR1_BRP(eCh);
000c1c  e0822000          ADD      r2,r2,r0
000c20  e1d226b0          LDRH     r2,[r2,#0x60]
000c24  e5c12000          STRB     r2,[r1,#0]
;;;773        stTiming->u8BitTiming1 = (uint8_t)biGetBCR2_TSEG1(eCh);
000c28  e59f21e4          LDR      r2,|L1.3604|
000c2c  e0822000          ADD      r2,r2,r0
000c30  e1d226b8          LDRH     r2,[r2,#0x68]
000c34  e202200f          AND      r2,r2,#0xf
000c38  e5c12001          STRB     r2,[r1,#1]
;;;774        stTiming->u8BitTiming2 = (uint8_t)biGetBCR2_TSEG2(eCh);
000c3c  e59f21d0          LDR      r2,|L1.3604|
000c40  e0822000          ADD      r2,r2,r0
000c44  e1d226b8          LDRH     r2,[r2,#0x68]
000c48  e7e22252          UBFX     r2,r2,#4,#3
000c4c  e5c12002          STRB     r2,[r1,#2]
;;;775        stTiming->eSamplingType = (TXCAN_Sampling_e)biGetBCR2_SAM(eCh);
000c50  e59f21bc          LDR      r2,|L1.3604|
000c54  e0822000          ADD      r2,r2,r0
000c58  e1d226b8          LDRH     r2,[r2,#0x68]
000c5c  e7e023d2          UBFX     r2,r2,#7,#1
000c60  e5c12003          STRB     r2,[r1,#3]
;;;776        stTiming->eBitLS = (TXCAN_BitLS_e)biGetBCR2_SJW(eCh);
000c64  e59f21a8          LDR      r2,|L1.3604|
000c68  e0822000          ADD      r2,r2,r0
000c6c  e1d226b8          LDRH     r2,[r2,#0x68]
000c70  e7e12452          UBFX     r2,r2,#8,#2
000c74  e5c12004          STRB     r2,[r1,#4]
;;;777    }
000c78  e12fff1e          BX       lr
;;;778    
                          ENDP

                  u16TXCAN_GetTimeStampCounter PROC
;;;780    
;;;781    uint16_t u16TXCAN_GetTimeStampCounter(TXCAN_CH_e eCh)
000c7c  e1a01000          MOV      r1,r0
;;;782    {
;;;783        return biGetTSC_TSC(eCh);
000c80  e59f018c          LDR      r0,|L1.3604|
000c84  e0800001          ADD      r0,r0,r1
000c88  e1d00bb8          LDRH     r0,[r0,#0xb8]
;;;784    }
000c8c  e12fff1e          BX       lr
;;;785    
                          ENDP

                  vTXCAN_ClearTimeStampValue PROC
;;;787    
;;;788    void vTXCAN_ClearTimeStampValue(TXCAN_CH_e eCh)
000c90  e59f117c          LDR      r1,|L1.3604|
;;;789    {
;;;790        vSetMCR_TSCC(eCh, 1);
000c94  e0811000          ADD      r1,r1,r0
000c98  e1d115b0          LDRH     r1,[r1,#0x50]
000c9c  e3c11002          BIC      r1,r1,#2
000ca0  e2811002          ADD      r1,r1,#2
000ca4  e59f2168          LDR      r2,|L1.3604|
000ca8  e0822000          ADD      r2,r2,r0
000cac  e1c215b0          STRH     r1,[r2,#0x50]
;;;791    }
000cb0  e12fff1e          BX       lr
;;;792    
                          ENDP

                  vTXCAN_SetTimeStampCounterPrescaler PROC
;;;794    
;;;795    void vTXCAN_SetTimeStampCounterPrescaler(TXCAN_CH_e eCh, uint8_t u8Value)
000cb4  e24025ff          SUB      r2,r0,#0x3fc00000
;;;796    {
;;;797        vSetTSP_TSP(eCh, (u8Value & 0xF));
000cb8  e5d224b0          LDRB     r2,[r2,#0x4b0]
000cbc  e7c32011          BFI      r2,r1,#0,#4
000cc0  e24035ff          SUB      r3,r0,#0x3fc00000
000cc4  e5c324b0          STRB     r2,[r3,#0x4b0]
;;;798    }
000cc8  e12fff1e          BX       lr
;;;799    
                          ENDP

                  u8TXCAN_GetTimeStampCounterPrescaler PROC
;;;801    
;;;802    uint8_t u8TXCAN_GetTimeStampCounterPrescaler(TXCAN_CH_e eCh)
000ccc  e1a01000          MOV      r1,r0
;;;803    {
;;;804        return biGetTSP_TSP(eCh);
000cd0  e24105ff          SUB      r0,r1,#0x3fc00000
000cd4  e5d004b0          LDRB     r0,[r0,#0x4b0]
000cd8  e200000f          AND      r0,r0,#0xf
;;;805    }
000cdc  e12fff1e          BX       lr
;;;806    
                          ENDP

                  u32TXCAN_GetGlobalStatus PROC
;;;808    
;;;809    uint32_t u32TXCAN_GetGlobalStatus(TXCAN_CH_e eCh)
000ce0  e1a01000          MOV      r1,r0
;;;810    {
;;;811        return u32GetGSR(eCh);
000ce4  e24105ff          SUB      r0,r1,#0x3fc00000
000ce8  e5900458          LDR      r0,[r0,#0x458]
;;;812    }
000cec  e12fff1e          BX       lr
;;;813    
                          ENDP

                  u8TXCAN_GetWarningStatus PROC
;;;815    
;;;816    uint8_t u8TXCAN_GetWarningStatus(TXCAN_CH_e eCh)
000cf0  e1a01000          MOV      r1,r0
;;;817    {
;;;818        return biGetGSR_EW(eCh);
000cf4  e24105ff          SUB      r0,r1,#0x3fc00000
000cf8  e5900458          LDR      r0,[r0,#0x458]
000cfc  e2000001          AND      r0,r0,#1
;;;819    }
000d00  e12fff1e          BX       lr
;;;820    
                          ENDP

                  u8TXCAN_GetErrorPassiveStatus PROC
;;;822    
;;;823    uint8_t u8TXCAN_GetErrorPassiveStatus(TXCAN_CH_e eCh)
000d04  e1a01000          MOV      r1,r0
;;;824    {
;;;825        return biGetGSR_EP(eCh);
000d08  e24105ff          SUB      r0,r1,#0x3fc00000
000d0c  e5900458          LDR      r0,[r0,#0x458]
000d10  e7e000d0          UBFX     r0,r0,#1,#1
;;;826    }
000d14  e12fff1e          BX       lr
;;;827    
                          ENDP

                  u8TXCAN_GetBusOffStatus PROC
;;;829    
;;;830    uint8_t u8TXCAN_GetBusOffStatus(TXCAN_CH_e eCh)
000d18  e1a01000          MOV      r1,r0
;;;831    {
;;;832        return biGetGSR_BO(eCh);
000d1c  e24105ff          SUB      r0,r1,#0x3fc00000
000d20  e5900458          LDR      r0,[r0,#0x458]
000d24  e7e00150          UBFX     r0,r0,#2,#1
;;;833    }
000d28  e12fff1e          BX       lr
;;;834    
                          ENDP

                  u8TXCAN_GetTimeStampOverflowFlag PROC
;;;836    
;;;837    uint8_t u8TXCAN_GetTimeStampOverflowFlag(TXCAN_CH_e eCh)
000d2c  e1a01000          MOV      r1,r0
;;;838    {
;;;839        return biGetGSR_TSO(eCh);
000d30  e24105ff          SUB      r0,r1,#0x3fc00000
000d34  e5900458          LDR      r0,[r0,#0x458]
000d38  e7e001d0          UBFX     r0,r0,#3,#1
;;;840    }
000d3c  e12fff1e          BX       lr
;;;841    
                          ENDP

                  u8TXCAN_GetSleepModeAcknowledge PROC
;;;843    
;;;844    uint8_t u8TXCAN_GetSleepModeAcknowledge(TXCAN_CH_e eCh)
000d40  e1a01000          MOV      r1,r0
;;;845    {
;;;846        return biGetGSR_SMA(eCh);
000d44  e24105ff          SUB      r0,r1,#0x3fc00000
000d48  e5900458          LDR      r0,[r0,#0x458]
000d4c  e7e00350          UBFX     r0,r0,#6,#1
;;;847    }
000d50  e12fff1e          BX       lr
;;;848    
                          ENDP

                  u8TXCAN_GetChangeConfigurationEnable PROC
;;;850    
;;;851    uint8_t u8TXCAN_GetChangeConfigurationEnable(TXCAN_CH_e eCh)
000d54  e1a01000          MOV      r1,r0
;;;852    {
;;;853        return biGetGSR_CCE(eCh);
000d58  e24105ff          SUB      r0,r1,#0x3fc00000
000d5c  e5900458          LDR      r0,[r0,#0x458]
000d60  e7e003d0          UBFX     r0,r0,#7,#1
;;;854    }
000d64  e12fff1e          BX       lr
;;;855    
                          ENDP

                  u8TXCAN_GetSuspendModeAcknowledge PROC
;;;857    
;;;858    uint8_t u8TXCAN_GetSuspendModeAcknowledge(TXCAN_CH_e eCh)
000d68  e1a01000          MOV      r1,r0
;;;859    {
;;;860        return biGetGSR_SUA(eCh);
000d6c  e24105ff          SUB      r0,r1,#0x3fc00000
000d70  e5900458          LDR      r0,[r0,#0x458]
000d74  e7e00450          UBFX     r0,r0,#8,#1
;;;861    }
000d78  e12fff1e          BX       lr
;;;862    
                          ENDP

                  u8TXCAN_GetTransmitMode PROC
;;;864    
;;;865    uint8_t u8TXCAN_GetTransmitMode(TXCAN_CH_e eCh)
000d7c  e1a01000          MOV      r1,r0
;;;866    {
;;;867        return biGetGSR_TM(eCh);
000d80  e24105ff          SUB      r0,r1,#0x3fc00000
000d84  e5900458          LDR      r0,[r0,#0x458]
000d88  e7e00550          UBFX     r0,r0,#10,#1
;;;868    }
000d8c  e12fff1e          BX       lr
;;;869    
                          ENDP

                  u8TXCAN_GetReceiveMode PROC
;;;871    
;;;872    uint8_t u8TXCAN_GetReceiveMode(TXCAN_CH_e eCh)
000d90  e1a01000          MOV      r1,r0
;;;873    {
;;;874        return biGetGSR_RM(eCh);
000d94  e24105ff          SUB      r0,r1,#0x3fc00000
000d98  e5900458          LDR      r0,[r0,#0x458]
000d9c  e7e005d0          UBFX     r0,r0,#11,#1
;;;875    }
000da0  e12fff1e          BX       lr
;;;876    
                          ENDP

                  u8TXCAN_GetMessageInSlot PROC
;;;878    
;;;879    uint8_t u8TXCAN_GetMessageInSlot(TXCAN_CH_e eCh)
000da4  e1a01000          MOV      r1,r0
;;;880    {
;;;881        return biGetGSR_MIS(eCh);
000da8  e24105ff          SUB      r0,r1,#0x3fc00000
000dac  e5900458          LDR      r0,[r0,#0x458]
000db0  e7e40650          UBFX     r0,r0,#12,#5
;;;882    }
000db4  e12fff1e          BX       lr
;;;883    
                          ENDP

                  u8TXCAN_GetReceiveErrorCounter PROC
;;;885    
;;;886    uint8_t u8TXCAN_GetReceiveErrorCounter(TXCAN_CH_e eCh)
000db8  e1a01000          MOV      r1,r0
;;;887    {
;;;888        return biGetCEC_REC(eCh);
000dbc  e59f0050          LDR      r0,|L1.3604|
000dc0  e0800001          ADD      r0,r0,r1
000dc4  e1d00ab8          LDRH     r0,[r0,#0xa8]
000dc8  e20000ff          AND      r0,r0,#0xff
;;;889    }
000dcc  e12fff1e          BX       lr
;;;890    
                          ENDP

                  u8TXCAN_GetTransmitErrorCounter PROC
;;;892    
;;;893    uint8_t u8TXCAN_GetTransmitErrorCounter(TXCAN_CH_e eCh)
000dd0  e1a01000          MOV      r1,r0
;;;894    {
;;;895        return biGetCEC_TEC(eCh);
000dd4  e59f0038          LDR      r0,|L1.3604|
000dd8  e0800001          ADD      r0,r0,r1
000ddc  e1d00ab8          LDRH     r0,[r0,#0xa8]
000de0  e1a00420          LSR      r0,r0,#8
;;;896    }
000de4  e12fff1e          BX       lr
                  |L1.3560|
                          DCD      au8LLDD_TXCAN_C_REVISION
                  |L1.3564|
                          DCD      au8LLDD_TXCAN_C_TAG
                  |L1.3568|
                          DCD      au8LLDD_TXCAN_H_REVISION
                  |L1.3572|
                          DCD      au8LLDD_TXCAN_H_TAG
                  |L1.3576|
                          DCD      au8LLDD_TXCAN_IO_H_REVISION
                  |L1.3580|
                          DCD      au8LLDD_TXCAN_IO_H_TAG
                  |L1.3584|
                          DCD      0xc0400008
                  |L1.3588|
                          DCD      0xc0400010
                  |L1.3592|
                          DCD      0xc0400018
                  |L1.3596|
                          DCD      u32MBOne
                  |L1.3600|
                          DCD      0xc04004c0
                  |L1.3604|
                          DCD      0xc0400400
                          ENDP

                  u8TXCAN_GetGlobalInterruptFlags PROC
;;;899    
;;;900    uint8_t u8TXCAN_GetGlobalInterruptFlags(TXCAN_CH_e eCh)
000e18  e1a01000          MOV      r1,r0
;;;901    {
;;;902        return u8GetGIF(eCh);
000e1c  e24105ff          SUB      r0,r1,#0x3fc00000
000e20  e5d00470          LDRB     r0,[r0,#0x470]
;;;903    }
000e24  e12fff1e          BX       lr
;;;904    
                          ENDP

                  vTXCAN_ClearGlobalInterruptFlags PROC
;;;906    
;;;907    void vTXCAN_ClearGlobalInterruptFlags(TXCAN_CH_e eCh, uint8_t u8Flags)
000e28  e24025ff          SUB      r2,r0,#0x3fc00000
;;;908    {
;;;909        vSetGIF(eCh, u8Flags);
000e2c  e5c21470          STRB     r1,[r2,#0x470]
;;;910    }
000e30  e12fff1e          BX       lr
;;;911    
                          ENDP

                  u8TXCAN_GetWarningLevelInterruptFlag PROC
;;;913    
;;;914    uint8_t u8TXCAN_GetWarningLevelInterruptFlag(TXCAN_CH_e eCh)
000e34  e1a01000          MOV      r1,r0
;;;915    {
;;;916        return biGetGIF_WLIF(eCh);
000e38  e24105ff          SUB      r0,r1,#0x3fc00000
000e3c  e5d00470          LDRB     r0,[r0,#0x470]
000e40  e2000001          AND      r0,r0,#1
;;;917    }
000e44  e12fff1e          BX       lr
;;;918    
                          ENDP

                  vTXCAN_ClearWarningLevelInterruptFlag PROC
;;;920    
;;;921    void vTXCAN_ClearWarningLevelInterruptFlag(TXCAN_CH_e eCh)
000e48  e24015ff          SUB      r1,r0,#0x3fc00000
;;;922    {
;;;923        vClrGIF_WLIF(eCh);
000e4c  e5d11470          LDRB     r1,[r1,#0x470]
000e50  e3c11001          BIC      r1,r1,#1
000e54  e2811001          ADD      r1,r1,#1
000e58  e24025ff          SUB      r2,r0,#0x3fc00000
000e5c  e5c21470          STRB     r1,[r2,#0x470]
;;;924    }
000e60  e12fff1e          BX       lr
;;;925    
                          ENDP

                  u8TXCAN_GetErrorPassiveInterruptFlag PROC
;;;927    
;;;928    uint8_t u8TXCAN_GetErrorPassiveInterruptFlag(TXCAN_CH_e eCh)
000e64  e1a01000          MOV      r1,r0
;;;929    {
;;;930        return biGetGIF_EPIF(eCh);
000e68  e24105ff          SUB      r0,r1,#0x3fc00000
000e6c  e5d00470          LDRB     r0,[r0,#0x470]
000e70  e7e000d0          UBFX     r0,r0,#1,#1
;;;931    }
000e74  e12fff1e          BX       lr
;;;932    
                          ENDP

                  vTXCAN_ClearErrorPassiveInterruptFlag PROC
;;;934    
;;;935    void vTXCAN_ClearErrorPassiveInterruptFlag(TXCAN_CH_e eCh)
000e78  e24015ff          SUB      r1,r0,#0x3fc00000
;;;936    {
;;;937        vClrGIF_EPIF(eCh);
000e7c  e5d11470          LDRB     r1,[r1,#0x470]
000e80  e3c11002          BIC      r1,r1,#2
000e84  e2811002          ADD      r1,r1,#2
000e88  e24025ff          SUB      r2,r0,#0x3fc00000
000e8c  e5c21470          STRB     r1,[r2,#0x470]
;;;938    }
000e90  e12fff1e          BX       lr
;;;939    
                          ENDP

                  u8TXCAN_GetBusOffInterruptFlag PROC
;;;941    
;;;942    uint8_t u8TXCAN_GetBusOffInterruptFlag(TXCAN_CH_e eCh)
000e94  e1a01000          MOV      r1,r0
;;;943    {
;;;944        return biGetGIF_BOIF(eCh);
000e98  e24105ff          SUB      r0,r1,#0x3fc00000
000e9c  e5d00470          LDRB     r0,[r0,#0x470]
000ea0  e7e00150          UBFX     r0,r0,#2,#1
;;;945    }
000ea4  e12fff1e          BX       lr
;;;946    
                          ENDP

                  vTXCAN_ClearBusOffInterruptFlag PROC
;;;948    
;;;949    void vTXCAN_ClearBusOffInterruptFlag(TXCAN_CH_e eCh)
000ea8  e24015ff          SUB      r1,r0,#0x3fc00000
;;;950    {
;;;951        vClrGIF_BOIF(eCh);
000eac  e5d11470          LDRB     r1,[r1,#0x470]
000eb0  e3c11004          BIC      r1,r1,#4
000eb4  e2811004          ADD      r1,r1,#4
000eb8  e24025ff          SUB      r2,r0,#0x3fc00000
000ebc  e5c21470          STRB     r1,[r2,#0x470]
;;;952    }
000ec0  e12fff1e          BX       lr
;;;953    
                          ENDP

                  u8TXCAN_GetTimeStampCounterOverflowInterruptFlag PROC
;;;955    
;;;956    uint8_t u8TXCAN_GetTimeStampCounterOverflowInterruptFlag(TXCAN_CH_e eCh)
000ec4  e1a01000          MOV      r1,r0
;;;957    {
;;;958        return biGetGIF_TSOIF(eCh);
000ec8  e24105ff          SUB      r0,r1,#0x3fc00000
000ecc  e5d00470          LDRB     r0,[r0,#0x470]
000ed0  e7e001d0          UBFX     r0,r0,#3,#1
;;;959    }
000ed4  e12fff1e          BX       lr
;;;960    
                          ENDP

                  vTXCAN_ClearTimeStampCounterOverflowInterruptFlag PROC
;;;962    
;;;963    void vTXCAN_ClearTimeStampCounterOverflowInterruptFlag(TXCAN_CH_e eCh)
000ed8  e24015ff          SUB      r1,r0,#0x3fc00000
;;;964    {
;;;965        vClrGIF_TSOIF(eCh);
000edc  e5d11470          LDRB     r1,[r1,#0x470]
000ee0  e3c11008          BIC      r1,r1,#8
000ee4  e2811008          ADD      r1,r1,#8
000ee8  e24025ff          SUB      r2,r0,#0x3fc00000
000eec  e5c21470          STRB     r1,[r2,#0x470]
;;;966    }
000ef0  e12fff1e          BX       lr
;;;967    
                          ENDP

                  u8TXCAN_GetTransmitAbortFlag PROC
;;;969    
;;;970    uint8_t u8TXCAN_GetTransmitAbortFlag(TXCAN_CH_e eCh)
000ef4  e1a01000          MOV      r1,r0
;;;971    {
;;;972        return biGetGIF_TRMABF(eCh);
000ef8  e24105ff          SUB      r0,r1,#0x3fc00000
000efc  e5d00470          LDRB     r0,[r0,#0x470]
000f00  e7e00250          UBFX     r0,r0,#4,#1
;;;973    }
000f04  e12fff1e          BX       lr
;;;974    
                          ENDP

                  vTXCAN_ClearTransmitAbortFlag PROC
;;;976    
;;;977    void vTXCAN_ClearTransmitAbortFlag(TXCAN_CH_e eCh)
000f08  e24015ff          SUB      r1,r0,#0x3fc00000
;;;978    {
;;;979        vClrGIF_TRMABF(eCh);
000f0c  e5d11470          LDRB     r1,[r1,#0x470]
000f10  e3c11010          BIC      r1,r1,#0x10
000f14  e2811010          ADD      r1,r1,#0x10
000f18  e24025ff          SUB      r2,r0,#0x3fc00000
000f1c  e5c21470          STRB     r1,[r2,#0x470]
;;;980    }
000f20  e12fff1e          BX       lr
;;;981    
                          ENDP

                  u8TXCAN_GetReceiveMessageLostInterruptFlag PROC
;;;983    
;;;984    uint8_t u8TXCAN_GetReceiveMessageLostInterruptFlag(TXCAN_CH_e eCh)
000f24  e1a01000          MOV      r1,r0
;;;985    {
;;;986        return biGetGIF_RMLIF(eCh);
000f28  e24105ff          SUB      r0,r1,#0x3fc00000
000f2c  e5d00470          LDRB     r0,[r0,#0x470]
000f30  e7e002d0          UBFX     r0,r0,#5,#1
;;;987    }
000f34  e12fff1e          BX       lr
;;;988    
                          ENDP

                  vTXCAN_ClearReceiveMessageLostInterruptFlag PROC
;;;990    
;;;991    void vTXCAN_ClearReceiveMessageLostInterruptFlag(TXCAN_CH_e eCh)
000f38  e24015ff          SUB      r1,r0,#0x3fc00000
;;;992    {
;;;993        vClrGIF_RMLIF(eCh);
000f3c  e5d11470          LDRB     r1,[r1,#0x470]
000f40  e3c11020          BIC      r1,r1,#0x20
000f44  e2811020          ADD      r1,r1,#0x20
000f48  e24025ff          SUB      r2,r0,#0x3fc00000
000f4c  e5c21470          STRB     r1,[r2,#0x470]
;;;994    }
000f50  e12fff1e          BX       lr
;;;995    
                          ENDP

                  u8TXCAN_GetWakeUpInterruptFlag PROC
;;;997    
;;;998    uint8_t u8TXCAN_GetWakeUpInterruptFlag(TXCAN_CH_e eCh)
000f54  e1a01000          MOV      r1,r0
;;;999    {
;;;1000       return biGetGIF_WUIF(eCh);
000f58  e24105ff          SUB      r0,r1,#0x3fc00000
000f5c  e5d00470          LDRB     r0,[r0,#0x470]
000f60  e7e00350          UBFX     r0,r0,#6,#1
;;;1001   }
000f64  e12fff1e          BX       lr
;;;1002   
                          ENDP

                  vTXCAN_ClearWakeUpInterruptFlag PROC
;;;1004   
;;;1005   void vTXCAN_ClearWakeUpInterruptFlag(TXCAN_CH_e eCh)
000f68  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1006   {
;;;1007       vClrGIF_WUIF(eCh);
000f6c  e5d11470          LDRB     r1,[r1,#0x470]
000f70  e3c11040          BIC      r1,r1,#0x40
000f74  e2811040          ADD      r1,r1,#0x40
000f78  e24025ff          SUB      r2,r0,#0x3fc00000
000f7c  e5c21470          STRB     r1,[r2,#0x470]
;;;1008   }
000f80  e12fff1e          BX       lr
;;;1009   
                          ENDP

                  u8TXCAN_GetRemoteFramePendingFlag PROC
;;;1011   
;;;1012   uint8_t u8TXCAN_GetRemoteFramePendingFlag(TXCAN_CH_e eCh)
000f84  e1a01000          MOV      r1,r0
;;;1013   {
;;;1014       return biGetGIF_RFPF(eCh);
000f88  e24105ff          SUB      r0,r1,#0x3fc00000
000f8c  e5d00470          LDRB     r0,[r0,#0x470]
000f90  e1a003a0          LSR      r0,r0,#7
;;;1015   }
000f94  e12fff1e          BX       lr
;;;1016   
                          ENDP

                  vTXCAN_ClearRemoteFramePendingFlag PROC
;;;1018   
;;;1019   void vTXCAN_ClearRemoteFramePendingFlag(TXCAN_CH_e eCh)
000f98  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1020   {
;;;1021       vClrGIF_RFPF(eCh);
000f9c  e5d11470          LDRB     r1,[r1,#0x470]
000fa0  e3c11080          BIC      r1,r1,#0x80
000fa4  e2811080          ADD      r1,r1,#0x80
000fa8  e24025ff          SUB      r2,r0,#0x3fc00000
000fac  e5c21470          STRB     r1,[r2,#0x470]
;;;1022   }
000fb0  e12fff1e          BX       lr
;;;1023   
                          ENDP

                  u8TXCAN_GetGlobalInterruptMasks PROC
;;;1025   
;;;1026   uint8_t u8TXCAN_GetGlobalInterruptMasks(TXCAN_CH_e eCh)
000fb4  e1a01000          MOV      r1,r0
;;;1027   {
;;;1028       return u8GetGIM(eCh);
000fb8  e24105ff          SUB      r0,r1,#0x3fc00000
000fbc  e5d00478          LDRB     r0,[r0,#0x478]
;;;1029   }
000fc0  e12fff1e          BX       lr
;;;1030   
                          ENDP

                  vTXCAN_SetGlobalInterruptMasks PROC
;;;1032   
;;;1033   void vTXCAN_SetGlobalInterruptMasks(TXCAN_CH_e eCh, uint8_t u8Masks)
000fc4  e24035ff          SUB      r3,r0,#0x3fc00000
;;;1034   {
;;;1035       uint8_t u8Value;
;;;1036   
;;;1037       u8Value = u8GetGIM(eCh) | u8Masks;
000fc8  e5d33478          LDRB     r3,[r3,#0x478]
000fcc  e1832001          ORR      r2,r3,r1
;;;1038       vSetGIM(eCh, u8Value);
000fd0  e24035ff          SUB      r3,r0,#0x3fc00000
000fd4  e5c32478          STRB     r2,[r3,#0x478]
;;;1039   }
000fd8  e12fff1e          BX       lr
;;;1040   
                          ENDP

                  u8TXCAN_GetWarningLevelInterruptMask PROC
;;;1042   
;;;1043   uint8_t u8TXCAN_GetWarningLevelInterruptMask(TXCAN_CH_e eCh)
000fdc  e1a01000          MOV      r1,r0
;;;1044   {
;;;1045       return biGetGIM_WLIM(eCh);
000fe0  e24105ff          SUB      r0,r1,#0x3fc00000
000fe4  e5d00478          LDRB     r0,[r0,#0x478]
000fe8  e2000001          AND      r0,r0,#1
;;;1046   }
000fec  e12fff1e          BX       lr
;;;1047   
                          ENDP

                  vTXCAN_SetWarningLevelInterruptMask PROC
;;;1049   
;;;1050   void vTXCAN_SetWarningLevelInterruptMask(TXCAN_CH_e eCh)
000ff0  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1051   {
;;;1052       vSetGIM_WLIM(eCh, 1);
000ff4  e5d11478          LDRB     r1,[r1,#0x478]
000ff8  e3c11001          BIC      r1,r1,#1
000ffc  e2811001          ADD      r1,r1,#1
001000  e24025ff          SUB      r2,r0,#0x3fc00000
001004  e5c21478          STRB     r1,[r2,#0x478]
;;;1053   }
001008  e12fff1e          BX       lr
;;;1054   
                          ENDP

                  u8TXCAN_GetErrorPassiveInterruptMask PROC
;;;1056   
;;;1057   uint8_t u8TXCAN_GetErrorPassiveInterruptMask(TXCAN_CH_e eCh)
00100c  e1a01000          MOV      r1,r0
;;;1058   {
;;;1059       return biGetGIM_EPIM(eCh);
001010  e24105ff          SUB      r0,r1,#0x3fc00000
001014  e5d00478          LDRB     r0,[r0,#0x478]
001018  e7e000d0          UBFX     r0,r0,#1,#1
;;;1060   }
00101c  e12fff1e          BX       lr
;;;1061   
                          ENDP

                  vTXCAN_SetErrorPassiveInterruptMask PROC
;;;1063   
;;;1064   void vTXCAN_SetErrorPassiveInterruptMask(TXCAN_CH_e eCh)
001020  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1065   {
;;;1066       vSetGIM_EPIM(eCh, 1);
001024  e5d11478          LDRB     r1,[r1,#0x478]
001028  e3c11002          BIC      r1,r1,#2
00102c  e2811002          ADD      r1,r1,#2
001030  e24025ff          SUB      r2,r0,#0x3fc00000
001034  e5c21478          STRB     r1,[r2,#0x478]
;;;1067   }
001038  e12fff1e          BX       lr
;;;1068   
                          ENDP

                  u8TXCAN_GetBusOffInterruptMask PROC
;;;1070   
;;;1071   uint8_t u8TXCAN_GetBusOffInterruptMask(TXCAN_CH_e eCh)
00103c  e1a01000          MOV      r1,r0
;;;1072   {
;;;1073       return biGetGIM_BOIM(eCh);
001040  e24105ff          SUB      r0,r1,#0x3fc00000
001044  e5d00478          LDRB     r0,[r0,#0x478]
001048  e7e00150          UBFX     r0,r0,#2,#1
;;;1074   }
00104c  e12fff1e          BX       lr
;;;1075   
                          ENDP

                  vTXCAN_SetBusOffInterruptMask PROC
;;;1077   
;;;1078   void vTXCAN_SetBusOffInterruptMask(TXCAN_CH_e eCh)
001050  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1079   {
;;;1080       vSetGIM_BOIM(eCh, 1);
001054  e5d11478          LDRB     r1,[r1,#0x478]
001058  e3c11004          BIC      r1,r1,#4
00105c  e2811004          ADD      r1,r1,#4
001060  e24025ff          SUB      r2,r0,#0x3fc00000
001064  e5c21478          STRB     r1,[r2,#0x478]
;;;1081   }
001068  e12fff1e          BX       lr
;;;1082   
                          ENDP

                  u8TXCAN_GetTimeStampCounterOverflowInterruptMask PROC
;;;1084   
;;;1085   uint8_t u8TXCAN_GetTimeStampCounterOverflowInterruptMask(TXCAN_CH_e eCh)
00106c  e1a01000          MOV      r1,r0
;;;1086   {
;;;1087       return biGetGIM_TSOIM(eCh);
001070  e24105ff          SUB      r0,r1,#0x3fc00000
001074  e5d00478          LDRB     r0,[r0,#0x478]
001078  e7e001d0          UBFX     r0,r0,#3,#1
;;;1088   }
00107c  e12fff1e          BX       lr
;;;1089   
                          ENDP

                  vTXCAN_SetTimeStampCounterOverflowInterruptMask PROC
;;;1091   
;;;1092   void vTXCAN_SetTimeStampCounterOverflowInterruptMask(TXCAN_CH_e eCh)
001080  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1093   {
;;;1094       vSetGIM_TSOIM(eCh, 1);
001084  e5d11478          LDRB     r1,[r1,#0x478]
001088  e3c11008          BIC      r1,r1,#8
00108c  e2811008          ADD      r1,r1,#8
001090  e24025ff          SUB      r2,r0,#0x3fc00000
001094  e5c21478          STRB     r1,[r2,#0x478]
;;;1095   }
001098  e12fff1e          BX       lr
;;;1096   
                          ENDP

                  u8TXCAN_GetTransmitAbortMask PROC
;;;1098   
;;;1099   uint8_t u8TXCAN_GetTransmitAbortMask(TXCAN_CH_e eCh)
00109c  e1a01000          MOV      r1,r0
;;;1100   {
;;;1101       return biGetGIM_TRMABFM(eCh);
0010a0  e24105ff          SUB      r0,r1,#0x3fc00000
0010a4  e5d00478          LDRB     r0,[r0,#0x478]
0010a8  e7e00250          UBFX     r0,r0,#4,#1
;;;1102   }
0010ac  e12fff1e          BX       lr
;;;1103   
                          ENDP

                  vTXCAN_SetTransmitAbortMask PROC
;;;1105   
;;;1106   void vTXCAN_SetTransmitAbortMask(TXCAN_CH_e eCh)
0010b0  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1107   {
;;;1108       vSetGIM_TRMABFM(eCh, 1);
0010b4  e5d11478          LDRB     r1,[r1,#0x478]
0010b8  e3c11010          BIC      r1,r1,#0x10
0010bc  e2811010          ADD      r1,r1,#0x10
0010c0  e24025ff          SUB      r2,r0,#0x3fc00000
0010c4  e5c21478          STRB     r1,[r2,#0x478]
;;;1109   }
0010c8  e12fff1e          BX       lr
;;;1110   
                          ENDP

                  u8TXCAN_GetReceiveMessageLostInterruptMask PROC
;;;1112   
;;;1113   uint8_t u8TXCAN_GetReceiveMessageLostInterruptMask(TXCAN_CH_e eCh)
0010cc  e1a01000          MOV      r1,r0
;;;1114   {
;;;1115       return biGetGIM_RMLIM(eCh);
0010d0  e24105ff          SUB      r0,r1,#0x3fc00000
0010d4  e5d00478          LDRB     r0,[r0,#0x478]
0010d8  e7e002d0          UBFX     r0,r0,#5,#1
;;;1116   }
0010dc  e12fff1e          BX       lr
;;;1117   
                          ENDP

                  vTXCAN_SetReceiveMessageLostInterruptMask PROC
;;;1119   
;;;1120   void vTXCAN_SetReceiveMessageLostInterruptMask(TXCAN_CH_e eCh)
0010e0  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1121   {
;;;1122       vSetGIM_RMLIM(eCh, 1);
0010e4  e5d11478          LDRB     r1,[r1,#0x478]
0010e8  e3c11020          BIC      r1,r1,#0x20
0010ec  e2811020          ADD      r1,r1,#0x20
0010f0  e24025ff          SUB      r2,r0,#0x3fc00000
0010f4  e5c21478          STRB     r1,[r2,#0x478]
;;;1123   }
0010f8  e12fff1e          BX       lr
;;;1124   
                          ENDP

                  u8TXCAN_GetWakeUpInterruptMask PROC
;;;1126   
;;;1127   uint8_t u8TXCAN_GetWakeUpInterruptMask(TXCAN_CH_e eCh)
0010fc  e1a01000          MOV      r1,r0
;;;1128   {
;;;1129       return biGetGIM_WUIM(eCh);
001100  e24105ff          SUB      r0,r1,#0x3fc00000
001104  e5d00478          LDRB     r0,[r0,#0x478]
001108  e7e00350          UBFX     r0,r0,#6,#1
;;;1130   }
00110c  e12fff1e          BX       lr
;;;1131   
                          ENDP

                  vTXCAN_SetWakeUpInterruptMask PROC
;;;1133   
;;;1134   void vTXCAN_SetWakeUpInterruptMask(TXCAN_CH_e eCh)
001110  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1135   {
;;;1136       vSetGIM_WUIM(eCh, 1);
001114  e5d11478          LDRB     r1,[r1,#0x478]
001118  e3c11040          BIC      r1,r1,#0x40
00111c  e2811040          ADD      r1,r1,#0x40
001120  e24025ff          SUB      r2,r0,#0x3fc00000
001124  e5c21478          STRB     r1,[r2,#0x478]
;;;1137   }
001128  e12fff1e          BX       lr
;;;1138   
                          ENDP

                  u8TXCAN_GetRemoteFramePendingMask PROC
;;;1140   
;;;1141   uint8_t u8TXCAN_GetRemoteFramePendingMask(TXCAN_CH_e eCh)
00112c  e1a01000          MOV      r1,r0
;;;1142   {
;;;1143       return biGetGIM_RFPM(eCh);
001130  e24105ff          SUB      r0,r1,#0x3fc00000
001134  e5d00478          LDRB     r0,[r0,#0x478]
001138  e1a003a0          LSR      r0,r0,#7
;;;1144   }
00113c  e12fff1e          BX       lr
;;;1145   
                          ENDP

                  vTXCAN_SetRemoteFramePendingMask PROC
;;;1147   
;;;1148   void vTXCAN_SetRemoteFramePendingMask(TXCAN_CH_e eCh)
001140  e24015ff          SUB      r1,r0,#0x3fc00000
;;;1149   {
;;;1150       vSetGIM_RFPM(eCh, 1);
001144  e5d11478          LDRB     r1,[r1,#0x478]
001148  e3c11080          BIC      r1,r1,#0x80
00114c  e2811080          ADD      r1,r1,#0x80
001150  e24025ff          SUB      r2,r0,#0x3fc00000
001154  e5c21478          STRB     r1,[r2,#0x478]
;;;1151   }
001158  e12fff1e          BX       lr
;;;1152   
                          ENDP

                  vTXCAN_EnableInterrupt PROC
;;;1154   
;;;1155   void vTXCAN_EnableInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
00115c  e92d4010          PUSH     {r4,lr}
;;;1156   {
;;;1157       uint32_t u32Value;
;;;1158   
;;;1159       u32Value = u32GetMBIM(eCh) | u32MBOne[eMB];
001160  e24035ff          SUB      r3,r0,#0x3fc00000
001164  e5933490          LDR      r3,[r3,#0x490]
001168  e51f4364          LDR      r4,|L1.3596|
00116c  e7944101          LDR      r4,[r4,r1,LSL #2]
001170  e1832004          ORR      r2,r3,r4
;;;1160       vSetMBIM(eCh, u32Value);
001174  e24035ff          SUB      r3,r0,#0x3fc00000
001178  e5832490          STR      r2,[r3,#0x490]
;;;1161   }
00117c  e8bd8010          POP      {r4,pc}
;;;1162   
                          ENDP

                  vTXCAN_DisableInterrupt PROC
;;;1164   
;;;1165   void vTXCAN_DisableInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
001180  e92d4010          PUSH     {r4,lr}
;;;1166   {
;;;1167       uint32_t u32Value;
;;;1168   
;;;1169       u32Value = u32GetMBIM(eCh) & ~u32MBOne[eMB];
001184  e24035ff          SUB      r3,r0,#0x3fc00000
001188  e5933490          LDR      r3,[r3,#0x490]
00118c  e51f4388          LDR      r4,|L1.3596|
001190  e7944101          LDR      r4,[r4,r1,LSL #2]
001194  e1c32004          BIC      r2,r3,r4
;;;1170       vSetMBIM(eCh, u32Value);
001198  e24035ff          SUB      r3,r0,#0x3fc00000
00119c  e5832490          STR      r2,[r3,#0x490]
;;;1171   }
0011a0  e8bd8010          POP      {r4,pc}
;;;1172   
                          ENDP

                  vTXCAN_EnableInterrupts PROC
;;;1174   
;;;1175   void vTXCAN_EnableInterrupts(TXCAN_CH_e eCh, uint32_t u32Value)
0011a4  e24025ff          SUB      r2,r0,#0x3fc00000
;;;1176   {
;;;1177       vSetMBIM(eCh, u32Value);
0011a8  e5821490          STR      r1,[r2,#0x490]
;;;1178   }
0011ac  e12fff1e          BX       lr
;;;1179   
                          ENDP

                  vTXCAN_ClearTransmitInterrupts PROC
;;;1181   
;;;1182   void vTXCAN_ClearTransmitInterrupts(TXCAN_CH_e eCh, uint32_t u32Value)
0011b0  e24025ff          SUB      r2,r0,#0x3fc00000
;;;1183   {
;;;1184       vSetMBTIF(eCh, u32Value);
0011b4  e5821480          STR      r1,[r2,#0x480]
;;;1185   }
0011b8  e12fff1e          BX       lr
;;;1186   
                          ENDP

                  vTXCAN_ClearTransmitInterrupt PROC
;;;1188   
;;;1189   void vTXCAN_ClearTransmitInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0011bc  e92d4010          PUSH     {r4,lr}
;;;1190   {
;;;1191       uint32_t u32Value;
;;;1192   
;;;1193       u32Value = u32GetMBTIF(eCh) | u32MBOne[eMB];
0011c0  e24035ff          SUB      r3,r0,#0x3fc00000
0011c4  e5933480          LDR      r3,[r3,#0x480]
0011c8  e51f43c4          LDR      r4,|L1.3596|
0011cc  e7944101          LDR      r4,[r4,r1,LSL #2]
0011d0  e1832004          ORR      r2,r3,r4
;;;1194       vSetMBTIF(eCh, u32Value);
0011d4  e24035ff          SUB      r3,r0,#0x3fc00000
0011d8  e5832480          STR      r2,[r3,#0x480]
;;;1195   }
0011dc  e8bd8010          POP      {r4,pc}
;;;1196   
                          ENDP

                  u32TXCAN_GetTransmitInterrupts PROC
;;;1198   
;;;1199   uint32_t u32TXCAN_GetTransmitInterrupts(TXCAN_CH_e eCh)
0011e0  e1a01000          MOV      r1,r0
;;;1200   {
;;;1201       return u32GetMBTIF(eCh);
0011e4  e24105ff          SUB      r0,r1,#0x3fc00000
0011e8  e5900480          LDR      r0,[r0,#0x480]
;;;1202   }
0011ec  e12fff1e          BX       lr
;;;1203   
                          ENDP

                  u8TXCAN_GetTransmitInterrupt PROC
;;;1205   
;;;1206   uint8_t u8TXCAN_GetTransmitInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
0011f0  e92d4010          PUSH     {r4,lr}
;;;1207   {
0011f4  e1a02000          MOV      r2,r0
;;;1208       uint32_t u32Value;
;;;1209   
;;;1210       u32Value = u32GetMBTIF(eCh) & u32MBOne[eMB];
0011f8  e24205ff          SUB      r0,r2,#0x3fc00000
0011fc  e5900480          LDR      r0,[r0,#0x480]
001200  e51f43fc          LDR      r4,|L1.3596|
001204  e7944101          LDR      r4,[r4,r1,LSL #2]
001208  e0003004          AND      r3,r0,r4
;;;1211       if (u32Value == 0)
00120c  e3530000          CMP      r3,#0
001210  1a000001          BNE      |L1.4636|
;;;1212       {
;;;1213           return 0;
001214  e3a00000          MOV      r0,#0
                  |L1.4632|
;;;1214       }
;;;1215       else
;;;1216       {
;;;1217           return 1;
;;;1218       }
;;;1219   }
001218  e8bd8010          POP      {r4,pc}
                  |L1.4636|
00121c  e3a00001          MOV      r0,#1                 ;1217
001220  eafffffc          B        |L1.4632|
;;;1220   
                          ENDP

                  vTXCAN_ClearReceiveInterrupts PROC
;;;1222   
;;;1223   void vTXCAN_ClearReceiveInterrupts(TXCAN_CH_e eCh, uint32_t u32Value)
001224  e24025ff          SUB      r2,r0,#0x3fc00000
;;;1224   {
;;;1225       vSetMBRIF(eCh, u32Value);
001228  e5821488          STR      r1,[r2,#0x488]
;;;1226   }
00122c  e12fff1e          BX       lr
;;;1227   
                          ENDP

                  vTXCAN_ClearReceiveInterrupt PROC
;;;1229   
;;;1230   void vTXCAN_ClearReceiveInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
001230  e92d4010          PUSH     {r4,lr}
;;;1231   {
;;;1232       uint32_t u32Value;
;;;1233   
;;;1234       u32Value = u32GetMBRIF(eCh) | u32MBOne[eMB];
001234  e24035ff          SUB      r3,r0,#0x3fc00000
001238  e5933488          LDR      r3,[r3,#0x488]
00123c  e51f4438          LDR      r4,|L1.3596|
001240  e7944101          LDR      r4,[r4,r1,LSL #2]
001244  e1832004          ORR      r2,r3,r4
;;;1235       vSetMBRIF(eCh, u32Value);
001248  e24035ff          SUB      r3,r0,#0x3fc00000
00124c  e5832488          STR      r2,[r3,#0x488]
;;;1236   }
001250  e8bd8010          POP      {r4,pc}
;;;1237   
                          ENDP

                  u32TXCAN_GetReceiveInterrupts PROC
;;;1239   
;;;1240   uint32_t u32TXCAN_GetReceiveInterrupts(TXCAN_CH_e eCh)
001254  e1a01000          MOV      r1,r0
;;;1241   {
;;;1242       return u32GetMBRIF(eCh);
001258  e24105ff          SUB      r0,r1,#0x3fc00000
00125c  e5900488          LDR      r0,[r0,#0x488]
;;;1243   }
001260  e12fff1e          BX       lr
;;;1244   
                          ENDP

                  u8TXCAN_GetReceiveInterrupt PROC
;;;1246   
;;;1247   uint8_t u8TXCAN_GetReceiveInterrupt(TXCAN_CH_e eCh, TXCAN_MB_e eMB)
001264  e92d4010          PUSH     {r4,lr}
;;;1248   {
001268  e1a02000          MOV      r2,r0
;;;1249       uint32_t u32Value;
;;;1250   
;;;1251       u32Value = u32GetMBRIF(eCh) & u32MBOne[eMB];
00126c  e24205ff          SUB      r0,r2,#0x3fc00000
001270  e5900488          LDR      r0,[r0,#0x488]
001274  e51f4470          LDR      r4,|L1.3596|
001278  e7944101          LDR      r4,[r4,r1,LSL #2]
00127c  e0003004          AND      r3,r0,r4
;;;1252       if (u32Value == 0)
001280  e3530000          CMP      r3,#0
001284  1a000001          BNE      |L1.4752|
;;;1253       {
;;;1254           return 0;
001288  e3a00000          MOV      r0,#0
                  |L1.4748|
;;;1255       }
;;;1256       else
;;;1257       {
;;;1258           return 1;
;;;1259       }
;;;1260   }
00128c  e8bd8010          POP      {r4,pc}
                  |L1.4752|
001290  e3a00001          MOV      r0,#1                 ;1258
001294  eafffffc          B        |L1.4748|
;;;1261   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  au8LLDD_TXCAN_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313020          DCB      0x2e,0x31,0x30,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_TXCAN_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_TXCAN_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313220          DCB      0x2e,0x31,0x32,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_TXCAN_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_TXCAN_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313720          DCB      0x2e,0x31,0x37,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_TXCAN_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
                  u32MBOne
                          DCD      0x00000001
                          DCD      0x00000002
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000010
                          DCD      0x00000020
                          DCD      0x00000040
                          DCD      0x00000080
                          DCD      0x00000100
                          DCD      0x00000200
                          DCD      0x00000400
                          DCD      0x00000800
                          DCD      0x00001000
                          DCD      0x00002000
                          DCD      0x00004000
                          DCD      0x00008000
                          DCD      0x00010000
                          DCD      0x00020000
                          DCD      0x00040000
                          DCD      0x00080000
                          DCD      0x00100000
                          DCD      0x00200000
                          DCD      0x00400000
                          DCD      0x00800000
                          DCD      0x01000000
                          DCD      0x02000000
                          DCD      0x04000000
                          DCD      0x08000000
                          DCD      0x10000000
                          DCD      0x20000000
                          DCD      0x40000000
                          DCD      0x80000000
