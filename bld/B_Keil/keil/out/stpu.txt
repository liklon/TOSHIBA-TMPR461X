; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\stpu.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\stpu.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\stpu.crf ..\..\..\..\lldd\src\stpu.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vSTPU_GetVersion PROC
;;;52     
;;;53     void vSTPU_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;54                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;55                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;56     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;57        *pau8ModuleRevision = &au8LLDD_STPU_C_REVISION[0];
000008  e59f6254          LDR      r6,|L1.612|
00000c  e5806000          STR      r6,[r0,#0]
;;;58        *pau8ModuleTag      = &au8LLDD_STPU_C_TAG[0];
000010  e59f6250          LDR      r6,|L1.616|
000014  e5816000          STR      r6,[r1,#0]
;;;59        *pau8HeaderRevision = &au8LLDD_STPU_H_REVISION[0];
000018  e59f624c          LDR      r6,|L1.620|
00001c  e5826000          STR      r6,[r2,#0]
;;;60        *pau8HeaderTag      = &au8LLDD_STPU_H_TAG[0];
000020  e59f6248          LDR      r6,|L1.624|
000024  e5836000          STR      r6,[r3,#0]
;;;61        *pau8IORevision     = &au8LLDD_STPU_IO_H_REVISION[0];
000028  e59f6244          LDR      r6,|L1.628|
00002c  e5846000          STR      r6,[r4,#0]
;;;62        *pau8IOTag          = &au8LLDD_STPU_IO_H_TAG[0];
000030  e59f6240          LDR      r6,|L1.632|
000034  e5856000          STR      r6,[r5,#0]
;;;63     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;64     
                          ENDP

                  u32STPU_GetVersion PROC
;;;66     /****************************************************************************/
;;;67     uint32_t u32STPU_GetVersion(void)
00003c  e59f0238          LDR      r0,|L1.636|
;;;68     {
;;;69         return u32GetSTPU_TMRVER();
000040  e5900000          LDR      r0,[r0,#0]
;;;70     }
000044  e12fff1e          BX       lr
;;;71     
                          ENDP

                  vSTPU_ConfigureCommonPrescaler PROC
;;;73     /****************************************************************************/
;;;74     void vSTPU_ConfigureCommonPrescaler(stpu_common_prescaler_config_st stConfig)
000048  e92d4001          PUSH     {r0,lr}
;;;75     {
;;;76         vSetSTPU_CFG_CMPRSCLR(stConfig.u8CommonPrescalerValue);
00004c  e5dd1000          LDRB     r1,[sp,#0]
000050  e59f0224          LDR      r0,|L1.636|
000054  e5900004          LDR      r0,[r0,#4]
000058  e7c50011          BFI      r0,r1,#0,#6
00005c  e59f1218          LDR      r1,|L1.636|
000060  e5810004          STR      r0,[r1,#4]
;;;77         vSetSTPU_CFG_CMPRSCLREN(stConfig.eCommonPrescalerEnable);
000064  e5dd1001          LDRB     r1,[sp,#1]
000068  e59f020c          LDR      r0,|L1.636|
00006c  e5900004          LDR      r0,[r0,#4]
000070  e7c80411          BFI      r0,r1,#8,#1
000074  e59f1200          LDR      r1,|L1.636|
000078  e5810004          STR      r0,[r1,#4]
;;;78     }
00007c  e8bd8008          POP      {r3,pc}
;;;79     
                          ENDP

                  vSTPU_EnableInterrupt PROC
;;;81     /****************************************************************************/
;;;82     void vSTPU_EnableInterrupt(stpu_enable_e eEn)
000080  e59f11f4          LDR      r1,|L1.636|
;;;83     {
;;;84         vSetSTPU_CFG_INTREN(eEn);
000084  e5911004          LDR      r1,[r1,#4]
000088  e7d01810          BFI      r1,r0,#16,#1
00008c  e59f21e8          LDR      r2,|L1.636|
000090  e5821004          STR      r1,[r2,#4]
;;;85     }
000094  e12fff1e          BX       lr
;;;86     
                          ENDP

                  vSTPU_EnableDiagnosisMode PROC
;;;88     /****************************************************************************/
;;;89     void vSTPU_EnableDiagnosisMode(stpu_enable_e eEn)
000098  e59f11dc          LDR      r1,|L1.636|
;;;90     {
;;;91         vSetSTPU_CFG_DIGNMDEN(eEn);
00009c  e5911004          LDR      r1,[r1,#4]
0000a0  e7d81c10          BFI      r1,r0,#24,#1
0000a4  e59f21d0          LDR      r2,|L1.636|
0000a8  e5821004          STR      r1,[r2,#4]
;;;92     }
0000ac  e12fff1e          BX       lr
;;;93     
                          ENDP

                  u32STPU_GetTimerStatusBits PROC
;;;95     /****************************************************************************/
;;;96     uint32_t u32STPU_GetTimerStatusBits(void)
0000b0  e59f01c4          LDR      r0,|L1.636|
;;;97     {
;;;98         return biGetSTPU_TMRST_IST();
0000b4  e5900008          LDR      r0,[r0,#8]
;;;99     }
0000b8  e12fff1e          BX       lr
;;;100    
                          ENDP

                  vSTPU_DisableInterrupts PROC
;;;102    /****************************************************************************/
;;;103    void vSTPU_DisableInterrupts(uint32_t u32Value)
0000bc  e59f11b8          LDR      r1,|L1.636|
;;;104    {
;;;105        vSetSTPU_TMRINTDS_INTD(u32Value);
0000c0  e591100c          LDR      r1,[r1,#0xc]
0000c4  e59f11b0          LDR      r1,|L1.636|
0000c8  e581000c          STR      r0,[r1,#0xc]
;;;106    }
0000cc  e12fff1e          BX       lr
;;;107    
                          ENDP

                  u32STPU_GetInterruptStatusBits PROC
;;;109    /****************************************************************************/
;;;110    uint32_t u32STPU_GetInterruptStatusBits(void)
0000d0  e59f01a4          LDR      r0,|L1.636|
;;;111    {
;;;112        return biGetSTPU_TMRINTRST_INTST();
0000d4  e5900010          LDR      r0,[r0,#0x10]
;;;113    }
0000d8  e12fff1e          BX       lr
;;;114    
                          ENDP

                  vSTPU_EnableInterrupts PROC
;;;116    /****************************************************************************/
;;;117    void vSTPU_EnableInterrupts(uint32_t u32Value)
0000dc  e59f1198          LDR      r1,|L1.636|
;;;118    {
;;;119        vSetSTPU_TMRINTREN_IEN(u32Value);
0000e0  e5911014          LDR      r1,[r1,#0x14]
0000e4  e59f1190          LDR      r1,|L1.636|
0000e8  e5810014          STR      r0,[r1,#0x14]
;;;120    }
0000ec  e12fff1e          BX       lr
;;;121    
                          ENDP

                  vSTPU_ClearInterrupts PROC
;;;123    /****************************************************************************/
;;;124    void vSTPU_ClearInterrupts(uint32_t u32Value)
0000f0  e59f1184          LDR      r1,|L1.636|
;;;125    {
;;;126        vSetSTPU_TMRINTRCL_ICL(u32Value);
0000f4  e5911018          LDR      r1,[r1,#0x18]
0000f8  e59f117c          LDR      r1,|L1.636|
0000fc  e5810018          STR      r0,[r1,#0x18]
;;;127    }
000100  e12fff1e          BX       lr
;;;128    
                          ENDP

                  i32STPU_Continue PROC
;;;130    /****************************************************************************/
;;;131    int32_t i32STPU_Continue(stpu_dev_e eDevice)
000104  e1a01000          MOV      r1,r0
;;;132    {
;;;133        int32_t i32Res = C_SUCCESS;
000108  e3a00000          MOV      r0,#0
;;;134    
;;;135        if (eDevice <= STPU7)
00010c  e3510007          CMP      r1,#7
000110  ca00000a          BGT      |L1.320|
;;;136        {
;;;137            vSetSTPU_TMRCTRL_CON(eDevice, 1);
000114  e1a02201          LSL      r2,r1,#4
000118  e282220d          ADD      r2,r2,#0xd0000000
00011c  e24226ff          SUB      r2,r2,#0xff00000
000120  e592201c          LDR      r2,[r2,#0x1c]
000124  e3c22202          BIC      r2,r2,#0x20000000
000128  e2822202          ADD      r2,r2,#0x20000000
00012c  e1a03201          LSL      r3,r1,#4
000130  e283320d          ADD      r3,r3,#0xd0000000
000134  e24336ff          SUB      r3,r3,#0xff00000
000138  e583201c          STR      r2,[r3,#0x1c]
00013c  ea000000          B        |L1.324|
                  |L1.320|
;;;138        }
;;;139        else
;;;140        {
;;;141            i32Res = C_FAILED;
000140  e3e00000          MVN      r0,#0
                  |L1.324|
;;;142        }
;;;143    
;;;144        return i32Res;
;;;145    }
000144  e12fff1e          BX       lr
;;;146    
                          ENDP

                  i32STPU_Stop PROC
;;;148    /****************************************************************************/
;;;149    int32_t i32STPU_Stop(stpu_dev_e eDevice)
000148  e1a01000          MOV      r1,r0
;;;150    {
;;;151        int32_t i32Res = C_SUCCESS;
00014c  e3a00000          MOV      r0,#0
;;;152    
;;;153        if (eDevice <= STPU7)
000150  e3510007          CMP      r1,#7
000154  ca00000a          BGT      |L1.388|
;;;154        {
;;;155            vSetSTPU_TMRCTRL_STP(eDevice, 1);
000158  e1a02201          LSL      r2,r1,#4
00015c  e282220d          ADD      r2,r2,#0xd0000000
000160  e24226ff          SUB      r2,r2,#0xff00000
000164  e592201c          LDR      r2,[r2,#0x1c]
000168  e3c22101          BIC      r2,r2,#0x40000000
00016c  e2822101          ADD      r2,r2,#0x40000000
000170  e1a03201          LSL      r3,r1,#4
000174  e283320d          ADD      r3,r3,#0xd0000000
000178  e24336ff          SUB      r3,r3,#0xff00000
00017c  e583201c          STR      r2,[r3,#0x1c]
000180  ea000000          B        |L1.392|
                  |L1.388|
;;;156        }
;;;157        else
;;;158        {
;;;159            i32Res = C_FAILED;
000184  e3e00000          MVN      r0,#0
                  |L1.392|
;;;160        }
;;;161    
;;;162        return i32Res;
;;;163    }
000188  e12fff1e          BX       lr
;;;164    
                          ENDP

                  i32STPU_Start PROC
;;;166    /****************************************************************************/
;;;167    int32_t i32STPU_Start(stpu_dev_e eDevice)
00018c  e1a01000          MOV      r1,r0
;;;168    {
;;;169        int32_t i32Res = C_SUCCESS;
000190  e3a00000          MOV      r0,#0
;;;170    
;;;171        if (eDevice <= STPU7)
000194  e3510007          CMP      r1,#7
000198  ca00000a          BGT      |L1.456|
;;;172        {
;;;173            vSetSTPU_TMRCTRL_STR(eDevice, 1);
00019c  e1a02201          LSL      r2,r1,#4
0001a0  e282220d          ADD      r2,r2,#0xd0000000
0001a4  e24226ff          SUB      r2,r2,#0xff00000
0001a8  e592201c          LDR      r2,[r2,#0x1c]
0001ac  e3c22102          BIC      r2,r2,#0x80000000
0001b0  e2822102          ADD      r2,r2,#0x80000000
0001b4  e1a03201          LSL      r3,r1,#4
0001b8  e283320d          ADD      r3,r3,#0xd0000000
0001bc  e24336ff          SUB      r3,r3,#0xff00000
0001c0  e583201c          STR      r2,[r3,#0x1c]
0001c4  ea000000          B        |L1.460|
                  |L1.456|
;;;174        }
;;;175        else
;;;176        {
;;;177            i32Res = C_FAILED;
0001c8  e3e00000          MVN      r0,#0
                  |L1.460|
;;;178        }
;;;179    
;;;180        return i32Res;
;;;181    }
0001cc  e12fff1e          BX       lr
;;;182    
                          ENDP

                  vSTPU_Configure PROC
;;;184    /****************************************************************************/
;;;185    void vSTPU_Configure(stpu_dev_e eDevice, stpu_timer_config_st stConfig)
0001d0  e92d4007          PUSH     {r0-r2,lr}
;;;186    {
;;;187        vSetSTPU_TMRMDCTRL_TMRMD(eDevice, stConfig.eTimerMode);
0001d4  e5dd2004          LDRB     r2,[sp,#4]
0001d8  e1a01200          LSL      r1,r0,#4
0001dc  e281120d          ADD      r1,r1,#0xd0000000
0001e0  e24116ff          SUB      r1,r1,#0xff00000
0001e4  e5911020          LDR      r1,[r1,#0x20]
0001e8  e7c11012          BFI      r1,r2,#0,#2
0001ec  e1a02200          LSL      r2,r0,#4
0001f0  e282220d          ADD      r2,r2,#0xd0000000
0001f4  e24226ff          SUB      r2,r2,#0xff00000
0001f8  e5821020          STR      r1,[r2,#0x20]
;;;188        vSetSTPU_TMRMDCTRL_TMRPRLD(eDevice, stConfig.ePreloadEnable);
0001fc  e5dd2005          LDRB     r2,[sp,#5]
000200  e1a01200          LSL      r1,r0,#4
000204  e281120d          ADD      r1,r1,#0xd0000000
000208  e24116ff          SUB      r1,r1,#0xff00000
00020c  e5911020          LDR      r1,[r1,#0x20]
000210  e7c21112          BFI      r1,r2,#2,#1
000214  e1a02200          LSL      r2,r0,#4
000218  e282220d          ADD      r2,r2,#0xd0000000
00021c  e24226ff          SUB      r2,r2,#0xff00000
000220  e5821020          STR      r1,[r2,#0x20]
;;;189        vSetSTPU_TMRBTPL_BTPL(eDevice, stConfig.u32TimerBudgetValue);
000224  e1a02200          LSL      r2,r0,#4
000228  e282220d          ADD      r2,r2,#0xd0000000
00022c  e24226ff          SUB      r2,r2,#0xff00000
000230  e59d1008          LDR      r1,[sp,#8]
000234  e5922024          LDR      r2,[r2,#0x24]
000238  e1a02200          LSL      r2,r0,#4
00023c  e282220d          ADD      r2,r2,#0xd0000000
000240  e24226ff          SUB      r2,r2,#0xff00000
000244  e5821024          STR      r1,[r2,#0x24]
;;;190    }
000248  e8bd800e          POP      {r1-r3,pc}
;;;191    
                          ENDP

                  u32STPU_GetTimerValue PROC
;;;193    /****************************************************************************/
;;;194    uint32_t u32STPU_GetTimerValue(stpu_dev_e eDevice)
00024c  e1a01000          MOV      r1,r0
;;;195    {
;;;196        return biGetSTPU_TMRCCV_TMRCCV(eDevice);
000250  e1a00201          LSL      r0,r1,#4
000254  e280020d          ADD      r0,r0,#0xd0000000
000258  e24006ff          SUB      r0,r0,#0xff00000
00025c  e5900028          LDR      r0,[r0,#0x28]
;;;197    }
000260  e12fff1e          BX       lr
;;;198    
                          ENDP

                  |L1.612|
                          DCD      au8LLDD_STPU_C_REVISION
                  |L1.616|
                          DCD      au8LLDD_STPU_C_TAG
                  |L1.620|
                          DCD      au8LLDD_STPU_H_REVISION
                  |L1.624|
                          DCD      au8LLDD_STPU_H_TAG
                  |L1.628|
                          DCD      au8LLDD_STPU_IO_H_REVISION
                  |L1.632|
                          DCD      au8LLDD_STPU_IO_H_TAG
                  |L1.636|
                          DCD      0xc0100000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_STPU_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e362024          DCB      0x2e,0x36,0x20,0x24
000010  00                DCB      0x00
                  au8LLDD_STPU_C_TAG
000011  244e61            DCB      0x24,0x4e,0x61
000014  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000018  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
00001c  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000020  202400            DCB      0x20,0x24,0x00
                  au8LLDD_STPU_H_REVISION
000023  24                DCB      0x24
000024  52657669          DCB      0x52,0x65,0x76,0x69
000028  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00002c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000030  37202400          DCB      0x37,0x20,0x24,0x00
                  au8LLDD_STPU_H_TAG
000034  244e616d          DCB      0x24,0x4e,0x61,0x6d
000038  653a204c          DCB      0x65,0x3a,0x20,0x4c
00003c  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000040  315f3620          DCB      0x31,0x5f,0x36,0x20
000044  2400              DCB      0x24,0x00
                  au8LLDD_STPU_IO_H_REVISION
000046  2452              DCB      0x24,0x52
000048  65766973          DCB      0x65,0x76,0x69,0x73
00004c  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000050  20312e39          DCB      0x20,0x31,0x2e,0x39
000054  202400            DCB      0x20,0x24,0x00
                  au8LLDD_STPU_IO_H_TAG
000057  24                DCB      0x24
000058  4e616d65          DCB      0x4e,0x61,0x6d,0x65
00005c  3a204c4c          DCB      0x3a,0x20,0x4c,0x4c
000060  44445f31          DCB      0x44,0x44,0x5f,0x31
000064  5f362024          DCB      0x5f,0x36,0x20,0x24
000068  00                DCB      0x00
