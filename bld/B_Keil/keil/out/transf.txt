; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\transf.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\transf.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\transf.crf ..\..\..\..\lldd\src\transf.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTransf_GetVersion PROC
;;;70     
;;;71     void vTransf_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4010          PUSH     {r4,lr}
;;;72                             uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag)
;;;73     {
;;;74          *pau8ModuleRevision = &au8LLDD_GA_TRANSF_C_REVISION[0];
000004  e59f4ad8          LDR      r4,|L1.2788|
000008  e5804000          STR      r4,[r0,#0]
;;;75          *pau8ModuleTag      = &au8LLDD_GA_TRANSF_C_TAG[0];
00000c  e59f4ad4          LDR      r4,|L1.2792|
000010  e5814000          STR      r4,[r1,#0]
;;;76          *pau8HeaderRevision = &au8LLDD_GA_TRANSF_H_REVISION[0];
000014  e59f4ad0          LDR      r4,|L1.2796|
000018  e5824000          STR      r4,[r2,#0]
;;;77          *pau8HeaderTag      = &au8LLDD_GA_TRANSF_H_TAG[0];
00001c  e59f4acc          LDR      r4,|L1.2800|
000020  e5834000          STR      r4,[r3,#0]
;;;78     }
000024  e8bd8010          POP      {r4,pc}
;;;79     
                          ENDP

                  vTransf_SetMemSrc PROC
;;;80     /* ....................................................................... */
;;;81     void vTransf_SetMemSrc(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList)
000028  e92d40f0          PUSH     {r4-r7,lr}
;;;82     {
;;;83         uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00002c  e3044000          MOVW     r4,#0x4000
000030  e7943002          LDR      r3,[r4,r2]
;;;84     
;;;85     #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;86     
;;;87         uint32_t u32NeededDW  = 2;
;;;88     
;;;89         u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;90         
;;;91         /* check if there is enough space in command list: */
;;;92         if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;93         {
;;;94           pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;95           pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;96           return;
;;;97         }
;;;98         else 
;;;99         {
;;;100          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;101        }
;;;102    #endif 
;;;103    
;;;104        pu64Curr[0] = TSF_LOAD_SRCWIDTH(u32Width);
000034  e3a05000          MOV      r5,#0
000038  e0055005          AND      r5,r5,r5
00003c  e385600a          ORR      r6,r5,#0xa
000040  e59f7aac          LDR      r7,|L1.2804|
000044  e1865007          ORR      r5,r6,r7
000048  e8830022          STM      r3,{r1,r5}
;;;105        pu64Curr[1] = TSF_LOAD_SOURCEADDR(u32Addr);
00004c  e3a05000          MOV      r5,#0
000050  e0056005          AND      r6,r5,r5
000054  e1804005          ORR      r4,r0,r5
000058  e6ff7076          UXTH     r7,r6
00005c  e1a06004          MOV      r6,r4
000060  e3877009          ORR      r7,r7,#9
000064  e1a04005          MOV      r4,r5
000068  e59f5a84          LDR      r5,|L1.2804|
00006c  e1844006          ORR      r4,r4,r6
000070  e1855007          ORR      r5,r5,r7
000074  e1c340f8          STRD     r4,r5,[r3,#8]
;;;106    
;;;107        pstCmdList->pu64Current = &pu64Curr[2];
000078  e2834010          ADD      r4,r3,#0x10
00007c  e3045000          MOVW     r5,#0x4000
000080  e7854002          STR      r4,[r5,r2]
;;;108        
;;;109        pstCmdList->u32UsedDoubleWords = 2U;
000084  e3a04002          MOV      r4,#2
000088  e3045004          MOV      r5,#0x4004
00008c  e7854002          STR      r4,[r5,r2]
;;;110    
;;;111    }
000090  e8bd80f0          POP      {r4-r7,pc}
;;;112    
                          ENDP

                  vTransf_SetDstImgSize PROC
;;;113    /* ....................................................................... */
;;;114    void vTransf_SetDstImgSize(uint32_t u32Width, uint32_t u32Lines,
000094  e92d40f0          PUSH     {r4-r7,lr}
;;;115                              ga_list_st* pstCmdList)
;;;116    {
000098  e1a03000          MOV      r3,r0
;;;117        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00009c  e3044000          MOVW     r4,#0x4000
0000a0  e7940002          LDR      r0,[r4,r2]
0000a4  e1a04003          MOV      r4,r3
;;;118    
;;;119    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;120    
;;;121        uint32_t u32NeededDW  = 2;
;;;122    
;;;123        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;124    
;;;125        /* check if there is enough space in command list: */
;;;126        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;127        {
;;;128          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;129          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;130          return;
;;;131        }
;;;132        else 
;;;133        {
;;;134          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;135        }
;;;136    #endif 
;;;137    
;;;138        pu64Curr[0] = TSF_LOAD_DEST_IMAGEWIDTH(u32Width);
0000a8  e7df451f          BFC      r4,#10,#22
0000ac  e3a07000          MOV      r7,#0
0000b0  e0077007          AND      r7,r7,r7
0000b4  e3877006          ORR      r7,r7,#6
0000b8  e59f6a34          LDR      r6,|L1.2804|
0000bc  e1875006          ORR      r5,r7,r6
0000c0  e1c040f0          STRD     r4,r5,[r0,#0]
0000c4  e1a04001          MOV      r4,r1
;;;139        pu64Curr[1] = TSF_LOAD_DESTLINECNT(u32Lines);
0000c8  e7df451f          BFC      r4,#10,#22
0000cc  e3a07000          MOV      r7,#0
0000d0  e0075007          AND      r5,r7,r7
0000d4  e1844007          ORR      r4,r4,r7
0000d8  e6ff7075          UXTH     r7,r5
0000dc  e387c007          ORR      r12,r7,#7
0000e0  e1a07004          MOV      r7,r4
0000e4  e18c4006          ORR      r4,r12,r6
0000e8  e580400c          STR      r4,[r0,#0xc]
0000ec  e5807008          STR      r7,[r0,#8]
;;;140    
;;;141        pstCmdList->pu64Current = &pu64Curr[2];
0000f0  e2804010          ADD      r4,r0,#0x10
0000f4  e3045000          MOVW     r5,#0x4000
0000f8  e7854002          STR      r4,[r5,r2]
;;;142        pstCmdList->u32UsedDoubleWords = 2U;
0000fc  e3a04002          MOV      r4,#2
000100  e3045004          MOV      r5,#0x4004
000104  e7854002          STR      r4,[r5,r2]
;;;143    }
000108  e8bd80f0          POP      {r4-r7,pc}
;;;144    
                          ENDP

                  vTransf_SetMemDest PROC
;;;145    /* ....................................................................... */
;;;146    void vTransf_SetMemDest(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList)
00010c  e92d40f0          PUSH     {r4-r7,lr}
;;;147    {
;;;148        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000110  e3044000          MOVW     r4,#0x4000
000114  e7943002          LDR      r3,[r4,r2]
;;;149    
;;;150    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;151    
;;;152        uint32_t u32NeededDW  = 2U;
;;;153    
;;;154        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;155    
;;;156        /* check if there is enough space in command list: */
;;;157        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;158        {
;;;159          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;160          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;161          return;
;;;162        }
;;;163        else 
;;;164        {
;;;165          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;166        }
;;;167    #endif
;;;168    
;;;169        pu64Curr[0] = TSF_LOAD_DESTWIDTH(u32Width);
000118  e3a05000          MOV      r5,#0
00011c  e0055005          AND      r5,r5,r5
000120  e3856005          ORR      r6,r5,#5
000124  e59f79c8          LDR      r7,|L1.2804|
000128  e1865007          ORR      r5,r6,r7
00012c  e8830022          STM      r3,{r1,r5}
;;;170        pu64Curr[1] = TSF_LOAD_DESTADDR(u32Addr);
000130  e3a05000          MOV      r5,#0
000134  e0056005          AND      r6,r5,r5
000138  e1804005          ORR      r4,r0,r5
00013c  e6ff7076          UXTH     r7,r6
000140  e1a06004          MOV      r6,r4
000144  e3877004          ORR      r7,r7,#4
000148  e1a04005          MOV      r4,r5
00014c  e59f59a0          LDR      r5,|L1.2804|
000150  e1844006          ORR      r4,r4,r6
000154  e1855007          ORR      r5,r5,r7
000158  e1c340f8          STRD     r4,r5,[r3,#8]
;;;171    
;;;172        pstCmdList->pu64Current = &pu64Curr[2];
00015c  e2834010          ADD      r4,r3,#0x10
000160  e3045000          MOVW     r5,#0x4000
000164  e7854002          STR      r4,[r5,r2]
;;;173        pstCmdList->u32UsedDoubleWords = 2U;
000168  e3a04002          MOV      r4,#2
00016c  e3045004          MOV      r5,#0x4004
000170  e7854002          STR      r4,[r5,r2]
;;;174    }
000174  e8bd80f0          POP      {r4-r7,pc}
;;;175    
                          ENDP

                  vTransf_ConfigLUT PROC
;;;176    /* ....................................................................... */
;;;177    void vTransf_ConfigLUT(transf_Lut_st* pstCfg, ga_list_st* pstCmdList)
000178  e92d40f0          PUSH     {r4-r7,lr}
;;;178    {
;;;179        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00017c  e3043000          MOVW     r3,#0x4000
000180  e7932001          LDR      r2,[r3,r1]
;;;180    
;;;181    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;182    
;;;183        uint32_t u32NeededDW = 3;
;;;184    
;;;185        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;186    
;;;187        /* check if there is enough space in command list: */
;;;188        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;189        {
;;;190          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;191          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;192          return;
;;;193        }
;;;194        else 
;;;195        {
;;;196          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;197        }
;;;198    #endif
;;;199    
;;;200        pu64Curr[0] = TSF_LOAD_LUTADDR(pstCfg->u32Addr);
000184  e3a06000          MOV      r6,#0
000188  e0066006          AND      r6,r6,r6
00018c  e5903000          LDR      r3,[r0,#0]
000190  e1a05003          MOV      r5,r3
000194  e386600d          ORR      r6,r6,#0xd
000198  e59f4954          LDR      r4,|L1.2804|
00019c  e1844006          ORR      r4,r4,r6
0001a0  e8820018          STM      r2,{r3,r4}
;;;201        pu64Curr[1] = TSF_LOAD_LUTWIDTH(pstCfg->u16Width);
0001a4  e1d030b4          LDRH     r3,[r0,#4]
0001a8  e7df361f          BFC      r3,#12,#20
0001ac  e3a06000          MOV      r6,#0
0001b0  e0066006          AND      r6,r6,r6
0001b4  e386600e          ORR      r6,r6,#0xe
0001b8  e59f4934          LDR      r4,|L1.2804|
0001bc  e1844006          ORR      r4,r4,r6
0001c0  e5823008          STR      r3,[r2,#8]
0001c4  e582400c          STR      r4,[r2,#0xc]
;;;202        pu64Curr[2] = TSF_LOAD_LUTLINECNT(pstCfg->u16LineCnt);
0001c8  e1d030b6          LDRH     r3,[r0,#6]
0001cc  e7df351f          BFC      r3,#10,#22
0001d0  e3a06000          MOV      r6,#0
0001d4  e1a04003          MOV      r4,r3
0001d8  e0063006          AND      r3,r6,r6
0001dc  e1845006          ORR      r5,r4,r6
0001e0  e6ff6073          UXTH     r6,r3
0001e4  e1a03005          MOV      r3,r5
0001e8  e386700f          ORR      r7,r6,#0xf
0001ec  e59f5900          LDR      r5,|L1.2804|
0001f0  e1a06003          MOV      r6,r3
0001f4  e1873005          ORR      r3,r7,r5
0001f8  e5823014          STR      r3,[r2,#0x14]
0001fc  e5826010          STR      r6,[r2,#0x10]
;;;203    
;;;204        pstCmdList->pu64Current = &pu64Curr[3];
000200  e2823018          ADD      r3,r2,#0x18
000204  e3044000          MOVW     r4,#0x4000
000208  e7843001          STR      r3,[r4,r1]
;;;205        pstCmdList->u32UsedDoubleWords = 3U;
00020c  e3a03003          MOV      r3,#3
000210  e3044004          MOV      r4,#0x4004
000214  e7843001          STR      r3,[r4,r1]
;;;206    }
000218  e8bd80f0          POP      {r4-r7,pc}
;;;207    
                          ENDP

                  vTransf_SetColorFmt PROC
;;;208    /* ....................................................................... */
;;;209    void vTransf_SetColorFmt(ga_colFmt_e eSrcColFormat, ga_colFmt_e eDstColFormat, ga_list_st* pstCmdList)
00021c  e92d40f0          PUSH     {r4-r7,lr}
;;;210    {
;;;211        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000220  e3044000          MOVW     r4,#0x4000
000224  e7943002          LDR      r3,[r4,r2]
;;;212    
;;;213    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;214    
;;;215        uint32_t u32NeededDW  = 1;
;;;216    
;;;217        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;218    
;;;219        /* check if there is enough space in command list: */
;;;220        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;221        {
;;;222          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;223          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;224          return;
;;;225        }
;;;226        else 
;;;227        {
;;;228          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;229        }
;;;230    #endif
;;;231    
;;;232        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;233         *  modify color format 0-->1 and 1-->0 
;;;234         *  */
;;;235        pu64Curr[0] = TSF_LOAD_COLORFMT((1 - (uint8_t) eDstColFormat), (1 - (uint8_t) eSrcColFormat));
000228  e2614001          RSB      r4,r1,#1
00022c  e1a06fc4          ASR      r6,r4,#31
000230  e2044001          AND      r4,r4,#1
000234  e3a05000          MOV      r5,#0
000238  e0946004          ADDS     r6,r4,r4
00023c  e0a55005          ADC      r5,r5,r5
000240  e2604001          RSB      r4,r0,#1
000244  e1a0cfc4          ASR      r12,r4,#31
000248  e2044001          AND      r4,r4,#1
00024c  e1866004          ORR      r6,r6,r4
000250  e1a05006          MOV      r5,r6
000254  e3a0c000          MOV      r12,#0
000258  e1a0400c          MOV      r4,r12
00025c  e3a06010          MOV      r6,#0x10
000260  e1a07005          MOV      r7,r5
000264  e1a0500c          MOV      r5,r12
000268  e1a0c006          MOV      r12,r6
00026c  e1876004          ORR      r6,r7,r4
000270  e185700c          ORR      r7,r5,r12
000274  e6ff7077          UXTH     r7,r7
000278  e59f5874          LDR      r5,|L1.2804|
00027c  e1855007          ORR      r5,r5,r7
000280  e5835004          STR      r5,[r3,#4]
000284  e5836000          STR      r6,[r3,#0]
;;;236    
;;;237        pstCmdList->pu64Current = &pu64Curr[1];
000288  e2834008          ADD      r4,r3,#8
00028c  e3045000          MOVW     r5,#0x4000
000290  e7854002          STR      r4,[r5,r2]
;;;238        pstCmdList->u32UsedDoubleWords = 1U;
000294  e3a04001          MOV      r4,#1
000298  e3045004          MOV      r5,#0x4004
00029c  e7854002          STR      r4,[r5,r2]
;;;239    }
0002a0  e8bd80f0          POP      {r4-r7,pc}
;;;240    
                          ENDP

                  vTransf_SetPredefColor PROC
;;;241    /* ....................................................................... */
;;;242    void vTransf_SetPredefColor(uint32_t u32Color, ga_list_st* pstCmdList)
0002a4  e92d40f0          PUSH     {r4-r7,lr}
;;;243    {
;;;244        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0002a8  e3043000          MOVW     r3,#0x4000
0002ac  e7932001          LDR      r2,[r3,r1]
;;;245    
;;;246    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;247    
;;;248        uint32_t u32NeededDW  = 1U;
;;;249    
;;;250        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;251    
;;;252        /* check if there is enough space in command list: */
;;;253        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;254        {
;;;255          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;256          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;257          return;
;;;258        }
;;;259        else 
;;;260        {
;;;261          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;262        }
;;;263    #endif
;;;264    
;;;265        pu64Curr[0] = TSF_LOAD_PRECOLOR(u32Color);
0002b0  e3a03000          MOV      r3,#0
0002b4  e0035003          AND      r5,r3,r3
0002b8  e1806003          ORR      r6,r0,r3
0002bc  e6ff4075          UXTH     r4,r5
0002c0  e3843011          ORR      r3,r4,#0x11
0002c4  e59f4828          LDR      r4,|L1.2804|
0002c8  e1833004          ORR      r3,r3,r4
0002cc  e5823004          STR      r3,[r2,#4]
0002d0  e5826000          STR      r6,[r2,#0]
;;;266    
;;;267        pstCmdList->pu64Current = &pu64Curr[1];
0002d4  e2823008          ADD      r3,r2,#8
0002d8  e3044000          MOVW     r4,#0x4000
0002dc  e7843001          STR      r3,[r4,r1]
;;;268        pstCmdList->u32UsedDoubleWords = 1U;
0002e0  e3a03001          MOV      r3,#1
0002e4  e3044004          MOV      r4,#0x4004
0002e8  e7843001          STR      r3,[r4,r1]
;;;269    }
0002ec  e8bd80f0          POP      {r4-r7,pc}
;;;270    
                          ENDP

                  vTransf_SetTransfCmd PROC
;;;271    /* ....................................................................... */
;;;272    void vTransf_SetTransfCmd(transf_Mode_e eOpMode, ga_en_e eFilterEn,
0002f0  e92d40f0          PUSH     {r4-r7,lr}
;;;273                             ga_list_st* pstCmdList)
;;;274    {
;;;275        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0002f4  e3044000          MOVW     r4,#0x4000
0002f8  e7943002          LDR      r3,[r4,r2]
;;;276    
;;;277    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;278        uint32_t u32NeededDW  = 1;
;;;279    
;;;280        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;281    
;;;282        /* check if there is enough space in command list: */
;;;283        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;284        {
;;;285          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;286          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;287          return;
;;;288        }
;;;289        else 
;;;290        {
;;;291          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;292        }
;;;293    #endif
;;;294    
;;;295        pu64Curr[0] = TSF_TRANSF(eOpMode,eFilterEn);
0002fc  e3a05000          MOV      r5,#0
000300  e2006001          AND      r6,r0,#1
000304  e0054005          AND      r4,r5,r5
000308  e0965006          ADDS     r5,r6,r6
00030c  e0a44004          ADC      r4,r4,r4
000310  e3a07000          MOV      r7,#0
000314  e201c001          AND      r12,r1,#1
000318  e0076007          AND      r6,r7,r7
00031c  e185500c          ORR      r5,r5,r12
000320  e1844006          ORR      r4,r4,r6
000324  e6ffc074          UXTH     r12,r4
000328  e1a06007          MOV      r6,r7
00032c  e59f47c4          LDR      r4,|L1.2808|
000330  e1a07005          MOV      r7,r5
000334  e1866007          ORR      r6,r6,r7
000338  e184400c          ORR      r4,r4,r12
00033c  e5834004          STR      r4,[r3,#4]
000340  e5836000          STR      r6,[r3,#0]
;;;296    
;;;297        pstCmdList->pu64Current = &pu64Curr[1];
000344  e2834008          ADD      r4,r3,#8
000348  e3045000          MOVW     r5,#0x4000
00034c  e7854002          STR      r4,[r5,r2]
;;;298        pstCmdList->u32UsedDoubleWords = 1U;
000350  e3a04001          MOV      r4,#1
000354  e3045004          MOV      r5,#0x4004
000358  e7854002          STR      r4,[r5,r2]
;;;299    }
00035c  e8bd80f0          POP      {r4-r7,pc}
;;;300    
                          ENDP

                  vTransf_ConfigTransfOp PROC
;;;301    /* ....................................................................... */
;;;302    void vTransf_ConfigTransfOp(transf_mem_st* pstMem, transf_Lut_st* pstLutCfg,
000360  e92d41f0          PUSH     {r4-r8,lr}
;;;303                                transf_Prm_st* pstTsfPrm, ga_list_st* pstCmdList)
;;;304    
;;;305    {
000364  e1a04000          MOV      r4,r0
;;;306        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000368  e3045000          MOVW     r5,#0x4000
00036c  e7950003          LDR      r0,[r5,r3]
;;;307    
;;;308    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;309        uint32_t u32NeededDW = 14U;
;;;310    
;;;311        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;312    
;;;313        /* check if there is enough space in command list: */
;;;314        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;315        {
;;;316          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;317          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;318          return;
;;;319        }
;;;320        else 
;;;321        {
;;;322          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;323        }
;;;324    #endif
;;;325    
;;;326        /* Source Mem. */
;;;327        pu64Curr[0] = TSF_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
000370  e1d450b0          LDRH     r5,[r4,#0]
000374  e3a06000          MOV      r6,#0
000378  e006c006          AND      r12,r6,r6
00037c  e1a07006          MOV      r7,r6
000380  e1855007          ORR      r5,r5,r7
000384  e6ff607c          UXTH     r6,r12
000388  e1a07005          MOV      r7,r5
00038c  e386600a          ORR      r6,r6,#0xa
000390  e59fc75c          LDR      r12,|L1.2804|
000394  e186600c          ORR      r6,r6,r12
000398  e8800060          STM      r0,{r5,r6}
;;;328        pu64Curr[1] = TSF_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
00039c  e3a06000          MOV      r6,#0
0003a0  e5945004          LDR      r5,[r4,#4]
0003a4  e1a0c005          MOV      r12,r5
0003a8  e0067006          AND      r7,r6,r6
0003ac  e1a05006          MOV      r5,r6
0003b0  e185500c          ORR      r5,r5,r12
0003b4  e6ffc077          UXTH     r12,r7
0003b8  e1a07005          MOV      r7,r5
0003bc  e38cc009          ORR      r12,r12,#9
0003c0  e59f572c          LDR      r5,|L1.2804|
0003c4  e1866007          ORR      r6,r6,r7
0003c8  e185500c          ORR      r5,r5,r12
0003cc  e580500c          STR      r5,[r0,#0xc]
0003d0  e5806008          STR      r6,[r0,#8]
;;;329    
;;;330        /* Dest Mem. */
;;;331        pu64Curr[2] = TSF_LOAD_DESTWIDTH(pstMem->u16DstWidth);
0003d4  e1d450b8          LDRH     r5,[r4,#8]
0003d8  e3a0c000          MOV      r12,#0
0003dc  e00c600c          AND      r6,r12,r12
0003e0  e185500c          ORR      r5,r5,r12
0003e4  e1a07005          MOV      r7,r5
0003e8  e386c005          ORR      r12,r6,#5
0003ec  e59f5700          LDR      r5,|L1.2804|
0003f0  e185500c          ORR      r5,r5,r12
0003f4  e5805014          STR      r5,[r0,#0x14]
0003f8  e5807010          STR      r7,[r0,#0x10]
;;;332        pu64Curr[3] = TSF_LOAD_DESTADDR(pstMem->u32DstAddr);
0003fc  e3a06000          MOV      r6,#0
000400  e0066006          AND      r6,r6,r6
000404  e6ff7076          UXTH     r7,r6
000408  e3877004          ORR      r7,r7,#4
00040c  e594500c          LDR      r5,[r4,#0xc]
000410  e59fc6dc          LDR      r12,|L1.2804|
000414  e187600c          ORR      r6,r7,r12
000418  e5805018          STR      r5,[r0,#0x18]
00041c  e580601c          STR      r6,[r0,#0x1c]
;;;333    
;;;334        /* Image Size */
;;;335        pu64Curr[4] = TSF_LOAD_DEST_IMAGEWIDTH(pstMem->u16DstImgWidth);
000420  e1d451b0          LDRH     r5,[r4,#0x10]
000424  e7df551f          BFC      r5,#10,#22
000428  e3a07000          MOV      r7,#0
00042c  e1a0c005          MOV      r12,r5
000430  e0076007          AND      r6,r7,r7
000434  e1a05007          MOV      r5,r7
000438  e185500c          ORR      r5,r5,r12
00043c  e6ffe076          UXTH     lr,r6
000440  e1a06005          MOV      r6,r5
000444  e38ec006          ORR      r12,lr,#6
000448  e1a05007          MOV      r5,r7
00044c  e59f76a0          LDR      r7,|L1.2804|
000450  e1855006          ORR      r5,r5,r6
000454  e18c6007          ORR      r6,r12,r7
000458  e5805020          STR      r5,[r0,#0x20]
00045c  e5806024          STR      r6,[r0,#0x24]
;;;336        pu64Curr[5] = TSF_LOAD_DESTLINECNT(pstMem->u16LineCnt);
000460  e1d451b2          LDRH     r5,[r4,#0x12]
000464  e7df551f          BFC      r5,#10,#22
000468  e3a07000          MOV      r7,#0
00046c  e0077007          AND      r7,r7,r7
000470  e6ff6077          UXTH     r6,r7
000474  e386c007          ORR      r12,r6,#7
000478  e59f7674          LDR      r7,|L1.2804|
00047c  e18c6007          ORR      r6,r12,r7
000480  e5805028          STR      r5,[r0,#0x28]
000484  e580602c          STR      r6,[r0,#0x2c]
;;;337    
;;;338        /* LUT Params */
;;;339        pu64Curr[6] = TSF_LOAD_LUTADDR(pstLutCfg->u32Addr);
000488  e3a0c000          MOV      r12,#0
00048c  e00cc00c          AND      r12,r12,r12
000490  e6ff507c          UXTH     r5,r12
000494  e385e00d          ORR      lr,r5,#0xd
000498  e1a0c007          MOV      r12,r7
00049c  e5916000          LDR      r6,[r1,#0]
0004a0  e1a05006          MOV      r5,r6
0004a4  e18e600c          ORR      r6,lr,r12
0004a8  e5805030          STR      r5,[r0,#0x30]
0004ac  e5806034          STR      r6,[r0,#0x34]
;;;340        pu64Curr[7] = TSF_LOAD_LUTWIDTH(pstLutCfg->u16Width);
0004b0  e1d150b4          LDRH     r5,[r1,#4]
0004b4  e7df561f          BFC      r5,#12,#20
0004b8  e3a0c000          MOV      r12,#0
0004bc  e1a06005          MOV      r6,r5
0004c0  e00c700c          AND      r7,r12,r12
0004c4  e1a0500c          MOV      r5,r12
0004c8  e1866005          ORR      r6,r6,r5
0004cc  e387500e          ORR      r5,r7,#0xe
0004d0  e59f761c          LDR      r7,|L1.2804|
0004d4  e186600c          ORR      r6,r6,r12
0004d8  e1855007          ORR      r5,r5,r7
0004dc  e580503c          STR      r5,[r0,#0x3c]
0004e0  e5806038          STR      r6,[r0,#0x38]
;;;341        pu64Curr[8] = TSF_LOAD_LUTLINECNT(pstLutCfg->u16LineCnt);
0004e4  e1d150b6          LDRH     r5,[r1,#6]
0004e8  e7df551f          BFC      r5,#10,#22
0004ec  e3a07000          MOV      r7,#0
0004f0  e007e007          AND      lr,r7,r7
0004f4  e1a0c007          MOV      r12,r7
0004f8  e1a07005          MOV      r7,r5
0004fc  e187700c          ORR      r7,r7,r12
000500  e6ff607e          UXTH     r6,lr
000504  e386500f          ORR      r5,r6,#0xf
000508  e59f65e4          LDR      r6,|L1.2804|
00050c  e1855006          ORR      r5,r5,r6
000510  e5805044          STR      r5,[r0,#0x44]
000514  e5807040          STR      r7,[r0,#0x40]
;;;342    
;;;343        /* Color Params */
;;;344        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;345         *  modify color format 0-->1 and 1-->0 
;;;346         *  */
;;;347        pu64Curr[9]  = TSF_LOAD_COLORFMT((1 - (uint8_t)(pstTsfPrm->eDstColFmt)), (1 - (uint8_t)(pstTsfPrm->eSrcColFmt)));
000518  e5d25003          LDRB     r5,[r2,#3]
00051c  e2655001          RSB      r5,r5,#1
000520  e1a07fc5          ASR      r7,r5,#31
000524  e2055001          AND      r5,r5,#1
000528  e3a06000          MOV      r6,#0
00052c  e0957005          ADDS     r7,r5,r5
000530  e0a66006          ADC      r6,r6,r6
000534  e5d25002          LDRB     r5,[r2,#2]
000538  e2655001          RSB      r5,r5,#1
00053c  e1a0efc5          ASR      lr,r5,#31
000540  e2055001          AND      r5,r5,#1
000544  e1855007          ORR      r5,r5,r7
000548  e3a07000          MOV      r7,#0
00054c  e1856007          ORR      r6,r5,r7
000550  e59f55a4          LDR      r5,|L1.2812|
000554  e580504c          STR      r5,[r0,#0x4c]
000558  e5806048          STR      r6,[r0,#0x48]
;;;348        pu64Curr[10] = TSF_LOAD_PRECOLOR(pstTsfPrm->u32Color);
00055c  e3a06000          MOV      r6,#0
000560  e0066006          AND      r6,r6,r6
000564  e6ffe076          UXTH     lr,r6
000568  e5925004          LDR      r5,[r2,#4]
00056c  e1a06005          MOV      r6,r5
000570  e38e5011          ORR      r5,lr,#0x11
000574  e59f7578          LDR      r7,|L1.2804|
000578  e1855007          ORR      r5,r5,r7
00057c  e5805054          STR      r5,[r0,#0x54]
000580  e5806050          STR      r6,[r0,#0x50]
;;;349    
;;;350        /* alpha values */
;;;351        pu64Curr[11] = TSF_LOAD_SRCALPHA(pstTsfPrm->u8SrcAlphaVal);
000584  e5d25008          LDRB     r5,[r2,#8]
000588  e3a06000          MOV      r6,#0
00058c  e006e006          AND      lr,r6,r6
000590  e1a0c006          MOV      r12,r6
000594  e3a0701b          MOV      r7,#0x1b
000598  e1a06005          MOV      r6,r5
00059c  e1a0500e          MOV      r5,lr
0005a0  e1a0e007          MOV      lr,r7
0005a4  e186700c          ORR      r7,r6,r12
0005a8  e185c00e          ORR      r12,r5,lr
0005ac  e6ffc07c          UXTH     r12,r12
0005b0  e59f653c          LDR      r6,|L1.2804|
0005b4  e186600c          ORR      r6,r6,r12
0005b8  e580605c          STR      r6,[r0,#0x5c]
0005bc  e5807058          STR      r7,[r0,#0x58]
;;;352        pu64Curr[12] = TSF_LOAD_DESTALPHA(pstTsfPrm->u8DstAlphaVal);
0005c0  e5d25009          LDRB     r5,[r2,#9]
0005c4  e3a07000          MOV      r7,#0
0005c8  e1a0c005          MOV      r12,r5
0005cc  e0076007          AND      r6,r7,r7
0005d0  e1a05007          MOV      r5,r7
0005d4  e185500c          ORR      r5,r5,r12
0005d8  e6ffe076          UXTH     lr,r6
0005dc  e38e601c          ORR      r6,lr,#0x1c
0005e0  e1a0c007          MOV      r12,r7
0005e4  e59f7508          LDR      r7,|L1.2804|
0005e8  e185500c          ORR      r5,r5,r12
0005ec  e1866007          ORR      r6,r6,r7
0005f0  e5805060          STR      r5,[r0,#0x60]
0005f4  e5806064          STR      r6,[r0,#0x64]
;;;353    
;;;354        /* transformation */
;;;355        pu64Curr[13] = TSF_TRANSF(pstTsfPrm->eTsfMode, pstTsfPrm->eFilterEn);
0005f8  e5d25000          LDRB     r5,[r2,#0]
0005fc  e3a0c000          MOV      r12,#0
000600  e2055001          AND      r5,r5,#1
000604  e00c600c          AND      r6,r12,r12
000608  e0957005          ADDS     r7,r5,r5
00060c  e0a66006          ADC      r6,r6,r6
000610  e5d25001          LDRB     r5,[r2,#1]
000614  e2055001          AND      r5,r5,#1
000618  e00cc00c          AND      r12,r12,r12
00061c  e1877005          ORR      r7,r7,r5
000620  e186e00c          ORR      lr,r6,r12
000624  e1a06007          MOV      r6,r7
000628  e1a0c006          MOV      r12,r6
00062c  e6ff507e          UXTH     r5,lr
000630  e59f64c0          LDR      r6,|L1.2808|
000634  e1855006          ORR      r5,r5,r6
000638  e580506c          STR      r5,[r0,#0x6c]
00063c  e580c068          STR      r12,[r0,#0x68]
;;;356    
;;;357        pstCmdList->pu64Current = &pu64Curr[14];
000640  e2805070          ADD      r5,r0,#0x70
000644  e3046000          MOVW     r6,#0x4000
000648  e7865003          STR      r5,[r6,r3]
;;;358        
;;;359        pstCmdList->u32UsedDoubleWords = 14U;
00064c  e3a0500e          MOV      r5,#0xe
000650  e3046004          MOV      r6,#0x4004
000654  e7865003          STR      r5,[r6,r3]
;;;360    }
000658  e8bd81f0          POP      {r4-r8,pc}
;;;361    
                          ENDP

                  vTransf_ConfigTransfBlendOp PROC
;;;362    /* ....................................................................... */
;;;363    void vTransf_ConfigTransfBlendOp(transf_mem_st* pstMem, transf_Lut_st* pstLutCfg,
00065c  e92d41f0          PUSH     {r4-r8,lr}
;;;364                                     transf_PrmBlend_st* pstTsfPrm, ga_list_st* pstCmdList)
;;;365    
;;;366    {
000660  e1a04000          MOV      r4,r0
;;;367        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000664  e3045000          MOVW     r5,#0x4000
000668  e7950003          LDR      r0,[r5,r3]
;;;368    
;;;369    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;370        uint32_t u32NeededDW = 15U;
;;;371    
;;;372        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;373    
;;;374        /* check if there is enough space in command list: */
;;;375        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;376        {
;;;377          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;378          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;379          return;
;;;380        }
;;;381        else 
;;;382        {
;;;383          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;384        }
;;;385    #endif
;;;386        /* Source Mem. */
;;;387        pu64Curr[0] = TSF_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
00066c  e1d450b0          LDRH     r5,[r4,#0]
000670  e3a07000          MOV      r7,#0
000674  e007c007          AND      r12,r7,r7
000678  e1855007          ORR      r5,r5,r7
00067c  e6ff607c          UXTH     r6,r12
000680  e1a07005          MOV      r7,r5
000684  e386c00a          ORR      r12,r6,#0xa
000688  e59f5464          LDR      r5,|L1.2804|
00068c  e185500c          ORR      r5,r5,r12
000690  e5805004          STR      r5,[r0,#4]
000694  e5807000          STR      r7,[r0,#0]
;;;388        pu64Curr[1] = TSF_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
000698  e3a06000          MOV      r6,#0
00069c  e0067006          AND      r7,r6,r6
0006a0  e5945004          LDR      r5,[r4,#4]
0006a4  e185e006          ORR      lr,r5,r6
0006a8  e6ff6077          UXTH     r6,r7
0006ac  e3865009          ORR      r5,r6,#9
0006b0  e59f743c          LDR      r7,|L1.2804|
0006b4  e1855007          ORR      r5,r5,r7
0006b8  e580500c          STR      r5,[r0,#0xc]
0006bc  e580e008          STR      lr,[r0,#8]
;;;389    
;;;390        /* Dest Mem. */
;;;391        pu64Curr[2] = TSF_LOAD_DESTWIDTH(pstMem->u16DstWidth);
0006c0  e1d450b8          LDRH     r5,[r4,#8]
0006c4  e3a07000          MOV      r7,#0
0006c8  e0076007          AND      r6,r7,r7
0006cc  e1877005          ORR      r7,r7,r5
0006d0  e6ffe076          UXTH     lr,r6
0006d4  e1a06007          MOV      r6,r7
0006d8  e38ec005          ORR      r12,lr,#5
0006dc  e59f7410          LDR      r7,|L1.2804|
0006e0  e1a05006          MOV      r5,r6
0006e4  e18c6007          ORR      r6,r12,r7
0006e8  e5805010          STR      r5,[r0,#0x10]
0006ec  e5806014          STR      r6,[r0,#0x14]
;;;392        pu64Curr[3] = TSF_LOAD_DESTADDR(pstMem->u32DstAddr);
0006f0  e3a07000          MOV      r7,#0
0006f4  e0077007          AND      r7,r7,r7
0006f8  e3877004          ORR      r7,r7,#4
0006fc  e594500c          LDR      r5,[r4,#0xc]
000700  e59f63ec          LDR      r6,|L1.2804|
000704  e1866007          ORR      r6,r6,r7
000708  e5805018          STR      r5,[r0,#0x18]
00070c  e580601c          STR      r6,[r0,#0x1c]
;;;393    
;;;394        /* Image Size */
;;;395        pu64Curr[4] = TSF_LOAD_DEST_IMAGEWIDTH(pstMem->u16DstImgWidth);
000710  e1d451b0          LDRH     r5,[r4,#0x10]
000714  e7df551f          BFC      r5,#10,#22
000718  e3a07000          MOV      r7,#0
00071c  e007c007          AND      r12,r7,r7
000720  e1a06007          MOV      r6,r7
000724  e1855006          ORR      r5,r5,r6
000728  e38ce006          ORR      lr,r12,#6
00072c  e30f7fff          MOV      r7,#0xffff
000730  e1a0c005          MOV      r12,r5
000734  e1a0500e          MOV      r5,lr
000738  e1a0e007          MOV      lr,r7
00073c  e1a0700c          MOV      r7,r12
000740  e005c00e          AND      r12,r5,lr
000744  e59f63a8          LDR      r6,|L1.2804|
000748  e1a0e007          MOV      lr,r7
00074c  e186600c          ORR      r6,r6,r12
000750  e5806024          STR      r6,[r0,#0x24]
000754  e5807020          STR      r7,[r0,#0x20]
;;;396        pu64Curr[5] = TSF_LOAD_DESTLINECNT(pstMem->u16LineCnt);
000758  e1d451b2          LDRH     r5,[r4,#0x12]
00075c  e7df551f          BFC      r5,#10,#22
000760  e3a06000          MOV      r6,#0
000764  e006e006          AND      lr,r6,r6
000768  e1a07006          MOV      r7,r6
00076c  e3a06007          MOV      r6,#7
000770  e1a0c005          MOV      r12,r5
000774  e1a0500e          MOV      r5,lr
000778  e1a0e006          MOV      lr,r6
00077c  e18c6007          ORR      r6,r12,r7
000780  e185700e          ORR      r7,r5,lr
000784  e1a05006          MOV      r5,r6
000788  e6ffc077          UXTH     r12,r7
00078c  e59f7360          LDR      r7,|L1.2804|
000790  e18c6007          ORR      r6,r12,r7
000794  e5805028          STR      r5,[r0,#0x28]
000798  e580602c          STR      r6,[r0,#0x2c]
;;;397    
;;;398        /* LUT Params */
;;;399        pu64Curr[6] = TSF_LOAD_LUTADDR(pstLutCfg->u32Addr);
00079c  e3a07000          MOV      r7,#0
0007a0  e5915000          LDR      r5,[r1,#0]
0007a4  e1a06005          MOV      r6,r5
0007a8  e0075007          AND      r5,r7,r7
0007ac  e1877006          ORR      r7,r7,r6
0007b0  e6ff6075          UXTH     r6,r5
0007b4  e1a05007          MOV      r5,r7
0007b8  e386c00d          ORR      r12,r6,#0xd
0007bc  e59f7330          LDR      r7,|L1.2804|
0007c0  e18c6007          ORR      r6,r12,r7
0007c4  e5805030          STR      r5,[r0,#0x30]
0007c8  e5806034          STR      r6,[r0,#0x34]
;;;400        pu64Curr[7] = TSF_LOAD_LUTWIDTH(pstLutCfg->u16Width);
0007cc  e1d150b4          LDRH     r5,[r1,#4]
0007d0  e7df561f          BFC      r5,#12,#20
0007d4  e3a06000          MOV      r6,#0
0007d8  e0067006          AND      r7,r6,r6
0007dc  e1866005          ORR      r6,r6,r5
0007e0  e6ff5077          UXTH     r5,r7
0007e4  e385e00e          ORR      lr,r5,#0xe
0007e8  e59fc304          LDR      r12,|L1.2804|
0007ec  e1a05006          MOV      r5,r6
0007f0  e18e600c          ORR      r6,lr,r12
0007f4  e5805038          STR      r5,[r0,#0x38]
0007f8  e580603c          STR      r6,[r0,#0x3c]
;;;401        pu64Curr[8] = TSF_LOAD_LUTLINECNT(pstLutCfg->u16LineCnt);
0007fc  e1d150b6          LDRH     r5,[r1,#6]
000800  e7df551f          BFC      r5,#10,#22
000804  e3a07000          MOV      r7,#0
000808  e1a06005          MOV      r6,r5
00080c  e007c007          AND      r12,r7,r7
000810  e1a05007          MOV      r5,r7
000814  e1855006          ORR      r5,r5,r6
000818  e38ce00f          ORR      lr,r12,#0xf
00081c  e30f6fff          MOV      r6,#0xffff
000820  e1a0c005          MOV      r12,r5
000824  e1a0500e          MOV      r5,lr
000828  e1a0e006          MOV      lr,r6
00082c  e1a0600c          MOV      r6,r12
000830  e005c00e          AND      r12,r5,lr
000834  e1a05007          MOV      r5,r7
000838  e59f72b4          LDR      r7,|L1.2804|
00083c  e1855006          ORR      r5,r5,r6
000840  e18c6007          ORR      r6,r12,r7
000844  e5805040          STR      r5,[r0,#0x40]
000848  e5806044          STR      r6,[r0,#0x44]
;;;402    
;;;403        /* Color Params */
;;;404        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;405         *  modify color format 0-->1 and 1-->0 
;;;406         *  */
;;;407        pu64Curr[9]  = TSF_LOAD_COLORFMT((1 - (uint8_t)(pstTsfPrm->eDstColFmt)), (1 - (uint8_t)(pstTsfPrm->eSrcColFmt)));
00084c  e5d2500c          LDRB     r5,[r2,#0xc]
000850  e2655001          RSB      r5,r5,#1
000854  e1a07fc5          ASR      r7,r5,#31
000858  e2055001          AND      r5,r5,#1
00085c  e3a06000          MOV      r6,#0
000860  e0957005          ADDS     r7,r5,r5
000864  e0a66006          ADC      r6,r6,r6
000868  e5d2500b          LDRB     r5,[r2,#0xb]
00086c  e2655001          RSB      r5,r5,#1
000870  e1a0efc5          ASR      lr,r5,#31
000874  e2055001          AND      r5,r5,#1
000878  e1855007          ORR      r5,r5,r7
00087c  e3a07000          MOV      r7,#0
000880  e1856007          ORR      r6,r5,r7
000884  e3a0c010          MOV      r12,#0x10
000888  e1a05006          MOV      r5,r6
00088c  e1a0e00c          MOV      lr,r12
000890  e59f625c          LDR      r6,|L1.2804|
000894  e1a0c005          MOV      r12,r5
000898  e187700c          ORR      r7,r7,r12
00089c  e18e5006          ORR      r5,lr,r6
0008a0  e580504c          STR      r5,[r0,#0x4c]
0008a4  e5807048          STR      r7,[r0,#0x48]
;;;408        pu64Curr[10] = TSF_LOAD_PRECOLOR(pstTsfPrm->u32Color);
0008a8  e3a0c000          MOV      r12,#0
0008ac  e00c700c          AND      r7,r12,r12
0008b0  e1a0600c          MOV      r6,r12
0008b4  e5925010          LDR      r5,[r2,#0x10]
0008b8  e1855006          ORR      r5,r5,r6
0008bc  e6ffc077          UXTH     r12,r7
0008c0  e38ce011          ORR      lr,r12,#0x11
0008c4  e59f6228          LDR      r6,|L1.2804|
0008c8  e1a0c005          MOV      r12,r5
0008cc  e18e5006          ORR      r5,lr,r6
0008d0  e5805054          STR      r5,[r0,#0x54]
0008d4  e580c050          STR      r12,[r0,#0x50]
;;;409    
;;;410        /* Fading factor values */
;;;411        pu64Curr[11] = TSF_LOAD_SRCFADEFACT(pstTsfPrm->u8FadingFctr);
0008d8  e5d25014          LDRB     r5,[r2,#0x14]
0008dc  e3a0c000          MOV      r12,#0
0008e0  e00c700c          AND      r7,r12,r12
0008e4  e185500c          ORR      r5,r5,r12
0008e8  e6ff6077          UXTH     r6,r7
0008ec  e386701a          ORR      r7,r6,#0x1a
0008f0  e59f61fc          LDR      r6,|L1.2804|
0008f4  e185500c          ORR      r5,r5,r12
0008f8  e1866007          ORR      r6,r6,r7
0008fc  e5805058          STR      r5,[r0,#0x58]
000900  e580605c          STR      r6,[r0,#0x5c]
;;;412    
;;;413        /* alpha values */
;;;414        pu64Curr[12] = TSF_LOAD_SRCALPHA(pstTsfPrm->u8SrcAlphaVal);
000904  e5d25015          LDRB     r5,[r2,#0x15]
000908  e3a07000          MOV      r7,#0
00090c  e1a0c005          MOV      r12,r5
000910  e007e007          AND      lr,r7,r7
000914  e1a06007          MOV      r6,r7
000918  e1a0700c          MOV      r7,r12
00091c  e1866007          ORR      r6,r6,r7
000920  e6ff707e          UXTH     r7,lr
000924  e1a0c006          MOV      r12,r6
000928  e387701b          ORR      r7,r7,#0x1b
00092c  e59f51c0          LDR      r5,|L1.2804|
000930  e1855007          ORR      r5,r5,r7
000934  e5805064          STR      r5,[r0,#0x64]
000938  e5806060          STR      r6,[r0,#0x60]
;;;415        pu64Curr[13] = TSF_LOAD_DESTALPHA(pstTsfPrm->u8DstAlphaVal);    
00093c  e5d25016          LDRB     r5,[r2,#0x16]
000940  e3a06000          MOV      r6,#0
000944  e0066006          AND      r6,r6,r6
000948  e6ff7076          UXTH     r7,r6
00094c  e1a06005          MOV      r6,r5
000950  e387701c          ORR      r7,r7,#0x1c
000954  e59f5198          LDR      r5,|L1.2804|
000958  e1855007          ORR      r5,r5,r7
00095c  e580506c          STR      r5,[r0,#0x6c]
000960  e5806068          STR      r6,[r0,#0x68]
;;;416    
;;;417        /* transformation with blend */
;;;418        pu64Curr[14] = TSF_TRANSFB(pstTsfPrm->eTsfMode,
000964  e5d25002          LDRB     r5,[r2,#2]
000968  e3a06000          MOV      r6,#0
00096c  e2055001          AND      r5,r5,#1
000970  e0066006          AND      r6,r6,r6
000974  e1a06786          LSL      r6,r6,#15
000978  e18668a5          ORR      r6,r6,r5,LSR #17
00097c  e1a07785          LSL      r7,r5,#15
000980  e5d25003          LDRB     r5,[r2,#3]
000984  e3a08000          MOV      r8,#0
000988  e205c001          AND      r12,r5,#1
00098c  e008e008          AND      lr,r8,r8
000990  e1a0e70e          LSL      lr,lr,#14
000994  e18e592c          ORR      r5,lr,r12,LSR #18
000998  e187c70c          ORR      r12,r7,r12,LSL #14
00099c  e1867005          ORR      r7,r6,r5
0009a0  e5d25004          LDRB     r5,[r2,#4]
0009a4  e2055001          AND      r5,r5,#1
0009a8  e0086008          AND      r6,r8,r8
0009ac  e1a06686          LSL      r6,r6,#13
0009b0  e18669a5          ORR      r6,r6,r5,LSR #19
0009b4  e18cc685          ORR      r12,r12,r5,LSL #13
0009b8  e1877006          ORR      r7,r7,r6
0009bc  e5d25005          LDRB     r5,[r2,#5]
0009c0  e2056001          AND      r6,r5,#1
0009c4  e008e008          AND      lr,r8,r8
0009c8  e1a0e60e          LSL      lr,lr,#12
0009cc  e18e5a26          ORR      r5,lr,r6,LSR #20
0009d0  e18cc606          ORR      r12,r12,r6,LSL #12
0009d4  e187e005          ORR      lr,r7,r5
0009d8  e5d25006          LDRB     r5,[r2,#6]
0009dc  e2055001          AND      r5,r5,#1
0009e0  e1a06588          LSL      r6,r8,#11
0009e4  e1866aa5          ORR      r6,r6,r5,LSR #21
0009e8  e18cc585          ORR      r12,r12,r5,LSL #11
0009ec  e186600e          ORR      r6,r6,lr
0009f0  e5d25007          LDRB     r5,[r2,#7]
0009f4  e3a07000          MOV      r7,#0
0009f8  e2055001          AND      r5,r5,#1
0009fc  e007e007          AND      lr,r7,r7
000a00  e1a07005          MOV      r7,r5
000a04  e1a0e50e          LSL      lr,lr,#10
000a08  e18e5b25          ORR      r5,lr,r5,LSR #22
000a0c  e18cc507          ORR      r12,r12,r7,LSL #10
000a10  e1866005          ORR      r6,r6,r5
000a14  e5d25008          LDRB     r5,[r2,#8]
000a18  e2057001          AND      r7,r5,#1
000a1c  e008e008          AND      lr,r8,r8
000a20  e1a0e48e          LSL      lr,lr,#9
000a24  e18e5ba7          ORR      r5,lr,r7,LSR #23
000a28  e18ce487          ORR      lr,r12,r7,LSL #9
000a2c  e1866005          ORR      r6,r6,r5
000a30  e5d25009          LDRB     r5,[r2,#9]
000a34  e2057001          AND      r7,r5,#1
000a38  e008c008          AND      r12,r8,r8
000a3c  e1a0c40c          LSL      r12,r12,#8
000a40  e18c5c27          ORR      r5,r12,r7,LSR #24
000a44  e1a0c407          LSL      r12,r7,#8
000a48  e1a07006          MOV      r7,r6
000a4c  e18e600c          ORR      r6,lr,r12
000a50  e187e005          ORR      lr,r7,r5
000a54  e5d2500a          LDRB     r5,[r2,#0xa]
000a58  e3a07000          MOV      r7,#0
000a5c  e2055003          AND      r5,r5,#3
000a60  e007c007          AND      r12,r7,r7
000a64  e1a07005          MOV      r7,r5
000a68  e1a0c18c          LSL      r12,r12,#3
000a6c  e18c5ea5          ORR      r5,r12,r5,LSR #29
000a70  e186c187          ORR      r12,r6,r7,LSL #3
000a74  e18ee005          ORR      lr,lr,r5
000a78  e5d25000          LDRB     r5,[r2,#0]
000a7c  e3a06000          MOV      r6,#0
000a80  e2057001          AND      r7,r5,#1
000a84  e0065006          AND      r5,r6,r6
000a88  e0976007          ADDS     r6,r7,r7
000a8c  e0a55005          ADC      r5,r5,r5
000a90  e18cc006          ORR      r12,r12,r6
000a94  e18e7005          ORR      r7,lr,r5
000a98  e5d25001          LDRB     r5,[r2,#1]
000a9c  e3a06000          MOV      r6,#0
000aa0  e2055001          AND      r5,r5,#1
000aa4  e0066006          AND      r6,r6,r6
000aa8  e18cc005          ORR      r12,r12,r5
000aac  e1875006          ORR      r5,r7,r6
000ab0  e1a0600c          MOV      r6,r12
000ab4  e6ffc075          UXTH     r12,r5
000ab8  e1a05006          MOV      r5,r6
000abc  e38c6441          ORR      r6,r12,#0x41000000
000ac0  e5805070          STR      r5,[r0,#0x70]
000ac4  e5806074          STR      r6,[r0,#0x74]
;;;419                                   pstTsfPrm->eDstRedProt,
;;;420                                   pstTsfPrm->eDstGreenProt,
;;;421                                   pstTsfPrm->eDstBlueProt,
;;;422                                   pstTsfPrm->eDstAlphaProt,
;;;423                                   pstTsfPrm->eSrcRedFad,
;;;424                                   pstTsfPrm->eSrcGreenFad,
;;;425                                   pstTsfPrm->eSrcBlueFad,
;;;426                                   pstTsfPrm->eSrcAlphaFad,
;;;427                                   pstTsfPrm->eBldOrd,
;;;428                                   pstTsfPrm->eFilterEn);
;;;429    
;;;430        pstCmdList->pu64Current = &pu64Curr[15];
000ac8  e2805078          ADD      r5,r0,#0x78
000acc  e3046000          MOVW     r6,#0x4000
000ad0  e7865003          STR      r5,[r6,r3]
;;;431        pstCmdList->u32UsedDoubleWords = 15;
000ad4  e3a0500f          MOV      r5,#0xf
000ad8  e3046004          MOV      r6,#0x4004
000adc  e7865003          STR      r5,[r6,r3]
;;;432    }
000ae0  e8bd81f0          POP      {r4-r8,pc}
;;;433    
                          ENDP

                  |L1.2788|
                          DCD      au8LLDD_GA_TRANSF_C_REVISION
                  |L1.2792|
                          DCD      au8LLDD_GA_TRANSF_C_TAG
                  |L1.2796|
                          DCD      au8LLDD_GA_TRANSF_H_REVISION
                  |L1.2800|
                          DCD      au8LLDD_GA_TRANSF_H_TAG
                  |L1.2804|
                          DCD      0x01010000
                  |L1.2808|
                          DCD      0x41010000
                  |L1.2812|
                          DCD      0x01010010

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_GA_TRANSF_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313320          DCB      0x2e,0x31,0x33,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_GA_TRANSF_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  375f4746          DCB      0x37,0x5f,0x47,0x46
000024  58202400          DCB      0x58,0x20,0x24,0x00
                  au8LLDD_GA_TRANSF_H_REVISION
000028  24526576          DCB      0x24,0x52,0x65,0x76
00002c  6973696f          DCB      0x69,0x73,0x69,0x6f
000030  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000034  2e313520          DCB      0x2e,0x31,0x35,0x20
000038  2400              DCB      0x24,0x00
                  au8LLDD_GA_TRANSF_H_TAG
00003a  244e              DCB      0x24,0x4e
00003c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000040  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000044  445f315f          DCB      0x44,0x5f,0x31,0x5f
000048  375f4746          DCB      0x37,0x5f,0x47,0x46
00004c  58202400          DCB      0x58,0x20,0x24,0x00
