; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\hsuart.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\hsuart.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\hsuart.crf ..\..\..\..\lldd\src\hsuart.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vUART_GetVersion PROC
;;;66     
;;;67     void vUART_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;68                           uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;69                           uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;70     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;71        *pau8ModuleRevision = &au8LLDD_UART_C_REVISION[0];
000008  e59f6a88          LDR      r6,|L1.2712|
00000c  e5806000          STR      r6,[r0,#0]
;;;72        *pau8ModuleTag      = &au8LLDD_UART_C_TAG[0];
000010  e59f6a84          LDR      r6,|L1.2716|
000014  e5816000          STR      r6,[r1,#0]
;;;73        *pau8HeaderRevision = &au8LLDD_UART_H_REVISION[0];
000018  e59f6a80          LDR      r6,|L1.2720|
00001c  e5826000          STR      r6,[r2,#0]
;;;74        *pau8HeaderTag      = &au8LLDD_UART_H_TAG[0];
000020  e59f6a7c          LDR      r6,|L1.2724|
000024  e5836000          STR      r6,[r3,#0]
;;;75        *pau8IORevision     = &au8LLDD_UART_IO_H_REVISION[0];
000028  e59f6a78          LDR      r6,|L1.2728|
00002c  e5846000          STR      r6,[r4,#0]
;;;76        *pau8IOTag          = &au8LLDD_UART_IO_H_TAG[0];
000030  e59f6a74          LDR      r6,|L1.2732|
000034  e5856000          STR      r6,[r5,#0]
;;;77     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;78     
                          ENDP

                  vUART_FifoResetRx PROC
;;;502    
;;;503    void vUART_FifoResetRx(uart_Ch_e eCh, uart_SwRst_e eRstEn)
00003c  e1a02001          MOV      r2,r1
;;;504    {
;;;505        uint16_t u16RegVal;
;;;506    
;;;507        u16RegVal = u16GetSIFCR(eCh);
000040  e1a03600          LSL      r3,r0,#12
000044  e24335fe          SUB      r3,r3,#0x3f800000
000048  e24339ff          SUB      r3,r3,#0x3fc000
00004c  e1d311b0          LDRH     r1,[r3,#0x10]
;;;508    
;;;509        if(UART_RST_ACTIVE == eRstEn)
000050  e3520001          CMP      r2,#1
000054  1a000001          BNE      |L1.96|
;;;510        {
;;;511            u16RegVal |= 0x03U;
000058  e3811003          ORR      r1,r1,#3
00005c  ea000001          B        |L1.104|
                  |L1.96|
;;;512        }
;;;513        else
;;;514        {
;;;515            u16RegVal &= 0xfffcU;
000060  e30f3ffc          MOV      r3,#0xfffc
000064  e0011003          AND      r1,r1,r3
                  |L1.104|
;;;516        }
;;;517    
;;;518        vSetSIFCR(eCh, u16RegVal);
000068  e1a03600          LSL      r3,r0,#12
00006c  e24335fe          SUB      r3,r3,#0x3f800000
000070  e24339ff          SUB      r3,r3,#0x3fc000
000074  e1c311b0          STRH     r1,[r3,#0x10]
;;;519    }
000078  e12fff1e          BX       lr
;;;520    
                          ENDP

                  vUART_FifoResetTx PROC
;;;482    
;;;483    void vUART_FifoResetTx(uart_Ch_e eCh, uart_SwRst_e eRstEn)
00007c  e1a02001          MOV      r2,r1
;;;484    {
;;;485        uint16_t u16RegVal;
;;;486    
;;;487        u16RegVal = u16GetSIFCR(eCh);
000080  e1a03600          LSL      r3,r0,#12
000084  e24335fe          SUB      r3,r3,#0x3f800000
000088  e24339ff          SUB      r3,r3,#0x3fc000
00008c  e1d311b0          LDRH     r1,[r3,#0x10]
;;;488    
;;;489        if(UART_RST_ACTIVE == eRstEn)
000090  e3520001          CMP      r2,#1
000094  1a000001          BNE      |L1.160|
;;;490        {
;;;491            u16RegVal |= 0x05U;
000098  e3811005          ORR      r1,r1,#5
00009c  ea000001          B        |L1.168|
                  |L1.160|
;;;492        }
;;;493        else
;;;494        {
;;;495            u16RegVal &= 0xfffaU;
0000a0  e30f3ffa          MOV      r3,#0xfffa
0000a4  e0011003          AND      r1,r1,r3
                  |L1.168|
;;;496        }
;;;497    
;;;498        vSetSIFCR(eCh, u16RegVal);
0000a8  e1a03600          LSL      r3,r0,#12
0000ac  e24335fe          SUB      r3,r3,#0x3f800000
0000b0  e24339ff          SUB      r3,r3,#0x3fc000
0000b4  e1c311b0          STRH     r1,[r3,#0x10]
;;;499    }
0000b8  e12fff1e          BX       lr
;;;500    
                          ENDP

                  vUART_DmaIrqConfig PROC
;;;125    
;;;126    void vUART_DmaIrqConfig(uart_Ch_e eCh, uart_DmaIrq_st * pstDmaIrq)
0000bc  e3510000          CMP      r1,#0
;;;127    {
;;;128        if (0x0U != pstDmaIrq)
0000c0  0a00006d          BEQ      |L1.636|
;;;129        {
;;;130            /* Configure all DMA/Interrupt register fields */
;;;131            vSetSIDICR_TIR(eCh, (uint16_t) pstDmaIrq->eTir);
0000c4  e5d13000          LDRB     r3,[r1,#0]
0000c8  e1a02600          LSL      r2,r0,#12
0000cc  e24225fe          SUB      r2,r2,#0x3f800000
0000d0  e24229ff          SUB      r2,r2,#0x3fc000
0000d4  e1d220b4          LDRH     r2,[r2,#4]
0000d8  e7cd2693          BFI      r2,r3,#13,#1
0000dc  e1a03600          LSL      r3,r0,#12
0000e0  e24335fe          SUB      r3,r3,#0x3f800000
0000e4  e24339ff          SUB      r3,r3,#0x3fc000
0000e8  e1c320b4          STRH     r2,[r3,#4]
;;;132            vSetSIDICR_RIR(eCh, (uint16_t) pstDmaIrq->eRir);
0000ec  e5d13001          LDRB     r3,[r1,#1]
0000f0  e1a02600          LSL      r2,r0,#12
0000f4  e24225fe          SUB      r2,r2,#0x3f800000
0000f8  e24229ff          SUB      r2,r2,#0x3fc000
0000fc  e1d220b4          LDRH     r2,[r2,#4]
000100  e7cc2613          BFI      r2,r3,#12,#1
000104  e1a03600          LSL      r3,r0,#12
000108  e24335fe          SUB      r3,r3,#0x3f800000
00010c  e24339ff          SUB      r3,r3,#0x3fc000
000110  e1c320b4          STRH     r2,[r3,#4]
;;;133            vSetSIDICR_SPIR(eCh, (uint16_t) pstDmaIrq->eSpir);
000114  e5d13002          LDRB     r3,[r1,#2]
000118  e1a02600          LSL      r2,r0,#12
00011c  e24225fe          SUB      r2,r2,#0x3f800000
000120  e24229ff          SUB      r2,r2,#0x3fc000
000124  e1d220b4          LDRH     r2,[r2,#4]
000128  e7cb2593          BFI      r2,r3,#11,#1
00012c  e1a03600          LSL      r3,r0,#12
000130  e24335fe          SUB      r3,r3,#0x3f800000
000134  e24339ff          SUB      r3,r3,#0x3fc000
000138  e1c320b4          STRH     r2,[r3,#4]
;;;134            vSetSIDICR_CTSAC(eCh, (uint16_t) pstDmaIrq->eCtsac);
00013c  e5d13003          LDRB     r3,[r1,#3]
000140  e1a02600          LSL      r2,r0,#12
000144  e24225fe          SUB      r2,r2,#0x3f800000
000148  e24229ff          SUB      r2,r2,#0x3fc000
00014c  e1d220b4          LDRH     r2,[r2,#4]
000150  e7ca2493          BFI      r2,r3,#9,#2
000154  e1a03600          LSL      r3,r0,#12
000158  e24335fe          SUB      r3,r3,#0x3f800000
00015c  e24339ff          SUB      r3,r3,#0x3fc000
000160  e1c320b4          STRH     r2,[r3,#4]
;;;135            vSetSIDICR_RXTOUT_EN(eCh, (uint16_t) pstDmaIrq->eRxTout);
000164  e5d13004          LDRB     r3,[r1,#4]
000168  e1a02600          LSL      r2,r0,#12
00016c  e24225fe          SUB      r2,r2,#0x3f800000
000170  e24229ff          SUB      r2,r2,#0x3fc000
000174  e1d220b4          LDRH     r2,[r2,#4]
000178  e7c62313          BFI      r2,r3,#6,#1
00017c  e1a03600          LSL      r3,r0,#12
000180  e24335fe          SUB      r3,r3,#0x3f800000
000184  e24339ff          SUB      r3,r3,#0x3fc000
000188  e1c320b4          STRH     r2,[r3,#4]
;;;136            vSetSIDICR_SIOE(eCh,  (uint16_t) pstDmaIrq->eSioe);
00018c  e5d13005          LDRB     r3,[r1,#5]
000190  e1a02600          LSL      r2,r0,#12
000194  e24225fe          SUB      r2,r2,#0x3f800000
000198  e24229ff          SUB      r2,r2,#0x3fc000
00019c  e1d220b4          LDRH     r2,[r2,#4]
0001a0  e7c52293          BFI      r2,r3,#5,#1
0001a4  e1a03600          LSL      r3,r0,#12
0001a8  e24335fe          SUB      r3,r3,#0x3f800000
0001ac  e24339ff          SUB      r3,r3,#0x3fc000
0001b0  e1c320b4          STRH     r2,[r3,#4]
;;;137            vSetSIDICR_SICTS(eCh, (uint16_t) pstDmaIrq->eSicts);
0001b4  e5d13006          LDRB     r3,[r1,#6]
0001b8  e1a02600          LSL      r2,r0,#12
0001bc  e24225fe          SUB      r2,r2,#0x3f800000
0001c0  e24229ff          SUB      r2,r2,#0x3fc000
0001c4  e1d220b4          LDRH     r2,[r2,#4]
0001c8  e7c42213          BFI      r2,r3,#4,#1
0001cc  e1a03600          LSL      r3,r0,#12
0001d0  e24335fe          SUB      r3,r3,#0x3f800000
0001d4  e24339ff          SUB      r3,r3,#0x3fc000
0001d8  e1c320b4          STRH     r2,[r3,#4]
;;;138            vSetSIDICR_SIBRK(eCh, (uint16_t) pstDmaIrq->eSibrk);
0001dc  e5d13007          LDRB     r3,[r1,#7]
0001e0  e1a02600          LSL      r2,r0,#12
0001e4  e24225fe          SUB      r2,r2,#0x3f800000
0001e8  e24229ff          SUB      r2,r2,#0x3fc000
0001ec  e1d220b4          LDRH     r2,[r2,#4]
0001f0  e7c32193          BFI      r2,r3,#3,#1
0001f4  e1a03600          LSL      r3,r0,#12
0001f8  e24335fe          SUB      r3,r3,#0x3f800000
0001fc  e24339ff          SUB      r3,r3,#0x3fc000
000200  e1c320b4          STRH     r2,[r3,#4]
;;;139            vSetSIDICR_SITR(eCh,  (uint16_t) pstDmaIrq->eSitr);
000204  e5d13008          LDRB     r3,[r1,#8]
000208  e1a02600          LSL      r2,r0,#12
00020c  e24225fe          SUB      r2,r2,#0x3f800000
000210  e24229ff          SUB      r2,r2,#0x3fc000
000214  e1d220b4          LDRH     r2,[r2,#4]
000218  e7c22113          BFI      r2,r3,#2,#1
00021c  e1a03600          LSL      r3,r0,#12
000220  e24335fe          SUB      r3,r3,#0x3f800000
000224  e24339ff          SUB      r3,r3,#0x3fc000
000228  e1c320b4          STRH     r2,[r3,#4]
;;;140            vSetSIDICR_SIAS(eCh,  (uint16_t) pstDmaIrq->eSias);
00022c  e5d13009          LDRB     r3,[r1,#9]
000230  e1a02600          LSL      r2,r0,#12
000234  e24225fe          SUB      r2,r2,#0x3f800000
000238  e24229ff          SUB      r2,r2,#0x3fc000
00023c  e1d220b4          LDRH     r2,[r2,#4]
000240  e7c12093          BFI      r2,r3,#1,#1
000244  e1a03600          LSL      r3,r0,#12
000248  e24335fe          SUB      r3,r3,#0x3f800000
00024c  e24339ff          SUB      r3,r3,#0x3fc000
000250  e1c320b4          STRH     r2,[r3,#4]
;;;141            vSetSIDICR_SIUB(eCh,  (uint16_t) pstDmaIrq->eSiub);
000254  e5d1300a          LDRB     r3,[r1,#0xa]
000258  e1a02600          LSL      r2,r0,#12
00025c  e24225fe          SUB      r2,r2,#0x3f800000
000260  e24229ff          SUB      r2,r2,#0x3fc000
000264  e1d220b4          LDRH     r2,[r2,#4]
000268  e7c02013          BFI      r2,r3,#0,#1
00026c  e1a03600          LSL      r3,r0,#12
000270  e24335fe          SUB      r3,r3,#0x3f800000
000274  e24339ff          SUB      r3,r3,#0x3fc000
000278  e1c320b4          STRH     r2,[r3,#4]
                  |L1.636|
;;;142        }
;;;143    }
00027c  e12fff1e          BX       lr
;;;144    
                          ENDP

                  vUART_DataFmtConfig PROC
;;;108    
;;;109    void vUART_DataFmtConfig(uart_Ch_e eCh, uart_DataFmt_st * pstDataFmt)
000280  e3510000          CMP      r1,#0
;;;110    {
;;;111        if (0x0U != pstDataFmt)
000284  0a000045          BEQ      |L1.928|
;;;112        {
;;;113            /* Configure the line control register fields */
;;;114            vSetSILCR_UMODE(eCh,(uint16_t) pstDataFmt->eUmode);
000288  e5d13006          LDRB     r3,[r1,#6]
00028c  e1a02600          LSL      r2,r0,#12
000290  e24225fe          SUB      r2,r2,#0x3f800000
000294  e24229ff          SUB      r2,r2,#0x3fc000
000298  e1d220b0          LDRH     r2,[r2,#0]
00029c  e7c12013          BFI      r2,r3,#0,#2
0002a0  e1a03600          LSL      r3,r0,#12
0002a4  e24335fe          SUB      r3,r3,#0x3f800000
0002a8  e24339ff          SUB      r3,r3,#0x3fc000
0002ac  e1c320b0          STRH     r2,[r3,#0]
;;;115            vSetSILCR_USBL(eCh, (uint16_t) pstDataFmt->eUsbl);
0002b0  e5d13005          LDRB     r3,[r1,#5]
0002b4  e1a02600          LSL      r2,r0,#12
0002b8  e24225fe          SUB      r2,r2,#0x3f800000
0002bc  e24229ff          SUB      r2,r2,#0x3fc000
0002c0  e1d220b0          LDRH     r2,[r2,#0]
0002c4  e7c22113          BFI      r2,r3,#2,#1
0002c8  e1a03600          LSL      r3,r0,#12
0002cc  e24335fe          SUB      r3,r3,#0x3f800000
0002d0  e24339ff          SUB      r3,r3,#0x3fc000
0002d4  e1c320b0          STRH     r2,[r3,#0]
;;;116            vSetSILCR_UPEN(eCh, (uint16_t) pstDataFmt->eUpen);
0002d8  e5d13004          LDRB     r3,[r1,#4]
0002dc  e1a02600          LSL      r2,r0,#12
0002e0  e24225fe          SUB      r2,r2,#0x3f800000
0002e4  e24229ff          SUB      r2,r2,#0x3fc000
0002e8  e1d220b0          LDRH     r2,[r2,#0]
0002ec  e7c32193          BFI      r2,r3,#3,#1
0002f0  e1a03600          LSL      r3,r0,#12
0002f4  e24335fe          SUB      r3,r3,#0x3f800000
0002f8  e24339ff          SUB      r3,r3,#0x3fc000
0002fc  e1c320b0          STRH     r2,[r3,#0]
;;;117            vSetSILCR_UEPS(eCh, (uint16_t) pstDataFmt->eUeps);
000300  e5d13003          LDRB     r3,[r1,#3]
000304  e1a02600          LSL      r2,r0,#12
000308  e24225fe          SUB      r2,r2,#0x3f800000
00030c  e24229ff          SUB      r2,r2,#0x3fc000
000310  e1d220b0          LDRH     r2,[r2,#0]
000314  e7c42213          BFI      r2,r3,#4,#1
000318  e1a03600          LSL      r3,r0,#12
00031c  e24335fe          SUB      r3,r3,#0x3f800000
000320  e24339ff          SUB      r3,r3,#0x3fc000
000324  e1c320b0          STRH     r2,[r3,#0]
;;;118            vSetSILCR_LSBF(eCh, (uint16_t) pstDataFmt->eLsbf);
000328  e5d13002          LDRB     r3,[r1,#2]
00032c  e1a02600          LSL      r2,r0,#12
000330  e24225fe          SUB      r2,r2,#0x3f800000
000334  e24229ff          SUB      r2,r2,#0x3fc000
000338  e1d220b0          LDRH     r2,[r2,#0]
00033c  e7c82413          BFI      r2,r3,#8,#1
000340  e1a03600          LSL      r3,r0,#12
000344  e24335fe          SUB      r3,r3,#0x3f800000
000348  e24339ff          SUB      r3,r3,#0x3fc000
00034c  e1c320b0          STRH     r2,[r3,#0]
;;;119            vSetSILCR_TWUB(eCh, (uint16_t) pstDataFmt->eTwub);
000350  e5d13001          LDRB     r3,[r1,#1]
000354  e1a02600          LSL      r2,r0,#12
000358  e24225fe          SUB      r2,r2,#0x3f800000
00035c  e24229ff          SUB      r2,r2,#0x3fc000
000360  e1d220b0          LDRH     r2,[r2,#0]
000364  e7ce2713          BFI      r2,r3,#14,#1
000368  e1a03600          LSL      r3,r0,#12
00036c  e24335fe          SUB      r3,r3,#0x3f800000
000370  e24339ff          SUB      r3,r3,#0x3fc000
000374  e1c320b0          STRH     r2,[r3,#0]
;;;120            vSetSILCR_RWUB(eCh, (uint16_t) pstDataFmt->eRwub);
000378  e5d13000          LDRB     r3,[r1,#0]
00037c  e1a02600          LSL      r2,r0,#12
000380  e24225fe          SUB      r2,r2,#0x3f800000
000384  e24229ff          SUB      r2,r2,#0x3fc000
000388  e1d220b0          LDRH     r2,[r2,#0]
00038c  e7cf2793          BFI      r2,r3,#15,#1
000390  e1a03600          LSL      r3,r0,#12
000394  e24335fe          SUB      r3,r3,#0x3f800000
000398  e24339ff          SUB      r3,r3,#0x3fc000
00039c  e1c320b0          STRH     r2,[r3,#0]
                  |L1.928|
;;;121        }
;;;122    }
0003a0  e12fff1e          BX       lr
;;;123    
                          ENDP

                  vUART_SetBaudRate PROC
;;;205    
;;;206    void vUART_SetBaudRate(uart_Ch_e eCh, uart_BdRate_e eBaudRate)
0003a4  e1a02600          LSL      r2,r0,#12
;;;207    {
;;;208        vSetSIBGR(eCh, (uint16_t) eBaudRate);
0003a8  e24225fe          SUB      r2,r2,#0x3f800000
0003ac  e24229ff          SUB      r2,r2,#0x3fc000
0003b0  e1c211b8          STRH     r1,[r2,#0x18]
;;;209    }
0003b4  e12fff1e          BX       lr
;;;210    
                          ENDP

                  vUART_Wait PROC
;;;448    /****************************************************************************/
;;;449    static  void  vUART_Wait(void)
0003b8  e92d4008          PUSH     {r3,lr}
;;;450    {
;;;451        volatile uint32_t  u32Cnt;
;;;452        /* Wait ~15 core cycles */
;;;453        for(u32Cnt = 0; u32Cnt < 15; u32Cnt++)
0003bc  e3a00000          MOV      r0,#0
0003c0  e58d0000          STR      r0,[sp,#0]
0003c4  ea000002          B        |L1.980|
                  |L1.968|
0003c8  e59d0000          LDR      r0,[sp,#0]
0003cc  e2800001          ADD      r0,r0,#1
0003d0  e58d0000          STR      r0,[sp,#0]
                  |L1.980|
0003d4  e59d0000          LDR      r0,[sp,#0]
0003d8  e350000f          CMP      r0,#0xf
0003dc  3afffff9          BCC      |L1.968|
;;;454        {    
;;;455            /* violation of MISRA rule 1.1 due to necessary inline assembler */
;;;456    /*        __asm("nop");*/                       /* PRQA S 1006 */
;;;457            ;
;;;458        }    
;;;459    }
0003e0  e8bd8008          POP      {r3,pc}
;;;460    
                          ENDP

                  vUART_Reset PROC
;;;463    
;;;464    void vUART_Reset(uart_Ch_e eCh)
0003e4  e92d4010          PUSH     {r4,lr}
;;;465    {
0003e8  e1a04000          MOV      r4,r0
;;;466        /* Apply reset */
;;;467        vSetSIFCR_SWRST(eCh, 1);
0003ec  e1a00604          LSL      r0,r4,#12
0003f0  e24005fe          SUB      r0,r0,#0x3f800000
0003f4  e24009ff          SUB      r0,r0,#0x3fc000
0003f8  e1d001b0          LDRH     r0,[r0,#0x10]
0003fc  e3c00902          BIC      r0,r0,#0x8000
000400  e2800902          ADD      r0,r0,#0x8000
000404  e1a01604          LSL      r1,r4,#12
000408  e24115fe          SUB      r1,r1,#0x3f800000
00040c  e24119ff          SUB      r1,r1,#0x3fc000
000410  e1c101b0          STRH     r0,[r1,#0x10]
;;;468    
;;;469        /* 
;;;470         *  Make sure that the previous instrcution is completed
;;;471         *  ARM data barrier replaces the MIPS "sync"
;;;472         */
;;;473        /* violation of MISRA rule 1.1 due to necessary inline assembler */
;;;474    
;;;475        __DSB(); 
000414  ebfffffe          BL       __DSB
;;;476    
;;;477        /* Wait for reset to complete (TX49 frequency / EBUS frequency = 1 / 2) */
;;;478        vUART_Wait();
000418  ebfffffe          BL       vUART_Wait
;;;479    }
00041c  e8bd8010          POP      {r4,pc}
;;;480    
                          ENDP

                  vUART_Init PROC
;;;80     
;;;81     void vUART_Init(uart_Ch_e eCh, uart_BdRate_e eBaudRate, uart_DataFmt_st * stDataCfg,uart_DmaIrq_st * stDmaIrqCfg)
000420  e92d41f0          PUSH     {r4-r8,lr}
;;;82     {
000424  e1a04000          MOV      r4,r0
000428  e1a07001          MOV      r7,r1
00042c  e1a05002          MOV      r5,r2
000430  e1a06003          MOV      r6,r3
;;;83         /* Reset the UART */
;;;84         vUART_Reset(eCh);
000434  e1a00004          MOV      r0,r4
000438  ebfffffe          BL       vUART_Reset
;;;85     
;;;86         /* Put both FIFOs in reset */
;;;87         vUART_FifoResetTx(eCh, UART_RST_ACTIVE);
00043c  e3a01001          MOV      r1,#1
000440  e1a00004          MOV      r0,r4
000444  ebfffffe          BL       vUART_FifoResetTx
;;;88         vUART_FifoResetRx(eCh, UART_RST_ACTIVE);
000448  e3a01001          MOV      r1,#1
00044c  e1a00004          MOV      r0,r4
000450  ebfffffe          BL       vUART_FifoResetRx
;;;89     
;;;90         /* Set baud-rate */
;;;91         vUART_SetBaudRate(eCh, eBaudRate);
000454  e1a01007          MOV      r1,r7
000458  e1a00004          MOV      r0,r4
00045c  ebfffffe          BL       vUART_SetBaudRate
;;;92     
;;;93         /* Configure line/data parameters */
;;;94         vUART_DataFmtConfig(eCh, stDataCfg);
000460  e1a01005          MOV      r1,r5
000464  e1a00004          MOV      r0,r4
000468  ebfffffe          BL       vUART_DataFmtConfig
;;;95     
;;;96         /* Configure DMA/IRQ parameters */
;;;97         vUART_DmaIrqConfig(eCh, stDmaIrqCfg);
00046c  e1a01006          MOV      r1,r6
000470  e1a00004          MOV      r0,r4
000474  ebfffffe          BL       vUART_DmaIrqConfig
;;;98     
;;;99         /* Release FIFO reset */
;;;100        vUART_FifoResetTx(eCh, UART_RST_RELEASE);
000478  e3a01000          MOV      r1,#0
00047c  e1a00004          MOV      r0,r4
000480  ebfffffe          BL       vUART_FifoResetTx
;;;101        vUART_FifoResetRx(eCh, UART_RST_RELEASE);
000484  e3a01000          MOV      r1,#0
000488  e1a00004          MOV      r0,r4
00048c  ebfffffe          BL       vUART_FifoResetRx
;;;102    
;;;103        /* Switch off the open-drain */
;;;104        vSetSILCR_RSRVD12(eCh, (uint16_t)0U);    
000490  e1a00604          LSL      r0,r4,#12
000494  e24005fe          SUB      r0,r0,#0x3f800000
000498  e24009ff          SUB      r0,r0,#0x3fc000
00049c  e1d000b0          LDRH     r0,[r0,#0]
0004a0  e3c00a01          BIC      r0,r0,#0x1000
0004a4  e1a01604          LSL      r1,r4,#12
0004a8  e24115fe          SUB      r1,r1,#0x3f800000
0004ac  e24119ff          SUB      r1,r1,#0x3fc000
0004b0  e1c100b0          STRH     r0,[r1,#0]
;;;105    }
0004b4  e8bd81f0          POP      {r4-r8,pc}
;;;106    
                          ENDP

                  vUART_FifoConfig PROC
;;;146    
;;;147    void vUART_FifoConfig(uart_Ch_e eCh, uart_Fifo_st * pstFifo)
0004b8  e3510000          CMP      r1,#0
;;;148    {
;;;149        if (0x0U != pstFifo)
0004bc  0a00001d          BEQ      |L1.1336|
;;;150        {
;;;151            /* Configure all fifo control register fields */
;;;152            vSetSIFCR_RDIL(eCh, pstFifo->u8Rdil);
0004c0  e5d13000          LDRB     r3,[r1,#0]
0004c4  e1a02600          LSL      r2,r0,#12
0004c8  e24225fe          SUB      r2,r2,#0x3f800000
0004cc  e24229ff          SUB      r2,r2,#0x3fc000
0004d0  e1d221b0          LDRH     r2,[r2,#0x10]
0004d4  e7ca2393          BFI      r2,r3,#7,#4
0004d8  e1a03600          LSL      r3,r0,#12
0004dc  e24335fe          SUB      r3,r3,#0x3f800000
0004e0  e24339ff          SUB      r3,r3,#0x3fc000
0004e4  e1c321b0          STRH     r2,[r3,#0x10]
;;;153            vSetSIFCR_TDIL(eCh, pstFifo->u8Tdil);
0004e8  e5d13001          LDRB     r3,[r1,#1]
0004ec  e1a02600          LSL      r2,r0,#12
0004f0  e24225fe          SUB      r2,r2,#0x3f800000
0004f4  e24229ff          SUB      r2,r2,#0x3fc000
0004f8  e1d221b0          LDRH     r2,[r2,#0x10]
0004fc  e7c62193          BFI      r2,r3,#3,#4
000500  e1a03600          LSL      r3,r0,#12
000504  e24335fe          SUB      r3,r3,#0x3f800000
000508  e24339ff          SUB      r3,r3,#0x3fc000
00050c  e1c321b0          STRH     r2,[r3,#0x10]
;;;154            vSetSIFCR_FRSTEW(eCh, (uint16_t)pstFifo->eFrStew);
000510  e5d13002          LDRB     r3,[r1,#2]
000514  e1a02600          LSL      r2,r0,#12
000518  e24225fe          SUB      r2,r2,#0x3f800000
00051c  e24229ff          SUB      r2,r2,#0x3fc000
000520  e1d221b0          LDRH     r2,[r2,#0x10]
000524  e7c02013          BFI      r2,r3,#0,#1
000528  e1a03600          LSL      r3,r0,#12
00052c  e24335fe          SUB      r3,r3,#0x3f800000
000530  e24339ff          SUB      r3,r3,#0x3fc000
000534  e1c321b0          STRH     r2,[r3,#0x10]
                  |L1.1336|
;;;155        }
;;;156    }
000538  e12fff1e          BX       lr
;;;157    
                          ENDP

                  vUART_FlowCtrlConfig PROC
;;;159    
;;;160    void vUART_FlowCtrlConfig(uart_Ch_e eCh, uart_Flow_st * pstFlow)
00053c  e3510000          CMP      r1,#0
;;;161    {
;;;162        if (0x0U != pstFlow)
000540  0a000031          BEQ      |L1.1548|
;;;163        {
;;;164            /* Configure all flow control register fields */
;;;165            vSetSIFLCR_RSDR(eCh,(uint16_t)pstFlow->eRsdr);
000544  e5d13000          LDRB     r3,[r1,#0]
000548  e1a02600          LSL      r2,r0,#12
00054c  e24225fe          SUB      r2,r2,#0x3f800000
000550  e24229ff          SUB      r2,r2,#0x3fc000
000554  e1d221b4          LDRH     r2,[r2,#0x14]
000558  e7c82413          BFI      r2,r3,#8,#1
00055c  e1a03600          LSL      r3,r0,#12
000560  e24335fe          SUB      r3,r3,#0x3f800000
000564  e24339ff          SUB      r3,r3,#0x3fc000
000568  e1c321b4          STRH     r2,[r3,#0x14]
;;;166            vSetSIFLCR_TSDR(eCh,(uint16_t)pstFlow->eTsdr);
00056c  e5d13001          LDRB     r3,[r1,#1]
000570  e1a02600          LSL      r2,r0,#12
000574  e24225fe          SUB      r2,r2,#0x3f800000
000578  e24229ff          SUB      r2,r2,#0x3fc000
00057c  e1d221b4          LDRH     r2,[r2,#0x14]
000580  e7c72393          BFI      r2,r3,#7,#1
000584  e1a03600          LSL      r3,r0,#12
000588  e24335fe          SUB      r3,r3,#0x3f800000
00058c  e24339ff          SUB      r3,r3,#0x3fc000
000590  e1c321b4          STRH     r2,[r3,#0x14]
;;;167            vSetSIFLCR_TBRK(eCh,(uint16_t)pstFlow->eTbrk);
000594  e5d13002          LDRB     r3,[r1,#2]
000598  e1a02600          LSL      r2,r0,#12
00059c  e24225fe          SUB      r2,r2,#0x3f800000
0005a0  e24229ff          SUB      r2,r2,#0x3fc000
0005a4  e1d221b4          LDRH     r2,[r2,#0x14]
0005a8  e7c02013          BFI      r2,r3,#0,#1
0005ac  e1a03600          LSL      r3,r0,#12
0005b0  e24335fe          SUB      r3,r3,#0x3f800000
0005b4  e24339ff          SUB      r3,r3,#0x3fc000
0005b8  e1c321b4          STRH     r2,[r3,#0x14]
;;;168            vSetSIFLCR_TRS(eCh, (uint16_t)pstFlow->eTrs);
0005bc  e5d13003          LDRB     r3,[r1,#3]
0005c0  e1a02600          LSL      r2,r0,#12
0005c4  e24225fe          SUB      r2,r2,#0x3f800000
0005c8  e24229ff          SUB      r2,r2,#0x3fc000
0005cc  e1d221b4          LDRH     r2,[r2,#0x14]
0005d0  e7cb2593          BFI      r2,r3,#11,#1
0005d4  e1a03600          LSL      r3,r0,#12
0005d8  e24335fe          SUB      r3,r3,#0x3f800000
0005dc  e24339ff          SUB      r3,r3,#0x3fc000
0005e0  e1c321b4          STRH     r2,[r3,#0x14]
;;;169            vSetSIFLCR_RCS(eCh, (uint16_t)pstFlow->eRcs);
0005e4  e5d13004          LDRB     r3,[r1,#4]
0005e8  e1a02600          LSL      r2,r0,#12
0005ec  e24225fe          SUB      r2,r2,#0x3f800000
0005f0  e24229ff          SUB      r2,r2,#0x3fc000
0005f4  e1d221b4          LDRH     r2,[r2,#0x14]
0005f8  e7cc2613          BFI      r2,r3,#12,#1
0005fc  e1a03600          LSL      r3,r0,#12
000600  e24335fe          SUB      r3,r3,#0x3f800000
000604  e24339ff          SUB      r3,r3,#0x3fc000
000608  e1c321b4          STRH     r2,[r3,#0x14]
                  |L1.1548|
;;;170        }
;;;171    }
00060c  e12fff1e          BX       lr
;;;172    
                          ENDP

                  vUART_SetRTSTerminalLevel PROC
;;;174    
;;;175    void vUART_SetRTSTerminalLevel(uart_Ch_e eCh, uart_Rtssc_e eLevel)
000610  e1a02600          LSL      r2,r0,#12
;;;176    {
;;;177        vSetSIFLCR_RTSSC(eCh, (uint16_t)eLevel);
000614  e24225fe          SUB      r2,r2,#0x3f800000
000618  e24229ff          SUB      r2,r2,#0x3fc000
00061c  e1d221b4          LDRH     r2,[r2,#0x14]
000620  e7c92491          BFI      r2,r1,#9,#1
000624  e1a03600          LSL      r3,r0,#12
000628  e24335fe          SUB      r3,r3,#0x3f800000
00062c  e24339ff          SUB      r3,r3,#0x3fc000
000630  e1c321b4          STRH     r2,[r3,#0x14]
;;;178    }
000634  e12fff1e          BX       lr
;;;179    
                          ENDP

                  eUART_GetCTSTerminalStatus PROC
;;;181    
;;;182    uart_Ctss_e eUART_GetCTSTerminalStatus(uart_Ch_e eCh)
000638  e1a01000          MOV      r1,r0
;;;183    {
;;;184        return (uart_Ctss_e)biGetSISCISR_CTSS(eCh);
00063c  e1a00601          LSL      r0,r1,#12
000640  e24005fe          SUB      r0,r0,#0x3f800000
000644  e24009ff          SUB      r0,r0,#0x3fc000
000648  e5d0000c          LDRB     r0,[r0,#0xc]
00064c  e7e00250          UBFX     r0,r0,#4,#1
;;;185    }
000650  e12fff1e          BX       lr
;;;186    
                          ENDP

                  vUART_SetRTSTriggerLevel PROC
;;;188    
;;;189    void vUART_SetRTSTriggerLevel(uart_Ch_e eCh, uart_Rtstl_e eLevel)
000654  e1a02600          LSL      r2,r0,#12
;;;190    {
;;;191        vSetSIFLCR_RTSTL(eCh, (uint16_t)eLevel);
000658  e24225fe          SUB      r2,r2,#0x3f800000
00065c  e24229ff          SUB      r2,r2,#0x3fc000
000660  e1d221b4          LDRH     r2,[r2,#0x14]
000664  e7c42091          BFI      r2,r1,#1,#4
000668  e1a03600          LSL      r3,r0,#12
00066c  e24335fe          SUB      r3,r3,#0x3f800000
000670  e24339ff          SUB      r3,r3,#0x3fc000
000674  e1c321b4          STRH     r2,[r3,#0x14]
;;;192    }
000678  e12fff1e          BX       lr
;;;193    
                          ENDP

                  vUART_GetTransferStat PROC
;;;195    
;;;196    void vUART_GetTransferStat(uart_Ch_e eCh, uint8_t *pu8Status)
00067c  e3510000          CMP      r1,#0
;;;197    {
;;;198        if (0x0U != pu8Status)
000680  0a000004          BEQ      |L1.1688|
;;;199        {
;;;200            *pu8Status = u8GetSISCISR(eCh);
000684  e1a02600          LSL      r2,r0,#12
000688  e24225fe          SUB      r2,r2,#0x3f800000
00068c  e24229ff          SUB      r2,r2,#0x3fc000
000690  e5d2200c          LDRB     r2,[r2,#0xc]
000694  e5c12000          STRB     r2,[r1,#0]
                  |L1.1688|
;;;201        }
;;;202    }
000698  e12fff1e          BX       lr
;;;203    
                          ENDP

                  i32UART_GetBaudRate PROC
;;;212    
;;;213    int32_t i32UART_GetBaudRate(uart_Ch_e eCh, uint32_t *pu32BaudRate)
00069c  e92d47f0          PUSH     {r4-r10,lr}
;;;214    {
0006a0  e1a04000          MOV      r4,r0
0006a4  e1a05001          MOV      r5,r1
;;;215        uint8_t u8Bclk;
;;;216        uint8_t u8Preskal = 1U;
0006a8  e3a09001          MOV      r9,#1
;;;217        uint16_t u16Div;
;;;218        int32_t i32Res = C_SUCCESS;
0006ac  e3a08000          MOV      r8,#0
;;;219    
;;;220        if (0x0U != pu32BaudRate)
0006b0  e3550000          CMP      r5,#0
0006b4  0a00002f          BEQ      |L1.1912|
;;;221        {
;;;222            u8Bclk = (uint8_t) biGetSIBGR_BCLK(eCh);
0006b8  e1a00604          LSL      r0,r4,#12
0006bc  e24005fe          SUB      r0,r0,#0x3f800000
0006c0  e24009ff          SUB      r0,r0,#0x3fc000
0006c4  e1d001b8          LDRH     r0,[r0,#0x18]
0006c8  e7e26450          UBFX     r6,r0,#8,#3
;;;223            u16Div = (uint16_t) biGetSIBGR_BRD(eCh);
0006cc  e1a00604          LSL      r0,r4,#12
0006d0  e24005fe          SUB      r0,r0,#0x3f800000
0006d4  e24009ff          SUB      r0,r0,#0x3fc000
0006d8  e1d001b8          LDRH     r0,[r0,#0x18]
0006dc  e20070ff          AND      r7,r0,#0xff
;;;224    
;;;225            switch( u8Bclk )
0006e0  e3560005          CMP      r6,#5
0006e4  308ff106          ADDCC    pc,pc,r6,LSL #2
0006e8  ea000013          B        |L1.1852|
0006ec  ea000006          B        |L1.1804|
0006f0  ea000008          B        |L1.1816|
0006f4  ea00000a          B        |L1.1828|
0006f8  ea00000c          B        |L1.1840|
0006fc  eaffffff          B        |L1.1792|
                  |L1.1792|
;;;226            {
;;;227                case UART_NO_DIV: 
000700  e320f000          NOP      
;;;228                    u8Preskal = 1U;
000704  e3a09001          MOV      r9,#1
;;;229                    break;
000708  ea00000e          B        |L1.1864|
                  |L1.1804|
;;;230    
;;;231                case UART_DIV_2: 
00070c  e320f000          NOP      
;;;232                    u8Preskal = 2U;
000710  e3a09002          MOV      r9,#2
;;;233                    break;
000714  ea00000b          B        |L1.1864|
                  |L1.1816|
;;;234    
;;;235                case UART_DIV_8: 
000718  e320f000          NOP      
;;;236                    u8Preskal = 8U;
00071c  e3a09008          MOV      r9,#8
;;;237                    break;
000720  ea000008          B        |L1.1864|
                  |L1.1828|
;;;238    
;;;239                case UART_DIV_32: 
000724  e320f000          NOP      
;;;240                    u8Preskal = 32U;
000728  e3a09020          MOV      r9,#0x20
;;;241                    break;
00072c  ea000005          B        |L1.1864|
                  |L1.1840|
;;;242    
;;;243                case UART_DIV_128: 
000730  e320f000          NOP      
;;;244                    u8Preskal = 128U;
000734  e3a09080          MOV      r9,#0x80
;;;245                    break;
000738  ea000002          B        |L1.1864|
                  |L1.1852|
;;;246    
;;;247                default:        
00073c  e320f000          NOP      
;;;248                    /* Incorrect prescaler value */
;;;249                    i32Res =  C_FAILED;
000740  e3e08000          MVN      r8,#0
;;;250                break;
000744  e320f000          NOP      
                  |L1.1864|
000748  e320f000          NOP                            ;229
;;;251            }
;;;252            if( C_SUCCESS == i32Res )
00074c  e3580000          CMP      r8,#0
000750  1a000009          BNE      |L1.1916|
;;;253            {
;;;254                /* 75MHz */
;;;255                *pu32BaudRate = ( (75000000U/ u8Preskal) / (u16Div + 1U) )/ 16U;
000754  e1a01009          MOV      r1,r9
000758  e59f0350          LDR      r0,|L1.2736|
00075c  ebfffffe          BL       __aeabi_uidiv
000760  e1a0a000          MOV      r10,r0
000764  e2871001          ADD      r1,r7,#1
000768  ebfffffe          BL       __aeabi_uidiv
00076c  e1a00220          LSR      r0,r0,#4
000770  e5850000          STR      r0,[r5,#0]
000774  ea000000          B        |L1.1916|
                  |L1.1912|
;;;256            }
;;;257        }
;;;258        else
;;;259        {
;;;260            i32Res = C_FAILED;
000778  e3e08000          MVN      r8,#0
                  |L1.1916|
;;;261            
;;;262        }
;;;263    
;;;264        return i32Res;
00077c  e1a00008          MOV      r0,r8
;;;265    }
000780  e8bd87f0          POP      {r4-r10,pc}
;;;266    
                          ENDP

                  u32UART_IsTxFifoReady PROC
;;;401    
;;;402    uint32_t u32UART_IsTxFifoReady(uart_Ch_e eCh)
000784  e1a01000          MOV      r1,r0
;;;403    {
;;;404        return (uint32_t) biGetSISCISR_TRDY(eCh);
000788  e1a00601          LSL      r0,r1,#12
00078c  e24005fe          SUB      r0,r0,#0x3f800000
000790  e24009ff          SUB      r0,r0,#0x3fc000
000794  e5d0000c          LDRB     r0,[r0,#0xc]
000798  e7e00150          UBFX     r0,r0,#2,#1
;;;405    }
00079c  e12fff1e          BX       lr
;;;406    
                          ENDP

                  i32UART_WriteByte PROC
;;;268    
;;;269    int32_t i32UART_WriteByte(uart_Ch_e eCh, uint8_t u8Data)
0007a0  e92d4010          PUSH     {r4,lr}
;;;270    {
0007a4  e1a02000          MOV      r2,r0
0007a8  e1a03001          MOV      r3,r1
;;;271        int32_t i32Res = C_SUCCESS;
0007ac  e3a04000          MOV      r4,#0
;;;272    
;;;273        if(1U == u32UART_IsTxFifoReady(eCh))
0007b0  e1a00002          MOV      r0,r2
0007b4  ebfffffe          BL       u32UART_IsTxFifoReady
0007b8  e3500001          CMP      r0,#1
0007bc  1a000004          BNE      |L1.2004|
;;;274        {
;;;275            /* Write one byte */
;;;276            vSetSITFIFO(eCh, u8Data);
0007c0  e1a00602          LSL      r0,r2,#12
0007c4  e24005fe          SUB      r0,r0,#0x3f800000
0007c8  e24009ff          SUB      r0,r0,#0x3fc000
0007cc  e5c0301c          STRB     r3,[r0,#0x1c]
0007d0  ea000000          B        |L1.2008|
                  |L1.2004|
;;;277        }
;;;278        else
;;;279        {
;;;280            i32Res = C_FAILED;
0007d4  e3e04000          MVN      r4,#0
                  |L1.2008|
;;;281        }
;;;282    
;;;283        return i32Res;
0007d8  e1a00004          MOV      r0,r4
;;;284    }
0007dc  e8bd8010          POP      {r4,pc}
;;;285    
                          ENDP

                  u32UART_WriteData PROC
;;;287    
;;;288    uint32_t u32UART_WriteData(uart_Ch_e eCh, const uint8_t pu8Data[], uint32_t u32Len)
0007e0  e92d4070          PUSH     {r4-r6,lr}
;;;289    {
0007e4  e1a04000          MOV      r4,r0
0007e8  e1a03001          MOV      r3,r1
0007ec  e1a05002          MOV      r5,r2
;;;290        uint32_t u32FifoRdy = 1U;
0007f0  e3a06001          MOV      r6,#1
;;;291        uint32_t u32Cnt     = 0U;
0007f4  e3a02000          MOV      r2,#0
;;;292    
;;;293        if (0x0U != pu8Data)
0007f8  e3530000          CMP      r3,#0
0007fc  0a000010          BEQ      |L1.2116|
;;;294        {
;;;295            /* Send byte by byte */
;;;296            while((u32Cnt < u32Len) && (u32FifoRdy>0U))
000800  ea00000b          B        |L1.2100|
                  |L1.2052|
;;;297            {
;;;298                if((1U == u32UART_IsTxFifoReady(eCh)))
000804  e1a00004          MOV      r0,r4
000808  ebfffffe          BL       u32UART_IsTxFifoReady
00080c  e3500001          CMP      r0,#1
000810  1a000006          BNE      |L1.2096|
;;;299                {
;;;300                    /* Write one byte */
;;;301                    vSetSITFIFO(eCh, pu8Data[u32Cnt]);
000814  e7d30002          LDRB     r0,[r3,r2]
000818  e1a01604          LSL      r1,r4,#12
00081c  e24115fe          SUB      r1,r1,#0x3f800000
000820  e24119ff          SUB      r1,r1,#0x3fc000
000824  e5c1001c          STRB     r0,[r1,#0x1c]
;;;302                    u32Cnt++;
000828  e2822001          ADD      r2,r2,#1
00082c  ea000000          B        |L1.2100|
                  |L1.2096|
;;;303                }
;;;304                else
;;;305                {
;;;306                    /* No more space in TX-FIFO */
;;;307                    u32FifoRdy = 0U; 
000830  e3a06000          MOV      r6,#0
                  |L1.2100|
000834  e1520005          CMP      r2,r5                 ;296
000838  2a000001          BCS      |L1.2116|
00083c  e3560000          CMP      r6,#0                 ;296
000840  1affffef          BNE      |L1.2052|
                  |L1.2116|
;;;308                }
;;;309            }
;;;310        }
;;;311        return u32Cnt;
000844  e1a00002          MOV      r0,r2
;;;312    }
000848  e8bd8070          POP      {r4-r6,pc}
;;;313    
                          ENDP

                  i32UART_ReadByte PROC
;;;315    
;;;316    int32_t i32UART_ReadByte(uart_Ch_e eCh, uint8_t *pu8Data)
00084c  e1a02000          MOV      r2,r0
;;;317    {
;;;318        int32_t i32Res = C_FAILED;  /* No data in Rx FIFO */
000850  e3e00000          MVN      r0,#0
;;;319        
;;;320        if (0x0U != pu8Data)
000854  e3510000          CMP      r1,#0
000858  0a000013          BEQ      |L1.2220|
;;;321        {
;;;322            if( biGetSIDISR_RFDN(eCh) > 0U )
00085c  e1a03602          LSL      r3,r2,#12
000860  e24335fe          SUB      r3,r3,#0x3f800000
000864  e24339ff          SUB      r3,r3,#0x3fc000
000868  e1d330b8          LDRH     r3,[r3,#8]
00086c  e203301f          AND      r3,r3,#0x1f
000870  e3530000          CMP      r3,#0
000874  0a00000c          BEQ      |L1.2220|
;;;323            {
;;;324                if( 0U == biGetSIDISR_ERI(eCh) )
000878  e1a03602          LSL      r3,r2,#12
00087c  e24335fe          SUB      r3,r3,#0x3f800000
000880  e24339ff          SUB      r3,r3,#0x3fc000
000884  e1d330b8          LDRH     r3,[r3,#8]
000888  e7e03553          UBFX     r3,r3,#10,#1
00088c  e3530000          CMP      r3,#0
000890  1a000005          BNE      |L1.2220|
;;;325                {
;;;326                    *pu8Data = u8GetSIRFIFO(eCh);
000894  e1a03602          LSL      r3,r2,#12
000898  e24335fe          SUB      r3,r3,#0x3f800000
00089c  e24339ff          SUB      r3,r3,#0x3fc000
0008a0  e5d33020          LDRB     r3,[r3,#0x20]
0008a4  e5c13000          STRB     r3,[r1,#0]
;;;327                    i32Res = C_SUCCESS;  /* data in Rx FIFO */
0008a8  e3a00000          MOV      r0,#0
                  |L1.2220|
;;;328                }
;;;329            }
;;;330        }
;;;331        return i32Res;
;;;332    }
0008ac  e12fff1e          BX       lr
;;;333    
                          ENDP

                  i32UART_ReadData PROC
;;;335    
;;;336    int32_t i32UART_ReadData(uart_Ch_e eCh, uint8_t pu8Data[], uint32_t *pu32Len)
0008b0  e92d40f0          PUSH     {r4-r7,lr}
;;;337    {
0008b4  e1a03000          MOV      r3,r0
;;;338    
;;;339        uint16_t u16DataFrames;
;;;340        uint16_t u16Error = 0U;
0008b8  e3a05000          MOV      r5,#0
;;;341        int32_t i32Res = C_SUCCESS;
0008bc  e3a00000          MOV      r0,#0
;;;342    
;;;343        if ( (0x0U != pu8Data) && (0x0U != pu32Len) )
0008c0  e3510000          CMP      r1,#0
0008c4  0a000027          BEQ      |L1.2408|
0008c8  e3520000          CMP      r2,#0
0008cc  0a000025          BEQ      |L1.2408|
;;;344        {
;;;345            *pu32Len = 0U;
0008d0  e3a06000          MOV      r6,#0
0008d4  e5826000          STR      r6,[r2,#0]
;;;346    
;;;347            /* Check if any data stored */
;;;348            u16DataFrames = biGetSIDISR_RFDN(eCh);
0008d8  e1a06603          LSL      r6,r3,#12
0008dc  e24665fe          SUB      r6,r6,#0x3f800000
0008e0  e24669ff          SUB      r6,r6,#0x3fc000
0008e4  e1d660b8          LDRH     r6,[r6,#8]
0008e8  e206401f          AND      r4,r6,#0x1f
;;;349    
;;;350            while( (*pu32Len < 32U) && (u16DataFrames > 0U) )
0008ec  ea000017          B        |L1.2384|
                  |L1.2288|
;;;351            {
;;;352                /* Check if error */
;;;353                u16Error = biGetSIDISR_ERI(eCh);
0008f0  e1a06603          LSL      r6,r3,#12
0008f4  e24665fe          SUB      r6,r6,#0x3f800000
0008f8  e24669ff          SUB      r6,r6,#0x3fc000
0008fc  e1d660b8          LDRH     r6,[r6,#8]
000900  e7e05556          UBFX     r5,r6,#10,#1
;;;354    
;;;355                if( 0U == u16Error )
000904  e3550000          CMP      r5,#0
000908  1a00000e          BNE      |L1.2376|
;;;356                {
;;;357                    pu8Data[*pu32Len] = u8GetSIRFIFO(eCh);
00090c  e1a06603          LSL      r6,r3,#12
000910  e24665fe          SUB      r6,r6,#0x3f800000
000914  e24669ff          SUB      r6,r6,#0x3fc000
000918  e5d66020          LDRB     r6,[r6,#0x20]
00091c  e5927000          LDR      r7,[r2,#0]
000920  e7c16007          STRB     r6,[r1,r7]
;;;358                    u16DataFrames = biGetSIDISR_RFDN(eCh);
000924  e1a06603          LSL      r6,r3,#12
000928  e24665fe          SUB      r6,r6,#0x3f800000
00092c  e24669ff          SUB      r6,r6,#0x3fc000
000930  e1d660b8          LDRH     r6,[r6,#8]
000934  e206401f          AND      r4,r6,#0x1f
;;;359                    (*pu32Len)++;
000938  e5926000          LDR      r6,[r2,#0]
00093c  e2866001          ADD      r6,r6,#1
000940  e5826000          STR      r6,[r2,#0]
000944  ea000001          B        |L1.2384|
                  |L1.2376|
;;;360                }
;;;361                else
;;;362                {
;;;363                    i32Res = C_FAILED;  /* Error */
000948  e3e00000          MVN      r0,#0
;;;364                    break;
00094c  ea000004          B        |L1.2404|
                  |L1.2384|
000950  e5926000          LDR      r6,[r2,#0]            ;350
000954  e3560020          CMP      r6,#0x20              ;350
000958  2a000001          BCS      |L1.2404|
00095c  e3540000          CMP      r4,#0                 ;350
000960  1affffe2          BNE      |L1.2288|
                  |L1.2404|
000964  ea000000          B        |L1.2412|
                  |L1.2408|
;;;365                }
;;;366            }
;;;367        }
;;;368        else
;;;369        {
;;;370            i32Res = C_FAILED;
000968  e3e00000          MVN      r0,#0
                  |L1.2412|
;;;371        }
;;;372        return i32Res;
;;;373    }
00096c  e8bd80f0          POP      {r4-r7,pc}
;;;374    
                          ENDP

                  i32UART_IsTimeOut PROC
;;;376    
;;;377    int32_t i32UART_IsTimeOut(uart_Ch_e eCh)
000970  e1a01000          MOV      r1,r0
;;;378    {
;;;379        int32_t i32TimeOut;
;;;380    
;;;381        /* Read time-out status */
;;;382        i32TimeOut = (int32_t) biGetSIDISR_TOUT(eCh);
000974  e1a02601          LSL      r2,r1,#12
000978  e24225fe          SUB      r2,r2,#0x3f800000
00097c  e24229ff          SUB      r2,r2,#0x3fc000
000980  e1d220b8          LDRH     r2,[r2,#8]
000984  e7e004d2          UBFX     r0,r2,#9,#1
;;;383    
;;;384        /* Clear the time-out flag */
;;;385        if(1 == i32TimeOut)
000988  e3500000          CMP      r0,#0
00098c  0a000008          BEQ      |L1.2484|
;;;386        {
;;;387            vClrSIDISR_TOUT(eCh);
000990  e1a02601          LSL      r2,r1,#12
000994  e24225fe          SUB      r2,r2,#0x3f800000
000998  e24229ff          SUB      r2,r2,#0x3fc000
00099c  e1d220b8          LDRH     r2,[r2,#8]
0009a0  e3c22c02          BIC      r2,r2,#0x200
0009a4  e1a03601          LSL      r3,r1,#12
0009a8  e24335fe          SUB      r3,r3,#0x3f800000
0009ac  e24339ff          SUB      r3,r3,#0x3fc000
0009b0  e1c320b8          STRH     r2,[r3,#8]
                  |L1.2484|
;;;388        }
;;;389    
;;;390        return i32TimeOut;
;;;391    }
0009b4  e12fff1e          BX       lr
;;;392    
                          ENDP

                  u8UART_GetRxDataCnt PROC
;;;394    
;;;395    uint8_t u8UART_GetRxDataCnt(uart_Ch_e eCh)
0009b8  e1a01000          MOV      r1,r0
;;;396    {
;;;397        return (uint8_t) biGetSIDISR_RFDN(eCh);
0009bc  e1a00601          LSL      r0,r1,#12
0009c0  e24005fe          SUB      r0,r0,#0x3f800000
0009c4  e24009ff          SUB      r0,r0,#0x3fc000
0009c8  e1d000b8          LDRH     r0,[r0,#8]
0009cc  e200001f          AND      r0,r0,#0x1f
;;;398    }
0009d0  e12fff1e          BX       lr
;;;399    
                          ENDP

                  u16UART_GetDmaIrqStat PROC
;;;408    
;;;409    uint16_t u16UART_GetDmaIrqStat(uart_Ch_e eCh)
0009d4  e1a01000          MOV      r1,r0
;;;410    {
;;;411      uint16_t u16IrqStat;
;;;412    
;;;413      /* Get register value */
;;;414      u16IrqStat = u16GetSIDISR(eCh);
0009d8  e1a02601          LSL      r2,r1,#12
0009dc  e24225fe          SUB      r2,r2,#0x3f800000
0009e0  e24229ff          SUB      r2,r2,#0x3fc000
0009e4  e1d200b8          LDRH     r0,[r2,#8]
;;;415    
;;;416      return u16IrqStat;
;;;417    }
0009e8  e12fff1e          BX       lr
;;;418    
                          ENDP

                  vUART_ClearDmaIrqFlag PROC
;;;420    
;;;421    void vUART_ClearDmaIrqFlag(uart_Ch_e eCh, uart_Flag_e eFlag)
0009ec  e92d4010          PUSH     {r4,lr}
;;;422    {
;;;423        uint16_t u16Mask;
;;;424    
;;;425        /* Mask for clearing */
;;;426        u16Mask = (uint16_t)(eFlag);
0009f0  e1a02001          MOV      r2,r1
;;;427    
;;;428        /* Select the register */
;;;429        if(eFlag > UART_FLG_OERS)
0009f4  e3510020          CMP      r1,#0x20
0009f8  da000005          BLE      |L1.2580|
;;;430        {
;;;431            /* DIDISR register */
;;;432            vSetSIDISR(eCh, ~u16Mask);
0009fc  e1e03002          MVN      r3,r2
000a00  e1a04600          LSL      r4,r0,#12
000a04  e24445fe          SUB      r4,r4,#0x3f800000
000a08  e24449ff          SUB      r4,r4,#0x3fc000
000a0c  e1c430b8          STRH     r3,[r4,#8]
000a10  ea000004          B        |L1.2600|
                  |L1.2580|
;;;433        }
;;;434        else
;;;435        {
;;;436           /* SISCISR register */
;;;437           vSetSISCISR(eCh, (uint8_t)(~u16Mask));
000a14  e1e03002          MVN      r3,r2
000a18  e1a04600          LSL      r4,r0,#12
000a1c  e24445fe          SUB      r4,r4,#0x3f800000
000a20  e24449ff          SUB      r4,r4,#0x3fc000
000a24  e5c4300c          STRB     r3,[r4,#0xc]
                  |L1.2600|
;;;438        }
;;;439    }
000a28  e8bd8010          POP      {r4,pc}
;;;440    
                          ENDP

                  u32UART_IsTxFifoFree PROC
;;;442    
;;;443    uint32_t u32UART_IsTxFifoFree(uart_Ch_e eCh)
000a2c  e1a01000          MOV      r1,r0
;;;444    {
;;;445        return (uint32_t) biGetSISCISR_TXALS(eCh);
000a30  e1a00601          LSL      r0,r1,#12
000a34  e24005fe          SUB      r0,r0,#0x3f800000
000a38  e24009ff          SUB      r0,r0,#0x3fc000
000a3c  e5d0000c          LDRB     r0,[r0,#0xc]
000a40  e7e000d0          UBFX     r0,r0,#1,#1
;;;446    }
000a44  e12fff1e          BX       lr
;;;447    
                          ENDP

                  vUART_TxRunCtrl PROC
;;;522    
;;;523    void vUART_TxRunCtrl(uart_Ch_e eCh, uart_Tsdr_e eRunCtrl)
000a48  e1a02600          LSL      r2,r0,#12
;;;524    {
;;;525        vSetSIFLCR_TSDR(eCh, (uint16_t)eRunCtrl);
000a4c  e24225fe          SUB      r2,r2,#0x3f800000
000a50  e24229ff          SUB      r2,r2,#0x3fc000
000a54  e1d221b4          LDRH     r2,[r2,#0x14]
000a58  e7c72391          BFI      r2,r1,#7,#1
000a5c  e1a03600          LSL      r3,r0,#12
000a60  e24335fe          SUB      r3,r3,#0x3f800000
000a64  e24339ff          SUB      r3,r3,#0x3fc000
000a68  e1c321b4          STRH     r2,[r3,#0x14]
;;;526    }
000a6c  e12fff1e          BX       lr
;;;527    
                          ENDP

                  vUART_TxBreak PROC
;;;529    
;;;530    void vUART_TxBreak(uart_Ch_e eCh, uart_Tbrk_e eBreak)
000a70  e1a02600          LSL      r2,r0,#12
;;;531    {
;;;532        vSetSIFLCR_TBRK(eCh, (uint16_t)eBreak);
000a74  e24225fe          SUB      r2,r2,#0x3f800000
000a78  e24229ff          SUB      r2,r2,#0x3fc000
000a7c  e1d221b4          LDRH     r2,[r2,#0x14]
000a80  e7c02011          BFI      r2,r1,#0,#1
000a84  e1a03600          LSL      r3,r0,#12
000a88  e24335fe          SUB      r3,r3,#0x3f800000
000a8c  e24339ff          SUB      r3,r3,#0x3fc000
000a90  e1c321b4          STRH     r2,[r3,#0x14]
;;;533    }
000a94  e12fff1e          BX       lr
;;;534    
                          ENDP

                  |L1.2712|
                          DCD      au8LLDD_UART_C_REVISION
                  |L1.2716|
                          DCD      au8LLDD_UART_C_TAG
                  |L1.2720|
                          DCD      au8LLDD_UART_H_REVISION
                  |L1.2724|
                          DCD      au8LLDD_UART_H_TAG
                  |L1.2728|
                          DCD      au8LLDD_UART_IO_H_REVISION
                  |L1.2732|
                          DCD      au8LLDD_UART_IO_H_TAG
                  |L1.2736|
                          DCD      0x047868c0

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_UART_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313820          DCB      0x2e,0x31,0x38,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_UART_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_UART_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313220          DCB      0x2e,0x31,0x32,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_UART_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_UART_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313220          DCB      0x2e,0x31,0x32,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_UART_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
