; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\adc.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\adc.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\adc.crf ..\..\..\..\lldd\src\adc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vADC_GetVersion PROC
;;;61     
;;;62     void vADC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;63                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;64                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;65     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;66        *pau8ModuleRevision = &au8LLDD_ADC_C_REVISION[0];
000008  e59f6478          LDR      r6,|L1.1160|
00000c  e5806000          STR      r6,[r0,#0]
;;;67        *pau8ModuleTag      = &au8LLDD_ADC_C_TAG[0];
000010  e59f6474          LDR      r6,|L1.1164|
000014  e5816000          STR      r6,[r1,#0]
;;;68        *pau8HeaderRevision = &au8LLDD_ADC_H_REVISION[0];
000018  e59f6470          LDR      r6,|L1.1168|
00001c  e5826000          STR      r6,[r2,#0]
;;;69        *pau8HeaderTag      = &au8LLDD_ADC_H_TAG[0];
000020  e59f646c          LDR      r6,|L1.1172|
000024  e5836000          STR      r6,[r3,#0]
;;;70        *pau8IORevision     = &au8LLDD_ADC_IO_H_REVISION[0];
000028  e59f6468          LDR      r6,|L1.1176|
00002c  e5846000          STR      r6,[r4,#0]
;;;71        *pau8IOTag          = &au8LLDD_ADC_IO_H_TAG[0];
000030  e59f6464          LDR      r6,|L1.1180|
000034  e5856000          STR      r6,[r5,#0]
;;;72     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;73     
                          ENDP

                  i32ADC_InputChannelSelection PROC
;;;76     
;;;77     int32_t i32ADC_InputChannelSelection(adc_operation_mode_e eMode, adc_device_e eDevice)
00003c  e92d4010          PUSH     {r4,lr}
;;;78     {
000040  e1a02000          MOV      r2,r0
;;;79         int32_t i32Res = C_SUCCESS;
000044  e3a00000          MOV      r0,#0
;;;80     
;;;81         switch (eMode)
000048  e3520000          CMP      r2,#0
00004c  0a000002          BEQ      |L1.92|
000050  e3520001          CMP      r2,#1
000054  1a00000e          BNE      |L1.148|
000058  ea000006          B        |L1.120|
                  |L1.92|
;;;82         {
;;;83             case ADC_CONVERSION_MODE:
00005c  e320f000          NOP      
;;;84                 {
;;;85                     vSetADCMOD_ADCH((uint32_t)eDevice);
000060  e59f3438          LDR      r3,|L1.1184|
000064  e5933000          LDR      r3,[r3,#0]
000068  e7c43091          BFI      r3,r1,#1,#4
00006c  e59f442c          LDR      r4,|L1.1184|
000070  e5843000          STR      r3,[r4,#0]
;;;86                 }
;;;87                 break;
000074  ea000009          B        |L1.160|
                  |L1.120|
;;;88             case ADC_HP_CONVERSION_MODE:
000078  e320f000          NOP      
;;;89                 {
;;;90                     vSetADCHP_HPCH((uint16_t)eDevice);
00007c  e59f341c          LDR      r3,|L1.1184|
000080  e1d330b8          LDRH     r3,[r3,#8]
000084  e7c33011          BFI      r3,r1,#0,#4
000088  e59f4410          LDR      r4,|L1.1184|
00008c  e1c430b8          STRH     r3,[r4,#8]
;;;91                 }
;;;92                 break;
000090  ea000002          B        |L1.160|
                  |L1.148|
;;;93             default:
000094  e320f000          NOP      
;;;94                 {
;;;95                     i32Res = C_FAILED;
000098  e3e00000          MVN      r0,#0
;;;96                 }
;;;97                 break;
00009c  e320f000          NOP      
                  |L1.160|
0000a0  e320f000          NOP                            ;87
;;;98         }
;;;99     
;;;100        return i32Res;
;;;101    }
0000a4  e8bd8010          POP      {r4,pc}
;;;102    
                          ENDP

                  vADC_CompareInputChannelSelection PROC
;;;105    
;;;106    void vADC_CompareInputChannelSelection(adc_compare_channel_e eChannel, adc_device_e eDevice)
0000a8  e1a02100          LSL      r2,r0,#2
;;;107    {
;;;108        vSetADCCMP_CCH(eChannel, eDevice);
0000ac  e28224c1          ADD      r2,r2,#0xc1000000
0000b0  e24228bf          SUB      r2,r2,#0xbf0000
0000b4  e592200c          LDR      r2,[r2,#0xc]
0000b8  e7cf2611          BFI      r2,r1,#12,#4
0000bc  e1a03100          LSL      r3,r0,#2
0000c0  e28334c1          ADD      r3,r3,#0xc1000000
0000c4  e24338bf          SUB      r3,r3,#0xbf0000
0000c8  e583200c          STR      r2,[r3,#0xc]
;;;109    }
0000cc  e12fff1e          BX       lr
;;;110    
                          ENDP

                  vADC_AdcConversionConfig PROC
;;;113    
;;;114    void vADC_AdcConversionConfig(adc_conversion_config eConfig)
0000d0  e92d4003          PUSH     {r0,r1,lr}
;;;115    {
;;;116        vSetADCMOD_ADCH((uint32_t)eConfig.eDevice);
0000d4  e5dd1000          LDRB     r1,[sp,#0]
0000d8  e59f03c0          LDR      r0,|L1.1184|
0000dc  e5900000          LDR      r0,[r0,#0]
0000e0  e7c40091          BFI      r0,r1,#1,#4
0000e4  e59f13b4          LDR      r1,|L1.1184|
0000e8  e5810000          STR      r0,[r1,#0]
;;;117        vSetADCMOD_SCAN((uint32_t)eConfig.eChannelScanMode);
0000ec  e5dd1001          LDRB     r1,[sp,#1]
0000f0  e59f03a8          LDR      r0,|L1.1184|
0000f4  e5900000          LDR      r0,[r0,#0]
0000f8  e7c00011          BFI      r0,r1,#0,#1
0000fc  e59f139c          LDR      r1,|L1.1184|
000100  e5810000          STR      r0,[r1,#0]
;;;118        vSetADCMOD_REP((uint32_t)eConfig.eRepeatMode);
000104  e5dd1002          LDRB     r1,[sp,#2]
000108  e59f0390          LDR      r0,|L1.1184|
00010c  e5900000          LDR      r0,[r0,#0]
000110  e7c50291          BFI      r0,r1,#5,#1
000114  e59f1384          LDR      r1,|L1.1184|
000118  e5810000          STR      r0,[r1,#0]
;;;119        vSetADCMOD_DME((uint32_t)eConfig.eDelayedMode);
00011c  e5dd1003          LDRB     r1,[sp,#3]
000120  e59f0378          LDR      r0,|L1.1184|
000124  e5900000          LDR      r0,[r0,#0]
000128  e7c60311          BFI      r0,r1,#6,#1
00012c  e59f136c          LDR      r1,|L1.1184|
000130  e5810000          STR      r0,[r1,#0]
;;;120        vSetADCMOD_ITM((uint32_t)eConfig.eInterruptGenerationMode);
000134  e5dd1004          LDRB     r1,[sp,#4]
000138  e59f0360          LDR      r0,|L1.1184|
00013c  e5900000          LDR      r0,[r0,#0]
000140  e7c70391          BFI      r0,r1,#7,#1
000144  e59f1354          LDR      r1,|L1.1184|
000148  e5810000          STR      r0,[r1,#0]
;;;121        vSetADCMOD_TRGE((uint32_t)eConfig.eTriggerType);
00014c  e5dd1005          LDRB     r1,[sp,#5]
000150  e59f0348          LDR      r0,|L1.1184|
000154  e5900000          LDR      r0,[r0,#0]
000158  e7c80411          BFI      r0,r1,#8,#1
00015c  e59f133c          LDR      r1,|L1.1184|
000160  e5810000          STR      r0,[r1,#0]
;;;122        vSetADCMOD_TSEL((uint32_t)eConfig.eTriggerSelection);
000164  e5dd1006          LDRB     r1,[sp,#6]
000168  e59f0330          LDR      r0,|L1.1184|
00016c  e5900000          LDR      r0,[r0,#0]
000170  e7ca0491          BFI      r0,r1,#9,#2
000174  e59f1324          LDR      r1,|L1.1184|
000178  e5810000          STR      r0,[r1,#0]
;;;123    }
00017c  e8bd800c          POP      {r2,r3,pc}
;;;124    
                          ENDP

                  vADC_ApplyReset PROC
;;;127    
;;;128    void vADC_ApplyReset(void)
000180  e59f0318          LDR      r0,|L1.1184|
;;;129    {
;;;130        vSetADCMOD_ADC_RT((uint32_t)ADC_RESET);
000184  e5900000          LDR      r0,[r0,#0]
000188  e3c00801          BIC      r0,r0,#0x10000
00018c  e2800801          ADD      r0,r0,#0x10000
000190  e59f1308          LDR      r1,|L1.1184|
000194  e5810000          STR      r0,[r1,#0]
;;;131        vSetADCMOD_ADC_RT((uint32_t)ADC_NORMAL_OPERATION);
000198  e1a00001          MOV      r0,r1
00019c  e5900000          LDR      r0,[r0,#0]
0001a0  e3c00801          BIC      r0,r0,#0x10000
0001a4  e5810000          STR      r0,[r1,#0]
;;;132    }
0001a8  e12fff1e          BX       lr
;;;133    
                          ENDP

                  vADC_StartConversion PROC
;;;136    
;;;137    void vADC_StartConversion(void)
0001ac  e59f02ec          LDR      r0,|L1.1184|
;;;138    {
;;;139        vSetADCSTA_ADSFT((uint8_t)1U);
0001b0  e5d00004          LDRB     r0,[r0,#4]
0001b4  e3c00001          BIC      r0,r0,#1
0001b8  e2800001          ADD      r0,r0,#1
0001bc  e59f12dc          LDR      r1,|L1.1184|
0001c0  e5c10004          STRB     r0,[r1,#4]
;;;140    }
0001c4  e12fff1e          BX       lr
;;;141    
                          ENDP

                  vADC_WaitForAdcCompletion PROC
;;;144    
;;;145    void vADC_WaitForAdcCompletion(void)
0001c8  e320f000          NOP      
                  |L1.460|
;;;146    {
;;;147        while(biGetADCSTA_BUSY() == 1U){}
0001cc  e59f02cc          LDR      r0,|L1.1184|
0001d0  e5d00004          LDRB     r0,[r0,#4]
0001d4  e7e002d0          UBFX     r0,r0,#5,#1
0001d8  e3500000          CMP      r0,#0
0001dc  1afffffa          BNE      |L1.460|
;;;148        while (biGetADCSTA_EOS() == 0U){}
0001e0  e320f000          NOP      
                  |L1.484|
0001e4  e59f02b4          LDR      r0,|L1.1184|
0001e8  e5d00004          LDRB     r0,[r0,#4]
0001ec  e7e00250          UBFX     r0,r0,#4,#1
0001f0  e3500000          CMP      r0,#0
0001f4  0afffffa          BEQ      |L1.484|
;;;149        vClrADCSTA_EOS();
0001f8  e59f02a0          LDR      r0,|L1.1184|
0001fc  e5d00004          LDRB     r0,[r0,#4]
000200  e3c00010          BIC      r0,r0,#0x10
000204  e59f1294          LDR      r1,|L1.1184|
000208  e5c10004          STRB     r0,[r1,#4]
;;;150    }
00020c  e12fff1e          BX       lr
;;;151    
                          ENDP

                  vADC_AdcHpConversionConfig PROC
;;;154    
;;;155    void vADC_AdcHpConversionConfig(adc_hp_conversion_config eConfig)
000210  e92d4001          PUSH     {r0,lr}
;;;156    {
;;;157        vSetADCHP_HPCH((uint8_t)eConfig.eDevice);
000214  e5dd1000          LDRB     r1,[sp,#0]
000218  e59f0280          LDR      r0,|L1.1184|
00021c  e1d000b8          LDRH     r0,[r0,#8]
000220  e7c30011          BFI      r0,r1,#0,#4
000224  e59f1274          LDR      r1,|L1.1184|
000228  e1c100b8          STRH     r0,[r1,#8]
;;;158        vSetADCHP_HPRQ((uint8_t)eConfig.ePriorityConversionRequest);
00022c  e5dd1001          LDRB     r1,[sp,#1]
000230  e59f0268          LDR      r0,|L1.1184|
000234  e1d000b8          LDRH     r0,[r0,#8]
000238  e7c40211          BFI      r0,r1,#4,#1
00023c  e59f125c          LDR      r1,|L1.1184|
000240  e1c100b8          STRH     r0,[r1,#8]
;;;159    }
000244  e8bd8008          POP      {r3,pc}
;;;160    
                          ENDP

                  i32ADC_CompareConfig PROC
;;;163    
;;;164    int32_t i32ADC_CompareConfig(adc_compare_channel_e eChannel, adc_compare_config eConfig)
000248  e92d4007          PUSH     {r0-r2,lr}
;;;165    {
00024c  e1a03000          MOV      r3,r0
;;;166        int32_t i32Res = C_SUCCESS;
000250  e3a00000          MOV      r0,#0
;;;167    
;;;168        if (eChannel <= ADC_COMPARE_CHANNEL_1)
000254  e3530001          CMP      r3,#1
000258  ca000028          BGT      |L1.768|
;;;169        {
;;;170            vSetADCCMP_CVAL(eChannel, (uint32_t)eConfig.u16CompareValue);
00025c  e1dd20b6          LDRH     r2,[sp,#6]
000260  e1a01103          LSL      r1,r3,#2
000264  e28114c1          ADD      r1,r1,#0xc1000000
000268  e24118bf          SUB      r1,r1,#0xbf0000
00026c  e591100c          LDR      r1,[r1,#0xc]
000270  e7c91012          BFI      r1,r2,#0,#10
000274  e1a02103          LSL      r2,r3,#2
000278  e28224c1          ADD      r2,r2,#0xc1000000
00027c  e24228bf          SUB      r2,r2,#0xbf0000
000280  e582100c          STR      r1,[r2,#0xc]
;;;171            vSetADCCMP_CINT(eChannel, (uint32_t)eConfig.eCompareInterrupt);
000284  e5dd2008          LDRB     r2,[sp,#8]
000288  e1a01103          LSL      r1,r3,#2
00028c  e28114c1          ADD      r1,r1,#0xc1000000
000290  e24118bf          SUB      r1,r1,#0xbf0000
000294  e591100c          LDR      r1,[r1,#0xc]
000298  e7ca1512          BFI      r1,r2,#10,#1
00029c  e1a02103          LSL      r2,r3,#2
0002a0  e28224c1          ADD      r2,r2,#0xc1000000
0002a4  e24228bf          SUB      r2,r2,#0xbf0000
0002a8  e582100c          STR      r1,[r2,#0xc]
;;;172            vSetADCCMP_CCON(eChannel, (uint32_t)eConfig.eCompareCondition);
0002ac  e5dd2009          LDRB     r2,[sp,#9]
0002b0  e1a01103          LSL      r1,r3,#2
0002b4  e28114c1          ADD      r1,r1,#0xc1000000
0002b8  e24118bf          SUB      r1,r1,#0xbf0000
0002bc  e591100c          LDR      r1,[r1,#0xc]
0002c0  e7cb1592          BFI      r1,r2,#11,#1
0002c4  e1a02103          LSL      r2,r3,#2
0002c8  e28224c1          ADD      r2,r2,#0xc1000000
0002cc  e24228bf          SUB      r2,r2,#0xbf0000
0002d0  e582100c          STR      r1,[r2,#0xc]
;;;173            vSetADCCMP_CCH(eChannel,  (uint32_t)eConfig.eDevice);
0002d4  e5dd2004          LDRB     r2,[sp,#4]
0002d8  e1a01103          LSL      r1,r3,#2
0002dc  e28114c1          ADD      r1,r1,#0xc1000000
0002e0  e24118bf          SUB      r1,r1,#0xbf0000
0002e4  e591100c          LDR      r1,[r1,#0xc]
0002e8  e7cf1612          BFI      r1,r2,#12,#4
0002ec  e1a02103          LSL      r2,r3,#2
0002f0  e28224c1          ADD      r2,r2,#0xc1000000
0002f4  e24228bf          SUB      r2,r2,#0xbf0000
0002f8  e582100c          STR      r1,[r2,#0xc]
0002fc  ea000000          B        |L1.772|
                  |L1.768|
;;;174        }
;;;175        else
;;;176        {
;;;177            i32Res = C_FAILED;
000300  e3e00000          MVN      r0,#0
                  |L1.772|
;;;178        }
;;;179    
;;;180        return i32Res;
;;;181    }
000304  e8bd800e          POP      {r1-r3,pc}
;;;182    
                          ENDP

                  i32ADC_SetCompareValue PROC
;;;185    
;;;186    int32_t i32ADC_SetCompareValue(adc_compare_channel_e eChannel, uint16_t u16CompareValue)
000308  e92d4010          PUSH     {r4,lr}
;;;187    {
00030c  e1a02000          MOV      r2,r0
;;;188        int32_t i32Res = C_SUCCESS;
000310  e3a00000          MOV      r0,#0
;;;189    
;;;190        if (eChannel <= ADC_COMPARE_CHANNEL_1)
000314  e3520001          CMP      r2,#1
000318  ca000009          BGT      |L1.836|
;;;191        {
;;;192            vSetADCCMP_CVAL(eChannel, u16CompareValue);
00031c  e1a03102          LSL      r3,r2,#2
000320  e28334c1          ADD      r3,r3,#0xc1000000
000324  e24338bf          SUB      r3,r3,#0xbf0000
000328  e593300c          LDR      r3,[r3,#0xc]
00032c  e7c93011          BFI      r3,r1,#0,#10
000330  e1a04102          LSL      r4,r2,#2
000334  e28444c1          ADD      r4,r4,#0xc1000000
000338  e24448bf          SUB      r4,r4,#0xbf0000
00033c  e584300c          STR      r3,[r4,#0xc]
000340  ea000000          B        |L1.840|
                  |L1.836|
;;;193        }
;;;194        else
;;;195        {
;;;196            i32Res = C_FAILED;
000344  e3e00000          MVN      r0,#0
                  |L1.840|
;;;197        }
;;;198    
;;;199        return i32Res;
;;;200    }
000348  e8bd8010          POP      {r4,pc}
;;;201    
                          ENDP

                  i32ADC_WaitForCompareCompletion PROC
;;;204    
;;;205    int32_t i32ADC_WaitForCompareCompletion(adc_compare_channel_e eChannel)
00034c  e1a01000          MOV      r1,r0
;;;206    {
;;;207        int32_t i32Res = C_SUCCESS;
000350  e3a00000          MOV      r0,#0
;;;208    
;;;209        if (eChannel <= ADC_COMPARE_CHANNEL_1)
000354  e3510001          CMP      r1,#1
000358  ca000012          BGT      |L1.936|
;;;210        {
;;;211            while(biGetADCCMP_CMON(eChannel) == 1U){}
00035c  e320f000          NOP      
                  |L1.864|
000360  e1a02101          LSL      r2,r1,#2
000364  e28224c1          ADD      r2,r2,#0xc1000000
000368  e24228bf          SUB      r2,r2,#0xbf0000
00036c  e592200c          LDR      r2,[r2,#0xc]
000370  e7e02852          UBFX     r2,r2,#16,#1
000374  e3520000          CMP      r2,#0
000378  1afffff8          BNE      |L1.864|
;;;212            vClrADCCMP_CMON((uint32_t)eChannel);
00037c  e1a02101          LSL      r2,r1,#2
000380  e28224c1          ADD      r2,r2,#0xc1000000
000384  e24228bf          SUB      r2,r2,#0xbf0000
000388  e592200c          LDR      r2,[r2,#0xc]
00038c  e3c22801          BIC      r2,r2,#0x10000
000390  e2822801          ADD      r2,r2,#0x10000
000394  e1a03101          LSL      r3,r1,#2
000398  e28334c1          ADD      r3,r3,#0xc1000000
00039c  e24338bf          SUB      r3,r3,#0xbf0000
0003a0  e583200c          STR      r2,[r3,#0xc]
0003a4  ea000000          B        |L1.940|
                  |L1.936|
;;;213        }
;;;214        else
;;;215        {
;;;216            i32Res = C_FAILED;
0003a8  e3e00000          MVN      r0,#0
                  |L1.940|
;;;217        }
;;;218    
;;;219        return i32Res;
;;;220    }
0003ac  e12fff1e          BX       lr
;;;221    
                          ENDP

                  i8ADC_ReadResult PROC
;;;224    
;;;225    int8_t i8ADC_ReadResult(adc_device_e eDevice, uint16_t * u16Result)
0003b0  e92d4010          PUSH     {r4,lr}
;;;226    {
0003b4  e1a02000          MOV      r2,r0
;;;227        int8_t   i8Res;
;;;228        uint16_t u16ResVal;
;;;229    
;;;230        u16ResVal = u16GetADCRES(eDevice);
0003b8  e1a04102          LSL      r4,r2,#2
0003bc  e28444c1          ADD      r4,r4,#0xc1000000
0003c0  e24448bf          SUB      r4,r4,#0xbf0000
0003c4  e1d431b4          LDRH     r3,[r4,#0x14]
;;;231    
;;;232        if ((0x4000U == (u16ResVal & 0x4000U)) || (0x0000U == (u16ResVal & 0x8000U)))
0003c8  e2034901          AND      r4,r3,#0x4000
0003cc  e3540901          CMP      r4,#0x4000
0003d0  0a000002          BEQ      |L1.992|
0003d4  e2034902          AND      r4,r3,#0x8000
0003d8  e3540000          CMP      r4,#0
0003dc  1a000003          BNE      |L1.1008|
                  |L1.992|
;;;233        {
;;;234            *u16Result = 0U;
0003e0  e3a04000          MOV      r4,#0
0003e4  e1c140b0          STRH     r4,[r1,#0]
;;;235            i8Res      = C_FAILED;
0003e8  e3e00000          MVN      r0,#0
0003ec  ea000006          B        |L1.1036|
                  |L1.1008|
;;;236        }
;;;237        else
;;;238        {
;;;239            *u16Result = (uint16_t)biGetADCRES_DAT(eDevice);
0003f0  e1a04102          LSL      r4,r2,#2
0003f4  e28444c1          ADD      r4,r4,#0xc1000000
0003f8  e24448bf          SUB      r4,r4,#0xbf0000
0003fc  e1d441b4          LDRH     r4,[r4,#0x14]
000400  e7df451f          BFC      r4,#10,#22
000404  e1c140b0          STRH     r4,[r1,#0]
;;;240            i8Res      = C_SUCCESS;
000408  e3a00000          MOV      r0,#0
                  |L1.1036|
;;;241        }
;;;242    
;;;243        return i8Res;
;;;244    }
00040c  e8bd8010          POP      {r4,pc}
;;;245    
                          ENDP

                  i8ADC_ReadHighPriorityResult PROC
;;;248    
;;;249    int8_t i8ADC_ReadHighPriorityResult(uint16_t * u16Result)
000410  e92d4010          PUSH     {r4,lr}
;;;250    {
000414  e1a01000          MOV      r1,r0
;;;251        int8_t  i8Res;
;;;252        uint8_t u8Ovr, u8Val;
;;;253    
;;;254        u8Ovr = (uint8_t)biGetADCHPR_OVR();
000418  e59f4080          LDR      r4,|L1.1184|
00041c  e1d445b4          LDRH     r4,[r4,#0x54]
000420  e7e02754          UBFX     r2,r4,#14,#1
;;;255        u8Val =	(uint8_t)biGetADCHPR_VAL();
000424  e59f4074          LDR      r4,|L1.1184|
000428  e1d445b4          LDRH     r4,[r4,#0x54]
00042c  e1a037a4          LSR      r3,r4,#15
;;;256        if ((1U == u8Ovr) || (0U == u8Val))
000430  e3520000          CMP      r2,#0
000434  1a000001          BNE      |L1.1088|
000438  e3530000          CMP      r3,#0
00043c  1a000003          BNE      |L1.1104|
                  |L1.1088|
;;;257        {
;;;258            *u16Result = 0U;
000440  e3a04000          MOV      r4,#0
000444  e1c140b0          STRH     r4,[r1,#0]
;;;259            i8Res      = C_FAILED;
000448  e3e00000          MVN      r0,#0
00044c  ea000004          B        |L1.1124|
                  |L1.1104|
;;;260        }
;;;261        else
;;;262        {
;;;263            *u16Result = (uint16_t)biGetADCHPR_DAT();
000450  e59f4048          LDR      r4,|L1.1184|
000454  e1d445b4          LDRH     r4,[r4,#0x54]
000458  e7df451f          BFC      r4,#10,#22
00045c  e1c140b0          STRH     r4,[r1,#0]
;;;264            i8Res      = C_SUCCESS;
000460  e3a00000          MOV      r0,#0
                  |L1.1124|
;;;265        }
;;;266    
;;;267        return i8Res;
;;;268    }
000464  e8bd8010          POP      {r4,pc}
;;;269    /****************************************************************************/
                          ENDP

                  eADC_GetProcessStatus PROC
;;;270    adc_conversion_busy_status_e eADC_GetProcessStatus(void)
000468  e59f1030          LDR      r1,|L1.1184|
;;;271    {
;;;272        adc_conversion_busy_status_e eStatus;
;;;273    
;;;274        eStatus = (biGetADCHP_HP() == 0x0U) ? ADC_CONVERTER_INACTIVE : ADC_CONVERTER_IN_PROGRESS;
00046c  e1d110b8          LDRH     r1,[r1,#8]
000470  e7e002d1          UBFX     r0,r1,#5,#1
;;;275    
;;;276        return eStatus;
;;;277    }
000474  e12fff1e          BX       lr
;;;278    
                          ENDP

                  eADC_GetEventsCount PROC
;;;279    /****************************************************************************/
;;;280    adc_events_e eADC_GetEventsCount(void)
000478  e59f1020          LDR      r1,|L1.1184|
;;;281    {
;;;282        adc_events_e eEventsNo;
;;;283    
;;;284        eEventsNo = (adc_events_e)biGetADCHP_HPE();
00047c  e1d110b8          LDRH     r1,[r1,#8]
000480  e1a00721          LSR      r0,r1,#14
;;;285    
;;;286        return eEventsNo;
;;;287    }
000484  e12fff1e          BX       lr
;;;288    /****************************************************************************/
                          ENDP

                  |L1.1160|
                          DCD      au8LLDD_ADC_C_REVISION
                  |L1.1164|
                          DCD      au8LLDD_ADC_C_TAG
                  |L1.1168|
                          DCD      au8LLDD_ADC_H_REVISION
                  |L1.1172|
                          DCD      au8LLDD_ADC_H_TAG
                  |L1.1176|
                          DCD      au8LLDD_ADC_IO_H_REVISION
                  |L1.1180|
                          DCD      au8LLDD_ADC_IO_H_TAG
                  |L1.1184|
                          DCD      0xc0410000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_ADC_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313020          DCB      0x2e,0x31,0x30,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_ADC_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_ADC_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e392024          DCB      0x2e,0x39,0x20,0x24
000034  00                DCB      0x00
                  au8LLDD_ADC_H_TAG
000035  244e61            DCB      0x24,0x4e,0x61
000038  6d653a20          DCB      0x6d,0x65,0x3a,0x20
00003c  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
000040  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000044  202400            DCB      0x20,0x24,0x00
                  au8LLDD_ADC_IO_H_REVISION
000047  24                DCB      0x24
000048  52657669          DCB      0x52,0x65,0x76,0x69
00004c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000050  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000054  31312024          DCB      0x31,0x31,0x20,0x24
000058  00                DCB      0x00
                  au8LLDD_ADC_IO_H_TAG
000059  244e61            DCB      0x24,0x4e,0x61
00005c  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000060  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
000064  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000068  202400            DCB      0x20,0x24,0x00
