; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\rotation_matrix.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\rotation_matrix.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\rotation_matrix.crf ..\..\..\..\lldd\src\rotation_matrix.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vRot_GetVersion PROC
;;;69     
;;;70     void vRot_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4010          PUSH     {r4,lr}
;;;71                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag)
;;;72     {
;;;73          *pau8ModuleRevision = &au8LLDD_GA_ROTATE_MATRIX_C_REVISION[0];
000004  e59f4fc0          LDR      r4,|L1.4044|
000008  e5804000          STR      r4,[r0,#0]
;;;74          *pau8ModuleTag      = &au8LLDD_GA_ROTATE_MATRIX_C_TAG[0];
00000c  e59f4fbc          LDR      r4,|L1.4048|
000010  e5814000          STR      r4,[r1,#0]
;;;75          *pau8HeaderRevision = &au8LLDD_GA_ROTATE_MATRIX_H_REVISION[0];
000014  e59f4fb8          LDR      r4,|L1.4052|
000018  e5824000          STR      r4,[r2,#0]
;;;76          *pau8HeaderTag      = &au8LLDD_GA_ROTATE_MATRIX_H_TAG[0];
00001c  e59f4fb4          LDR      r4,|L1.4056|
000020  e5834000          STR      r4,[r3,#0]
;;;77     }
000024  e8bd8010          POP      {r4,pc}
;;;78     
                          ENDP

                  vRot_SetMemSrc PROC
;;;79     /* ....................................................................... */
;;;80     void vRot_SetMemSrc(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList)
000028  e92d40f0          PUSH     {r4-r7,lr}
;;;81     {
;;;82         uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00002c  e3044000          MOVW     r4,#0x4000
000030  e7943002          LDR      r3,[r4,r2]
;;;83     
;;;84     #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;85     
;;;86         uint32_t u32NeededDW  = 3;
;;;87        
;;;88         u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;89         
;;;90         /* check if there is enough space in command list: */
;;;91         if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;92         {
;;;93           pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;94           pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;95           return;
;;;96         }
;;;97         else 
;;;98         {
;;;99           pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;100        }
;;;101    #endif
;;;102    
;;;103        pu64Curr[0] = ROT_LOAD_SRCWIDTH(u32Width);
000034  e3a06000          MOV      r6,#0
000038  e0067006          AND      r7,r6,r6
00003c  e1a05006          MOV      r5,r6
000040  e1814005          ORR      r4,r1,r5
000044  e6ff5077          UXTH     r5,r7
000048  e1a06004          MOV      r6,r4
00004c  e385700a          ORR      r7,r5,#0xa
000050  e59f4f84          LDR      r4,|L1.4060|
000054  e1844007          ORR      r4,r4,r7
000058  e5834004          STR      r4,[r3,#4]
00005c  e5836000          STR      r6,[r3,#0]
;;;104        pu64Curr[1] = ROT_LOAD_SOURCEADDR(u32Addr);
000060  e3a05000          MOV      r5,#0
000064  e0055005          AND      r5,r5,r5
000068  e3855009          ORR      r5,r5,#9
00006c  e59f4f68          LDR      r4,|L1.4060|
000070  e1844005          ORR      r4,r4,r5
000074  e5830008          STR      r0,[r3,#8]
000078  e583400c          STR      r4,[r3,#0xc]
;;;105    
;;;106        pstCmdList->pu64Current = &pu64Curr[2];
00007c  e2834010          ADD      r4,r3,#0x10
000080  e3045000          MOVW     r5,#0x4000
000084  e7854002          STR      r4,[r5,r2]
;;;107    }
000088  e8bd80f0          POP      {r4-r7,pc}
;;;108    
                          ENDP

                  vRot_SetMemDest PROC
;;;109    /* ....................................................................... */
;;;110    void vRot_SetMemDest(uint32_t u32Addr, ga_list_st* pstCmdList)
00008c  e92d40f0          PUSH     {r4-r7,lr}
;;;111    {
;;;112        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000090  e3043000          MOVW     r3,#0x4000
000094  e7932001          LDR      r2,[r3,r1]
;;;113        
;;;114    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;115    
;;;116        uint32_t u32NeededDW  = 2U;
;;;117       
;;;118        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;119        
;;;120        /* check if there is enough space in command list: */
;;;121        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;122        {
;;;123          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;124          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;125          return;
;;;126        }
;;;127        else 
;;;128        {
;;;129          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;130        }
;;;131    #endif
;;;132    
;;;133        pu64Curr[0] = ROT_LOAD_DESTADDR( u32Addr);
000098  e3a03000          MOV      r3,#0
00009c  e0035003          AND      r5,r3,r3
0000a0  e1806003          ORR      r6,r0,r3
0000a4  e6ff4075          UXTH     r4,r5
0000a8  e3843004          ORR      r3,r4,#4
0000ac  e59f4f28          LDR      r4,|L1.4060|
0000b0  e1833004          ORR      r3,r3,r4
0000b4  e5823004          STR      r3,[r2,#4]
0000b8  e5826000          STR      r6,[r2,#0]
;;;134    
;;;135        pstCmdList->pu64Current = &pu64Curr[1];
0000bc  e2823008          ADD      r3,r2,#8
0000c0  e3044000          MOVW     r4,#0x4000
0000c4  e7843001          STR      r3,[r4,r1]
;;;136        pstCmdList->u32UsedDoubleWords = 2U;
0000c8  e3a03002          MOV      r3,#2
0000cc  e3044004          MOV      r4,#0x4004
0000d0  e7843001          STR      r3,[r4,r1]
;;;137    }
0000d4  e8bd80f0          POP      {r4-r7,pc}
;;;138    
                          ENDP

                  vRot_SetMemDim PROC
;;;139    /* ....................................................................... */
;;;140    void vRot_SetMemDim(uint16_t u16Width, uint16_t u16Height, ga_list_st* pstCmdList)
0000d8  e92d40f0          PUSH     {r4-r7,lr}
;;;141    {
;;;142        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0000dc  e3044000          MOVW     r4,#0x4000
0000e0  e7943002          LDR      r3,[r4,r2]
;;;143    
;;;144    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;145    
;;;146        uint32_t u32NeededDW  = 1U;
;;;147       
;;;148        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;149        
;;;150        /* check if there is enough space in command list: */
;;;151        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;152        {
;;;153          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;154          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;155          return;
;;;156        }
;;;157        else 
;;;158        {
;;;159          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;160        }
;;;161    #endif
;;;162    
;;;163        pu64Curr[0] = ROT_LOAD_DESTMEMDIM(u16Width, u16Height);
0000e4  e3a06000          MOV      r6,#0
0000e8  e3005fff          MOV      r5,#0xfff
0000ec  e0055001          AND      r5,r5,r1
0000f0  e0064006          AND      r4,r6,r6
0000f4  e1a04804          LSL      r4,r4,#16
0000f8  e1844825          ORR      r4,r4,r5,LSR #16
0000fc  e1a0c006          MOV      r12,r6
000100  e3007fff          MOV      r7,#0xfff
000104  e1a0e006          MOV      lr,r6
000108  e0006007          AND      r6,r0,r7
00010c  e00c700e          AND      r7,r12,lr
000110  e1865805          ORR      r5,r6,r5,LSL #16
000114  e1877004          ORR      r7,r7,r4
000118  e3a07000          MOV      r7,#0
00011c  e1855007          ORR      r5,r5,r7
000120  e3a07005          MOV      r7,#5
000124  e59f6eb0          LDR      r6,|L1.4060|
000128  e1874006          ORR      r4,r7,r6
00012c  e5834004          STR      r4,[r3,#4]
000130  e5835000          STR      r5,[r3,#0]
;;;164    
;;;165        pstCmdList->pu64Current = &pu64Curr[1];
000134  e2834008          ADD      r4,r3,#8
000138  e3045000          MOVW     r5,#0x4000
00013c  e7854002          STR      r4,[r5,r2]
;;;166        pstCmdList->u32UsedDoubleWords = 1U;
000140  e3a04001          MOV      r4,#1
000144  e3045004          MOV      r5,#0x4004
000148  e7854002          STR      r4,[r5,r2]
;;;167    }
00014c  e8bd80f0          POP      {r4-r7,pc}
;;;168    
                          ENDP

                  vRot_SetColorFmt PROC
;;;169    /* ....................................................................... */
;;;170    void vRot_SetColorFmt(ga_colFmt_e eDstColFormat, ga_colFmt_e eSrcColFormat, ga_list_st* pstCmdList)
000150  e92d40f0          PUSH     {r4-r7,lr}
;;;171    {
;;;172        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000154  e3044000          MOVW     r4,#0x4000
000158  e7943002          LDR      r3,[r4,r2]
;;;173    
;;;174    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;175    
;;;176        uint32_t u32NeededDW  = 1U;
;;;177       
;;;178        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;179        
;;;180        /* check if there is enough space in command list: */
;;;181        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;182        {
;;;183          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;184          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;185          return;
;;;186        }
;;;187        else 
;;;188        {
;;;189          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;190        }
;;;191    #endif
;;;192        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;193         *  modify color format 0-->1 and 1-->0 
;;;194         *  */
;;;195        pu64Curr[0] = ROT_LOAD_COLORFMT((1 - (uint8_t) eDstColFormat), (1 - (uint8_t) eSrcColFormat));
00015c  e2604001          RSB      r4,r0,#1
000160  e1a06fc4          ASR      r6,r4,#31
000164  e2044001          AND      r4,r4,#1
000168  e3a05000          MOV      r5,#0
00016c  e0946004          ADDS     r6,r4,r4
000170  e0a55005          ADC      r5,r5,r5
000174  e2614001          RSB      r4,r1,#1
000178  e1a0cfc4          ASR      r12,r4,#31
00017c  e2044001          AND      r4,r4,#1
000180  e1866004          ORR      r6,r6,r4
000184  e1a05006          MOV      r5,r6
000188  e3a0c000          MOV      r12,#0
00018c  e1a0400c          MOV      r4,r12
000190  e3a0600b          MOV      r6,#0xb
000194  e1a07005          MOV      r7,r5
000198  e1a0500c          MOV      r5,r12
00019c  e1a0c006          MOV      r12,r6
0001a0  e1876004          ORR      r6,r7,r4
0001a4  e185700c          ORR      r7,r5,r12
0001a8  e6ff7077          UXTH     r7,r7
0001ac  e59f5e28          LDR      r5,|L1.4060|
0001b0  e1855007          ORR      r5,r5,r7
0001b4  e5835004          STR      r5,[r3,#4]
0001b8  e5836000          STR      r6,[r3,#0]
;;;196    
;;;197        pstCmdList->pu64Current = &pu64Curr[1];
0001bc  e2834008          ADD      r4,r3,#8
0001c0  e3045000          MOVW     r5,#0x4000
0001c4  e7854002          STR      r4,[r5,r2]
;;;198        pstCmdList->u32UsedDoubleWords = 1U;
0001c8  e3a04001          MOV      r4,#1
0001cc  e3045004          MOV      r5,#0x4004
0001d0  e7854002          STR      r4,[r5,r2]
;;;199    }
0001d4  e8bd80f0          POP      {r4-r7,pc}
;;;200    
                          ENDP

                  vRot_SetRotMtrx PROC
;;;201    /* ....................................................................... */
;;;202    void vRot_SetRotMtrx(rot_Mtrx_st* pstMatrix, ga_list_st* pstCmdList)
0001d8  e92d40f0          PUSH     {r4-r7,lr}
;;;203    {
0001dc  e1a02001          MOV      r2,r1
;;;204        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0001e0  e3043000          MOVW     r3,#0x4000
0001e4  e7931002          LDR      r1,[r3,r2]
;;;205    
;;;206    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;207    
;;;208        uint32_t u32NeededDW  = 7U;
;;;209       
;;;210        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;211        
;;;212        /* check if there is enough space in command list: */
;;;213        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;214        {
;;;215          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;216          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;217          return;
;;;218        }
;;;219        else 
;;;220        {
;;;221          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;222        }
;;;223    #endif
;;;224        
;;;225        pu64Curr[0] = ROT_LOAD_A11(pstMatrix->u32A11);
0001e8  e5903000          LDR      r3,[r0,#0]
0001ec  e7df3b1f          BFC      r3,#22,#10
0001f0  e3a06000          MOV      r6,#0
0001f4  e1a04003          MOV      r4,r3
0001f8  e0063006          AND      r3,r6,r6
0001fc  e1844006          ORR      r4,r4,r6
000200  e6ff5073          UXTH     r5,r3
000204  e385500c          ORR      r5,r5,#0xc
000208  e59f3dcc          LDR      r3,|L1.4060|
00020c  e1844006          ORR      r4,r4,r6
000210  e1833005          ORR      r3,r3,r5
000214  e5813004          STR      r3,[r1,#4]
000218  e5814000          STR      r4,[r1,#0]
;;;226        pu64Curr[1] = ROT_LOAD_A12(pstMatrix->u32A12);
00021c  e5903004          LDR      r3,[r0,#4]
000220  e7df3b1f          BFC      r3,#22,#10
000224  e3a04000          MOV      r4,#0
000228  e0045004          AND      r5,r4,r4
00022c  e1833004          ORR      r3,r3,r4
000230  e6ff6075          UXTH     r6,r5
000234  e386500f          ORR      r5,r6,#0xf
000238  e1a06004          MOV      r6,r4
00023c  e59f4d98          LDR      r4,|L1.4060|
000240  e1833006          ORR      r3,r3,r6
000244  e1844005          ORR      r4,r4,r5
000248  e5813008          STR      r3,[r1,#8]
00024c  e581400c          STR      r4,[r1,#0xc]
;;;227        pu64Curr[2] = ROT_LOAD_A21(pstMatrix->u32A21);
000250  e5903008          LDR      r3,[r0,#8]
000254  e7df3b1f          BFC      r3,#22,#10
000258  e3a05000          MOV      r5,#0
00025c  e0057005          AND      r7,r5,r5
000260  e1a04003          MOV      r4,r3
000264  e1a03007          MOV      r3,r7
000268  e1847005          ORR      r7,r4,r5
00026c  e6ff6073          UXTH     r6,r3
000270  e386300d          ORR      r3,r6,#0xd
000274  e59f6d60          LDR      r6,|L1.4060|
000278  e1874005          ORR      r4,r7,r5
00027c  e1833006          ORR      r3,r3,r6
000280  e5813014          STR      r3,[r1,#0x14]
000284  e5814010          STR      r4,[r1,#0x10]
;;;228        pu64Curr[3] = ROT_LOAD_A22(pstMatrix->u32A22);
000288  e590300c          LDR      r3,[r0,#0xc]
00028c  e7df3b1f          BFC      r3,#22,#10
000290  e0054005          AND      r4,r5,r5
000294  e1855003          ORR      r5,r5,r3
000298  e6ff3074          UXTH     r3,r4
00029c  e383700e          ORR      r7,r3,#0xe
0002a0  e1a04006          MOV      r4,r6
0002a4  e1844007          ORR      r4,r4,r7
0002a8  e581401c          STR      r4,[r1,#0x1c]
0002ac  e5815018          STR      r5,[r1,#0x18]
;;;229        /* Load W0, W1, W2: */
;;;230        pu64Curr[4] = ROT_LOAD_A31(pstMatrix->u32A31);
0002b0  e5903010          LDR      r3,[r0,#0x10]
0002b4  e7df3b1f          BFC      r3,#22,#10
0002b8  e3a04000          MOV      r4,#0
0002bc  e0047004          AND      r7,r4,r4
0002c0  e1833004          ORR      r3,r3,r4
0002c4  e6ff5077          UXTH     r5,r7
0002c8  e1a04003          MOV      r4,r3
0002cc  e3853015          ORR      r3,r5,#0x15
0002d0  e1833006          ORR      r3,r3,r6
0002d4  e5813024          STR      r3,[r1,#0x24]
0002d8  e5814020          STR      r4,[r1,#0x20]
;;;231        pu64Curr[5] = ROT_LOAD_A32(pstMatrix->u32A32);
0002dc  e5903014          LDR      r3,[r0,#0x14]
0002e0  e7df3b1f          BFC      r3,#22,#10
0002e4  e3a06000          MOV      r6,#0
0002e8  e0066006          AND      r6,r6,r6
0002ec  e6ff4076          UXTH     r4,r6
0002f0  e1a05003          MOV      r5,r3
0002f4  e3847016          ORR      r7,r4,#0x16
0002f8  e59f3cdc          LDR      r3,|L1.4060|
0002fc  e1833007          ORR      r3,r3,r7
000300  e581302c          STR      r3,[r1,#0x2c]
000304  e5815028          STR      r5,[r1,#0x28]
;;;232        pu64Curr[6] = ROT_LOAD_A33(pstMatrix->u32A33);
000308  e5903018          LDR      r3,[r0,#0x18]
00030c  e7df3b1f          BFC      r3,#22,#10
000310  e3a05000          MOV      r5,#0
000314  e0057005          AND      r7,r5,r5
000318  e3a04017          MOV      r4,#0x17
00031c  e1a06003          MOV      r6,r3
000320  e1a03007          MOV      r3,r7
000324  e1a07004          MOV      r7,r4
000328  e1864005          ORR      r4,r6,r5
00032c  e1877003          ORR      r7,r7,r3
000330  e30f5fff          MOV      r5,#0xffff
000334  e1a03004          MOV      r3,r4
000338  e1a04007          MOV      r4,r7
00033c  e1a07005          MOV      r7,r5
000340  e1a05003          MOV      r5,r3
000344  e0046007          AND      r6,r4,r7
000348  e59f4c8c          LDR      r4,|L1.4060|
00034c  e1844006          ORR      r4,r4,r6
000350  e5813030          STR      r3,[r1,#0x30]
000354  e5814034          STR      r4,[r1,#0x34]
;;;233    
;;;234        pstCmdList->pu64Current = &pu64Curr[7];
000358  e2813038          ADD      r3,r1,#0x38
00035c  e3044000          MOVW     r4,#0x4000
000360  e7843002          STR      r3,[r4,r2]
;;;235        pstCmdList->u32UsedDoubleWords = 7U;
000364  e3a03007          MOV      r3,#7
000368  e3044004          MOV      r4,#0x4004
00036c  e7843002          STR      r3,[r4,r2]
;;;236    }
000370  e8bd80f0          POP      {r4-r7,pc}
;;;237    
                          ENDP

                  vRot_SetFrwdCoord PROC
;;;238    /* ....................................................................... */
;;;239    void vRot_SetFrwdCoord(rot_frccr_st* pstCoord, ga_list_st* pstCmdList)
000374  e92d40f0          PUSH     {r4-r7,lr}
;;;240    {
000378  e1a02001          MOV      r2,r1
;;;241        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00037c  e3043000          MOVW     r3,#0x4000
000380  e7931002          LDR      r1,[r3,r2]
;;;242    
;;;243    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;244    
;;;245        uint32_t u32NeededDW  = 4U;
;;;246       
;;;247        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;248        
;;;249        /* check if there is enough space in command list: */
;;;250        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;251        {
;;;252          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;253          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;254          return;
;;;255        }
;;;256        else 
;;;257        {
;;;258          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;259        }
;;;260    #endif
;;;261    
;;;262        pu64Curr[0] = ROT_LOAD_COORD1(pstCoord->u16X1, pstCoord->u16Y1);
000384  e1d030b0          LDRH     r3,[r0,#0]
000388  e3a05000          MOV      r5,#0
00038c  e6ff3073          UXTH     r3,r3
000390  e0054005          AND      r4,r5,r5
000394  e1a04804          LSL      r4,r4,#16
000398  e1844823          ORR      r4,r4,r3,LSR #16
00039c  e1a05803          LSL      r5,r3,#16
0003a0  e1d030b2          LDRH     r3,[r0,#2]
0003a4  e3a07000          MOV      r7,#0
0003a8  e6ff3073          UXTH     r3,r3
0003ac  e0076007          AND      r6,r7,r7
0003b0  e1833005          ORR      r3,r3,r5
0003b4  e1847006          ORR      r7,r4,r6
0003b8  e3a07000          MOV      r7,#0
0003bc  e1834007          ORR      r4,r3,r7
0003c0  e3a03010          MOV      r3,#0x10
0003c4  e1a06003          MOV      r6,r3
0003c8  e59f5c0c          LDR      r5,|L1.4060|
0003cc  e1843007          ORR      r3,r4,r7
0003d0  e1864005          ORR      r4,r6,r5
0003d4  e8810018          STM      r1,{r3,r4}
;;;263        pu64Curr[1] = ROT_LOAD_COORD2(pstCoord->u16X2, pstCoord->u16Y2);
0003d8  e1d030b4          LDRH     r3,[r0,#4]
0003dc  e3a06000          MOV      r6,#0
0003e0  e6ff3073          UXTH     r3,r3
0003e4  e0064006          AND      r4,r6,r6
0003e8  e1a04804          LSL      r4,r4,#16
0003ec  e1845823          ORR      r5,r4,r3,LSR #16
0003f0  e1a04803          LSL      r4,r3,#16
0003f4  e1d030b6          LDRH     r3,[r0,#6]
0003f8  e6ff3073          UXTH     r3,r3
0003fc  e0066006          AND      r6,r6,r6
000400  e1833004          ORR      r3,r3,r4
000404  e1854006          ORR      r4,r5,r6
000408  e1835007          ORR      r5,r3,r7
00040c  e59f6bc8          LDR      r6,|L1.4060|
000410  e1853007          ORR      r3,r5,r7
000414  e2864011          ADD      r4,r6,#0x11
000418  e5813008          STR      r3,[r1,#8]
00041c  e581400c          STR      r4,[r1,#0xc]
;;;264        pu64Curr[2] = ROT_LOAD_COORD3(pstCoord->u16X3, pstCoord->u16Y3);
000420  e1d030b8          LDRH     r3,[r0,#8]
000424  e3a06000          MOV      r6,#0
000428  e6ff3073          UXTH     r3,r3
00042c  e0064006          AND      r4,r6,r6
000430  e1a04804          LSL      r4,r4,#16
000434  e1844823          ORR      r4,r4,r3,LSR #16
000438  e1a05803          LSL      r5,r3,#16
00043c  e1d030ba          LDRH     r3,[r0,#0xa]
000440  e6ff3073          UXTH     r3,r3
000444  e1855003          ORR      r5,r5,r3
000448  e1847006          ORR      r7,r4,r6
00044c  e1855006          ORR      r5,r5,r6
000450  e59f3b88          LDR      r3,|L1.4064|
000454  e5813014          STR      r3,[r1,#0x14]
000458  e5815010          STR      r5,[r1,#0x10]
;;;265        pu64Curr[3] = ROT_LOAD_COORD4(pstCoord->u16X4, pstCoord->u16Y4);
00045c  e1d030bc          LDRH     r3,[r0,#0xc]
000460  e6ff3073          UXTH     r3,r3
000464  e0064006          AND      r4,r6,r6
000468  e1a04804          LSL      r4,r4,#16
00046c  e1846823          ORR      r6,r4,r3,LSR #16
000470  e1a04803          LSL      r4,r3,#16
000474  e1d030be          LDRH     r3,[r0,#0xe]
000478  e3a0c000          MOV      r12,#0
00047c  e6ff3073          UXTH     r3,r3
000480  e00c500c          AND      r5,r12,r12
000484  e1833004          ORR      r3,r3,r4
000488  e1867005          ORR      r7,r6,r5
00048c  e1a06003          MOV      r6,r3
000490  e007300c          AND      r3,r7,r12
000494  e186600c          ORR      r6,r6,r12
000498  e6ff4073          UXTH     r4,r3
00049c  e3845013          ORR      r5,r4,#0x13
0004a0  e59f4b34          LDR      r4,|L1.4060|
0004a4  e1844005          ORR      r4,r4,r5
0004a8  e581401c          STR      r4,[r1,#0x1c]
0004ac  e5816018          STR      r6,[r1,#0x18]
;;;266    
;;;267        pstCmdList->pu64Current = &pu64Curr[4];
0004b0  e2813020          ADD      r3,r1,#0x20
0004b4  e3044000          MOVW     r4,#0x4000
0004b8  e7843002          STR      r3,[r4,r2]
;;;268        pstCmdList->u32UsedDoubleWords = 4U;
0004bc  e3a03004          MOV      r3,#4
0004c0  e3044004          MOV      r4,#0x4004
0004c4  e7843002          STR      r3,[r4,r2]
;;;269    }
0004c8  e8bd80f0          POP      {r4-r7,pc}
;;;270    
                          ENDP

                  vRot_SetSrcAddrPos PROC
;;;271    /* ....................................................................... */
;;;272    void vRot_SetSrcAddrPos(rot_SrcSel_e eSrcSel, ga_list_st* pstCmdList)
0004cc  e92d40f0          PUSH     {r4-r7,lr}
;;;273    {
;;;274        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0004d0  e3043000          MOVW     r3,#0x4000
0004d4  e7932001          LDR      r2,[r3,r1]
;;;275    
;;;276    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;277    
;;;278        uint32_t u32NeededDW  = 1U;
;;;279       
;;;280        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;281        
;;;282        /* check if there is enough space in command list: */
;;;283        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;284        {
;;;285          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;286          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;287          return;
;;;288        }
;;;289        else 
;;;290        {
;;;291          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;292        }
;;;293    #endif
;;;294    
;;;295        pu64Curr[0] = ROT_LOAD_SRCADDRPOS((uint8_t) eSrcSel);
0004d8  e2003003          AND      r3,r0,#3
0004dc  e3a06000          MOV      r6,#0
0004e0  e0066006          AND      r6,r6,r6
0004e4  e6ff4076          UXTH     r4,r6
0004e8  e1a05003          MOV      r5,r3
0004ec  e3847014          ORR      r7,r4,#0x14
0004f0  e59f6ae4          LDR      r6,|L1.4060|
0004f4  e1a04005          MOV      r4,r5
0004f8  e1a03004          MOV      r3,r4
0004fc  e1874006          ORR      r4,r7,r6
000500  e8820018          STM      r2,{r3,r4}
;;;296    
;;;297        pstCmdList->pu64Current = &pu64Curr[1];
000504  e2823008          ADD      r3,r2,#8
000508  e3044000          MOVW     r4,#0x4000
00050c  e7843001          STR      r3,[r4,r1]
;;;298        pstCmdList->u32UsedDoubleWords = 4U;
000510  e3a03004          MOV      r3,#4
000514  e3044004          MOV      r4,#0x4004
000518  e7843001          STR      r3,[r4,r1]
;;;299    }
00051c  e8bd80f0          POP      {r4-r7,pc}
;;;300    
                          ENDP

                  vRot_SetRotationCmd PROC
;;;301    /* ....................................................................... */
;;;302    void vRot_SetRotationCmd(ga_en_e eClipWndEn, ga_en_e eFilterEn, ga_list_st* pstCmdList)
000520  e92d40f0          PUSH     {r4-r7,lr}
;;;303    {
;;;304        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000524  e3044000          MOVW     r4,#0x4000
000528  e7943002          LDR      r3,[r4,r2]
;;;305    
;;;306    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;307    
;;;308        uint32_t u32NeededDW  = 1U;
;;;309       
;;;310        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;311        
;;;312        /* check if there is enough space in command list: */
;;;313        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;314        {
;;;315          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;316          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;317          return;
;;;318        }
;;;319        else 
;;;320        {
;;;321          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;322        }
;;;323    #endif
;;;324    
;;;325        pu64Curr[0] = ROT_ROTATE(eClipWndEn, eFilterEn);
00052c  e3a05000          MOV      r5,#0
000530  e2006001          AND      r6,r0,#1
000534  e0054005          AND      r4,r5,r5
000538  e0965006          ADDS     r5,r6,r6
00053c  e0a44004          ADC      r4,r4,r4
000540  e3a07000          MOV      r7,#0
000544  e201c001          AND      r12,r1,#1
000548  e0076007          AND      r6,r7,r7
00054c  e185500c          ORR      r5,r5,r12
000550  e1844006          ORR      r4,r4,r6
000554  e6ffc074          UXTH     r12,r4
000558  e1a06007          MOV      r6,r7
00055c  e59f4a80          LDR      r4,|L1.4068|
000560  e1a07005          MOV      r7,r5
000564  e1866007          ORR      r6,r6,r7
000568  e184400c          ORR      r4,r4,r12
00056c  e5834004          STR      r4,[r3,#4]
000570  e5836000          STR      r6,[r3,#0]
;;;326    
;;;327        pstCmdList->pu64Current = &pu64Curr[1];
000574  e2834008          ADD      r4,r3,#8
000578  e3045000          MOVW     r5,#0x4000
00057c  e7854002          STR      r4,[r5,r2]
;;;328        pstCmdList->u32UsedDoubleWords = 1U;
000580  e3a04001          MOV      r4,#1
000584  e3045004          MOV      r5,#0x4004
000588  e7854002          STR      r4,[r5,r2]
;;;329    }
00058c  e8bd80f0          POP      {r4-r7,pc}
;;;330    
                          ENDP

                  vRot_SetClippWnd PROC
;;;331    /* ....................................................................... */
;;;332    void vRot_SetClippWnd(rot_clipWnd_st* pstClipWnd, ga_list_st* pstCmdList)
000590  e92d40f0          PUSH     {r4-r7,lr}
;;;333    {
;;;334        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000594  e3043000          MOVW     r3,#0x4000
000598  e7932001          LDR      r2,[r3,r1]
;;;335    
;;;336    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;337    
;;;338        uint32_t u32NeededDW  = 2U;
;;;339       
;;;340        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;341        
;;;342        /* check if there is enough space in command list: */
;;;343        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;344        {
;;;345          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;346          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;347          return;
;;;348        }
;;;349        else 
;;;350        {
;;;351          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;352        }
;;;353    #endif
;;;354    
;;;355        pu64Curr[0] = ROT_LOAD_CLIPWNDUL(pstClipWnd->u16UlX,pstClipWnd->u16UlY);
00059c  e1d030b0          LDRH     r3,[r0,#0]
0005a0  e3a06000          MOV      r6,#0
0005a4  e3005fff          MOV      r5,#0xfff
0005a8  e0033005          AND      r3,r3,r5
0005ac  e0064006          AND      r4,r6,r6
0005b0  e1a04804          LSL      r4,r4,#16
0005b4  e1844823          ORR      r4,r4,r3,LSR #16
0005b8  e1a05803          LSL      r5,r3,#16
0005bc  e1d030b2          LDRH     r3,[r0,#2]
0005c0  e300cfff          MOV      r12,#0xfff
0005c4  e003300c          AND      r3,r3,r12
0005c8  e0066006          AND      r6,r6,r6
0005cc  e1855003          ORR      r5,r5,r3
0005d0  e1844006          ORR      r4,r4,r6
0005d4  e3a07000          MOV      r7,#0
0005d8  e1856007          ORR      r6,r5,r7
0005dc  e1863007          ORR      r3,r6,r7
0005e0  e59f4a00          LDR      r4,|L1.4072|
0005e4  e8820018          STM      r2,{r3,r4}
;;;356        pu64Curr[1] = ROT_LOAD_CLIPWNDLR(pstClipWnd->u16LrX,pstClipWnd->u16LrY);
0005e8  e1d030b4          LDRH     r3,[r0,#4]
0005ec  e3a05000          MOV      r5,#0
0005f0  e3006fff          MOV      r6,#0xfff
0005f4  e0033006          AND      r3,r3,r6
0005f8  e0054005          AND      r4,r5,r5
0005fc  e1a04804          LSL      r4,r4,#16
000600  e1845823          ORR      r5,r4,r3,LSR #16
000604  e1a06803          LSL      r6,r3,#16
000608  e1d030b6          LDRH     r3,[r0,#6]
00060c  e3a0c000          MOV      r12,#0
000610  e3007fff          MOV      r7,#0xfff
000614  e0033007          AND      r3,r3,r7
000618  e00c400c          AND      r4,r12,r12
00061c  e1833006          ORR      r3,r3,r6
000620  e1856004          ORR      r6,r5,r4
000624  e006700c          AND      r7,r6,r12
000628  e1a06003          MOV      r6,r3
00062c  e186600c          ORR      r6,r6,r12
000630  e6ff4077          UXTH     r4,r7
000634  e1a03006          MOV      r3,r6
000638  e3845002          ORR      r5,r4,#2
00063c  e59f6998          LDR      r6,|L1.4060|
000640  e1854006          ORR      r4,r5,r6
000644  e5823008          STR      r3,[r2,#8]
000648  e582400c          STR      r4,[r2,#0xc]
;;;357    
;;;358        pstCmdList->pu64Current = &pu64Curr[2];
00064c  e2823010          ADD      r3,r2,#0x10
000650  e3044000          MOVW     r4,#0x4000
000654  e7843001          STR      r3,[r4,r1]
;;;359        pstCmdList->u32UsedDoubleWords = 2U;
000658  e3a03002          MOV      r3,#2
00065c  e3044004          MOV      r4,#0x4004
000660  e7843001          STR      r3,[r4,r1]
;;;360    }
000664  e8bd80f0          POP      {r4-r7,pc}
;;;361    /* ....................................................................... */
                          ENDP

                  vRot_RotateMatrix PROC
;;;362    void vRot_RotateMatrix(rot_mem_st* pstMem, rot_rotCfg_st* pstParam, 
000668  e92d47f0          PUSH     {r4-r10,lr}
;;;363                           rot_Mtrx_st* pstMatrix, rot_frccr_st* pstCoord,
;;;364                           ga_list_st* pstCmdList)
;;;365    {
00066c  e1a05000          MOV      r5,r0
000670  e59d6020          LDR      r6,[sp,#0x20]
;;;366        uint8_t u8Curr = 20U;
000674  e3a04014          MOV      r4,#0x14
;;;367        uint64_t* pu64Curr;
;;;368    
;;;369    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;370        uint32_t u32NeededDW ;
;;;371        
;;;372        u32NeededDW = u8Curr;
;;;373        if(pstParam->eClipWndEn == GA_EN)
;;;374        {
;;;375            u32NeededDW += 2; /* window parameters */
;;;376        }
;;;377        u32NeededDW++; /* for ROT_ROTATE */
;;;378    
;;;379        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;380    
;;;381        /* check if there is enough space in command list: */
;;;382        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;383        {
;;;384          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;385          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;386          return;
;;;387        }
;;;388        else 
;;;389        {
;;;390          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;391        }
;;;392    #endif 
;;;393    
;;;394        pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000678  e3047000          MOVW     r7,#0x4000
00067c  e7970006          LDR      r0,[r7,r6]
;;;395    
;;;396        /* Source Mem. Params */
;;;397        pu64Curr[0] = ROT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
000680  e1d570b2          LDRH     r7,[r5,#2]
000684  e3a0c000          MOV      r12,#0
000688  e00cc00c          AND      r12,r12,r12
00068c  e1a0e007          MOV      lr,r7
000690  e38c700a          ORR      r7,r12,#0xa
000694  e59fc940          LDR      r12,|L1.4060|
000698  e187700c          ORR      r7,r7,r12
00069c  e5807004          STR      r7,[r0,#4]
0006a0  e580e000          STR      lr,[r0,#0]
;;;398        pu64Curr[1] = ROT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
0006a4  e3a0e000          MOV      lr,#0
0006a8  e00ee00e          AND      lr,lr,lr
0006ac  e6ff707e          UXTH     r7,lr
0006b0  e595c004          LDR      r12,[r5,#4]
0006b4  e1a0e00c          MOV      lr,r12
0006b8  e3877009          ORR      r7,r7,#9
0006bc  e59fc918          LDR      r12,|L1.4060|
0006c0  e187700c          ORR      r7,r7,r12
0006c4  e580700c          STR      r7,[r0,#0xc]
0006c8  e580e008          STR      lr,[r0,#8]
;;;399    
;;;400        /* Destination Mem. Params */
;;;401        pu64Curr[2] = ROT_LOAD_DESTADDR( pstMem->u32DstAddr);
0006cc  e3a08000          MOV      r8,#0
0006d0  e0088008          AND      r8,r8,r8
0006d4  e5957008          LDR      r7,[r5,#8]
0006d8  e1a0c007          MOV      r12,r7
0006dc  e6ff7078          UXTH     r7,r8
0006e0  e3878004          ORR      r8,r7,#4
0006e4  e59f78f0          LDR      r7,|L1.4060|
0006e8  e1877008          ORR      r7,r7,r8
0006ec  e5807014          STR      r7,[r0,#0x14]
0006f0  e580c010          STR      r12,[r0,#0x10]
;;;402        pu64Curr[3] = ROT_LOAD_DESTMEMDIM(pstMem->u16DstImgWidth, pstMem->u16DstImgHeight);
0006f4  e1d570be          LDRH     r7,[r5,#0xe]
0006f8  e3a0e000          MOV      lr,#0
0006fc  e300cfff          MOV      r12,#0xfff
000700  e007700c          AND      r7,r7,r12
000704  e00ec00e          AND      r12,lr,lr
000708  e1a0c80c          LSL      r12,r12,#16
00070c  e18cc827          ORR      r12,r12,r7,LSR #16
000710  e1a0e807          LSL      lr,r7,#16
000714  e1d570bc          LDRH     r7,[r5,#0xc]
000718  e3a08000          MOV      r8,#0
00071c  e300afff          MOV      r10,#0xfff
000720  e007700a          AND      r7,r7,r10
000724  e0088008          AND      r8,r8,r8
000728  e187700e          ORR      r7,r7,lr
00072c  e18cc008          ORR      r12,r12,r8
000730  e3a0c000          MOV      r12,#0
000734  e187800c          ORR      r8,r7,r12
000738  e3a07005          MOV      r7,#5
00073c  e1a0e008          MOV      lr,r8
000740  e1a08007          MOV      r8,r7
000744  e59f7890          LDR      r7,|L1.4060|
000748  e18cc00e          ORR      r12,r12,lr
00074c  e1877008          ORR      r7,r7,r8
000750  e580701c          STR      r7,[r0,#0x1c]
000754  e580c018          STR      r12,[r0,#0x18]
;;;403    
;;;404        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;405         *  modify color format 0-->1 and 1-->0 
;;;406         *  */
;;;407        pu64Curr[4] = ROT_LOAD_COLORFMT((1 - (uint8_t)(pstParam->eDstColFmt)), (1 - (uint8_t)(pstParam->eSrcColFmt)));
000758  e5d17001          LDRB     r7,[r1,#1]
00075c  e2677001          RSB      r7,r7,#1
000760  e1a0cfc7          ASR      r12,r7,#31
000764  e2077001          AND      r7,r7,#1
000768  e3a0c000          MOV      r12,#0
00076c  e097e007          ADDS     lr,r7,r7
000770  e0acc00c          ADC      r12,r12,r12
000774  e5d17000          LDRB     r7,[r1,#0]
000778  e2677001          RSB      r7,r7,#1
00077c  e1a08fc7          ASR      r8,r7,#31
000780  e2077001          AND      r7,r7,#1
000784  e187700e          ORR      r7,r7,lr
000788  e1a0e007          MOV      lr,r7
00078c  e3a0c000          MOV      r12,#0
000790  e18ee00c          ORR      lr,lr,r12
000794  e3a0700b          MOV      r7,#0xb
000798  e1a0c00e          MOV      r12,lr
00079c  e1a0e007          MOV      lr,r7
0007a0  e59f7834          LDR      r7,|L1.4060|
0007a4  e187700e          ORR      r7,r7,lr
0007a8  e5807024          STR      r7,[r0,#0x24]
0007ac  e580c020          STR      r12,[r0,#0x20]
;;;408    
;;;409        /* Transformation Matrix Config. */
;;;410        pu64Curr[5] = ROT_LOAD_A11(pstMatrix->u32A11);
0007b0  e5927000          LDR      r7,[r2,#0]
0007b4  e7df7b1f          BFC      r7,#22,#10
0007b8  e3a0c000          MOV      r12,#0
0007bc  e00cc00c          AND      r12,r12,r12
0007c0  e6ff907c          UXTH     r9,r12
0007c4  e1a0c007          MOV      r12,r7
0007c8  e389700c          ORR      r7,r9,#0xc
0007cc  e59fe808          LDR      lr,|L1.4060|
0007d0  e187700e          ORR      r7,r7,lr
0007d4  e580702c          STR      r7,[r0,#0x2c]
0007d8  e580c028          STR      r12,[r0,#0x28]
;;;411        pu64Curr[6] = ROT_LOAD_A12(pstMatrix->u32A12);
0007dc  e5927004          LDR      r7,[r2,#4]
0007e0  e7df7b1f          BFC      r7,#22,#10
0007e4  e3a0c000          MOV      r12,#0
0007e8  e00c900c          AND      r9,r12,r12
0007ec  e1a0e00c          MOV      lr,r12
0007f0  e3a0c00f          MOV      r12,#0xf
0007f4  e1a08007          MOV      r8,r7
0007f8  e1a07009          MOV      r7,r9
0007fc  e1a0900c          MOV      r9,r12
000800  e188c00e          ORR      r12,r8,lr
000804  e187e009          ORR      lr,r7,r9
000808  e1a0700c          MOV      r7,r12
00080c  e6ff907e          UXTH     r9,lr
000810  e59fc7c4          LDR      r12,|L1.4060|
000814  e1a0e007          MOV      lr,r7
000818  e1a07009          MOV      r7,r9
00081c  e1a0900c          MOV      r9,r12
000820  e1877009          ORR      r7,r7,r9
000824  e5807034          STR      r7,[r0,#0x34]
000828  e580e030          STR      lr,[r0,#0x30]
;;;412        pu64Curr[7] = ROT_LOAD_A21(pstMatrix->u32A21);
00082c  e5927008          LDR      r7,[r2,#8]
000830  e7df7b1f          BFC      r7,#22,#10
000834  e3a0e000          MOV      lr,#0
000838  e00e900e          AND      r9,lr,lr
00083c  e1a0800e          MOV      r8,lr
000840  e3a0e00d          MOV      lr,#0xd
000844  e1a0c007          MOV      r12,r7
000848  e1a07009          MOV      r7,r9
00084c  e1a0900e          MOV      r9,lr
000850  e18ce008          ORR      lr,r12,r8
000854  e1877009          ORR      r7,r7,r9
000858  e1a0c00e          MOV      r12,lr
00085c  e6ff9077          UXTH     r9,r7
000860  e59fe774          LDR      lr,|L1.4060|
000864  e1a0700c          MOV      r7,r12
000868  e189c00e          ORR      r12,r9,lr
00086c  e5807038          STR      r7,[r0,#0x38]
000870  e580c03c          STR      r12,[r0,#0x3c]
;;;413        pu64Curr[8] = ROT_LOAD_A22(pstMatrix->u32A22);
000874  e592700c          LDR      r7,[r2,#0xc]
000878  e7df7b1f          BFC      r7,#22,#10
00087c  e3a08000          MOV      r8,#0
000880  e1a0c007          MOV      r12,r7
000884  e0087008          AND      r7,r8,r8
000888  e1a0e008          MOV      lr,r8
00088c  e18cc00e          ORR      r12,r12,lr
000890  e387700e          ORR      r7,r7,#0xe
000894  e59f8740          LDR      r8,|L1.4060|
000898  e18cc00e          ORR      r12,r12,lr
00089c  e1877008          ORR      r7,r7,r8
0008a0  e5807044          STR      r7,[r0,#0x44]
0008a4  e580c040          STR      r12,[r0,#0x40]
;;;414    
;;;415        /* Load W0, W1, W2: */
;;;416        pu64Curr[9]  = ROT_LOAD_A31(pstMatrix->u32A31);
0008a8  e5927010          LDR      r7,[r2,#0x10]
0008ac  e7df7b1f          BFC      r7,#22,#10
0008b0  e3a08000          MOV      r8,#0
0008b4  e1a0c007          MOV      r12,r7
0008b8  e0087008          AND      r7,r8,r8
0008bc  e1a0e008          MOV      lr,r8
0008c0  e18ee00c          ORR      lr,lr,r12
0008c4  e6ff8077          UXTH     r8,r7
0008c8  e1a0c00e          MOV      r12,lr
0008cc  e3888015          ORR      r8,r8,#0x15
0008d0  e59fe704          LDR      lr,|L1.4060|
0008d4  e1a0700c          MOV      r7,r12
0008d8  e188c00e          ORR      r12,r8,lr
0008dc  e5807048          STR      r7,[r0,#0x48]
0008e0  e580c04c          STR      r12,[r0,#0x4c]
;;;417        pu64Curr[10] = ROT_LOAD_A32(pstMatrix->u32A32);
0008e4  e5927014          LDR      r7,[r2,#0x14]
0008e8  e7df7b1f          BFC      r7,#22,#10
0008ec  e3a08000          MOV      r8,#0
0008f0  e0089008          AND      r9,r8,r8
0008f4  e1a0e008          MOV      lr,r8
0008f8  e1a08007          MOV      r8,r7
0008fc  e1a07009          MOV      r7,r9
000900  e188900e          ORR      r9,r8,lr
000904  e6ffc077          UXTH     r12,r7
000908  e38ce016          ORR      lr,r12,#0x16
00090c  e59fc6c8          LDR      r12,|L1.4060|
000910  e18cc00e          ORR      r12,r12,lr
000914  e5809050          STR      r9,[r0,#0x50]
000918  e580c054          STR      r12,[r0,#0x54]
;;;418        pu64Curr[11] = ROT_LOAD_A33(pstMatrix->u32A33);
00091c  e5927018          LDR      r7,[r2,#0x18]
000920  e7df7b1f          BFC      r7,#22,#10
000924  e3a0c000          MOV      r12,#0
000928  e00c900c          AND      r9,r12,r12
00092c  e187e00c          ORR      lr,r7,r12
000930  e6ffc079          UXTH     r12,r9
000934  e38cc017          ORR      r12,r12,#0x17
000938  e59f869c          LDR      r8,|L1.4060|
00093c  e18cc008          ORR      r12,r12,r8
000940  e580c05c          STR      r12,[r0,#0x5c]
000944  e580e058          STR      lr,[r0,#0x58]
;;;419    
;;;420        /* write forward rotated corner coordinates */
;;;421        pu64Curr[12] = ROT_LOAD_COORD1(pstCoord->u16X1, pstCoord->u16Y1);
000948  e1d370b0          LDRH     r7,[r3,#0]
00094c  e3a0c000          MOV      r12,#0
000950  e6ff7077          UXTH     r7,r7
000954  e00cc00c          AND      r12,r12,r12
000958  e1a0c80c          LSL      r12,r12,#16
00095c  e18cc827          ORR      r12,r12,r7,LSR #16
000960  e1a0e807          LSL      lr,r7,#16
000964  e1d370b2          LDRH     r7,[r3,#2]
000968  e3a08000          MOV      r8,#0
00096c  e6ff7077          UXTH     r7,r7
000970  e0088008          AND      r8,r8,r8
000974  e187700e          ORR      r7,r7,lr
000978  e18cc008          ORR      r12,r12,r8
00097c  e3a09000          MOV      r9,#0
000980  e1878009          ORR      r8,r7,r9
000984  e3a0c010          MOV      r12,#0x10
000988  e1a0e00c          MOV      lr,r12
00098c  e59fc648          LDR      r12,|L1.4060|
000990  e1887009          ORR      r7,r8,r9
000994  e18cc00e          ORR      r12,r12,lr
000998  e5807060          STR      r7,[r0,#0x60]
00099c  e580c064          STR      r12,[r0,#0x64]
;;;422        pu64Curr[13] = ROT_LOAD_COORD2(pstCoord->u16X2, pstCoord->u16Y2);
0009a0  e1d370b4          LDRH     r7,[r3,#4]
0009a4  e3a0e000          MOV      lr,#0
0009a8  e6ff7077          UXTH     r7,r7
0009ac  e00ec00e          AND      r12,lr,lr
0009b0  e1a0c80c          LSL      r12,r12,#16
0009b4  e18cc827          ORR      r12,r12,r7,LSR #16
0009b8  e1a0e807          LSL      lr,r7,#16
0009bc  e1d370b6          LDRH     r7,[r3,#6]
0009c0  e3a08000          MOV      r8,#0
0009c4  e6ff7077          UXTH     r7,r7
0009c8  e0088008          AND      r8,r8,r8
0009cc  e187700e          ORR      r7,r7,lr
0009d0  e18ce008          ORR      lr,r12,r8
0009d4  e1a0c007          MOV      r12,r7
0009d8  e3a07000          MOV      r7,#0
0009dc  e18cc007          ORR      r12,r12,r7
0009e0  e3a07011          MOV      r7,#0x11
0009e4  e1a09007          MOV      r9,r7
0009e8  e59fe5ec          LDR      lr,|L1.4060|
0009ec  e1a0700c          MOV      r7,r12
0009f0  e189c00e          ORR      r12,r9,lr
0009f4  e5807068          STR      r7,[r0,#0x68]
0009f8  e580c06c          STR      r12,[r0,#0x6c]
;;;423        pu64Curr[14] = ROT_LOAD_COORD3(pstCoord->u16X3, pstCoord->u16Y3);
0009fc  e1d370b8          LDRH     r7,[r3,#8]
000a00  e3a08000          MOV      r8,#0
000a04  e6ff7077          UXTH     r7,r7
000a08  e008c008          AND      r12,r8,r8
000a0c  e1a0c80c          LSL      r12,r12,#16
000a10  e18c9827          ORR      r9,r12,r7,LSR #16
000a14  e1a0c807          LSL      r12,r7,#16
000a18  e1d370ba          LDRH     r7,[r3,#0xa]
000a1c  e6ff7077          UXTH     r7,r7
000a20  e0088008          AND      r8,r8,r8
000a24  e18ce007          ORR      lr,r12,r7
000a28  e189c008          ORR      r12,r9,r8
000a2c  e1a0700e          MOV      r7,lr
000a30  e3a0e000          MOV      lr,#0
000a34  e187700e          ORR      r7,r7,lr
000a38  e3a0e012          MOV      lr,#0x12
000a3c  e1a0c00e          MOV      r12,lr
000a40  e59fe594          LDR      lr,|L1.4060|
000a44  e18cc00e          ORR      r12,r12,lr
000a48  e5807070          STR      r7,[r0,#0x70]
000a4c  e580c074          STR      r12,[r0,#0x74]
;;;424        pu64Curr[15] = ROT_LOAD_COORD4(pstCoord->u16X4, pstCoord->u16Y4);
000a50  e1d370bc          LDRH     r7,[r3,#0xc]
000a54  e3a0c000          MOV      r12,#0
000a58  e6ff7077          UXTH     r7,r7
000a5c  e00cc00c          AND      r12,r12,r12
000a60  e1a0c80c          LSL      r12,r12,#16
000a64  e18cc827          ORR      r12,r12,r7,LSR #16
000a68  e1a0e807          LSL      lr,r7,#16
000a6c  e1d370be          LDRH     r7,[r3,#0xe]
000a70  e3a0a000          MOV      r10,#0
000a74  e6ff7077          UXTH     r7,r7
000a78  e00a800a          AND      r8,r10,r10
000a7c  e187700e          ORR      r7,r7,lr
000a80  e18cc008          ORR      r12,r12,r8
000a84  e00ce00a          AND      lr,r12,r10
000a88  e187c00a          ORR      r12,r7,r10
000a8c  e6ff907e          UXTH     r9,lr
000a90  e1a0e00c          MOV      lr,r12
000a94  e389c013          ORR      r12,r9,#0x13
000a98  e59f953c          LDR      r9,|L1.4060|
000a9c  e18cc009          ORR      r12,r12,r9
000aa0  e580c07c          STR      r12,[r0,#0x7c]
000aa4  e580e078          STR      lr,[r0,#0x78]
;;;425    
;;;426        pu64Curr[16] = ROT_LOAD_SRCADDRPOS(pstCoord->u8ScrAddrPos);
000aa8  e5d37010          LDRB     r7,[r3,#0x10]
000aac  e2077003          AND      r7,r7,#3
000ab0  e3a0c000          MOV      r12,#0
000ab4  e00c900c          AND      r9,r12,r12
000ab8  e1a0800c          MOV      r8,r12
000abc  e1a0c007          MOV      r12,r7
000ac0  e18cc008          ORR      r12,r12,r8
000ac4  e6ff8079          UXTH     r8,r9
000ac8  e388e014          ORR      lr,r8,#0x14
000acc  e59f8508          LDR      r8,|L1.4060|
000ad0  e1a0700c          MOV      r7,r12
000ad4  e18ec008          ORR      r12,lr,r8
000ad8  e5807080          STR      r7,[r0,#0x80]
000adc  e580c084          STR      r12,[r0,#0x84]
;;;427    
;;;428        pu64Curr[17] = ROT_LOAD_FADEFACT(pstParam->u8FadingFctr);
000ae0  e5d17004          LDRB     r7,[r1,#4]
000ae4  e3a0e000          MOV      lr,#0
000ae8  e00e800e          AND      r8,lr,lr
000aec  e187700e          ORR      r7,r7,lr
000af0  e388e01a          ORR      lr,r8,#0x1a
000af4  e59f84e0          LDR      r8,|L1.4060|
000af8  e18ec008          ORR      r12,lr,r8
000afc  e5807088          STR      r7,[r0,#0x88]
000b00  e580c08c          STR      r12,[r0,#0x8c]
;;;429    
;;;430        pu64Curr[18] = ROT_LOAD_SRCALPHAVAL(pstParam->u8SrcAlphaVal);
000b04  e5d17005          LDRB     r7,[r1,#5]
000b08  e3a0c000          MOV      r12,#0
000b0c  e00c900c          AND      r9,r12,r12
000b10  e1a0800c          MOV      r8,r12
000b14  e1888007          ORR      r8,r8,r7
000b18  e6ffc079          UXTH     r12,r9
000b1c  e38ce01b          ORR      lr,r12,#0x1b
000b20  e59fc4b4          LDR      r12,|L1.4060|
000b24  e18cc00e          ORR      r12,r12,lr
000b28  e5808090          STR      r8,[r0,#0x90]
000b2c  e580c094          STR      r12,[r0,#0x94]
;;;431        pu64Curr[19] = ROT_LOAD_DSTALPHAVAL(pstParam->u8DstAlphaVal);
000b30  e5d17006          LDRB     r7,[r1,#6]
000b34  e3a0c000          MOV      r12,#0
000b38  e00c900c          AND      r9,r12,r12
000b3c  e1a0800c          MOV      r8,r12
000b40  e1a0c007          MOV      r12,r7
000b44  e18cc008          ORR      r12,r12,r8
000b48  e6ffe079          UXTH     lr,r9
000b4c  e1a0800c          MOV      r8,r12
000b50  e38ee01c          ORR      lr,lr,#0x1c
000b54  e59fc480          LDR      r12,|L1.4060|
000b58  e18cc00e          ORR      r12,r12,lr
000b5c  e5808098          STR      r8,[r0,#0x98]
000b60  e580c09c          STR      r12,[r0,#0x9c]
;;;432        
;;;433        /* Clipping Window */
;;;434        if(pstParam->eClipWndEn == GA_EN)
000b64  e5d17002          LDRB     r7,[r1,#2]
000b68  e3570001          CMP      r7,#1
000b6c  1a000033          BNE      |L1.3136|
;;;435        {
;;;436            pu64Curr[u8Curr] = ROT_LOAD_CLIPWNDUL(pstParam->tClipWnd.u16UlX, pstParam->tClipWnd.u16UlY);
000b70  e1d170b8          LDRH     r7,[r1,#8]
000b74  e3a0c000          MOV      r12,#0
000b78  e3008fff          MOV      r8,#0xfff
000b7c  e0077008          AND      r7,r7,r8
000b80  e00cc00c          AND      r12,r12,r12
000b84  e1a0c80c          LSL      r12,r12,#16
000b88  e18cc827          ORR      r12,r12,r7,LSR #16
000b8c  e1a0e807          LSL      lr,r7,#16
000b90  e1d170ba          LDRH     r7,[r1,#0xa]
000b94  e3a09000          MOV      r9,#0
000b98  e0077008          AND      r7,r7,r8
000b9c  e0098009          AND      r8,r9,r9
000ba0  e18ee007          ORR      lr,lr,r7
000ba4  e18c7008          ORR      r7,r12,r8
000ba8  e0077009          AND      r7,r7,r9
000bac  e18ee009          ORR      lr,lr,r9
000bb0  e6ffc077          UXTH     r12,r7
000bb4  e38cc001          ORR      r12,r12,#1
000bb8  e59f841c          LDR      r8,|L1.4060|
000bbc  e18ee009          ORR      lr,lr,r9
000bc0  e18c7008          ORR      r7,r12,r8
000bc4  e080c184          ADD      r12,r0,r4,LSL #3
000bc8  e58c7004          STR      r7,[r12,#4]
000bcc  e58ce000          STR      lr,[r12,#0]
;;;437            u8Curr++;
000bd0  e2847001          ADD      r7,r4,#1
000bd4  e20740ff          AND      r4,r7,#0xff
;;;438    
;;;439            pu64Curr[u8Curr] = ROT_LOAD_CLIPWNDLR(pstParam->tClipWnd.u16LrX, pstParam->tClipWnd.u16LrY);
000bd8  e1d170bc          LDRH     r7,[r1,#0xc]
000bdc  e3a0e000          MOV      lr,#0
000be0  e300cfff          MOV      r12,#0xfff
000be4  e007700c          AND      r7,r7,r12
000be8  e00ec00e          AND      r12,lr,lr
000bec  e1a0c80c          LSL      r12,r12,#16
000bf0  e18cc827          ORR      r12,r12,r7,LSR #16
000bf4  e1a0e807          LSL      lr,r7,#16
000bf8  e1d170be          LDRH     r7,[r1,#0xe]
000bfc  e3a08000          MOV      r8,#0
000c00  e300afff          MOV      r10,#0xfff
000c04  e007700a          AND      r7,r7,r10
000c08  e0088008          AND      r8,r8,r8
000c0c  e18ee007          ORR      lr,lr,r7
000c10  e18c9008          ORR      r9,r12,r8
000c14  e3a09000          MOV      r9,#0
000c18  e18e8009          ORR      r8,lr,r9
000c1c  e3a0c002          MOV      r12,#2
000c20  e1a0e00c          MOV      lr,r12
000c24  e59f93b0          LDR      r9,|L1.4060|
000c28  e18e7009          ORR      r7,lr,r9
000c2c  e080e184          ADD      lr,r0,r4,LSL #3
000c30  e58e7004          STR      r7,[lr,#4]
000c34  e58e8000          STR      r8,[lr,#0]
;;;440            u8Curr++;
000c38  e2847001          ADD      r7,r4,#1
000c3c  e20740ff          AND      r4,r7,#0xff
                  |L1.3136|
;;;441        }
;;;442    
;;;443        /* Rotation Command */
;;;444        pu64Curr[u8Curr] = ROT_ROTATE(pstParam->eClipWndEn, pstParam->eFilterEn);
000c40  e5d17002          LDRB     r7,[r1,#2]
000c44  e3a0e000          MOV      lr,#0
000c48  e2077001          AND      r7,r7,#1
000c4c  e00ec00e          AND      r12,lr,lr
000c50  e097e007          ADDS     lr,r7,r7
000c54  e0acc00c          ADC      r12,r12,r12
000c58  e5d17003          LDRB     r7,[r1,#3]
000c5c  e3a0a000          MOV      r10,#0
000c60  e2077001          AND      r7,r7,#1
000c64  e00a800a          AND      r8,r10,r10
000c68  e187700e          ORR      r7,r7,lr
000c6c  e18c9008          ORR      r9,r12,r8
000c70  e1a08007          MOV      r8,r7
000c74  e6ffc079          UXTH     r12,r9
000c78  e59f7364          LDR      r7,|L1.4068|
000c7c  e188e00a          ORR      lr,r8,r10
000c80  e187700c          ORR      r7,r7,r12
000c84  e080c184          ADD      r12,r0,r4,LSL #3
000c88  e58c7004          STR      r7,[r12,#4]
000c8c  e58ce000          STR      lr,[r12,#0]
;;;445        u8Curr++;
000c90  e2847001          ADD      r7,r4,#1
000c94  e20740ff          AND      r4,r7,#0xff
;;;446    
;;;447        pstCmdList->pu64Current = &pu64Curr[u8Curr];
000c98  e0807184          ADD      r7,r0,r4,LSL #3
000c9c  e304c000          MOVW     r12,#0x4000
000ca0  e78c7006          STR      r7,[r12,r6]
;;;448        pstCmdList->u32UsedDoubleWords = u8Curr;
000ca4  e3047004          MOV      r7,#0x4004
000ca8  e7874006          STR      r4,[r7,r6]
;;;449    }
000cac  e8bd87f0          POP      {r4-r10,pc}
;;;450    
                          ENDP

                  vRot_RotateBlendMatrix PROC
;;;452    /* ....................................................................... */
;;;453    void vRot_RotateBlendMatrix(rot_mem_st* pstMem, rot_rotblendCfg_st* pstParam, 
000cb0  e92d47f0          PUSH     {r4-r10,lr}
;;;454                                rot_Mtrx_st* pstMatrix, rot_frccr_st* pstCoord, 
;;;455                                ga_list_st* pstCmdList)
;;;456    {
000cb4  e1a05000          MOV      r5,r0
000cb8  e59d6020          LDR      r6,[sp,#0x20]
;;;457        uint8_t u8Curr = 20U;
000cbc  e3a04014          MOV      r4,#0x14
;;;458        uint64_t* pu64Curr;
;;;459    
;;;460    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;461        uint32_t u32NeededDW ;
;;;462        
;;;463        u32NeededDW = u8Curr;
;;;464        if(pstParam->eClipWndEn == GA_EN)
;;;465        {
;;;466            u32NeededDW += 2; /* window parameters */
;;;467        }
;;;468        u32NeededDW++; /* for ROT_ROTATEB */
;;;469    
;;;470        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;471    
;;;472        /* check if there is enough space in command list: */
;;;473        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;474        {
;;;475          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;476          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;477          return;
;;;478        }
;;;479        else 
;;;480        {
;;;481          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;482        }
;;;483    #endif 
;;;484    
;;;485        pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000cc0  e3047000          MOVW     r7,#0x4000
000cc4  e7970006          LDR      r0,[r7,r6]
;;;486    
;;;487        /* Source Mem. Params */
;;;488        pu64Curr[0] = ROT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
000cc8  e1d570b2          LDRH     r7,[r5,#2]
000ccc  e3a0c000          MOV      r12,#0
000cd0  e00c900c          AND      r9,r12,r12
000cd4  e1a0e00c          MOV      lr,r12
000cd8  e1a0c007          MOV      r12,r7
000cdc  e18cc00e          ORR      r12,r12,lr
000ce0  e6ff7079          UXTH     r7,r9
000ce4  e387800a          ORR      r8,r7,#0xa
000ce8  e59fe2ec          LDR      lr,|L1.4060|
000cec  e1a0700c          MOV      r7,r12
000cf0  e188c00e          ORR      r12,r8,lr
000cf4  e8801080          STM      r0,{r7,r12}
;;;489        pu64Curr[1] = ROT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
000cf8  e3a0c000          MOV      r12,#0
000cfc  e00c800c          AND      r8,r12,r12
000d00  e5957004          LDR      r7,[r5,#4]
000d04  e187700c          ORR      r7,r7,r12
000d08  e1a09007          MOV      r9,r7
000d0c  e388e009          ORR      lr,r8,#9
000d10  e1a0700c          MOV      r7,r12
000d14  e59fc2c0          LDR      r12,|L1.4060|
000d18  e1877009          ORR      r7,r7,r9
000d1c  e18cc00e          ORR      r12,r12,lr
000d20  e5807008          STR      r7,[r0,#8]
000d24  e580c00c          STR      r12,[r0,#0xc]
;;;490    
;;;491        /* Destination Mem. Params */
;;;492        pu64Curr[2] = ROT_LOAD_DESTADDR(pstMem->u32DstAddr);
000d28  e3a0c000          MOV      r12,#0
000d2c  e00cc00c          AND      r12,r12,r12
000d30  e6ffe07c          UXTH     lr,r12
000d34  e38e7004          ORR      r7,lr,#4
000d38  e5958008          LDR      r8,[r5,#8]
000d3c  e59fe298          LDR      lr,|L1.4060|
000d40  e187700e          ORR      r7,r7,lr
000d44  e5807014          STR      r7,[r0,#0x14]
000d48  e5808010          STR      r8,[r0,#0x10]
;;;493        pu64Curr[3] = ROT_LOAD_DESTMEMDIM(pstMem->u16DstImgWidth, pstMem->u16DstImgHeight);
000d4c  e1d570be          LDRH     r7,[r5,#0xe]
000d50  e3a08000          MOV      r8,#0
000d54  e300cfff          MOV      r12,#0xfff
000d58  e007700c          AND      r7,r7,r12
000d5c  e008c008          AND      r12,r8,r8
000d60  e1a0c80c          LSL      r12,r12,#16
000d64  e18cc827          ORR      r12,r12,r7,LSR #16
000d68  e1a0e807          LSL      lr,r7,#16
000d6c  e1d570bc          LDRH     r7,[r5,#0xc]
000d70  e300afff          MOV      r10,#0xfff
000d74  e007700a          AND      r7,r7,r10
000d78  e0088008          AND      r8,r8,r8
000d7c  e187700e          ORR      r7,r7,lr
000d80  e18ce008          ORR      lr,r12,r8
000d84  e1a0c007          MOV      r12,r7
000d88  e3a07000          MOV      r7,#0
000d8c  e187700c          ORR      r7,r7,r12
000d90  e59fe244          LDR      lr,|L1.4060|
000d94  e18ec144          ORR      r12,lr,r4,ASR #2
000d98  e5807018          STR      r7,[r0,#0x18]
000d9c  e580c01c          STR      r12,[r0,#0x1c]
;;;494    
;;;495        /* Color format for Rotation should be redefined to fit to HW implemenation:
;;;496         *  modify color format 0-->1 and 1-->0 
;;;497         *  */
;;;498        pu64Curr[4] = ROT_LOAD_COLORFMT((1 - (uint8_t)(pstParam->eDstColFmt)), (1 - (uint8_t)(pstParam->eSrcColFmt)));
000da0  e5d17001          LDRB     r7,[r1,#1]
000da4  e2677001          RSB      r7,r7,#1
000da8  e1a0efc7          ASR      lr,r7,#31
000dac  e207e001          AND      lr,r7,#1
000db0  e3a07000          MOV      r7,#0
000db4  e09ec00e          ADDS     r12,lr,lr
000db8  e0a78007          ADC      r8,r7,r7
000dbc  e5d17000          LDRB     r7,[r1,#0]
000dc0  e2677001          RSB      r7,r7,#1
000dc4  e1a0efc7          ASR      lr,r7,#31
000dc8  e207a001          AND      r10,r7,#1
000dcc  e18ce00a          ORR      lr,r12,r10
000dd0  e1a0c00e          MOV      r12,lr
000dd4  e3a0e000          MOV      lr,#0
000dd8  e18cc00e          ORR      r12,r12,lr
000ddc  e1a0e00c          MOV      lr,r12
000de0  e59f81f4          LDR      r8,|L1.4060|
000de4  e288700b          ADD      r7,r8,#0xb
000de8  e5807024          STR      r7,[r0,#0x24]
000dec  e580c020          STR      r12,[r0,#0x20]
;;;499    
;;;500        /* Transformation Matrix Config. */
;;;501        pu64Curr[5] = ROT_LOAD_A11(pstMatrix->u32A11);
000df0  e5927000          LDR      r7,[r2,#0]
000df4  e7df7b1f          BFC      r7,#22,#10
000df8  e3a0c000          MOV      r12,#0
000dfc  e00cc00c          AND      r12,r12,r12
000e00  e38c900c          ORR      r9,r12,#0xc
000e04  e30fcfff          MOV      r12,#0xffff
000e08  e1a08007          MOV      r8,r7
000e0c  e1a07009          MOV      r7,r9
000e10  e1a0900c          MOV      r9,r12
000e14  e0077009          AND      r7,r7,r9
000e18  e59fe1bc          LDR      lr,|L1.4060|
000e1c  e187700e          ORR      r7,r7,lr
000e20  e580702c          STR      r7,[r0,#0x2c]
000e24  e5808028          STR      r8,[r0,#0x28]
;;;502        pu64Curr[6] = ROT_LOAD_A12(pstMatrix->u32A12);
000e28  e5927004          LDR      r7,[r2,#4]
000e2c  e7df7b1f          BFC      r7,#22,#10
000e30  e3a0c000          MOV      r12,#0
000e34  e00c800c          AND      r8,r12,r12
000e38  e1a0e00c          MOV      lr,r12
000e3c  e18ee007          ORR      lr,lr,r7
000e40  e1a0700e          MOV      r7,lr
000e44  e388800f          ORR      r8,r8,#0xf
000e48  e1a0e00c          MOV      lr,r12
000e4c  e59fc188          LDR      r12,|L1.4060|
000e50  e187700e          ORR      r7,r7,lr
000e54  e18cc008          ORR      r12,r12,r8
000e58  e5807030          STR      r7,[r0,#0x30]
000e5c  e580c034          STR      r12,[r0,#0x34]
;;;503        pu64Curr[7] = ROT_LOAD_A21(pstMatrix->u32A21);
000e60  e5927008          LDR      r7,[r2,#8]
000e64  e7df7b1f          BFC      r7,#22,#10
000e68  e3a0c000          MOV      r12,#0
000e6c  e00cc00c          AND      r12,r12,r12
000e70  e38c900d          ORR      r9,r12,#0xd
000e74  e59fe160          LDR      lr,|L1.4060|
000e78  e1a0c007          MOV      r12,r7
000e7c  e189700e          ORR      r7,r9,lr
000e80  e580703c          STR      r7,[r0,#0x3c]
000e84  e580c038          STR      r12,[r0,#0x38]
;;;504        pu64Curr[8] = ROT_LOAD_A22(pstMatrix->u32A22);
000e88  e592700c          LDR      r7,[r2,#0xc]
000e8c  e7df7b1f          BFC      r7,#22,#10
000e90  e3a0c000          MOV      r12,#0
000e94  e00c900c          AND      r9,r12,r12
000e98  e187700c          ORR      r7,r7,r12
000e9c  e6ffc079          UXTH     r12,r9
000ea0  e38cc00e          ORR      r12,r12,#0xe
000ea4  e18cc00e          ORR      r12,r12,lr
000ea8  e5807040          STR      r7,[r0,#0x40]
000eac  e580c044          STR      r12,[r0,#0x44]
;;;505    
;;;506        /* Load W0, W1, W2: */
;;;507        pu64Curr[9]  = ROT_LOAD_A31(pstMatrix->u32A31);
000eb0  e5927010          LDR      r7,[r2,#0x10]
000eb4  e7df7b1f          BFC      r7,#22,#10
000eb8  e3a0c000          MOV      r12,#0
000ebc  e00cc00c          AND      r12,r12,r12
000ec0  e38c9015          ORR      r9,r12,#0x15
000ec4  e1cec004          BIC      r12,lr,r4
000ec8  e1a0e007          MOV      lr,r7
000ecc  e189700c          ORR      r7,r9,r12
000ed0  e580704c          STR      r7,[r0,#0x4c]
000ed4  e580e048          STR      lr,[r0,#0x48]
;;;508        pu64Curr[10] = ROT_LOAD_A32(pstMatrix->u32A32);
000ed8  e5927014          LDR      r7,[r2,#0x14]
000edc  e7df7b1f          BFC      r7,#22,#10
000ee0  e3a0c000          MOV      r12,#0
000ee4  e00cc00c          AND      r12,r12,r12
000ee8  e6ff907c          UXTH     r9,r12
000eec  e1a0c007          MOV      r12,r7
000ef0  e389e016          ORR      lr,r9,#0x16
000ef4  e59f70e0          LDR      r7,|L1.4060|
000ef8  e187700e          ORR      r7,r7,lr
000efc  e5807054          STR      r7,[r0,#0x54]
000f00  e580c050          STR      r12,[r0,#0x50]
;;;509        pu64Curr[11] = ROT_LOAD_A33(pstMatrix->u32A33);
000f04  e5927018          LDR      r7,[r2,#0x18]
000f08  e7df7b1f          BFC      r7,#22,#10
000f0c  e3a08000          MOV      r8,#0
000f10  e1a0e007          MOV      lr,r7
000f14  e008c008          AND      r12,r8,r8
000f18  e1a07008          MOV      r7,r8
000f1c  e187700e          ORR      r7,r7,lr
000f20  e6ff807c          UXTH     r8,r12
000f24  e388e017          ORR      lr,r8,#0x17
000f28  e59f90ac          LDR      r9,|L1.4060|
000f2c  e18ec009          ORR      r12,lr,r9
000f30  e5807058          STR      r7,[r0,#0x58]
000f34  e580c05c          STR      r12,[r0,#0x5c]
;;;510        
;;;511        /* write forward rotated corner coordinates */
;;;512        pu64Curr[12] = ROT_LOAD_COORD1(pstCoord->u16X1, pstCoord->u16Y1);
000f38  e1d370b0          LDRH     r7,[r3,#0]
000f3c  e3a08000          MOV      r8,#0
000f40  e6ff7077          UXTH     r7,r7
000f44  e008c008          AND      r12,r8,r8
000f48  e1a0c80c          LSL      r12,r12,#16
000f4c  e18cc827          ORR      r12,r12,r7,LSR #16
000f50  e1a0e807          LSL      lr,r7,#16
000f54  e1d370b2          LDRH     r7,[r3,#2]
000f58  e6ff7077          UXTH     r7,r7
000f5c  e187700e          ORR      r7,r7,lr
000f60  e18cc008          ORR      r12,r12,r8
000f64  e1888007          ORR      r8,r8,r7
000f68  e1897a49          ORR      r7,r9,r9,ASR #20
000f6c  e5807064          STR      r7,[r0,#0x64]
000f70  e5808060          STR      r8,[r0,#0x60]
;;;513        pu64Curr[13] = ROT_LOAD_COORD2(pstCoord->u16X2, pstCoord->u16Y2);
000f74  e1d370b4          LDRH     r7,[r3,#4]
000f78  e3a0c000          MOV      r12,#0
000f7c  e6ff7077          UXTH     r7,r7
000f80  e00cc00c          AND      r12,r12,r12
000f84  e1a0c80c          LSL      r12,r12,#16
000f88  e18cc827          ORR      r12,r12,r7,LSR #16
000f8c  e1a0e807          LSL      lr,r7,#16
000f90  e1d370b6          LDRH     r7,[r3,#6]
000f94  e3a08000          MOV      r8,#0
000f98  e6ff7077          UXTH     r7,r7
000f9c  e0088008          AND      r8,r8,r8
000fa0  e187700e          ORR      r7,r7,lr
000fa4  e18ce008          ORR      lr,r12,r8
000fa8  e3a08000          MOV      r8,#0
000fac  e1888007          ORR      r8,r8,r7
000fb0  e3a0e011          MOV      lr,#0x11
000fb4  e1a07008          MOV      r7,r8
000fb8  e1a0900e          MOV      r9,lr
000fbc  e59f8018          LDR      r8,|L1.4060|
000fc0  e1a0e007          MOV      lr,r7
000fc4  e1897008          ORR      r7,r9,r8
000fc8  ea000007          B        |L1.4076|
                  |L1.4044|
                          DCD      au8LLDD_GA_ROTATE_MATRIX_C_REVISION
                  |L1.4048|
                          DCD      au8LLDD_GA_ROTATE_MATRIX_C_TAG
                  |L1.4052|
                          DCD      au8LLDD_GA_ROTATE_MATRIX_H_REVISION
                  |L1.4056|
                          DCD      au8LLDD_GA_ROTATE_MATRIX_H_TAG
                  |L1.4060|
                          DCD      0x01010000
                  |L1.4064|
                          DCD      0x01010012
                  |L1.4068|
                          DCD      0x31010000
                  |L1.4072|
                          DCD      0x01010001
                  |L1.4076|
000fec  e580706c          STR      r7,[r0,#0x6c]
000ff0  e580e068          STR      lr,[r0,#0x68]
;;;514        pu64Curr[14] = ROT_LOAD_COORD3(pstCoord->u16X3, pstCoord->u16Y3);
000ff4  e1d370b8          LDRH     r7,[r3,#8]
000ff8  e3a0e000          MOV      lr,#0
000ffc  e6ff7077          UXTH     r7,r7
001000  e00ec00e          AND      r12,lr,lr
001004  e1a0c80c          LSL      r12,r12,#16
001008  e18cc827          ORR      r12,r12,r7,LSR #16
00100c  e1a0e807          LSL      lr,r7,#16
001010  e1d370ba          LDRH     r7,[r3,#0xa]
001014  e3a08000          MOV      r8,#0
001018  e6ff7077          UXTH     r7,r7
00101c  e0088008          AND      r8,r8,r8
001020  e187700e          ORR      r7,r7,lr
001024  e18c9008          ORR      r9,r12,r8
001028  e3a08000          MOV      r8,#0
00102c  e1877008          ORR      r7,r7,r8
001030  e3a08012          MOV      r8,#0x12
001034  e1a0e007          MOV      lr,r7
001038  e1a09008          MOV      r9,r8
00103c  e51fc068          LDR      r12,|L1.4060|
001040  e1a0800e          MOV      r8,lr
001044  e18cc009          ORR      r12,r12,r9
001048  e5807070          STR      r7,[r0,#0x70]
00104c  e580c074          STR      r12,[r0,#0x74]
;;;515        pu64Curr[15] = ROT_LOAD_COORD4(pstCoord->u16X4, pstCoord->u16Y4);
001050  e1d370bc          LDRH     r7,[r3,#0xc]
001054  e3a08000          MOV      r8,#0
001058  e6ff7077          UXTH     r7,r7
00105c  e008c008          AND      r12,r8,r8
001060  e1a0c80c          LSL      r12,r12,#16
001064  e18ce827          ORR      lr,r12,r7,LSR #16
001068  e1a0c807          LSL      r12,r7,#16
00106c  e1d370be          LDRH     r7,[r3,#0xe]
001070  e6ff7077          UXTH     r7,r7
001074  e0088008          AND      r8,r8,r8
001078  e187700c          ORR      r7,r7,r12
00107c  e18ee008          ORR      lr,lr,r8
001080  e3a09000          MOV      r9,#0
001084  e1878009          ORR      r8,r7,r9
001088  e3a07013          MOV      r7,#0x13
00108c  e1a0c008          MOV      r12,r8
001090  e1a09007          MOV      r9,r7
001094  e51f80c0          LDR      r8,|L1.4060|
001098  e1a0700c          MOV      r7,r12
00109c  e189c008          ORR      r12,r9,r8
0010a0  e5807078          STR      r7,[r0,#0x78]
0010a4  e580c07c          STR      r12,[r0,#0x7c]
;;;516    
;;;517        pu64Curr[16] = ROT_LOAD_SRCADDRPOS(pstCoord->u8ScrAddrPos);
0010a8  e5d37010          LDRB     r7,[r3,#0x10]
0010ac  e2077003          AND      r7,r7,#3
0010b0  e3a08000          MOV      r8,#0
0010b4  e0089008          AND      r9,r8,r8
0010b8  e1a0e008          MOV      lr,r8
0010bc  e3a0c014          MOV      r12,#0x14
0010c0  e1a08007          MOV      r8,r7
0010c4  e1a07009          MOV      r7,r9
0010c8  e1a0900c          MOV      r9,r12
0010cc  e188c00e          ORR      r12,r8,lr
0010d0  e1899007          ORR      r9,r9,r7
0010d4  e1a0700c          MOV      r7,r12
0010d8  e6ffc079          UXTH     r12,r9
0010dc  e51fe108          LDR      lr,|L1.4060|
0010e0  e18cc00e          ORR      r12,r12,lr
0010e4  e5807080          STR      r7,[r0,#0x80]
0010e8  e580c084          STR      r12,[r0,#0x84]
;;;518    
;;;519        pu64Curr[17] = ROT_LOAD_FADEFACT(pstParam->u8FadingFctr);
0010ec  e5d1700c          LDRB     r7,[r1,#0xc]
0010f0  e3a0c000          MOV      r12,#0
0010f4  e00cc00c          AND      r12,r12,r12
0010f8  e6ff807c          UXTH     r8,r12
0010fc  e388901a          ORR      r9,r8,#0x1a
001100  e1a08007          MOV      r8,r7
001104  e189700e          ORR      r7,r9,lr
001108  e580708c          STR      r7,[r0,#0x8c]
00110c  e5808088          STR      r8,[r0,#0x88]
;;;520    
;;;521        pu64Curr[18] = ROT_LOAD_SRCALPHAVAL(pstParam->u8SrcAlphaVal);
001110  e5d1700e          LDRB     r7,[r1,#0xe]
001114  e3a0c000          MOV      r12,#0
001118  e00cc00c          AND      r12,r12,r12
00111c  e6ffe07c          UXTH     lr,r12
001120  e38ec01b          ORR      r12,lr,#0x1b
001124  e51fe150          LDR      lr,|L1.4060|
001128  e18cc00e          ORR      r12,r12,lr
00112c  e5807090          STR      r7,[r0,#0x90]
001130  e580c094          STR      r12,[r0,#0x94]
;;;522    
;;;523        pu64Curr[19] = ROT_LOAD_DSTALPHAVAL(pstParam->u8DstAlphaVal);
001134  e5d1700f          LDRB     r7,[r1,#0xf]
001138  e3a0c000          MOV      r12,#0
00113c  e00c800c          AND      r8,r12,r12
001140  e187e00c          ORR      lr,r7,r12
001144  e6ffc078          UXTH     r12,r8
001148  e38c901c          ORR      r9,r12,#0x1c
00114c  e51f7178          LDR      r7,|L1.4060|
001150  e1a0800e          MOV      r8,lr
001154  e1a0e009          MOV      lr,r9
001158  e1a09007          MOV      r9,r7
00115c  e18ec009          ORR      r12,lr,r9
001160  e5808098          STR      r8,[r0,#0x98]
001164  e580c09c          STR      r12,[r0,#0x9c]
;;;524    
;;;525        /* Clipping Window */
;;;526        if(pstParam->eClipWndEn == GA_EN)
001168  e5d17002          LDRB     r7,[r1,#2]
00116c  e3570001          CMP      r7,#1
001170  1a000038          BNE      |L1.4696|
;;;527        {
;;;528            pu64Curr[u8Curr] = ROT_LOAD_CLIPWNDUL(pstParam->tClipWnd.u16UlX, pstParam->tClipWnd.u16UlY);
001174  e1d171b0          LDRH     r7,[r1,#0x10]
001178  e3a0e000          MOV      lr,#0
00117c  e300cfff          MOV      r12,#0xfff
001180  e007700c          AND      r7,r7,r12
001184  e00ec00e          AND      r12,lr,lr
001188  e1a0c80c          LSL      r12,r12,#16
00118c  e18cc827          ORR      r12,r12,r7,LSR #16
001190  e1a0e807          LSL      lr,r7,#16
001194  e1d171b2          LDRH     r7,[r1,#0x12]
001198  e3a09000          MOV      r9,#0
00119c  e3008fff          MOV      r8,#0xfff
0011a0  e0077008          AND      r7,r7,r8
0011a4  e0098009          AND      r8,r9,r9
0011a8  e18ee007          ORR      lr,lr,r7
0011ac  e188800c          ORR      r8,r8,r12
0011b0  e0099008          AND      r9,r9,r8
0011b4  e3a07001          MOV      r7,#1
0011b8  e1a0800e          MOV      r8,lr
0011bc  e1a0e009          MOV      lr,r9
0011c0  e1a09007          MOV      r9,r7
0011c4  e1a07008          MOV      r7,r8
0011c8  e18e8009          ORR      r8,lr,r9
0011cc  e6ffe078          UXTH     lr,r8
0011d0  e51f91fc          LDR      r9,|L1.4060|
0011d4  e1a0c007          MOV      r12,r7
0011d8  e18e7009          ORR      r7,lr,r9
0011dc  e080e184          ADD      lr,r0,r4,LSL #3
0011e0  e58e7004          STR      r7,[lr,#4]
0011e4  e58ec000          STR      r12,[lr,#0]
;;;529            u8Curr++;
0011e8  e2847001          ADD      r7,r4,#1
0011ec  e20740ff          AND      r4,r7,#0xff
;;;530    
;;;531            pu64Curr[u8Curr] = ROT_LOAD_CLIPWNDLR(pstParam->tClipWnd.u16LrX, pstParam->tClipWnd.u16LrY);
0011f0  e1d171b4          LDRH     r7,[r1,#0x14]
0011f4  e3a0e000          MOV      lr,#0
0011f8  e300cfff          MOV      r12,#0xfff
0011fc  e007700c          AND      r7,r7,r12
001200  e00ec00e          AND      r12,lr,lr
001204  e1a0c80c          LSL      r12,r12,#16
001208  e18ce827          ORR      lr,r12,r7,LSR #16
00120c  e1a0c807          LSL      r12,r7,#16
001210  e1d171b6          LDRH     r7,[r1,#0x16]
001214  e3a08000          MOV      r8,#0
001218  e300afff          MOV      r10,#0xfff
00121c  e007700a          AND      r7,r7,r10
001220  e0088008          AND      r8,r8,r8
001224  e18cc007          ORR      r12,r12,r7
001228  e18e9008          ORR      r9,lr,r8
00122c  e3a09000          MOV      r9,#0
001230  e18c8009          ORR      r8,r12,r9
001234  e3e07000          MVN      r7,#0
001238  e008e007          AND      lr,r8,r7
00123c  e51f8268          LDR      r8,|L1.4060|
001240  e18e7009          ORR      r7,lr,r9
001244  e188cbc8          ORR      r12,r8,r8,ASR #23
001248  e080e184          ADD      lr,r0,r4,LSL #3
00124c  e88e1080          STM      lr,{r7,r12}
;;;532            u8Curr++;
001250  e2847001          ADD      r7,r4,#1
001254  e20740ff          AND      r4,r7,#0xff
                  |L1.4696|
;;;533        }
;;;534    
;;;535        /* Rotation Command */
;;;536        pu64Curr[u8Curr] = ROT_ROTATEB(pstParam->eDstRedProt,
001258  e5d17004          LDRB     r7,[r1,#4]
00125c  e3a0e000          MOV      lr,#0
001260  e2077001          AND      r7,r7,#1
001264  e00ec00e          AND      r12,lr,lr
001268  e1a0c78c          LSL      r12,r12,#15
00126c  e18cc8a7          ORR      r12,r12,r7,LSR #17
001270  e1a0e787          LSL      lr,r7,#15
001274  e5d17005          LDRB     r7,[r1,#5]
001278  e3a08000          MOV      r8,#0
00127c  e2077001          AND      r7,r7,#1
001280  e0089008          AND      r9,r8,r8
001284  e1a08007          MOV      r8,r7
001288  e1a09709          LSL      r9,r9,#14
00128c  e1897927          ORR      r7,r9,r7,LSR #18
001290  e18ee708          ORR      lr,lr,r8,LSL #14
001294  e18cc007          ORR      r12,r12,r7
001298  e5d17006          LDRB     r7,[r1,#6]
00129c  e3a08000          MOV      r8,#0
0012a0  e2077001          AND      r7,r7,#1
0012a4  e0089008          AND      r9,r8,r8
0012a8  e1a08007          MOV      r8,r7
0012ac  e1a09689          LSL      r9,r9,#13
0012b0  e18979a7          ORR      r7,r9,r7,LSR #19
0012b4  e18ee688          ORR      lr,lr,r8,LSL #13
0012b8  e18cc007          ORR      r12,r12,r7
0012bc  e5d17007          LDRB     r7,[r1,#7]
0012c0  e3a08000          MOV      r8,#0
0012c4  e2077001          AND      r7,r7,#1
0012c8  e0089008          AND      r9,r8,r8
0012cc  e1a08007          MOV      r8,r7
0012d0  e1a09609          LSL      r9,r9,#12
0012d4  e1897a27          ORR      r7,r9,r7,LSR #20
0012d8  e18ee608          ORR      lr,lr,r8,LSL #12
0012dc  e18cc007          ORR      r12,r12,r7
0012e0  e5d17008          LDRB     r7,[r1,#8]
0012e4  e3a08000          MOV      r8,#0
0012e8  e2077001          AND      r7,r7,#1
0012ec  e0089008          AND      r9,r8,r8
0012f0  e1a08007          MOV      r8,r7
0012f4  e1a09589          LSL      r9,r9,#11
0012f8  e1897aa7          ORR      r7,r9,r7,LSR #21
0012fc  e18ee588          ORR      lr,lr,r8,LSL #11
001300  e18cc007          ORR      r12,r12,r7
001304  e5d17009          LDRB     r7,[r1,#9]
001308  e3a08000          MOV      r8,#0
00130c  e2077001          AND      r7,r7,#1
001310  e0088008          AND      r8,r8,r8
001314  e1a08508          LSL      r8,r8,#10
001318  e1888b27          ORR      r8,r8,r7,LSR #22
00131c  e18ee507          ORR      lr,lr,r7,LSL #10
001320  e18cc008          ORR      r12,r12,r8
001324  e5d1700a          LDRB     r7,[r1,#0xa]
001328  e3a08000          MOV      r8,#0
00132c  e2077001          AND      r7,r7,#1
001330  e0089008          AND      r9,r8,r8
001334  e1a08007          MOV      r8,r7
001338  e1a09489          LSL      r9,r9,#9
00133c  e1897ba7          ORR      r7,r9,r7,LSR #23
001340  e18ee488          ORR      lr,lr,r8,LSL #9
001344  e18cc007          ORR      r12,r12,r7
001348  e5d1700b          LDRB     r7,[r1,#0xb]
00134c  e3a09000          MOV      r9,#0
001350  e2077001          AND      r7,r7,#1
001354  e0098009          AND      r8,r9,r9
001358  e1a08408          LSL      r8,r8,#8
00135c  e1889c27          ORR      r9,r8,r7,LSR #24
001360  e18e8407          ORR      r8,lr,r7,LSL #8
001364  e18cc009          ORR      r12,r12,r9
001368  e5d1700d          LDRB     r7,[r1,#0xd]
00136c  e3a0a000          MOV      r10,#0
001370  e2077001          AND      r7,r7,#1
001374  e00ae00a          AND      lr,r10,r10
001378  e1a0e18e          LSL      lr,lr,#3
00137c  e18e9ea7          ORR      r9,lr,r7,LSR #29
001380  e188e187          ORR      lr,r8,r7,LSL #3
001384  e18cc009          ORR      r12,r12,r9
001388  e5d17002          LDRB     r7,[r1,#2]
00138c  e2079001          AND      r9,r7,#1
001390  e00a700a          AND      r7,r10,r10
001394  e0998009          ADDS     r8,r9,r9
001398  e0a77007          ADC      r7,r7,r7
00139c  e188800e          ORR      r8,r8,lr
0013a0  e18ce007          ORR      lr,r12,r7
0013a4  e5d17003          LDRB     r7,[r1,#3]
0013a8  e3a09000          MOV      r9,#0
0013ac  e2077001          AND      r7,r7,#1
0013b0  e009c009          AND      r12,r9,r9
0013b4  e1877008          ORR      r7,r7,r8
0013b8  e18e800c          ORR      r8,lr,r12
0013bc  e1a0c007          MOV      r12,r7
0013c0  e6ff8078          UXTH     r8,r8
0013c4  e18cc009          ORR      r12,r12,r9
0013c8  e3887431          ORR      r7,r8,#0x31000000
0013cc  e080e184          ADD      lr,r0,r4,LSL #3
0013d0  e58e7004          STR      r7,[lr,#4]
0013d4  e58ec000          STR      r12,[lr,#0]
;;;537                                       pstParam->eDstGreenProt,
;;;538                                       pstParam->eDstBlueProt,
;;;539                                       pstParam->eDstAlphaProt,
;;;540                                       pstParam->eSrcRedFad,
;;;541                                       pstParam->eSrcGreenFad,
;;;542                                       pstParam->eSrcBlueFad,
;;;543                                       pstParam->eSrcAlphaFad,
;;;544                                       pstParam->eBldOrd,
;;;545                                       pstParam->eClipWndEn,
;;;546                                       pstParam->eFilterEn);
;;;547    
;;;548        u8Curr++;
0013d8  e2847001          ADD      r7,r4,#1
0013dc  e20740ff          AND      r4,r7,#0xff
;;;549    
;;;550        pstCmdList->pu64Current = &pu64Curr[u8Curr];
0013e0  e0807184          ADD      r7,r0,r4,LSL #3
0013e4  e304c000          MOVW     r12,#0x4000
0013e8  e78c7006          STR      r7,[r12,r6]
;;;551    
;;;552        pstCmdList->u32UsedDoubleWords = u8Curr;
0013ec  e3047004          MOV      r7,#0x4004
0013f0  e7874006          STR      r4,[r7,r6]
;;;553    }
0013f4  e8bd87f0          POP      {r4-r10,pc}
;;;554    /****************************************************************************/
                          ENDP


                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_GA_ROTATE_MATRIX_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313220          DCB      0x2e,0x31,0x32,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_GA_ROTATE_MATRIX_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  375f4746          DCB      0x37,0x5f,0x47,0x46
000024  58202400          DCB      0x58,0x20,0x24,0x00
                  au8LLDD_GA_ROTATE_MATRIX_H_REVISION
000028  24526576          DCB      0x24,0x52,0x65,0x76
00002c  6973696f          DCB      0x69,0x73,0x69,0x6f
000030  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000034  2e313520          DCB      0x2e,0x31,0x35,0x20
000038  2400              DCB      0x24,0x00
                  au8LLDD_GA_ROTATE_MATRIX_H_TAG
00003a  244e              DCB      0x24,0x4e
00003c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000040  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000044  445f315f          DCB      0x44,0x5f,0x31,0x5f
000048  375f4746          DCB      0x37,0x5f,0x47,0x46
00004c  58202400          DCB      0x58,0x20,0x24,0x00
