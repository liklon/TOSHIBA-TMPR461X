; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\blit.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\blit.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\blit.crf ..\..\..\..\lldd\src\blit.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vBlit_GetVersion PROC
;;;68     
;;;69     void vBlit_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4010          PUSH     {r4,lr}
;;;70                           uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag)
;;;71     {
;;;72          *pau8ModuleRevision = &au8LLDD_GA_BLIT_C_REVISION[0];
000004  e59f4f98          LDR      r4,|L1.4004|
000008  e5804000          STR      r4,[r0,#0]
;;;73          *pau8ModuleTag      = &au8LLDD_GA_BLIT_C_TAG[0];
00000c  e59f4f94          LDR      r4,|L1.4008|
000010  e5814000          STR      r4,[r1,#0]
;;;74          *pau8HeaderRevision = &au8LLDD_GA_BLIT_H_REVISION[0];
000014  e59f4f90          LDR      r4,|L1.4012|
000018  e5824000          STR      r4,[r2,#0]
;;;75          *pau8HeaderTag      = &au8LLDD_GA_BLIT_H_TAG[0];
00001c  e59f4f8c          LDR      r4,|L1.4016|
000020  e5834000          STR      r4,[r3,#0]
;;;76     }
000024  e8bd8010          POP      {r4,pc}
;;;77     /* ....................................................................... */
                          ENDP

                  vBlit_SetClippWnd PROC
;;;78     void vBlit_SetClippWnd(uint32_t u32ClipAddr, uint16_t u16Width,
000028  e92d40f0          PUSH     {r4-r7,lr}
;;;79                            uint16_t u16Height, ga_list_st* pstCmdList)
;;;80     {
00002c  e1a04001          MOV      r4,r1
;;;81         uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000030  e3045000          MOVW     r5,#0x4000
000034  e7951003          LDR      r1,[r5,r3]
;;;82     #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;83     
;;;84         uint32_t u32NeededDW  = 3U;
;;;85        
;;;86         u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;87         
;;;88         /* check if there is enough space in command list: */
;;;89         if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;90         {
;;;91           pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;92           pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;93           return;
;;;94         }
;;;95         else 
;;;96         {
;;;97           pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;98         }
;;;99     #endif
;;;100    
;;;101        pu64Curr[0] = BLT_LOAD_CLIP_STARTADDR(u32ClipAddr);
000038  e3a06000          MOV      r6,#0
00003c  e006c006          AND      r12,r6,r6
000040  e180e006          ORR      lr,r0,r6
000044  e18c5006          ORR      r5,r12,r6
000048  e6ff6075          UXTH     r6,r5
00004c  e59f7f60          LDR      r7,|L1.4020|
000050  e1866007          ORR      r6,r6,r7
000054  e5816004          STR      r6,[r1,#4]
000058  e581e000          STR      lr,[r1,#0]
00005c  e1a05004          MOV      r5,r4
;;;102        pu64Curr[1] = BLT_LOAD_CLIP_WIDTH(u16Width);
000060  e7df561f          BFC      r5,#12,#20
000064  e3a06000          MOV      r6,#0
000068  e0067006          AND      r7,r6,r6
00006c  e185c006          ORR      r12,r5,r6
000070  e3876001          ORR      r6,r7,#1
000074  e59f7f38          LDR      r7,|L1.4020|
000078  e1866007          ORR      r6,r6,r7
00007c  e581600c          STR      r6,[r1,#0xc]
000080  e581c008          STR      r12,[r1,#8]
000084  e1a05002          MOV      r5,r2
;;;103        pu64Curr[2] = BLT_LOAD_CLIP_HEIGHT(u16Height);
000088  e7df561f          BFC      r5,#12,#20
00008c  e3a06000          MOV      r6,#0
000090  e006c006          AND      r12,r6,r6
000094  e1855006          ORR      r5,r5,r6
000098  e38ce002          ORR      lr,r12,#2
00009c  e30f6fff          MOV      r6,#0xffff
0000a0  e1a0c005          MOV      r12,r5
0000a4  e1a0500e          MOV      r5,lr
0000a8  e1a0e006          MOV      lr,r6
0000ac  e005500e          AND      r5,r5,lr
0000b0  e1855007          ORR      r5,r5,r7
0000b4  e5815014          STR      r5,[r1,#0x14]
0000b8  e581c010          STR      r12,[r1,#0x10]
;;;104    
;;;105        pstCmdList->pu64Current = &pu64Curr[3];
0000bc  e2815018          ADD      r5,r1,#0x18
0000c0  e3046000          MOVW     r6,#0x4000
0000c4  e7865003          STR      r5,[r6,r3]
;;;106    
;;;107        pstCmdList->u32UsedDoubleWords = 3U;
0000c8  e3a05003          MOV      r5,#3
0000cc  e3046004          MOV      r6,#0x4004
0000d0  e7865003          STR      r5,[r6,r3]
;;;108    }
0000d4  e8bd80f0          POP      {r4-r7,pc}
;;;109    
                          ENDP

                  vBlit_OverwriteRGB PROC
;;;110    /* ....................................................................... */
;;;111    void vBlit_OverwriteRGB(blit_mem_st* pstMem, blit_OvrRgb_st* pstParam, ga_list_st* pstCmdList)
0000d8  e92d41f0          PUSH     {r4-r8,lr}
;;;112    {
0000dc  e1a03000          MOV      r3,r0
0000e0  e1a04002          MOV      r4,r2
;;;113        uint8_t u8Curr = 6U;
0000e4  e3a00006          MOV      r0,#6
;;;114        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
0000e8  e3045000          MOVW     r5,#0x4000
0000ec  e7952004          LDR      r2,[r5,r4]
;;;115    
;;;116    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;117    
;;;118        uint32_t u32NeededDW;
;;;119        
;;;120        u32NeededDW = u8Curr + 2U; /* 2 for Src/Dst Alpha */
;;;121        if(pstParam->eFadeMode != BLT_NOFADING)
;;;122        {
;;;123            u32NeededDW++;  /* for fade factor */
;;;124        }
;;;125        if(pstParam->eSrcFmt == GA_RGB16 && pstParam->eTranspColEn == GA_EN)
;;;126        {
;;;127            u32NeededDW+=2; /* for Src/Dst Transparency */
;;;128        }
;;;129        u32NeededDW++; /* for command itself */
;;;130        
;;;131        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;132    
;;;133        /* check if there is enough space in command list: */
;;;134        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;135        {
;;;136          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;137          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;138          return;
;;;139        }
;;;140        else 
;;;141        {
;;;142          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;143        }
;;;144    #endif
;;;145    
;;;146        /* Source Memory Params */
;;;147        pu64Curr[0] = BLT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
0000f0  e3a06000          MOV      r6,#0
0000f4  e006e006          AND      lr,r6,r6
0000f8  e1a0c006          MOV      r12,r6
0000fc  e5935004          LDR      r5,[r3,#4]
000100  e1a06005          MOV      r6,r5
000104  e186600c          ORR      r6,r6,r12
000108  e6ff507e          UXTH     r5,lr
00010c  e385e009          ORR      lr,r5,#9
000110  e59f7e9c          LDR      r7,|L1.4020|
000114  e1a05006          MOV      r5,r6
000118  e18e6007          ORR      r6,lr,r7
00011c  e8820060          STM      r2,{r5,r6}
;;;148        pu64Curr[1] = BLT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
000120  e1d350b0          LDRH     r5,[r3,#0]
000124  e7df561f          BFC      r5,#12,#20
000128  e3a06000          MOV      r6,#0
00012c  e0066006          AND      r6,r6,r6
000130  e1a07005          MOV      r7,r5
000134  e6ff5076          UXTH     r5,r6
000138  e1a06007          MOV      r6,r7
00013c  e385700a          ORR      r7,r5,#0xa
000140  e59fce6c          LDR      r12,|L1.4020|
000144  e1a05006          MOV      r5,r6
000148  e187600c          ORR      r6,r7,r12
00014c  e5825008          STR      r5,[r2,#8]
000150  e582600c          STR      r6,[r2,#0xc]
;;;149    
;;;150        /* Destination Memory Params */
;;;151        pu64Curr[2] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
000154  e3a0c000          MOV      r12,#0
000158  e593500c          LDR      r5,[r3,#0xc]
00015c  e1a06005          MOV      r6,r5
000160  e00c500c          AND      r5,r12,r12
000164  e186e00c          ORR      lr,r6,r12
000168  e6ff7075          UXTH     r7,r5
00016c  e3876004          ORR      r6,r7,#4
000170  e59f7e3c          LDR      r7,|L1.4020|
000174  e1866007          ORR      r6,r6,r7
000178  e5826014          STR      r6,[r2,#0x14]
00017c  e582e010          STR      lr,[r2,#0x10]
;;;152        pu64Curr[3] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
000180  e1d350b8          LDRH     r5,[r3,#8]
000184  e7df561f          BFC      r5,#12,#20
000188  e3a06000          MOV      r6,#0
00018c  e0067006          AND      r7,r6,r6
000190  e1855006          ORR      r5,r5,r6
000194  e6ff6077          UXTH     r6,r7
000198  e1a07005          MOV      r7,r5
00019c  e386c005          ORR      r12,r6,#5
0001a0  e59f5e0c          LDR      r5,|L1.4020|
0001a4  e185500c          ORR      r5,r5,r12
0001a8  e582501c          STR      r5,[r2,#0x1c]
0001ac  e5827018          STR      r7,[r2,#0x18]
;;;153    
;;;154        /* Blitting Area Size */
;;;155        pu64Curr[4] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
0001b0  e1d351b0          LDRH     r5,[r3,#0x10]
0001b4  e7df561f          BFC      r5,#12,#20
0001b8  e3a07000          MOV      r7,#0
0001bc  e007e007          AND      lr,r7,r7
0001c0  e1877005          ORR      r7,r7,r5
0001c4  e6ff607e          UXTH     r6,lr
0001c8  e3866006          ORR      r6,r6,#6
0001cc  e59fcde0          LDR      r12,|L1.4020|
0001d0  e186600c          ORR      r6,r6,r12
0001d4  e5826024          STR      r6,[r2,#0x24]
0001d8  e5827020          STR      r7,[r2,#0x20]
;;;156        pu64Curr[5] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
0001dc  e1d351b2          LDRH     r5,[r3,#0x12]
0001e0  e7df561f          BFC      r5,#12,#20
0001e4  e3a0c000          MOV      r12,#0
0001e8  e00cc00c          AND      r12,r12,r12
0001ec  e6ffe07c          UXTH     lr,r12
0001f0  e1a0c005          MOV      r12,r5
0001f4  e1a0600c          MOV      r6,r12
0001f8  e38ec007          ORR      r12,lr,#7
0001fc  e59f7db0          LDR      r7,|L1.4020|
000200  e1a05006          MOV      r5,r6
000204  e18c6007          ORR      r6,r12,r7
000208  e5825028          STR      r5,[r2,#0x28]
00020c  e582602c          STR      r6,[r2,#0x2c]
;;;157    
;;;158        /*** Operation Specific Params ***/
;;;159    
;;;160        /* Fading Factor Setup */
;;;161        if(pstParam->eFadeMode != BLT_NOFADING)
000210  e5d15003          LDRB     r5,[r1,#3]
000214  e3550000          CMP      r5,#0
000218  0a00000c          BEQ      |L1.592|
;;;162        {
;;;163            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
00021c  e5d15005          LDRB     r5,[r1,#5]
000220  e3a0c000          MOV      r12,#0
000224  e00c700c          AND      r7,r12,r12
000228  e18cc005          ORR      r12,r12,r5
00022c  e6ff5077          UXTH     r5,r7
000230  e3857014          ORR      r7,r5,#0x14
000234  e59f5d78          LDR      r5,|L1.4020|
000238  e1855007          ORR      r5,r5,r7
00023c  e0827180          ADD      r7,r2,r0,LSL #3
000240  e5875004          STR      r5,[r7,#4]
000244  e587c000          STR      r12,[r7,#0]
;;;164            u8Curr++;
000248  e2805001          ADD      r5,r0,#1
00024c  e20500ff          AND      r0,r5,#0xff
                  |L1.592|
;;;165        }
;;;166    
;;;167       /* Source Alpha Blending Value */
;;;168       pu64Curr[u8Curr] = BLT_LOAD_SRCALPHA(pstParam->u8SrcAlphaVal);
000250  e5d1500e          LDRB     r5,[r1,#0xe]
000254  e3a07000          MOV      r7,#0
000258  e0076007          AND      r6,r7,r7
00025c  e1855007          ORR      r5,r5,r7
000260  e6ffc076          UXTH     r12,r6
000264  e1a07005          MOV      r7,r5
000268  e38c500d          ORR      r5,r12,#0xd
00026c  e59fcd40          LDR      r12,|L1.4020|
000270  e1a06007          MOV      r6,r7
000274  e185500c          ORR      r5,r5,r12
000278  e0827180          ADD      r7,r2,r0,LSL #3
00027c  e5875004          STR      r5,[r7,#4]
000280  e5876000          STR      r6,[r7,#0]
;;;169       u8Curr++;
000284  e2805001          ADD      r5,r0,#1
000288  e20500ff          AND      r0,r5,#0xff
;;;170    
;;;171       /* Destination Alpha Blending Value */
;;;172       pu64Curr[u8Curr] = BLT_LOAD_DESTALPHA(pstParam->u8DstAlphaVal);
00028c  e5d1500f          LDRB     r5,[r1,#0xf]
000290  e3a07000          MOV      r7,#0
000294  e1a06005          MOV      r6,r5
000298  e007c007          AND      r12,r7,r7
00029c  e1866007          ORR      r6,r6,r7
0002a0  e38ce00f          ORR      lr,r12,#0xf
0002a4  e30f7fff          MOV      r7,#0xffff
0002a8  e1a0c006          MOV      r12,r6
0002ac  e1a0600e          MOV      r6,lr
0002b0  e1a0e007          MOV      lr,r7
0002b4  e1a0700c          MOV      r7,r12
0002b8  e00ee006          AND      lr,lr,r6
0002bc  e59f5cf0          LDR      r5,|L1.4020|
0002c0  e1a06007          MOV      r6,r7
0002c4  e185500e          ORR      r5,r5,lr
0002c8  e0827180          ADD      r7,r2,r0,LSL #3
0002cc  e5875004          STR      r5,[r7,#4]
0002d0  e5876000          STR      r6,[r7,#0]
;;;173       u8Curr++;
0002d4  e2805001          ADD      r5,r0,#1
0002d8  e20500ff          AND      r0,r5,#0xff
;;;174    
;;;175        /* Source Type Selection */
;;;176        if(pstParam->eSrcFmt == GA_RGB16)
0002dc  e5d15000          LDRB     r5,[r1,#0]
0002e0  e3550000          CMP      r5,#0
0002e4  1a000043          BNE      |L1.1016|
;;;177        {
;;;178            /** 16-bit RGB Source **/
;;;179    
;;;180            /* Transparency Color Option */
;;;181            if(pstParam->eTranspColEn == GA_EN)
0002e8  e5d15002          LDRB     r5,[r1,#2]
0002ec  e3550001          CMP      r5,#1
0002f0  1a00001a          BNE      |L1.864|
;;;182            {
;;;183                pu64Curr[u8Curr] = BLT_LOAD_SRCTRANSPATT(pstParam->u32SrcTransVal);
0002f4  e5915008          LDR      r5,[r1,#8]
0002f8  e3c554ff          BIC      r5,r5,#0xff000000
0002fc  e3a06000          MOV      r6,#0
000300  e1a0c005          MOV      r12,r5
000304  e0067006          AND      r7,r6,r6
000308  e1a05006          MOV      r5,r6
00030c  e185500c          ORR      r5,r5,r12
000310  e387c00e          ORR      r12,r7,#0xe
000314  e59f7c98          LDR      r7,|L1.4020|
000318  e18c6007          ORR      r6,r12,r7
00031c  e0827180          ADD      r7,r2,r0,LSL #3
000320  e8870060          STM      r7,{r5,r6}
;;;184                u8Curr++;
000324  e2805001          ADD      r5,r0,#1
000328  e20500ff          AND      r0,r5,#0xff
;;;185                pu64Curr[u8Curr] = BLT_LOAD_DESTTRANSPATT(pstParam->u16DstTransVal);
00032c  e1d170bc          LDRH     r7,[r1,#0xc]
000330  e3a06000          MOV      r6,#0
000334  e0065006          AND      r5,r6,r6
000338  e187c006          ORR      r12,r7,r6
00033c  e6ff5075          UXTH     r5,r5
000340  e3856010          ORR      r6,r5,#0x10
000344  e59fec68          LDR      lr,|L1.4020|
000348  e186600e          ORR      r6,r6,lr
00034c  e0827180          ADD      r7,r2,r0,LSL #3
000350  e5876004          STR      r6,[r7,#4]
000354  e587c000          STR      r12,[r7,#0]
;;;186                u8Curr++;
000358  e2805001          ADD      r5,r0,#1
00035c  e20500ff          AND      r0,r5,#0xff
                  |L1.864|
;;;187    
;;;188            }
;;;189    
;;;190            /* Overwrite 16-bit RGB */
;;;191            pu64Curr[u8Curr] = BLT_ORGB16(pstParam->eDestFmt,
000360  e5d15001          LDRB     r5,[r1,#1]
000364  e3a06000          MOV      r6,#0
000368  e2055001          AND      r5,r5,#1
00036c  e0066006          AND      r6,r6,r6
000370  e1a06206          LSL      r6,r6,#4
000374  e1866e25          ORR      r6,r6,r5,LSR #28
000378  e1a07205          LSL      r7,r5,#4
00037c  e5d15002          LDRB     r5,[r1,#2]
000380  e3a08000          MOV      r8,#0
000384  e2055001          AND      r5,r5,#1
000388  e008c008          AND      r12,r8,r8
00038c  e1a0c18c          LSL      r12,r12,#3
000390  e18ccea5          ORR      r12,r12,r5,LSR #29
000394  e1877185          ORR      r7,r7,r5,LSL #3
000398  e186600c          ORR      r6,r6,r12
00039c  e5d15003          LDRB     r5,[r1,#3]
0003a0  e205e003          AND      lr,r5,#3
0003a4  e0085008          AND      r5,r8,r8
0003a8  e09ec00e          ADDS     r12,lr,lr
0003ac  e0a55005          ADC      r5,r5,r5
0003b0  e1a0e006          MOV      lr,r6
0003b4  e187600c          ORR      r6,r7,r12
0003b8  e18e7005          ORR      r7,lr,r5
0003bc  e5d15004          LDRB     r5,[r1,#4]
0003c0  e3a0c000          MOV      r12,#0
0003c4  e2055001          AND      r5,r5,#1
0003c8  e00cc00c          AND      r12,r12,r12
0003cc  e1855006          ORR      r5,r5,r6
0003d0  e187e00c          ORR      lr,r7,r12
0003d4  e1a0c005          MOV      r12,r5
0003d8  e1a0700c          MOV      r7,r12
0003dc  e6ff607e          UXTH     r6,lr
0003e0  e59febd0          LDR      lr,|L1.4024|
0003e4  e1a05007          MOV      r5,r7
0003e8  e186600e          ORR      r6,r6,lr
0003ec  e0827180          ADD      r7,r2,r0,LSL #3
0003f0  e8870060          STM      r7,{r5,r6}
0003f4  ea00001b          B        |L1.1128|
                  |L1.1016|
;;;192                                          pstParam->eTranspColEn,
;;;193                                          pstParam->eFadeMode,
;;;194                                          pstParam->eClipWndEn);
;;;195        }
;;;196        else
;;;197        {
;;;198            /** 32-bit RGBA Source **/
;;;199            pu64Curr[u8Curr] = BLT_ORGBA32(pstParam->eDestFmt,
0003f8  e5d15001          LDRB     r5,[r1,#1]
0003fc  e3a0c000          MOV      r12,#0
000400  e2055001          AND      r5,r5,#1
000404  e00c600c          AND      r6,r12,r12
000408  e1a06186          LSL      r6,r6,#3
00040c  e1866ea5          ORR      r6,r6,r5,LSR #29
000410  e1a07185          LSL      r7,r5,#3
000414  e5d15003          LDRB     r5,[r1,#3]
000418  e205e003          AND      lr,r5,#3
00041c  e00c500c          AND      r5,r12,r12
000420  e09ec00e          ADDS     r12,lr,lr
000424  e0a55005          ADC      r5,r5,r5
000428  e1a0e007          MOV      lr,r7
00042c  e1a07006          MOV      r7,r6
000430  e18e600c          ORR      r6,lr,r12
000434  e1877005          ORR      r7,r7,r5
000438  e5d15004          LDRB     r5,[r1,#4]
00043c  e3a08000          MOV      r8,#0
000440  e2055001          AND      r5,r5,#1
000444  e008e008          AND      lr,r8,r8
000448  e186c005          ORR      r12,r6,r5
00044c  e187700e          ORR      r7,r7,lr
000450  e6ff6077          UXTH     r6,r7
000454  e59feb60          LDR      lr,|L1.4028|
000458  e18c5008          ORR      r5,r12,r8
00045c  e186600e          ORR      r6,r6,lr
000460  e0827180          ADD      r7,r2,r0,LSL #3
000464  e8870060          STM      r7,{r5,r6}
                  |L1.1128|
;;;200                                           pstParam->eFadeMode,
;;;201                                           pstParam->eClipWndEn);
;;;202        }
;;;203    
;;;204        u8Curr++;    
000468  e2805001          ADD      r5,r0,#1
00046c  e20500ff          AND      r0,r5,#0xff
;;;205    
;;;206        /* Update List Pointer */
;;;207        pstCmdList->pu64Current = &pu64Curr[u8Curr];
000470  e0825180          ADD      r5,r2,r0,LSL #3
000474  e3046000          MOVW     r6,#0x4000
000478  e7865004          STR      r5,[r6,r4]
;;;208    
;;;209        pstCmdList->u32UsedDoubleWords = u8Curr;
00047c  e3045004          MOV      r5,#0x4004
000480  e7850004          STR      r0,[r5,r4]
;;;210    
;;;211    }    
000484  e8bd81f0          POP      {r4-r8,pc}
;;;212    
                          ENDP

                  vBlit_OverwriteRLEI_RGB PROC
;;;213    /* ....................................................................... */
;;;214    void vBlit_OverwriteRLEI_RGB(blit_mem_st* pstMem, blit_OvrRlei_st* pstParam,
000488  e92d41f0          PUSH     {r4-r8,lr}
;;;215                                 ga_list_st* pstCmdList)
;;;216    {
00048c  e1a03000          MOV      r3,r0
000490  e1a04002          MOV      r4,r2
;;;217        uint8_t u8Curr = 6U;
000494  e3a00006          MOV      r0,#6
;;;218        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000498  e3045000          MOVW     r5,#0x4000
00049c  e7952004          LDR      r2,[r5,r4]
;;;219    
;;;220    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;221    
;;;222        uint32_t u32NeededDW ;
;;;223        
;;;224        u32NeededDW = u8Curr + 2; /* 2 for Src/Dst Alpha */
;;;225        if(pstParam->eFadeMode != BLT_NOFADING)
;;;226        {
;;;227            u32NeededDW++;  /* for fade factor */
;;;228        }
;;;229        if(pstParam->eTranspColEn == GA_EN)
;;;230        {
;;;231            u32NeededDW+=2; /* for Src/Dst Transparency */
;;;232        }
;;;233        u32NeededDW++; /* for command itself */
;;;234    
;;;235        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;236    
;;;237        /* check if there is enough space in command list: */
;;;238        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;239        {
;;;240          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;241          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;242          return;
;;;243        }
;;;244        else 
;;;245        {
;;;246          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;247        }
;;;248    #endif 
;;;249    
;;;250        /* Source Memory Params */
;;;251        pu64Curr[0] = BLT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
0004a0  e3a0c000          MOV      r12,#0
0004a4  e00c600c          AND      r6,r12,r12
0004a8  e5935004          LDR      r5,[r3,#4]
0004ac  e185500c          ORR      r5,r5,r12
0004b0  e1a07005          MOV      r7,r5
0004b4  e3866009          ORR      r6,r6,#9
0004b8  e59f5af4          LDR      r5,|L1.4020|
0004bc  e187700c          ORR      r7,r7,r12
0004c0  e1855006          ORR      r5,r5,r6
0004c4  e5825004          STR      r5,[r2,#4]
0004c8  e5827000          STR      r7,[r2,#0]
;;;252        pu64Curr[1] = BLT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
0004cc  e1d350b0          LDRH     r5,[r3,#0]
0004d0  e7df561f          BFC      r5,#12,#20
0004d4  e3a06000          MOV      r6,#0
0004d8  e0067006          AND      r7,r6,r6
0004dc  e1866005          ORR      r6,r6,r5
0004e0  e6ff5077          UXTH     r5,r7
0004e4  e385c00a          ORR      r12,r5,#0xa
0004e8  e59f5ac4          LDR      r5,|L1.4020|
0004ec  e185500c          ORR      r5,r5,r12
0004f0  e582500c          STR      r5,[r2,#0xc]
0004f4  e5826008          STR      r6,[r2,#8]
;;;253    
;;;254        /* Destination Memory Params */
;;;255        pu64Curr[2] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
0004f8  e3a06000          MOV      r6,#0
0004fc  e006c006          AND      r12,r6,r6
000500  e593500c          LDR      r5,[r3,#0xc]
000504  e1857006          ORR      r7,r5,r6
000508  e1a06007          MOV      r6,r7
00050c  e38c5004          ORR      r5,r12,#4
000510  e59f7a9c          LDR      r7,|L1.4020|
000514  e1855007          ORR      r5,r5,r7
000518  e5825014          STR      r5,[r2,#0x14]
00051c  e5826010          STR      r6,[r2,#0x10]
;;;256        pu64Curr[3] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
000520  e1d350b8          LDRH     r5,[r3,#8]
000524  e7df561f          BFC      r5,#12,#20
000528  e3a0c000          MOV      r12,#0
00052c  e00c600c          AND      r6,r12,r12
000530  e18cc005          ORR      r12,r12,r5
000534  e6ff5076          UXTH     r5,r6
000538  e1a0700c          MOV      r7,r12
00053c  e385c005          ORR      r12,r5,#5
000540  e59f6a6c          LDR      r6,|L1.4020|
000544  e186600c          ORR      r6,r6,r12
000548  e582601c          STR      r6,[r2,#0x1c]
00054c  e5827018          STR      r7,[r2,#0x18]
;;;257    
;;;258        /* Blitting Area Size */
;;;259        pu64Curr[4] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
000550  e1d351b0          LDRH     r5,[r3,#0x10]
000554  e7df561f          BFC      r5,#12,#20
000558  e3a0c000          MOV      r12,#0
00055c  e00cc00c          AND      r12,r12,r12
000560  e1a07005          MOV      r7,r5
000564  e38ce006          ORR      lr,r12,#6
000568  e30f5fff          MOV      r5,#0xffff
00056c  e1a0c007          MOV      r12,r7
000570  e1a0700e          MOV      r7,lr
000574  e1a0e005          MOV      lr,r5
000578  e1a0500c          MOV      r5,r12
00057c  e007c00e          AND      r12,r7,lr
000580  e59f6a2c          LDR      r6,|L1.4020|
000584  e186600c          ORR      r6,r6,r12
000588  e5825020          STR      r5,[r2,#0x20]
00058c  e5826024          STR      r6,[r2,#0x24]
;;;260        pu64Curr[5] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
000590  e1d351b2          LDRH     r5,[r3,#0x12]
000594  e7df561f          BFC      r5,#12,#20
000598  e3a06000          MOV      r6,#0
00059c  e0067006          AND      r7,r6,r6
0005a0  e185c006          ORR      r12,r5,r6
0005a4  e387e007          ORR      lr,r7,#7
0005a8  e30f5fff          MOV      r5,#0xffff
0005ac  e1a0700c          MOV      r7,r12
0005b0  e1a0c00e          MOV      r12,lr
0005b4  e1a0e005          MOV      lr,r5
0005b8  e1a05007          MOV      r5,r7
0005bc  e00cc00e          AND      r12,r12,lr
0005c0  e59f79ec          LDR      r7,|L1.4020|
0005c4  e1855006          ORR      r5,r5,r6
0005c8  e18c6007          ORR      r6,r12,r7
0005cc  e5825028          STR      r5,[r2,#0x28]
0005d0  e582602c          STR      r6,[r2,#0x2c]
;;;261    
;;;262        /* Source Alpha Blending Value */
;;;263        pu64Curr[u8Curr] = BLT_LOAD_SRCALPHA(pstParam->u8SrcAlphaVal);
0005d4  e5d1c00e          LDRB     r12,[r1,#0xe]
0005d8  e3a07000          MOV      r7,#0
0005dc  e0077007          AND      r7,r7,r7
0005e0  e6ff5077          UXTH     r5,r7
0005e4  e385700d          ORR      r7,r5,#0xd
0005e8  e59f69c4          LDR      r6,|L1.4020|
0005ec  e1866007          ORR      r6,r6,r7
0005f0  e0827180          ADD      r7,r2,r0,LSL #3
0005f4  e5876004          STR      r6,[r7,#4]
0005f8  e587c000          STR      r12,[r7,#0]
;;;264        u8Curr++;
0005fc  e2800001          ADD      r0,r0,#1
;;;265    
;;;266        /* Destination Alpha Blending Value */
;;;267        pu64Curr[u8Curr] = BLT_LOAD_DESTALPHA(pstParam->u8DstAlphaVal);
000600  e5d1500f          LDRB     r5,[r1,#0xf]
000604  e3a06000          MOV      r6,#0
000608  e0066006          AND      r6,r6,r6
00060c  e386700f          ORR      r7,r6,#0xf
000610  e59fc99c          LDR      r12,|L1.4020|
000614  e187600c          ORR      r6,r7,r12
000618  e0827180          ADD      r7,r2,r0,LSL #3
00061c  e8870060          STM      r7,{r5,r6}
;;;268        u8Curr++;
000620  e2800001          ADD      r0,r0,#1
;;;269    
;;;270        /*** Operation Specific Params ***/
;;;271    
;;;272        if(pstParam->eTranspColEn == GA_EN)
000624  e5d15002          LDRB     r5,[r1,#2]
000628  e3550001          CMP      r5,#1
00062c  1a00001d          BNE      |L1.1704|
;;;273        {
;;;274            /* Transparency Color Option */
;;;275            pu64Curr[u8Curr] = BLT_LOAD_SRCTRANSPATT(pstParam->u32SrcTransVal);
000630  e5915008          LDR      r5,[r1,#8]
000634  e3c554ff          BIC      r5,r5,#0xff000000
000638  e3a06000          MOV      r6,#0
00063c  e0067006          AND      r7,r6,r6
000640  e1a0c006          MOV      r12,r6
000644  e185500c          ORR      r5,r5,r12
000648  e387700e          ORR      r7,r7,#0xe
00064c  e59f6960          LDR      r6,|L1.4020|
000650  e185500c          ORR      r5,r5,r12
000654  e1866007          ORR      r6,r6,r7
000658  e0827180          ADD      r7,r2,r0,LSL #3
00065c  e8870060          STM      r7,{r5,r6}
;;;276            u8Curr++;
000660  e2805001          ADD      r5,r0,#1
000664  e20500ff          AND      r0,r5,#0xff
;;;277            pu64Curr[u8Curr] = BLT_LOAD_DESTTRANSPATT(pstParam->u16DstTransVal);
000668  e1d150bc          LDRH     r5,[r1,#0xc]
00066c  e3a06000          MOV      r6,#0
000670  e0066006          AND      r6,r6,r6
000674  e6ff7076          UXTH     r7,r6
000678  e1a0c005          MOV      r12,r5
00067c  e387e010          ORR      lr,r7,#0x10
000680  e59f592c          LDR      r5,|L1.4020|
000684  e1a0700c          MOV      r7,r12
000688  e1a0c00e          MOV      r12,lr
00068c  e1a0e005          MOV      lr,r5
000690  e1a05007          MOV      r5,r7
000694  e18c600e          ORR      r6,r12,lr
000698  e0827180          ADD      r7,r2,r0,LSL #3
00069c  e8870060          STM      r7,{r5,r6}
;;;278            u8Curr++;
0006a0  e2805001          ADD      r5,r0,#1
0006a4  e20500ff          AND      r0,r5,#0xff
                  |L1.1704|
;;;279        }
;;;280    
;;;281        /* Fading Factor Setup */
;;;282        if(pstParam->eFadeMode != BLT_NOFADING)
0006a8  e5d15003          LDRB     r5,[r1,#3]
0006ac  e3550000          CMP      r5,#0
0006b0  0a00000f          BEQ      |L1.1780|
;;;283        {
;;;284            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
0006b4  e5d16005          LDRB     r6,[r1,#5]
0006b8  e3a0c000          MOV      r12,#0
0006bc  e00c500c          AND      r5,r12,r12
0006c0  e1a0700c          MOV      r7,r12
0006c4  e1866007          ORR      r6,r6,r7
0006c8  e6ff7075          UXTH     r7,r5
0006cc  e387e014          ORR      lr,r7,#0x14
0006d0  e1a0500c          MOV      r5,r12
0006d4  e59f78d8          LDR      r7,|L1.4020|
0006d8  e1a0c006          MOV      r12,r6
0006dc  e185500c          ORR      r5,r5,r12
0006e0  e18e6007          ORR      r6,lr,r7
0006e4  e0827180          ADD      r7,r2,r0,LSL #3
0006e8  e8870060          STM      r7,{r5,r6}
;;;285            u8Curr++;
0006ec  e2805001          ADD      r5,r0,#1
0006f0  e20500ff          AND      r0,r5,#0xff
                  |L1.1780|
;;;286        }
;;;287        if (pstParam->eRleiFmt == RLEI_OVRFMT_RGB16)
0006f4  e5d15000          LDRB     r5,[r1,#0]
0006f8  e3550000          CMP      r5,#0
0006fc  1a000021          BNE      |L1.1928|
;;;288        {
;;;289            /* Run-Length 16-bit RGB */
;;;290            pu64Curr[u8Curr] = BLT_ORLEI16(pstParam->eDestFmt,
000700  e5d15001          LDRB     r5,[r1,#1]
000704  e3a06000          MOV      r6,#0
000708  e2055001          AND      r5,r5,#1
00070c  e0066006          AND      r6,r6,r6
000710  e1a06206          LSL      r6,r6,#4
000714  e1866e25          ORR      r6,r6,r5,LSR #28
000718  e1a07205          LSL      r7,r5,#4
00071c  e5d15002          LDRB     r5,[r1,#2]
000720  e3a0e000          MOV      lr,#0
000724  e205c001          AND      r12,r5,#1
000728  e00e500e          AND      r5,lr,lr
00072c  e1a05185          LSL      r5,r5,#3
000730  e1855eac          ORR      r5,r5,r12,LSR #29
000734  e187c18c          ORR      r12,r7,r12,LSL #3
000738  e1867005          ORR      r7,r6,r5
00073c  e5d15003          LDRB     r5,[r1,#3]
000740  e2055003          AND      r5,r5,#3
000744  e0955005          ADDS     r5,r5,r5
000748  e0ae600e          ADC      r6,lr,lr
00074c  e18cc005          ORR      r12,r12,r5
000750  e1877006          ORR      r7,r7,r6
000754  e5d15004          LDRB     r5,[r1,#4]
000758  e3a08000          MOV      r8,#0
00075c  e2055001          AND      r5,r5,#1
000760  e0086008          AND      r6,r8,r8
000764  e18cc005          ORR      r12,r12,r5
000768  e1875006          ORR      r5,r7,r6
00076c  e6ff6075          UXTH     r6,r5
000770  e59fe848          LDR      lr,|L1.4032|
000774  e18c5008          ORR      r5,r12,r8
000778  e186600e          ORR      r6,r6,lr
00077c  e0827180          ADD      r7,r2,r0,LSL #3
000780  e8870060          STM      r7,{r5,r6}
000784  ea000024          B        |L1.2076|
                  |L1.1928|
;;;291                                           pstParam->eTranspColEn,
;;;292                                           pstParam->eFadeMode,
;;;293                                           pstParam->eClipWndEn);
;;;294        }
;;;295        else
;;;296        {
;;;297            /* Run-Length 16-bit RGB */
;;;298            pu64Curr[u8Curr] = BLT_ORLEI24(pstParam->eDestFmt,
000788  e5d15001          LDRB     r5,[r1,#1]
00078c  e3a0c000          MOV      r12,#0
000790  e2055001          AND      r5,r5,#1
000794  e00c600c          AND      r6,r12,r12
000798  e1a06206          LSL      r6,r6,#4
00079c  e1866e25          ORR      r6,r6,r5,LSR #28
0007a0  e1a0c205          LSL      r12,r5,#4
0007a4  e5d15002          LDRB     r5,[r1,#2]
0007a8  e3a08000          MOV      r8,#0
0007ac  e2057001          AND      r7,r5,#1
0007b0  e008e008          AND      lr,r8,r8
0007b4  e1a0e18e          LSL      lr,lr,#3
0007b8  e18e5ea7          ORR      r5,lr,r7,LSR #29
0007bc  e18c7187          ORR      r7,r12,r7,LSL #3
0007c0  e1866005          ORR      r6,r6,r5
0007c4  e5d15003          LDRB     r5,[r1,#3]
0007c8  e2055003          AND      r5,r5,#3
0007cc  e0955005          ADDS     r5,r5,r5
0007d0  e0a8c008          ADC      r12,r8,r8
0007d4  e1877005          ORR      r7,r7,r5
0007d8  e186600c          ORR      r6,r6,r12
0007dc  e5d15004          LDRB     r5,[r1,#4]
0007e0  e2055001          AND      r5,r5,#1
0007e4  e008c008          AND      r12,r8,r8
0007e8  e1855007          ORR      r5,r5,r7
0007ec  e186e00c          ORR      lr,r6,r12
0007f0  e30f6fff          MOV      r6,#0xffff
0007f4  e1a0c005          MOV      r12,r5
0007f8  e1a0500e          MOV      r5,lr
0007fc  e1a0e006          MOV      lr,r6
000800  e1a0600c          MOV      r6,r12
000804  e005c00e          AND      r12,r5,lr
000808  e59f77b4          LDR      r7,|L1.4036|
00080c  e1865008          ORR      r5,r6,r8
000810  e18c6007          ORR      r6,r12,r7
000814  e0827180          ADD      r7,r2,r0,LSL #3
000818  e8870060          STM      r7,{r5,r6}
                  |L1.2076|
;;;299                                           pstParam->eTranspColEn,
;;;300                                           pstParam->eFadeMode,
;;;301                                           pstParam->eClipWndEn);
;;;302        }
;;;303        u8Curr++;
00081c  e2805001          ADD      r5,r0,#1
000820  e20500ff          AND      r0,r5,#0xff
;;;304    
;;;305        /* Update List Pointer */
;;;306        pstCmdList->pu64Current = &pu64Curr[u8Curr];
000824  e0825180          ADD      r5,r2,r0,LSL #3
000828  e3046000          MOVW     r6,#0x4000
00082c  e7865004          STR      r5,[r6,r4]
;;;307    
;;;308        pstCmdList->u32UsedDoubleWords = u8Curr;
000830  e3045004          MOV      r5,#0x4004
000834  e7850004          STR      r0,[r5,r4]
;;;309    
;;;310    }
000838  e8bd81f0          POP      {r4-r8,pc}
;;;311    
                          ENDP

                  vBlit_OverwriteRLEI_RGBA PROC
;;;312    /* ....................................................................... */
;;;313    void vBlit_OverwriteRLEI_RGBA(blit_mem_st* pstMem, blit_OvrRleiA_st* pstParam,
00083c  e92d41f0          PUSH     {r4-r8,lr}
;;;314                                  ga_list_st* pstCmdList)
;;;315    {
000840  e1a03000          MOV      r3,r0
000844  e1a04002          MOV      r4,r2
;;;316        uint8_t u8Curr = 6U;
000848  e3a02006          MOV      r2,#6
;;;317        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00084c  e3045000          MOVW     r5,#0x4000
000850  e7950004          LDR      r0,[r5,r4]
;;;318    
;;;319    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;320    
;;;321        uint32_t u32NeededDW ;
;;;322        
;;;323        u32NeededDW = u8Curr;    
;;;324        if(pstParam->eFadeMode != BLT_NOFADING)
;;;325        {
;;;326            u32NeededDW++;  /* for fade factor*/
;;;327        }
;;;328        u32NeededDW++; /* for command itself */
;;;329    
;;;330        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;331    
;;;332        /* check if there is enough space in command list: */
;;;333        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;334        {
;;;335          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;336          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;337          return;
;;;338        }
;;;339        else 
;;;340        {
;;;341          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;342        }
;;;343    #endif 
;;;344    
;;;345        /* Source Memory Params */
;;;346        pu64Curr[0] = BLT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
000854  e3a06000          MOV      r6,#0
000858  e0067006          AND      r7,r6,r6
00085c  e1a0c006          MOV      r12,r6
000860  e5935004          LDR      r5,[r3,#4]
000864  e185500c          ORR      r5,r5,r12
000868  e6ff6077          UXTH     r6,r7
00086c  e3866009          ORR      r6,r6,#9
000870  e59f773c          LDR      r7,|L1.4020|
000874  e1866007          ORR      r6,r6,r7
000878  e8800060          STM      r0,{r5,r6}
;;;347        pu64Curr[1] = BLT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
00087c  e1d350b0          LDRH     r5,[r3,#0]
000880  e7df561f          BFC      r5,#12,#20
000884  e3a0c000          MOV      r12,#0
000888  e00cc00c          AND      r12,r12,r12
00088c  e1a0e005          MOV      lr,r5
000890  e38c700a          ORR      r7,r12,#0xa
000894  e59f5718          LDR      r5,|L1.4020|
000898  e1855007          ORR      r5,r5,r7
00089c  e580500c          STR      r5,[r0,#0xc]
0008a0  e580e008          STR      lr,[r0,#8]
;;;348    
;;;349        /* Destination Memory Params */
;;;350        pu64Curr[2] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
0008a4  e3a07000          MOV      r7,#0
0008a8  e593500c          LDR      r5,[r3,#0xc]
0008ac  e1a06005          MOV      r6,r5
0008b0  e007e007          AND      lr,r7,r7
0008b4  e1a05007          MOV      r5,r7
0008b8  e1a07006          MOV      r7,r6
0008bc  e1855007          ORR      r5,r5,r7
0008c0  e6ff707e          UXTH     r7,lr
0008c4  e387c004          ORR      r12,r7,#4
0008c8  e59f76e4          LDR      r7,|L1.4020|
0008cc  e18c6007          ORR      r6,r12,r7
0008d0  e5805010          STR      r5,[r0,#0x10]
0008d4  e5806014          STR      r6,[r0,#0x14]
;;;351        pu64Curr[3] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
0008d8  e1d350b8          LDRH     r5,[r3,#8]
0008dc  e7df561f          BFC      r5,#12,#20
0008e0  e3a0c000          MOV      r12,#0
0008e4  e1a07005          MOV      r7,r5
0008e8  e00c600c          AND      r6,r12,r12
0008ec  e1a0500c          MOV      r5,r12
0008f0  e1855007          ORR      r5,r5,r7
0008f4  e6ff7076          UXTH     r7,r6
0008f8  e3876005          ORR      r6,r7,#5
0008fc  e1a0700c          MOV      r7,r12
000900  e59fc6ac          LDR      r12,|L1.4020|
000904  e1855007          ORR      r5,r5,r7
000908  e186600c          ORR      r6,r6,r12
00090c  e5805018          STR      r5,[r0,#0x18]
000910  e580601c          STR      r6,[r0,#0x1c]
;;;352    
;;;353        /* Blitting Area Size */
;;;354        pu64Curr[4] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
000914  e1d351b0          LDRH     r5,[r3,#0x10]
000918  e7df561f          BFC      r5,#12,#20
00091c  e3a07000          MOV      r7,#0
000920  e1a06005          MOV      r6,r5
000924  e007c007          AND      r12,r7,r7
000928  e1866007          ORR      r6,r6,r7
00092c  e6ffe07c          UXTH     lr,r12
000930  e1a0c006          MOV      r12,r6
000934  e1a0500c          MOV      r5,r12
000938  e38e7006          ORR      r7,lr,#6
00093c  e59fc670          LDR      r12,|L1.4020|
000940  e187600c          ORR      r6,r7,r12
000944  e5805020          STR      r5,[r0,#0x20]
000948  e5806024          STR      r6,[r0,#0x24]
;;;355        pu64Curr[5] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
00094c  e1d351b2          LDRH     r5,[r3,#0x12]
000950  e7df561f          BFC      r5,#12,#20
000954  e3a07000          MOV      r7,#0
000958  e0076007          AND      r6,r7,r7
00095c  e1855007          ORR      r5,r5,r7
000960  e6ffe076          UXTH     lr,r6
000964  e38e7007          ORR      r7,lr,#7
000968  e187600c          ORR      r6,r7,r12
00096c  e5805028          STR      r5,[r0,#0x28]
000970  e580602c          STR      r6,[r0,#0x2c]
;;;356    
;;;357        /*** Operation Specific Params ***/
;;;358    
;;;359        /* Fading Factor Setup */
;;;360        if(pstParam->eFadeMode != BLT_NOFADING)
000974  e5d15002          LDRB     r5,[r1,#2]
000978  e3550000          CMP      r5,#0
00097c  0a00000e          BEQ      |L1.2492|
;;;361        {
;;;362            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
000980  e5d15004          LDRB     r5,[r1,#4]
000984  e3a0c000          MOV      r12,#0
000988  e00c700c          AND      r7,r12,r12
00098c  e185600c          ORR      r6,r5,r12
000990  e6ff5077          UXTH     r5,r7
000994  e385e014          ORR      lr,r5,#0x14
000998  e1a0500c          MOV      r5,r12
00099c  e59f7610          LDR      r7,|L1.4020|
0009a0  e1a0c006          MOV      r12,r6
0009a4  e185500c          ORR      r5,r5,r12
0009a8  e18e6007          ORR      r6,lr,r7
0009ac  e0807182          ADD      r7,r0,r2,LSL #3
0009b0  e8870060          STM      r7,{r5,r6}
;;;363            u8Curr++;
0009b4  e2825001          ADD      r5,r2,#1
0009b8  e20520ff          AND      r2,r5,#0xff
                  |L1.2492|
;;;364        }
;;;365    
;;;366        if (pstParam->eRleiFmt == RLEI_OVRFMT_RGBA24)
0009bc  e5d15000          LDRB     r5,[r1,#0]
0009c0  e3550002          CMP      r5,#2
0009c4  1a00001b          BNE      |L1.2616|
;;;367        {
;;;368            /* Run-Length 32-bit RGB */
;;;369            pu64Curr[u8Curr] = BLT_ORLEI24A(pstParam->eDestFmt,
0009c8  e5d15001          LDRB     r5,[r1,#1]
0009cc  e3a06000          MOV      r6,#0
0009d0  e2055001          AND      r5,r5,#1
0009d4  e0066006          AND      r6,r6,r6
0009d8  e1a06186          LSL      r6,r6,#3
0009dc  e1866ea5          ORR      r6,r6,r5,LSR #29
0009e0  e1a07185          LSL      r7,r5,#3
0009e4  e5d15002          LDRB     r5,[r1,#2]
0009e8  e3a0c000          MOV      r12,#0
0009ec  e205e003          AND      lr,r5,#3
0009f0  e00c500c          AND      r5,r12,r12
0009f4  e09ec00e          ADDS     r12,lr,lr
0009f8  e0a55005          ADC      r5,r5,r5
0009fc  e18cc007          ORR      r12,r12,r7
000a00  e1866005          ORR      r6,r6,r5
000a04  e5d15003          LDRB     r5,[r1,#3]
000a08  e3a0e000          MOV      lr,#0
000a0c  e2055001          AND      r5,r5,#1
000a10  e00e700e          AND      r7,lr,lr
000a14  e18cc005          ORR      r12,r12,r5
000a18  e1866007          ORR      r6,r6,r7
000a1c  e6ff5076          UXTH     r5,r6
000a20  e59f65a0          LDR      r6,|L1.4040|
000a24  e1855006          ORR      r5,r5,r6
000a28  e0806182          ADD      r6,r0,r2,LSL #3
000a2c  e5865004          STR      r5,[r6,#4]
000a30  e586c000          STR      r12,[r6,#0]
000a34  ea00001b          B        |L1.2728|
                  |L1.2616|
;;;370                                            pstParam->eFadeMode,
;;;371                                            pstParam->eClipWndEn);
;;;372        }
;;;373        else
;;;374        {
;;;375            /* Run-Length 32-bit RGB */
;;;376            pu64Curr[u8Curr] = BLT_ORLEI32(pstParam->eDestFmt,
000a38  e5d15001          LDRB     r5,[r1,#1]
000a3c  e3a07000          MOV      r7,#0
000a40  e2055001          AND      r5,r5,#1
000a44  e0076007          AND      r6,r7,r7
000a48  e1a06186          LSL      r6,r6,#3
000a4c  e1866ea5          ORR      r6,r6,r5,LSR #29
000a50  e1a07185          LSL      r7,r5,#3
000a54  e5d15002          LDRB     r5,[r1,#2]
000a58  e3a0c000          MOV      r12,#0
000a5c  e2055003          AND      r5,r5,#3
000a60  e00cc00c          AND      r12,r12,r12
000a64  e0955005          ADDS     r5,r5,r5
000a68  e0ace00c          ADC      lr,r12,r12
000a6c  e187c005          ORR      r12,r7,r5
000a70  e186600e          ORR      r6,r6,lr
000a74  e5d15003          LDRB     r5,[r1,#3]
000a78  e3a08000          MOV      r8,#0
000a7c  e2055001          AND      r5,r5,#1
000a80  e0087008          AND      r7,r8,r8
000a84  e18cc005          ORR      r12,r12,r5
000a88  e1865007          ORR      r5,r6,r7
000a8c  e1a0600c          MOV      r6,r12
000a90  e6ffc075          UXTH     r12,r5
000a94  e59fe530          LDR      lr,|L1.4044|
000a98  e1865008          ORR      r5,r6,r8
000a9c  e18c600e          ORR      r6,r12,lr
000aa0  e0807182          ADD      r7,r0,r2,LSL #3
000aa4  e8870060          STM      r7,{r5,r6}
                  |L1.2728|
;;;377                                           pstParam->eFadeMode,
;;;378                                           pstParam->eClipWndEn);
;;;379        }
;;;380        u8Curr++;
000aa8  e2825001          ADD      r5,r2,#1
000aac  e20520ff          AND      r2,r5,#0xff
;;;381    
;;;382        /* Update List Pointer */
;;;383        pstCmdList->pu64Current = &pu64Curr[u8Curr];
000ab0  e0805182          ADD      r5,r0,r2,LSL #3
000ab4  e3046000          MOVW     r6,#0x4000
000ab8  e7865004          STR      r5,[r6,r4]
;;;384    
;;;385        pstCmdList->u32UsedDoubleWords = u8Curr;
000abc  e3045004          MOV      r5,#0x4004
000ac0  e7852004          STR      r2,[r5,r4]
;;;386    
;;;387    }
000ac4  e8bd81f0          POP      {r4-r8,pc}
;;;388    
                          ENDP

                  vBlit_OverwriteFillRGB PROC
;;;389    /* ....................................................................... */
;;;390    void vBlit_OverwriteFillRGB(blit_mem_st* pstMem, blit_OvrRgbP_st* pstParam,
000ac8  e92d41f0          PUSH     {r4-r8,lr}
;;;391                                ga_list_st* pstCmdList)
;;;392    {
000acc  e1a03000          MOV      r3,r0
000ad0  e1a04002          MOV      r4,r2
;;;393        uint8_t u8Curr = 4U;
000ad4  e3a00004          MOV      r0,#4
;;;394        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000ad8  e3045000          MOVW     r5,#0x4000
000adc  e7952004          LDR      r2,[r5,r4]
;;;395    
;;;396    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;397    
;;;398        uint32_t u32NeededDW ;
;;;399        
;;;400        u32NeededDW = u8Curr;
;;;401        
;;;402        if(pstParam->eFadeMode != BLT_NOFADING)
;;;403        {
;;;404            u32NeededDW++;  /* for fade factor*/
;;;405        }
;;;406        u32NeededDW+=2; /* for color and command itself */
;;;407    
;;;408        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;409    
;;;410        /* check if there is enough space in command list: */
;;;411        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;412        {
;;;413          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;414          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;415          return;
;;;416        }
;;;417        else 
;;;418        {
;;;419          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;420        }
;;;421    #endif 
;;;422    
;;;423        /* Destination Memory Params */
;;;424        pu64Curr[0] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
000ae0  e3a06000          MOV      r6,#0
000ae4  e006c006          AND      r12,r6,r6
000ae8  e1a07006          MOV      r7,r6
000aec  e593500c          LDR      r5,[r3,#0xc]
000af0  e1855007          ORR      r5,r5,r7
000af4  e38c7004          ORR      r7,r12,#4
000af8  e59fc4b4          LDR      r12,|L1.4020|
000afc  e187600c          ORR      r6,r7,r12
000b00  e8820060          STM      r2,{r5,r6}
;;;425        pu64Curr[1] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
000b04  e1d350b8          LDRH     r5,[r3,#8]
000b08  e7df561f          BFC      r5,#12,#20
000b0c  e3a0c000          MOV      r12,#0
000b10  e00c600c          AND      r6,r12,r12
000b14  e1a0700c          MOV      r7,r12
000b18  e1855007          ORR      r5,r5,r7
000b1c  e6ffc076          UXTH     r12,r6
000b20  e38c6005          ORR      r6,r12,#5
000b24  e59fc488          LDR      r12,|L1.4020|
000b28  e186600c          ORR      r6,r6,r12
000b2c  e5825008          STR      r5,[r2,#8]
000b30  e582600c          STR      r6,[r2,#0xc]
;;;426    
;;;427        /* Blitting Area Size */
;;;428        pu64Curr[2] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
000b34  e1d351b0          LDRH     r5,[r3,#0x10]
000b38  e7df561f          BFC      r5,#12,#20
000b3c  e3a0c000          MOV      r12,#0
000b40  e00c600c          AND      r6,r12,r12
000b44  e1a0700c          MOV      r7,r12
000b48  e1877005          ORR      r7,r7,r5
000b4c  e6ffe076          UXTH     lr,r6
000b50  e38ec006          ORR      r12,lr,#6
000b54  e59f5458          LDR      r5,|L1.4020|
000b58  e185500c          ORR      r5,r5,r12
000b5c  e5825014          STR      r5,[r2,#0x14]
000b60  e5827010          STR      r7,[r2,#0x10]
;;;429        pu64Curr[3] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
000b64  e1d351b2          LDRH     r5,[r3,#0x12]
000b68  e7df561f          BFC      r5,#12,#20
000b6c  e3a07000          MOV      r7,#0
000b70  e0077007          AND      r7,r7,r7
000b74  e6ffc077          UXTH     r12,r7
000b78  e38ce007          ORR      lr,r12,#7
000b7c  e59f7430          LDR      r7,|L1.4020|
000b80  e1a0c005          MOV      r12,r5
000b84  e18e5007          ORR      r5,lr,r7
000b88  e582501c          STR      r5,[r2,#0x1c]
000b8c  e582c018          STR      r12,[r2,#0x18]
;;;430    
;;;431        /*** Operation Specific Params ***/
;;;432    
;;;433        /* Fading Factor Setup */
;;;434        if(pstParam->eFadeMode != BLT_NOFADING)
000b90  e5d15005          LDRB     r5,[r1,#5]
000b94  e3550000          CMP      r5,#0
000b98  0a00000a          BEQ      |L1.3016|
;;;435        {
;;;436            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
000b9c  e5d15007          LDRB     r5,[r1,#7]
000ba0  e3a0c000          MOV      r12,#0
000ba4  e00cc00c          AND      r12,r12,r12
000ba8  e6ff607c          UXTH     r6,r12
000bac  e3867014          ORR      r7,r6,#0x14
000bb0  e59f63fc          LDR      r6,|L1.4020|
000bb4  e1866007          ORR      r6,r6,r7
000bb8  e0827180          ADD      r7,r2,r0,LSL #3
000bbc  e8870060          STM      r7,{r5,r6}
;;;437            u8Curr++;
000bc0  e2805001          ADD      r5,r0,#1
000bc4  e20500ff          AND      r0,r5,#0xff
                  |L1.3016|
;;;438        }
;;;439    
;;;440        /* Source Format Selection */
;;;441        if(pstParam->eSrcFmt == GA_RGB16)
000bc8  e5d15004          LDRB     r5,[r1,#4]
000bcc  e3550000          CMP      r5,#0
000bd0  1a00001f          BNE      |L1.3156|
;;;442        {
;;;443            pu64Curr[u8Curr] = BLT_LOAD_FILLRGB(pstParam->u32Color);
000bd4  e1d150b0          LDRH     r5,[r1,#0]
000bd8  e6ff5075          UXTH     r5,r5
000bdc  e3a07000          MOV      r7,#0
000be0  e0077007          AND      r7,r7,r7
000be4  e6ff6077          UXTH     r6,r7
000be8  e386c012          ORR      r12,r6,#0x12
000bec  e59f63c0          LDR      r6,|L1.4020|
000bf0  e186600c          ORR      r6,r6,r12
000bf4  e0827180          ADD      r7,r2,r0,LSL #3
000bf8  e8870060          STM      r7,{r5,r6}
;;;444            u8Curr++;
000bfc  e2805001          ADD      r5,r0,#1
000c00  e20500ff          AND      r0,r5,#0xff
;;;445            pu64Curr[u8Curr] = BLT_OPRST_RGB16(pstParam->eFadeMode, pstParam->eClipWndEn);
000c04  e5d15005          LDRB     r5,[r1,#5]
000c08  e3a06000          MOV      r6,#0
000c0c  e2055003          AND      r5,r5,#3
000c10  e0066006          AND      r6,r6,r6
000c14  e0957005          ADDS     r7,r5,r5
000c18  e0a66006          ADC      r6,r6,r6
000c1c  e5d15006          LDRB     r5,[r1,#6]
000c20  e3a0e000          MOV      lr,#0
000c24  e2055001          AND      r5,r5,#1
000c28  e00ec00e          AND      r12,lr,lr
000c2c  e1877005          ORR      r7,r7,r5
000c30  e18cc006          ORR      r12,r12,r6
000c34  e1a05007          MOV      r5,r7
000c38  e6ff607c          UXTH     r6,r12
000c3c  e59f738c          LDR      r7,|L1.4048|
000c40  e185500e          ORR      r5,r5,lr
000c44  e1866007          ORR      r6,r6,r7
000c48  e0827180          ADD      r7,r2,r0,LSL #3
000c4c  e8870060          STM      r7,{r5,r6}
000c50  ea000020          B        |L1.3288|
                  |L1.3156|
;;;446        }
;;;447        else
;;;448        {
;;;449            pu64Curr[u8Curr] = BLT_LOAD_FILLRGBA(pstParam->u32Color);
000c54  e3a07000          MOV      r7,#0
000c58  e0076007          AND      r6,r7,r7
000c5c  e1a0c007          MOV      r12,r7
000c60  e5915000          LDR      r5,[r1,#0]
000c64  e18cc005          ORR      r12,r12,r5
000c68  e6ff5076          UXTH     r5,r6
000c6c  e1a0600c          MOV      r6,r12
000c70  e385c011          ORR      r12,r5,#0x11
000c74  e59fe338          LDR      lr,|L1.4020|
000c78  e1865007          ORR      r5,r6,r7
000c7c  e18c600e          ORR      r6,r12,lr
000c80  e0827180          ADD      r7,r2,r0,LSL #3
000c84  e8870060          STM      r7,{r5,r6}
;;;450            u8Curr++;
000c88  e2805001          ADD      r5,r0,#1
000c8c  e20500ff          AND      r0,r5,#0xff
;;;451            pu64Curr[u8Curr] = BLT_OPRST_RGBA32(pstParam->eFadeMode, pstParam->eClipWndEn);
000c90  e5d15005          LDRB     r5,[r1,#5]
000c94  e3a07000          MOV      r7,#0
000c98  e2055003          AND      r5,r5,#3
000c9c  e0076007          AND      r6,r7,r7
000ca0  e0957005          ADDS     r7,r5,r5
000ca4  e0a66006          ADC      r6,r6,r6
000ca8  e5d15006          LDRB     r5,[r1,#6]
000cac  e3a0e000          MOV      lr,#0
000cb0  e2055001          AND      r5,r5,#1
000cb4  e00ee00e          AND      lr,lr,lr
000cb8  e187c005          ORR      r12,r7,r5
000cbc  e186600e          ORR      r6,r6,lr
000cc0  e6ff5076          UXTH     r5,r6
000cc4  e59fe308          LDR      lr,|L1.4052|
000cc8  e185500e          ORR      r5,r5,lr
000ccc  e0827180          ADD      r7,r2,r0,LSL #3
000cd0  e5875004          STR      r5,[r7,#4]
000cd4  e587c000          STR      r12,[r7,#0]
                  |L1.3288|
;;;452        }
;;;453    
;;;454        u8Curr++;
000cd8  e2805001          ADD      r5,r0,#1
000cdc  e20500ff          AND      r0,r5,#0xff
;;;455    
;;;456        /* Update List Pointer */
;;;457        pstCmdList->pu64Current = &pu64Curr[u8Curr];
000ce0  e0825180          ADD      r5,r2,r0,LSL #3
000ce4  e3046000          MOVW     r6,#0x4000
000ce8  e7865004          STR      r5,[r6,r4]
;;;458    
;;;459        pstCmdList->u32UsedDoubleWords = u8Curr;
000cec  e3045004          MOV      r5,#0x4004
000cf0  e7850004          STR      r0,[r5,r4]
;;;460    
;;;461    }
000cf4  e8bd81f0          POP      {r4-r8,pc}
;;;462    
                          ENDP

                  i32Blit_BlendRGB PROC
;;;463    /* ....................................................................... */
;;;464    int32_t i32Blit_BlendRGB(blit_mem_st* pstMem, blit_BlndRgb_st* pstParam,
000cf8  e92d4ff0          PUSH     {r4-r11,lr}
;;;465                             ga_list_st* pstCmdList)
;;;466    {
000cfc  e1a06000          MOV      r6,r0
000d00  e1a07002          MOV      r7,r2
;;;467        int32_t i32Res = C_FAILED;
000d04  e3e00000          MVN      r0,#0
;;;468        uint8_t u8Curr = 6U;
000d08  e3a02006          MOV      r2,#6
;;;469        uint64_t* pu64Curr;
;;;470        ga_en_e         eTranspColEn_valid;
;;;471        blt_fadeMode_e  eFadeMode_valid;
;;;472    
;;;473        if(pstParam->eRastOpEn == GA_EN)
000d0c  e5d1c006          LDRB     r12,[r1,#6]
000d10  e35c0001          CMP      r12,#1
000d14  1a000002          BNE      |L1.3364|
;;;474        {
;;;475            /* Raster option requires disabled Fading and Transp. Col. Opt. 
;;;476             * If it is enabled Transparency Color and Fade mode will be
;;;477             * assuemed as disbaled */
;;;478            eTranspColEn_valid = GA_DIS;
000d18  e3a04000          MOV      r4,#0
;;;479            eFadeMode_valid    = BLT_NOFADING;
000d1c  e3a05000          MOV      r5,#0
000d20  ea000001          B        |L1.3372|
                  |L1.3364|
;;;480        }
;;;481        else
;;;482        {
;;;483            eTranspColEn_valid = pstParam->eTranspColEn;
000d24  e5d14007          LDRB     r4,[r1,#7]
;;;484            eFadeMode_valid    = pstParam->eFadeMode;
000d28  e5d15008          LDRB     r5,[r1,#8]
                  |L1.3372|
;;;485        }
;;;486    
;;;487    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;488    
;;;489        uint32_t u32NeededDW ;
;;;490        
;;;491        u32NeededDW = u8Curr;
;;;492        u32NeededDW += 2; /* 2 for Src/Dst Alpha */
;;;493        if(pstParam->eRastOpEn == GA_EN)
;;;494        {
;;;495            u32NeededDW++; /* for raster value */
;;;496        }
;;;497        else
;;;498        {
;;;499            if(eFadeMode_valid != BLT_NOFADING)
;;;500            {
;;;501                u32NeededDW++;  /* for fade factor*/
;;;502            }
;;;503            if(eTranspColEn_valid == GA_EN)
;;;504            {
;;;505                u32NeededDW+=2; /* for Src/Dst Transparency */
;;;506            }
;;;507        }
;;;508        u32NeededDW++; /* for command itself */
;;;509    
;;;510        if(pstParam->eRastOpEn == GA_EN && pstParam->eSrcFmt != pstParam->eDestFmt)    
;;;511        {
;;;512          /* in this case no command will be writen : */
;;;513          u32NeededDW = u8Curr;
;;;514        }
;;;515    
;;;516        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;517    
;;;518        /* check if there is enough space in command list: */
;;;519        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;520        {
;;;521          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;522          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;523          return C_FAILED;
;;;524        }
;;;525        else 
;;;526        {
;;;527          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;528        }
;;;529    #endif 
;;;530    
;;;531        /* Check Whether Raster Operation is enabled */
;;;532        if(pstParam->eRastOpEn == GA_EN)
000d2c  e5d1c006          LDRB     r12,[r1,#6]
000d30  e35c0001          CMP      r12,#1
000d34  1a000005          BNE      |L1.3408|
;;;533        {
;;;534            /* Source and Destination must have the same Format */
;;;535            if(pstParam->eSrcFmt == pstParam->eDestFmt)
000d38  e5d1c000          LDRB     r12,[r1,#0]
000d3c  e5d1e001          LDRB     lr,[r1,#1]
000d40  e15c000e          CMP      r12,lr
000d44  1a000002          BNE      |L1.3412|
;;;536            {
;;;537                i32Res = C_SUCCESS;
000d48  e3a00000          MOV      r0,#0
000d4c  ea000000          B        |L1.3412|
                  |L1.3408|
;;;538            }
;;;539        }
;;;540        else
;;;541        {
;;;542            i32Res = C_SUCCESS;
000d50  e3a00000          MOV      r0,#0
                  |L1.3412|
;;;543        }
;;;544    
;;;545        /* Check if all conditions are met */
;;;546        if(i32Res == C_SUCCESS)
000d54  e3500000          CMP      r0,#0
000d58  1a00016e          BNE      |L1.4888|
;;;547        {
;;;548            /* Update Pointer */
;;;549            pu64Curr = (uint64_t*) pstCmdList->pu64Current;
000d5c  e304c000          MOVW     r12,#0x4000
000d60  e79c3007          LDR      r3,[r12,r7]
;;;550    
;;;551            /* Source Memory Params */
;;;552            pu64Curr[0] = BLT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
000d64  e3a08000          MOV      r8,#0
000d68  e008e008          AND      lr,r8,r8
000d6c  e596c004          LDR      r12,[r6,#4]
000d70  e18cc008          ORR      r12,r12,r8
000d74  e6ff807e          UXTH     r8,lr
000d78  e3889009          ORR      r9,r8,#9
000d7c  e59fe230          LDR      lr,|L1.4020|
000d80  e18ee009          ORR      lr,lr,r9
000d84  e8835000          STM      r3,{r12,lr}
;;;553            pu64Curr[1] = BLT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
000d88  e1d6c0b0          LDRH     r12,[r6,#0]
000d8c  e7dfc61f          BFC      r12,#12,#20
000d90  e3a0e000          MOV      lr,#0
000d94  e00ea00e          AND      r10,lr,lr
000d98  e3a0800a          MOV      r8,#0xa
000d9c  e1a0900c          MOV      r9,r12
000da0  e1a0c00a          MOV      r12,r10
000da4  e1a0a008          MOV      r10,r8
000da8  e189800e          ORR      r8,r9,lr
000dac  e18aa00c          ORR      r10,r10,r12
000db0  e1a0c008          MOV      r12,r8
000db4  e6ff907a          UXTH     r9,r10
000db8  e59f81f4          LDR      r8,|L1.4020|
000dbc  e18cc00e          ORR      r12,r12,lr
000dc0  e189e008          ORR      lr,r9,r8
000dc4  e583c008          STR      r12,[r3,#8]
000dc8  e583e00c          STR      lr,[r3,#0xc]
;;;554    
;;;555            /* Destination Memory Params */
;;;556            pu64Curr[2] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
000dcc  e3a08000          MOV      r8,#0
000dd0  e0088008          AND      r8,r8,r8
000dd4  e3889004          ORR      r9,r8,#4
000dd8  e596c00c          LDR      r12,[r6,#0xc]
000ddc  e59f81d0          LDR      r8,|L1.4020|
000de0  e189e008          ORR      lr,r9,r8
000de4  e583c010          STR      r12,[r3,#0x10]
000de8  e583e014          STR      lr,[r3,#0x14]
;;;557            pu64Curr[3] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
000dec  e1d6c0b8          LDRH     r12,[r6,#8]
000df0  e7dfc61f          BFC      r12,#12,#20
000df4  e3a08000          MOV      r8,#0
000df8  e008a008          AND      r10,r8,r8
000dfc  e1a0e008          MOV      lr,r8
000e00  e1a0900c          MOV      r9,r12
000e04  e18ee009          ORR      lr,lr,r9
000e08  e6ffc07a          UXTH     r12,r10
000e0c  e38c9005          ORR      r9,r12,#5
000e10  e59fc19c          LDR      r12,|L1.4020|
000e14  e18ee008          ORR      lr,lr,r8
000e18  e18cc009          ORR      r12,r12,r9
000e1c  e583c01c          STR      r12,[r3,#0x1c]
000e20  e583e018          STR      lr,[r3,#0x18]
;;;558    
;;;559            /* Blitting Area Size */
;;;560            pu64Curr[4] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
000e24  e1d6c1b0          LDRH     r12,[r6,#0x10]
000e28  e7dfc61f          BFC      r12,#12,#20
000e2c  e3a09000          MOV      r9,#0
000e30  e0099009          AND      r9,r9,r9
000e34  e389a006          ORR      r10,r9,#6
000e38  e30f8fff          MOV      r8,#0xffff
000e3c  e1a0900c          MOV      r9,r12
000e40  e1a0c00a          MOV      r12,r10
000e44  e1a0a008          MOV      r10,r8
000e48  e1a08009          MOV      r8,r9
000e4c  e00c900a          AND      r9,r12,r10
000e50  e59fc15c          LDR      r12,|L1.4020|
000e54  e18cc009          ORR      r12,r12,r9
000e58  e5838020          STR      r8,[r3,#0x20]
000e5c  e583c024          STR      r12,[r3,#0x24]
;;;561            pu64Curr[5] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
000e60  e1d6c1b2          LDRH     r12,[r6,#0x12]
000e64  e7dfc61f          BFC      r12,#12,#20
000e68  e3a09000          MOV      r9,#0
000e6c  e1a0800c          MOV      r8,r12
000e70  e009a009          AND      r10,r9,r9
000e74  e1a0c009          MOV      r12,r9
000e78  e1a09008          MOV      r9,r8
000e7c  e18cc009          ORR      r12,r12,r9
000e80  e6ffe07a          UXTH     lr,r10
000e84  e38e9007          ORR      r9,lr,#7
000e88  e59fe124          LDR      lr,|L1.4020|
000e8c  e18ee009          ORR      lr,lr,r9
000e90  e583c028          STR      r12,[r3,#0x28]
000e94  e583e02c          STR      lr,[r3,#0x2c]
;;;562    
;;;563            /*** Operation Specific Params ***/
;;;564    
;;;565            /* Raster Parameter Setup */
;;;566            if(pstParam->eRastOpEn == GA_EN)
000e98  e5d1c006          LDRB     r12,[r1,#6]
000e9c  e35c0001          CMP      r12,#1
000ea0  1a000017          BNE      |L1.3844|
;;;567            {
;;;568                pu64Curr[u8Curr] = BLT_LOAD_RASTOP(pstParam->eRastOpMode, pstParam->eRastOpValue);
000ea4  e5d1c014          LDRB     r12,[r1,#0x14]
000ea8  e3a0e000          MOV      lr,#0
000eac  e20cc007          AND      r12,r12,#7
000eb0  e00ee00e          AND      lr,lr,lr
000eb4  e1a0e80e          LSL      lr,lr,#16
000eb8  e18ee82c          ORR      lr,lr,r12,LSR #16
000ebc  e1a0880c          LSL      r8,r12,#16
000ec0  e5d1c015          LDRB     r12,[r1,#0x15]
000ec4  e3a09000          MOV      r9,#0
000ec8  e20cc00f          AND      r12,r12,#0xf
000ecc  e0099009          AND      r9,r9,r9
000ed0  e18cc008          ORR      r12,r12,r8
000ed4  e189900e          ORR      r9,r9,lr
000ed8  e3a0e000          MOV      lr,#0
000edc  e18ee00c          ORR      lr,lr,r12
000ee0  e3a0c015          MOV      r12,#0x15
000ee4  e1a0900c          MOV      r9,r12
000ee8  e59f80c4          LDR      r8,|L1.4020|
000eec  e1a0c00e          MOV      r12,lr
000ef0  e189e008          ORR      lr,r9,r8
000ef4  e0838182          ADD      r8,r3,r2,LSL #3
000ef8  e8885000          STM      r8,{r12,lr}
;;;569                u8Curr++;
000efc  e282c001          ADD      r12,r2,#1
000f00  e20c20ff          AND      r2,r12,#0xff
                  |L1.3844|
;;;570            }
;;;571            /* Fading Parameter Setup */
;;;572            if(eFadeMode_valid != BLT_NOFADING)
000f04  e3550000          CMP      r5,#0
000f08  0a00000d          BEQ      |L1.3908|
;;;573            {
;;;574                pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
000f0c  e5d1c00b          LDRB     r12,[r1,#0xb]
000f10  e3a0e000          MOV      lr,#0
000f14  e00e900e          AND      r9,lr,lr
000f18  e18ee00c          ORR      lr,lr,r12
000f1c  e6ffc079          UXTH     r12,r9
000f20  e1a0800e          MOV      r8,lr
000f24  e38ca014          ORR      r10,r12,#0x14
000f28  e59f9084          LDR      r9,|L1.4020|
000f2c  e1a0c008          MOV      r12,r8
000f30  e18ae009          ORR      lr,r10,r9
000f34  e0838182          ADD      r8,r3,r2,LSL #3
000f38  e8885000          STM      r8,{r12,lr}
;;;575                u8Curr++;
000f3c  e282c001          ADD      r12,r2,#1
000f40  e20c20ff          AND      r2,r12,#0xff
                  |L1.3908|
;;;576            }
;;;577    
;;;578            /* Source Alpha Blending Value */
;;;579            pu64Curr[u8Curr] = BLT_LOAD_SRCALPHA(pstParam->u8SrcAlphaVal);
000f44  e5d1c012          LDRB     r12,[r1,#0x12]
000f48  e3a08000          MOV      r8,#0
000f4c  e0089008          AND      r9,r8,r8
000f50  e18cc008          ORR      r12,r12,r8
000f54  e6ffe079          UXTH     lr,r9
000f58  e1a0800c          MOV      r8,r12
000f5c  e38ec00d          ORR      r12,lr,#0xd
000f60  e59fe04c          LDR      lr,|L1.4020|
000f64  e18cc00e          ORR      r12,r12,lr
000f68  e083e182          ADD      lr,r3,r2,LSL #3
000f6c  e88e1100          STM      lr,{r8,r12}
;;;580            u8Curr++;
000f70  e282c001          ADD      r12,r2,#1
000f74  e20c20ff          AND      r2,r12,#0xff
;;;581    
;;;582            /* Destination Alpha Blending Value */
;;;583            pu64Curr[u8Curr] = BLT_LOAD_DESTALPHA(pstParam->u8DstAlphaVal);
000f78  e5d1c013          LDRB     r12,[r1,#0x13]
000f7c  e3a0a000          MOV      r10,#0
000f80  e00ae00a          AND      lr,r10,r10
000f84  e18cc00a          ORR      r12,r12,r10
000f88  e6ff907e          UXTH     r9,lr
000f8c  e389900f          ORR      r9,r9,#0xf
000f90  e59fe01c          LDR      lr,|L1.4020|
000f94  e18cc00a          ORR      r12,r12,r10
000f98  e18ee009          ORR      lr,lr,r9
000f9c  e0838182          ADD      r8,r3,r2,LSL #3
000fa0  ea00000c          B        |L1.4056|
                  |L1.4004|
                          DCD      au8LLDD_GA_BLIT_C_REVISION
                  |L1.4008|
                          DCD      au8LLDD_GA_BLIT_C_TAG
                  |L1.4012|
                          DCD      au8LLDD_GA_BLIT_H_REVISION
                  |L1.4016|
                          DCD      au8LLDD_GA_BLIT_H_TAG
                  |L1.4020|
                          DCD      0x01010000
                  |L1.4024|
                          DCD      0x11020000
                  |L1.4028|
                          DCD      0x11040000
                  |L1.4032|
                          DCD      0x110a0000
                  |L1.4036|
                          DCD      0x11060000
                  |L1.4040|
                          DCD      0x110e0000
                  |L1.4044|
                          DCD      0x110c0000
                  |L1.4048|
                          DCD      0x11120000
                  |L1.4052|
                          DCD      0x11140000
                  |L1.4056|
000fd8  e8885000          STM      r8,{r12,lr}
;;;584            u8Curr++;
000fdc  e282c001          ADD      r12,r2,#1
000fe0  e20c20ff          AND      r2,r12,#0xff
;;;585    
;;;586            /* Transparency Parameters */
;;;587            if(eTranspColEn_valid == GA_EN)
000fe4  e3540001          CMP      r4,#1
000fe8  1a000017          BNE      |L1.4172|
;;;588            {
;;;589                /* Transparency Color Option */
;;;590                pu64Curr[u8Curr] = BLT_LOAD_SRCTRANSPATT(pstParam->u32SrcTransVal);
000fec  e591c00c          LDR      r12,[r1,#0xc]
000ff0  e3ccc4ff          BIC      r12,r12,#0xff000000
000ff4  e3a09000          MOV      r9,#0
000ff8  e0099009          AND      r9,r9,r9
000ffc  e389900e          ORR      r9,r9,#0xe
001000  e51fe054          LDR      lr,|L1.4020|
001004  e1a0800c          MOV      r8,r12
001008  e189c00e          ORR      r12,r9,lr
00100c  e083e182          ADD      lr,r3,r2,LSL #3
001010  e88e1100          STM      lr,{r8,r12}
;;;591                u8Curr++;
001014  e282c001          ADD      r12,r2,#1
001018  e20c20ff          AND      r2,r12,#0xff
;;;592                pu64Curr[u8Curr] = BLT_LOAD_DESTTRANSPATT(pstParam->u16DstTransVal);
00101c  e1d1c1b0          LDRH     r12,[r1,#0x10]
001020  e3a09000          MOV      r9,#0
001024  e0099009          AND      r9,r9,r9
001028  e1a0e00c          MOV      lr,r12
00102c  e3899010          ORR      r9,r9,#0x10
001030  e51fc084          LDR      r12,|L1.4020|
001034  e18cc009          ORR      r12,r12,r9
001038  e0838182          ADD      r8,r3,r2,LSL #3
00103c  e588c004          STR      r12,[r8,#4]
001040  e588e000          STR      lr,[r8,#0]
;;;593                u8Curr++;
001044  e282c001          ADD      r12,r2,#1
001048  e20c20ff          AND      r2,r12,#0xff
                  |L1.4172|
;;;594            }
;;;595    
;;;596            /* Source Selection */
;;;597            if(pstParam->eSrcFmt == GA_RGB16)
00104c  e5d1c000          LDRB     r12,[r1,#0]
001050  e35c0000          CMP      r12,#0
001054  1a000058          BNE      |L1.4540|
;;;598            {
;;;599                /* Blit Blend. 16-bit RGB */
;;;600                pu64Curr[u8Curr] = BLT_BRGB16(pstParam->eRedChPrtEn,
001058  e5d1c002          LDRB     r12,[r1,#2]
00105c  e3a08000          MOV      r8,#0
001060  e20cc001          AND      r12,r12,#1
001064  e008e008          AND      lr,r8,r8
001068  e1a0e50e          LSL      lr,lr,#10
00106c  e18eeb2c          ORR      lr,lr,r12,LSR #22
001070  e1a0850c          LSL      r8,r12,#10
001074  e5d1c003          LDRB     r12,[r1,#3]
001078  e3a09000          MOV      r9,#0
00107c  e20cc001          AND      r12,r12,#1
001080  e0099009          AND      r9,r9,r9
001084  e1a09489          LSL      r9,r9,#9
001088  e1899bac          ORR      r9,r9,r12,LSR #23
00108c  e188848c          ORR      r8,r8,r12,LSL #9
001090  e18ee009          ORR      lr,lr,r9
001094  e5d1c004          LDRB     r12,[r1,#4]
001098  e3a09000          MOV      r9,#0
00109c  e20cc001          AND      r12,r12,#1
0010a0  e009a009          AND      r10,r9,r9
0010a4  e1a0900c          MOV      r9,r12
0010a8  e1a0a40a          LSL      r10,r10,#8
0010ac  e18acc2c          ORR      r12,r10,r12,LSR #24
0010b0  e1888409          ORR      r8,r8,r9,LSL #8
0010b4  e18ee00c          ORR      lr,lr,r12
0010b8  e5d1c005          LDRB     r12,[r1,#5]
0010bc  e3a09000          MOV      r9,#0
0010c0  e20ca001          AND      r10,r12,#1
0010c4  e0099009          AND      r9,r9,r9
0010c8  e1a09389          LSL      r9,r9,#7
0010cc  e189ccaa          ORR      r12,r9,r10,LSR #25
0010d0  e188838a          ORR      r8,r8,r10,LSL #7
0010d4  e18ee00c          ORR      lr,lr,r12
0010d8  e5d1c006          LDRB     r12,[r1,#6]
0010dc  e3a09000          MOV      r9,#0
0010e0  e20cc001          AND      r12,r12,#1
0010e4  e009a009          AND      r10,r9,r9
0010e8  e1a0900c          MOV      r9,r12
0010ec  e1a0a30a          LSL      r10,r10,#6
0010f0  e18acd2c          ORR      r12,r10,r12,LSR #26
0010f4  e1888309          ORR      r8,r8,r9,LSL #6
0010f8  e18ee00c          ORR      lr,lr,r12
0010fc  e5d1c001          LDRB     r12,[r1,#1]
001100  e3a09000          MOV      r9,#0
001104  e20cc001          AND      r12,r12,#1
001108  e009a009          AND      r10,r9,r9
00110c  e1a0900c          MOV      r9,r12
001110  e1a0a28a          LSL      r10,r10,#5
001114  e18acdac          ORR      r12,r10,r12,LSR #27
001118  e1888289          ORR      r8,r8,r9,LSL #5
00111c  e18ee00c          ORR      lr,lr,r12
001120  e5d1c00a          LDRB     r12,[r1,#0xa]
001124  e3a09000          MOV      r9,#0
001128  e20cc001          AND      r12,r12,#1
00112c  e0099009          AND      r9,r9,r9
001130  e1a09209          LSL      r9,r9,#4
001134  e1899e2c          ORR      r9,r9,r12,LSR #28
001138  e1a0a20c          LSL      r10,r12,#4
00113c  e1a0c00e          MOV      r12,lr
001140  e188e00a          ORR      lr,r8,r10
001144  e18cc009          ORR      r12,r12,r9
001148  e3a08000          MOV      r8,#0
00114c  e2049001          AND      r9,r4,#1
001150  e0088008          AND      r8,r8,r8
001154  e1a08188          LSL      r8,r8,#3
001158  e1888ea9          ORR      r8,r8,r9,LSR #29
00115c  e18ee189          ORR      lr,lr,r9,LSL #3
001160  e18cc008          ORR      r12,r12,r8
001164  e3a08000          MOV      r8,#0
001168  e205a003          AND      r10,r5,#3
00116c  e0088008          AND      r8,r8,r8
001170  e09a900a          ADDS     r9,r10,r10
001174  e0a8a008          ADC      r10,r8,r8
001178  e18e8009          ORR      r8,lr,r9
00117c  e18ce00a          ORR      lr,r12,r10
001180  e5d1c009          LDRB     r12,[r1,#9]
001184  e3a09000          MOV      r9,#0
001188  e20cc001          AND      r12,r12,#1
00118c  e0099009          AND      r9,r9,r9
001190  e1a0a008          MOV      r10,r8
001194  e1a0800e          MOV      r8,lr
001198  e18ae00c          ORR      lr,r10,r12
00119c  e1899008          ORR      r9,r9,r8
0011a0  e6ff8079          UXTH     r8,r9
0011a4  e59f9fd4          LDR      r9,|L1.8576|
0011a8  e1a0c00e          MOV      r12,lr
0011ac  e188e009          ORR      lr,r8,r9
0011b0  e0838182          ADD      r8,r3,r2,LSL #3
0011b4  e8885000          STM      r8,{r12,lr}
0011b8  ea000051          B        |L1.4868|
                  |L1.4540|
;;;601                                              pstParam->eGreenChPrtEn,
;;;602                                              pstParam->eBlueChPrtEn,
;;;603                                              pstParam->eAlphaChPrtEn,
;;;604                                              pstParam->eRastOpEn,
;;;605                                              pstParam->eDestFmt,
;;;606                                              pstParam->eBlndOrder,
;;;607                                              eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;608                                              eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;609                                              pstParam->eClipWndEn);
;;;610            }
;;;611            else
;;;612            {
;;;613                /* Blit Blend. 32-bit RGBA */
;;;614                pu64Curr[u8Curr] = BLT_BRGBA32(pstParam->eRedChPrtEn,
0011bc  e5d1c002          LDRB     r12,[r1,#2]
0011c0  e3a09000          MOV      r9,#0
0011c4  e20cc001          AND      r12,r12,#1
0011c8  e009e009          AND      lr,r9,r9
0011cc  e1a0e50e          LSL      lr,lr,#10
0011d0  e18eeb2c          ORR      lr,lr,r12,LSR #22
0011d4  e1a0850c          LSL      r8,r12,#10
0011d8  e5d1c003          LDRB     r12,[r1,#3]
0011dc  e20cc001          AND      r12,r12,#1
0011e0  e009a009          AND      r10,r9,r9
0011e4  e1a0900c          MOV      r9,r12
0011e8  e1a0a48a          LSL      r10,r10,#9
0011ec  e18acbac          ORR      r12,r10,r12,LSR #23
0011f0  e1888489          ORR      r8,r8,r9,LSL #9
0011f4  e18ee00c          ORR      lr,lr,r12
0011f8  e5d1c004          LDRB     r12,[r1,#4]
0011fc  e3a09000          MOV      r9,#0
001200  e20cc001          AND      r12,r12,#1
001204  e0099009          AND      r9,r9,r9
001208  e1a09409          LSL      r9,r9,#8
00120c  e1899c2c          ORR      r9,r9,r12,LSR #24
001210  e188840c          ORR      r8,r8,r12,LSL #8
001214  e18ee009          ORR      lr,lr,r9
001218  e5d1c005          LDRB     r12,[r1,#5]
00121c  e3a09000          MOV      r9,#0
001220  e20cc001          AND      r12,r12,#1
001224  e009a009          AND      r10,r9,r9
001228  e1a0900c          MOV      r9,r12
00122c  e1a0a38a          LSL      r10,r10,#7
001230  e18accac          ORR      r12,r10,r12,LSR #25
001234  e1888389          ORR      r8,r8,r9,LSL #7
001238  e18ee00c          ORR      lr,lr,r12
00123c  e5d1c006          LDRB     r12,[r1,#6]
001240  e3a09000          MOV      r9,#0
001244  e20cc001          AND      r12,r12,#1
001248  e009a009          AND      r10,r9,r9
00124c  e1a0900c          MOV      r9,r12
001250  e1a0a30a          LSL      r10,r10,#6
001254  e18acd2c          ORR      r12,r10,r12,LSR #26
001258  e1888309          ORR      r8,r8,r9,LSL #6
00125c  e18ee00c          ORR      lr,lr,r12
001260  e5d1c001          LDRB     r12,[r1,#1]
001264  e3a09000          MOV      r9,#0
001268  e20cc001          AND      r12,r12,#1
00126c  e0099009          AND      r9,r9,r9
001270  e1a09289          LSL      r9,r9,#5
001274  e1899dac          ORR      r9,r9,r12,LSR #27
001278  e188828c          ORR      r8,r8,r12,LSL #5
00127c  e18ea009          ORR      r10,lr,r9
001280  e5d1c00a          LDRB     r12,[r1,#0xa]
001284  e3a09000          MOV      r9,#0
001288  e20cc001          AND      r12,r12,#1
00128c  e0099009          AND      r9,r9,r9
001290  e1a09209          LSL      r9,r9,#4
001294  e1899e2c          ORR      r9,r9,r12,LSR #28
001298  e188e20c          ORR      lr,r8,r12,LSL #4
00129c  e18ac009          ORR      r12,r10,r9
0012a0  e3a08000          MOV      r8,#0
0012a4  e204a001          AND      r10,r4,#1
0012a8  e0089008          AND      r9,r8,r8
0012ac  e1a09189          LSL      r9,r9,#3
0012b0  e1899eaa          ORR      r9,r9,r10,LSR #29
0012b4  e18ee18a          ORR      lr,lr,r10,LSL #3
0012b8  e18cc009          ORR      r12,r12,r9
0012bc  e205a003          AND      r10,r5,#3
0012c0  e0088008          AND      r8,r8,r8
0012c4  e09a900a          ADDS     r9,r10,r10
0012c8  e0a8a008          ADC      r10,r8,r8
0012cc  e18e8009          ORR      r8,lr,r9
0012d0  e18aa00c          ORR      r10,r10,r12
0012d4  e5d1c009          LDRB     r12,[r1,#9]
0012d8  e3a09000          MOV      r9,#0
0012dc  e20cc001          AND      r12,r12,#1
0012e0  e0099009          AND      r9,r9,r9
0012e4  e188e00c          ORR      lr,r8,r12
0012e8  e189900a          ORR      r9,r9,r10
0012ec  e6ff9079          UXTH     r9,r9
0012f0  e59f8e8c          LDR      r8,|L1.8580|
0012f4  e1a0c00e          MOV      r12,lr
0012f8  e189e008          ORR      lr,r9,r8
0012fc  e0838182          ADD      r8,r3,r2,LSL #3
001300  e8885000          STM      r8,{r12,lr}
                  |L1.4868|
;;;615                                               pstParam->eGreenChPrtEn,
;;;616                                               pstParam->eBlueChPrtEn,
;;;617                                               pstParam->eAlphaChPrtEn,
;;;618                                               pstParam->eRastOpEn,
;;;619                                               pstParam->eDestFmt,
;;;620                                               pstParam->eBlndOrder,
;;;621                                               eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;622                                               eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;623                                               pstParam->eClipWndEn);
;;;624            }
;;;625    
;;;626            u8Curr++;
001304  e282c001          ADD      r12,r2,#1
001308  e20c20ff          AND      r2,r12,#0xff
;;;627    
;;;628            /* Update List Pointer */
;;;629            pstCmdList->pu64Current = &pu64Curr[u8Curr];
00130c  e083c182          ADD      r12,r3,r2,LSL #3
001310  e304e000          MOVW     lr,#0x4000
001314  e78ec007          STR      r12,[lr,r7]
                  |L1.4888|
;;;630        }
;;;631    
;;;632        pstCmdList->u32UsedDoubleWords = u8Curr;
001318  e304c004          MOV      r12,#0x4004
00131c  e78c2007          STR      r2,[r12,r7]
;;;633    
;;;634        return i32Res;
;;;635    }
001320  e8bd8ff0          POP      {r4-r11,pc}
;;;636    
                          ENDP

                  vBlit_BlendRLEI PROC
;;;637    /* ....................................................................... */
;;;638    void vBlit_BlendRLEI(blit_mem_st* pstMem, blit_BlndRlei_st* pstParam,
001324  e92d47f0          PUSH     {r4-r10,lr}
;;;639                         ga_list_st* pstCmdList)
;;;640    {
001328  e1a05000          MOV      r5,r0
00132c  e1a06002          MOV      r6,r2
;;;641        uint8_t         u8Curr = 6U;
001330  e3a00006          MOV      r0,#6
;;;642        ga_en_e         eTranspColEn_valid;
;;;643        blt_fadeMode_e  eFadeMode_valid;
;;;644        uint64_t*       pu64Curr = (uint64_t*) pstCmdList->pu64Current;
001334  e3047000          MOVW     r7,#0x4000
001338  e7972006          LDR      r2,[r7,r6]
;;;645    
;;;646        if(pstParam->eRastOpEn == GA_EN)
00133c  e5d17006          LDRB     r7,[r1,#6]
001340  e3570001          CMP      r7,#1
001344  1a000002          BNE      |L1.4948|
;;;647        {
;;;648            /* Raster option requires disabled Fading and Transp. Col. Opt. 
;;;649             * If it is enabled Transparency Color and Fade mode will be
;;;650             * assuemed as disbaled */
;;;651            eTranspColEn_valid = GA_DIS;
001348  e3a03000          MOV      r3,#0
;;;652            eFadeMode_valid    = BLT_NOFADING;
00134c  e3a04000          MOV      r4,#0
001350  ea000001          B        |L1.4956|
                  |L1.4948|
;;;653        }
;;;654        else
;;;655        {
;;;656            eTranspColEn_valid = pstParam->eTranspColEn;
001354  e5d13007          LDRB     r3,[r1,#7]
;;;657            eFadeMode_valid    = pstParam->eFadeMode;
001358  e5d14008          LDRB     r4,[r1,#8]
                  |L1.4956|
;;;658        }
;;;659    
;;;660    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;661    
;;;662        uint32_t u32NeededDW ;
;;;663        
;;;664        u32NeededDW = u8Curr + 2; /* 2 for Src/Dst Alpha */
;;;665        if(pstParam->eRastOpEn == GA_EN)
;;;666        {
;;;667            u32NeededDW++; /* for raster value */
;;;668        }
;;;669        else
;;;670        {
;;;671            if(eFadeMode_valid != BLT_NOFADING)
;;;672            {
;;;673                u32NeededDW++;  /* for fade factor*/
;;;674            }
;;;675            if(eTranspColEn_valid == GA_EN)
;;;676            {
;;;677                u32NeededDW+=2; /* for Src/Dst Transparency */
;;;678            }
;;;679        }
;;;680        u32NeededDW++; /* for command itself */
;;;681    
;;;682        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;683    
;;;684        /* check if there is enough space in command list: */
;;;685        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;686        {
;;;687          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;688          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;689          return;
;;;690        }
;;;691        else 
;;;692        {
;;;693          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;694        }
;;;695    #endif 
;;;696    
;;;697        /* Source Memory Params */
;;;698        pu64Curr[0] = BLT_LOAD_SOURCEADDR(pstMem->u32SrcAddr);
00135c  e3a0c000          MOV      r12,#0
001360  e00c900c          AND      r9,r12,r12
001364  e5957004          LDR      r7,[r5,#4]
001368  e187700c          ORR      r7,r7,r12
00136c  e6ffc079          UXTH     r12,r9
001370  e38ce009          ORR      lr,r12,#9
001374  e51f83c8          LDR      r8,|L1.4020|
001378  e18ec008          ORR      r12,lr,r8
00137c  e8821080          STM      r2,{r7,r12}
;;;699        pu64Curr[1] = BLT_LOAD_SRCWIDTH(pstMem->u16SrcWidth);
001380  e1d570b0          LDRH     r7,[r5,#0]
001384  e7df761f          BFC      r7,#12,#20
001388  e3a0e000          MOV      lr,#0
00138c  e1a0c007          MOV      r12,r7
001390  e00e700e          AND      r7,lr,lr
001394  e18ee00c          ORR      lr,lr,r12
001398  e6ff8077          UXTH     r8,r7
00139c  e1a0700e          MOV      r7,lr
0013a0  e388e00a          ORR      lr,r8,#0xa
0013a4  e51f83f8          LDR      r8,|L1.4020|
0013a8  e18ec008          ORR      r12,lr,r8
0013ac  e5827008          STR      r7,[r2,#8]
0013b0  e582c00c          STR      r12,[r2,#0xc]
;;;700    
;;;701        /* Destination Memory Params */
;;;702        pu64Curr[2] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
0013b4  e3a0c000          MOV      r12,#0
0013b8  e00cc00c          AND      r12,r12,r12
0013bc  e6ff907c          UXTH     r9,r12
0013c0  e595700c          LDR      r7,[r5,#0xc]
0013c4  e1a0c007          MOV      r12,r7
0013c8  e389e004          ORR      lr,r9,#4
0013cc  e1a07008          MOV      r7,r8
0013d0  e187700e          ORR      r7,r7,lr
0013d4  e5827014          STR      r7,[r2,#0x14]
0013d8  e582c010          STR      r12,[r2,#0x10]
;;;703        pu64Curr[3] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
0013dc  e1d570b8          LDRH     r7,[r5,#8]
0013e0  e7df761f          BFC      r7,#12,#20
0013e4  e3a0c000          MOV      r12,#0
0013e8  e00c900c          AND      r9,r12,r12
0013ec  e187700c          ORR      r7,r7,r12
0013f0  e6ffc079          UXTH     r12,r9
0013f4  e38c9005          ORR      r9,r12,#5
0013f8  e1a0c007          MOV      r12,r7
0013fc  e1897008          ORR      r7,r9,r8
001400  e582701c          STR      r7,[r2,#0x1c]
001404  e582c018          STR      r12,[r2,#0x18]
;;;704    
;;;705        /* Blitting Area Size */
;;;706        pu64Curr[4] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
001408  e1d571b0          LDRH     r7,[r5,#0x10]
00140c  e7df761f          BFC      r7,#12,#20
001410  e3a0c000          MOV      r12,#0
001414  e00cc00c          AND      r12,r12,r12
001418  e38c8006          ORR      r8,r12,#6
00141c  e1a09007          MOV      r9,r7
001420  e1a07008          MOV      r7,r8
001424  e1a08009          MOV      r8,r9
001428  e6ff9077          UXTH     r9,r7
00142c  e51fc480          LDR      r12,|L1.4020|
001430  e18cc009          ORR      r12,r12,r9
001434  e5828020          STR      r8,[r2,#0x20]
001438  e582c024          STR      r12,[r2,#0x24]
;;;707        pu64Curr[5] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
00143c  e1d571b2          LDRH     r7,[r5,#0x12]
001440  e7df761f          BFC      r7,#12,#20
001444  e3a0c000          MOV      r12,#0
001448  e00c900c          AND      r9,r12,r12
00144c  e187700c          ORR      r7,r7,r12
001450  e6ffc079          UXTH     r12,r9
001454  e38cc007          ORR      r12,r12,#7
001458  e51fe4ac          LDR      lr,|L1.4020|
00145c  e18cc00e          ORR      r12,r12,lr
001460  e5827028          STR      r7,[r2,#0x28]
001464  e582c02c          STR      r12,[r2,#0x2c]
;;;708    
;;;709        /*** Operation Specific Params ***/
;;;710    
;;;711        /* Raster Parameter Setup */
;;;712        if(pstParam->eRastOpEn == GA_EN)
001468  e5d17006          LDRB     r7,[r1,#6]
00146c  e3570001          CMP      r7,#1
001470  1a00001a          BNE      |L1.5344|
;;;713        {
;;;714            pu64Curr[u8Curr] = BLT_LOAD_RASTOP(pstParam->eRastOpMode, pstParam->eRastOpValue);
001474  e5d17014          LDRB     r7,[r1,#0x14]
001478  e3a08000          MOV      r8,#0
00147c  e2077007          AND      r7,r7,#7
001480  e008c008          AND      r12,r8,r8
001484  e1a0c80c          LSL      r12,r12,#16
001488  e18cc827          ORR      r12,r12,r7,LSR #16
00148c  e1a0e807          LSL      lr,r7,#16
001490  e5d17015          LDRB     r7,[r1,#0x15]
001494  e207700f          AND      r7,r7,#0xf
001498  e0088008          AND      r8,r8,r8
00149c  e187700e          ORR      r7,r7,lr
0014a0  e18c9008          ORR      r9,r12,r8
0014a4  e3a0c000          MOV      r12,#0
0014a8  e1a08007          MOV      r8,r7
0014ac  e1a07009          MOV      r7,r9
0014b0  e1a0900c          MOV      r9,r12
0014b4  e1a0c008          MOV      r12,r8
0014b8  e0077009          AND      r7,r7,r9
0014bc  e6ff8077          UXTH     r8,r7
0014c0  e1a0700c          MOV      r7,r12
0014c4  e3888015          ORR      r8,r8,#0x15
0014c8  e51fc51c          LDR      r12,|L1.4020|
0014cc  e18cc008          ORR      r12,r12,r8
0014d0  e082e180          ADD      lr,r2,r0,LSL #3
0014d4  e88e1080          STM      lr,{r7,r12}
;;;715            u8Curr++;
0014d8  e2807001          ADD      r7,r0,#1
0014dc  e20700ff          AND      r0,r7,#0xff
                  |L1.5344|
;;;716        }
;;;717    
;;;718        /* Fading Parameter Setup */
;;;719        if(eFadeMode_valid != BLT_NOFADING)
0014e0  e3540000          CMP      r4,#0
0014e4  0a00000c          BEQ      |L1.5404|
;;;720        {
;;;721            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
0014e8  e5d1800b          LDRB     r8,[r1,#0xb]
0014ec  e3a0c000          MOV      r12,#0
0014f0  e00c700c          AND      r7,r12,r12
0014f4  e18cc008          ORR      r12,r12,r8
0014f8  e6ff8077          UXTH     r8,r7
0014fc  e3888014          ORR      r8,r8,#0x14
001500  e51f9554          LDR      r9,|L1.4020|
001504  e1a0700c          MOV      r7,r12
001508  e188c009          ORR      r12,r8,r9
00150c  e082e180          ADD      lr,r2,r0,LSL #3
001510  e88e1080          STM      lr,{r7,r12}
;;;722            u8Curr++;
001514  e2807001          ADD      r7,r0,#1
001518  e20700ff          AND      r0,r7,#0xff
                  |L1.5404|
;;;723        }
;;;724    
;;;725        pu64Curr[u8Curr] = BLT_LOAD_SRCALPHA(pstParam->u8SrcAlphaVal);
00151c  e5d17012          LDRB     r7,[r1,#0x12]
001520  e3a09000          MOV      r9,#0
001524  e1a08007          MOV      r8,r7
001528  e009e009          AND      lr,r9,r9
00152c  e188c009          ORR      r12,r8,r9
001530  e6ff807e          UXTH     r8,lr
001534  e388700d          ORR      r7,r8,#0xd
001538  e51f858c          LDR      r8,|L1.4020|
00153c  e1877008          ORR      r7,r7,r8
001540  e082e180          ADD      lr,r2,r0,LSL #3
001544  e58e7004          STR      r7,[lr,#4]
001548  e58ec000          STR      r12,[lr,#0]
;;;726        u8Curr++;
00154c  e2807001          ADD      r7,r0,#1
001550  e20700ff          AND      r0,r7,#0xff
;;;727    
;;;728        pu64Curr[u8Curr] = BLT_LOAD_DESTALPHA(pstParam->u8DstAlphaVal);
001554  e5d17013          LDRB     r7,[r1,#0x13]
001558  e3a0c000          MOV      r12,#0
00155c  e00c900c          AND      r9,r12,r12
001560  e1a0800c          MOV      r8,r12
001564  e1a0c007          MOV      r12,r7
001568  e18cc008          ORR      r12,r12,r8
00156c  e6ff7079          UXTH     r7,r9
001570  e387900f          ORR      r9,r7,#0xf
001574  e51fe5c8          LDR      lr,|L1.4020|
001578  e1a0700c          MOV      r7,r12
00157c  e189c00e          ORR      r12,r9,lr
001580  e082e180          ADD      lr,r2,r0,LSL #3
001584  e88e1080          STM      lr,{r7,r12}
;;;729        u8Curr++;    
001588  e2807001          ADD      r7,r0,#1
00158c  e20700ff          AND      r0,r7,#0xff
;;;730        
;;;731        /* Transparency Parameters */
;;;732        if(eTranspColEn_valid == GA_EN)
001590  e3530001          CMP      r3,#1
001594  1a000018          BNE      |L1.5628|
;;;733        {
;;;734            /* Transparency Color Option */
;;;735            pu64Curr[u8Curr] = BLT_LOAD_SRCTRANSPATT(pstParam->u32SrcTransVal);
001598  e591700c          LDR      r7,[r1,#0xc]
00159c  e3c774ff          BIC      r7,r7,#0xff000000
0015a0  e3a0e000          MOV      lr,#0
0015a4  e00ee00e          AND      lr,lr,lr
0015a8  e6ffc07e          UXTH     r12,lr
0015ac  e38c800e          ORR      r8,r12,#0xe
0015b0  e51fc604          LDR      r12,|L1.4020|
0015b4  e18cc008          ORR      r12,r12,r8
0015b8  e082e180          ADD      lr,r2,r0,LSL #3
0015bc  e88e1080          STM      lr,{r7,r12}
;;;736            u8Curr++;
0015c0  e2807001          ADD      r7,r0,#1
0015c4  e20700ff          AND      r0,r7,#0xff
;;;737    
;;;738            pu64Curr[u8Curr] = BLT_LOAD_DESTTRANSPATT(pstParam->u16DstTransVal);
0015c8  e1d1c1b0          LDRH     r12,[r1,#0x10]
0015cc  e3a0e000          MOV      lr,#0
0015d0  e00e700e          AND      r7,lr,lr
0015d4  e18cc00e          ORR      r12,r12,lr
0015d8  e3877010          ORR      r7,r7,#0x10
0015dc  e51f8630          LDR      r8,|L1.4020|
0015e0  e18cc00e          ORR      r12,r12,lr
0015e4  e1877008          ORR      r7,r7,r8
0015e8  e082e180          ADD      lr,r2,r0,LSL #3
0015ec  e58e7004          STR      r7,[lr,#4]
0015f0  e58ec000          STR      r12,[lr,#0]
;;;739            u8Curr++;
0015f4  e2807001          ADD      r7,r0,#1
0015f8  e20700ff          AND      r0,r7,#0xff
                  |L1.5628|
;;;740        }
;;;741        switch( pstParam->eRleiFmt )
0015fc  e5d17000          LDRB     r7,[r1,#0]
001600  e3570000          CMP      r7,#0
001604  0a000004          BEQ      |L1.5660|
001608  e3570001          CMP      r7,#1
00160c  0a00005b          BEQ      |L1.6016|
001610  e3570002          CMP      r7,#2
001614  1a000111          BNE      |L1.6752|
001618  ea0000b7          B        |L1.6396|
                  |L1.5660|
;;;742        {
;;;743            case RLEI_BLNDFMT_RGB16:
00161c  e320f000          NOP      
;;;744                /* Blit Blend. Run-Len. Enc. 16-bit RGB */
;;;745                pu64Curr[u8Curr] = BLT_BRLEI16(pstParam->eRedChPrtEn,
001620  e5d17002          LDRB     r7,[r1,#2]
001624  e3a0c000          MOV      r12,#0
001628  e2077001          AND      r7,r7,#1
00162c  e00cc00c          AND      r12,r12,r12
001630  e1a0c50c          LSL      r12,r12,#10
001634  e18ccb27          ORR      r12,r12,r7,LSR #22
001638  e1a0e507          LSL      lr,r7,#10
00163c  e5d17003          LDRB     r7,[r1,#3]
001640  e3a08000          MOV      r8,#0
001644  e2077001          AND      r7,r7,#1
001648  e0088008          AND      r8,r8,r8
00164c  e1a08488          LSL      r8,r8,#9
001650  e1888ba7          ORR      r8,r8,r7,LSR #23
001654  e1a09487          LSL      r9,r7,#9
001658  e189900e          ORR      r9,r9,lr
00165c  e18cc008          ORR      r12,r12,r8
001660  e5d17004          LDRB     r7,[r1,#4]
001664  e3a08000          MOV      r8,#0
001668  e2077001          AND      r7,r7,#1
00166c  e0088008          AND      r8,r8,r8
001670  e1a08408          LSL      r8,r8,#8
001674  e1888c27          ORR      r8,r8,r7,LSR #24
001678  e189e407          ORR      lr,r9,r7,LSL #8
00167c  e18cc008          ORR      r12,r12,r8
001680  e5d17005          LDRB     r7,[r1,#5]
001684  e3a08000          MOV      r8,#0
001688  e2077001          AND      r7,r7,#1
00168c  e0089008          AND      r9,r8,r8
001690  e1a08007          MOV      r8,r7
001694  e1a09389          LSL      r9,r9,#7
001698  e1897ca7          ORR      r7,r9,r7,LSR #25
00169c  e18ee388          ORR      lr,lr,r8,LSL #7
0016a0  e18cc007          ORR      r12,r12,r7
0016a4  e5d17006          LDRB     r7,[r1,#6]
0016a8  e3a08000          MOV      r8,#0
0016ac  e2077001          AND      r7,r7,#1
0016b0  e0089008          AND      r9,r8,r8
0016b4  e1a08007          MOV      r8,r7
0016b8  e1a09309          LSL      r9,r9,#6
0016bc  e1897d27          ORR      r7,r9,r7,LSR #26
0016c0  e1a0900c          MOV      r9,r12
0016c4  e18ec308          ORR      r12,lr,r8,LSL #6
0016c8  e189e007          ORR      lr,r9,r7
0016cc  e5d17001          LDRB     r7,[r1,#1]
0016d0  e3a08000          MOV      r8,#0
0016d4  e2077001          AND      r7,r7,#1
0016d8  e0089008          AND      r9,r8,r8
0016dc  e1a08007          MOV      r8,r7
0016e0  e1a09289          LSL      r9,r9,#5
0016e4  e1897da7          ORR      r7,r9,r7,LSR #27
0016e8  e18cc288          ORR      r12,r12,r8,LSL #5
0016ec  e18ee007          ORR      lr,lr,r7
0016f0  e5d1700a          LDRB     r7,[r1,#0xa]
0016f4  e3a08000          MOV      r8,#0
0016f8  e2077001          AND      r7,r7,#1
0016fc  e0088008          AND      r8,r8,r8
001700  e1a08208          LSL      r8,r8,#4
001704  e1888e27          ORR      r8,r8,r7,LSR #28
001708  e18cc207          ORR      r12,r12,r7,LSL #4
00170c  e18e7008          ORR      r7,lr,r8
001710  e3a0e000          MOV      lr,#0
001714  e2039001          AND      r9,r3,#1
001718  e00e800e          AND      r8,lr,lr
00171c  e1a08188          LSL      r8,r8,#3
001720  e1888ea9          ORR      r8,r8,r9,LSR #29
001724  e1a0e189          LSL      lr,r9,#3
001728  e1a09007          MOV      r9,r7
00172c  e18c700e          ORR      r7,r12,lr
001730  e189c008          ORR      r12,r9,r8
001734  e3a0e000          MOV      lr,#0
001738  e2049003          AND      r9,r4,#3
00173c  e00ee00e          AND      lr,lr,lr
001740  e0998009          ADDS     r8,r9,r9
001744  e0ae900e          ADC      r9,lr,lr
001748  e187e008          ORR      lr,r7,r8
00174c  e18cc009          ORR      r12,r12,r9
001750  e5d17009          LDRB     r7,[r1,#9]
001754  e3a08000          MOV      r8,#0
001758  e2077001          AND      r7,r7,#1
00175c  e0089008          AND      r9,r8,r8
001760  e18e8007          ORR      r8,lr,r7
001764  e189900c          ORR      r9,r9,r12
001768  e6ffe079          UXTH     lr,r9
00176c  e59f9a14          LDR      r9,|L1.8584|
001770  e18ec009          ORR      r12,lr,r9
001774  e082e180          ADD      lr,r2,r0,LSL #3
001778  e88e1100          STM      lr,{r8,r12}
;;;746                                               pstParam->eGreenChPrtEn,
;;;747                                               pstParam->eBlueChPrtEn,
;;;748                                               pstParam->eAlphaChPrtEn,
;;;749                                               pstParam->eRastOpEn,
;;;750                                               pstParam->eDestFmt,
;;;751                                               pstParam->eBlndOrder,
;;;752                                               eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;753                                               eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;754                                               pstParam->eClipWndEn);
;;;755                break;
00177c  ea000111          B        |L1.7112|
                  |L1.6016|
;;;756            case RLEI_BLNDFMT_RGB24:
001780  e320f000          NOP      
;;;757                /* Blit Blend. Run-Len. Enc. 24bit RGB */
;;;758                pu64Curr[u8Curr] = BLT_BRLEI24(pstParam->eRedChPrtEn,
001784  e5d17002          LDRB     r7,[r1,#2]
001788  e3a08000          MOV      r8,#0
00178c  e2077001          AND      r7,r7,#1
001790  e008c008          AND      r12,r8,r8
001794  e1a0c50c          LSL      r12,r12,#10
001798  e18ccb27          ORR      r12,r12,r7,LSR #22
00179c  e1a0e507          LSL      lr,r7,#10
0017a0  e5d17003          LDRB     r7,[r1,#3]
0017a4  e2077001          AND      r7,r7,#1
0017a8  e0089008          AND      r9,r8,r8
0017ac  e1a08007          MOV      r8,r7
0017b0  e1a09489          LSL      r9,r9,#9
0017b4  e1897ba7          ORR      r7,r9,r7,LSR #23
0017b8  e18ee488          ORR      lr,lr,r8,LSL #9
0017bc  e18cc007          ORR      r12,r12,r7
0017c0  e5d17004          LDRB     r7,[r1,#4]
0017c4  e3a09000          MOV      r9,#0
0017c8  e2078001          AND      r8,r7,#1
0017cc  e0097009          AND      r7,r9,r9
0017d0  e1a07407          LSL      r7,r7,#8
0017d4  e1877c28          ORR      r7,r7,r8,LSR #24
0017d8  e1a09408          LSL      r9,r8,#8
0017dc  e1a0800c          MOV      r8,r12
0017e0  e18ec009          ORR      r12,lr,r9
0017e4  e188e007          ORR      lr,r8,r7
0017e8  e5d17005          LDRB     r7,[r1,#5]
0017ec  e3a08000          MOV      r8,#0
0017f0  e2077001          AND      r7,r7,#1
0017f4  e0089008          AND      r9,r8,r8
0017f8  e1a08007          MOV      r8,r7
0017fc  e1a09389          LSL      r9,r9,#7
001800  e1897ca7          ORR      r7,r9,r7,LSR #25
001804  e1a09388          LSL      r9,r8,#7
001808  e1a0800e          MOV      r8,lr
00180c  e18ce009          ORR      lr,r12,r9
001810  e188c007          ORR      r12,r8,r7
001814  e5d17006          LDRB     r7,[r1,#6]
001818  e3a08000          MOV      r8,#0
00181c  e2077001          AND      r7,r7,#1
001820  e0088008          AND      r8,r8,r8
001824  e1a08308          LSL      r8,r8,#6
001828  e1888d27          ORR      r8,r8,r7,LSR #26
00182c  e1a09307          LSL      r9,r7,#6
001830  e1a0700c          MOV      r7,r12
001834  e18ec009          ORR      r12,lr,r9
001838  e187e008          ORR      lr,r7,r8
00183c  e5d17001          LDRB     r7,[r1,#1]
001840  e3a08000          MOV      r8,#0
001844  e2077001          AND      r7,r7,#1
001848  e0089008          AND      r9,r8,r8
00184c  e1a08007          MOV      r8,r7
001850  e1a09289          LSL      r9,r9,#5
001854  e1897da7          ORR      r7,r9,r7,LSR #27
001858  e18cc288          ORR      r12,r12,r8,LSL #5
00185c  e18ee007          ORR      lr,lr,r7
001860  e5d1700a          LDRB     r7,[r1,#0xa]
001864  e3a08000          MOV      r8,#0
001868  e2077001          AND      r7,r7,#1
00186c  e0089008          AND      r9,r8,r8
001870  e1a08007          MOV      r8,r7
001874  e1a09209          LSL      r9,r9,#4
001878  e1897e27          ORR      r7,r9,r7,LSR #28
00187c  e18cc208          ORR      r12,r12,r8,LSL #4
001880  e187700e          ORR      r7,r7,lr
001884  e3a0e000          MOV      lr,#0
001888  e2039001          AND      r9,r3,#1
00188c  e00ee00e          AND      lr,lr,lr
001890  e1a0e18e          LSL      lr,lr,#3
001894  e18eeea9          ORR      lr,lr,r9,LSR #29
001898  e18cc189          ORR      r12,r12,r9,LSL #3
00189c  e187700e          ORR      r7,r7,lr
0018a0  e3a0e000          MOV      lr,#0
0018a4  e2049003          AND      r9,r4,#3
0018a8  e00ee00e          AND      lr,lr,lr
0018ac  e0998009          ADDS     r8,r9,r9
0018b0  e0aee00e          ADC      lr,lr,lr
0018b4  e188800c          ORR      r8,r8,r12
0018b8  e18ee007          ORR      lr,lr,r7
0018bc  e5d17009          LDRB     r7,[r1,#9]
0018c0  e3a09000          MOV      r9,#0
0018c4  e2077001          AND      r7,r7,#1
0018c8  e0099009          AND      r9,r9,r9
0018cc  e188c007          ORR      r12,r8,r7
0018d0  e189900e          ORR      r9,r9,lr
0018d4  e1a0e00c          MOV      lr,r12
0018d8  e1a0700e          MOV      r7,lr
0018dc  e6ffe079          UXTH     lr,r9
0018e0  e59f88a4          LDR      r8,|L1.8588|
0018e4  e1a0c007          MOV      r12,r7
0018e8  e18e7008          ORR      r7,lr,r8
0018ec  e082e180          ADD      lr,r2,r0,LSL #3
0018f0  e58e7004          STR      r7,[lr,#4]
0018f4  e58ec000          STR      r12,[lr,#0]
;;;759                                               pstParam->eGreenChPrtEn,
;;;760                                               pstParam->eBlueChPrtEn,
;;;761                                               pstParam->eAlphaChPrtEn,
;;;762                                               pstParam->eRastOpEn,
;;;763                                               pstParam->eDestFmt,
;;;764                                               pstParam->eBlndOrder,
;;;765                                               eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;766                                               eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;767                                               pstParam->eClipWndEn);
;;;768                break;
0018f8  ea0000b2          B        |L1.7112|
                  |L1.6396|
;;;769            case RLEI_BLNDFMT_RGBA24:
0018fc  e320f000          NOP      
;;;770                /* Blit Blend. Run-Len. Enc. 24-bit RGBA */
;;;771                pu64Curr[u8Curr] = BLT_BRLEI24A(pstParam->eRedChPrtEn,
001900  e5d17002          LDRB     r7,[r1,#2]
001904  e3a08000          MOV      r8,#0
001908  e2077001          AND      r7,r7,#1
00190c  e008c008          AND      r12,r8,r8
001910  e1a0c50c          LSL      r12,r12,#10
001914  e18ccb27          ORR      r12,r12,r7,LSR #22
001918  e1a0e507          LSL      lr,r7,#10
00191c  e5d17003          LDRB     r7,[r1,#3]
001920  e2077001          AND      r7,r7,#1
001924  e0089008          AND      r9,r8,r8
001928  e1a08007          MOV      r8,r7
00192c  e1a09489          LSL      r9,r9,#9
001930  e1897ba7          ORR      r7,r9,r7,LSR #23
001934  e1a0900c          MOV      r9,r12
001938  e18ec488          ORR      r12,lr,r8,LSL #9
00193c  e189e007          ORR      lr,r9,r7
001940  e5d17004          LDRB     r7,[r1,#4]
001944  e3a08000          MOV      r8,#0
001948  e2077001          AND      r7,r7,#1
00194c  e0089008          AND      r9,r8,r8
001950  e1a08007          MOV      r8,r7
001954  e1a09409          LSL      r9,r9,#8
001958  e1897c27          ORR      r7,r9,r7,LSR #24
00195c  e18cc408          ORR      r12,r12,r8,LSL #8
001960  e18ee007          ORR      lr,lr,r7
001964  e5d17005          LDRB     r7,[r1,#5]
001968  e3a08000          MOV      r8,#0
00196c  e2077001          AND      r7,r7,#1
001970  e0089008          AND      r9,r8,r8
001974  e1a08007          MOV      r8,r7
001978  e1a09389          LSL      r9,r9,#7
00197c  e1897ca7          ORR      r7,r9,r7,LSR #25
001980  e1a0900e          MOV      r9,lr
001984  e18ce388          ORR      lr,r12,r8,LSL #7
001988  e189c007          ORR      r12,r9,r7
00198c  e5d17006          LDRB     r7,[r1,#6]
001990  e3a09000          MOV      r9,#0
001994  e2077001          AND      r7,r7,#1
001998  e0098009          AND      r8,r9,r9
00199c  e1a08308          LSL      r8,r8,#6
0019a0  e1888d27          ORR      r8,r8,r7,LSR #26
0019a4  e18ee307          ORR      lr,lr,r7,LSL #6
0019a8  e18cc008          ORR      r12,r12,r8
0019ac  e5d17001          LDRB     r7,[r1,#1]
0019b0  e2078001          AND      r8,r7,#1
0019b4  e0099009          AND      r9,r9,r9
0019b8  e1a09289          LSL      r9,r9,#5
0019bc  e1897da8          ORR      r7,r9,r8,LSR #27
0019c0  e18ee288          ORR      lr,lr,r8,LSL #5
0019c4  e18cc007          ORR      r12,r12,r7
0019c8  e5d1700a          LDRB     r7,[r1,#0xa]
0019cc  e3a08000          MOV      r8,#0
0019d0  e2077001          AND      r7,r7,#1
0019d4  e0088008          AND      r8,r8,r8
0019d8  e1a08208          LSL      r8,r8,#4
0019dc  e1888e27          ORR      r8,r8,r7,LSR #28
0019e0  e1a09207          LSL      r9,r7,#4
0019e4  e1a0700c          MOV      r7,r12
0019e8  e18ec009          ORR      r12,lr,r9
0019ec  e1877008          ORR      r7,r7,r8
0019f0  e3a0e000          MOV      lr,#0
0019f4  e2038001          AND      r8,r3,#1
0019f8  e00ee00e          AND      lr,lr,lr
0019fc  e1a0e18e          LSL      lr,lr,#3
001a00  e18eeea8          ORR      lr,lr,r8,LSR #29
001a04  e18cc188          ORR      r12,r12,r8,LSL #3
001a08  e187700e          ORR      r7,r7,lr
001a0c  e3a0e000          MOV      lr,#0
001a10  e2049003          AND      r9,r4,#3
001a14  e00e800e          AND      r8,lr,lr
001a18  e099e009          ADDS     lr,r9,r9
001a1c  e0a88008          ADC      r8,r8,r8
001a20  e18ee00c          ORR      lr,lr,r12
001a24  e187c008          ORR      r12,r7,r8
001a28  e5d17009          LDRB     r7,[r1,#9]
001a2c  e3a08000          MOV      r8,#0
001a30  e2077001          AND      r7,r7,#1
001a34  e0088008          AND      r8,r8,r8
001a38  e18ee007          ORR      lr,lr,r7
001a3c  e18c7008          ORR      r7,r12,r8
001a40  e1a0c00e          MOV      r12,lr
001a44  e6ff7077          UXTH     r7,r7
001a48  e59f8740          LDR      r8,|L1.8592|
001a4c  e1877008          ORR      r7,r7,r8
001a50  e082e180          ADD      lr,r2,r0,LSL #3
001a54  e58e7004          STR      r7,[lr,#4]
001a58  e58ec000          STR      r12,[lr,#0]
;;;772                                               pstParam->eGreenChPrtEn,
;;;773                                               pstParam->eBlueChPrtEn,
;;;774                                               pstParam->eAlphaChPrtEn,
;;;775                                               pstParam->eRastOpEn,
;;;776                                               pstParam->eDestFmt,
;;;777                                               pstParam->eBlndOrder,
;;;778                                               eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;779                                               eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;780                                               pstParam->eClipWndEn);
;;;781                break;
001a5c  ea000059          B        |L1.7112|
                  |L1.6752|
;;;782            default:
001a60  e320f000          NOP      
;;;783                /* Blit Blend. Run-Len. Enc. 32-bit RGBA */
;;;784                pu64Curr[u8Curr] = BLT_BRLEI32(pstParam->eRedChPrtEn,
001a64  e5d17002          LDRB     r7,[r1,#2]
001a68  e3a0e000          MOV      lr,#0
001a6c  e2077001          AND      r7,r7,#1
001a70  e00ec00e          AND      r12,lr,lr
001a74  e1a0c50c          LSL      r12,r12,#10
001a78  e18ccb27          ORR      r12,r12,r7,LSR #22
001a7c  e1a0e507          LSL      lr,r7,#10
001a80  e5d17003          LDRB     r7,[r1,#3]
001a84  e3a0a000          MOV      r10,#0
001a88  e2078001          AND      r8,r7,#1
001a8c  e00a900a          AND      r9,r10,r10
001a90  e1a09489          LSL      r9,r9,#9
001a94  e1897ba8          ORR      r7,r9,r8,LSR #23
001a98  e18e8488          ORR      r8,lr,r8,LSL #9
001a9c  e18ce007          ORR      lr,r12,r7
001aa0  e5d17004          LDRB     r7,[r1,#4]
001aa4  e2077001          AND      r7,r7,#1
001aa8  e00ac00a          AND      r12,r10,r10
001aac  e1a0c40c          LSL      r12,r12,#8
001ab0  e18ccc27          ORR      r12,r12,r7,LSR #24
001ab4  e1888407          ORR      r8,r8,r7,LSL #8
001ab8  e18ee00c          ORR      lr,lr,r12
001abc  e5d17005          LDRB     r7,[r1,#5]
001ac0  e3a09000          MOV      r9,#0
001ac4  e2077001          AND      r7,r7,#1
001ac8  e009c009          AND      r12,r9,r9
001acc  e1a0c38c          LSL      r12,r12,#7
001ad0  e18ccca7          ORR      r12,r12,r7,LSR #25
001ad4  e1a09387          LSL      r9,r7,#7
001ad8  e1a0700e          MOV      r7,lr
001adc  e188e009          ORR      lr,r8,r9
001ae0  e18cc007          ORR      r12,r12,r7
001ae4  e5d17006          LDRB     r7,[r1,#6]
001ae8  e3a08000          MOV      r8,#0
001aec  e2077001          AND      r7,r7,#1
001af0  e0089008          AND      r9,r8,r8
001af4  e1a08007          MOV      r8,r7
001af8  e1a09309          LSL      r9,r9,#6
001afc  e1897d27          ORR      r7,r9,r7,LSR #26
001b00  e18e8308          ORR      r8,lr,r8,LSL #6
001b04  e18ce007          ORR      lr,r12,r7
001b08  e5d17001          LDRB     r7,[r1,#1]
001b0c  e3a09000          MOV      r9,#0
001b10  e207c001          AND      r12,r7,#1
001b14  e0097009          AND      r7,r9,r9
001b18  e1a07287          LSL      r7,r7,#5
001b1c  e1877dac          ORR      r7,r7,r12,LSR #27
001b20  e1a0928c          LSL      r9,r12,#5
001b24  e1a0c00e          MOV      r12,lr
001b28  e188e009          ORR      lr,r8,r9
001b2c  e18cc007          ORR      r12,r12,r7
001b30  e5d1700a          LDRB     r7,[r1,#0xa]
001b34  e3a08000          MOV      r8,#0
001b38  e2077001          AND      r7,r7,#1
001b3c  e0089008          AND      r9,r8,r8
001b40  e1a09209          LSL      r9,r9,#4
001b44  e1899e27          ORR      r9,r9,r7,LSR #28
001b48  e18e7207          ORR      r7,lr,r7,LSL #4
001b4c  e18cc009          ORR      r12,r12,r9
001b50  e2039001          AND      r9,r3,#1
001b54  e008e008          AND      lr,r8,r8
001b58  e1a0e18e          LSL      lr,lr,#3
001b5c  e18eeea9          ORR      lr,lr,r9,LSR #29
001b60  e1a08189          LSL      r8,r9,#3
001b64  e1a0900e          MOV      r9,lr
001b68  e187e008          ORR      lr,r7,r8
001b6c  e18cc009          ORR      r12,r12,r9
001b70  e3a09000          MOV      r9,#0
001b74  e2047003          AND      r7,r4,#3
001b78  e0098009          AND      r8,r9,r9
001b7c  e0977007          ADDS     r7,r7,r7
001b80  e0a88008          ADC      r8,r8,r8
001b84  e18ee007          ORR      lr,lr,r7
001b88  e18cc008          ORR      r12,r12,r8
001b8c  e5d17009          LDRB     r7,[r1,#9]
001b90  e2077001          AND      r7,r7,#1
001b94  e0098009          AND      r8,r9,r9
001b98  e18ee007          ORR      lr,lr,r7
001b9c  e188800c          ORR      r8,r8,r12
001ba0  e6ff9078          UXTH     r9,r8
001ba4  e59fc5e8          LDR      r12,|L1.8596|
001ba8  e1a0800e          MOV      r8,lr
001bac  e1a0e009          MOV      lr,r9
001bb0  e1a0900c          MOV      r9,r12
001bb4  e18e7009          ORR      r7,lr,r9
001bb8  e082e180          ADD      lr,r2,r0,LSL #3
001bbc  e58e7004          STR      r7,[lr,#4]
001bc0  e58e8000          STR      r8,[lr,#0]
;;;785                                               pstParam->eGreenChPrtEn,
;;;786                                               pstParam->eBlueChPrtEn,
;;;787                                               pstParam->eAlphaChPrtEn,
;;;788                                               pstParam->eRastOpEn,
;;;789                                               pstParam->eDestFmt,
;;;790                                               pstParam->eBlndOrder,
;;;791                                               eTranspColEn_valid ,  /* if eRastOpEn is enabled then this parameter will be disabled */ 
;;;792                                               eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;793                                               pstParam->eClipWndEn);
;;;794                break;
001bc4  e320f000          NOP      
                  |L1.7112|
001bc8  e320f000          NOP                            ;755
;;;795             
;;;796        }
;;;797        u8Curr++;
001bcc  e2807001          ADD      r7,r0,#1
001bd0  e20700ff          AND      r0,r7,#0xff
;;;798    
;;;799        /* Update List Pointer */
;;;800        pstCmdList->pu64Current = &pu64Curr[u8Curr];
001bd4  e0827180          ADD      r7,r2,r0,LSL #3
001bd8  e304c000          MOVW     r12,#0x4000
001bdc  e78c7006          STR      r7,[r12,r6]
;;;801    
;;;802        pstCmdList->u32UsedDoubleWords = u8Curr;
001be0  e3047004          MOV      r7,#0x4004
001be4  e7870006          STR      r0,[r7,r6]
;;;803    }
001be8  e8bd87f0          POP      {r4-r10,pc}
;;;804    
                          ENDP

                  vBlit_BlendFillRGB PROC
;;;805    /* ....................................................................... */
;;;806    void vBlit_BlendFillRGB(blit_mem_st* pstMem, blit_BlndFill16_st* pstParam,
001bec  e92d43f0          PUSH     {r4-r9,lr}
;;;807                            ga_list_st* pstCmdList)
;;;808    {
001bf0  e1a04000          MOV      r4,r0
001bf4  e1a05002          MOV      r5,r2
;;;809        uint8_t         u8Curr = 7U;
001bf8  e3a02007          MOV      r2,#7
;;;810        blt_fadeMode_e  eFadeMode_valid;
;;;811        uint64_t*       pu64Curr = (uint64_t*) pstCmdList->pu64Current;
001bfc  e3046000          MOVW     r6,#0x4000
001c00  e7960005          LDR      r0,[r6,r5]
;;;812        
;;;813    
;;;814        if(pstParam->eRastOpEn == GA_EN)
001c04  e5d16005          LDRB     r6,[r1,#5]
001c08  e3560001          CMP      r6,#1
001c0c  1a000001          BNE      |L1.7192|
;;;815        {
;;;816            /* Raster option requires disabled Fading Opt. 
;;;817             * If it is enabled Fade mode will be  assuemed as disbaled */
;;;818            eFadeMode_valid = BLT_NOFADING;
001c10  e3a03000          MOV      r3,#0
001c14  ea000000          B        |L1.7196|
                  |L1.7192|
;;;819        }
;;;820        else
;;;821        {
;;;822            eFadeMode_valid = pstParam->eFadeMode;
001c18  e5d13007          LDRB     r3,[r1,#7]
                  |L1.7196|
;;;823        }
;;;824    
;;;825    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;826    
;;;827        uint32_t u32NeededDW ;
;;;828        
;;;829        u32NeededDW = u8Curr;
;;;830        if(pstParam->eRastOpEn == GA_EN)
;;;831        {
;;;832            u32NeededDW++; /* for raster value */
;;;833        }
;;;834        else
;;;835        {
;;;836            if(eFadeMode_valid != BLT_NOFADING)
;;;837            {
;;;838                u32NeededDW++;  /* for fade factor*/
;;;839            }
;;;840        }
;;;841        u32NeededDW++; /* for command itself */
;;;842    
;;;843        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;844    
;;;845        /* check if there is enough space in command list: */
;;;846        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;847        {
;;;848          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;849          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;850          return;
;;;851        }
;;;852        else 
;;;853        {
;;;854          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;855        }
;;;856    #endif 
;;;857    
;;;858        /* Destination Memory Params */
;;;859        pu64Curr[0] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
001c1c  e3a07000          MOV      r7,#0
001c20  e0077007          AND      r7,r7,r7
001c24  e6ff8077          UXTH     r8,r7
001c28  e594600c          LDR      r6,[r4,#0xc]
001c2c  e1a07006          MOV      r7,r6
001c30  e3886004          ORR      r6,r8,#4
001c34  e51fcc88          LDR      r12,|L1.4020|
001c38  e186600c          ORR      r6,r6,r12
001c3c  e5806004          STR      r6,[r0,#4]
001c40  e5807000          STR      r7,[r0,#0]
;;;860        pu64Curr[1] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
001c44  e1d460b8          LDRH     r6,[r4,#8]
001c48  e7df661f          BFC      r6,#12,#20
001c4c  e3a0c000          MOV      r12,#0
001c50  e00ce00c          AND      lr,r12,r12
001c54  e3a07005          MOV      r7,#5
001c58  e1a08006          MOV      r8,r6
001c5c  e1a0600e          MOV      r6,lr
001c60  e1a0e007          MOV      lr,r7
001c64  e188700c          ORR      r7,r8,r12
001c68  e186800e          ORR      r8,r6,lr
001c6c  e1a06007          MOV      r6,r7
001c70  e6ffc078          UXTH     r12,r8
001c74  e51fecc8          LDR      lr,|L1.4020|
001c78  e18c700e          ORR      r7,r12,lr
001c7c  e1c060f8          STRD     r6,r7,[r0,#8]
;;;861    
;;;862        /* Blitting Area Size */
;;;863        pu64Curr[2] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
001c80  e1d461b0          LDRH     r6,[r4,#0x10]
001c84  e7df661f          BFC      r6,#12,#20
001c88  e3a0e000          MOV      lr,#0
001c8c  e00e800e          AND      r8,lr,lr
001c90  e3a07006          MOV      r7,#6
001c94  e1a0c006          MOV      r12,r6
001c98  e1a06008          MOV      r6,r8
001c9c  e1a08007          MOV      r8,r7
001ca0  e18c700e          ORR      r7,r12,lr
001ca4  e1888006          ORR      r8,r8,r6
001ca8  e30fcfff          MOV      r12,#0xffff
001cac  e1a06007          MOV      r6,r7
001cb0  e1a07008          MOV      r7,r8
001cb4  e1a0800c          MOV      r8,r12
001cb8  e1a0c006          MOV      r12,r6
001cbc  e007e008          AND      lr,r7,r8
001cc0  e51f6d14          LDR      r6,|L1.4020|
001cc4  e1a0800c          MOV      r8,r12
001cc8  e186600e          ORR      r6,r6,lr
001ccc  e5806014          STR      r6,[r0,#0x14]
001cd0  e580c010          STR      r12,[r0,#0x10]
;;;864        pu64Curr[3] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
001cd4  e1d461b2          LDRH     r6,[r4,#0x12]
001cd8  e7df661f          BFC      r6,#12,#20
001cdc  e3a07000          MOV      r7,#0
001ce0  e0077007          AND      r7,r7,r7
001ce4  e6ffc077          UXTH     r12,r7
001ce8  e38ce007          ORR      lr,r12,#7
001cec  e51fcd40          LDR      r12,|L1.4020|
001cf0  e18e700c          ORR      r7,lr,r12
001cf4  e1c061f8          STRD     r6,r7,[r0,#0x18]
;;;865    
;;;866        /*** Operation Specific Params ***/
;;;867    
;;;868        /* Fill Color */
;;;869        pu64Curr[4] = BLT_LOAD_FILLRGB(pstParam->u16Color);
001cf8  e1d160b0          LDRH     r6,[r1,#0]
001cfc  e3a07000          MOV      r7,#0
001d00  e007e007          AND      lr,r7,r7
001d04  e1a0c007          MOV      r12,r7
001d08  e186600c          ORR      r6,r6,r12
001d0c  e1a07006          MOV      r7,r6
001d10  e38e8012          ORR      r8,lr,#0x12
001d14  e51fcd68          LDR      r12,|L1.4020|
001d18  e1a0e007          MOV      lr,r7
001d1c  e188700c          ORR      r7,r8,r12
001d20  e5807024          STR      r7,[r0,#0x24]
001d24  e580e020          STR      lr,[r0,#0x20]
;;;870    
;;;871        /* Source and Destination Alpha Blending */
;;;872        pu64Curr[5] = BLT_LOAD_SRCALPHA(pstParam->u8SrcAlphaVal);
001d28  e5d1600a          LDRB     r6,[r1,#0xa]
001d2c  e3a0c000          MOV      r12,#0
001d30  e00cc00c          AND      r12,r12,r12
001d34  e6ffe07c          UXTH     lr,r12
001d38  e38ee00d          ORR      lr,lr,#0xd
001d3c  e51f7d90          LDR      r7,|L1.4020|
001d40  e187700e          ORR      r7,r7,lr
001d44  e1c062f8          STRD     r6,r7,[r0,#0x28]
;;;873        pu64Curr[6] = BLT_LOAD_DESTALPHA(pstParam->u8DstAlphaVal);
001d48  e5d1c00b          LDRB     r12,[r1,#0xb]
001d4c  e3a0e000          MOV      lr,#0
001d50  e00ee00e          AND      lr,lr,lr
001d54  e6ff607e          UXTH     r6,lr
001d58  e386700f          ORR      r7,r6,#0xf
001d5c  e51fedb0          LDR      lr,|L1.4020|
001d60  e187700e          ORR      r7,r7,lr
001d64  e5807034          STR      r7,[r0,#0x34]
001d68  e580c030          STR      r12,[r0,#0x30]
;;;874    
;;;875        /* Raster Parameter Setup */
;;;876        if(pstParam->eRastOpEn == GA_EN)
001d6c  e5d16005          LDRB     r6,[r1,#5]
001d70  e3560001          CMP      r6,#1
001d74  1a00001b          BNE      |L1.7656|
;;;877        {
;;;878            pu64Curr[u8Curr] = BLT_LOAD_RASTOP(pstParam->eRastOpMode, pstParam->eRastOpValue);
001d78  e5d1600c          LDRB     r6,[r1,#0xc]
001d7c  e3a07000          MOV      r7,#0
001d80  e2066007          AND      r6,r6,#7
001d84  e0077007          AND      r7,r7,r7
001d88  e1a07807          LSL      r7,r7,#16
001d8c  e1877826          ORR      r7,r7,r6,LSR #16
001d90  e1a0c806          LSL      r12,r6,#16
001d94  e5d1600d          LDRB     r6,[r1,#0xd]
001d98  e3a08000          MOV      r8,#0
001d9c  e206600f          AND      r6,r6,#0xf
001da0  e008e008          AND      lr,r8,r8
001da4  e18cc006          ORR      r12,r12,r6
001da8  e18ee007          ORR      lr,lr,r7
001dac  e1a0600c          MOV      r6,r12
001db0  e008800e          AND      r8,r8,lr
001db4  e1a0e006          MOV      lr,r6
001db8  e1a0c00e          MOV      r12,lr
001dbc  e6ff7078          UXTH     r7,r8
001dc0  e1a0600c          MOV      r6,r12
001dc4  e387c015          ORR      r12,r7,#0x15
001dc8  e51fee1c          LDR      lr,|L1.4020|
001dcc  e1a07006          MOV      r7,r6
001dd0  e18c600e          ORR      r6,r12,lr
001dd4  e080c182          ADD      r12,r0,r2,LSL #3
001dd8  e58c6004          STR      r6,[r12,#4]
001ddc  e58c7000          STR      r7,[r12,#0]
;;;879            u8Curr++;
001de0  e2826001          ADD      r6,r2,#1
001de4  e20620ff          AND      r2,r6,#0xff
                  |L1.7656|
;;;880        }
;;;881    
;;;882        /* Fading Factor Setup */
;;;883        if(eFadeMode_valid != BLT_NOFADING)
001de8  e3530000          CMP      r3,#0
001dec  0a00000c          BEQ      |L1.7716|
;;;884        {
;;;885            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
001df0  e5d16009          LDRB     r6,[r1,#9]
001df4  e3a0e000          MOV      lr,#0
001df8  e1a0c006          MOV      r12,r6
001dfc  e00ee00e          AND      lr,lr,lr
001e00  e38ee014          ORR      lr,lr,#0x14
001e04  e51f8e58          LDR      r8,|L1.4020|
001e08  e1a0700c          MOV      r7,r12
001e0c  e18e6008          ORR      r6,lr,r8
001e10  e080c182          ADD      r12,r0,r2,LSL #3
001e14  e58c6004          STR      r6,[r12,#4]
001e18  e58c7000          STR      r7,[r12,#0]
;;;886            u8Curr++;
001e1c  e2826001          ADD      r6,r2,#1
001e20  e20620ff          AND      r2,r6,#0xff
                  |L1.7716|
;;;887        }
;;;888    
;;;889        /* Blit Blend. Preset 16-bit RGB  */
;;;890        pu64Curr[u8Curr] = BLT_BPRST_RGB16(pstParam->eRedChPrtEn,
001e24  e5d16002          LDRB     r6,[r1,#2]
001e28  e3a0c000          MOV      r12,#0
001e2c  e2066001          AND      r6,r6,#1
001e30  e00c700c          AND      r7,r12,r12
001e34  e1a07507          LSL      r7,r7,#10
001e38  e1878b26          ORR      r8,r7,r6,LSR #22
001e3c  e1a07506          LSL      r7,r6,#10
001e40  e5d16003          LDRB     r6,[r1,#3]
001e44  e2066001          AND      r6,r6,#1
001e48  e00cc00c          AND      r12,r12,r12
001e4c  e1a0c48c          LSL      r12,r12,#9
001e50  e18ceba6          ORR      lr,r12,r6,LSR #23
001e54  e187c486          ORR      r12,r7,r6,LSL #9
001e58  e188700e          ORR      r7,r8,lr
001e5c  e5d16004          LDRB     r6,[r1,#4]
001e60  e3a08000          MOV      r8,#0
001e64  e2066001          AND      r6,r6,#1
001e68  e008e008          AND      lr,r8,r8
001e6c  e1a0e40e          LSL      lr,lr,#8
001e70  e18eec26          ORR      lr,lr,r6,LSR #24
001e74  e18cc406          ORR      r12,r12,r6,LSL #8
001e78  e187600e          ORR      r6,r7,lr
001e7c  e3a07000          MOV      r7,#0
001e80  e18cc007          ORR      r12,r12,r7
001e84  e1877006          ORR      r7,r7,r6
001e88  e5d16005          LDRB     r6,[r1,#5]
001e8c  e2066001          AND      r6,r6,#1
001e90  e008e008          AND      lr,r8,r8
001e94  e1a0e30e          LSL      lr,lr,#6
001e98  e18eed26          ORR      lr,lr,r6,LSR #26
001e9c  e1a08007          MOV      r8,r7
001ea0  e18c7306          ORR      r7,r12,r6,LSL #6
001ea4  e188800e          ORR      r8,r8,lr
001ea8  e3a0c000          MOV      r12,#0
001eac  e187e00c          ORR      lr,r7,r12
001eb0  e18cc008          ORR      r12,r12,r8
001eb4  e3a07000          MOV      r7,#0
001eb8  e1a06007          MOV      r6,r7
001ebc  e187700e          ORR      r7,r7,lr
001ec0  e18ce006          ORR      lr,r12,r6
001ec4  e5d16006          LDRB     r6,[r1,#6]
001ec8  e3a0c000          MOV      r12,#0
001ecc  e2066001          AND      r6,r6,#1
001ed0  e00c800c          AND      r8,r12,r12
001ed4  e1a0c006          MOV      r12,r6
001ed8  e1a08188          LSL      r8,r8,#3
001edc  e1886ea6          ORR      r6,r8,r6,LSR #29
001ee0  e1a0800e          MOV      r8,lr
001ee4  e187e18c          ORR      lr,r7,r12,LSL #3
001ee8  e1887006          ORR      r7,r8,r6
001eec  e3a06000          MOV      r6,#0
001ef0  e203c003          AND      r12,r3,#3
001ef4  e0066006          AND      r6,r6,r6
001ef8  e09cc00c          ADDS     r12,r12,r12
001efc  e0a66006          ADC      r6,r6,r6
001f00  e18e800c          ORR      r8,lr,r12
001f04  e187e006          ORR      lr,r7,r6
001f08  e5d16008          LDRB     r6,[r1,#8]
001f0c  e3a09000          MOV      r9,#0
001f10  e2066001          AND      r6,r6,#1
001f14  e0097009          AND      r7,r9,r9
001f18  e188c006          ORR      r12,r8,r6
001f1c  e18e8007          ORR      r8,lr,r7
001f20  e6ff7078          UXTH     r7,r8
001f24  e59f826c          LDR      r8,|L1.8600|
001f28  e18c6009          ORR      r6,r12,r9
001f2c  e1877008          ORR      r7,r7,r8
001f30  e080c182          ADD      r12,r0,r2,LSL #3
001f34  e1cc60f0          STRD     r6,r7,[r12,#0]
;;;891                                           pstParam->eGreenChPrtEn,
;;;892                                           pstParam->eBlueChPrtEn,
;;;893                                           pstParam->eRastOpEn,
;;;894                                           pstParam->eBlndOrder,
;;;895                                           eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;896                                           pstParam->eClipWndEn);
;;;897        u8Curr++;
001f38  e2826001          ADD      r6,r2,#1
001f3c  e20620ff          AND      r2,r6,#0xff
;;;898    
;;;899        /* Update List Pointer */
;;;900        pstCmdList->pu64Current = &pu64Curr[u8Curr];
001f40  e0806182          ADD      r6,r0,r2,LSL #3
001f44  e3047000          MOVW     r7,#0x4000
001f48  e7876005          STR      r6,[r7,r5]
;;;901    
;;;902        pstCmdList->u32UsedDoubleWords = u8Curr;
001f4c  e3046004          MOV      r6,#0x4004
001f50  e7862005          STR      r2,[r6,r5]
;;;903    
;;;904    }
001f54  e8bd83f0          POP      {r4-r9,pc}
;;;905    
                          ENDP

                  vBlit_BlendFillRGBA PROC
;;;906    /* ....................................................................... */
;;;907    void vBlit_BlendFillRGBA(blit_mem_st* pstMem, blit_BlndFill32_st* pstParam,
001f58  e92d43f0          PUSH     {r4-r9,lr}
;;;908                             ga_list_st* pstCmdList)
;;;909    {
001f5c  e1a04000          MOV      r4,r0
001f60  e1a05002          MOV      r5,r2
;;;910        uint8_t u8Curr = 5U;
001f64  e3a02005          MOV      r2,#5
;;;911        blt_fadeMode_e  eFadeMode_valid;
;;;912        uint64_t* pu64Curr = (uint64_t*) pstCmdList->pu64Current;
001f68  e3046000          MOVW     r6,#0x4000
001f6c  e7960005          LDR      r0,[r6,r5]
;;;913    
;;;914        if(pstParam->eRastOpEn == GA_EN)
001f70  e5d16008          LDRB     r6,[r1,#8]
001f74  e3560001          CMP      r6,#1
001f78  1a000001          BNE      |L1.8068|
;;;915        {
;;;916            /* Raster option requires disabled Fading Opt. 
;;;917             * If it is enabled Fade mode will be  assuemed as disbaled */
;;;918            eFadeMode_valid = BLT_NOFADING;
001f7c  e3a03000          MOV      r3,#0
001f80  ea000000          B        |L1.8072|
                  |L1.8068|
;;;919        }
;;;920        else
;;;921        {
;;;922            eFadeMode_valid = pstParam->eFadeMode;
001f84  e5d1300a          LDRB     r3,[r1,#0xa]
                  |L1.8072|
;;;923        }
;;;924    
;;;925    #ifdef  GA_CMDSLIST_BOUNDARY_CHECK
;;;926    
;;;927        uint32_t u32NeededDW ;
;;;928        
;;;929        u32NeededDW = u8Curr;
;;;930        if(pstParam->eRastOpEn == GA_EN)
;;;931        {
;;;932            u32NeededDW++; /* for raster value */
;;;933        }
;;;934        else
;;;935        {
;;;936            if(eFadeMode_valid != BLT_NOFADING)
;;;937            {
;;;938                u32NeededDW++;  /* for fade factor*/
;;;939            }
;;;940        }
;;;941        u32NeededDW++; /* for command itself */
;;;942    
;;;943        u32NeededDW += RESERVED_FOR_END_CMD; /* 1 Double word more for later END command */
;;;944    
;;;945        /* check if there is enough space in command list: */
;;;946        if ( i32GA_CheckList(pstCmdList, u32NeededDW) == C_FAILED)
;;;947        {
;;;948          pstCmdList->i32FreeSpaceStat = C_FAILED;
;;;949          pstCmdList->u32UsedDoubleWords = u32NeededDW;
;;;950          return;
;;;951        }
;;;952        else 
;;;953        {
;;;954          pstCmdList->i32FreeSpaceStat = C_SUCCESS;
;;;955        }
;;;956    #endif 
;;;957    
;;;958        /* Destination Memory Params */
;;;959        pu64Curr[0] = BLT_LOAD_DESTADDR(pstMem->u32DstAddr);
001f88  e3a07000          MOV      r7,#0
001f8c  e0077007          AND      r7,r7,r7
001f90  e6ffe077          UXTH     lr,r7
001f94  e38ee004          ORR      lr,lr,#4
001f98  e594600c          LDR      r6,[r4,#0xc]
001f9c  e51f8ff0          LDR      r8,|L1.4020|
001fa0  e18e7008          ORR      r7,lr,r8
001fa4  e1c060f0          STRD     r6,r7,[r0,#0]
;;;960        pu64Curr[1] = BLT_LOAD_DESTWIDTH(pstMem->u16DstWidth);
001fa8  e1d460b8          LDRH     r6,[r4,#8]
001fac  e7df661f          BFC      r6,#12,#20
001fb0  e3a07000          MOV      r7,#0
001fb4  e0077007          AND      r7,r7,r7
001fb8  e6ffc077          UXTH     r12,r7
001fbc  e38ce005          ORR      lr,r12,#5
001fc0  e1a07008          MOV      r7,r8
001fc4  e1a08006          MOV      r8,r6
001fc8  e18e6007          ORR      r6,lr,r7
001fcc  e580600c          STR      r6,[r0,#0xc]
001fd0  e5808008          STR      r8,[r0,#8]
;;;961    
;;;962        /* Blitting Area Size */
;;;963        pu64Curr[2] = BLT_LOAD_DESTDOTCNT(pstMem->u16DotCnt);
001fd4  e1d461b0          LDRH     r6,[r4,#0x10]
001fd8  e7df661f          BFC      r6,#12,#20
001fdc  e3a0c000          MOV      r12,#0
001fe0  e00cc00c          AND      r12,r12,r12
001fe4  e1a0e006          MOV      lr,r6
001fe8  e38c6006          ORR      r6,r12,#6
001fec  e1866007          ORR      r6,r6,r7
001ff0  e5806014          STR      r6,[r0,#0x14]
001ff4  e580e010          STR      lr,[r0,#0x10]
;;;964        pu64Curr[3] = BLT_LOAD_DESTLINECNT(pstMem->u16LineCnt);
001ff8  e1d461b2          LDRH     r6,[r4,#0x12]
001ffc  e7df661f          BFC      r6,#12,#20
002000  e3a0c000          MOV      r12,#0
002004  e1a07006          MOV      r7,r6
002008  e00ce00c          AND      lr,r12,r12
00200c  e1a0600c          MOV      r6,r12
002010  e1877006          ORR      r7,r7,r6
002014  e6ffc07e          UXTH     r12,lr
002018  e1a0e007          MOV      lr,r7
00201c  e38c6007          ORR      r6,r12,#7
002020  e59fc174          LDR      r12,|L1.8604|
002024  e186600c          ORR      r6,r6,r12
002028  e580601c          STR      r6,[r0,#0x1c]
00202c  e5807018          STR      r7,[r0,#0x18]
;;;965    
;;;966        /* Fill Color */
;;;967        pu64Curr[4] = BLT_LOAD_FILLRGBA(pstParam->u32Color);
002030  e3a0e000          MOV      lr,#0
002034  e5916000          LDR      r6,[r1,#0]
002038  e1a0c006          MOV      r12,r6
00203c  e00e600e          AND      r6,lr,lr
002040  e1a0700e          MOV      r7,lr
002044  e18cc007          ORR      r12,r12,r7
002048  e6ffe076          UXTH     lr,r6
00204c  e38e7011          ORR      r7,lr,#0x11
002050  e59fe144          LDR      lr,|L1.8604|
002054  e187700e          ORR      r7,r7,lr
002058  e5807024          STR      r7,[r0,#0x24]
00205c  e580c020          STR      r12,[r0,#0x20]
;;;968    
;;;969        /*** Operation Specific Params ***/
;;;970    
;;;971        /* Raster Parameter Setup */
;;;972        if(pstParam->eRastOpEn == GA_EN)
002060  e5d16008          LDRB     r6,[r1,#8]
002064  e3560001          CMP      r6,#1
002068  1a00001a          BNE      |L1.8408|
;;;973        {
;;;974            pu64Curr[u8Curr] = BLT_LOAD_RASTOP(pstParam->eRastOpMode, pstParam->eRastOpValue);
00206c  e5d1600d          LDRB     r6,[r1,#0xd]
002070  e3a0e000          MOV      lr,#0
002074  e2066007          AND      r6,r6,#7
002078  e00e700e          AND      r7,lr,lr
00207c  e1a07807          LSL      r7,r7,#16
002080  e1878826          ORR      r8,r7,r6,LSR #16
002084  e1a0c806          LSL      r12,r6,#16
002088  e5d1600e          LDRB     r6,[r1,#0xe]
00208c  e206600f          AND      r6,r6,#0xf
002090  e00ee00e          AND      lr,lr,lr
002094  e18c7006          ORR      r7,r12,r6
002098  e188800e          ORR      r8,r8,lr
00209c  e1a0e007          MOV      lr,r7
0020a0  e1a0c00e          MOV      r12,lr
0020a4  e3a0e000          MOV      lr,#0
0020a8  e18c600e          ORR      r6,r12,lr
0020ac  e3a07015          MOV      r7,#0x15
0020b0  e1a0c006          MOV      r12,r6
0020b4  e1a0e007          MOV      lr,r7
0020b8  e59f60dc          LDR      r6,|L1.8604|
0020bc  e1a0700c          MOV      r7,r12
0020c0  e186600e          ORR      r6,r6,lr
0020c4  e080c182          ADD      r12,r0,r2,LSL #3
0020c8  e58c6004          STR      r6,[r12,#4]
0020cc  e58c7000          STR      r7,[r12,#0]
;;;975            u8Curr++;
0020d0  e2826001          ADD      r6,r2,#1
0020d4  e20620ff          AND      r2,r6,#0xff
                  |L1.8408|
;;;976        }
;;;977    
;;;978        /* Fading Factor Setup */
;;;979        if(eFadeMode_valid != BLT_NOFADING)
0020d8  e3530000          CMP      r3,#0
0020dc  0a000010          BEQ      |L1.8484|
;;;980        {
;;;981            pu64Curr[u8Curr] = BLT_LOAD_FADEFACT(pstParam->u8FadingFctr);
0020e0  e5d1700c          LDRB     r7,[r1,#0xc]
0020e4  e3a0e000          MOV      lr,#0
0020e8  e00e600e          AND      r6,lr,lr
0020ec  e187c00e          ORR      r12,r7,lr
0020f0  e1a0700c          MOV      r7,r12
0020f4  e3868014          ORR      r8,r6,#0x14
0020f8  e1a0c00e          MOV      r12,lr
0020fc  e59f6098          LDR      r6,|L1.8604|
002100  e1a0e007          MOV      lr,r7
002104  e1a07008          MOV      r7,r8
002108  e1a08006          MOV      r8,r6
00210c  e18e600c          ORR      r6,lr,r12
002110  e1877008          ORR      r7,r7,r8
002114  e080c182          ADD      r12,r0,r2,LSL #3
002118  e1cc60f0          STRD     r6,r7,[r12,#0]
;;;982            u8Curr++;
00211c  e2826001          ADD      r6,r2,#1
002120  e20620ff          AND      r2,r6,#0xff
                  |L1.8484|
;;;983        }
;;;984    
;;;985        /* Blit Blend. Preset 16-bit RGB  */
;;;986        pu64Curr[u8Curr] = BLT_BPRST_RGBA32(pstParam->eRedChPrtEn,
002124  e5d16004          LDRB     r6,[r1,#4]
002128  e3a07000          MOV      r7,#0
00212c  e2066001          AND      r6,r6,#1
002130  e0077007          AND      r7,r7,r7
002134  e1a07507          LSL      r7,r7,#10
002138  e1877b26          ORR      r7,r7,r6,LSR #22
00213c  e1a0c506          LSL      r12,r6,#10
002140  e5d16005          LDRB     r6,[r1,#5]
002144  e3a09000          MOV      r9,#0
002148  e206e001          AND      lr,r6,#1
00214c  e0098009          AND      r8,r9,r9
002150  e1a08488          LSL      r8,r8,#9
002154  e1886bae          ORR      r6,r8,lr,LSR #23
002158  e18cc48e          ORR      r12,r12,lr,LSL #9
00215c  e1877006          ORR      r7,r7,r6
002160  e5d16006          LDRB     r6,[r1,#6]
002164  e2066001          AND      r6,r6,#1
002168  e1a0e409          LSL      lr,r9,#8
00216c  e18eec26          ORR      lr,lr,r6,LSR #24
002170  e1a08406          LSL      r8,r6,#8
002174  e1a06007          MOV      r6,r7
002178  e18c7008          ORR      r7,r12,r8
00217c  ea000007          B        |L1.8608|
                  |L1.8576|
                          DCD      0x11030000
                  |L1.8580|
                          DCD      0x11070000
                  |L1.8584|
                          DCD      0x110b0000
                  |L1.8588|
                          DCD      0x11050000
                  |L1.8592|
                          DCD      0x110f0000
                  |L1.8596|
                          DCD      0x110d0000
                  |L1.8600|
                          DCD      0x11130000
                  |L1.8604|
                          DCD      0x01010000
                  |L1.8608|
0021a0  e186c00e          ORR      r12,r6,lr
0021a4  e5d16007          LDRB     r6,[r1,#7]
0021a8  e206e001          AND      lr,r6,#1
0021ac  e0098009          AND      r8,r9,r9
0021b0  e1a08388          LSL      r8,r8,#7
0021b4  e1886cae          ORR      r6,r8,lr,LSR #25
0021b8  e187838e          ORR      r8,r7,lr,LSL #7
0021bc  e18c7006          ORR      r7,r12,r6
0021c0  e5d16008          LDRB     r6,[r1,#8]
0021c4  e2066001          AND      r6,r6,#1
0021c8  e009c009          AND      r12,r9,r9
0021cc  e1a0c30c          LSL      r12,r12,#6
0021d0  e18ccd26          ORR      r12,r12,r6,LSR #26
0021d4  e1886306          ORR      r6,r8,r6,LSL #6
0021d8  e187e00c          ORR      lr,r7,r12
0021dc  e3a0c000          MOV      r12,#0
0021e0  e1a0700c          MOV      r7,r12
0021e4  e18cc006          ORR      r12,r12,r6
0021e8  e187700e          ORR      r7,r7,lr
0021ec  e3a0e000          MOV      lr,#0
0021f0  e1a0600e          MOV      r6,lr
0021f4  e18ee00c          ORR      lr,lr,r12
0021f8  e1878006          ORR      r8,r7,r6
0021fc  e5d16009          LDRB     r6,[r1,#9]
002200  e2066001          AND      r6,r6,#1
002204  e0097009          AND      r7,r9,r9
002208  e1a07187          LSL      r7,r7,#3
00220c  e1877ea6          ORR      r7,r7,r6,LSR #29
002210  e18ee186          ORR      lr,lr,r6,LSL #3
002214  e188c007          ORR      r12,r8,r7
002218  e2038003          AND      r8,r3,#3
00221c  e0097009          AND      r7,r9,r9
002220  e0986008          ADDS     r6,r8,r8
002224  e0a77007          ADC      r7,r7,r7
002228  e1a0800c          MOV      r8,r12
00222c  e18ec006          ORR      r12,lr,r6
002230  e1877008          ORR      r7,r7,r8
002234  e5d1600b          LDRB     r6,[r1,#0xb]
002238  e2066001          AND      r6,r6,#1
00223c  e009e009          AND      lr,r9,r9
002240  e186600c          ORR      r6,r6,r12
002244  e187700e          ORR      r7,r7,lr
002248  e6ff8077          UXTH     r8,r7
00224c  e59f703c          LDR      r7,|L1.8848|
002250  e1a0e006          MOV      lr,r6
002254  e1a06008          MOV      r6,r8
002258  e1a08007          MOV      r8,r7
00225c  e18e7009          ORR      r7,lr,r9
002260  e1866008          ORR      r6,r6,r8
002264  e080c182          ADD      r12,r0,r2,LSL #3
002268  e58c6004          STR      r6,[r12,#4]
00226c  e58c7000          STR      r7,[r12,#0]
;;;987                                            pstParam->eGreenChPrtEn,
;;;988                                            pstParam->eBlueChPrtEn,
;;;989                                            pstParam->eAlphaChPrtEn,
;;;990                                            pstParam->eRastOpEn,
;;;991                                            pstParam->eBlndOrder,
;;;992                                            eFadeMode_valid,      /* if eRastOpEn is enabled then this parameter will be disabled */
;;;993                                            pstParam->eClipWndEn);
;;;994        u8Curr++;
002270  e2826001          ADD      r6,r2,#1
002274  e20620ff          AND      r2,r6,#0xff
;;;995    
;;;996        /* Update List Pointer */
;;;997        pstCmdList->pu64Current = &pu64Curr[u8Curr];
002278  e0806182          ADD      r6,r0,r2,LSL #3
00227c  e3047000          MOVW     r7,#0x4000
002280  e7876005          STR      r6,[r7,r5]
;;;998    
;;;999        pstCmdList->u32UsedDoubleWords = u8Curr;
002284  e3046004          MOV      r6,#0x4004
002288  e7862005          STR      r2,[r6,r5]
;;;1000   
;;;1001   }
00228c  e8bd83f0          POP      {r4-r9,pc}
;;;1002   /****************************************************************************/
                          ENDP

                  |L1.8848|
                          DCD      0x11170000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_GA_BLIT_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313420          DCB      0x2e,0x31,0x34,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_GA_BLIT_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  375f4746          DCB      0x37,0x5f,0x47,0x46
000024  58202400          DCB      0x58,0x20,0x24,0x00
                  au8LLDD_GA_BLIT_H_REVISION
000028  24526576          DCB      0x24,0x52,0x65,0x76
00002c  6973696f          DCB      0x69,0x73,0x69,0x6f
000030  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000034  2e313520          DCB      0x2e,0x31,0x35,0x20
000038  2400              DCB      0x24,0x00
                  au8LLDD_GA_BLIT_H_TAG
00003a  244e              DCB      0x24,0x4e
00003c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000040  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000044  445f315f          DCB      0x44,0x5f,0x31,0x5f
000048  375f4746          DCB      0x37,0x5f,0x47,0x46
00004c  58202400          DCB      0x58,0x20,0x24,0x00
