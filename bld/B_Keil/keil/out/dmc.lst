L 1 "..\..\..\..\lldd\src\dmc.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC low level driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.20 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "dmc_io.h"                   /* DMC registers, bits and access macros defintion */
L 1 "..\..\..\..\lldd\hdr\dmc_io.h" 1
N/*##########################################################################    
N/  AUTOMATICALLY GENERATED FROM A REG_XML-FILE 
N/  Module                       : pl340_dmc_PL340r4p0_53e 
N/  Date of creation (y-m-d:time): 2015-02-10+01:00  :  10:13:21.822+01:00
N/  Excel2XML Tool ver.          : 
N/  Stylesheet  ver              : $Revision: 1.10 $ 
N/  Excel Sheet ver.             : vr4p0_v1.0
N/  Excel Sheet date             : 10.01.2015
N/  Excel Sheet author           : TEE_SPIRIT_CONVERTER_SCRIPT Ver.:v1.3
N/##########################################################################*/
N
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : DMC low level driver io-header file
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.10 $ 
N*   DATE        : $Date: 2015/05/27 12:19:07 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary and Confidential
N*****************************************************************************/
N#ifndef DMC_IO_H
N#define DMC_IO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N/* Following include file(s) needed for proper operation: */
N#include "captypes.h"                      /* Core specific primitive type definitions */ 
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 37 "..\..\..\..\lldd\hdr\dmc_io.h" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_IO_H_REVISION     "$Revision: 1.10 $"
N#define LLDD_DMC_IO_H_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N/* disable following Misra errors for io files */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1  [R] : No more than 31 chars to determine an identifier */
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S  #pragma ghs nowarning 1861  /* Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words and standard library names */
S  #pragma ghs nowarning 1862  /* Rule 19.7 [A] : Disable function-like macro not allowed */
N#endif     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memc_status                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01000                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memc_status_REG__       0xc0d01000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   memc_status	:2; 	 /* 0..1  bit(s) R */
N  uint32_t   max_memory_width	:2; 	 /* 2..3  bit(s) R */
N  uint32_t   memory_support	:3; 	 /* 4..6  bit(s) R */
N  uint32_t   memory_chips	:2; 	 /* 7..8  bit(s) R */
N  uint32_t   banks_bit0	:1; 	 /* 9..9  bit(s) R */
N  uint32_t   exclusive_monitors	:2; 	 /* 10..11  bit(s) R */
N  uint32_t   banks_bit1	:1; 	 /* 12..12  bit(s) R */ 
N  uint32_t   Reserved0	:19; 	 /* 13..31  bit(s) R */                    
N} memc_status_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memc_status_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemc_status()     ((volatile memc_status_bit_view_st *)\
N(memc_status_REG__ ))
X#define pst_bitmemc_status()     ((volatile memc_status_bit_view_st *)(memc_status_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memc_status()     ((volatile u32memc_status_word_view *)\
N(memc_status_REG__ ))
X#define pu32memc_status()     ((volatile u32memc_status_word_view *)(memc_status_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetmemc_status_memc_status() (pst_bitmemc_status() -> memc_status)            
N#define biGetmemc_status_max_memory_width() (pst_bitmemc_status() -> max_memory_width)            
N#define biGetmemc_status_memory_support() (pst_bitmemc_status() -> memory_support)            
N#define biGetmemc_status_memory_chips() (pst_bitmemc_status() -> memory_chips)            
N#define biGetmemc_status_banks_bit0() (pst_bitmemc_status() -> banks_bit0)            
N#define biGetmemc_status_exclusive_monitors() (pst_bitmemc_status() -> exclusive_monitors)            
N#define biGetmemc_status_banks_bit1() (pst_bitmemc_status() -> banks_bit1)            
N            
N/* Word access */
N
N#define u32Getmemc_status()  (*pu32memc_status() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memc_cmd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01004                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memc_cmd_REG__       0xc0d01004U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   memc_cmd	:3; 	 /* 0..2  bit(s) W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) W */                    
N} memc_cmd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memc_cmd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemc_cmd()     ((volatile memc_cmd_bit_view_st *)\
N(memc_cmd_REG__ ))
X#define pst_bitmemc_cmd()     ((volatile memc_cmd_bit_view_st *)(memc_cmd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memc_cmd()     ((volatile u32memc_cmd_word_view *)\
N(memc_cmd_REG__ ))
X#define pu32memc_cmd()     ((volatile u32memc_cmd_word_view *)(memc_cmd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetmemc_cmd_memc_cmd(ParValue) (pst_bitmemc_cmd() -> memc_cmd=(ParValue)) 
N            
N/* Word access */
N#define vSetmemc_cmd(ParValue)  (*pu32memc_cmd() = (ParValue))
N#define u32Getmemc_cmd()  (*pu32memc_cmd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: direct_cmd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01008                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define direct_cmd_REG__       0xc0d01008U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   addr_13_to_0	:14; 	 /* 0..13  bit(s) W */
N  uint32_t   Reserved0	:2; 	 /* 14..15  bit(s) W */
N  uint32_t   bank_addr	:2; 	 /* 16..17  bit(s) W */
N  uint32_t   memory_cmd	:2; 	 /* 18..19  bit(s) W */
N  uint32_t   chip_nmbr	:2; 	 /* 20..21  bit(s) W */
N  uint32_t   ext_mem_cmd	:1; 	 /* 22..22  bit(s) W */ 
N  uint32_t   Reserved1	:9; 	 /* 23..31  bit(s) W */                    
N} direct_cmd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32direct_cmd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitdirect_cmd()     ((volatile direct_cmd_bit_view_st *)\
N(direct_cmd_REG__ ))
X#define pst_bitdirect_cmd()     ((volatile direct_cmd_bit_view_st *)(direct_cmd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32direct_cmd()     ((volatile u32direct_cmd_word_view *)\
N(direct_cmd_REG__ ))
X#define pu32direct_cmd()     ((volatile u32direct_cmd_word_view *)(direct_cmd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetdirect_cmd_addr_13_to_0(ParValue) (pst_bitdirect_cmd() -> addr_13_to_0=(ParValue)) 
N#define vSetdirect_cmd_bank_addr(ParValue) (pst_bitdirect_cmd() -> bank_addr=(ParValue)) 
N#define vSetdirect_cmd_memory_cmd(ParValue) (pst_bitdirect_cmd() -> memory_cmd=(ParValue)) 
N#define vSetdirect_cmd_chip_nmbr(ParValue) (pst_bitdirect_cmd() -> chip_nmbr=(ParValue)) 
N#define vSetdirect_cmd_ext_mem_cmd(ParValue) (pst_bitdirect_cmd() -> ext_mem_cmd=(ParValue)) 
N            
N/* Word access */
N#define vSetdirect_cmd(ParValue)  (*pu32direct_cmd() = (ParValue))
N#define u32Getdirect_cmd()  (*pu32direct_cmd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0100c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg_REG__       0xc0d0100cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   column_bits	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   row_bits	:3; 	 /* 3..5  bit(s) R/W */
N  uint32_t   ap_bit	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   power_dwn_prd	:6; 	 /* 7..12  bit(s) R/W */
N  uint32_t   auto_power_down	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   stop_mem_clock	:1; 	 /* 14..14  bit(s) R/W */
N  uint32_t   memory_burst	:3; 	 /* 15..17  bit(s) R/W */
N  uint32_t   qos_master_bits	:3; 	 /* 18..20  bit(s) R/W */
N  uint32_t   active_chips	:2; 	 /* 21..22  bit(s) R/W */ 
N  uint32_t   Reserved0	:9; 	 /* 23..31  bit(s) R/W */                    
N} memory_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg()     ((volatile memory_cfg_bit_view_st *)\
N(memory_cfg_REG__ ))
X#define pst_bitmemory_cfg()     ((volatile memory_cfg_bit_view_st *)(memory_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg()     ((volatile u32memory_cfg_word_view *)\
N(memory_cfg_REG__ ))
X#define pu32memory_cfg()     ((volatile u32memory_cfg_word_view *)(memory_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg_column_bits() (pst_bitmemory_cfg() -> column_bits)
N#define vSetmemory_cfg_column_bits(ParValue)  (pst_bitmemory_cfg() -> column_bits=(ParValue))
N#define biGetmemory_cfg_row_bits() (pst_bitmemory_cfg() -> row_bits)
N#define vSetmemory_cfg_row_bits(ParValue)  (pst_bitmemory_cfg() -> row_bits=(ParValue))
N#define biGetmemory_cfg_ap_bit() (pst_bitmemory_cfg() -> ap_bit)
N#define vSetmemory_cfg_ap_bit(ParValue)  (pst_bitmemory_cfg() -> ap_bit=(ParValue))
N#define biGetmemory_cfg_power_dwn_prd() (pst_bitmemory_cfg() -> power_dwn_prd)
N#define vSetmemory_cfg_power_dwn_prd(ParValue)  (pst_bitmemory_cfg() -> power_dwn_prd=(ParValue))
N#define biGetmemory_cfg_auto_power_down() (pst_bitmemory_cfg() -> auto_power_down)
N#define vSetmemory_cfg_auto_power_down(ParValue)  (pst_bitmemory_cfg() -> auto_power_down=(ParValue))
N#define biGetmemory_cfg_stop_mem_clock() (pst_bitmemory_cfg() -> stop_mem_clock)
N#define vSetmemory_cfg_stop_mem_clock(ParValue)  (pst_bitmemory_cfg() -> stop_mem_clock=(ParValue))
N#define biGetmemory_cfg_memory_burst() (pst_bitmemory_cfg() -> memory_burst)
N#define vSetmemory_cfg_memory_burst(ParValue)  (pst_bitmemory_cfg() -> memory_burst=(ParValue))
N#define biGetmemory_cfg_qos_master_bits() (pst_bitmemory_cfg() -> qos_master_bits)
N#define vSetmemory_cfg_qos_master_bits(ParValue)  (pst_bitmemory_cfg() -> qos_master_bits=(ParValue))
N#define biGetmemory_cfg_active_chips() (pst_bitmemory_cfg() -> active_chips)
N#define vSetmemory_cfg_active_chips(ParValue)  (pst_bitmemory_cfg() -> active_chips=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg(ParValue)  (*pu32memory_cfg() = (ParValue))
N#define u32Getmemory_cfg()  (*pu32memory_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: refresh_prd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01010                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define refresh_prd_REG__       0xc0d01010U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   refresh_prd	:15; 	 /* 0..14  bit(s) R/W */ 
N  uint32_t   Reserved0	:17; 	 /* 15..31  bit(s) R/W */                    
N} refresh_prd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32refresh_prd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitrefresh_prd()     ((volatile refresh_prd_bit_view_st *)\
N(refresh_prd_REG__ ))
X#define pst_bitrefresh_prd()     ((volatile refresh_prd_bit_view_st *)(refresh_prd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32refresh_prd()     ((volatile u32refresh_prd_word_view *)\
N(refresh_prd_REG__ ))
X#define pu32refresh_prd()     ((volatile u32refresh_prd_word_view *)(refresh_prd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetrefresh_prd_refresh_prd() (pst_bitrefresh_prd() -> refresh_prd)
N#define vSetrefresh_prd_refresh_prd(ParValue)  (pst_bitrefresh_prd() -> refresh_prd=(ParValue))
N            
N/* Word access */
N#define vSetrefresh_prd(ParValue)  (*pu32refresh_prd() = (ParValue))
N#define u32Getrefresh_prd()  (*pu32refresh_prd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: cas_latency                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01014                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define cas_latency_REG__       0xc0d01014U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   cas_half_cycle	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   cas_latency	:3; 	 /* 1..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} cas_latency_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32cas_latency_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitcas_latency()     ((volatile cas_latency_bit_view_st *)\
N(cas_latency_REG__ ))
X#define pst_bitcas_latency()     ((volatile cas_latency_bit_view_st *)(cas_latency_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32cas_latency()     ((volatile u32cas_latency_word_view *)\
N(cas_latency_REG__ ))
X#define pu32cas_latency()     ((volatile u32cas_latency_word_view *)(cas_latency_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetcas_latency_cas_half_cycle() (pst_bitcas_latency() -> cas_half_cycle)
N#define vSetcas_latency_cas_half_cycle(ParValue)  (pst_bitcas_latency() -> cas_half_cycle=(ParValue))
N#define biGetcas_latency_cas_latency() (pst_bitcas_latency() -> cas_latency)
N#define vSetcas_latency_cas_latency(ParValue)  (pst_bitcas_latency() -> cas_latency=(ParValue))
N            
N/* Word access */
N#define vSetcas_latency(ParValue)  (*pu32cas_latency() = (ParValue))
N#define u32Getcas_latency()  (*pu32cas_latency() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_dqss                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01018                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_dqss_REG__       0xc0d01018U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_dqss	:2; 	 /* 0..1  bit(s) R/W */ 
N  uint32_t   Reserved0	:30; 	 /* 2..31  bit(s) R/W */                    
N} t_dqss_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_dqss_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_dqss()     ((volatile t_dqss_bit_view_st *)\
N(t_dqss_REG__ ))
X#define pst_bitt_dqss()     ((volatile t_dqss_bit_view_st *)(t_dqss_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_dqss()     ((volatile u32t_dqss_word_view *)\
N(t_dqss_REG__ ))
X#define pu32t_dqss()     ((volatile u32t_dqss_word_view *)(t_dqss_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_dqss_t_dqss() (pst_bitt_dqss() -> t_dqss)
N#define vSett_dqss_t_dqss(ParValue)  (pst_bitt_dqss() -> t_dqss=(ParValue))
N            
N/* Word access */
N#define vSett_dqss(ParValue)  (*pu32t_dqss() = (ParValue))
N#define u32Gett_dqss()  (*pu32t_dqss() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_mrd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0101c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_mrd_REG__       0xc0d0101cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_mrd	:7; 	 /* 0..6  bit(s) R/W */ 
N  uint32_t   Reserved0	:25; 	 /* 7..31  bit(s) R/W */                    
N} t_mrd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_mrd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_mrd()     ((volatile t_mrd_bit_view_st *)\
N(t_mrd_REG__ ))
X#define pst_bitt_mrd()     ((volatile t_mrd_bit_view_st *)(t_mrd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_mrd()     ((volatile u32t_mrd_word_view *)\
N(t_mrd_REG__ ))
X#define pu32t_mrd()     ((volatile u32t_mrd_word_view *)(t_mrd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_mrd_t_mrd() (pst_bitt_mrd() -> t_mrd)
N#define vSett_mrd_t_mrd(ParValue)  (pst_bitt_mrd() -> t_mrd=(ParValue))
N            
N/* Word access */
N#define vSett_mrd(ParValue)  (*pu32t_mrd() = (ParValue))
N#define u32Gett_mrd()  (*pu32t_mrd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_ras                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01020                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_ras_REG__       0xc0d01020U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_ras	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_ras_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_ras_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_ras()     ((volatile t_ras_bit_view_st *)\
N(t_ras_REG__ ))
X#define pst_bitt_ras()     ((volatile t_ras_bit_view_st *)(t_ras_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_ras()     ((volatile u32t_ras_word_view *)\
N(t_ras_REG__ ))
X#define pu32t_ras()     ((volatile u32t_ras_word_view *)(t_ras_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_ras_t_ras() (pst_bitt_ras() -> t_ras)
N#define vSett_ras_t_ras(ParValue)  (pst_bitt_ras() -> t_ras=(ParValue))
N            
N/* Word access */
N#define vSett_ras(ParValue)  (*pu32t_ras() = (ParValue))
N#define u32Gett_ras()  (*pu32t_ras() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rc                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01024                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rc_REG__       0xc0d01024U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rc	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_rc_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rc_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rc()     ((volatile t_rc_bit_view_st *)\
N(t_rc_REG__ ))
X#define pst_bitt_rc()     ((volatile t_rc_bit_view_st *)(t_rc_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rc()     ((volatile u32t_rc_word_view *)\
N(t_rc_REG__ ))
X#define pu32t_rc()     ((volatile u32t_rc_word_view *)(t_rc_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rc_t_rc() (pst_bitt_rc() -> t_rc)
N#define vSett_rc_t_rc(ParValue)  (pst_bitt_rc() -> t_rc=(ParValue))
N            
N/* Word access */
N#define vSett_rc(ParValue)  (*pu32t_rc() = (ParValue))
N#define u32Gett_rc()  (*pu32t_rc() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rcd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01028                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rcd_REG__       0xc0d01028U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rcd	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   schedule_rcd	:3; 	 /* 3..5  bit(s) R/W */ 
N  uint32_t   Reserved0	:26; 	 /* 6..31  bit(s) R/W */                    
N} t_rcd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rcd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rcd()     ((volatile t_rcd_bit_view_st *)\
N(t_rcd_REG__ ))
X#define pst_bitt_rcd()     ((volatile t_rcd_bit_view_st *)(t_rcd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rcd()     ((volatile u32t_rcd_word_view *)\
N(t_rcd_REG__ ))
X#define pu32t_rcd()     ((volatile u32t_rcd_word_view *)(t_rcd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rcd_t_rcd() (pst_bitt_rcd() -> t_rcd)
N#define vSett_rcd_t_rcd(ParValue)  (pst_bitt_rcd() -> t_rcd=(ParValue))
N#define biGett_rcd_schedule_rcd() (pst_bitt_rcd() -> schedule_rcd)
N#define vSett_rcd_schedule_rcd(ParValue)  (pst_bitt_rcd() -> schedule_rcd=(ParValue))
N            
N/* Word access */
N#define vSett_rcd(ParValue)  (*pu32t_rcd() = (ParValue))
N#define u32Gett_rcd()  (*pu32t_rcd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rfc                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0102c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rfc_REG__       0xc0d0102cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rfc	:5; 	 /* 0..4  bit(s) R/W */
N  uint32_t   schedule_rfc	:5; 	 /* 5..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} t_rfc_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rfc_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rfc()     ((volatile t_rfc_bit_view_st *)\
N(t_rfc_REG__ ))
X#define pst_bitt_rfc()     ((volatile t_rfc_bit_view_st *)(t_rfc_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rfc()     ((volatile u32t_rfc_word_view *)\
N(t_rfc_REG__ ))
X#define pu32t_rfc()     ((volatile u32t_rfc_word_view *)(t_rfc_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rfc_t_rfc() (pst_bitt_rfc() -> t_rfc)
N#define vSett_rfc_t_rfc(ParValue)  (pst_bitt_rfc() -> t_rfc=(ParValue))
N#define biGett_rfc_schedule_rfc() (pst_bitt_rfc() -> schedule_rfc)
N#define vSett_rfc_schedule_rfc(ParValue)  (pst_bitt_rfc() -> schedule_rfc=(ParValue))
N            
N/* Word access */
N#define vSett_rfc(ParValue)  (*pu32t_rfc() = (ParValue))
N#define u32Gett_rfc()  (*pu32t_rfc() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rp                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01030                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rp_REG__       0xc0d01030U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rp	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   schedule_rp	:3; 	 /* 3..5  bit(s) R/W */ 
N  uint32_t   Reserved0	:26; 	 /* 6..31  bit(s) R/W */                    
N} t_rp_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rp_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rp()     ((volatile t_rp_bit_view_st *)\
N(t_rp_REG__ ))
X#define pst_bitt_rp()     ((volatile t_rp_bit_view_st *)(t_rp_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rp()     ((volatile u32t_rp_word_view *)\
N(t_rp_REG__ ))
X#define pu32t_rp()     ((volatile u32t_rp_word_view *)(t_rp_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rp_t_rp() (pst_bitt_rp() -> t_rp)
N#define vSett_rp_t_rp(ParValue)  (pst_bitt_rp() -> t_rp=(ParValue))
N#define biGett_rp_schedule_rp() (pst_bitt_rp() -> schedule_rp)
N#define vSett_rp_schedule_rp(ParValue)  (pst_bitt_rp() -> schedule_rp=(ParValue))
N            
N/* Word access */
N#define vSett_rp(ParValue)  (*pu32t_rp() = (ParValue))
N#define u32Gett_rp()  (*pu32t_rp() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rrd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01034                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rrd_REG__       0xc0d01034U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rrd	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_rrd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rrd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rrd()     ((volatile t_rrd_bit_view_st *)\
N(t_rrd_REG__ ))
X#define pst_bitt_rrd()     ((volatile t_rrd_bit_view_st *)(t_rrd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rrd()     ((volatile u32t_rrd_word_view *)\
N(t_rrd_REG__ ))
X#define pu32t_rrd()     ((volatile u32t_rrd_word_view *)(t_rrd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rrd_t_rrd() (pst_bitt_rrd() -> t_rrd)
N#define vSett_rrd_t_rrd(ParValue)  (pst_bitt_rrd() -> t_rrd=(ParValue))
N            
N/* Word access */
N#define vSett_rrd(ParValue)  (*pu32t_rrd() = (ParValue))
N#define u32Gett_rrd()  (*pu32t_rrd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_wr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01038                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_wr_REG__       0xc0d01038U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_wr	:3; 	 /* 0..2  bit(s) R/W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) R/W */                    
N} t_wr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_wr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_wr()     ((volatile t_wr_bit_view_st *)\
N(t_wr_REG__ ))
X#define pst_bitt_wr()     ((volatile t_wr_bit_view_st *)(t_wr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_wr()     ((volatile u32t_wr_word_view *)\
N(t_wr_REG__ ))
X#define pu32t_wr()     ((volatile u32t_wr_word_view *)(t_wr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_wr_t_wr() (pst_bitt_wr() -> t_wr)
N#define vSett_wr_t_wr(ParValue)  (pst_bitt_wr() -> t_wr=(ParValue))
N            
N/* Word access */
N#define vSett_wr(ParValue)  (*pu32t_wr() = (ParValue))
N#define u32Gett_wr()  (*pu32t_wr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_wtr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0103c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_wtr_REG__       0xc0d0103cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_wtr	:3; 	 /* 0..2  bit(s) R/W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) R/W */                    
N} t_wtr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_wtr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_wtr()     ((volatile t_wtr_bit_view_st *)\
N(t_wtr_REG__ ))
X#define pst_bitt_wtr()     ((volatile t_wtr_bit_view_st *)(t_wtr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_wtr()     ((volatile u32t_wtr_word_view *)\
N(t_wtr_REG__ ))
X#define pu32t_wtr()     ((volatile u32t_wtr_word_view *)(t_wtr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_wtr_t_wtr() (pst_bitt_wtr() -> t_wtr)
N#define vSett_wtr_t_wtr(ParValue)  (pst_bitt_wtr() -> t_wtr=(ParValue))
N            
N/* Word access */
N#define vSett_wtr(ParValue)  (*pu32t_wtr() = (ParValue))
N#define u32Gett_wtr()  (*pu32t_wtr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_xp                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01040                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_xp_REG__       0xc0d01040U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_xp	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_xp_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_xp_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_xp()     ((volatile t_xp_bit_view_st *)\
N(t_xp_REG__ ))
X#define pst_bitt_xp()     ((volatile t_xp_bit_view_st *)(t_xp_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_xp()     ((volatile u32t_xp_word_view *)\
N(t_xp_REG__ ))
X#define pu32t_xp()     ((volatile u32t_xp_word_view *)(t_xp_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_xp_t_xp() (pst_bitt_xp() -> t_xp)
N#define vSett_xp_t_xp(ParValue)  (pst_bitt_xp() -> t_xp=(ParValue))
N            
N/* Word access */
N#define vSett_xp(ParValue)  (*pu32t_xp() = (ParValue))
N#define u32Gett_xp()  (*pu32t_xp() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_xsr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01044                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_xsr_REG__       0xc0d01044U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_xsr	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_xsr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_xsr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_xsr()     ((volatile t_xsr_bit_view_st *)\
N(t_xsr_REG__ ))
X#define pst_bitt_xsr()     ((volatile t_xsr_bit_view_st *)(t_xsr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_xsr()     ((volatile u32t_xsr_word_view *)\
N(t_xsr_REG__ ))
X#define pu32t_xsr()     ((volatile u32t_xsr_word_view *)(t_xsr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_xsr_t_xsr() (pst_bitt_xsr() -> t_xsr)
N#define vSett_xsr_t_xsr(ParValue)  (pst_bitt_xsr() -> t_xsr=(ParValue))
N            
N/* Word access */
N#define vSett_xsr(ParValue)  (*pu32t_xsr() = (ParValue))
N#define u32Gett_xsr()  (*pu32t_xsr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_esr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01048                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_esr_REG__       0xc0d01048U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_esr	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_esr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_esr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_esr()     ((volatile t_esr_bit_view_st *)\
N(t_esr_REG__ ))
X#define pst_bitt_esr()     ((volatile t_esr_bit_view_st *)(t_esr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_esr()     ((volatile u32t_esr_word_view *)\
N(t_esr_REG__ ))
X#define pu32t_esr()     ((volatile u32t_esr_word_view *)(t_esr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_esr_t_esr() (pst_bitt_esr() -> t_esr)
N#define vSett_esr_t_esr(ParValue)  (pst_bitt_esr() -> t_esr=(ParValue))
N            
N/* Word access */
N#define vSett_esr(ParValue)  (*pu32t_esr() = (ParValue))
N#define u32Gett_esr()  (*pu32t_esr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg2                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0104c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg2_REG__       0xc0d0104cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   clock_cfg	:2; 	 /* 0..1  bit(s) R/W */
N  uint32_t   dqm_init	:1; 	 /* 2..2  bit(s) R/W */
N  uint32_t   cke_init	:1; 	 /* 3..3  bit(s) R/W */
N  uint32_t   memory_width	:2; 	 /* 4..5  bit(s) R/W */
N  uint32_t   memory_protocol	:3; 	 /* 6..8  bit(s) R/W */
N  uint32_t   read_delay	:2; 	 /* 9..10  bit(s) R/W */ 
N  uint32_t   Reserved0	:21; 	 /* 11..31  bit(s) R/W */                    
N} memory_cfg2_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg2_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg2()     ((volatile memory_cfg2_bit_view_st *)\
N(memory_cfg2_REG__ ))
X#define pst_bitmemory_cfg2()     ((volatile memory_cfg2_bit_view_st *)(memory_cfg2_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg2()     ((volatile u32memory_cfg2_word_view *)\
N(memory_cfg2_REG__ ))
X#define pu32memory_cfg2()     ((volatile u32memory_cfg2_word_view *)(memory_cfg2_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg2_clock_cfg() (pst_bitmemory_cfg2() -> clock_cfg)
N#define vSetmemory_cfg2_clock_cfg(ParValue)  (pst_bitmemory_cfg2() -> clock_cfg=(ParValue))
N#define biGetmemory_cfg2_dqm_init() (pst_bitmemory_cfg2() -> dqm_init)
N#define vSetmemory_cfg2_dqm_init(ParValue)  (pst_bitmemory_cfg2() -> dqm_init=(ParValue))
N#define biGetmemory_cfg2_cke_init() (pst_bitmemory_cfg2() -> cke_init)
N#define vSetmemory_cfg2_cke_init(ParValue)  (pst_bitmemory_cfg2() -> cke_init=(ParValue))
N#define biGetmemory_cfg2_memory_width() (pst_bitmemory_cfg2() -> memory_width)
N#define vSetmemory_cfg2_memory_width(ParValue)  (pst_bitmemory_cfg2() -> memory_width=(ParValue))
N#define biGetmemory_cfg2_memory_protocol() (pst_bitmemory_cfg2() -> memory_protocol)
N#define vSetmemory_cfg2_memory_protocol(ParValue)  (pst_bitmemory_cfg2() -> memory_protocol=(ParValue))
N#define biGetmemory_cfg2_read_delay() (pst_bitmemory_cfg2() -> read_delay)
N#define vSetmemory_cfg2_read_delay(ParValue)  (pst_bitmemory_cfg2() -> read_delay=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg2(ParValue)  (*pu32memory_cfg2() = (ParValue))
N#define u32Getmemory_cfg2()  (*pu32memory_cfg2() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01050                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg3_REG__       0xc0d01050U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   max_outs_refs	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   prescale	:10; 	 /* 3..12  bit(s) R/W */ 
N  uint32_t   Reserved0	:19; 	 /* 13..31  bit(s) R/W */                    
N} memory_cfg3_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg3()     ((volatile memory_cfg3_bit_view_st *)\
N(memory_cfg3_REG__ ))
X#define pst_bitmemory_cfg3()     ((volatile memory_cfg3_bit_view_st *)(memory_cfg3_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg3()     ((volatile u32memory_cfg3_word_view *)\
N(memory_cfg3_REG__ ))
X#define pu32memory_cfg3()     ((volatile u32memory_cfg3_word_view *)(memory_cfg3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg3_max_outs_refs() (pst_bitmemory_cfg3() -> max_outs_refs)
N#define vSetmemory_cfg3_max_outs_refs(ParValue)  (pst_bitmemory_cfg3() -> max_outs_refs=(ParValue))
N#define biGetmemory_cfg3_prescale() (pst_bitmemory_cfg3() -> prescale)
N#define vSetmemory_cfg3_prescale(ParValue)  (pst_bitmemory_cfg3() -> prescale=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg3(ParValue)  (*pu32memory_cfg3() = (ParValue))
N#define u32Getmemory_cfg3()  (*pu32memory_cfg3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: read_transfer_delay                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0107c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define read_transfer_delay_REG__       0xc0d0107cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   read_transfer_delay	:2; 	 /* 0..1  bit(s) R/W */ 
N  uint32_t   Reserved0	:30; 	 /* 2..31  bit(s) R/W */                    
N} read_transfer_delay_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32read_transfer_delay_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitread_transfer_delay()     ((volatile read_transfer_delay_bit_view_st *)\
N(read_transfer_delay_REG__ ))
X#define pst_bitread_transfer_delay()     ((volatile read_transfer_delay_bit_view_st *)(read_transfer_delay_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32read_transfer_delay()     ((volatile u32read_transfer_delay_word_view *)\
N(read_transfer_delay_REG__ ))
X#define pu32read_transfer_delay()     ((volatile u32read_transfer_delay_word_view *)(read_transfer_delay_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetread_transfer_delay_read_transfer_delay() (pst_bitread_transfer_delay() -> read_transfer_delay)
N#define vSetread_transfer_delay_read_transfer_delay(ParValue)  (pst_bitread_transfer_delay() -> read_transfer_delay=(ParValue))
N            
N/* Word access */
N#define vSetread_transfer_delay(ParValue)  (*pu32read_transfer_delay() = (ParValue))
N#define u32Getread_transfer_delay()  (*pu32read_transfer_delay() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_0_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01100                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_0_cfg_REG__       0xc0d01100U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable0	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min0	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max0	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_0_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_0_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_0_cfg()     ((volatile id_0_cfg_bit_view_st *)\
N(id_0_cfg_REG__ ))
X#define pst_bitid_0_cfg()     ((volatile id_0_cfg_bit_view_st *)(id_0_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_0_cfg()     ((volatile u32id_0_cfg_word_view *)\
N(id_0_cfg_REG__ ))
X#define pu32id_0_cfg()     ((volatile u32id_0_cfg_word_view *)(id_0_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_0_cfg_qos_enable0() (pst_bitid_0_cfg() -> qos_enable0)
N#define vSetid_0_cfg_qos_enable0(ParValue)  (pst_bitid_0_cfg() -> qos_enable0=(ParValue))
N#define biGetid_0_cfg_qos_min0() (pst_bitid_0_cfg() -> qos_min0)
N#define vSetid_0_cfg_qos_min0(ParValue)  (pst_bitid_0_cfg() -> qos_min0=(ParValue))
N#define biGetid_0_cfg_qos_max0() (pst_bitid_0_cfg() -> qos_max0)
N#define vSetid_0_cfg_qos_max0(ParValue)  (pst_bitid_0_cfg() -> qos_max0=(ParValue))
N            
N/* Word access */
N#define vSetid_0_cfg(ParValue)  (*pu32id_0_cfg() = (ParValue))
N#define u32Getid_0_cfg()  (*pu32id_0_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_1_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01104                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_1_cfg_REG__       0xc0d01104U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable1	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min1	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max1	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_1_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_1_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_1_cfg()     ((volatile id_1_cfg_bit_view_st *)\
N(id_1_cfg_REG__ ))
X#define pst_bitid_1_cfg()     ((volatile id_1_cfg_bit_view_st *)(id_1_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_1_cfg()     ((volatile u32id_1_cfg_word_view *)\
N(id_1_cfg_REG__ ))
X#define pu32id_1_cfg()     ((volatile u32id_1_cfg_word_view *)(id_1_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_1_cfg_qos_enable1() (pst_bitid_1_cfg() -> qos_enable1)
N#define vSetid_1_cfg_qos_enable1(ParValue)  (pst_bitid_1_cfg() -> qos_enable1=(ParValue))
N#define biGetid_1_cfg_qos_min1() (pst_bitid_1_cfg() -> qos_min1)
N#define vSetid_1_cfg_qos_min1(ParValue)  (pst_bitid_1_cfg() -> qos_min1=(ParValue))
N#define biGetid_1_cfg_qos_max1() (pst_bitid_1_cfg() -> qos_max1)
N#define vSetid_1_cfg_qos_max1(ParValue)  (pst_bitid_1_cfg() -> qos_max1=(ParValue))
N            
N/* Word access */
N#define vSetid_1_cfg(ParValue)  (*pu32id_1_cfg() = (ParValue))
N#define u32Getid_1_cfg()  (*pu32id_1_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_2_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01108                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_2_cfg_REG__       0xc0d01108U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable2	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min2	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max2	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_2_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_2_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_2_cfg()     ((volatile id_2_cfg_bit_view_st *)\
N(id_2_cfg_REG__ ))
X#define pst_bitid_2_cfg()     ((volatile id_2_cfg_bit_view_st *)(id_2_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_2_cfg()     ((volatile u32id_2_cfg_word_view *)\
N(id_2_cfg_REG__ ))
X#define pu32id_2_cfg()     ((volatile u32id_2_cfg_word_view *)(id_2_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_2_cfg_qos_enable2() (pst_bitid_2_cfg() -> qos_enable2)
N#define vSetid_2_cfg_qos_enable2(ParValue)  (pst_bitid_2_cfg() -> qos_enable2=(ParValue))
N#define biGetid_2_cfg_qos_min2() (pst_bitid_2_cfg() -> qos_min2)
N#define vSetid_2_cfg_qos_min2(ParValue)  (pst_bitid_2_cfg() -> qos_min2=(ParValue))
N#define biGetid_2_cfg_qos_max2() (pst_bitid_2_cfg() -> qos_max2)
N#define vSetid_2_cfg_qos_max2(ParValue)  (pst_bitid_2_cfg() -> qos_max2=(ParValue))
N            
N/* Word access */
N#define vSetid_2_cfg(ParValue)  (*pu32id_2_cfg() = (ParValue))
N#define u32Getid_2_cfg()  (*pu32id_2_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_3_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0110c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_3_cfg_REG__       0xc0d0110cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable3	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min3	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max3	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_3_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_3_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_3_cfg()     ((volatile id_3_cfg_bit_view_st *)\
N(id_3_cfg_REG__ ))
X#define pst_bitid_3_cfg()     ((volatile id_3_cfg_bit_view_st *)(id_3_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_3_cfg()     ((volatile u32id_3_cfg_word_view *)\
N(id_3_cfg_REG__ ))
X#define pu32id_3_cfg()     ((volatile u32id_3_cfg_word_view *)(id_3_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_3_cfg_qos_enable3() (pst_bitid_3_cfg() -> qos_enable3)
N#define vSetid_3_cfg_qos_enable3(ParValue)  (pst_bitid_3_cfg() -> qos_enable3=(ParValue))
N#define biGetid_3_cfg_qos_min3() (pst_bitid_3_cfg() -> qos_min3)
N#define vSetid_3_cfg_qos_min3(ParValue)  (pst_bitid_3_cfg() -> qos_min3=(ParValue))
N#define biGetid_3_cfg_qos_max3() (pst_bitid_3_cfg() -> qos_max3)
N#define vSetid_3_cfg_qos_max3(ParValue)  (pst_bitid_3_cfg() -> qos_max3=(ParValue))
N            
N/* Word access */
N#define vSetid_3_cfg(ParValue)  (*pu32id_3_cfg() = (ParValue))
N#define u32Getid_3_cfg()  (*pu32id_3_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_4_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01110                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_4_cfg_REG__       0xc0d01110U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable4	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min4	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max4	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_4_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_4_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_4_cfg()     ((volatile id_4_cfg_bit_view_st *)\
N(id_4_cfg_REG__ ))
X#define pst_bitid_4_cfg()     ((volatile id_4_cfg_bit_view_st *)(id_4_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_4_cfg()     ((volatile u32id_4_cfg_word_view *)\
N(id_4_cfg_REG__ ))
X#define pu32id_4_cfg()     ((volatile u32id_4_cfg_word_view *)(id_4_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_4_cfg_qos_enable4() (pst_bitid_4_cfg() -> qos_enable4)
N#define vSetid_4_cfg_qos_enable4(ParValue)  (pst_bitid_4_cfg() -> qos_enable4=(ParValue))
N#define biGetid_4_cfg_qos_min4() (pst_bitid_4_cfg() -> qos_min4)
N#define vSetid_4_cfg_qos_min4(ParValue)  (pst_bitid_4_cfg() -> qos_min4=(ParValue))
N#define biGetid_4_cfg_qos_max4() (pst_bitid_4_cfg() -> qos_max4)
N#define vSetid_4_cfg_qos_max4(ParValue)  (pst_bitid_4_cfg() -> qos_max4=(ParValue))
N            
N/* Word access */
N#define vSetid_4_cfg(ParValue)  (*pu32id_4_cfg() = (ParValue))
N#define u32Getid_4_cfg()  (*pu32id_4_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_5_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01114                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_5_cfg_REG__       0xc0d01114U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable5	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min5	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max5	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_5_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_5_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_5_cfg()     ((volatile id_5_cfg_bit_view_st *)\
N(id_5_cfg_REG__ ))
X#define pst_bitid_5_cfg()     ((volatile id_5_cfg_bit_view_st *)(id_5_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_5_cfg()     ((volatile u32id_5_cfg_word_view *)\
N(id_5_cfg_REG__ ))
X#define pu32id_5_cfg()     ((volatile u32id_5_cfg_word_view *)(id_5_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_5_cfg_qos_enable5() (pst_bitid_5_cfg() -> qos_enable5)
N#define vSetid_5_cfg_qos_enable5(ParValue)  (pst_bitid_5_cfg() -> qos_enable5=(ParValue))
N#define biGetid_5_cfg_qos_min5() (pst_bitid_5_cfg() -> qos_min5)
N#define vSetid_5_cfg_qos_min5(ParValue)  (pst_bitid_5_cfg() -> qos_min5=(ParValue))
N#define biGetid_5_cfg_qos_max5() (pst_bitid_5_cfg() -> qos_max5)
N#define vSetid_5_cfg_qos_max5(ParValue)  (pst_bitid_5_cfg() -> qos_max5=(ParValue))
N            
N/* Word access */
N#define vSetid_5_cfg(ParValue)  (*pu32id_5_cfg() = (ParValue))
N#define u32Getid_5_cfg()  (*pu32id_5_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_6_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01118                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_6_cfg_REG__       0xc0d01118U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable6	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min6	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max6	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_6_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_6_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_6_cfg()     ((volatile id_6_cfg_bit_view_st *)\
N(id_6_cfg_REG__ ))
X#define pst_bitid_6_cfg()     ((volatile id_6_cfg_bit_view_st *)(id_6_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_6_cfg()     ((volatile u32id_6_cfg_word_view *)\
N(id_6_cfg_REG__ ))
X#define pu32id_6_cfg()     ((volatile u32id_6_cfg_word_view *)(id_6_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_6_cfg_qos_enable6() (pst_bitid_6_cfg() -> qos_enable6)
N#define vSetid_6_cfg_qos_enable6(ParValue)  (pst_bitid_6_cfg() -> qos_enable6=(ParValue))
N#define biGetid_6_cfg_qos_min6() (pst_bitid_6_cfg() -> qos_min6)
N#define vSetid_6_cfg_qos_min6(ParValue)  (pst_bitid_6_cfg() -> qos_min6=(ParValue))
N#define biGetid_6_cfg_qos_max6() (pst_bitid_6_cfg() -> qos_max6)
N#define vSetid_6_cfg_qos_max6(ParValue)  (pst_bitid_6_cfg() -> qos_max6=(ParValue))
N            
N/* Word access */
N#define vSetid_6_cfg(ParValue)  (*pu32id_6_cfg() = (ParValue))
N#define u32Getid_6_cfg()  (*pu32id_6_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_7_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0111c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_7_cfg_REG__       0xc0d0111cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable7	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min7	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max7	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_7_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_7_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_7_cfg()     ((volatile id_7_cfg_bit_view_st *)\
N(id_7_cfg_REG__ ))
X#define pst_bitid_7_cfg()     ((volatile id_7_cfg_bit_view_st *)(id_7_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_7_cfg()     ((volatile u32id_7_cfg_word_view *)\
N(id_7_cfg_REG__ ))
X#define pu32id_7_cfg()     ((volatile u32id_7_cfg_word_view *)(id_7_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_7_cfg_qos_enable7() (pst_bitid_7_cfg() -> qos_enable7)
N#define vSetid_7_cfg_qos_enable7(ParValue)  (pst_bitid_7_cfg() -> qos_enable7=(ParValue))
N#define biGetid_7_cfg_qos_min7() (pst_bitid_7_cfg() -> qos_min7)
N#define vSetid_7_cfg_qos_min7(ParValue)  (pst_bitid_7_cfg() -> qos_min7=(ParValue))
N#define biGetid_7_cfg_qos_max7() (pst_bitid_7_cfg() -> qos_max7)
N#define vSetid_7_cfg_qos_max7(ParValue)  (pst_bitid_7_cfg() -> qos_max7=(ParValue))
N            
N/* Word access */
N#define vSetid_7_cfg(ParValue)  (*pu32id_7_cfg() = (ParValue))
N#define u32Getid_7_cfg()  (*pu32id_7_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_8_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01120                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_8_cfg_REG__       0xc0d01120U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable8	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min8	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max8	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_8_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_8_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_8_cfg()     ((volatile id_8_cfg_bit_view_st *)\
N(id_8_cfg_REG__ ))
X#define pst_bitid_8_cfg()     ((volatile id_8_cfg_bit_view_st *)(id_8_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_8_cfg()     ((volatile u32id_8_cfg_word_view *)\
N(id_8_cfg_REG__ ))
X#define pu32id_8_cfg()     ((volatile u32id_8_cfg_word_view *)(id_8_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_8_cfg_qos_enable8() (pst_bitid_8_cfg() -> qos_enable8)
N#define vSetid_8_cfg_qos_enable8(ParValue)  (pst_bitid_8_cfg() -> qos_enable8=(ParValue))
N#define biGetid_8_cfg_qos_min8() (pst_bitid_8_cfg() -> qos_min8)
N#define vSetid_8_cfg_qos_min8(ParValue)  (pst_bitid_8_cfg() -> qos_min8=(ParValue))
N#define biGetid_8_cfg_qos_max8() (pst_bitid_8_cfg() -> qos_max8)
N#define vSetid_8_cfg_qos_max8(ParValue)  (pst_bitid_8_cfg() -> qos_max8=(ParValue))
N            
N/* Word access */
N#define vSetid_8_cfg(ParValue)  (*pu32id_8_cfg() = (ParValue))
N#define u32Getid_8_cfg()  (*pu32id_8_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_9_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01124                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_9_cfg_REG__       0xc0d01124U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable9	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min9	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max9	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_9_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_9_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_9_cfg()     ((volatile id_9_cfg_bit_view_st *)\
N(id_9_cfg_REG__ ))
X#define pst_bitid_9_cfg()     ((volatile id_9_cfg_bit_view_st *)(id_9_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_9_cfg()     ((volatile u32id_9_cfg_word_view *)\
N(id_9_cfg_REG__ ))
X#define pu32id_9_cfg()     ((volatile u32id_9_cfg_word_view *)(id_9_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_9_cfg_qos_enable9() (pst_bitid_9_cfg() -> qos_enable9)
N#define vSetid_9_cfg_qos_enable9(ParValue)  (pst_bitid_9_cfg() -> qos_enable9=(ParValue))
N#define biGetid_9_cfg_qos_min9() (pst_bitid_9_cfg() -> qos_min9)
N#define vSetid_9_cfg_qos_min9(ParValue)  (pst_bitid_9_cfg() -> qos_min9=(ParValue))
N#define biGetid_9_cfg_qos_max9() (pst_bitid_9_cfg() -> qos_max9)
N#define vSetid_9_cfg_qos_max9(ParValue)  (pst_bitid_9_cfg() -> qos_max9=(ParValue))
N            
N/* Word access */
N#define vSetid_9_cfg(ParValue)  (*pu32id_9_cfg() = (ParValue))
N#define u32Getid_9_cfg()  (*pu32id_9_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_10_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01128                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_10_cfg_REG__       0xc0d01128U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable10	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min10	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max10	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_10_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_10_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_10_cfg()     ((volatile id_10_cfg_bit_view_st *)\
N(id_10_cfg_REG__ ))
X#define pst_bitid_10_cfg()     ((volatile id_10_cfg_bit_view_st *)(id_10_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_10_cfg()     ((volatile u32id_10_cfg_word_view *)\
N(id_10_cfg_REG__ ))
X#define pu32id_10_cfg()     ((volatile u32id_10_cfg_word_view *)(id_10_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_10_cfg_qos_enable10() (pst_bitid_10_cfg() -> qos_enable10)
N#define vSetid_10_cfg_qos_enable10(ParValue)  (pst_bitid_10_cfg() -> qos_enable10=(ParValue))
N#define biGetid_10_cfg_qos_min10() (pst_bitid_10_cfg() -> qos_min10)
N#define vSetid_10_cfg_qos_min10(ParValue)  (pst_bitid_10_cfg() -> qos_min10=(ParValue))
N#define biGetid_10_cfg_qos_max10() (pst_bitid_10_cfg() -> qos_max10)
N#define vSetid_10_cfg_qos_max10(ParValue)  (pst_bitid_10_cfg() -> qos_max10=(ParValue))
N            
N/* Word access */
N#define vSetid_10_cfg(ParValue)  (*pu32id_10_cfg() = (ParValue))
N#define u32Getid_10_cfg()  (*pu32id_10_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_11_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0112c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_11_cfg_REG__       0xc0d0112cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable11	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min11	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max11	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_11_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_11_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_11_cfg()     ((volatile id_11_cfg_bit_view_st *)\
N(id_11_cfg_REG__ ))
X#define pst_bitid_11_cfg()     ((volatile id_11_cfg_bit_view_st *)(id_11_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_11_cfg()     ((volatile u32id_11_cfg_word_view *)\
N(id_11_cfg_REG__ ))
X#define pu32id_11_cfg()     ((volatile u32id_11_cfg_word_view *)(id_11_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_11_cfg_qos_enable11() (pst_bitid_11_cfg() -> qos_enable11)
N#define vSetid_11_cfg_qos_enable11(ParValue)  (pst_bitid_11_cfg() -> qos_enable11=(ParValue))
N#define biGetid_11_cfg_qos_min11() (pst_bitid_11_cfg() -> qos_min11)
N#define vSetid_11_cfg_qos_min11(ParValue)  (pst_bitid_11_cfg() -> qos_min11=(ParValue))
N#define biGetid_11_cfg_qos_max11() (pst_bitid_11_cfg() -> qos_max11)
N#define vSetid_11_cfg_qos_max11(ParValue)  (pst_bitid_11_cfg() -> qos_max11=(ParValue))
N            
N/* Word access */
N#define vSetid_11_cfg(ParValue)  (*pu32id_11_cfg() = (ParValue))
N#define u32Getid_11_cfg()  (*pu32id_11_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_12_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01130                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_12_cfg_REG__       0xc0d01130U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable12	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min12	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max12	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_12_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_12_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_12_cfg()     ((volatile id_12_cfg_bit_view_st *)\
N(id_12_cfg_REG__ ))
X#define pst_bitid_12_cfg()     ((volatile id_12_cfg_bit_view_st *)(id_12_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_12_cfg()     ((volatile u32id_12_cfg_word_view *)\
N(id_12_cfg_REG__ ))
X#define pu32id_12_cfg()     ((volatile u32id_12_cfg_word_view *)(id_12_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_12_cfg_qos_enable12() (pst_bitid_12_cfg() -> qos_enable12)
N#define vSetid_12_cfg_qos_enable12(ParValue)  (pst_bitid_12_cfg() -> qos_enable12=(ParValue))
N#define biGetid_12_cfg_qos_min12() (pst_bitid_12_cfg() -> qos_min12)
N#define vSetid_12_cfg_qos_min12(ParValue)  (pst_bitid_12_cfg() -> qos_min12=(ParValue))
N#define biGetid_12_cfg_qos_max12() (pst_bitid_12_cfg() -> qos_max12)
N#define vSetid_12_cfg_qos_max12(ParValue)  (pst_bitid_12_cfg() -> qos_max12=(ParValue))
N            
N/* Word access */
N#define vSetid_12_cfg(ParValue)  (*pu32id_12_cfg() = (ParValue))
N#define u32Getid_12_cfg()  (*pu32id_12_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_13_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01134                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_13_cfg_REG__       0xc0d01134U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable13	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min13	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max13	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_13_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_13_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_13_cfg()     ((volatile id_13_cfg_bit_view_st *)\
N(id_13_cfg_REG__ ))
X#define pst_bitid_13_cfg()     ((volatile id_13_cfg_bit_view_st *)(id_13_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_13_cfg()     ((volatile u32id_13_cfg_word_view *)\
N(id_13_cfg_REG__ ))
X#define pu32id_13_cfg()     ((volatile u32id_13_cfg_word_view *)(id_13_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_13_cfg_qos_enable13() (pst_bitid_13_cfg() -> qos_enable13)
N#define vSetid_13_cfg_qos_enable13(ParValue)  (pst_bitid_13_cfg() -> qos_enable13=(ParValue))
N#define biGetid_13_cfg_qos_min13() (pst_bitid_13_cfg() -> qos_min13)
N#define vSetid_13_cfg_qos_min13(ParValue)  (pst_bitid_13_cfg() -> qos_min13=(ParValue))
N#define biGetid_13_cfg_qos_max13() (pst_bitid_13_cfg() -> qos_max13)
N#define vSetid_13_cfg_qos_max13(ParValue)  (pst_bitid_13_cfg() -> qos_max13=(ParValue))
N            
N/* Word access */
N#define vSetid_13_cfg(ParValue)  (*pu32id_13_cfg() = (ParValue))
N#define u32Getid_13_cfg()  (*pu32id_13_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_14_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01138                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_14_cfg_REG__       0xc0d01138U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable14	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min14	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max14	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_14_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_14_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_14_cfg()     ((volatile id_14_cfg_bit_view_st *)\
N(id_14_cfg_REG__ ))
X#define pst_bitid_14_cfg()     ((volatile id_14_cfg_bit_view_st *)(id_14_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_14_cfg()     ((volatile u32id_14_cfg_word_view *)\
N(id_14_cfg_REG__ ))
X#define pu32id_14_cfg()     ((volatile u32id_14_cfg_word_view *)(id_14_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_14_cfg_qos_enable14() (pst_bitid_14_cfg() -> qos_enable14)
N#define vSetid_14_cfg_qos_enable14(ParValue)  (pst_bitid_14_cfg() -> qos_enable14=(ParValue))
N#define biGetid_14_cfg_qos_min14() (pst_bitid_14_cfg() -> qos_min14)
N#define vSetid_14_cfg_qos_min14(ParValue)  (pst_bitid_14_cfg() -> qos_min14=(ParValue))
N#define biGetid_14_cfg_qos_max14() (pst_bitid_14_cfg() -> qos_max14)
N#define vSetid_14_cfg_qos_max14(ParValue)  (pst_bitid_14_cfg() -> qos_max14=(ParValue))
N            
N/* Word access */
N#define vSetid_14_cfg(ParValue)  (*pu32id_14_cfg() = (ParValue))
N#define u32Getid_14_cfg()  (*pu32id_14_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_15_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0113c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_15_cfg_REG__       0xc0d0113cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable15	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min15	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max15	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_15_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_15_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_15_cfg()     ((volatile id_15_cfg_bit_view_st *)\
N(id_15_cfg_REG__ ))
X#define pst_bitid_15_cfg()     ((volatile id_15_cfg_bit_view_st *)(id_15_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_15_cfg()     ((volatile u32id_15_cfg_word_view *)\
N(id_15_cfg_REG__ ))
X#define pu32id_15_cfg()     ((volatile u32id_15_cfg_word_view *)(id_15_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_15_cfg_qos_enable15() (pst_bitid_15_cfg() -> qos_enable15)
N#define vSetid_15_cfg_qos_enable15(ParValue)  (pst_bitid_15_cfg() -> qos_enable15=(ParValue))
N#define biGetid_15_cfg_qos_min15() (pst_bitid_15_cfg() -> qos_min15)
N#define vSetid_15_cfg_qos_min15(ParValue)  (pst_bitid_15_cfg() -> qos_min15=(ParValue))
N#define biGetid_15_cfg_qos_max15() (pst_bitid_15_cfg() -> qos_max15)
N#define vSetid_15_cfg_qos_max15(ParValue)  (pst_bitid_15_cfg() -> qos_max15=(ParValue))
N            
N/* Word access */
N#define vSetid_15_cfg(ParValue)  (*pu32id_15_cfg() = (ParValue))
N#define u32Getid_15_cfg()  (*pu32id_15_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: chip_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01200                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define chip_cfg_REG__       0xc0d01200U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   address_mask	:8; 	 /* 0..7  bit(s) R/W */
N  uint32_t   address_match	:8; 	 /* 8..15  bit(s) R/W */
N  uint32_t   address_fmt	:1; 	 /* 16..16  bit(s) R/W */ 
N  uint32_t   Reserved0	:15; 	 /* 17..31  bit(s) R/W */                    
N} chip_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32chip_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitchip_cfg()     ((volatile chip_cfg_bit_view_st *)\
N(chip_cfg_REG__ ))
X#define pst_bitchip_cfg()     ((volatile chip_cfg_bit_view_st *)(chip_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32chip_cfg()     ((volatile u32chip_cfg_word_view *)\
N(chip_cfg_REG__ ))
X#define pu32chip_cfg()     ((volatile u32chip_cfg_word_view *)(chip_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetchip_cfg_address_mask() (pst_bitchip_cfg() -> address_mask)
N#define vSetchip_cfg_address_mask(ParValue)  (pst_bitchip_cfg() -> address_mask=(ParValue))
N#define biGetchip_cfg_address_match() (pst_bitchip_cfg() -> address_match)
N#define vSetchip_cfg_address_match(ParValue)  (pst_bitchip_cfg() -> address_match=(ParValue))
N#define biGetchip_cfg_address_fmt() (pst_bitchip_cfg() -> address_fmt)
N#define vSetchip_cfg_address_fmt(ParValue)  (pst_bitchip_cfg() -> address_fmt=(ParValue))
N            
N/* Word access */
N#define vSetchip_cfg(ParValue)  (*pu32chip_cfg() = (ParValue))
N#define u32Getchip_cfg()  (*pu32chip_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_status                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01300                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_status_REG__       0xc0d01300U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   Lock	:1; 	 /* 0..0  bit(s) R */ 
N  uint32_t   Reserved0	:31; 	 /* 1..31  bit(s) R */                    
N} user_status_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_status_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_status()     ((volatile user_status_bit_view_st *)\
N(user_status_REG__ ))
X#define pst_bituser_status()     ((volatile user_status_bit_view_st *)(user_status_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_status()     ((volatile u32user_status_word_view *)\
N(user_status_REG__ ))
X#define pu32user_status()     ((volatile u32user_status_word_view *)(user_status_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetuser_status_Lock() (pst_bituser_status() -> Lock)            
N            
N/* Word access */
N
N#define u32Getuser_status()  (*pu32user_status() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_config                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01304                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_config_REG__       0xc0d01304U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   gear_ratio0	:11; 	 /* 0..10  bit(s) W */
N  uint32_t   Reserved0	:5; 	 /* 11..15  bit(s) W */
N  uint32_t   gear_ratio1	:11; 	 /* 16..26  bit(s) W */ 
N  uint32_t   Reserved1	:5; 	 /* 27..31  bit(s) W */                    
N} user_config_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_config_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_config()     ((volatile user_config_bit_view_st *)\
N(user_config_REG__ ))
X#define pst_bituser_config()     ((volatile user_config_bit_view_st *)(user_config_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_config()     ((volatile u32user_config_word_view *)\
N(user_config_REG__ ))
X#define pu32user_config()     ((volatile u32user_config_word_view *)(user_config_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetuser_config_gear_ratio0(ParValue) (pst_bituser_config() -> gear_ratio0=(ParValue)) 
N#define vSetuser_config_gear_ratio1(ParValue) (pst_bituser_config() -> gear_ratio1=(ParValue)) 
N            
N/* Word access */
N#define vSetuser_config(ParValue)  (*pu32user_config() = (ParValue))
N#define u32Getuser_config()  (*pu32user_config() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_config1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01308                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_config1_REG__       0xc0d01308U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   gear_ratio2	:11; 	 /* 0..10  bit(s) W */
N  uint32_t   Reserved0	:1; 	 /* 11..11  bit(s) W */
N  uint32_t   Enable	:1; 	 /* 12..12  bit(s) W */
N  uint32_t   Clock_Mode_Change	:1; 	 /* 13..13  bit(s) W */
N  uint32_t   Use_Min_Delay	:1; 	 /* 14..14  bit(s) W */
N  uint32_t   Reserved1	:1; 	 /* 15..15  bit(s) W */
N  uint32_t   gear_ratio3	:11; 	 /* 16..26  bit(s) W */ 
N  uint32_t   Reserved2	:5; 	 /* 27..31  bit(s) W */                    
N} user_config1_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_config1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_config1()     ((volatile user_config1_bit_view_st *)\
N(user_config1_REG__ ))
X#define pst_bituser_config1()     ((volatile user_config1_bit_view_st *)(user_config1_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_config1()     ((volatile u32user_config1_word_view *)\
N(user_config1_REG__ ))
X#define pu32user_config1()     ((volatile u32user_config1_word_view *)(user_config1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetuser_config1_gear_ratio2(ParValue) (pst_bituser_config1() -> gear_ratio2=(ParValue)) 
N#define vSetuser_config1_Enable(ParValue) (pst_bituser_config1() -> Enable=(ParValue)) 
N#define vSetuser_config1_Clock_Mode_Change(ParValue) (pst_bituser_config1() -> Clock_Mode_Change=(ParValue)) 
N#define vSetuser_config1_Use_Min_Delay(ParValue) (pst_bituser_config1() -> Use_Min_Delay=(ParValue)) 
N#define vSetuser_config1_gear_ratio3(ParValue) (pst_bituser_config1() -> gear_ratio3=(ParValue)) 
N            
N/* Word access */
N#define vSetuser_config1(ParValue)  (*pu32user_config1() = (ParValue))
N#define u32Getuser_config1()  (*pu32user_config1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: feature_ctrl                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0130c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define feature_ctrl_REG__       0xc0d0130cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   stop_early_bresp	:1; 	 /* 0..0  bit(s) R/W */ 
N  uint32_t   Reserved0	:31; 	 /* 1..31  bit(s) R/W */                    
N} feature_ctrl_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32feature_ctrl_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitfeature_ctrl()     ((volatile feature_ctrl_bit_view_st *)\
N(feature_ctrl_REG__ ))
X#define pst_bitfeature_ctrl()     ((volatile feature_ctrl_bit_view_st *)(feature_ctrl_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32feature_ctrl()     ((volatile u32feature_ctrl_word_view *)\
N(feature_ctrl_REG__ ))
X#define pu32feature_ctrl()     ((volatile u32feature_ctrl_word_view *)(feature_ctrl_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetfeature_ctrl_stop_early_bresp() (pst_bitfeature_ctrl() -> stop_early_bresp)
N#define vSetfeature_ctrl_stop_early_bresp(ParValue)  (pst_bitfeature_ctrl() -> stop_early_bresp=(ParValue))
N            
N/* Word access */
N#define vSetfeature_ctrl(ParValue)  (*pu32feature_ctrl() = (ParValue))
N#define u32Getfeature_ctrl()  (*pu32feature_ctrl() )
N            
N/****************************************************************************/	
N/******************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */ 
N/******************************************************************************/
N    
N/*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   :   Deactivated:
N** |     Not requested Rules: 
N** |         Rule 5.7  [A] : No reuse of identifiers
N** |         Rule 19.7 [A] : Function used instead of function-like macro when possible
N** |
N** |     Requested Rules:
N** |         Rule	5.1  [R] : No more than 31 chars to determine an identifier
N** |         Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words
N** |                         and standard library names register names are generated by 
N** |                         converter tool from HW specs
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************/
N
N#endif /* DMC_IO_H */ 
N
N/****************************************************************************/	
N
N
N/************************** BEGIN of DISCLAIMER   ************************* 
N
N- TOSHIBA is continually working to improve the quality and reliability of 
N  its products. Nevertheless, semiconductor devices in general can 
N  malfunction or fail due to their inherent electrical sensitivity and  
N  vulnerability to physical stress. It is the responsibility of the buyer, 
N  when utilizing TOSHIBA products, to comply with the standards of safety 
N  in making a safe design for the entire system, and to avoid situations in 
N  which a malfunction or failure of such TOSHIBA products could cause loss of 
N  human life, bodily injury or damage to property. 
N  
N  In developing your designs, please ensure that TOSHIBA products are used 
N  within specified operating ranges as set forth in the most recent TOSHIBA 
N  products specifications. 
N  Also, please keep in mind the precautions and conditions set forth in the 
N  Handling Guide for Semiconductor Devices, or 
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in 
N  general electronics applications (computer, personal equipment, office 
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). 
N  These Toshiba products are neither intended nor warranted for usage in 
N  equipment that requires extraordinarily high quality and/or reliability or 
N  a malfunction or failure of which may cause loss of human life or bodily 
N  injury (Unintended Usage). Unintended Usage include atomic energy control 
N  instruments, airplane or spaceship instruments, transportation instruments, 
N  traffic signal instruments, combustion control instruments, medical 
N  instruments, all types of safety devices, etc.. 
N  Unintended Usage of Toshiba products listed in this document shall be 
N  made at the customers own risk. 
N
N- Toshiba assumes no liability for any damage or losses (including but not 
N  limited to, loss of business profit,business interruption, loss of business 
N  information,and other pecuniary losses) occurring 
N  from the use of, or inability to use, this product. 
N
N- The products described in this document are subject to the foreign exchange 
N  and foreign trade laws. 
N
N- The products described in this document contain components made in the 
N  United States and subject to export control of the U.S. authorities. 
N  Diversion contrary to the U.S. law is prohibited. 
N
N- The information contained herein is presented only as a guide for the 
N  applications of our products. 
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements 
N  of intellectual property or other rights of the third parties which may 
N  result from its use.  
N  No license is granted by implication or otherwise under any intellectual 
N  property or other rights of TOSHIBA CORPORATION or others. 
N
N- The information contained herein is subject to change without notice. 
N
N****************************  END of DISCLAIMER ****************************/ 
N
L 23 "..\..\..\..\lldd\src\dmc.c" 2
N#include "dmc.h"                      /* Own definitions */
L 1 "..\..\..\..\lldd\inc\dmc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef DMC_H
N#define DMC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_DMC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1 : disable identifier too long */  
N#endif 
N/*********************************************/
N
N#define SDRAM_ADDRESS_BASE (0x40000000)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*!< enable/disable */
Ntypedef enum tag_dmc_enable_e
N{
N    DMC_DISABLE = 0U,   /*!< Disable */
N    DMC_ENABLE  = 1U    /*!< Enable */
N} dmc_enable_e;
N
N/*!< Low/High */
Ntypedef enum tag_dmc_high_e
N{
N    DMC_LOW     = 0U,   /*!< Low */
N    DMC_HIGH    = 1U    /*!< High */
N} dmc_high_e;
N
N/*!< Status definitions */
Ntypedef enum tag_dmc_status_e
N{
N    DMC_STATUS_CONFIG    = 0U,   /*!< STATUS_CONFIG */
N    DMC_STATUS_READY     = 1U,   /*!< STATUS_READY */
N    DMC_STATUS_PAUSED    = 2U,   /*!< STATUS_PAUSED */
N    DMC_STATUS_LOW_POWER = 3U    /*!< STATUS_LOW_POWER */
N} dmc_status_e;
N
N/*!< Commands */
Ntypedef enum tag_dmc_cmd_e
N{
N    DMC_CMD_GO           = 0U,   /*!< Command GO */
N    DMC_CMD_SLEEP        = 1U,   /*!< Command SLEEP */
N    DMC_CMD_WAKEUP       = 2U,   /*!< Command WAKEUP */
N    DMC_CMD_PAUSE        = 3U,   /*!< Command PAUSE */
N    DMC_CMD_CONFIGURE    = 4U,   /*!< Command CONFIGURE */
N    DMC_CMD_ACTIVE_PAUSE = 7U    /*!< Command ACTIVE_PAUSE */
N} dmc_cmd_e;
N
N/*!< Memory type */
Ntypedef enum tag_dmc_type_e
N{
N    DMC_TYPE_SDRAM       = 0U,   /*!< SDR SDRAM */
N    DMC_TYPE_LPDDR       = 3U,   /*!< LPDDR */
N    DMC_TYPE_LPDDR_SDRAM = 4U   /*!< Combined SDR-LPDDR SDRAM */
N} dmc_type_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_chips_e
N{
N    DMC_ONE_CHIP       = 0U,   /*!< 1 Chip  */
N    DMC_TWO_CHIPS      = 1U,   /*!< 2 Chips */
N    DMC_THREE_CHIPS    = 2U,   /*!< 3 Chips */
N    DMC_FOUR_CHIPS     = 3U    /*!< 4 Chips */
N} dmc_mem_chips_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_banks_e
N{
N    DMC_FOUR_BANKS     = 0U,   /*!< Four Banks */
N    DMC_TWO_BANKS      = 1U    /*!< Two Banks  */
N} dmc_mem_banks_e;
N
N/*!< Access Monitor resources */
Ntypedef enum tag_dmc_monitors_e
N{
N    DMC_ZERO_MONITOR   = 0U,   /*!< 0 Monitors */
N    DMC_ONE_MONITOR    = 1U,   /*!< 1 Monitor  */
N    DMC_TWO_MONITORS   = 2U,   /*!< 2 Monitors */
N    DMC_FOUR_MONITORS  = 3U    /*!< 4 Monitors */
N} dmc_monitors_e;
N
N/*!< DMC Device commands */
Ntypedef enum tag_dmc_direct_cmd_e
N{
N    DMC_PRECHARGEALL   = 0U,   /*!< PRECHARGEALL Command */
N    DMC_AUTO_REFRESH   = 1U,   /*!< AUTO REFRESH Command */
N    DMC_MODEREG        = 2U,   /*!< MODEREG/Extended MODEREG Command */
N    DMC_NOP            = 3U,   /*!< NOP Command */
N    DMC_DPD            = 4U    /*!< DPD Command */
N} dmc_direct_cmd_e;
N
N/*!< DMC Memory Configs */
Ntypedef enum tag_dmc_mem_config_e
N{
N    DMC_MEM_ZERO       = 0U,   /*!< Config value: Zero */
N    DMC_MEM_ONE        = 1U,   /*!< Config value: One */
N    DMC_MEM_TWO        = 2U,   /*!< Config value: Two */
N    DMC_MEM_THREE      = 3U,   /*!< Config value: Three */
N    DMC_MEM_FOUR       = 4U,   /*!< Config value: Four */
N    DMC_MEM_FIVE       = 5U   /*!< Config value: Five */
N} dmc_mem_config_e;
N
N/*!< Auto Precharge */
Ntypedef enum tag_dmc_auto_precharge_e
N{
N    DMC_ADDR_BIT_10    = 0U,   /*!< address bit 10 */
N    DMC_ADDR_BIT_8     = 1U   /*!< address bit 8  */
N} dmc_auto_precharge_e;
N
N/*!< Memory Protocol */
Ntypedef enum tag_dmc_mem_protocol_e
N{
N    DMC_SDR_PROTOCOL   = 0U,   /*!< SDR Protocol */
N    DMC_LPDDR_PROTOCOL = 3U   /*!< LPDDR Protocol */
N} dmc_mem_protocol_e;
N
N/*!< Read Delay Cycles */
Ntypedef enum tag_dmc_read_delay_e
N{
N    DMC_DELAY_ONE_CYCLE   = 1U,   /*!< One Idle Cycle */
N    DMC_DELAY_TWO_CYCLE   = 2U   /*!< Two Idle Cycle */
N} dmc_read_delay_e;
N
N/*!< AXI Address format */
Ntypedef enum tag_dmc_addr_format_e
N{
N    DMC_ADDR_RBC   = 0U,   /*!< One Idle Cycle */
N    DMC_ADDR_BRC   = 1U   /*!< Two Idle Cycle */
N} dmc_addr_format_e;
N
N/*!< Clock rate */
Ntypedef enum tag_dmc_clock_rate_e
N{
N    DMC_CLOCK_RATE_166MHz = 0U,   /*!< 166 MHz */
N    DMC_CLOCK_RATE_133MHz = 1U    /*!< 133 MHz */
N} dmc_clock_rate_e;
N
N/*!< Memory density */
Ntypedef enum tag_dmc_density_e
N{
N    DMC_DENSITY_128Mbit = 0U,   /*!< 128 Mbit */
N    DMC_DENSITY_256Mbit = 1U,   /*!< 256 Mbit */
N    DMC_DENSITY_1Gbit   = 2U,   /*!< 1 Gbit */
N    DMC_DENSITY_2Gbit   = 3U    /*!< 2 Gbit */
N} dmc_density_e;
N
N/*!< Bus width */
Ntypedef enum tag_dmc_width_e
N{
N    DMC_BUSWIDTH_16BIT = 0U,   /*!< 16 Bit */
N    DMC_BUSWIDTH_32BIT = 1U    /*!< 32 Bit */
N} dmc_width_e;
N
N/*!< SDRAM/LPDDR state */
Ntypedef enum tag_dmc_mem_device_state_e
N{
N    DMC_DEV_STATE_POWER_UP        = 0U,   /*!< State POWER_UP */
N    DMC_DEV_STATE_SELF_REFRESH    = 1U,   /*!< State SELF_REFRESH */
N    DMC_DEV_STATE_POWER_DOWN      = 2U,   /*!< State POWER_DOWN */
N    DMC_DEV_STATE_DEEP_POWER_DOWN = 3U    /*!< State DEEP_POWER_DOWN */
N} dmc_mem_device_state_e;
N
N/*!< System Controller Operating mode */
Ntypedef enum tag_sys_ctrl_op_mode_e
N{
N    SYS_STATE_FULL_MODE           = 0U,   /*!< State POWER_UP */
N    SYS_STATE_STOP_MODE           = 1U,   /*!< State POWER_DOWN */
N    SYS_STATE_SLEEP_MODE          = 2U,   /*!< State SLEEP */
N    SYS_STATE_STANDBY_MODE        = 3U   /*!< State STAND BY */
N} sys_ctrl_op_mode_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/*!< DMC status structure */
Ntypedef struct tag_dmc_memc_status_st
N{
N    dmc_status_e    eMemcStatus;        /*!< Status of DMC */
N    dmc_width_e     eMemoryWidth;       /*!< Memory data bus width */
N    dmc_type_e      eMemoryType;        /*!< Type of SDRAM that the DMC Supports */
N    dmc_mem_chips_e eMemChips;          /*!< Number of chip selects that the DMC supports */
N    dmc_mem_banks_e eMemBanks;          /*!< Number of banks that the DMC supports */
N    dmc_monitors_e  eMonitors;          /*!< Number of exclusive access monitor resources */
N} dmc_memc_status_st;
N
N/*!< register description for register user_config */
Ntypedef struct tag_dmc_user_config_bit_view_st
N{
N    uint32_t   gear_ratio0       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 5;   /*!< 11..15 bit(s) */
N    uint32_t   gear_ratio1       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config_bit_view_st;
N
N/*!< register description for register user_config1 */
Ntypedef struct tag_dmc_user_config1_bit_view_st
N{
N    uint32_t   gear_ratio2       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 1;   /*!< 11  bit(s)    */
N    uint32_t   enable            : 1;   /*!< 12  bit(s)    */
N    uint32_t   clock_mode_change : 1;   /*!< 13  bit(s)    */
N    uint32_t   use_min_delay     : 1;   /*!< 14  bit(s)    */
N    uint32_t                     : 1;   /*!< 15 bit(s)     */
N    uint32_t   gear_ratio3       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config1_bit_view_st;
N
N/* Memory device stucture */
Ntypedef struct tag_mem_device_st
N{
N    dmc_type_e        eType;  /* MEMORY_TYPE */
N    dmc_width_e       eWidth;   /* MEMORY_WIDTH */
N    dmc_clock_rate_e  eClock_rate;  /* MEMORY_CLOCK_RATE */
N    uint32_t          u32GearRatio_0;  /* GEAR_RATIO_0  */
N    uint32_t          u32GearRatio_1;  /* GEAR_RATIO_1  */
N    uint32_t          u32GearRatio_2;  /* GEAR_RATIO_2  */
N    uint32_t          u32GearRatio_3;  /* GEAR_RATIO_3  */
N    uint32_t          u32T_CAS;  /* MEMORY_T_CAS */
N    uint32_t          u32T_RAS;  /* MEMORY_T_RAS */
N    uint32_t          u32T_MRD;  /* MEMORY_T_MRD */
N    uint32_t          u32T_RC;   /* MEMORY_T_RC  */
N    uint32_t          u32T_RCD;  /* MEMORY_T_RCD */
N    uint32_t          u32T_RFC;  /* MEMORY_T_RFC */
N    uint32_t          u32T_RP;   /* MEMORY_T_RP  */
N    uint32_t          u32T_RRD;  /* MEMORY_T_RRD */
N    uint32_t          u32T_WR;   /* MEMORY_T_WR  */
N    uint32_t          u32T_WTR;  /* MEMORY_T_WTR */
N    uint32_t          u32T_XP;   /* MEMORY_T_XP  */
N    uint32_t          u32T_XSR;  /* MEMORY_T_XSR */
N    uint32_t          u32T_ESR;  /* MEMORY_T_ESR */
N} mem_device_st;
N
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vDMC_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vDMC_Init
N*
N* Initialisation of memory controller for LPDDR/SDRAM
N*
N* @note No Limitations
N*
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_Init(mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function vDMC_MemoryDeviceInit
N*
N* Initializes the memory device
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_MemoryDeviceInit(void);
N
N
N/**
N* @brief Implementation of function i32DMC_EnterDeviceMode
N*
N* Changes the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                               mem_device_st *pstDeviceParams)
N;
N
N
N/**
N* @brief Implementation of function i32DMC_ExitDeviceMode
N*
N* Exit from the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                              mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function eDMC_GetStatus
N*
N* Reads the status bits of the Memory Controller Status Register to 
N* determine the current state of the memory controller
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return dma status
N*/
Ndmc_status_e eDMC_GetStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_GetFixedConfig
N*
N* Reads the configuration and current state of the DMC
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pstMemcStatus - Pointer to DMC configuration and status
N*
N* @return void
N*/
Nvoid vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCntrlCommand
N*
N* Sets the operating state of the DMC
N*
N* @note Setting is not accessible in the Reset or Power-On Reset
N*
N* @param[in] eCmd - DMC Operating state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetDirectCommand
N*
N* Writes data to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u32Value    - Memory device command information
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDirectCommand(uint32_t u32Value);
N
N/**
N* @brief Implementation of function vDMC_SetExternalMemCommand
N*
N* Writes command to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] eDirCmd    - Memory device command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipNumber
N*
N* Sets the external memory chip select
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8ChipNo   - Chip Select
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipNumber(uint8_t u8ChipNo);
N
N
N/**
N* @brief Implementation of function vDMC_SetBankAddress
N*
N* Sets external memory bank address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8BankAddr - External memory bank address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetBankAddress(uint8_t u8BankAddr);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemoryAddress
N*
N* Sets external memory address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u16Address - Mapped external memory address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemoryAddress(uint16_t u16Address);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig
N*
N* Sets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config  - Memory configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig
N*
N* Gets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] void
N*
N* @param[in,out] void
N*
N* @return memory configuration
N*/
Nuint32_t u32DMC_GetMemConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigActiveChips
N*
N* Sets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eActChips  - active chip
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigActiveChips
N*
N* Gets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of active chips
N*/
Ndmc_mem_chips_e eDMC_GetMemConfigActiveChips(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigQoS
N*
N* Sets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eQoS  - qos value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigQoS
N*
N* Gets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return qos value
N*/
Ndmc_mem_config_e eDMC_GetMemConfigQoS(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigBurst
N*
N* Sets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eBurst  - number of data accesses
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigBurst
N*
N* Gets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of data accesses
N*/
Ndmc_mem_config_e eDMC_GetMemConfigBurst(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigRowAddr
N*
N* Sets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eRowAddr  - Row address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigRowAddr
N*
N* Gets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return row address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigRowAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigColAddr
N*
N* Sets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigColAddr
N*
N* Gets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Column address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigColAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigStopClk
N*
N* Enable/Disable the memory clock to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigStopClk
N*
N* Gets memory clock state whether its enabled/disabled to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock state
N*/
Ndmc_enable_e eDMC_GetMemConfigStopClk(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPowerDown
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePoweDown  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPowerDown
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Ndmc_enable_e eDMC_GetMemConfigAutoPowerDown(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPreCharge
N*
N* Sets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePrecharge  - auto-precharge bit position
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPreCharge
N*
N* Gets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the position of the auto-precharge bit
N*/
Ndmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigPwrDownPrd
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8PwrDownPrd  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemConfigPwrDownPrd
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Nuint8_t u8DMC_GetMemConfigPwrDownPrd(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetRefreshPeriod
N*
N* Sets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16RefPrd  - Refresh period
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetRefreshPeriod(uint16_t u16RefPrd);
N
N
N/**
N* @brief Implementation of function u16DMC_GetRefreshPeriod
N*
N* Gets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the refresh period
N*/
Nuint16_t u16DMC_GetRefreshPeriod(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASLatency
N*
N* Sets the CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASLatency(uint8_t u8CASLatency);
N
N
N/**
N* @brief Implementation of function u8DMC_GetCASLatency
N*
N* Gets CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency time
N*/
Nuint8_t u8DMC_GetCASLatency(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASHalfCycle
N*
N* Sets the CAS latency time as 2.5
N*
N* @note Only accessible when DMC is in Config/Low power state,
N* use only when DMC accesses DDR devices and cas_latency field=2.
N*
N* @param[in] eHalfCycle  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle);
N
N
N/**
N* @brief Implementation of function eDMC_GetCASHalfCycle
N*
N* Checks whether CAS latency half cycle is enabled/disabled or not
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency half cycle enable/disable status
N*/
Ndmc_enable_e eDMC_GetCASHalfCycle(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetDQSTiming
N*
N* Sets the DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDQSTiming(uint8_t u8DQSTiming);
N
N
N/**
N* @brief Implementation of function u8DMC_GetDQSTiming
N*
N* Gets DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the DQS delay
N*/
Nuint8_t u8DMC_GetDQSTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetModeRegTiming
N*
N* Sets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetModeRegTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetModeRegTiming
N*
N* Gets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the MODEREG to command delay
N*/
Nuint8_t u8DMC_GetModeRegTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToPrechargeTiming
N*
N* Sets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToPrechargeTiming
N*
N* Gets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetActiveToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToActiveTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank x delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToActiveTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToActiveTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank x delay
N*/
Nuint8_t u8DMC_GetActiveToActiveTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToRWTiming
N*
N* Sets delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - delay between an ACTIVE command 
N*                       and another memory command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToRWTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToRWTiming
N*
N* Gets the delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the delay between an ACTIVE command and another 
N*         memory command
N*/
Nuint8_t u8DMC_GetActiveToRWTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRCD
N*
N* Sets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRCD
N*
N* Gets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_GetScheduleRCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RCD
N*
N* Sets t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RCD
N*
N* Gets the t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_Get_T_RCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetAutoRefreshTiming
N*
N* Sets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetAutoRefreshTiming(uint16_t u16Timing);
N
N
N/**
N* @brief Implementation of function u16DMC_GetAutoRefreshTiming
N*
N* Gets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint16_t u16DMC_GetAutoRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRFC
N*
N* Sets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_GetScheduleRFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RFC
N*
N* Sets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_Get_T_RFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetPrechargeTiming
N*
N* Sets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetPrechargeTiming
N*
N* Gets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRP
N*
N* Sets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRP
N*
N* Gets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetScheduleRP(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RP
N*
N* Sets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - t_RP
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RP
N*
N* Gets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the t_RP delay
N*/
Nuint8_t u8DMC_Get_T_RP(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveDiffBankTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank y delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveDiffBankTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveDiffBankTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank y delay
N*/
Nuint8_t u8DMC_GetActiveDiffBankTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToPrechargeTiming
N*
N* Sets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToPrechargeTiming
N*
N* Gets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToReadTiming
N*
N* Sets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToReadTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToReadTiming
N*
N* Gets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToReadTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitPowerDownTiming
N*
N* Sets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit power-down to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitPowerDownTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitPowerDownTiming
N*
N* Gets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit power-down to command delay
N*/
Nuint8_t u8DMC_GetExitPowerDownTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitSelfRefreshTiming
N*
N* Sets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitSelfRefreshTiming
N*
N* Gets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit self-refresh to command delay
N*/
Nuint8_t u8DMC_GetExitSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetSelfRefreshTiming
N*
N* Sets self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetSelfRefreshTiming
N*
N* Gets the self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return self-refresh to command delay
N*/
Nuint8_t u8DMC_GetSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig2
N*
N* Sets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - DMC Configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig2(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig2
N*
N* Gets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return DMC Configuration
N*/
Nuint32_t u32DMC_GetMemConfig2(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2ReadDelay
N*
N* Sets the number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Delay - memory clock cycles between 0-2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg2ReadDelay
N*
N* Gets number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock cycles
N*/
Nuint8_t u8DMC_GetMemCfg2ReadDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemProtocol
N*
N* Sets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eProtocol - memory protocal
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemProtocol
N*
N* Gets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory protocal
N*/
Ndmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemWidth
N*
N* Sets memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eWidth - bus width
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemWidth
N*
N* Gets the memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory data bus width
N*/
Ndmc_width_e eDMC_GetMemCfg2MemWidth(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2CkeInit
N*
N* Sets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of cke(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2CkeInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2CkeInit
N*
N* Gets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of cke.
N*/
Ndmc_high_e eDMC_GetMemCfg2CkeInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2DqmInit
N*
N* Sets sets the state of the dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of dqm(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2DqmInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2DqmInit
N*
N* Gets the state of dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of dqm.
N*/
Ndmc_high_e eDMC_GetMemCfg2DqmInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig3
N*
N* Sets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - prescalar and number of 
N*                        outstanding AUTO REFRESH commands.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig3(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig3
N*
N* Gets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar and number of 
N*         outstanding AUTO REFRESH commands.
N*/
Nuint32_t u32DMC_GetMemConfig3(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3PreScale
N*
N* Sets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Prescale - prescalar value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3PreScale(uint16_t u16Prescale);
N
N
N/**
N* @brief Implementation of function u16DMC_GetMemCfg3PreScale
N*
N* Gets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar value
N*/
Nuint16_t u16DMC_GetMemCfg3PreScale(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3MaxRefsCmds
N*
N* Sets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8MaxRefsCmds - number of outstanding 
N*                            AUTO REFRESH commands
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg3MaxRefsCmds
N*
N* Gets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of outstanding AUTO REFRESH commands.
N*/
Nuint8_t u8DMC_GetMemCfg3MaxRefsCmds(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetReadTransferDelay
N*
N* Sets number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eDelay - number of idle cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay);
N
N
N/**
N* @brief Implementation of function eDMC_GetReadTransferDelay
N*
N* Gets the number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of idle cycles.
N*/
Ndmc_read_delay_e eDMC_GetReadTransferDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetIdConfig
N*
N* Sets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID    - Configuration ID, between 0 to 15
N* @param[in] u8QosMax   - maximum QoS value, between 0 to 255
N* @param[in] eQosMin    - minimum QoS value
N* @param[in] eQosEnable - enable/disable applying QoS to read transfer
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
N                      dmc_enable_e eQosMin, dmc_enable_e eQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_GetIdConfig
N*
N* Gets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID  - Configuration ID, between 0 to 15
N*
N* @param[in,out] u8QosMax   - pointer to maximum QoS value
N* @param[in,out] eQosMin    - pointer to minimum QoS value
N* @param[in,out] eQosEnable - pointer to QoS enable/disable state
N*
N* @return void
N*/
Nvoid vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
N                        dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfig
N*
N* Sets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - external memory device configuration 
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetChipConfig
N*
N* Gets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return external memory device configuration 
N*/
Nuint32_t u32DMC_GetChipConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrFmt
N*
N* Sets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eAddrFmt - memory organization format
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt);
N
N
N/**
N* @brief Implementation of function eDMC_GetChipConfigAddrFmt
N*
N* Gets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory organization format
N*/
Ndmc_addr_format_e eDMC_GetChipConfigAddrFmt(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMatch
N*
N* Sets the reference address field to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMatch - reference address field
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMatch
N*
N* Gets the reference address field used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return reference address field
N*/
Nuint8_t u8DMC_GetChipConfigAddrMatch(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMask
N*
N* Sets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMask - address mask
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMask
N*
N* Gets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return address mask
N*/
Nuint8_t u8DMC_GetChipConfigAddrMask(void);
N
N
N/**
N* @brief Implementation of function eDMC_GetUserStatus
N*
N* Gets the status of the user_status inputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return user status inputs
N*/
Ndmc_enable_e eDMC_GetUserStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig
N*
N* Sets the state of the user config outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config state(gear ratio)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio0
N*
N* Sets the user config's gear ratio0.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio0.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio1
N*
N* Sets the user config's gear ratio1.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio1.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1
N*
N* Sets the state of the user config1 outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config1 state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio3
N*
N* Sets the user config1's gear ratio3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio3.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1UseMinDelay
N*
N* Sets the delay to compensate the DLLs minimum Delay in LPDDR mode.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] boDelay - delay.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1UseMinDelay(bool_t boDelay);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1ClkModeChange
N*
N* Sets the Clock Mode Change of Leaf DLL cells.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eModeChange - Clock Mode Change
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1SignalEn
N*
N* Enable/Disable signal for Master DLL.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eEnable - Enable/Disable signal for Master DLL
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio2
N*
N* Sets the user config1's gear ratio2.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vSetEarlyWriteResponse
N*
N* Configure Early Write Response
N*
N* @note No Limitations
N*
N* @param[in] eEnable - enable or disable Early Write Response
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vSetEarlyWriteResponse(dmc_enable_e eEnable);
N
N
N/****************************************************************************/
N
N
N#endif /* DMC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 24 "..\..\..\..\lldd\src\dmc.c" 2
N#include "pinmux_io.h"                /* Pin multiplex register access macros definition */
L 1 "..\..\..\..\lldd\hdr\pinmux_io.h" 1
N/*##########################################################################    
N/  AUTOMATICALLY GENERATED FROM A REG_XML-FILE 
N/  Module                       : PINMUX 
N/  Date of creation (y-m-d:time): 2015-01-20+01:00  :  10:55:54.218+01:00
N/  Excel2XML Tool ver.          : XLS2XML Converter 2.6.2
N/  Stylesheet  ver              : $Revision: 1.13 $ 
N/  Excel Sheet ver.             : vv1.4
N/  Excel Sheet date             : 2014-Oct-21
N/  Excel Sheet author           : AKL
N/##########################################################################*/
N
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Pin Multiplexer low level driver io-header file
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : GPIO
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.13 $ 
N*   DATE        : $Date: 2015/05/27 12:55:22 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary and Confidential
N*****************************************************************************/
N#ifndef PINMUXIO_H
N#define PINMUXIO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N/* Following include file(s) needed for proper operation: */
N#include "captypes.h"                      /* Core specific primitive type definitions */ 
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_PINMUX_IO_H_REVISION     "$Revision: 1.13 $"
N#define LLDD_PINMUX_IO_H_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N/* disable following Misra errors for io files */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 47    /* Rule 5.1  [R] : No more than 31 chars to determine an identifier */
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers  */
S  #pragma ghs nowarning 230   /* Rule 6.4  [R] : Bitfields can only have `unsigned int' or `signed int' types */
S  #pragma ghs nowarning 1861  /* Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words and standard library names */
S  #pragma ghs nowarning 1862  /* Rule 19.7 [A] : Disable function-like macro not allowed */
N#endif
N     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ0_1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302000                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ0_1_REG__       0xC0302000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ0_1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ0_1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ0_1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ0_1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ0_1()     ((volatile DDR_DQ0_1_bit_view_st *)\
N(DDR_DQ0_1_REG__ ))
X#define pst_bitDDR_DQ0_1()     ((volatile DDR_DQ0_1_bit_view_st *)(DDR_DQ0_1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ0_1()     ((volatile DDR_DQ0_1_byte_view_st *)\
N(DDR_DQ0_1_REG__ ))
X#define pst_u8DDR_DQ0_1()     ((volatile DDR_DQ0_1_byte_view_st *)(DDR_DQ0_1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ0_1()     ((volatile DDR_DQ0_1_halfword_view_st *)\
N(DDR_DQ0_1_REG__ ))
X#define pst_u16DDR_DQ0_1()     ((volatile DDR_DQ0_1_halfword_view_st *)(DDR_DQ0_1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ0_1()     ((volatile u32DDR_DQ0_1_word_view *)\
N(DDR_DQ0_1_REG__ ))
X#define pu32DDR_DQ0_1()     ((volatile u32DDR_DQ0_1_word_view *)(DDR_DQ0_1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ0_1_DDR_DQ0_SEL() (pst_bitDDR_DQ0_1() -> DDR_DQ0_SEL)
N#define vSetDDR_DQ0_1_DDR_DQ0_SEL(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_SEL=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ0_PU() (pst_bitDDR_DQ0_1() -> DDR_DQ0_PU)
N#define vSetDDR_DQ0_1_DDR_DQ0_PU(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_PU=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ0_PD() (pst_bitDDR_DQ0_1() -> DDR_DQ0_PD)
N#define vSetDDR_DQ0_1_DDR_DQ0_PD(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_PD=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ0_SMT() (pst_bitDDR_DQ0_1() -> DDR_DQ0_SMT)
N#define vSetDDR_DQ0_1_DDR_DQ0_SMT(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_SMT=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ0_IMP() (pst_bitDDR_DQ0_1() -> DDR_DQ0_IMP)
N#define vSetDDR_DQ0_1_DDR_DQ0_IMP(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_IMP=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ0_LATCHN() (pst_bitDDR_DQ0_1() -> DDR_DQ0_LATCHN)
N#define vSetDDR_DQ0_1_DDR_DQ0_LATCHN(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ0_LATCHN=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_SEL() (pst_bitDDR_DQ0_1() -> DDR_DQ1_SEL)
N#define vSetDDR_DQ0_1_DDR_DQ1_SEL(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_SEL=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_PU() (pst_bitDDR_DQ0_1() -> DDR_DQ1_PU)
N#define vSetDDR_DQ0_1_DDR_DQ1_PU(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_PU=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_PD() (pst_bitDDR_DQ0_1() -> DDR_DQ1_PD)
N#define vSetDDR_DQ0_1_DDR_DQ1_PD(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_PD=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_SMT() (pst_bitDDR_DQ0_1() -> DDR_DQ1_SMT)
N#define vSetDDR_DQ0_1_DDR_DQ1_SMT(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_SMT=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_IMP() (pst_bitDDR_DQ0_1() -> DDR_DQ1_IMP)
N#define vSetDDR_DQ0_1_DDR_DQ1_IMP(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_IMP=(ParValue))
N#define biGetDDR_DQ0_1_DDR_DQ1_LATCHN() (pst_bitDDR_DQ0_1() -> DDR_DQ1_LATCHN)
N#define vSetDDR_DQ0_1_DDR_DQ1_LATCHN(ParValue)  (pst_bitDDR_DQ0_1() -> DDR_DQ1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ0_1LL(ParValue) (pst_u8DDR_DQ0_1() -> u8LL = (ParValue))
N#define u8GetDDR_DQ0_1LL() (pst_u8DDR_DQ0_1() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ0_1LH(ParValue) (pst_u8DDR_DQ0_1() -> u8LH = (ParValue))
N#define u8GetDDR_DQ0_1LH() (pst_u8DDR_DQ0_1() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ0_1HL(ParValue) (pst_u8DDR_DQ0_1() -> u8HL = (ParValue))
N#define u8GetDDR_DQ0_1HL() (pst_u8DDR_DQ0_1() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ0_1HH(ParValue) (pst_u8DDR_DQ0_1() -> u8HH = (ParValue))
N#define u8GetDDR_DQ0_1HH() (pst_u8DDR_DQ0_1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ0_1L(ParValue) (pst_u16DDR_DQ0_1() -> u16L = (ParValue))
N#define u16GetDDR_DQ0_1L() (pst_u16DDR_DQ0_1() -> u16L)
N#define vSetDDR_DQ0_1H(ParValue) (pst_u16DDR_DQ0_1() -> u16H = (ParValue))
N#define u16GetDDR_DQ0_1H() (pst_u16DDR_DQ0_1() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ0_1(ParValue)  (*pu32DDR_DQ0_1() = (ParValue))
N#define u32GetDDR_DQ0_1()  (*pu32DDR_DQ0_1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ2_3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302004                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ2_3_REG__       0xC0302004U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ2_3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ2_3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ2_3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ2_3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ2_3()     ((volatile DDR_DQ2_3_bit_view_st *)\
N(DDR_DQ2_3_REG__ ))
X#define pst_bitDDR_DQ2_3()     ((volatile DDR_DQ2_3_bit_view_st *)(DDR_DQ2_3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ2_3()     ((volatile DDR_DQ2_3_byte_view_st *)\
N(DDR_DQ2_3_REG__ ))
X#define pst_u8DDR_DQ2_3()     ((volatile DDR_DQ2_3_byte_view_st *)(DDR_DQ2_3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ2_3()     ((volatile DDR_DQ2_3_halfword_view_st *)\
N(DDR_DQ2_3_REG__ ))
X#define pst_u16DDR_DQ2_3()     ((volatile DDR_DQ2_3_halfword_view_st *)(DDR_DQ2_3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ2_3()     ((volatile u32DDR_DQ2_3_word_view *)\
N(DDR_DQ2_3_REG__ ))
X#define pu32DDR_DQ2_3()     ((volatile u32DDR_DQ2_3_word_view *)(DDR_DQ2_3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ2_3_DDR_DQ2_SEL() (pst_bitDDR_DQ2_3() -> DDR_DQ2_SEL)
N#define vSetDDR_DQ2_3_DDR_DQ2_SEL(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_SEL=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ2_PU() (pst_bitDDR_DQ2_3() -> DDR_DQ2_PU)
N#define vSetDDR_DQ2_3_DDR_DQ2_PU(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_PU=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ2_PD() (pst_bitDDR_DQ2_3() -> DDR_DQ2_PD)
N#define vSetDDR_DQ2_3_DDR_DQ2_PD(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_PD=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ2_SMT() (pst_bitDDR_DQ2_3() -> DDR_DQ2_SMT)
N#define vSetDDR_DQ2_3_DDR_DQ2_SMT(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_SMT=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ2_IMP() (pst_bitDDR_DQ2_3() -> DDR_DQ2_IMP)
N#define vSetDDR_DQ2_3_DDR_DQ2_IMP(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_IMP=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ2_LATCHN() (pst_bitDDR_DQ2_3() -> DDR_DQ2_LATCHN)
N#define vSetDDR_DQ2_3_DDR_DQ2_LATCHN(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ2_LATCHN=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_SEL() (pst_bitDDR_DQ2_3() -> DDR_DQ3_SEL)
N#define vSetDDR_DQ2_3_DDR_DQ3_SEL(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_SEL=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_PU() (pst_bitDDR_DQ2_3() -> DDR_DQ3_PU)
N#define vSetDDR_DQ2_3_DDR_DQ3_PU(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_PU=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_PD() (pst_bitDDR_DQ2_3() -> DDR_DQ3_PD)
N#define vSetDDR_DQ2_3_DDR_DQ3_PD(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_PD=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_SMT() (pst_bitDDR_DQ2_3() -> DDR_DQ3_SMT)
N#define vSetDDR_DQ2_3_DDR_DQ3_SMT(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_SMT=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_IMP() (pst_bitDDR_DQ2_3() -> DDR_DQ3_IMP)
N#define vSetDDR_DQ2_3_DDR_DQ3_IMP(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_IMP=(ParValue))
N#define biGetDDR_DQ2_3_DDR_DQ3_LATCHN() (pst_bitDDR_DQ2_3() -> DDR_DQ3_LATCHN)
N#define vSetDDR_DQ2_3_DDR_DQ3_LATCHN(ParValue)  (pst_bitDDR_DQ2_3() -> DDR_DQ3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ2_3LL(ParValue) (pst_u8DDR_DQ2_3() -> u8LL = (ParValue))
N#define u8GetDDR_DQ2_3LL() (pst_u8DDR_DQ2_3() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ2_3LH(ParValue) (pst_u8DDR_DQ2_3() -> u8LH = (ParValue))
N#define u8GetDDR_DQ2_3LH() (pst_u8DDR_DQ2_3() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ2_3HL(ParValue) (pst_u8DDR_DQ2_3() -> u8HL = (ParValue))
N#define u8GetDDR_DQ2_3HL() (pst_u8DDR_DQ2_3() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ2_3HH(ParValue) (pst_u8DDR_DQ2_3() -> u8HH = (ParValue))
N#define u8GetDDR_DQ2_3HH() (pst_u8DDR_DQ2_3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ2_3L(ParValue) (pst_u16DDR_DQ2_3() -> u16L = (ParValue))
N#define u16GetDDR_DQ2_3L() (pst_u16DDR_DQ2_3() -> u16L)
N#define vSetDDR_DQ2_3H(ParValue) (pst_u16DDR_DQ2_3() -> u16H = (ParValue))
N#define u16GetDDR_DQ2_3H() (pst_u16DDR_DQ2_3() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ2_3(ParValue)  (*pu32DDR_DQ2_3() = (ParValue))
N#define u32GetDDR_DQ2_3()  (*pu32DDR_DQ2_3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ4_5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302008                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ4_5_REG__       0xC0302008U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ4_5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ4_5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ4_5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ4_5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ4_5()     ((volatile DDR_DQ4_5_bit_view_st *)\
N(DDR_DQ4_5_REG__ ))
X#define pst_bitDDR_DQ4_5()     ((volatile DDR_DQ4_5_bit_view_st *)(DDR_DQ4_5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ4_5()     ((volatile DDR_DQ4_5_byte_view_st *)\
N(DDR_DQ4_5_REG__ ))
X#define pst_u8DDR_DQ4_5()     ((volatile DDR_DQ4_5_byte_view_st *)(DDR_DQ4_5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ4_5()     ((volatile DDR_DQ4_5_halfword_view_st *)\
N(DDR_DQ4_5_REG__ ))
X#define pst_u16DDR_DQ4_5()     ((volatile DDR_DQ4_5_halfword_view_st *)(DDR_DQ4_5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ4_5()     ((volatile u32DDR_DQ4_5_word_view *)\
N(DDR_DQ4_5_REG__ ))
X#define pu32DDR_DQ4_5()     ((volatile u32DDR_DQ4_5_word_view *)(DDR_DQ4_5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ4_5_DDR_DQ4_SEL() (pst_bitDDR_DQ4_5() -> DDR_DQ4_SEL)
N#define vSetDDR_DQ4_5_DDR_DQ4_SEL(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_SEL=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ4_PU() (pst_bitDDR_DQ4_5() -> DDR_DQ4_PU)
N#define vSetDDR_DQ4_5_DDR_DQ4_PU(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_PU=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ4_PD() (pst_bitDDR_DQ4_5() -> DDR_DQ4_PD)
N#define vSetDDR_DQ4_5_DDR_DQ4_PD(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_PD=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ4_SMT() (pst_bitDDR_DQ4_5() -> DDR_DQ4_SMT)
N#define vSetDDR_DQ4_5_DDR_DQ4_SMT(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_SMT=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ4_IMP() (pst_bitDDR_DQ4_5() -> DDR_DQ4_IMP)
N#define vSetDDR_DQ4_5_DDR_DQ4_IMP(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_IMP=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ4_LATCHN() (pst_bitDDR_DQ4_5() -> DDR_DQ4_LATCHN)
N#define vSetDDR_DQ4_5_DDR_DQ4_LATCHN(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ4_LATCHN=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_SEL() (pst_bitDDR_DQ4_5() -> DDR_DQ5_SEL)
N#define vSetDDR_DQ4_5_DDR_DQ5_SEL(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_SEL=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_PU() (pst_bitDDR_DQ4_5() -> DDR_DQ5_PU)
N#define vSetDDR_DQ4_5_DDR_DQ5_PU(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_PU=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_PD() (pst_bitDDR_DQ4_5() -> DDR_DQ5_PD)
N#define vSetDDR_DQ4_5_DDR_DQ5_PD(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_PD=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_SMT() (pst_bitDDR_DQ4_5() -> DDR_DQ5_SMT)
N#define vSetDDR_DQ4_5_DDR_DQ5_SMT(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_SMT=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_IMP() (pst_bitDDR_DQ4_5() -> DDR_DQ5_IMP)
N#define vSetDDR_DQ4_5_DDR_DQ5_IMP(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_IMP=(ParValue))
N#define biGetDDR_DQ4_5_DDR_DQ5_LATCHN() (pst_bitDDR_DQ4_5() -> DDR_DQ5_LATCHN)
N#define vSetDDR_DQ4_5_DDR_DQ5_LATCHN(ParValue)  (pst_bitDDR_DQ4_5() -> DDR_DQ5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ4_5LL(ParValue) (pst_u8DDR_DQ4_5() -> u8LL = (ParValue))
N#define u8GetDDR_DQ4_5LL() (pst_u8DDR_DQ4_5() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ4_5LH(ParValue) (pst_u8DDR_DQ4_5() -> u8LH = (ParValue))
N#define u8GetDDR_DQ4_5LH() (pst_u8DDR_DQ4_5() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ4_5HL(ParValue) (pst_u8DDR_DQ4_5() -> u8HL = (ParValue))
N#define u8GetDDR_DQ4_5HL() (pst_u8DDR_DQ4_5() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ4_5HH(ParValue) (pst_u8DDR_DQ4_5() -> u8HH = (ParValue))
N#define u8GetDDR_DQ4_5HH() (pst_u8DDR_DQ4_5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ4_5L(ParValue) (pst_u16DDR_DQ4_5() -> u16L = (ParValue))
N#define u16GetDDR_DQ4_5L() (pst_u16DDR_DQ4_5() -> u16L)
N#define vSetDDR_DQ4_5H(ParValue) (pst_u16DDR_DQ4_5() -> u16H = (ParValue))
N#define u16GetDDR_DQ4_5H() (pst_u16DDR_DQ4_5() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ4_5(ParValue)  (*pu32DDR_DQ4_5() = (ParValue))
N#define u32GetDDR_DQ4_5()  (*pu32DDR_DQ4_5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ6_7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030200C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ6_7_REG__       0xC030200CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ6_7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ6_7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ6_7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ6_7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ6_7()     ((volatile DDR_DQ6_7_bit_view_st *)\
N(DDR_DQ6_7_REG__ ))
X#define pst_bitDDR_DQ6_7()     ((volatile DDR_DQ6_7_bit_view_st *)(DDR_DQ6_7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ6_7()     ((volatile DDR_DQ6_7_byte_view_st *)\
N(DDR_DQ6_7_REG__ ))
X#define pst_u8DDR_DQ6_7()     ((volatile DDR_DQ6_7_byte_view_st *)(DDR_DQ6_7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ6_7()     ((volatile DDR_DQ6_7_halfword_view_st *)\
N(DDR_DQ6_7_REG__ ))
X#define pst_u16DDR_DQ6_7()     ((volatile DDR_DQ6_7_halfword_view_st *)(DDR_DQ6_7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ6_7()     ((volatile u32DDR_DQ6_7_word_view *)\
N(DDR_DQ6_7_REG__ ))
X#define pu32DDR_DQ6_7()     ((volatile u32DDR_DQ6_7_word_view *)(DDR_DQ6_7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ6_7_DDR_DQ6_SEL() (pst_bitDDR_DQ6_7() -> DDR_DQ6_SEL)
N#define vSetDDR_DQ6_7_DDR_DQ6_SEL(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_SEL=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ6_PU() (pst_bitDDR_DQ6_7() -> DDR_DQ6_PU)
N#define vSetDDR_DQ6_7_DDR_DQ6_PU(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_PU=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ6_PD() (pst_bitDDR_DQ6_7() -> DDR_DQ6_PD)
N#define vSetDDR_DQ6_7_DDR_DQ6_PD(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_PD=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ6_SMT() (pst_bitDDR_DQ6_7() -> DDR_DQ6_SMT)
N#define vSetDDR_DQ6_7_DDR_DQ6_SMT(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_SMT=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ6_IMP() (pst_bitDDR_DQ6_7() -> DDR_DQ6_IMP)
N#define vSetDDR_DQ6_7_DDR_DQ6_IMP(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_IMP=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ6_LATCHN() (pst_bitDDR_DQ6_7() -> DDR_DQ6_LATCHN)
N#define vSetDDR_DQ6_7_DDR_DQ6_LATCHN(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ6_LATCHN=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_SEL() (pst_bitDDR_DQ6_7() -> DDR_DQ7_SEL)
N#define vSetDDR_DQ6_7_DDR_DQ7_SEL(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_SEL=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_PU() (pst_bitDDR_DQ6_7() -> DDR_DQ7_PU)
N#define vSetDDR_DQ6_7_DDR_DQ7_PU(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_PU=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_PD() (pst_bitDDR_DQ6_7() -> DDR_DQ7_PD)
N#define vSetDDR_DQ6_7_DDR_DQ7_PD(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_PD=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_SMT() (pst_bitDDR_DQ6_7() -> DDR_DQ7_SMT)
N#define vSetDDR_DQ6_7_DDR_DQ7_SMT(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_SMT=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_IMP() (pst_bitDDR_DQ6_7() -> DDR_DQ7_IMP)
N#define vSetDDR_DQ6_7_DDR_DQ7_IMP(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_IMP=(ParValue))
N#define biGetDDR_DQ6_7_DDR_DQ7_LATCHN() (pst_bitDDR_DQ6_7() -> DDR_DQ7_LATCHN)
N#define vSetDDR_DQ6_7_DDR_DQ7_LATCHN(ParValue)  (pst_bitDDR_DQ6_7() -> DDR_DQ7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ6_7LL(ParValue) (pst_u8DDR_DQ6_7() -> u8LL = (ParValue))
N#define u8GetDDR_DQ6_7LL() (pst_u8DDR_DQ6_7() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ6_7LH(ParValue) (pst_u8DDR_DQ6_7() -> u8LH = (ParValue))
N#define u8GetDDR_DQ6_7LH() (pst_u8DDR_DQ6_7() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ6_7HL(ParValue) (pst_u8DDR_DQ6_7() -> u8HL = (ParValue))
N#define u8GetDDR_DQ6_7HL() (pst_u8DDR_DQ6_7() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ6_7HH(ParValue) (pst_u8DDR_DQ6_7() -> u8HH = (ParValue))
N#define u8GetDDR_DQ6_7HH() (pst_u8DDR_DQ6_7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ6_7L(ParValue) (pst_u16DDR_DQ6_7() -> u16L = (ParValue))
N#define u16GetDDR_DQ6_7L() (pst_u16DDR_DQ6_7() -> u16L)
N#define vSetDDR_DQ6_7H(ParValue) (pst_u16DDR_DQ6_7() -> u16H = (ParValue))
N#define u16GetDDR_DQ6_7H() (pst_u16DDR_DQ6_7() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ6_7(ParValue)  (*pu32DDR_DQ6_7() = (ParValue))
N#define u32GetDDR_DQ6_7()  (*pu32DDR_DQ6_7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ8_9                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302010                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ8_9_REG__       0xC0302010U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ8_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ8_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ8_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ8_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ8_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ8_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ9_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ9_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ9_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ9_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ9_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ9_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ8_9_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ8_9_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ8_9_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ8_9_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ8_9()     ((volatile DDR_DQ8_9_bit_view_st *)\
N(DDR_DQ8_9_REG__ ))
X#define pst_bitDDR_DQ8_9()     ((volatile DDR_DQ8_9_bit_view_st *)(DDR_DQ8_9_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ8_9()     ((volatile DDR_DQ8_9_byte_view_st *)\
N(DDR_DQ8_9_REG__ ))
X#define pst_u8DDR_DQ8_9()     ((volatile DDR_DQ8_9_byte_view_st *)(DDR_DQ8_9_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ8_9()     ((volatile DDR_DQ8_9_halfword_view_st *)\
N(DDR_DQ8_9_REG__ ))
X#define pst_u16DDR_DQ8_9()     ((volatile DDR_DQ8_9_halfword_view_st *)(DDR_DQ8_9_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ8_9()     ((volatile u32DDR_DQ8_9_word_view *)\
N(DDR_DQ8_9_REG__ ))
X#define pu32DDR_DQ8_9()     ((volatile u32DDR_DQ8_9_word_view *)(DDR_DQ8_9_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ8_9_DDR_DQ8_SEL() (pst_bitDDR_DQ8_9() -> DDR_DQ8_SEL)
N#define vSetDDR_DQ8_9_DDR_DQ8_SEL(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_SEL=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ8_PU() (pst_bitDDR_DQ8_9() -> DDR_DQ8_PU)
N#define vSetDDR_DQ8_9_DDR_DQ8_PU(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_PU=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ8_PD() (pst_bitDDR_DQ8_9() -> DDR_DQ8_PD)
N#define vSetDDR_DQ8_9_DDR_DQ8_PD(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_PD=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ8_SMT() (pst_bitDDR_DQ8_9() -> DDR_DQ8_SMT)
N#define vSetDDR_DQ8_9_DDR_DQ8_SMT(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_SMT=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ8_IMP() (pst_bitDDR_DQ8_9() -> DDR_DQ8_IMP)
N#define vSetDDR_DQ8_9_DDR_DQ8_IMP(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_IMP=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ8_LATCHN() (pst_bitDDR_DQ8_9() -> DDR_DQ8_LATCHN)
N#define vSetDDR_DQ8_9_DDR_DQ8_LATCHN(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ8_LATCHN=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_SEL() (pst_bitDDR_DQ8_9() -> DDR_DQ9_SEL)
N#define vSetDDR_DQ8_9_DDR_DQ9_SEL(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_SEL=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_PU() (pst_bitDDR_DQ8_9() -> DDR_DQ9_PU)
N#define vSetDDR_DQ8_9_DDR_DQ9_PU(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_PU=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_PD() (pst_bitDDR_DQ8_9() -> DDR_DQ9_PD)
N#define vSetDDR_DQ8_9_DDR_DQ9_PD(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_PD=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_SMT() (pst_bitDDR_DQ8_9() -> DDR_DQ9_SMT)
N#define vSetDDR_DQ8_9_DDR_DQ9_SMT(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_SMT=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_IMP() (pst_bitDDR_DQ8_9() -> DDR_DQ9_IMP)
N#define vSetDDR_DQ8_9_DDR_DQ9_IMP(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_IMP=(ParValue))
N#define biGetDDR_DQ8_9_DDR_DQ9_LATCHN() (pst_bitDDR_DQ8_9() -> DDR_DQ9_LATCHN)
N#define vSetDDR_DQ8_9_DDR_DQ9_LATCHN(ParValue)  (pst_bitDDR_DQ8_9() -> DDR_DQ9_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ8_9LL(ParValue) (pst_u8DDR_DQ8_9() -> u8LL = (ParValue))
N#define u8GetDDR_DQ8_9LL() (pst_u8DDR_DQ8_9() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ8_9LH(ParValue) (pst_u8DDR_DQ8_9() -> u8LH = (ParValue))
N#define u8GetDDR_DQ8_9LH() (pst_u8DDR_DQ8_9() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ8_9HL(ParValue) (pst_u8DDR_DQ8_9() -> u8HL = (ParValue))
N#define u8GetDDR_DQ8_9HL() (pst_u8DDR_DQ8_9() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ8_9HH(ParValue) (pst_u8DDR_DQ8_9() -> u8HH = (ParValue))
N#define u8GetDDR_DQ8_9HH() (pst_u8DDR_DQ8_9() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ8_9L(ParValue) (pst_u16DDR_DQ8_9() -> u16L = (ParValue))
N#define u16GetDDR_DQ8_9L() (pst_u16DDR_DQ8_9() -> u16L)
N#define vSetDDR_DQ8_9H(ParValue) (pst_u16DDR_DQ8_9() -> u16H = (ParValue))
N#define u16GetDDR_DQ8_9H() (pst_u16DDR_DQ8_9() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ8_9(ParValue)  (*pu32DDR_DQ8_9() = (ParValue))
N#define u32GetDDR_DQ8_9()  (*pu32DDR_DQ8_9() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ10_11                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302014                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ10_11_REG__       0xC0302014U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ10_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ10_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ10_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ10_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ10_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ10_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ11_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ11_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ11_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ11_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ11_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ11_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ10_11_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ10_11_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ10_11_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ10_11_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ10_11()     ((volatile DDR_DQ10_11_bit_view_st *)\
N(DDR_DQ10_11_REG__ ))
X#define pst_bitDDR_DQ10_11()     ((volatile DDR_DQ10_11_bit_view_st *)(DDR_DQ10_11_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ10_11()     ((volatile DDR_DQ10_11_byte_view_st *)\
N(DDR_DQ10_11_REG__ ))
X#define pst_u8DDR_DQ10_11()     ((volatile DDR_DQ10_11_byte_view_st *)(DDR_DQ10_11_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ10_11()     ((volatile DDR_DQ10_11_halfword_view_st *)\
N(DDR_DQ10_11_REG__ ))
X#define pst_u16DDR_DQ10_11()     ((volatile DDR_DQ10_11_halfword_view_st *)(DDR_DQ10_11_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ10_11()     ((volatile u32DDR_DQ10_11_word_view *)\
N(DDR_DQ10_11_REG__ ))
X#define pu32DDR_DQ10_11()     ((volatile u32DDR_DQ10_11_word_view *)(DDR_DQ10_11_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ10_11_DDR_DQ10_SEL() (pst_bitDDR_DQ10_11() -> DDR_DQ10_SEL)
N#define vSetDDR_DQ10_11_DDR_DQ10_SEL(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_SEL=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ10_PU() (pst_bitDDR_DQ10_11() -> DDR_DQ10_PU)
N#define vSetDDR_DQ10_11_DDR_DQ10_PU(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_PU=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ10_PD() (pst_bitDDR_DQ10_11() -> DDR_DQ10_PD)
N#define vSetDDR_DQ10_11_DDR_DQ10_PD(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_PD=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ10_SMT() (pst_bitDDR_DQ10_11() -> DDR_DQ10_SMT)
N#define vSetDDR_DQ10_11_DDR_DQ10_SMT(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_SMT=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ10_IMP() (pst_bitDDR_DQ10_11() -> DDR_DQ10_IMP)
N#define vSetDDR_DQ10_11_DDR_DQ10_IMP(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_IMP=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ10_LATCHN() (pst_bitDDR_DQ10_11() -> DDR_DQ10_LATCHN)
N#define vSetDDR_DQ10_11_DDR_DQ10_LATCHN(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ10_LATCHN=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_SEL() (pst_bitDDR_DQ10_11() -> DDR_DQ11_SEL)
N#define vSetDDR_DQ10_11_DDR_DQ11_SEL(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_SEL=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_PU() (pst_bitDDR_DQ10_11() -> DDR_DQ11_PU)
N#define vSetDDR_DQ10_11_DDR_DQ11_PU(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_PU=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_PD() (pst_bitDDR_DQ10_11() -> DDR_DQ11_PD)
N#define vSetDDR_DQ10_11_DDR_DQ11_PD(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_PD=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_SMT() (pst_bitDDR_DQ10_11() -> DDR_DQ11_SMT)
N#define vSetDDR_DQ10_11_DDR_DQ11_SMT(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_SMT=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_IMP() (pst_bitDDR_DQ10_11() -> DDR_DQ11_IMP)
N#define vSetDDR_DQ10_11_DDR_DQ11_IMP(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_IMP=(ParValue))
N#define biGetDDR_DQ10_11_DDR_DQ11_LATCHN() (pst_bitDDR_DQ10_11() -> DDR_DQ11_LATCHN)
N#define vSetDDR_DQ10_11_DDR_DQ11_LATCHN(ParValue)  (pst_bitDDR_DQ10_11() -> DDR_DQ11_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ10_11LL(ParValue) (pst_u8DDR_DQ10_11() -> u8LL = (ParValue))
N#define u8GetDDR_DQ10_11LL() (pst_u8DDR_DQ10_11() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ10_11LH(ParValue) (pst_u8DDR_DQ10_11() -> u8LH = (ParValue))
N#define u8GetDDR_DQ10_11LH() (pst_u8DDR_DQ10_11() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ10_11HL(ParValue) (pst_u8DDR_DQ10_11() -> u8HL = (ParValue))
N#define u8GetDDR_DQ10_11HL() (pst_u8DDR_DQ10_11() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ10_11HH(ParValue) (pst_u8DDR_DQ10_11() -> u8HH = (ParValue))
N#define u8GetDDR_DQ10_11HH() (pst_u8DDR_DQ10_11() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ10_11L(ParValue) (pst_u16DDR_DQ10_11() -> u16L = (ParValue))
N#define u16GetDDR_DQ10_11L() (pst_u16DDR_DQ10_11() -> u16L)
N#define vSetDDR_DQ10_11H(ParValue) (pst_u16DDR_DQ10_11() -> u16H = (ParValue))
N#define u16GetDDR_DQ10_11H() (pst_u16DDR_DQ10_11() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ10_11(ParValue)  (*pu32DDR_DQ10_11() = (ParValue))
N#define u32GetDDR_DQ10_11()  (*pu32DDR_DQ10_11() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ12_13                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302018                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ12_13_REG__       0xC0302018U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ12_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ12_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ12_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ12_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ12_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ12_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ13_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ13_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ13_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ13_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ13_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ13_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ12_13_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ12_13_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ12_13_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ12_13_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ12_13()     ((volatile DDR_DQ12_13_bit_view_st *)\
N(DDR_DQ12_13_REG__ ))
X#define pst_bitDDR_DQ12_13()     ((volatile DDR_DQ12_13_bit_view_st *)(DDR_DQ12_13_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ12_13()     ((volatile DDR_DQ12_13_byte_view_st *)\
N(DDR_DQ12_13_REG__ ))
X#define pst_u8DDR_DQ12_13()     ((volatile DDR_DQ12_13_byte_view_st *)(DDR_DQ12_13_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ12_13()     ((volatile DDR_DQ12_13_halfword_view_st *)\
N(DDR_DQ12_13_REG__ ))
X#define pst_u16DDR_DQ12_13()     ((volatile DDR_DQ12_13_halfword_view_st *)(DDR_DQ12_13_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ12_13()     ((volatile u32DDR_DQ12_13_word_view *)\
N(DDR_DQ12_13_REG__ ))
X#define pu32DDR_DQ12_13()     ((volatile u32DDR_DQ12_13_word_view *)(DDR_DQ12_13_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ12_13_DDR_DQ12_SEL() (pst_bitDDR_DQ12_13() -> DDR_DQ12_SEL)
N#define vSetDDR_DQ12_13_DDR_DQ12_SEL(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_SEL=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ12_PU() (pst_bitDDR_DQ12_13() -> DDR_DQ12_PU)
N#define vSetDDR_DQ12_13_DDR_DQ12_PU(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_PU=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ12_PD() (pst_bitDDR_DQ12_13() -> DDR_DQ12_PD)
N#define vSetDDR_DQ12_13_DDR_DQ12_PD(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_PD=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ12_SMT() (pst_bitDDR_DQ12_13() -> DDR_DQ12_SMT)
N#define vSetDDR_DQ12_13_DDR_DQ12_SMT(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_SMT=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ12_IMP() (pst_bitDDR_DQ12_13() -> DDR_DQ12_IMP)
N#define vSetDDR_DQ12_13_DDR_DQ12_IMP(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_IMP=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ12_LATCHN() (pst_bitDDR_DQ12_13() -> DDR_DQ12_LATCHN)
N#define vSetDDR_DQ12_13_DDR_DQ12_LATCHN(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ12_LATCHN=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_SEL() (pst_bitDDR_DQ12_13() -> DDR_DQ13_SEL)
N#define vSetDDR_DQ12_13_DDR_DQ13_SEL(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_SEL=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_PU() (pst_bitDDR_DQ12_13() -> DDR_DQ13_PU)
N#define vSetDDR_DQ12_13_DDR_DQ13_PU(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_PU=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_PD() (pst_bitDDR_DQ12_13() -> DDR_DQ13_PD)
N#define vSetDDR_DQ12_13_DDR_DQ13_PD(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_PD=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_SMT() (pst_bitDDR_DQ12_13() -> DDR_DQ13_SMT)
N#define vSetDDR_DQ12_13_DDR_DQ13_SMT(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_SMT=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_IMP() (pst_bitDDR_DQ12_13() -> DDR_DQ13_IMP)
N#define vSetDDR_DQ12_13_DDR_DQ13_IMP(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_IMP=(ParValue))
N#define biGetDDR_DQ12_13_DDR_DQ13_LATCHN() (pst_bitDDR_DQ12_13() -> DDR_DQ13_LATCHN)
N#define vSetDDR_DQ12_13_DDR_DQ13_LATCHN(ParValue)  (pst_bitDDR_DQ12_13() -> DDR_DQ13_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ12_13LL(ParValue) (pst_u8DDR_DQ12_13() -> u8LL = (ParValue))
N#define u8GetDDR_DQ12_13LL() (pst_u8DDR_DQ12_13() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ12_13LH(ParValue) (pst_u8DDR_DQ12_13() -> u8LH = (ParValue))
N#define u8GetDDR_DQ12_13LH() (pst_u8DDR_DQ12_13() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ12_13HL(ParValue) (pst_u8DDR_DQ12_13() -> u8HL = (ParValue))
N#define u8GetDDR_DQ12_13HL() (pst_u8DDR_DQ12_13() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ12_13HH(ParValue) (pst_u8DDR_DQ12_13() -> u8HH = (ParValue))
N#define u8GetDDR_DQ12_13HH() (pst_u8DDR_DQ12_13() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ12_13L(ParValue) (pst_u16DDR_DQ12_13() -> u16L = (ParValue))
N#define u16GetDDR_DQ12_13L() (pst_u16DDR_DQ12_13() -> u16L)
N#define vSetDDR_DQ12_13H(ParValue) (pst_u16DDR_DQ12_13() -> u16H = (ParValue))
N#define u16GetDDR_DQ12_13H() (pst_u16DDR_DQ12_13() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ12_13(ParValue)  (*pu32DDR_DQ12_13() = (ParValue))
N#define u32GetDDR_DQ12_13()  (*pu32DDR_DQ12_13() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ14_15                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030201C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ14_15_REG__       0xC030201CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ14_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ14_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ14_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ14_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ14_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ14_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ15_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ15_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ15_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ15_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ15_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ15_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ14_15_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ14_15_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ14_15_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ14_15_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ14_15()     ((volatile DDR_DQ14_15_bit_view_st *)\
N(DDR_DQ14_15_REG__ ))
X#define pst_bitDDR_DQ14_15()     ((volatile DDR_DQ14_15_bit_view_st *)(DDR_DQ14_15_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ14_15()     ((volatile DDR_DQ14_15_byte_view_st *)\
N(DDR_DQ14_15_REG__ ))
X#define pst_u8DDR_DQ14_15()     ((volatile DDR_DQ14_15_byte_view_st *)(DDR_DQ14_15_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ14_15()     ((volatile DDR_DQ14_15_halfword_view_st *)\
N(DDR_DQ14_15_REG__ ))
X#define pst_u16DDR_DQ14_15()     ((volatile DDR_DQ14_15_halfword_view_st *)(DDR_DQ14_15_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ14_15()     ((volatile u32DDR_DQ14_15_word_view *)\
N(DDR_DQ14_15_REG__ ))
X#define pu32DDR_DQ14_15()     ((volatile u32DDR_DQ14_15_word_view *)(DDR_DQ14_15_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ14_15_DDR_DQ14_SEL() (pst_bitDDR_DQ14_15() -> DDR_DQ14_SEL)
N#define vSetDDR_DQ14_15_DDR_DQ14_SEL(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_SEL=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ14_PU() (pst_bitDDR_DQ14_15() -> DDR_DQ14_PU)
N#define vSetDDR_DQ14_15_DDR_DQ14_PU(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_PU=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ14_PD() (pst_bitDDR_DQ14_15() -> DDR_DQ14_PD)
N#define vSetDDR_DQ14_15_DDR_DQ14_PD(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_PD=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ14_SMT() (pst_bitDDR_DQ14_15() -> DDR_DQ14_SMT)
N#define vSetDDR_DQ14_15_DDR_DQ14_SMT(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_SMT=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ14_IMP() (pst_bitDDR_DQ14_15() -> DDR_DQ14_IMP)
N#define vSetDDR_DQ14_15_DDR_DQ14_IMP(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_IMP=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ14_LATCHN() (pst_bitDDR_DQ14_15() -> DDR_DQ14_LATCHN)
N#define vSetDDR_DQ14_15_DDR_DQ14_LATCHN(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ14_LATCHN=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_SEL() (pst_bitDDR_DQ14_15() -> DDR_DQ15_SEL)
N#define vSetDDR_DQ14_15_DDR_DQ15_SEL(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_SEL=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_PU() (pst_bitDDR_DQ14_15() -> DDR_DQ15_PU)
N#define vSetDDR_DQ14_15_DDR_DQ15_PU(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_PU=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_PD() (pst_bitDDR_DQ14_15() -> DDR_DQ15_PD)
N#define vSetDDR_DQ14_15_DDR_DQ15_PD(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_PD=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_SMT() (pst_bitDDR_DQ14_15() -> DDR_DQ15_SMT)
N#define vSetDDR_DQ14_15_DDR_DQ15_SMT(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_SMT=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_IMP() (pst_bitDDR_DQ14_15() -> DDR_DQ15_IMP)
N#define vSetDDR_DQ14_15_DDR_DQ15_IMP(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_IMP=(ParValue))
N#define biGetDDR_DQ14_15_DDR_DQ15_LATCHN() (pst_bitDDR_DQ14_15() -> DDR_DQ15_LATCHN)
N#define vSetDDR_DQ14_15_DDR_DQ15_LATCHN(ParValue)  (pst_bitDDR_DQ14_15() -> DDR_DQ15_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ14_15LL(ParValue) (pst_u8DDR_DQ14_15() -> u8LL = (ParValue))
N#define u8GetDDR_DQ14_15LL() (pst_u8DDR_DQ14_15() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ14_15LH(ParValue) (pst_u8DDR_DQ14_15() -> u8LH = (ParValue))
N#define u8GetDDR_DQ14_15LH() (pst_u8DDR_DQ14_15() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ14_15HL(ParValue) (pst_u8DDR_DQ14_15() -> u8HL = (ParValue))
N#define u8GetDDR_DQ14_15HL() (pst_u8DDR_DQ14_15() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ14_15HH(ParValue) (pst_u8DDR_DQ14_15() -> u8HH = (ParValue))
N#define u8GetDDR_DQ14_15HH() (pst_u8DDR_DQ14_15() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ14_15L(ParValue) (pst_u16DDR_DQ14_15() -> u16L = (ParValue))
N#define u16GetDDR_DQ14_15L() (pst_u16DDR_DQ14_15() -> u16L)
N#define vSetDDR_DQ14_15H(ParValue) (pst_u16DDR_DQ14_15() -> u16H = (ParValue))
N#define u16GetDDR_DQ14_15H() (pst_u16DDR_DQ14_15() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ14_15(ParValue)  (*pu32DDR_DQ14_15() = (ParValue))
N#define u32GetDDR_DQ14_15()  (*pu32DDR_DQ14_15() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DM0_1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302020                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DM0_1_REG__       0xC0302020U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DM0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DM0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DM0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DM0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DM0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DM0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DM1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DM1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DM1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DM1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DM1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DM1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DM0_1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DM0_1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DM0_1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DM0_1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DM0_1()     ((volatile DDR_DM0_1_bit_view_st *)\
N(DDR_DM0_1_REG__ ))
X#define pst_bitDDR_DM0_1()     ((volatile DDR_DM0_1_bit_view_st *)(DDR_DM0_1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DM0_1()     ((volatile DDR_DM0_1_byte_view_st *)\
N(DDR_DM0_1_REG__ ))
X#define pst_u8DDR_DM0_1()     ((volatile DDR_DM0_1_byte_view_st *)(DDR_DM0_1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DM0_1()     ((volatile DDR_DM0_1_halfword_view_st *)\
N(DDR_DM0_1_REG__ ))
X#define pst_u16DDR_DM0_1()     ((volatile DDR_DM0_1_halfword_view_st *)(DDR_DM0_1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DM0_1()     ((volatile u32DDR_DM0_1_word_view *)\
N(DDR_DM0_1_REG__ ))
X#define pu32DDR_DM0_1()     ((volatile u32DDR_DM0_1_word_view *)(DDR_DM0_1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DM0_1_DDR_DM0_SEL() (pst_bitDDR_DM0_1() -> DDR_DM0_SEL)
N#define vSetDDR_DM0_1_DDR_DM0_SEL(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_SEL=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM0_PU() (pst_bitDDR_DM0_1() -> DDR_DM0_PU)
N#define vSetDDR_DM0_1_DDR_DM0_PU(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_PU=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM0_PD() (pst_bitDDR_DM0_1() -> DDR_DM0_PD)
N#define vSetDDR_DM0_1_DDR_DM0_PD(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_PD=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM0_SMT() (pst_bitDDR_DM0_1() -> DDR_DM0_SMT)
N#define vSetDDR_DM0_1_DDR_DM0_SMT(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_SMT=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM0_IMP() (pst_bitDDR_DM0_1() -> DDR_DM0_IMP)
N#define vSetDDR_DM0_1_DDR_DM0_IMP(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_IMP=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM0_LATCHN() (pst_bitDDR_DM0_1() -> DDR_DM0_LATCHN)
N#define vSetDDR_DM0_1_DDR_DM0_LATCHN(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM0_LATCHN=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_SEL() (pst_bitDDR_DM0_1() -> DDR_DM1_SEL)
N#define vSetDDR_DM0_1_DDR_DM1_SEL(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_SEL=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_PU() (pst_bitDDR_DM0_1() -> DDR_DM1_PU)
N#define vSetDDR_DM0_1_DDR_DM1_PU(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_PU=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_PD() (pst_bitDDR_DM0_1() -> DDR_DM1_PD)
N#define vSetDDR_DM0_1_DDR_DM1_PD(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_PD=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_SMT() (pst_bitDDR_DM0_1() -> DDR_DM1_SMT)
N#define vSetDDR_DM0_1_DDR_DM1_SMT(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_SMT=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_IMP() (pst_bitDDR_DM0_1() -> DDR_DM1_IMP)
N#define vSetDDR_DM0_1_DDR_DM1_IMP(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_IMP=(ParValue))
N#define biGetDDR_DM0_1_DDR_DM1_LATCHN() (pst_bitDDR_DM0_1() -> DDR_DM1_LATCHN)
N#define vSetDDR_DM0_1_DDR_DM1_LATCHN(ParValue)  (pst_bitDDR_DM0_1() -> DDR_DM1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DM0_1LL(ParValue) (pst_u8DDR_DM0_1() -> u8LL = (ParValue))
N#define u8GetDDR_DM0_1LL() (pst_u8DDR_DM0_1() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DM0_1LH(ParValue) (pst_u8DDR_DM0_1() -> u8LH = (ParValue))
N#define u8GetDDR_DM0_1LH() (pst_u8DDR_DM0_1() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DM0_1HL(ParValue) (pst_u8DDR_DM0_1() -> u8HL = (ParValue))
N#define u8GetDDR_DM0_1HL() (pst_u8DDR_DM0_1() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DM0_1HH(ParValue) (pst_u8DDR_DM0_1() -> u8HH = (ParValue))
N#define u8GetDDR_DM0_1HH() (pst_u8DDR_DM0_1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DM0_1L(ParValue) (pst_u16DDR_DM0_1() -> u16L = (ParValue))
N#define u16GetDDR_DM0_1L() (pst_u16DDR_DM0_1() -> u16L)
N#define vSetDDR_DM0_1H(ParValue) (pst_u16DDR_DM0_1() -> u16H = (ParValue))
N#define u16GetDDR_DM0_1H() (pst_u16DDR_DM0_1() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DM0_1(ParValue)  (*pu32DDR_DM0_1() = (ParValue))
N#define u32GetDDR_DM0_1()  (*pu32DDR_DM0_1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_WE_RAS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302024                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_WE_RAS_REG__       0xC0302024U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_WE_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_WE_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_WE_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_WE_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_WE_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_WE_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_RAS_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_RAS_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_RAS_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_RAS_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_RAS_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_RAS_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_WE_RAS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_WE_RAS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_WE_RAS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_WE_RAS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_WE_RAS()     ((volatile DDR_WE_RAS_bit_view_st *)\
N(DDR_WE_RAS_REG__ ))
X#define pst_bitDDR_WE_RAS()     ((volatile DDR_WE_RAS_bit_view_st *)(DDR_WE_RAS_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_WE_RAS()     ((volatile DDR_WE_RAS_byte_view_st *)\
N(DDR_WE_RAS_REG__ ))
X#define pst_u8DDR_WE_RAS()     ((volatile DDR_WE_RAS_byte_view_st *)(DDR_WE_RAS_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_WE_RAS()     ((volatile DDR_WE_RAS_halfword_view_st *)\
N(DDR_WE_RAS_REG__ ))
X#define pst_u16DDR_WE_RAS()     ((volatile DDR_WE_RAS_halfword_view_st *)(DDR_WE_RAS_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_WE_RAS()     ((volatile u32DDR_WE_RAS_word_view *)\
N(DDR_WE_RAS_REG__ ))
X#define pu32DDR_WE_RAS()     ((volatile u32DDR_WE_RAS_word_view *)(DDR_WE_RAS_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_WE_RAS_DDR_WE_SEL() (pst_bitDDR_WE_RAS() -> DDR_WE_SEL)
N#define vSetDDR_WE_RAS_DDR_WE_SEL(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_SEL=(ParValue))
N#define biGetDDR_WE_RAS_DDR_WE_PU() (pst_bitDDR_WE_RAS() -> DDR_WE_PU)
N#define vSetDDR_WE_RAS_DDR_WE_PU(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_PU=(ParValue))
N#define biGetDDR_WE_RAS_DDR_WE_PD() (pst_bitDDR_WE_RAS() -> DDR_WE_PD)
N#define vSetDDR_WE_RAS_DDR_WE_PD(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_PD=(ParValue))
N#define biGetDDR_WE_RAS_DDR_WE_SMT() (pst_bitDDR_WE_RAS() -> DDR_WE_SMT)
N#define vSetDDR_WE_RAS_DDR_WE_SMT(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_SMT=(ParValue))
N#define biGetDDR_WE_RAS_DDR_WE_IMP() (pst_bitDDR_WE_RAS() -> DDR_WE_IMP)
N#define vSetDDR_WE_RAS_DDR_WE_IMP(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_IMP=(ParValue))
N#define biGetDDR_WE_RAS_DDR_WE_LATCHN() (pst_bitDDR_WE_RAS() -> DDR_WE_LATCHN)
N#define vSetDDR_WE_RAS_DDR_WE_LATCHN(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_WE_LATCHN=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_SEL() (pst_bitDDR_WE_RAS() -> DDR_RAS_SEL)
N#define vSetDDR_WE_RAS_DDR_RAS_SEL(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_SEL=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_PU() (pst_bitDDR_WE_RAS() -> DDR_RAS_PU)
N#define vSetDDR_WE_RAS_DDR_RAS_PU(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_PU=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_PD() (pst_bitDDR_WE_RAS() -> DDR_RAS_PD)
N#define vSetDDR_WE_RAS_DDR_RAS_PD(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_PD=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_SMT() (pst_bitDDR_WE_RAS() -> DDR_RAS_SMT)
N#define vSetDDR_WE_RAS_DDR_RAS_SMT(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_SMT=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_IMP() (pst_bitDDR_WE_RAS() -> DDR_RAS_IMP)
N#define vSetDDR_WE_RAS_DDR_RAS_IMP(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_IMP=(ParValue))
N#define biGetDDR_WE_RAS_DDR_RAS_LATCHN() (pst_bitDDR_WE_RAS() -> DDR_RAS_LATCHN)
N#define vSetDDR_WE_RAS_DDR_RAS_LATCHN(ParValue)  (pst_bitDDR_WE_RAS() -> DDR_RAS_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_WE_RASLL(ParValue) (pst_u8DDR_WE_RAS() -> u8LL = (ParValue))
N#define u8GetDDR_WE_RASLL() (pst_u8DDR_WE_RAS() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_WE_RASLH(ParValue) (pst_u8DDR_WE_RAS() -> u8LH = (ParValue))
N#define u8GetDDR_WE_RASLH() (pst_u8DDR_WE_RAS() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_WE_RASHL(ParValue) (pst_u8DDR_WE_RAS() -> u8HL = (ParValue))
N#define u8GetDDR_WE_RASHL() (pst_u8DDR_WE_RAS() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_WE_RASHH(ParValue) (pst_u8DDR_WE_RAS() -> u8HH = (ParValue))
N#define u8GetDDR_WE_RASHH() (pst_u8DDR_WE_RAS() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_WE_RASL(ParValue) (pst_u16DDR_WE_RAS() -> u16L = (ParValue))
N#define u16GetDDR_WE_RASL() (pst_u16DDR_WE_RAS() -> u16L)
N#define vSetDDR_WE_RASH(ParValue) (pst_u16DDR_WE_RAS() -> u16H = (ParValue))
N#define u16GetDDR_WE_RASH() (pst_u16DDR_WE_RAS() -> u16H)
N            
N/* Word access */
N#define vSetDDR_WE_RAS(ParValue)  (*pu32DDR_WE_RAS() = (ParValue))
N#define u32GetDDR_WE_RAS()  (*pu32DDR_WE_RAS() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_CAS_CS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302028                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_CAS_CS_REG__       0xC0302028U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_CAS_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_CAS_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_CAS_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_CAS_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_CAS_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_CAS_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_CS_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_CS_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_CS_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_CS_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_CS_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_CS_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_CAS_CS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_CAS_CS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_CAS_CS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_CAS_CS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_CAS_CS()     ((volatile DDR_CAS_CS_bit_view_st *)\
N(DDR_CAS_CS_REG__ ))
X#define pst_bitDDR_CAS_CS()     ((volatile DDR_CAS_CS_bit_view_st *)(DDR_CAS_CS_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_CAS_CS()     ((volatile DDR_CAS_CS_byte_view_st *)\
N(DDR_CAS_CS_REG__ ))
X#define pst_u8DDR_CAS_CS()     ((volatile DDR_CAS_CS_byte_view_st *)(DDR_CAS_CS_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_CAS_CS()     ((volatile DDR_CAS_CS_halfword_view_st *)\
N(DDR_CAS_CS_REG__ ))
X#define pst_u16DDR_CAS_CS()     ((volatile DDR_CAS_CS_halfword_view_st *)(DDR_CAS_CS_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_CAS_CS()     ((volatile u32DDR_CAS_CS_word_view *)\
N(DDR_CAS_CS_REG__ ))
X#define pu32DDR_CAS_CS()     ((volatile u32DDR_CAS_CS_word_view *)(DDR_CAS_CS_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_CAS_CS_DDR_CAS_SEL() (pst_bitDDR_CAS_CS() -> DDR_CAS_SEL)
N#define vSetDDR_CAS_CS_DDR_CAS_SEL(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_SEL=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CAS_PU() (pst_bitDDR_CAS_CS() -> DDR_CAS_PU)
N#define vSetDDR_CAS_CS_DDR_CAS_PU(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_PU=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CAS_PD() (pst_bitDDR_CAS_CS() -> DDR_CAS_PD)
N#define vSetDDR_CAS_CS_DDR_CAS_PD(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_PD=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CAS_SMT() (pst_bitDDR_CAS_CS() -> DDR_CAS_SMT)
N#define vSetDDR_CAS_CS_DDR_CAS_SMT(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_SMT=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CAS_IMP() (pst_bitDDR_CAS_CS() -> DDR_CAS_IMP)
N#define vSetDDR_CAS_CS_DDR_CAS_IMP(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_IMP=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CAS_LATCHN() (pst_bitDDR_CAS_CS() -> DDR_CAS_LATCHN)
N#define vSetDDR_CAS_CS_DDR_CAS_LATCHN(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CAS_LATCHN=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_SEL() (pst_bitDDR_CAS_CS() -> DDR_CS_SEL)
N#define vSetDDR_CAS_CS_DDR_CS_SEL(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_SEL=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_PU() (pst_bitDDR_CAS_CS() -> DDR_CS_PU)
N#define vSetDDR_CAS_CS_DDR_CS_PU(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_PU=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_PD() (pst_bitDDR_CAS_CS() -> DDR_CS_PD)
N#define vSetDDR_CAS_CS_DDR_CS_PD(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_PD=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_SMT() (pst_bitDDR_CAS_CS() -> DDR_CS_SMT)
N#define vSetDDR_CAS_CS_DDR_CS_SMT(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_SMT=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_IMP() (pst_bitDDR_CAS_CS() -> DDR_CS_IMP)
N#define vSetDDR_CAS_CS_DDR_CS_IMP(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_IMP=(ParValue))
N#define biGetDDR_CAS_CS_DDR_CS_LATCHN() (pst_bitDDR_CAS_CS() -> DDR_CS_LATCHN)
N#define vSetDDR_CAS_CS_DDR_CS_LATCHN(ParValue)  (pst_bitDDR_CAS_CS() -> DDR_CS_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_CAS_CSLL(ParValue) (pst_u8DDR_CAS_CS() -> u8LL = (ParValue))
N#define u8GetDDR_CAS_CSLL() (pst_u8DDR_CAS_CS() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_CAS_CSLH(ParValue) (pst_u8DDR_CAS_CS() -> u8LH = (ParValue))
N#define u8GetDDR_CAS_CSLH() (pst_u8DDR_CAS_CS() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_CAS_CSHL(ParValue) (pst_u8DDR_CAS_CS() -> u8HL = (ParValue))
N#define u8GetDDR_CAS_CSHL() (pst_u8DDR_CAS_CS() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_CAS_CSHH(ParValue) (pst_u8DDR_CAS_CS() -> u8HH = (ParValue))
N#define u8GetDDR_CAS_CSHH() (pst_u8DDR_CAS_CS() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_CAS_CSL(ParValue) (pst_u16DDR_CAS_CS() -> u16L = (ParValue))
N#define u16GetDDR_CAS_CSL() (pst_u16DDR_CAS_CS() -> u16L)
N#define vSetDDR_CAS_CSH(ParValue) (pst_u16DDR_CAS_CS() -> u16H = (ParValue))
N#define u16GetDDR_CAS_CSH() (pst_u16DDR_CAS_CS() -> u16H)
N            
N/* Word access */
N#define vSetDDR_CAS_CS(ParValue)  (*pu32DDR_CAS_CS() = (ParValue))
N#define u32GetDDR_CAS_CS()  (*pu32DDR_CAS_CS() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_CKE_CK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030202C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_CKE_CK_REG__       0xC030202CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_CKE_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_CKE_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_CKE_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_CKE_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_CKE_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_CKE_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   DDR_CK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_CK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_CK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_CK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_CK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_CKE_CK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_CKE_CK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_CKE_CK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_CKE_CK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_CKE_CK()     ((volatile DDR_CKE_CK_bit_view_st *)\
N(DDR_CKE_CK_REG__ ))
X#define pst_bitDDR_CKE_CK()     ((volatile DDR_CKE_CK_bit_view_st *)(DDR_CKE_CK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_CKE_CK()     ((volatile DDR_CKE_CK_byte_view_st *)\
N(DDR_CKE_CK_REG__ ))
X#define pst_u8DDR_CKE_CK()     ((volatile DDR_CKE_CK_byte_view_st *)(DDR_CKE_CK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_CKE_CK()     ((volatile DDR_CKE_CK_halfword_view_st *)\
N(DDR_CKE_CK_REG__ ))
X#define pst_u16DDR_CKE_CK()     ((volatile DDR_CKE_CK_halfword_view_st *)(DDR_CKE_CK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_CKE_CK()     ((volatile u32DDR_CKE_CK_word_view *)\
N(DDR_CKE_CK_REG__ ))
X#define pu32DDR_CKE_CK()     ((volatile u32DDR_CKE_CK_word_view *)(DDR_CKE_CK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_CKE_CK_DDR_CKE_SEL() (pst_bitDDR_CKE_CK() -> DDR_CKE_SEL)
N#define vSetDDR_CKE_CK_DDR_CKE_SEL(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_SEL=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CKE_PU() (pst_bitDDR_CKE_CK() -> DDR_CKE_PU)
N#define vSetDDR_CKE_CK_DDR_CKE_PU(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_PU=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CKE_PD() (pst_bitDDR_CKE_CK() -> DDR_CKE_PD)
N#define vSetDDR_CKE_CK_DDR_CKE_PD(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_PD=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CKE_SMT() (pst_bitDDR_CKE_CK() -> DDR_CKE_SMT)
N#define vSetDDR_CKE_CK_DDR_CKE_SMT(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_SMT=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CKE_IMP() (pst_bitDDR_CKE_CK() -> DDR_CKE_IMP)
N#define vSetDDR_CKE_CK_DDR_CKE_IMP(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_IMP=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CKE_LATCHN() (pst_bitDDR_CKE_CK() -> DDR_CKE_LATCHN)
N#define vSetDDR_CKE_CK_DDR_CKE_LATCHN(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CKE_LATCHN=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CK_PU() (pst_bitDDR_CKE_CK() -> DDR_CK_PU)
N#define vSetDDR_CKE_CK_DDR_CK_PU(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CK_PU=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CK_PD() (pst_bitDDR_CKE_CK() -> DDR_CK_PD)
N#define vSetDDR_CKE_CK_DDR_CK_PD(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CK_PD=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CK_SMT() (pst_bitDDR_CKE_CK() -> DDR_CK_SMT)
N#define vSetDDR_CKE_CK_DDR_CK_SMT(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CK_SMT=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CK_IMP() (pst_bitDDR_CKE_CK() -> DDR_CK_IMP)
N#define vSetDDR_CKE_CK_DDR_CK_IMP(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CK_IMP=(ParValue))
N#define biGetDDR_CKE_CK_DDR_CK_LATCHN() (pst_bitDDR_CKE_CK() -> DDR_CK_LATCHN)
N#define vSetDDR_CKE_CK_DDR_CK_LATCHN(ParValue)  (pst_bitDDR_CKE_CK() -> DDR_CK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_CKE_CKLL(ParValue) (pst_u8DDR_CKE_CK() -> u8LL = (ParValue))
N#define u8GetDDR_CKE_CKLL() (pst_u8DDR_CKE_CK() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_CKE_CKLH(ParValue) (pst_u8DDR_CKE_CK() -> u8LH = (ParValue))
N#define u8GetDDR_CKE_CKLH() (pst_u8DDR_CKE_CK() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_CKE_CKHL(ParValue) (pst_u8DDR_CKE_CK() -> u8HL = (ParValue))
N#define u8GetDDR_CKE_CKHL() (pst_u8DDR_CKE_CK() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_CKE_CKHH(ParValue) (pst_u8DDR_CKE_CK() -> u8HH = (ParValue))
N#define u8GetDDR_CKE_CKHH() (pst_u8DDR_CKE_CK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_CKE_CKL(ParValue) (pst_u16DDR_CKE_CK() -> u16L = (ParValue))
N#define u16GetDDR_CKE_CKL() (pst_u16DDR_CKE_CK() -> u16L)
N#define vSetDDR_CKE_CKH(ParValue) (pst_u16DDR_CKE_CK() -> u16H = (ParValue))
N#define u16GetDDR_CKE_CKH() (pst_u16DDR_CKE_CK() -> u16H)
N            
N/* Word access */
N#define vSetDDR_CKE_CK(ParValue)  (*pu32DDR_CKE_CK() = (ParValue))
N#define u32GetDDR_CKE_CK()  (*pu32DDR_CKE_CK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_CKN_BA0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302030                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_CKN_BA0_REG__       0xC0302030U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   DDR_CKN_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_CKN_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_CKN_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_CKN_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_CKN_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_BA0_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_BA0_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_BA0_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_BA0_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_BA0_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_BA0_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_CKN_BA0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_CKN_BA0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_CKN_BA0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_CKN_BA0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_CKN_BA0()     ((volatile DDR_CKN_BA0_bit_view_st *)\
N(DDR_CKN_BA0_REG__ ))
X#define pst_bitDDR_CKN_BA0()     ((volatile DDR_CKN_BA0_bit_view_st *)(DDR_CKN_BA0_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_CKN_BA0()     ((volatile DDR_CKN_BA0_byte_view_st *)\
N(DDR_CKN_BA0_REG__ ))
X#define pst_u8DDR_CKN_BA0()     ((volatile DDR_CKN_BA0_byte_view_st *)(DDR_CKN_BA0_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_CKN_BA0()     ((volatile DDR_CKN_BA0_halfword_view_st *)\
N(DDR_CKN_BA0_REG__ ))
X#define pst_u16DDR_CKN_BA0()     ((volatile DDR_CKN_BA0_halfword_view_st *)(DDR_CKN_BA0_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_CKN_BA0()     ((volatile u32DDR_CKN_BA0_word_view *)\
N(DDR_CKN_BA0_REG__ ))
X#define pu32DDR_CKN_BA0()     ((volatile u32DDR_CKN_BA0_word_view *)(DDR_CKN_BA0_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_CKN_BA0_DDR_CKN_PU() (pst_bitDDR_CKN_BA0() -> DDR_CKN_PU)
N#define vSetDDR_CKN_BA0_DDR_CKN_PU(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_CKN_PU=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_CKN_PD() (pst_bitDDR_CKN_BA0() -> DDR_CKN_PD)
N#define vSetDDR_CKN_BA0_DDR_CKN_PD(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_CKN_PD=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_CKN_SMT() (pst_bitDDR_CKN_BA0() -> DDR_CKN_SMT)
N#define vSetDDR_CKN_BA0_DDR_CKN_SMT(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_CKN_SMT=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_CKN_IMP() (pst_bitDDR_CKN_BA0() -> DDR_CKN_IMP)
N#define vSetDDR_CKN_BA0_DDR_CKN_IMP(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_CKN_IMP=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_CKN_LATCHN() (pst_bitDDR_CKN_BA0() -> DDR_CKN_LATCHN)
N#define vSetDDR_CKN_BA0_DDR_CKN_LATCHN(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_CKN_LATCHN=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_SEL() (pst_bitDDR_CKN_BA0() -> DDR_BA0_SEL)
N#define vSetDDR_CKN_BA0_DDR_BA0_SEL(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_SEL=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_PU() (pst_bitDDR_CKN_BA0() -> DDR_BA0_PU)
N#define vSetDDR_CKN_BA0_DDR_BA0_PU(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_PU=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_PD() (pst_bitDDR_CKN_BA0() -> DDR_BA0_PD)
N#define vSetDDR_CKN_BA0_DDR_BA0_PD(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_PD=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_SMT() (pst_bitDDR_CKN_BA0() -> DDR_BA0_SMT)
N#define vSetDDR_CKN_BA0_DDR_BA0_SMT(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_SMT=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_IMP() (pst_bitDDR_CKN_BA0() -> DDR_BA0_IMP)
N#define vSetDDR_CKN_BA0_DDR_BA0_IMP(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_IMP=(ParValue))
N#define biGetDDR_CKN_BA0_DDR_BA0_LATCHN() (pst_bitDDR_CKN_BA0() -> DDR_BA0_LATCHN)
N#define vSetDDR_CKN_BA0_DDR_BA0_LATCHN(ParValue)  (pst_bitDDR_CKN_BA0() -> DDR_BA0_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_CKN_BA0LL(ParValue) (pst_u8DDR_CKN_BA0() -> u8LL = (ParValue))
N#define u8GetDDR_CKN_BA0LL() (pst_u8DDR_CKN_BA0() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_CKN_BA0LH(ParValue) (pst_u8DDR_CKN_BA0() -> u8LH = (ParValue))
N#define u8GetDDR_CKN_BA0LH() (pst_u8DDR_CKN_BA0() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_CKN_BA0HL(ParValue) (pst_u8DDR_CKN_BA0() -> u8HL = (ParValue))
N#define u8GetDDR_CKN_BA0HL() (pst_u8DDR_CKN_BA0() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_CKN_BA0HH(ParValue) (pst_u8DDR_CKN_BA0() -> u8HH = (ParValue))
N#define u8GetDDR_CKN_BA0HH() (pst_u8DDR_CKN_BA0() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_CKN_BA0L(ParValue) (pst_u16DDR_CKN_BA0() -> u16L = (ParValue))
N#define u16GetDDR_CKN_BA0L() (pst_u16DDR_CKN_BA0() -> u16L)
N#define vSetDDR_CKN_BA0H(ParValue) (pst_u16DDR_CKN_BA0() -> u16H = (ParValue))
N#define u16GetDDR_CKN_BA0H() (pst_u16DDR_CKN_BA0() -> u16H)
N            
N/* Word access */
N#define vSetDDR_CKN_BA0(ParValue)  (*pu32DDR_CKN_BA0() = (ParValue))
N#define u32GetDDR_CKN_BA0()  (*pu32DDR_CKN_BA0() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_BA1_A0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302034                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_BA1_A0_REG__       0xC0302034U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_BA1_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_BA1_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_BA1_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_BA1_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_BA1_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_BA1_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A0_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A0_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A0_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A0_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A0_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A0_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_BA1_A0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_BA1_A0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_BA1_A0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_BA1_A0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_BA1_A0()     ((volatile DDR_BA1_A0_bit_view_st *)\
N(DDR_BA1_A0_REG__ ))
X#define pst_bitDDR_BA1_A0()     ((volatile DDR_BA1_A0_bit_view_st *)(DDR_BA1_A0_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_BA1_A0()     ((volatile DDR_BA1_A0_byte_view_st *)\
N(DDR_BA1_A0_REG__ ))
X#define pst_u8DDR_BA1_A0()     ((volatile DDR_BA1_A0_byte_view_st *)(DDR_BA1_A0_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_BA1_A0()     ((volatile DDR_BA1_A0_halfword_view_st *)\
N(DDR_BA1_A0_REG__ ))
X#define pst_u16DDR_BA1_A0()     ((volatile DDR_BA1_A0_halfword_view_st *)(DDR_BA1_A0_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_BA1_A0()     ((volatile u32DDR_BA1_A0_word_view *)\
N(DDR_BA1_A0_REG__ ))
X#define pu32DDR_BA1_A0()     ((volatile u32DDR_BA1_A0_word_view *)(DDR_BA1_A0_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_BA1_A0_DDR_BA1_SEL() (pst_bitDDR_BA1_A0() -> DDR_BA1_SEL)
N#define vSetDDR_BA1_A0_DDR_BA1_SEL(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_SEL=(ParValue))
N#define biGetDDR_BA1_A0_DDR_BA1_PU() (pst_bitDDR_BA1_A0() -> DDR_BA1_PU)
N#define vSetDDR_BA1_A0_DDR_BA1_PU(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_PU=(ParValue))
N#define biGetDDR_BA1_A0_DDR_BA1_PD() (pst_bitDDR_BA1_A0() -> DDR_BA1_PD)
N#define vSetDDR_BA1_A0_DDR_BA1_PD(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_PD=(ParValue))
N#define biGetDDR_BA1_A0_DDR_BA1_SMT() (pst_bitDDR_BA1_A0() -> DDR_BA1_SMT)
N#define vSetDDR_BA1_A0_DDR_BA1_SMT(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_SMT=(ParValue))
N#define biGetDDR_BA1_A0_DDR_BA1_IMP() (pst_bitDDR_BA1_A0() -> DDR_BA1_IMP)
N#define vSetDDR_BA1_A0_DDR_BA1_IMP(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_IMP=(ParValue))
N#define biGetDDR_BA1_A0_DDR_BA1_LATCHN() (pst_bitDDR_BA1_A0() -> DDR_BA1_LATCHN)
N#define vSetDDR_BA1_A0_DDR_BA1_LATCHN(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_BA1_LATCHN=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_SEL() (pst_bitDDR_BA1_A0() -> DDR_A0_SEL)
N#define vSetDDR_BA1_A0_DDR_A0_SEL(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_SEL=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_PU() (pst_bitDDR_BA1_A0() -> DDR_A0_PU)
N#define vSetDDR_BA1_A0_DDR_A0_PU(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_PU=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_PD() (pst_bitDDR_BA1_A0() -> DDR_A0_PD)
N#define vSetDDR_BA1_A0_DDR_A0_PD(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_PD=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_SMT() (pst_bitDDR_BA1_A0() -> DDR_A0_SMT)
N#define vSetDDR_BA1_A0_DDR_A0_SMT(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_SMT=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_IMP() (pst_bitDDR_BA1_A0() -> DDR_A0_IMP)
N#define vSetDDR_BA1_A0_DDR_A0_IMP(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_IMP=(ParValue))
N#define biGetDDR_BA1_A0_DDR_A0_LATCHN() (pst_bitDDR_BA1_A0() -> DDR_A0_LATCHN)
N#define vSetDDR_BA1_A0_DDR_A0_LATCHN(ParValue)  (pst_bitDDR_BA1_A0() -> DDR_A0_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_BA1_A0LL(ParValue) (pst_u8DDR_BA1_A0() -> u8LL = (ParValue))
N#define u8GetDDR_BA1_A0LL() (pst_u8DDR_BA1_A0() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_BA1_A0LH(ParValue) (pst_u8DDR_BA1_A0() -> u8LH = (ParValue))
N#define u8GetDDR_BA1_A0LH() (pst_u8DDR_BA1_A0() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_BA1_A0HL(ParValue) (pst_u8DDR_BA1_A0() -> u8HL = (ParValue))
N#define u8GetDDR_BA1_A0HL() (pst_u8DDR_BA1_A0() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_BA1_A0HH(ParValue) (pst_u8DDR_BA1_A0() -> u8HH = (ParValue))
N#define u8GetDDR_BA1_A0HH() (pst_u8DDR_BA1_A0() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_BA1_A0L(ParValue) (pst_u16DDR_BA1_A0() -> u16L = (ParValue))
N#define u16GetDDR_BA1_A0L() (pst_u16DDR_BA1_A0() -> u16L)
N#define vSetDDR_BA1_A0H(ParValue) (pst_u16DDR_BA1_A0() -> u16H = (ParValue))
N#define u16GetDDR_BA1_A0H() (pst_u16DDR_BA1_A0() -> u16H)
N            
N/* Word access */
N#define vSetDDR_BA1_A0(ParValue)  (*pu32DDR_BA1_A0() = (ParValue))
N#define u32GetDDR_BA1_A0()  (*pu32DDR_BA1_A0() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A1_A2                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302038                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A1_A2_REG__       0xC0302038U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A1_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A1_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A1_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A1_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A1_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A1_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A2_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A2_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A2_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A2_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A2_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A2_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A1_A2_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A1_A2_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A1_A2_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A1_A2_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A1_A2()     ((volatile DDR_A1_A2_bit_view_st *)\
N(DDR_A1_A2_REG__ ))
X#define pst_bitDDR_A1_A2()     ((volatile DDR_A1_A2_bit_view_st *)(DDR_A1_A2_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A1_A2()     ((volatile DDR_A1_A2_byte_view_st *)\
N(DDR_A1_A2_REG__ ))
X#define pst_u8DDR_A1_A2()     ((volatile DDR_A1_A2_byte_view_st *)(DDR_A1_A2_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A1_A2()     ((volatile DDR_A1_A2_halfword_view_st *)\
N(DDR_A1_A2_REG__ ))
X#define pst_u16DDR_A1_A2()     ((volatile DDR_A1_A2_halfword_view_st *)(DDR_A1_A2_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A1_A2()     ((volatile u32DDR_A1_A2_word_view *)\
N(DDR_A1_A2_REG__ ))
X#define pu32DDR_A1_A2()     ((volatile u32DDR_A1_A2_word_view *)(DDR_A1_A2_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A1_A2_DDR_A1_SEL() (pst_bitDDR_A1_A2() -> DDR_A1_SEL)
N#define vSetDDR_A1_A2_DDR_A1_SEL(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_SEL=(ParValue))
N#define biGetDDR_A1_A2_DDR_A1_PU() (pst_bitDDR_A1_A2() -> DDR_A1_PU)
N#define vSetDDR_A1_A2_DDR_A1_PU(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_PU=(ParValue))
N#define biGetDDR_A1_A2_DDR_A1_PD() (pst_bitDDR_A1_A2() -> DDR_A1_PD)
N#define vSetDDR_A1_A2_DDR_A1_PD(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_PD=(ParValue))
N#define biGetDDR_A1_A2_DDR_A1_SMT() (pst_bitDDR_A1_A2() -> DDR_A1_SMT)
N#define vSetDDR_A1_A2_DDR_A1_SMT(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_SMT=(ParValue))
N#define biGetDDR_A1_A2_DDR_A1_IMP() (pst_bitDDR_A1_A2() -> DDR_A1_IMP)
N#define vSetDDR_A1_A2_DDR_A1_IMP(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_IMP=(ParValue))
N#define biGetDDR_A1_A2_DDR_A1_LATCHN() (pst_bitDDR_A1_A2() -> DDR_A1_LATCHN)
N#define vSetDDR_A1_A2_DDR_A1_LATCHN(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A1_LATCHN=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_SEL() (pst_bitDDR_A1_A2() -> DDR_A2_SEL)
N#define vSetDDR_A1_A2_DDR_A2_SEL(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_SEL=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_PU() (pst_bitDDR_A1_A2() -> DDR_A2_PU)
N#define vSetDDR_A1_A2_DDR_A2_PU(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_PU=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_PD() (pst_bitDDR_A1_A2() -> DDR_A2_PD)
N#define vSetDDR_A1_A2_DDR_A2_PD(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_PD=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_SMT() (pst_bitDDR_A1_A2() -> DDR_A2_SMT)
N#define vSetDDR_A1_A2_DDR_A2_SMT(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_SMT=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_IMP() (pst_bitDDR_A1_A2() -> DDR_A2_IMP)
N#define vSetDDR_A1_A2_DDR_A2_IMP(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_IMP=(ParValue))
N#define biGetDDR_A1_A2_DDR_A2_LATCHN() (pst_bitDDR_A1_A2() -> DDR_A2_LATCHN)
N#define vSetDDR_A1_A2_DDR_A2_LATCHN(ParValue)  (pst_bitDDR_A1_A2() -> DDR_A2_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A1_A2LL(ParValue) (pst_u8DDR_A1_A2() -> u8LL = (ParValue))
N#define u8GetDDR_A1_A2LL() (pst_u8DDR_A1_A2() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A1_A2LH(ParValue) (pst_u8DDR_A1_A2() -> u8LH = (ParValue))
N#define u8GetDDR_A1_A2LH() (pst_u8DDR_A1_A2() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A1_A2HL(ParValue) (pst_u8DDR_A1_A2() -> u8HL = (ParValue))
N#define u8GetDDR_A1_A2HL() (pst_u8DDR_A1_A2() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A1_A2HH(ParValue) (pst_u8DDR_A1_A2() -> u8HH = (ParValue))
N#define u8GetDDR_A1_A2HH() (pst_u8DDR_A1_A2() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A1_A2L(ParValue) (pst_u16DDR_A1_A2() -> u16L = (ParValue))
N#define u16GetDDR_A1_A2L() (pst_u16DDR_A1_A2() -> u16L)
N#define vSetDDR_A1_A2H(ParValue) (pst_u16DDR_A1_A2() -> u16H = (ParValue))
N#define u16GetDDR_A1_A2H() (pst_u16DDR_A1_A2() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A1_A2(ParValue)  (*pu32DDR_A1_A2() = (ParValue))
N#define u32GetDDR_A1_A2()  (*pu32DDR_A1_A2() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A3_A4                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030203C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A3_A4_REG__       0xC030203CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A3_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A3_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A3_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A3_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A3_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A3_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A4_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A4_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A4_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A4_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A4_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A4_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A3_A4_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A3_A4_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A3_A4_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A3_A4_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A3_A4()     ((volatile DDR_A3_A4_bit_view_st *)\
N(DDR_A3_A4_REG__ ))
X#define pst_bitDDR_A3_A4()     ((volatile DDR_A3_A4_bit_view_st *)(DDR_A3_A4_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A3_A4()     ((volatile DDR_A3_A4_byte_view_st *)\
N(DDR_A3_A4_REG__ ))
X#define pst_u8DDR_A3_A4()     ((volatile DDR_A3_A4_byte_view_st *)(DDR_A3_A4_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A3_A4()     ((volatile DDR_A3_A4_halfword_view_st *)\
N(DDR_A3_A4_REG__ ))
X#define pst_u16DDR_A3_A4()     ((volatile DDR_A3_A4_halfword_view_st *)(DDR_A3_A4_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A3_A4()     ((volatile u32DDR_A3_A4_word_view *)\
N(DDR_A3_A4_REG__ ))
X#define pu32DDR_A3_A4()     ((volatile u32DDR_A3_A4_word_view *)(DDR_A3_A4_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A3_A4_DDR_A3_SEL() (pst_bitDDR_A3_A4() -> DDR_A3_SEL)
N#define vSetDDR_A3_A4_DDR_A3_SEL(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_SEL=(ParValue))
N#define biGetDDR_A3_A4_DDR_A3_PU() (pst_bitDDR_A3_A4() -> DDR_A3_PU)
N#define vSetDDR_A3_A4_DDR_A3_PU(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_PU=(ParValue))
N#define biGetDDR_A3_A4_DDR_A3_PD() (pst_bitDDR_A3_A4() -> DDR_A3_PD)
N#define vSetDDR_A3_A4_DDR_A3_PD(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_PD=(ParValue))
N#define biGetDDR_A3_A4_DDR_A3_SMT() (pst_bitDDR_A3_A4() -> DDR_A3_SMT)
N#define vSetDDR_A3_A4_DDR_A3_SMT(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_SMT=(ParValue))
N#define biGetDDR_A3_A4_DDR_A3_IMP() (pst_bitDDR_A3_A4() -> DDR_A3_IMP)
N#define vSetDDR_A3_A4_DDR_A3_IMP(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_IMP=(ParValue))
N#define biGetDDR_A3_A4_DDR_A3_LATCHN() (pst_bitDDR_A3_A4() -> DDR_A3_LATCHN)
N#define vSetDDR_A3_A4_DDR_A3_LATCHN(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A3_LATCHN=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_SEL() (pst_bitDDR_A3_A4() -> DDR_A4_SEL)
N#define vSetDDR_A3_A4_DDR_A4_SEL(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_SEL=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_PU() (pst_bitDDR_A3_A4() -> DDR_A4_PU)
N#define vSetDDR_A3_A4_DDR_A4_PU(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_PU=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_PD() (pst_bitDDR_A3_A4() -> DDR_A4_PD)
N#define vSetDDR_A3_A4_DDR_A4_PD(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_PD=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_SMT() (pst_bitDDR_A3_A4() -> DDR_A4_SMT)
N#define vSetDDR_A3_A4_DDR_A4_SMT(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_SMT=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_IMP() (pst_bitDDR_A3_A4() -> DDR_A4_IMP)
N#define vSetDDR_A3_A4_DDR_A4_IMP(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_IMP=(ParValue))
N#define biGetDDR_A3_A4_DDR_A4_LATCHN() (pst_bitDDR_A3_A4() -> DDR_A4_LATCHN)
N#define vSetDDR_A3_A4_DDR_A4_LATCHN(ParValue)  (pst_bitDDR_A3_A4() -> DDR_A4_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A3_A4LL(ParValue) (pst_u8DDR_A3_A4() -> u8LL = (ParValue))
N#define u8GetDDR_A3_A4LL() (pst_u8DDR_A3_A4() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A3_A4LH(ParValue) (pst_u8DDR_A3_A4() -> u8LH = (ParValue))
N#define u8GetDDR_A3_A4LH() (pst_u8DDR_A3_A4() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A3_A4HL(ParValue) (pst_u8DDR_A3_A4() -> u8HL = (ParValue))
N#define u8GetDDR_A3_A4HL() (pst_u8DDR_A3_A4() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A3_A4HH(ParValue) (pst_u8DDR_A3_A4() -> u8HH = (ParValue))
N#define u8GetDDR_A3_A4HH() (pst_u8DDR_A3_A4() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A3_A4L(ParValue) (pst_u16DDR_A3_A4() -> u16L = (ParValue))
N#define u16GetDDR_A3_A4L() (pst_u16DDR_A3_A4() -> u16L)
N#define vSetDDR_A3_A4H(ParValue) (pst_u16DDR_A3_A4() -> u16H = (ParValue))
N#define u16GetDDR_A3_A4H() (pst_u16DDR_A3_A4() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A3_A4(ParValue)  (*pu32DDR_A3_A4() = (ParValue))
N#define u32GetDDR_A3_A4()  (*pu32DDR_A3_A4() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A5_A6                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302040                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A5_A6_REG__       0xC0302040U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A5_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A5_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A5_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A5_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A5_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A5_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A6_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A6_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A6_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A6_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A6_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A6_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A5_A6_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A5_A6_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A5_A6_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A5_A6_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A5_A6()     ((volatile DDR_A5_A6_bit_view_st *)\
N(DDR_A5_A6_REG__ ))
X#define pst_bitDDR_A5_A6()     ((volatile DDR_A5_A6_bit_view_st *)(DDR_A5_A6_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A5_A6()     ((volatile DDR_A5_A6_byte_view_st *)\
N(DDR_A5_A6_REG__ ))
X#define pst_u8DDR_A5_A6()     ((volatile DDR_A5_A6_byte_view_st *)(DDR_A5_A6_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A5_A6()     ((volatile DDR_A5_A6_halfword_view_st *)\
N(DDR_A5_A6_REG__ ))
X#define pst_u16DDR_A5_A6()     ((volatile DDR_A5_A6_halfword_view_st *)(DDR_A5_A6_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A5_A6()     ((volatile u32DDR_A5_A6_word_view *)\
N(DDR_A5_A6_REG__ ))
X#define pu32DDR_A5_A6()     ((volatile u32DDR_A5_A6_word_view *)(DDR_A5_A6_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A5_A6_DDR_A5_SEL() (pst_bitDDR_A5_A6() -> DDR_A5_SEL)
N#define vSetDDR_A5_A6_DDR_A5_SEL(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_SEL=(ParValue))
N#define biGetDDR_A5_A6_DDR_A5_PU() (pst_bitDDR_A5_A6() -> DDR_A5_PU)
N#define vSetDDR_A5_A6_DDR_A5_PU(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_PU=(ParValue))
N#define biGetDDR_A5_A6_DDR_A5_PD() (pst_bitDDR_A5_A6() -> DDR_A5_PD)
N#define vSetDDR_A5_A6_DDR_A5_PD(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_PD=(ParValue))
N#define biGetDDR_A5_A6_DDR_A5_SMT() (pst_bitDDR_A5_A6() -> DDR_A5_SMT)
N#define vSetDDR_A5_A6_DDR_A5_SMT(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_SMT=(ParValue))
N#define biGetDDR_A5_A6_DDR_A5_IMP() (pst_bitDDR_A5_A6() -> DDR_A5_IMP)
N#define vSetDDR_A5_A6_DDR_A5_IMP(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_IMP=(ParValue))
N#define biGetDDR_A5_A6_DDR_A5_LATCHN() (pst_bitDDR_A5_A6() -> DDR_A5_LATCHN)
N#define vSetDDR_A5_A6_DDR_A5_LATCHN(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A5_LATCHN=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_SEL() (pst_bitDDR_A5_A6() -> DDR_A6_SEL)
N#define vSetDDR_A5_A6_DDR_A6_SEL(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_SEL=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_PU() (pst_bitDDR_A5_A6() -> DDR_A6_PU)
N#define vSetDDR_A5_A6_DDR_A6_PU(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_PU=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_PD() (pst_bitDDR_A5_A6() -> DDR_A6_PD)
N#define vSetDDR_A5_A6_DDR_A6_PD(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_PD=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_SMT() (pst_bitDDR_A5_A6() -> DDR_A6_SMT)
N#define vSetDDR_A5_A6_DDR_A6_SMT(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_SMT=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_IMP() (pst_bitDDR_A5_A6() -> DDR_A6_IMP)
N#define vSetDDR_A5_A6_DDR_A6_IMP(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_IMP=(ParValue))
N#define biGetDDR_A5_A6_DDR_A6_LATCHN() (pst_bitDDR_A5_A6() -> DDR_A6_LATCHN)
N#define vSetDDR_A5_A6_DDR_A6_LATCHN(ParValue)  (pst_bitDDR_A5_A6() -> DDR_A6_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A5_A6LL(ParValue) (pst_u8DDR_A5_A6() -> u8LL = (ParValue))
N#define u8GetDDR_A5_A6LL() (pst_u8DDR_A5_A6() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A5_A6LH(ParValue) (pst_u8DDR_A5_A6() -> u8LH = (ParValue))
N#define u8GetDDR_A5_A6LH() (pst_u8DDR_A5_A6() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A5_A6HL(ParValue) (pst_u8DDR_A5_A6() -> u8HL = (ParValue))
N#define u8GetDDR_A5_A6HL() (pst_u8DDR_A5_A6() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A5_A6HH(ParValue) (pst_u8DDR_A5_A6() -> u8HH = (ParValue))
N#define u8GetDDR_A5_A6HH() (pst_u8DDR_A5_A6() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A5_A6L(ParValue) (pst_u16DDR_A5_A6() -> u16L = (ParValue))
N#define u16GetDDR_A5_A6L() (pst_u16DDR_A5_A6() -> u16L)
N#define vSetDDR_A5_A6H(ParValue) (pst_u16DDR_A5_A6() -> u16H = (ParValue))
N#define u16GetDDR_A5_A6H() (pst_u16DDR_A5_A6() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A5_A6(ParValue)  (*pu32DDR_A5_A6() = (ParValue))
N#define u32GetDDR_A5_A6()  (*pu32DDR_A5_A6() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A7_A8                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302044                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A7_A8_REG__       0xC0302044U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A7_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A7_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A7_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A7_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A7_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A7_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A8_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A8_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A8_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A8_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A8_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A8_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A7_A8_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A7_A8_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A7_A8_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A7_A8_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A7_A8()     ((volatile DDR_A7_A8_bit_view_st *)\
N(DDR_A7_A8_REG__ ))
X#define pst_bitDDR_A7_A8()     ((volatile DDR_A7_A8_bit_view_st *)(DDR_A7_A8_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A7_A8()     ((volatile DDR_A7_A8_byte_view_st *)\
N(DDR_A7_A8_REG__ ))
X#define pst_u8DDR_A7_A8()     ((volatile DDR_A7_A8_byte_view_st *)(DDR_A7_A8_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A7_A8()     ((volatile DDR_A7_A8_halfword_view_st *)\
N(DDR_A7_A8_REG__ ))
X#define pst_u16DDR_A7_A8()     ((volatile DDR_A7_A8_halfword_view_st *)(DDR_A7_A8_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A7_A8()     ((volatile u32DDR_A7_A8_word_view *)\
N(DDR_A7_A8_REG__ ))
X#define pu32DDR_A7_A8()     ((volatile u32DDR_A7_A8_word_view *)(DDR_A7_A8_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A7_A8_DDR_A7_SEL() (pst_bitDDR_A7_A8() -> DDR_A7_SEL)
N#define vSetDDR_A7_A8_DDR_A7_SEL(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_SEL=(ParValue))
N#define biGetDDR_A7_A8_DDR_A7_PU() (pst_bitDDR_A7_A8() -> DDR_A7_PU)
N#define vSetDDR_A7_A8_DDR_A7_PU(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_PU=(ParValue))
N#define biGetDDR_A7_A8_DDR_A7_PD() (pst_bitDDR_A7_A8() -> DDR_A7_PD)
N#define vSetDDR_A7_A8_DDR_A7_PD(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_PD=(ParValue))
N#define biGetDDR_A7_A8_DDR_A7_SMT() (pst_bitDDR_A7_A8() -> DDR_A7_SMT)
N#define vSetDDR_A7_A8_DDR_A7_SMT(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_SMT=(ParValue))
N#define biGetDDR_A7_A8_DDR_A7_IMP() (pst_bitDDR_A7_A8() -> DDR_A7_IMP)
N#define vSetDDR_A7_A8_DDR_A7_IMP(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_IMP=(ParValue))
N#define biGetDDR_A7_A8_DDR_A7_LATCHN() (pst_bitDDR_A7_A8() -> DDR_A7_LATCHN)
N#define vSetDDR_A7_A8_DDR_A7_LATCHN(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A7_LATCHN=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_SEL() (pst_bitDDR_A7_A8() -> DDR_A8_SEL)
N#define vSetDDR_A7_A8_DDR_A8_SEL(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_SEL=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_PU() (pst_bitDDR_A7_A8() -> DDR_A8_PU)
N#define vSetDDR_A7_A8_DDR_A8_PU(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_PU=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_PD() (pst_bitDDR_A7_A8() -> DDR_A8_PD)
N#define vSetDDR_A7_A8_DDR_A8_PD(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_PD=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_SMT() (pst_bitDDR_A7_A8() -> DDR_A8_SMT)
N#define vSetDDR_A7_A8_DDR_A8_SMT(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_SMT=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_IMP() (pst_bitDDR_A7_A8() -> DDR_A8_IMP)
N#define vSetDDR_A7_A8_DDR_A8_IMP(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_IMP=(ParValue))
N#define biGetDDR_A7_A8_DDR_A8_LATCHN() (pst_bitDDR_A7_A8() -> DDR_A8_LATCHN)
N#define vSetDDR_A7_A8_DDR_A8_LATCHN(ParValue)  (pst_bitDDR_A7_A8() -> DDR_A8_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A7_A8LL(ParValue) (pst_u8DDR_A7_A8() -> u8LL = (ParValue))
N#define u8GetDDR_A7_A8LL() (pst_u8DDR_A7_A8() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A7_A8LH(ParValue) (pst_u8DDR_A7_A8() -> u8LH = (ParValue))
N#define u8GetDDR_A7_A8LH() (pst_u8DDR_A7_A8() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A7_A8HL(ParValue) (pst_u8DDR_A7_A8() -> u8HL = (ParValue))
N#define u8GetDDR_A7_A8HL() (pst_u8DDR_A7_A8() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A7_A8HH(ParValue) (pst_u8DDR_A7_A8() -> u8HH = (ParValue))
N#define u8GetDDR_A7_A8HH() (pst_u8DDR_A7_A8() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A7_A8L(ParValue) (pst_u16DDR_A7_A8() -> u16L = (ParValue))
N#define u16GetDDR_A7_A8L() (pst_u16DDR_A7_A8() -> u16L)
N#define vSetDDR_A7_A8H(ParValue) (pst_u16DDR_A7_A8() -> u16H = (ParValue))
N#define u16GetDDR_A7_A8H() (pst_u16DDR_A7_A8() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A7_A8(ParValue)  (*pu32DDR_A7_A8() = (ParValue))
N#define u32GetDDR_A7_A8()  (*pu32DDR_A7_A8() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A9_A10                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302048                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A9_A10_REG__       0xC0302048U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A9_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A9_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A9_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A9_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A9_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A9_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A10_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A10_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A10_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A10_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A10_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A10_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A9_A10_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A9_A10_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A9_A10_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A9_A10_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A9_A10()     ((volatile DDR_A9_A10_bit_view_st *)\
N(DDR_A9_A10_REG__ ))
X#define pst_bitDDR_A9_A10()     ((volatile DDR_A9_A10_bit_view_st *)(DDR_A9_A10_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A9_A10()     ((volatile DDR_A9_A10_byte_view_st *)\
N(DDR_A9_A10_REG__ ))
X#define pst_u8DDR_A9_A10()     ((volatile DDR_A9_A10_byte_view_st *)(DDR_A9_A10_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A9_A10()     ((volatile DDR_A9_A10_halfword_view_st *)\
N(DDR_A9_A10_REG__ ))
X#define pst_u16DDR_A9_A10()     ((volatile DDR_A9_A10_halfword_view_st *)(DDR_A9_A10_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A9_A10()     ((volatile u32DDR_A9_A10_word_view *)\
N(DDR_A9_A10_REG__ ))
X#define pu32DDR_A9_A10()     ((volatile u32DDR_A9_A10_word_view *)(DDR_A9_A10_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A9_A10_DDR_A9_SEL() (pst_bitDDR_A9_A10() -> DDR_A9_SEL)
N#define vSetDDR_A9_A10_DDR_A9_SEL(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_SEL=(ParValue))
N#define biGetDDR_A9_A10_DDR_A9_PU() (pst_bitDDR_A9_A10() -> DDR_A9_PU)
N#define vSetDDR_A9_A10_DDR_A9_PU(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_PU=(ParValue))
N#define biGetDDR_A9_A10_DDR_A9_PD() (pst_bitDDR_A9_A10() -> DDR_A9_PD)
N#define vSetDDR_A9_A10_DDR_A9_PD(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_PD=(ParValue))
N#define biGetDDR_A9_A10_DDR_A9_SMT() (pst_bitDDR_A9_A10() -> DDR_A9_SMT)
N#define vSetDDR_A9_A10_DDR_A9_SMT(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_SMT=(ParValue))
N#define biGetDDR_A9_A10_DDR_A9_IMP() (pst_bitDDR_A9_A10() -> DDR_A9_IMP)
N#define vSetDDR_A9_A10_DDR_A9_IMP(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_IMP=(ParValue))
N#define biGetDDR_A9_A10_DDR_A9_LATCHN() (pst_bitDDR_A9_A10() -> DDR_A9_LATCHN)
N#define vSetDDR_A9_A10_DDR_A9_LATCHN(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A9_LATCHN=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_SEL() (pst_bitDDR_A9_A10() -> DDR_A10_SEL)
N#define vSetDDR_A9_A10_DDR_A10_SEL(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_SEL=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_PU() (pst_bitDDR_A9_A10() -> DDR_A10_PU)
N#define vSetDDR_A9_A10_DDR_A10_PU(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_PU=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_PD() (pst_bitDDR_A9_A10() -> DDR_A10_PD)
N#define vSetDDR_A9_A10_DDR_A10_PD(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_PD=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_SMT() (pst_bitDDR_A9_A10() -> DDR_A10_SMT)
N#define vSetDDR_A9_A10_DDR_A10_SMT(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_SMT=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_IMP() (pst_bitDDR_A9_A10() -> DDR_A10_IMP)
N#define vSetDDR_A9_A10_DDR_A10_IMP(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_IMP=(ParValue))
N#define biGetDDR_A9_A10_DDR_A10_LATCHN() (pst_bitDDR_A9_A10() -> DDR_A10_LATCHN)
N#define vSetDDR_A9_A10_DDR_A10_LATCHN(ParValue)  (pst_bitDDR_A9_A10() -> DDR_A10_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A9_A10LL(ParValue) (pst_u8DDR_A9_A10() -> u8LL = (ParValue))
N#define u8GetDDR_A9_A10LL() (pst_u8DDR_A9_A10() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A9_A10LH(ParValue) (pst_u8DDR_A9_A10() -> u8LH = (ParValue))
N#define u8GetDDR_A9_A10LH() (pst_u8DDR_A9_A10() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A9_A10HL(ParValue) (pst_u8DDR_A9_A10() -> u8HL = (ParValue))
N#define u8GetDDR_A9_A10HL() (pst_u8DDR_A9_A10() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A9_A10HH(ParValue) (pst_u8DDR_A9_A10() -> u8HH = (ParValue))
N#define u8GetDDR_A9_A10HH() (pst_u8DDR_A9_A10() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A9_A10L(ParValue) (pst_u16DDR_A9_A10() -> u16L = (ParValue))
N#define u16GetDDR_A9_A10L() (pst_u16DDR_A9_A10() -> u16L)
N#define vSetDDR_A9_A10H(ParValue) (pst_u16DDR_A9_A10() -> u16H = (ParValue))
N#define u16GetDDR_A9_A10H() (pst_u16DDR_A9_A10() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A9_A10(ParValue)  (*pu32DDR_A9_A10() = (ParValue))
N#define u32GetDDR_A9_A10()  (*pu32DDR_A9_A10() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A11_A12                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030204C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A11_A12_REG__       0xC030204CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A11_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A11_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A11_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A11_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A11_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A11_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_A12_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_A12_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_A12_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_A12_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_A12_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_A12_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A11_A12_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A11_A12_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A11_A12_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A11_A12_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A11_A12()     ((volatile DDR_A11_A12_bit_view_st *)\
N(DDR_A11_A12_REG__ ))
X#define pst_bitDDR_A11_A12()     ((volatile DDR_A11_A12_bit_view_st *)(DDR_A11_A12_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A11_A12()     ((volatile DDR_A11_A12_byte_view_st *)\
N(DDR_A11_A12_REG__ ))
X#define pst_u8DDR_A11_A12()     ((volatile DDR_A11_A12_byte_view_st *)(DDR_A11_A12_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A11_A12()     ((volatile DDR_A11_A12_halfword_view_st *)\
N(DDR_A11_A12_REG__ ))
X#define pst_u16DDR_A11_A12()     ((volatile DDR_A11_A12_halfword_view_st *)(DDR_A11_A12_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A11_A12()     ((volatile u32DDR_A11_A12_word_view *)\
N(DDR_A11_A12_REG__ ))
X#define pu32DDR_A11_A12()     ((volatile u32DDR_A11_A12_word_view *)(DDR_A11_A12_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A11_A12_DDR_A11_SEL() (pst_bitDDR_A11_A12() -> DDR_A11_SEL)
N#define vSetDDR_A11_A12_DDR_A11_SEL(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_SEL=(ParValue))
N#define biGetDDR_A11_A12_DDR_A11_PU() (pst_bitDDR_A11_A12() -> DDR_A11_PU)
N#define vSetDDR_A11_A12_DDR_A11_PU(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_PU=(ParValue))
N#define biGetDDR_A11_A12_DDR_A11_PD() (pst_bitDDR_A11_A12() -> DDR_A11_PD)
N#define vSetDDR_A11_A12_DDR_A11_PD(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_PD=(ParValue))
N#define biGetDDR_A11_A12_DDR_A11_SMT() (pst_bitDDR_A11_A12() -> DDR_A11_SMT)
N#define vSetDDR_A11_A12_DDR_A11_SMT(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_SMT=(ParValue))
N#define biGetDDR_A11_A12_DDR_A11_IMP() (pst_bitDDR_A11_A12() -> DDR_A11_IMP)
N#define vSetDDR_A11_A12_DDR_A11_IMP(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_IMP=(ParValue))
N#define biGetDDR_A11_A12_DDR_A11_LATCHN() (pst_bitDDR_A11_A12() -> DDR_A11_LATCHN)
N#define vSetDDR_A11_A12_DDR_A11_LATCHN(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A11_LATCHN=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_SEL() (pst_bitDDR_A11_A12() -> DDR_A12_SEL)
N#define vSetDDR_A11_A12_DDR_A12_SEL(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_SEL=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_PU() (pst_bitDDR_A11_A12() -> DDR_A12_PU)
N#define vSetDDR_A11_A12_DDR_A12_PU(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_PU=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_PD() (pst_bitDDR_A11_A12() -> DDR_A12_PD)
N#define vSetDDR_A11_A12_DDR_A12_PD(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_PD=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_SMT() (pst_bitDDR_A11_A12() -> DDR_A12_SMT)
N#define vSetDDR_A11_A12_DDR_A12_SMT(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_SMT=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_IMP() (pst_bitDDR_A11_A12() -> DDR_A12_IMP)
N#define vSetDDR_A11_A12_DDR_A12_IMP(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_IMP=(ParValue))
N#define biGetDDR_A11_A12_DDR_A12_LATCHN() (pst_bitDDR_A11_A12() -> DDR_A12_LATCHN)
N#define vSetDDR_A11_A12_DDR_A12_LATCHN(ParValue)  (pst_bitDDR_A11_A12() -> DDR_A12_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A11_A12LL(ParValue) (pst_u8DDR_A11_A12() -> u8LL = (ParValue))
N#define u8GetDDR_A11_A12LL() (pst_u8DDR_A11_A12() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A11_A12LH(ParValue) (pst_u8DDR_A11_A12() -> u8LH = (ParValue))
N#define u8GetDDR_A11_A12LH() (pst_u8DDR_A11_A12() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A11_A12HL(ParValue) (pst_u8DDR_A11_A12() -> u8HL = (ParValue))
N#define u8GetDDR_A11_A12HL() (pst_u8DDR_A11_A12() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A11_A12HH(ParValue) (pst_u8DDR_A11_A12() -> u8HH = (ParValue))
N#define u8GetDDR_A11_A12HH() (pst_u8DDR_A11_A12() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A11_A12L(ParValue) (pst_u16DDR_A11_A12() -> u16L = (ParValue))
N#define u16GetDDR_A11_A12L() (pst_u16DDR_A11_A12() -> u16L)
N#define vSetDDR_A11_A12H(ParValue) (pst_u16DDR_A11_A12() -> u16H = (ParValue))
N#define u16GetDDR_A11_A12H() (pst_u16DDR_A11_A12() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A11_A12(ParValue)  (*pu32DDR_A11_A12() = (ParValue))
N#define u32GetDDR_A11_A12()  (*pu32DDR_A11_A12() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_A13_DQS0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302050                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_A13_DQS0_REG__       0xC0302050U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_A13_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_A13_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_A13_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_A13_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_A13_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_A13_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQS0_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQS0_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQS0_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQS0_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQS0_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQS0_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_A13_DQS0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_A13_DQS0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_A13_DQS0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_A13_DQS0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_A13_DQS0()     ((volatile DDR_A13_DQS0_bit_view_st *)\
N(DDR_A13_DQS0_REG__ ))
X#define pst_bitDDR_A13_DQS0()     ((volatile DDR_A13_DQS0_bit_view_st *)(DDR_A13_DQS0_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_A13_DQS0()     ((volatile DDR_A13_DQS0_byte_view_st *)\
N(DDR_A13_DQS0_REG__ ))
X#define pst_u8DDR_A13_DQS0()     ((volatile DDR_A13_DQS0_byte_view_st *)(DDR_A13_DQS0_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_A13_DQS0()     ((volatile DDR_A13_DQS0_halfword_view_st *)\
N(DDR_A13_DQS0_REG__ ))
X#define pst_u16DDR_A13_DQS0()     ((volatile DDR_A13_DQS0_halfword_view_st *)(DDR_A13_DQS0_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_A13_DQS0()     ((volatile u32DDR_A13_DQS0_word_view *)\
N(DDR_A13_DQS0_REG__ ))
X#define pu32DDR_A13_DQS0()     ((volatile u32DDR_A13_DQS0_word_view *)(DDR_A13_DQS0_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_A13_DQS0_DDR_A13_SEL() (pst_bitDDR_A13_DQS0() -> DDR_A13_SEL)
N#define vSetDDR_A13_DQS0_DDR_A13_SEL(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_SEL=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_A13_PU() (pst_bitDDR_A13_DQS0() -> DDR_A13_PU)
N#define vSetDDR_A13_DQS0_DDR_A13_PU(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_PU=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_A13_PD() (pst_bitDDR_A13_DQS0() -> DDR_A13_PD)
N#define vSetDDR_A13_DQS0_DDR_A13_PD(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_PD=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_A13_SMT() (pst_bitDDR_A13_DQS0() -> DDR_A13_SMT)
N#define vSetDDR_A13_DQS0_DDR_A13_SMT(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_SMT=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_A13_IMP() (pst_bitDDR_A13_DQS0() -> DDR_A13_IMP)
N#define vSetDDR_A13_DQS0_DDR_A13_IMP(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_IMP=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_A13_LATCHN() (pst_bitDDR_A13_DQS0() -> DDR_A13_LATCHN)
N#define vSetDDR_A13_DQS0_DDR_A13_LATCHN(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_A13_LATCHN=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_SEL() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_SEL)
N#define vSetDDR_A13_DQS0_DDR_DQS0_SEL(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_SEL=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_PU() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_PU)
N#define vSetDDR_A13_DQS0_DDR_DQS0_PU(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_PU=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_PD() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_PD)
N#define vSetDDR_A13_DQS0_DDR_DQS0_PD(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_PD=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_SMT() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_SMT)
N#define vSetDDR_A13_DQS0_DDR_DQS0_SMT(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_SMT=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_IMP() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_IMP)
N#define vSetDDR_A13_DQS0_DDR_DQS0_IMP(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_IMP=(ParValue))
N#define biGetDDR_A13_DQS0_DDR_DQS0_LATCHN() (pst_bitDDR_A13_DQS0() -> DDR_DQS0_LATCHN)
N#define vSetDDR_A13_DQS0_DDR_DQS0_LATCHN(ParValue)  (pst_bitDDR_A13_DQS0() -> DDR_DQS0_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_A13_DQS0LL(ParValue) (pst_u8DDR_A13_DQS0() -> u8LL = (ParValue))
N#define u8GetDDR_A13_DQS0LL() (pst_u8DDR_A13_DQS0() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_A13_DQS0LH(ParValue) (pst_u8DDR_A13_DQS0() -> u8LH = (ParValue))
N#define u8GetDDR_A13_DQS0LH() (pst_u8DDR_A13_DQS0() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_A13_DQS0HL(ParValue) (pst_u8DDR_A13_DQS0() -> u8HL = (ParValue))
N#define u8GetDDR_A13_DQS0HL() (pst_u8DDR_A13_DQS0() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_A13_DQS0HH(ParValue) (pst_u8DDR_A13_DQS0() -> u8HH = (ParValue))
N#define u8GetDDR_A13_DQS0HH() (pst_u8DDR_A13_DQS0() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_A13_DQS0L(ParValue) (pst_u16DDR_A13_DQS0() -> u16L = (ParValue))
N#define u16GetDDR_A13_DQS0L() (pst_u16DDR_A13_DQS0() -> u16L)
N#define vSetDDR_A13_DQS0H(ParValue) (pst_u16DDR_A13_DQS0() -> u16H = (ParValue))
N#define u16GetDDR_A13_DQS0H() (pst_u16DDR_A13_DQS0() -> u16H)
N            
N/* Word access */
N#define vSetDDR_A13_DQS0(ParValue)  (*pu32DDR_A13_DQS0() = (ParValue))
N#define u32GetDDR_A13_DQS0()  (*pu32DDR_A13_DQS0() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQS1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302054                             
N*       ACCESS  : 8, 16, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQS1_REG__       0xC0302054U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint16_t   DDR_DQS1_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint16_t   	:5; 	 /* 3..7  bit(s) R */
N  uint16_t   DDR_DQS1_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint16_t   DDR_DQS1_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint16_t   DDR_DQS1_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint16_t   DDR_DQS1_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint16_t   DDR_DQS1_LATCHN	:1; 	 /* 13..13  bit(s) R/W */ 
N  uint16_t   	:2; 	 /* 14..31  bit(s) R */                    
N} DDR_DQS1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8L;       
N  uint8_t u8H;       
N} DDR_DQS1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef uint16_t u16DDR_DQS1_halfword_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQS1()     ((volatile DDR_DQS1_bit_view_st *)\
N(DDR_DQS1_REG__ ))
X#define pst_bitDDR_DQS1()     ((volatile DDR_DQS1_bit_view_st *)(DDR_DQS1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQS1()     ((volatile DDR_DQS1_byte_view_st *)\
N(DDR_DQS1_REG__ ))
X#define pst_u8DDR_DQS1()     ((volatile DDR_DQS1_byte_view_st *)(DDR_DQS1_REG__ ))
N            
N/* Pointer to HALFWORD */
N#define pu16DDR_DQS1()     ((volatile u16DDR_DQS1_halfword_view *)\
N(DDR_DQS1_REG__ ))
X#define pu16DDR_DQS1()     ((volatile u16DDR_DQS1_halfword_view *)(DDR_DQS1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQS1_DDR_DQS1_SEL() (pst_bitDDR_DQS1() -> DDR_DQS1_SEL)
N#define vSetDDR_DQS1_DDR_DQS1_SEL(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_SEL=(ParValue))
N#define biGetDDR_DQS1_DDR_DQS1_PU() (pst_bitDDR_DQS1() -> DDR_DQS1_PU)
N#define vSetDDR_DQS1_DDR_DQS1_PU(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_PU=(ParValue))
N#define biGetDDR_DQS1_DDR_DQS1_PD() (pst_bitDDR_DQS1() -> DDR_DQS1_PD)
N#define vSetDDR_DQS1_DDR_DQS1_PD(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_PD=(ParValue))
N#define biGetDDR_DQS1_DDR_DQS1_SMT() (pst_bitDDR_DQS1() -> DDR_DQS1_SMT)
N#define vSetDDR_DQS1_DDR_DQS1_SMT(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_SMT=(ParValue))
N#define biGetDDR_DQS1_DDR_DQS1_IMP() (pst_bitDDR_DQS1() -> DDR_DQS1_IMP)
N#define vSetDDR_DQS1_DDR_DQS1_IMP(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_IMP=(ParValue))
N#define biGetDDR_DQS1_DDR_DQS1_LATCHN() (pst_bitDDR_DQS1() -> DDR_DQS1_LATCHN)
N#define vSetDDR_DQS1_DDR_DQS1_LATCHN(ParValue)  (pst_bitDDR_DQS1() -> DDR_DQS1_LATCHN=(ParValue))
N            
N/* L-struct byte access */
N#define vSetDDR_DQS1L(ParValue) (pst_u8DDR_DQS1() -> u8L = (ParValue))
N#define u8GetDDR_DQS1L() (pst_u8DDR_DQS1() -> u8L)
N/* H-struct byte access */
N#define vSetDDR_DQS1H(ParValue) (pst_u8DDR_DQS1() -> u8H = (ParValue))
N#define u8GetDDR_DQS1H() (pst_u8DDR_DQS1() -> u8H)
N            
N/* Half-word access */ 
N#define vSetDDR_DQS1(ParValue) (*pu16DDR_DQS1()  = (ParValue))
N#define u16GetDDR_DQS1() (*pu16DDR_DQS1() )     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQS2_DQS3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302060                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQS2_DQS3_REG__       0xC0302060U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQS2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQS2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQS2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQS2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQS2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQS2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQS3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQS3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQS3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQS3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQS3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQS3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQS2_DQS3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQS2_DQS3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQS2_DQS3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQS2_DQS3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_bit_view_st *)\
N(DDR_DQS2_DQS3_REG__ ))
X#define pst_bitDDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_bit_view_st *)(DDR_DQS2_DQS3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_byte_view_st *)\
N(DDR_DQS2_DQS3_REG__ ))
X#define pst_u8DDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_byte_view_st *)(DDR_DQS2_DQS3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_halfword_view_st *)\
N(DDR_DQS2_DQS3_REG__ ))
X#define pst_u16DDR_DQS2_DQS3()     ((volatile DDR_DQS2_DQS3_halfword_view_st *)(DDR_DQS2_DQS3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQS2_DQS3()     ((volatile u32DDR_DQS2_DQS3_word_view *)\
N(DDR_DQS2_DQS3_REG__ ))
X#define pu32DDR_DQS2_DQS3()     ((volatile u32DDR_DQS2_DQS3_word_view *)(DDR_DQS2_DQS3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_SEL() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_SEL)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_SEL(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_SEL=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_PU() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_PU)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_PU(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_PU=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_PD() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_PD)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_PD(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_PD=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_SMT() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_SMT)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_SMT(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_SMT=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_IMP() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_IMP)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_IMP(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_IMP=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS2_LATCHN() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_LATCHN)
N#define vSetDDR_DQS2_DQS3_DDR_DQS2_LATCHN(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS2_LATCHN=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_SEL() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_SEL)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_SEL(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_SEL=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_PU() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_PU)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_PU(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_PU=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_PD() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_PD)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_PD(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_PD=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_SMT() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_SMT)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_SMT(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_SMT=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_IMP() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_IMP)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_IMP(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_IMP=(ParValue))
N#define biGetDDR_DQS2_DQS3_DDR_DQS3_LATCHN() (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_LATCHN)
N#define vSetDDR_DQS2_DQS3_DDR_DQS3_LATCHN(ParValue)  (pst_bitDDR_DQS2_DQS3() -> DDR_DQS3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQS2_DQS3LL(ParValue) (pst_u8DDR_DQS2_DQS3() -> u8LL = (ParValue))
N#define u8GetDDR_DQS2_DQS3LL() (pst_u8DDR_DQS2_DQS3() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQS2_DQS3LH(ParValue) (pst_u8DDR_DQS2_DQS3() -> u8LH = (ParValue))
N#define u8GetDDR_DQS2_DQS3LH() (pst_u8DDR_DQS2_DQS3() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQS2_DQS3HL(ParValue) (pst_u8DDR_DQS2_DQS3() -> u8HL = (ParValue))
N#define u8GetDDR_DQS2_DQS3HL() (pst_u8DDR_DQS2_DQS3() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQS2_DQS3HH(ParValue) (pst_u8DDR_DQS2_DQS3() -> u8HH = (ParValue))
N#define u8GetDDR_DQS2_DQS3HH() (pst_u8DDR_DQS2_DQS3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQS2_DQS3L(ParValue) (pst_u16DDR_DQS2_DQS3() -> u16L = (ParValue))
N#define u16GetDDR_DQS2_DQS3L() (pst_u16DDR_DQS2_DQS3() -> u16L)
N#define vSetDDR_DQS2_DQS3H(ParValue) (pst_u16DDR_DQS2_DQS3() -> u16H = (ParValue))
N#define u16GetDDR_DQS2_DQS3H() (pst_u16DDR_DQS2_DQS3() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQS2_DQS3(ParValue)  (*pu32DDR_DQS2_DQS3() = (ParValue))
N#define u32GetDDR_DQS2_DQS3()  (*pu32DDR_DQS2_DQS3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DM2_DM3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302064                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DM2_DM3_REG__       0xC0302064U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DM2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DM2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DM2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DM2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DM2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DM2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DM3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DM3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DM3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DM3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DM3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DM3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DM2_DM3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DM2_DM3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DM2_DM3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DM2_DM3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DM2_DM3()     ((volatile DDR_DM2_DM3_bit_view_st *)\
N(DDR_DM2_DM3_REG__ ))
X#define pst_bitDDR_DM2_DM3()     ((volatile DDR_DM2_DM3_bit_view_st *)(DDR_DM2_DM3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DM2_DM3()     ((volatile DDR_DM2_DM3_byte_view_st *)\
N(DDR_DM2_DM3_REG__ ))
X#define pst_u8DDR_DM2_DM3()     ((volatile DDR_DM2_DM3_byte_view_st *)(DDR_DM2_DM3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DM2_DM3()     ((volatile DDR_DM2_DM3_halfword_view_st *)\
N(DDR_DM2_DM3_REG__ ))
X#define pst_u16DDR_DM2_DM3()     ((volatile DDR_DM2_DM3_halfword_view_st *)(DDR_DM2_DM3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DM2_DM3()     ((volatile u32DDR_DM2_DM3_word_view *)\
N(DDR_DM2_DM3_REG__ ))
X#define pu32DDR_DM2_DM3()     ((volatile u32DDR_DM2_DM3_word_view *)(DDR_DM2_DM3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DM2_DM3_DDR_DM2_SEL() (pst_bitDDR_DM2_DM3() -> DDR_DM2_SEL)
N#define vSetDDR_DM2_DM3_DDR_DM2_SEL(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_SEL=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM2_PU() (pst_bitDDR_DM2_DM3() -> DDR_DM2_PU)
N#define vSetDDR_DM2_DM3_DDR_DM2_PU(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_PU=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM2_PD() (pst_bitDDR_DM2_DM3() -> DDR_DM2_PD)
N#define vSetDDR_DM2_DM3_DDR_DM2_PD(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_PD=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM2_SMT() (pst_bitDDR_DM2_DM3() -> DDR_DM2_SMT)
N#define vSetDDR_DM2_DM3_DDR_DM2_SMT(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_SMT=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM2_IMP() (pst_bitDDR_DM2_DM3() -> DDR_DM2_IMP)
N#define vSetDDR_DM2_DM3_DDR_DM2_IMP(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_IMP=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM2_LATCHN() (pst_bitDDR_DM2_DM3() -> DDR_DM2_LATCHN)
N#define vSetDDR_DM2_DM3_DDR_DM2_LATCHN(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM2_LATCHN=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_SEL() (pst_bitDDR_DM2_DM3() -> DDR_DM3_SEL)
N#define vSetDDR_DM2_DM3_DDR_DM3_SEL(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_SEL=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_PU() (pst_bitDDR_DM2_DM3() -> DDR_DM3_PU)
N#define vSetDDR_DM2_DM3_DDR_DM3_PU(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_PU=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_PD() (pst_bitDDR_DM2_DM3() -> DDR_DM3_PD)
N#define vSetDDR_DM2_DM3_DDR_DM3_PD(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_PD=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_SMT() (pst_bitDDR_DM2_DM3() -> DDR_DM3_SMT)
N#define vSetDDR_DM2_DM3_DDR_DM3_SMT(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_SMT=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_IMP() (pst_bitDDR_DM2_DM3() -> DDR_DM3_IMP)
N#define vSetDDR_DM2_DM3_DDR_DM3_IMP(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_IMP=(ParValue))
N#define biGetDDR_DM2_DM3_DDR_DM3_LATCHN() (pst_bitDDR_DM2_DM3() -> DDR_DM3_LATCHN)
N#define vSetDDR_DM2_DM3_DDR_DM3_LATCHN(ParValue)  (pst_bitDDR_DM2_DM3() -> DDR_DM3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DM2_DM3LL(ParValue) (pst_u8DDR_DM2_DM3() -> u8LL = (ParValue))
N#define u8GetDDR_DM2_DM3LL() (pst_u8DDR_DM2_DM3() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DM2_DM3LH(ParValue) (pst_u8DDR_DM2_DM3() -> u8LH = (ParValue))
N#define u8GetDDR_DM2_DM3LH() (pst_u8DDR_DM2_DM3() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DM2_DM3HL(ParValue) (pst_u8DDR_DM2_DM3() -> u8HL = (ParValue))
N#define u8GetDDR_DM2_DM3HL() (pst_u8DDR_DM2_DM3() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DM2_DM3HH(ParValue) (pst_u8DDR_DM2_DM3() -> u8HH = (ParValue))
N#define u8GetDDR_DM2_DM3HH() (pst_u8DDR_DM2_DM3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DM2_DM3L(ParValue) (pst_u16DDR_DM2_DM3() -> u16L = (ParValue))
N#define u16GetDDR_DM2_DM3L() (pst_u16DDR_DM2_DM3() -> u16L)
N#define vSetDDR_DM2_DM3H(ParValue) (pst_u16DDR_DM2_DM3() -> u16H = (ParValue))
N#define u16GetDDR_DM2_DM3H() (pst_u16DDR_DM2_DM3() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DM2_DM3(ParValue)  (*pu32DDR_DM2_DM3() = (ParValue))
N#define u32GetDDR_DM2_DM3()  (*pu32DDR_DM2_DM3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ16_DQ17                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302068                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ16_DQ17_REG__       0xC0302068U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ16_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ16_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ16_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ16_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ16_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ16_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ17_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ17_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ17_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ17_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ17_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ17_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ16_DQ17_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ16_DQ17_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ16_DQ17_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ16_DQ17_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_bit_view_st *)\
N(DDR_DQ16_DQ17_REG__ ))
X#define pst_bitDDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_bit_view_st *)(DDR_DQ16_DQ17_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_byte_view_st *)\
N(DDR_DQ16_DQ17_REG__ ))
X#define pst_u8DDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_byte_view_st *)(DDR_DQ16_DQ17_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_halfword_view_st *)\
N(DDR_DQ16_DQ17_REG__ ))
X#define pst_u16DDR_DQ16_DQ17()     ((volatile DDR_DQ16_DQ17_halfword_view_st *)(DDR_DQ16_DQ17_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ16_DQ17()     ((volatile u32DDR_DQ16_DQ17_word_view *)\
N(DDR_DQ16_DQ17_REG__ ))
X#define pu32DDR_DQ16_DQ17()     ((volatile u32DDR_DQ16_DQ17_word_view *)(DDR_DQ16_DQ17_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_SEL() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_SEL)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_SEL(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_SEL=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_PU() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_PU)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_PU(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_PU=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_PD() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_PD)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_PD(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_PD=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_SMT() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_SMT)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_SMT(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_SMT=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_IMP() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_IMP)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_IMP(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_IMP=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ16_LATCHN() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_LATCHN)
N#define vSetDDR_DQ16_DQ17_DDR_DQ16_LATCHN(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ16_LATCHN=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_SEL() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_SEL)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_SEL(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_SEL=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_PU() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_PU)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_PU(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_PU=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_PD() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_PD)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_PD(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_PD=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_SMT() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_SMT)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_SMT(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_SMT=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_IMP() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_IMP)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_IMP(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_IMP=(ParValue))
N#define biGetDDR_DQ16_DQ17_DDR_DQ17_LATCHN() (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_LATCHN)
N#define vSetDDR_DQ16_DQ17_DDR_DQ17_LATCHN(ParValue)  (pst_bitDDR_DQ16_DQ17() -> DDR_DQ17_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ16_DQ17LL(ParValue) (pst_u8DDR_DQ16_DQ17() -> u8LL = (ParValue))
N#define u8GetDDR_DQ16_DQ17LL() (pst_u8DDR_DQ16_DQ17() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ16_DQ17LH(ParValue) (pst_u8DDR_DQ16_DQ17() -> u8LH = (ParValue))
N#define u8GetDDR_DQ16_DQ17LH() (pst_u8DDR_DQ16_DQ17() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ16_DQ17HL(ParValue) (pst_u8DDR_DQ16_DQ17() -> u8HL = (ParValue))
N#define u8GetDDR_DQ16_DQ17HL() (pst_u8DDR_DQ16_DQ17() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ16_DQ17HH(ParValue) (pst_u8DDR_DQ16_DQ17() -> u8HH = (ParValue))
N#define u8GetDDR_DQ16_DQ17HH() (pst_u8DDR_DQ16_DQ17() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ16_DQ17L(ParValue) (pst_u16DDR_DQ16_DQ17() -> u16L = (ParValue))
N#define u16GetDDR_DQ16_DQ17L() (pst_u16DDR_DQ16_DQ17() -> u16L)
N#define vSetDDR_DQ16_DQ17H(ParValue) (pst_u16DDR_DQ16_DQ17() -> u16H = (ParValue))
N#define u16GetDDR_DQ16_DQ17H() (pst_u16DDR_DQ16_DQ17() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ16_DQ17(ParValue)  (*pu32DDR_DQ16_DQ17() = (ParValue))
N#define u32GetDDR_DQ16_DQ17()  (*pu32DDR_DQ16_DQ17() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ18_DQ19                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030206C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ18_DQ19_REG__       0xC030206CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ18_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ18_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ18_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ18_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ18_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ18_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ19_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ19_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ19_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ19_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ19_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ19_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ18_DQ19_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ18_DQ19_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ18_DQ19_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ18_DQ19_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_bit_view_st *)\
N(DDR_DQ18_DQ19_REG__ ))
X#define pst_bitDDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_bit_view_st *)(DDR_DQ18_DQ19_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_byte_view_st *)\
N(DDR_DQ18_DQ19_REG__ ))
X#define pst_u8DDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_byte_view_st *)(DDR_DQ18_DQ19_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_halfword_view_st *)\
N(DDR_DQ18_DQ19_REG__ ))
X#define pst_u16DDR_DQ18_DQ19()     ((volatile DDR_DQ18_DQ19_halfword_view_st *)(DDR_DQ18_DQ19_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ18_DQ19()     ((volatile u32DDR_DQ18_DQ19_word_view *)\
N(DDR_DQ18_DQ19_REG__ ))
X#define pu32DDR_DQ18_DQ19()     ((volatile u32DDR_DQ18_DQ19_word_view *)(DDR_DQ18_DQ19_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_SEL() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_SEL)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_SEL(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_SEL=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_PU() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_PU)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_PU(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_PU=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_PD() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_PD)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_PD(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_PD=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_SMT() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_SMT)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_SMT(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_SMT=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_IMP() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_IMP)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_IMP(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_IMP=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ18_LATCHN() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_LATCHN)
N#define vSetDDR_DQ18_DQ19_DDR_DQ18_LATCHN(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ18_LATCHN=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_SEL() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_SEL)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_SEL(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_SEL=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_PU() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_PU)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_PU(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_PU=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_PD() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_PD)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_PD(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_PD=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_SMT() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_SMT)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_SMT(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_SMT=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_IMP() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_IMP)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_IMP(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_IMP=(ParValue))
N#define biGetDDR_DQ18_DQ19_DDR_DQ19_LATCHN() (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_LATCHN)
N#define vSetDDR_DQ18_DQ19_DDR_DQ19_LATCHN(ParValue)  (pst_bitDDR_DQ18_DQ19() -> DDR_DQ19_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ18_DQ19LL(ParValue) (pst_u8DDR_DQ18_DQ19() -> u8LL = (ParValue))
N#define u8GetDDR_DQ18_DQ19LL() (pst_u8DDR_DQ18_DQ19() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ18_DQ19LH(ParValue) (pst_u8DDR_DQ18_DQ19() -> u8LH = (ParValue))
N#define u8GetDDR_DQ18_DQ19LH() (pst_u8DDR_DQ18_DQ19() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ18_DQ19HL(ParValue) (pst_u8DDR_DQ18_DQ19() -> u8HL = (ParValue))
N#define u8GetDDR_DQ18_DQ19HL() (pst_u8DDR_DQ18_DQ19() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ18_DQ19HH(ParValue) (pst_u8DDR_DQ18_DQ19() -> u8HH = (ParValue))
N#define u8GetDDR_DQ18_DQ19HH() (pst_u8DDR_DQ18_DQ19() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ18_DQ19L(ParValue) (pst_u16DDR_DQ18_DQ19() -> u16L = (ParValue))
N#define u16GetDDR_DQ18_DQ19L() (pst_u16DDR_DQ18_DQ19() -> u16L)
N#define vSetDDR_DQ18_DQ19H(ParValue) (pst_u16DDR_DQ18_DQ19() -> u16H = (ParValue))
N#define u16GetDDR_DQ18_DQ19H() (pst_u16DDR_DQ18_DQ19() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ18_DQ19(ParValue)  (*pu32DDR_DQ18_DQ19() = (ParValue))
N#define u32GetDDR_DQ18_DQ19()  (*pu32DDR_DQ18_DQ19() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ20_DQ21                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302070                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ20_DQ21_REG__       0xC0302070U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ20_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ20_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ20_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ20_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ20_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ20_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ21_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ21_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ21_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ21_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ21_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ21_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ20_DQ21_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ20_DQ21_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ20_DQ21_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ20_DQ21_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_bit_view_st *)\
N(DDR_DQ20_DQ21_REG__ ))
X#define pst_bitDDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_bit_view_st *)(DDR_DQ20_DQ21_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_byte_view_st *)\
N(DDR_DQ20_DQ21_REG__ ))
X#define pst_u8DDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_byte_view_st *)(DDR_DQ20_DQ21_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_halfword_view_st *)\
N(DDR_DQ20_DQ21_REG__ ))
X#define pst_u16DDR_DQ20_DQ21()     ((volatile DDR_DQ20_DQ21_halfword_view_st *)(DDR_DQ20_DQ21_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ20_DQ21()     ((volatile u32DDR_DQ20_DQ21_word_view *)\
N(DDR_DQ20_DQ21_REG__ ))
X#define pu32DDR_DQ20_DQ21()     ((volatile u32DDR_DQ20_DQ21_word_view *)(DDR_DQ20_DQ21_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_SEL() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_SEL)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_SEL(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_SEL=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_PU() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_PU)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_PU(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_PU=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_PD() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_PD)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_PD(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_PD=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_SMT() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_SMT)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_SMT(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_SMT=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_IMP() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_IMP)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_IMP(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_IMP=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ20_LATCHN() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_LATCHN)
N#define vSetDDR_DQ20_DQ21_DDR_DQ20_LATCHN(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ20_LATCHN=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_SEL() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_SEL)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_SEL(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_SEL=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_PU() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_PU)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_PU(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_PU=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_PD() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_PD)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_PD(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_PD=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_SMT() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_SMT)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_SMT(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_SMT=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_IMP() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_IMP)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_IMP(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_IMP=(ParValue))
N#define biGetDDR_DQ20_DQ21_DDR_DQ21_LATCHN() (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_LATCHN)
N#define vSetDDR_DQ20_DQ21_DDR_DQ21_LATCHN(ParValue)  (pst_bitDDR_DQ20_DQ21() -> DDR_DQ21_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ20_DQ21LL(ParValue) (pst_u8DDR_DQ20_DQ21() -> u8LL = (ParValue))
N#define u8GetDDR_DQ20_DQ21LL() (pst_u8DDR_DQ20_DQ21() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ20_DQ21LH(ParValue) (pst_u8DDR_DQ20_DQ21() -> u8LH = (ParValue))
N#define u8GetDDR_DQ20_DQ21LH() (pst_u8DDR_DQ20_DQ21() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ20_DQ21HL(ParValue) (pst_u8DDR_DQ20_DQ21() -> u8HL = (ParValue))
N#define u8GetDDR_DQ20_DQ21HL() (pst_u8DDR_DQ20_DQ21() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ20_DQ21HH(ParValue) (pst_u8DDR_DQ20_DQ21() -> u8HH = (ParValue))
N#define u8GetDDR_DQ20_DQ21HH() (pst_u8DDR_DQ20_DQ21() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ20_DQ21L(ParValue) (pst_u16DDR_DQ20_DQ21() -> u16L = (ParValue))
N#define u16GetDDR_DQ20_DQ21L() (pst_u16DDR_DQ20_DQ21() -> u16L)
N#define vSetDDR_DQ20_DQ21H(ParValue) (pst_u16DDR_DQ20_DQ21() -> u16H = (ParValue))
N#define u16GetDDR_DQ20_DQ21H() (pst_u16DDR_DQ20_DQ21() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ20_DQ21(ParValue)  (*pu32DDR_DQ20_DQ21() = (ParValue))
N#define u32GetDDR_DQ20_DQ21()  (*pu32DDR_DQ20_DQ21() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ22_DQ23                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302074                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ22_DQ23_REG__       0xC0302074U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ22_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ22_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ22_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ22_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ22_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ22_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ23_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ23_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ23_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ23_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ23_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ23_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ22_DQ23_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ22_DQ23_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ22_DQ23_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ22_DQ23_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_bit_view_st *)\
N(DDR_DQ22_DQ23_REG__ ))
X#define pst_bitDDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_bit_view_st *)(DDR_DQ22_DQ23_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_byte_view_st *)\
N(DDR_DQ22_DQ23_REG__ ))
X#define pst_u8DDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_byte_view_st *)(DDR_DQ22_DQ23_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_halfword_view_st *)\
N(DDR_DQ22_DQ23_REG__ ))
X#define pst_u16DDR_DQ22_DQ23()     ((volatile DDR_DQ22_DQ23_halfword_view_st *)(DDR_DQ22_DQ23_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ22_DQ23()     ((volatile u32DDR_DQ22_DQ23_word_view *)\
N(DDR_DQ22_DQ23_REG__ ))
X#define pu32DDR_DQ22_DQ23()     ((volatile u32DDR_DQ22_DQ23_word_view *)(DDR_DQ22_DQ23_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_SEL() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_SEL)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_SEL(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_SEL=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_PU() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_PU)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_PU(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_PU=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_PD() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_PD)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_PD(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_PD=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_SMT() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_SMT)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_SMT(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_SMT=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_IMP() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_IMP)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_IMP(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_IMP=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ22_LATCHN() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_LATCHN)
N#define vSetDDR_DQ22_DQ23_DDR_DQ22_LATCHN(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ22_LATCHN=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_SEL() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_SEL)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_SEL(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_SEL=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_PU() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_PU)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_PU(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_PU=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_PD() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_PD)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_PD(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_PD=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_SMT() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_SMT)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_SMT(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_SMT=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_IMP() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_IMP)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_IMP(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_IMP=(ParValue))
N#define biGetDDR_DQ22_DQ23_DDR_DQ23_LATCHN() (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_LATCHN)
N#define vSetDDR_DQ22_DQ23_DDR_DQ23_LATCHN(ParValue)  (pst_bitDDR_DQ22_DQ23() -> DDR_DQ23_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ22_DQ23LL(ParValue) (pst_u8DDR_DQ22_DQ23() -> u8LL = (ParValue))
N#define u8GetDDR_DQ22_DQ23LL() (pst_u8DDR_DQ22_DQ23() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ22_DQ23LH(ParValue) (pst_u8DDR_DQ22_DQ23() -> u8LH = (ParValue))
N#define u8GetDDR_DQ22_DQ23LH() (pst_u8DDR_DQ22_DQ23() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ22_DQ23HL(ParValue) (pst_u8DDR_DQ22_DQ23() -> u8HL = (ParValue))
N#define u8GetDDR_DQ22_DQ23HL() (pst_u8DDR_DQ22_DQ23() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ22_DQ23HH(ParValue) (pst_u8DDR_DQ22_DQ23() -> u8HH = (ParValue))
N#define u8GetDDR_DQ22_DQ23HH() (pst_u8DDR_DQ22_DQ23() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ22_DQ23L(ParValue) (pst_u16DDR_DQ22_DQ23() -> u16L = (ParValue))
N#define u16GetDDR_DQ22_DQ23L() (pst_u16DDR_DQ22_DQ23() -> u16L)
N#define vSetDDR_DQ22_DQ23H(ParValue) (pst_u16DDR_DQ22_DQ23() -> u16H = (ParValue))
N#define u16GetDDR_DQ22_DQ23H() (pst_u16DDR_DQ22_DQ23() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ22_DQ23(ParValue)  (*pu32DDR_DQ22_DQ23() = (ParValue))
N#define u32GetDDR_DQ22_DQ23()  (*pu32DDR_DQ22_DQ23() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ24_DQ25                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302078                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ24_DQ25_REG__       0xC0302078U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ24_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ24_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ24_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ24_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ24_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ24_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ25_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ25_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ25_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ25_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ25_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ25_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ24_DQ25_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ24_DQ25_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ24_DQ25_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ24_DQ25_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_bit_view_st *)\
N(DDR_DQ24_DQ25_REG__ ))
X#define pst_bitDDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_bit_view_st *)(DDR_DQ24_DQ25_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_byte_view_st *)\
N(DDR_DQ24_DQ25_REG__ ))
X#define pst_u8DDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_byte_view_st *)(DDR_DQ24_DQ25_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_halfword_view_st *)\
N(DDR_DQ24_DQ25_REG__ ))
X#define pst_u16DDR_DQ24_DQ25()     ((volatile DDR_DQ24_DQ25_halfword_view_st *)(DDR_DQ24_DQ25_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ24_DQ25()     ((volatile u32DDR_DQ24_DQ25_word_view *)\
N(DDR_DQ24_DQ25_REG__ ))
X#define pu32DDR_DQ24_DQ25()     ((volatile u32DDR_DQ24_DQ25_word_view *)(DDR_DQ24_DQ25_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_SEL() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_SEL)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_SEL(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_SEL=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_PU() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_PU)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_PU(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_PU=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_PD() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_PD)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_PD(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_PD=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_SMT() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_SMT)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_SMT(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_SMT=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_IMP() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_IMP)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_IMP(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_IMP=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ24_LATCHN() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_LATCHN)
N#define vSetDDR_DQ24_DQ25_DDR_DQ24_LATCHN(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ24_LATCHN=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_SEL() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_SEL)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_SEL(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_SEL=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_PU() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_PU)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_PU(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_PU=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_PD() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_PD)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_PD(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_PD=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_SMT() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_SMT)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_SMT(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_SMT=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_IMP() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_IMP)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_IMP(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_IMP=(ParValue))
N#define biGetDDR_DQ24_DQ25_DDR_DQ25_LATCHN() (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_LATCHN)
N#define vSetDDR_DQ24_DQ25_DDR_DQ25_LATCHN(ParValue)  (pst_bitDDR_DQ24_DQ25() -> DDR_DQ25_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ24_DQ25LL(ParValue) (pst_u8DDR_DQ24_DQ25() -> u8LL = (ParValue))
N#define u8GetDDR_DQ24_DQ25LL() (pst_u8DDR_DQ24_DQ25() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ24_DQ25LH(ParValue) (pst_u8DDR_DQ24_DQ25() -> u8LH = (ParValue))
N#define u8GetDDR_DQ24_DQ25LH() (pst_u8DDR_DQ24_DQ25() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ24_DQ25HL(ParValue) (pst_u8DDR_DQ24_DQ25() -> u8HL = (ParValue))
N#define u8GetDDR_DQ24_DQ25HL() (pst_u8DDR_DQ24_DQ25() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ24_DQ25HH(ParValue) (pst_u8DDR_DQ24_DQ25() -> u8HH = (ParValue))
N#define u8GetDDR_DQ24_DQ25HH() (pst_u8DDR_DQ24_DQ25() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ24_DQ25L(ParValue) (pst_u16DDR_DQ24_DQ25() -> u16L = (ParValue))
N#define u16GetDDR_DQ24_DQ25L() (pst_u16DDR_DQ24_DQ25() -> u16L)
N#define vSetDDR_DQ24_DQ25H(ParValue) (pst_u16DDR_DQ24_DQ25() -> u16H = (ParValue))
N#define u16GetDDR_DQ24_DQ25H() (pst_u16DDR_DQ24_DQ25() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ24_DQ25(ParValue)  (*pu32DDR_DQ24_DQ25() = (ParValue))
N#define u32GetDDR_DQ24_DQ25()  (*pu32DDR_DQ24_DQ25() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ26_DQ27                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030207C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ26_DQ27_REG__       0xC030207CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ26_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ26_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ26_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ26_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ26_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ26_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ27_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ27_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ27_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ27_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ27_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ27_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ26_DQ27_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ26_DQ27_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ26_DQ27_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ26_DQ27_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_bit_view_st *)\
N(DDR_DQ26_DQ27_REG__ ))
X#define pst_bitDDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_bit_view_st *)(DDR_DQ26_DQ27_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_byte_view_st *)\
N(DDR_DQ26_DQ27_REG__ ))
X#define pst_u8DDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_byte_view_st *)(DDR_DQ26_DQ27_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_halfword_view_st *)\
N(DDR_DQ26_DQ27_REG__ ))
X#define pst_u16DDR_DQ26_DQ27()     ((volatile DDR_DQ26_DQ27_halfword_view_st *)(DDR_DQ26_DQ27_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ26_DQ27()     ((volatile u32DDR_DQ26_DQ27_word_view *)\
N(DDR_DQ26_DQ27_REG__ ))
X#define pu32DDR_DQ26_DQ27()     ((volatile u32DDR_DQ26_DQ27_word_view *)(DDR_DQ26_DQ27_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_SEL() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_SEL)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_SEL(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_SEL=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_PU() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_PU)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_PU(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_PU=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_PD() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_PD)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_PD(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_PD=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_SMT() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_SMT)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_SMT(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_SMT=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_IMP() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_IMP)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_IMP(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_IMP=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ26_LATCHN() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_LATCHN)
N#define vSetDDR_DQ26_DQ27_DDR_DQ26_LATCHN(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ26_LATCHN=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_SEL() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_SEL)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_SEL(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_SEL=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_PU() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_PU)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_PU(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_PU=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_PD() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_PD)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_PD(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_PD=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_SMT() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_SMT)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_SMT(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_SMT=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_IMP() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_IMP)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_IMP(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_IMP=(ParValue))
N#define biGetDDR_DQ26_DQ27_DDR_DQ27_LATCHN() (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_LATCHN)
N#define vSetDDR_DQ26_DQ27_DDR_DQ27_LATCHN(ParValue)  (pst_bitDDR_DQ26_DQ27() -> DDR_DQ27_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ26_DQ27LL(ParValue) (pst_u8DDR_DQ26_DQ27() -> u8LL = (ParValue))
N#define u8GetDDR_DQ26_DQ27LL() (pst_u8DDR_DQ26_DQ27() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ26_DQ27LH(ParValue) (pst_u8DDR_DQ26_DQ27() -> u8LH = (ParValue))
N#define u8GetDDR_DQ26_DQ27LH() (pst_u8DDR_DQ26_DQ27() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ26_DQ27HL(ParValue) (pst_u8DDR_DQ26_DQ27() -> u8HL = (ParValue))
N#define u8GetDDR_DQ26_DQ27HL() (pst_u8DDR_DQ26_DQ27() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ26_DQ27HH(ParValue) (pst_u8DDR_DQ26_DQ27() -> u8HH = (ParValue))
N#define u8GetDDR_DQ26_DQ27HH() (pst_u8DDR_DQ26_DQ27() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ26_DQ27L(ParValue) (pst_u16DDR_DQ26_DQ27() -> u16L = (ParValue))
N#define u16GetDDR_DQ26_DQ27L() (pst_u16DDR_DQ26_DQ27() -> u16L)
N#define vSetDDR_DQ26_DQ27H(ParValue) (pst_u16DDR_DQ26_DQ27() -> u16H = (ParValue))
N#define u16GetDDR_DQ26_DQ27H() (pst_u16DDR_DQ26_DQ27() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ26_DQ27(ParValue)  (*pu32DDR_DQ26_DQ27() = (ParValue))
N#define u32GetDDR_DQ26_DQ27()  (*pu32DDR_DQ26_DQ27() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ28_DQ29                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302080                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ28_DQ29_REG__       0xC0302080U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ28_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ28_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ28_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ28_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ28_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ28_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ29_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ29_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ29_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ29_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ29_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ29_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ28_DQ29_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ28_DQ29_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ28_DQ29_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ28_DQ29_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_bit_view_st *)\
N(DDR_DQ28_DQ29_REG__ ))
X#define pst_bitDDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_bit_view_st *)(DDR_DQ28_DQ29_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_byte_view_st *)\
N(DDR_DQ28_DQ29_REG__ ))
X#define pst_u8DDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_byte_view_st *)(DDR_DQ28_DQ29_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_halfword_view_st *)\
N(DDR_DQ28_DQ29_REG__ ))
X#define pst_u16DDR_DQ28_DQ29()     ((volatile DDR_DQ28_DQ29_halfword_view_st *)(DDR_DQ28_DQ29_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ28_DQ29()     ((volatile u32DDR_DQ28_DQ29_word_view *)\
N(DDR_DQ28_DQ29_REG__ ))
X#define pu32DDR_DQ28_DQ29()     ((volatile u32DDR_DQ28_DQ29_word_view *)(DDR_DQ28_DQ29_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_SEL() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_SEL)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_SEL(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_SEL=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_PU() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_PU)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_PU(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_PU=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_PD() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_PD)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_PD(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_PD=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_SMT() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_SMT)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_SMT(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_SMT=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_IMP() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_IMP)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_IMP(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_IMP=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ28_LATCHN() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_LATCHN)
N#define vSetDDR_DQ28_DQ29_DDR_DQ28_LATCHN(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ28_LATCHN=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_SEL() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_SEL)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_SEL(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_SEL=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_PU() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_PU)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_PU(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_PU=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_PD() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_PD)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_PD(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_PD=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_SMT() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_SMT)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_SMT(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_SMT=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_IMP() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_IMP)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_IMP(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_IMP=(ParValue))
N#define biGetDDR_DQ28_DQ29_DDR_DQ29_LATCHN() (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_LATCHN)
N#define vSetDDR_DQ28_DQ29_DDR_DQ29_LATCHN(ParValue)  (pst_bitDDR_DQ28_DQ29() -> DDR_DQ29_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ28_DQ29LL(ParValue) (pst_u8DDR_DQ28_DQ29() -> u8LL = (ParValue))
N#define u8GetDDR_DQ28_DQ29LL() (pst_u8DDR_DQ28_DQ29() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ28_DQ29LH(ParValue) (pst_u8DDR_DQ28_DQ29() -> u8LH = (ParValue))
N#define u8GetDDR_DQ28_DQ29LH() (pst_u8DDR_DQ28_DQ29() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ28_DQ29HL(ParValue) (pst_u8DDR_DQ28_DQ29() -> u8HL = (ParValue))
N#define u8GetDDR_DQ28_DQ29HL() (pst_u8DDR_DQ28_DQ29() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ28_DQ29HH(ParValue) (pst_u8DDR_DQ28_DQ29() -> u8HH = (ParValue))
N#define u8GetDDR_DQ28_DQ29HH() (pst_u8DDR_DQ28_DQ29() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ28_DQ29L(ParValue) (pst_u16DDR_DQ28_DQ29() -> u16L = (ParValue))
N#define u16GetDDR_DQ28_DQ29L() (pst_u16DDR_DQ28_DQ29() -> u16L)
N#define vSetDDR_DQ28_DQ29H(ParValue) (pst_u16DDR_DQ28_DQ29() -> u16H = (ParValue))
N#define u16GetDDR_DQ28_DQ29H() (pst_u16DDR_DQ28_DQ29() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ28_DQ29(ParValue)  (*pu32DDR_DQ28_DQ29() = (ParValue))
N#define u32GetDDR_DQ28_DQ29()  (*pu32DDR_DQ28_DQ29() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DDR_DQ30_DQ31                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302084                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DDR_DQ30_DQ31_REG__       0xC0302084U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DDR_DQ30_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   DDR_DQ30_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DDR_DQ30_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DDR_DQ30_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   DDR_DQ30_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   DDR_DQ30_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   DDR_DQ31_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   DDR_DQ31_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DDR_DQ31_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DDR_DQ31_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DDR_DQ31_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   DDR_DQ31_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DDR_DQ30_DQ31_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DDR_DQ30_DQ31_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DDR_DQ30_DQ31_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DDR_DQ30_DQ31_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_bit_view_st *)\
N(DDR_DQ30_DQ31_REG__ ))
X#define pst_bitDDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_bit_view_st *)(DDR_DQ30_DQ31_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_byte_view_st *)\
N(DDR_DQ30_DQ31_REG__ ))
X#define pst_u8DDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_byte_view_st *)(DDR_DQ30_DQ31_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_halfword_view_st *)\
N(DDR_DQ30_DQ31_REG__ ))
X#define pst_u16DDR_DQ30_DQ31()     ((volatile DDR_DQ30_DQ31_halfword_view_st *)(DDR_DQ30_DQ31_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DDR_DQ30_DQ31()     ((volatile u32DDR_DQ30_DQ31_word_view *)\
N(DDR_DQ30_DQ31_REG__ ))
X#define pu32DDR_DQ30_DQ31()     ((volatile u32DDR_DQ30_DQ31_word_view *)(DDR_DQ30_DQ31_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_SEL() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_SEL)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_SEL(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_SEL=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_PU() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_PU)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_PU(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_PU=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_PD() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_PD)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_PD(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_PD=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_SMT() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_SMT)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_SMT(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_SMT=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_IMP() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_IMP)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_IMP(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_IMP=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ30_LATCHN() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_LATCHN)
N#define vSetDDR_DQ30_DQ31_DDR_DQ30_LATCHN(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ30_LATCHN=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_SEL() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_SEL)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_SEL(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_SEL=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_PU() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_PU)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_PU(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_PU=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_PD() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_PD)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_PD(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_PD=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_SMT() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_SMT)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_SMT(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_SMT=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_IMP() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_IMP)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_IMP(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_IMP=(ParValue))
N#define biGetDDR_DQ30_DQ31_DDR_DQ31_LATCHN() (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_LATCHN)
N#define vSetDDR_DQ30_DQ31_DDR_DQ31_LATCHN(ParValue)  (pst_bitDDR_DQ30_DQ31() -> DDR_DQ31_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDDR_DQ30_DQ31LL(ParValue) (pst_u8DDR_DQ30_DQ31() -> u8LL = (ParValue))
N#define u8GetDDR_DQ30_DQ31LL() (pst_u8DDR_DQ30_DQ31() -> u8LL)
N/* LH-struct byte access */
N#define vSetDDR_DQ30_DQ31LH(ParValue) (pst_u8DDR_DQ30_DQ31() -> u8LH = (ParValue))
N#define u8GetDDR_DQ30_DQ31LH() (pst_u8DDR_DQ30_DQ31() -> u8LH)
N/* HL-struct byte access */
N#define vSetDDR_DQ30_DQ31HL(ParValue) (pst_u8DDR_DQ30_DQ31() -> u8HL = (ParValue))
N#define u8GetDDR_DQ30_DQ31HL() (pst_u8DDR_DQ30_DQ31() -> u8HL)
N/* HH-struct byte access */
N#define vSetDDR_DQ30_DQ31HH(ParValue) (pst_u8DDR_DQ30_DQ31() -> u8HH = (ParValue))
N#define u8GetDDR_DQ30_DQ31HH() (pst_u8DDR_DQ30_DQ31() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDDR_DQ30_DQ31L(ParValue) (pst_u16DDR_DQ30_DQ31() -> u16L = (ParValue))
N#define u16GetDDR_DQ30_DQ31L() (pst_u16DDR_DQ30_DQ31() -> u16L)
N#define vSetDDR_DQ30_DQ31H(ParValue) (pst_u16DDR_DQ30_DQ31() -> u16H = (ParValue))
N#define u16GetDDR_DQ30_DQ31H() (pst_u16DDR_DQ30_DQ31() -> u16H)
N            
N/* Word access */
N#define vSetDDR_DQ30_DQ31(ParValue)  (*pu32DDR_DQ30_DQ31() = (ParValue))
N#define u32GetDDR_DQ30_DQ31()  (*pu32DDR_DQ30_DQ31() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: QSPI0_SIO0_SIO1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020A0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define QSPI0_SIO0_SIO1_REG__       0xC03020A0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   QSPI0_SIO0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   QSPI0_SIO0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   QSPI0_SIO0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   QSPI0_SIO0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   QSPI0_SIO0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   QSPI0_SIO0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   QSPI0_SIO1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   QSPI0_SIO1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   QSPI0_SIO1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   QSPI0_SIO1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   QSPI0_SIO1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   QSPI0_SIO1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} QSPI0_SIO0_SIO1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} QSPI0_SIO0_SIO1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} QSPI0_SIO0_SIO1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32QSPI0_SIO0_SIO1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitQSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_bit_view_st *)\
N(QSPI0_SIO0_SIO1_REG__ ))
X#define pst_bitQSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_bit_view_st *)(QSPI0_SIO0_SIO1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8QSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_byte_view_st *)\
N(QSPI0_SIO0_SIO1_REG__ ))
X#define pst_u8QSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_byte_view_st *)(QSPI0_SIO0_SIO1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16QSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_halfword_view_st *)\
N(QSPI0_SIO0_SIO1_REG__ ))
X#define pst_u16QSPI0_SIO0_SIO1()     ((volatile QSPI0_SIO0_SIO1_halfword_view_st *)(QSPI0_SIO0_SIO1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32QSPI0_SIO0_SIO1()     ((volatile u32QSPI0_SIO0_SIO1_word_view *)\
N(QSPI0_SIO0_SIO1_REG__ ))
X#define pu32QSPI0_SIO0_SIO1()     ((volatile u32QSPI0_SIO0_SIO1_word_view *)(QSPI0_SIO0_SIO1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_SEL() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_SEL)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_SEL(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_SEL=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_PU() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_PU)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_PU(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_PU=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_PD() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_PD)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_PD(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_PD=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_SMT() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_SMT)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_SMT(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_SMT=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_IMP() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_IMP)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_IMP(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_IMP=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO0_LATCHN() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_LATCHN)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO0_LATCHN(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO0_LATCHN=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_SEL() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_SEL)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_SEL(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_SEL=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_PU() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_PU)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_PU(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_PU=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_PD() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_PD)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_PD(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_PD=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_SMT() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_SMT)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_SMT(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_SMT=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_IMP() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_IMP)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_IMP(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_IMP=(ParValue))
N#define biGetQSPI0_SIO0_SIO1_QSPI0_SIO1_LATCHN() (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_LATCHN)
N#define vSetQSPI0_SIO0_SIO1_QSPI0_SIO1_LATCHN(ParValue)  (pst_bitQSPI0_SIO0_SIO1() -> QSPI0_SIO1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetQSPI0_SIO0_SIO1LL(ParValue) (pst_u8QSPI0_SIO0_SIO1() -> u8LL = (ParValue))
N#define u8GetQSPI0_SIO0_SIO1LL() (pst_u8QSPI0_SIO0_SIO1() -> u8LL)
N/* LH-struct byte access */
N#define vSetQSPI0_SIO0_SIO1LH(ParValue) (pst_u8QSPI0_SIO0_SIO1() -> u8LH = (ParValue))
N#define u8GetQSPI0_SIO0_SIO1LH() (pst_u8QSPI0_SIO0_SIO1() -> u8LH)
N/* HL-struct byte access */
N#define vSetQSPI0_SIO0_SIO1HL(ParValue) (pst_u8QSPI0_SIO0_SIO1() -> u8HL = (ParValue))
N#define u8GetQSPI0_SIO0_SIO1HL() (pst_u8QSPI0_SIO0_SIO1() -> u8HL)
N/* HH-struct byte access */
N#define vSetQSPI0_SIO0_SIO1HH(ParValue) (pst_u8QSPI0_SIO0_SIO1() -> u8HH = (ParValue))
N#define u8GetQSPI0_SIO0_SIO1HH() (pst_u8QSPI0_SIO0_SIO1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetQSPI0_SIO0_SIO1L(ParValue) (pst_u16QSPI0_SIO0_SIO1() -> u16L = (ParValue))
N#define u16GetQSPI0_SIO0_SIO1L() (pst_u16QSPI0_SIO0_SIO1() -> u16L)
N#define vSetQSPI0_SIO0_SIO1H(ParValue) (pst_u16QSPI0_SIO0_SIO1() -> u16H = (ParValue))
N#define u16GetQSPI0_SIO0_SIO1H() (pst_u16QSPI0_SIO0_SIO1() -> u16H)
N            
N/* Word access */
N#define vSetQSPI0_SIO0_SIO1(ParValue)  (*pu32QSPI0_SIO0_SIO1() = (ParValue))
N#define u32GetQSPI0_SIO0_SIO1()  (*pu32QSPI0_SIO0_SIO1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: QSPI0_SIO2_SIO3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020A4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define QSPI0_SIO2_SIO3_REG__       0xC03020A4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   QSPI0_SIO2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   QSPI0_SIO2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   QSPI0_SIO2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   QSPI0_SIO2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   QSPI0_SIO2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   QSPI0_SIO2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   QSPI0_SIO3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   QSPI0_SIO3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   QSPI0_SIO3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   QSPI0_SIO3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   QSPI0_SIO3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   QSPI0_SIO3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} QSPI0_SIO2_SIO3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} QSPI0_SIO2_SIO3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} QSPI0_SIO2_SIO3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32QSPI0_SIO2_SIO3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitQSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_bit_view_st *)\
N(QSPI0_SIO2_SIO3_REG__ ))
X#define pst_bitQSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_bit_view_st *)(QSPI0_SIO2_SIO3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8QSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_byte_view_st *)\
N(QSPI0_SIO2_SIO3_REG__ ))
X#define pst_u8QSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_byte_view_st *)(QSPI0_SIO2_SIO3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16QSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_halfword_view_st *)\
N(QSPI0_SIO2_SIO3_REG__ ))
X#define pst_u16QSPI0_SIO2_SIO3()     ((volatile QSPI0_SIO2_SIO3_halfword_view_st *)(QSPI0_SIO2_SIO3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32QSPI0_SIO2_SIO3()     ((volatile u32QSPI0_SIO2_SIO3_word_view *)\
N(QSPI0_SIO2_SIO3_REG__ ))
X#define pu32QSPI0_SIO2_SIO3()     ((volatile u32QSPI0_SIO2_SIO3_word_view *)(QSPI0_SIO2_SIO3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_SEL() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_SEL)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_SEL(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_SEL=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_PU() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_PU)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_PU(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_PU=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_PD() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_PD)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_PD(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_PD=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_SMT() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_SMT)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_SMT(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_SMT=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_IMP() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_IMP)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_IMP(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_IMP=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO2_LATCHN() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_LATCHN)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO2_LATCHN(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO2_LATCHN=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_SEL() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_SEL)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_SEL(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_SEL=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_PU() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_PU)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_PU(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_PU=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_PD() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_PD)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_PD(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_PD=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_SMT() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_SMT)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_SMT(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_SMT=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_IMP() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_IMP)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_IMP(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_IMP=(ParValue))
N#define biGetQSPI0_SIO2_SIO3_QSPI0_SIO3_LATCHN() (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_LATCHN)
N#define vSetQSPI0_SIO2_SIO3_QSPI0_SIO3_LATCHN(ParValue)  (pst_bitQSPI0_SIO2_SIO3() -> QSPI0_SIO3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetQSPI0_SIO2_SIO3LL(ParValue) (pst_u8QSPI0_SIO2_SIO3() -> u8LL = (ParValue))
N#define u8GetQSPI0_SIO2_SIO3LL() (pst_u8QSPI0_SIO2_SIO3() -> u8LL)
N/* LH-struct byte access */
N#define vSetQSPI0_SIO2_SIO3LH(ParValue) (pst_u8QSPI0_SIO2_SIO3() -> u8LH = (ParValue))
N#define u8GetQSPI0_SIO2_SIO3LH() (pst_u8QSPI0_SIO2_SIO3() -> u8LH)
N/* HL-struct byte access */
N#define vSetQSPI0_SIO2_SIO3HL(ParValue) (pst_u8QSPI0_SIO2_SIO3() -> u8HL = (ParValue))
N#define u8GetQSPI0_SIO2_SIO3HL() (pst_u8QSPI0_SIO2_SIO3() -> u8HL)
N/* HH-struct byte access */
N#define vSetQSPI0_SIO2_SIO3HH(ParValue) (pst_u8QSPI0_SIO2_SIO3() -> u8HH = (ParValue))
N#define u8GetQSPI0_SIO2_SIO3HH() (pst_u8QSPI0_SIO2_SIO3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetQSPI0_SIO2_SIO3L(ParValue) (pst_u16QSPI0_SIO2_SIO3() -> u16L = (ParValue))
N#define u16GetQSPI0_SIO2_SIO3L() (pst_u16QSPI0_SIO2_SIO3() -> u16L)
N#define vSetQSPI0_SIO2_SIO3H(ParValue) (pst_u16QSPI0_SIO2_SIO3() -> u16H = (ParValue))
N#define u16GetQSPI0_SIO2_SIO3H() (pst_u16QSPI0_SIO2_SIO3() -> u16H)
N            
N/* Word access */
N#define vSetQSPI0_SIO2_SIO3(ParValue)  (*pu32QSPI0_SIO2_SIO3() = (ParValue))
N#define u32GetQSPI0_SIO2_SIO3()  (*pu32QSPI0_SIO2_SIO3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: QSPI0_CS0_SCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020A8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define QSPI0_CS0_SCLK_REG__       0xC03020A8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   QSPI0_CS0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   QSPI0_CS0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   QSPI0_CS0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   QSPI0_CS0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   QSPI0_CS0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   QSPI0_CS0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   QSPI0_SCLK_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   QSPI0_SCLK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   QSPI0_SCLK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   QSPI0_SCLK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   QSPI0_SCLK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   QSPI0_SCLK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} QSPI0_CS0_SCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} QSPI0_CS0_SCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} QSPI0_CS0_SCLK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32QSPI0_CS0_SCLK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitQSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_bit_view_st *)\
N(QSPI0_CS0_SCLK_REG__ ))
X#define pst_bitQSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_bit_view_st *)(QSPI0_CS0_SCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8QSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_byte_view_st *)\
N(QSPI0_CS0_SCLK_REG__ ))
X#define pst_u8QSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_byte_view_st *)(QSPI0_CS0_SCLK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16QSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_halfword_view_st *)\
N(QSPI0_CS0_SCLK_REG__ ))
X#define pst_u16QSPI0_CS0_SCLK()     ((volatile QSPI0_CS0_SCLK_halfword_view_st *)(QSPI0_CS0_SCLK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32QSPI0_CS0_SCLK()     ((volatile u32QSPI0_CS0_SCLK_word_view *)\
N(QSPI0_CS0_SCLK_REG__ ))
X#define pu32QSPI0_CS0_SCLK()     ((volatile u32QSPI0_CS0_SCLK_word_view *)(QSPI0_CS0_SCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_SEL() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_SEL)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_SEL(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_SEL=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_PU() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_PU)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_PU(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_PU=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_PD() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_PD)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_PD(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_PD=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_SMT() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_SMT)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_SMT(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_SMT=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_IMP() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_IMP)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_IMP(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_IMP=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_CS0_LATCHN() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_LATCHN)
N#define vSetQSPI0_CS0_SCLK_QSPI0_CS0_LATCHN(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_CS0_LATCHN=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_SEL() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_SEL)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_SEL(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_SEL=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_PU() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_PU)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_PU(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_PU=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_PD() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_PD)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_PD(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_PD=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_SMT() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_SMT)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_SMT(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_SMT=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_IMP() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_IMP)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_IMP(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_IMP=(ParValue))
N#define biGetQSPI0_CS0_SCLK_QSPI0_SCLK_LATCHN() (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_LATCHN)
N#define vSetQSPI0_CS0_SCLK_QSPI0_SCLK_LATCHN(ParValue)  (pst_bitQSPI0_CS0_SCLK() -> QSPI0_SCLK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetQSPI0_CS0_SCLKLL(ParValue) (pst_u8QSPI0_CS0_SCLK() -> u8LL = (ParValue))
N#define u8GetQSPI0_CS0_SCLKLL() (pst_u8QSPI0_CS0_SCLK() -> u8LL)
N/* LH-struct byte access */
N#define vSetQSPI0_CS0_SCLKLH(ParValue) (pst_u8QSPI0_CS0_SCLK() -> u8LH = (ParValue))
N#define u8GetQSPI0_CS0_SCLKLH() (pst_u8QSPI0_CS0_SCLK() -> u8LH)
N/* HL-struct byte access */
N#define vSetQSPI0_CS0_SCLKHL(ParValue) (pst_u8QSPI0_CS0_SCLK() -> u8HL = (ParValue))
N#define u8GetQSPI0_CS0_SCLKHL() (pst_u8QSPI0_CS0_SCLK() -> u8HL)
N/* HH-struct byte access */
N#define vSetQSPI0_CS0_SCLKHH(ParValue) (pst_u8QSPI0_CS0_SCLK() -> u8HH = (ParValue))
N#define u8GetQSPI0_CS0_SCLKHH() (pst_u8QSPI0_CS0_SCLK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetQSPI0_CS0_SCLKL(ParValue) (pst_u16QSPI0_CS0_SCLK() -> u16L = (ParValue))
N#define u16GetQSPI0_CS0_SCLKL() (pst_u16QSPI0_CS0_SCLK() -> u16L)
N#define vSetQSPI0_CS0_SCLKH(ParValue) (pst_u16QSPI0_CS0_SCLK() -> u16H = (ParValue))
N#define u16GetQSPI0_CS0_SCLKH() (pst_u16QSPI0_CS0_SCLK() -> u16H)
N            
N/* Word access */
N#define vSetQSPI0_CS0_SCLK(ParValue)  (*pu32QSPI0_CS0_SCLK() = (ParValue))
N#define u32GetQSPI0_CS0_SCLK()  (*pu32QSPI0_CS0_SCLK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0HDISP_HSYNC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020C0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0HDISP_HSYNC_REG__       0xC03020C0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0HDISP_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0HDISP_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0HDISP_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0HDISP_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0HDISP_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0HDISP_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0HSYNC_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0HSYNC_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0HSYNC_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0HSYNC_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0HSYNC_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0HSYNC_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0HDISP_HSYNC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0HDISP_HSYNC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0HDISP_HSYNC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0HDISP_HSYNC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_bit_view_st *)\
N(D0HDISP_HSYNC_REG__ ))
X#define pst_bitD0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_bit_view_st *)(D0HDISP_HSYNC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_byte_view_st *)\
N(D0HDISP_HSYNC_REG__ ))
X#define pst_u8D0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_byte_view_st *)(D0HDISP_HSYNC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_halfword_view_st *)\
N(D0HDISP_HSYNC_REG__ ))
X#define pst_u16D0HDISP_HSYNC()     ((volatile D0HDISP_HSYNC_halfword_view_st *)(D0HDISP_HSYNC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0HDISP_HSYNC()     ((volatile u32D0HDISP_HSYNC_word_view *)\
N(D0HDISP_HSYNC_REG__ ))
X#define pu32D0HDISP_HSYNC()     ((volatile u32D0HDISP_HSYNC_word_view *)(D0HDISP_HSYNC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0HDISP_HSYNC_D0HDISP_SEL() (pst_bitD0HDISP_HSYNC() -> D0HDISP_SEL)
N#define vSetD0HDISP_HSYNC_D0HDISP_SEL(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_SEL=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HDISP_PU() (pst_bitD0HDISP_HSYNC() -> D0HDISP_PU)
N#define vSetD0HDISP_HSYNC_D0HDISP_PU(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_PU=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HDISP_PD() (pst_bitD0HDISP_HSYNC() -> D0HDISP_PD)
N#define vSetD0HDISP_HSYNC_D0HDISP_PD(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_PD=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HDISP_SMT() (pst_bitD0HDISP_HSYNC() -> D0HDISP_SMT)
N#define vSetD0HDISP_HSYNC_D0HDISP_SMT(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_SMT=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HDISP_IMP() (pst_bitD0HDISP_HSYNC() -> D0HDISP_IMP)
N#define vSetD0HDISP_HSYNC_D0HDISP_IMP(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_IMP=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HDISP_LATCHN() (pst_bitD0HDISP_HSYNC() -> D0HDISP_LATCHN)
N#define vSetD0HDISP_HSYNC_D0HDISP_LATCHN(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HDISP_LATCHN=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_SEL() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_SEL)
N#define vSetD0HDISP_HSYNC_D0HSYNC_SEL(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_SEL=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_PU() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_PU)
N#define vSetD0HDISP_HSYNC_D0HSYNC_PU(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_PU=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_PD() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_PD)
N#define vSetD0HDISP_HSYNC_D0HSYNC_PD(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_PD=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_SMT() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_SMT)
N#define vSetD0HDISP_HSYNC_D0HSYNC_SMT(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_SMT=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_IMP() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_IMP)
N#define vSetD0HDISP_HSYNC_D0HSYNC_IMP(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_IMP=(ParValue))
N#define biGetD0HDISP_HSYNC_D0HSYNC_LATCHN() (pst_bitD0HDISP_HSYNC() -> D0HSYNC_LATCHN)
N#define vSetD0HDISP_HSYNC_D0HSYNC_LATCHN(ParValue)  (pst_bitD0HDISP_HSYNC() -> D0HSYNC_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0HDISP_HSYNCLL(ParValue) (pst_u8D0HDISP_HSYNC() -> u8LL = (ParValue))
N#define u8GetD0HDISP_HSYNCLL() (pst_u8D0HDISP_HSYNC() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0HDISP_HSYNCLH(ParValue) (pst_u8D0HDISP_HSYNC() -> u8LH = (ParValue))
N#define u8GetD0HDISP_HSYNCLH() (pst_u8D0HDISP_HSYNC() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0HDISP_HSYNCHL(ParValue) (pst_u8D0HDISP_HSYNC() -> u8HL = (ParValue))
N#define u8GetD0HDISP_HSYNCHL() (pst_u8D0HDISP_HSYNC() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0HDISP_HSYNCHH(ParValue) (pst_u8D0HDISP_HSYNC() -> u8HH = (ParValue))
N#define u8GetD0HDISP_HSYNCHH() (pst_u8D0HDISP_HSYNC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0HDISP_HSYNCL(ParValue) (pst_u16D0HDISP_HSYNC() -> u16L = (ParValue))
N#define u16GetD0HDISP_HSYNCL() (pst_u16D0HDISP_HSYNC() -> u16L)
N#define vSetD0HDISP_HSYNCH(ParValue) (pst_u16D0HDISP_HSYNC() -> u16H = (ParValue))
N#define u16GetD0HDISP_HSYNCH() (pst_u16D0HDISP_HSYNC() -> u16H)
N            
N/* Word access */
N#define vSetD0HDISP_HSYNC(ParValue)  (*pu32D0HDISP_HSYNC() = (ParValue))
N#define u32GetD0HDISP_HSYNC()  (*pu32D0HDISP_HSYNC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0VSYNC_DOTCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020C4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0VSYNC_DOTCLK_REG__       0xC03020C4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0VSYNC_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0VSYNC_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0VSYNC_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0VSYNC_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0VSYNC_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0VSYNC_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0DOTCLK_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0DOTCLK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0DOTCLK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0DOTCLK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0DOTCLK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0DOTCLK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0VSYNC_DOTCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0VSYNC_DOTCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0VSYNC_DOTCLK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0VSYNC_DOTCLK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_bit_view_st *)\
N(D0VSYNC_DOTCLK_REG__ ))
X#define pst_bitD0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_bit_view_st *)(D0VSYNC_DOTCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_byte_view_st *)\
N(D0VSYNC_DOTCLK_REG__ ))
X#define pst_u8D0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_byte_view_st *)(D0VSYNC_DOTCLK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_halfword_view_st *)\
N(D0VSYNC_DOTCLK_REG__ ))
X#define pst_u16D0VSYNC_DOTCLK()     ((volatile D0VSYNC_DOTCLK_halfword_view_st *)(D0VSYNC_DOTCLK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0VSYNC_DOTCLK()     ((volatile u32D0VSYNC_DOTCLK_word_view *)\
N(D0VSYNC_DOTCLK_REG__ ))
X#define pu32D0VSYNC_DOTCLK()     ((volatile u32D0VSYNC_DOTCLK_word_view *)(D0VSYNC_DOTCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_SEL() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_SEL)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_SEL(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_SEL=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_PU() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_PU)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_PU(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_PU=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_PD() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_PD)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_PD(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_PD=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_SMT() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_SMT)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_SMT(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_SMT=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_IMP() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_IMP)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_IMP(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_IMP=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0VSYNC_LATCHN() (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_LATCHN)
N#define vSetD0VSYNC_DOTCLK_D0VSYNC_LATCHN(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0VSYNC_LATCHN=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_SEL() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_SEL)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_SEL(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_SEL=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_PU() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_PU)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_PU(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_PU=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_PD() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_PD)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_PD(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_PD=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_SMT() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_SMT)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_SMT(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_SMT=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_IMP() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_IMP)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_IMP(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_IMP=(ParValue))
N#define biGetD0VSYNC_DOTCLK_D0DOTCLK_LATCHN() (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_LATCHN)
N#define vSetD0VSYNC_DOTCLK_D0DOTCLK_LATCHN(ParValue)  (pst_bitD0VSYNC_DOTCLK() -> D0DOTCLK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0VSYNC_DOTCLKLL(ParValue) (pst_u8D0VSYNC_DOTCLK() -> u8LL = (ParValue))
N#define u8GetD0VSYNC_DOTCLKLL() (pst_u8D0VSYNC_DOTCLK() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0VSYNC_DOTCLKLH(ParValue) (pst_u8D0VSYNC_DOTCLK() -> u8LH = (ParValue))
N#define u8GetD0VSYNC_DOTCLKLH() (pst_u8D0VSYNC_DOTCLK() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0VSYNC_DOTCLKHL(ParValue) (pst_u8D0VSYNC_DOTCLK() -> u8HL = (ParValue))
N#define u8GetD0VSYNC_DOTCLKHL() (pst_u8D0VSYNC_DOTCLK() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0VSYNC_DOTCLKHH(ParValue) (pst_u8D0VSYNC_DOTCLK() -> u8HH = (ParValue))
N#define u8GetD0VSYNC_DOTCLKHH() (pst_u8D0VSYNC_DOTCLK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0VSYNC_DOTCLKL(ParValue) (pst_u16D0VSYNC_DOTCLK() -> u16L = (ParValue))
N#define u16GetD0VSYNC_DOTCLKL() (pst_u16D0VSYNC_DOTCLK() -> u16L)
N#define vSetD0VSYNC_DOTCLKH(ParValue) (pst_u16D0VSYNC_DOTCLK() -> u16H = (ParValue))
N#define u16GetD0VSYNC_DOTCLKH() (pst_u16D0VSYNC_DOTCLK() -> u16H)
N            
N/* Word access */
N#define vSetD0VSYNC_DOTCLK(ParValue)  (*pu32D0VSYNC_DOTCLK() = (ParValue))
N#define u32GetD0VSYNC_DOTCLK()  (*pu32D0VSYNC_DOTCLK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB0_RGB1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020C8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB0_RGB1_REG__       0xC03020C8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB0_RGB1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB0_RGB1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB0_RGB1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB0_RGB1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB0_RGB1()     ((volatile D0RGB0_RGB1_bit_view_st *)\
N(D0RGB0_RGB1_REG__ ))
X#define pst_bitD0RGB0_RGB1()     ((volatile D0RGB0_RGB1_bit_view_st *)(D0RGB0_RGB1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB0_RGB1()     ((volatile D0RGB0_RGB1_byte_view_st *)\
N(D0RGB0_RGB1_REG__ ))
X#define pst_u8D0RGB0_RGB1()     ((volatile D0RGB0_RGB1_byte_view_st *)(D0RGB0_RGB1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB0_RGB1()     ((volatile D0RGB0_RGB1_halfword_view_st *)\
N(D0RGB0_RGB1_REG__ ))
X#define pst_u16D0RGB0_RGB1()     ((volatile D0RGB0_RGB1_halfword_view_st *)(D0RGB0_RGB1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB0_RGB1()     ((volatile u32D0RGB0_RGB1_word_view *)\
N(D0RGB0_RGB1_REG__ ))
X#define pu32D0RGB0_RGB1()     ((volatile u32D0RGB0_RGB1_word_view *)(D0RGB0_RGB1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB0_RGB1_D0RGB0_SEL() (pst_bitD0RGB0_RGB1() -> D0RGB0_SEL)
N#define vSetD0RGB0_RGB1_D0RGB0_SEL(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_SEL=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB0_PU() (pst_bitD0RGB0_RGB1() -> D0RGB0_PU)
N#define vSetD0RGB0_RGB1_D0RGB0_PU(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_PU=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB0_PD() (pst_bitD0RGB0_RGB1() -> D0RGB0_PD)
N#define vSetD0RGB0_RGB1_D0RGB0_PD(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_PD=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB0_SMT() (pst_bitD0RGB0_RGB1() -> D0RGB0_SMT)
N#define vSetD0RGB0_RGB1_D0RGB0_SMT(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_SMT=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB0_IMP() (pst_bitD0RGB0_RGB1() -> D0RGB0_IMP)
N#define vSetD0RGB0_RGB1_D0RGB0_IMP(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_IMP=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB0_LATCHN() (pst_bitD0RGB0_RGB1() -> D0RGB0_LATCHN)
N#define vSetD0RGB0_RGB1_D0RGB0_LATCHN(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB0_LATCHN=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_SEL() (pst_bitD0RGB0_RGB1() -> D0RGB1_SEL)
N#define vSetD0RGB0_RGB1_D0RGB1_SEL(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_SEL=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_PU() (pst_bitD0RGB0_RGB1() -> D0RGB1_PU)
N#define vSetD0RGB0_RGB1_D0RGB1_PU(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_PU=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_PD() (pst_bitD0RGB0_RGB1() -> D0RGB1_PD)
N#define vSetD0RGB0_RGB1_D0RGB1_PD(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_PD=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_SMT() (pst_bitD0RGB0_RGB1() -> D0RGB1_SMT)
N#define vSetD0RGB0_RGB1_D0RGB1_SMT(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_SMT=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_IMP() (pst_bitD0RGB0_RGB1() -> D0RGB1_IMP)
N#define vSetD0RGB0_RGB1_D0RGB1_IMP(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_IMP=(ParValue))
N#define biGetD0RGB0_RGB1_D0RGB1_LATCHN() (pst_bitD0RGB0_RGB1() -> D0RGB1_LATCHN)
N#define vSetD0RGB0_RGB1_D0RGB1_LATCHN(ParValue)  (pst_bitD0RGB0_RGB1() -> D0RGB1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB0_RGB1LL(ParValue) (pst_u8D0RGB0_RGB1() -> u8LL = (ParValue))
N#define u8GetD0RGB0_RGB1LL() (pst_u8D0RGB0_RGB1() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB0_RGB1LH(ParValue) (pst_u8D0RGB0_RGB1() -> u8LH = (ParValue))
N#define u8GetD0RGB0_RGB1LH() (pst_u8D0RGB0_RGB1() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB0_RGB1HL(ParValue) (pst_u8D0RGB0_RGB1() -> u8HL = (ParValue))
N#define u8GetD0RGB0_RGB1HL() (pst_u8D0RGB0_RGB1() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB0_RGB1HH(ParValue) (pst_u8D0RGB0_RGB1() -> u8HH = (ParValue))
N#define u8GetD0RGB0_RGB1HH() (pst_u8D0RGB0_RGB1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB0_RGB1L(ParValue) (pst_u16D0RGB0_RGB1() -> u16L = (ParValue))
N#define u16GetD0RGB0_RGB1L() (pst_u16D0RGB0_RGB1() -> u16L)
N#define vSetD0RGB0_RGB1H(ParValue) (pst_u16D0RGB0_RGB1() -> u16H = (ParValue))
N#define u16GetD0RGB0_RGB1H() (pst_u16D0RGB0_RGB1() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB0_RGB1(ParValue)  (*pu32D0RGB0_RGB1() = (ParValue))
N#define u32GetD0RGB0_RGB1()  (*pu32D0RGB0_RGB1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB2_RGB3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020CC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB2_RGB3_REG__       0xC03020CCU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB2_RGB3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB2_RGB3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB2_RGB3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB2_RGB3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB2_RGB3()     ((volatile D0RGB2_RGB3_bit_view_st *)\
N(D0RGB2_RGB3_REG__ ))
X#define pst_bitD0RGB2_RGB3()     ((volatile D0RGB2_RGB3_bit_view_st *)(D0RGB2_RGB3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB2_RGB3()     ((volatile D0RGB2_RGB3_byte_view_st *)\
N(D0RGB2_RGB3_REG__ ))
X#define pst_u8D0RGB2_RGB3()     ((volatile D0RGB2_RGB3_byte_view_st *)(D0RGB2_RGB3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB2_RGB3()     ((volatile D0RGB2_RGB3_halfword_view_st *)\
N(D0RGB2_RGB3_REG__ ))
X#define pst_u16D0RGB2_RGB3()     ((volatile D0RGB2_RGB3_halfword_view_st *)(D0RGB2_RGB3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB2_RGB3()     ((volatile u32D0RGB2_RGB3_word_view *)\
N(D0RGB2_RGB3_REG__ ))
X#define pu32D0RGB2_RGB3()     ((volatile u32D0RGB2_RGB3_word_view *)(D0RGB2_RGB3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB2_RGB3_D0RGB2_SEL() (pst_bitD0RGB2_RGB3() -> D0RGB2_SEL)
N#define vSetD0RGB2_RGB3_D0RGB2_SEL(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_SEL=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB2_PU() (pst_bitD0RGB2_RGB3() -> D0RGB2_PU)
N#define vSetD0RGB2_RGB3_D0RGB2_PU(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_PU=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB2_PD() (pst_bitD0RGB2_RGB3() -> D0RGB2_PD)
N#define vSetD0RGB2_RGB3_D0RGB2_PD(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_PD=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB2_SMT() (pst_bitD0RGB2_RGB3() -> D0RGB2_SMT)
N#define vSetD0RGB2_RGB3_D0RGB2_SMT(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_SMT=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB2_IMP() (pst_bitD0RGB2_RGB3() -> D0RGB2_IMP)
N#define vSetD0RGB2_RGB3_D0RGB2_IMP(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_IMP=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB2_LATCHN() (pst_bitD0RGB2_RGB3() -> D0RGB2_LATCHN)
N#define vSetD0RGB2_RGB3_D0RGB2_LATCHN(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB2_LATCHN=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_SEL() (pst_bitD0RGB2_RGB3() -> D0RGB3_SEL)
N#define vSetD0RGB2_RGB3_D0RGB3_SEL(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_SEL=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_PU() (pst_bitD0RGB2_RGB3() -> D0RGB3_PU)
N#define vSetD0RGB2_RGB3_D0RGB3_PU(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_PU=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_PD() (pst_bitD0RGB2_RGB3() -> D0RGB3_PD)
N#define vSetD0RGB2_RGB3_D0RGB3_PD(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_PD=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_SMT() (pst_bitD0RGB2_RGB3() -> D0RGB3_SMT)
N#define vSetD0RGB2_RGB3_D0RGB3_SMT(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_SMT=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_IMP() (pst_bitD0RGB2_RGB3() -> D0RGB3_IMP)
N#define vSetD0RGB2_RGB3_D0RGB3_IMP(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_IMP=(ParValue))
N#define biGetD0RGB2_RGB3_D0RGB3_LATCHN() (pst_bitD0RGB2_RGB3() -> D0RGB3_LATCHN)
N#define vSetD0RGB2_RGB3_D0RGB3_LATCHN(ParValue)  (pst_bitD0RGB2_RGB3() -> D0RGB3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB2_RGB3LL(ParValue) (pst_u8D0RGB2_RGB3() -> u8LL = (ParValue))
N#define u8GetD0RGB2_RGB3LL() (pst_u8D0RGB2_RGB3() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB2_RGB3LH(ParValue) (pst_u8D0RGB2_RGB3() -> u8LH = (ParValue))
N#define u8GetD0RGB2_RGB3LH() (pst_u8D0RGB2_RGB3() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB2_RGB3HL(ParValue) (pst_u8D0RGB2_RGB3() -> u8HL = (ParValue))
N#define u8GetD0RGB2_RGB3HL() (pst_u8D0RGB2_RGB3() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB2_RGB3HH(ParValue) (pst_u8D0RGB2_RGB3() -> u8HH = (ParValue))
N#define u8GetD0RGB2_RGB3HH() (pst_u8D0RGB2_RGB3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB2_RGB3L(ParValue) (pst_u16D0RGB2_RGB3() -> u16L = (ParValue))
N#define u16GetD0RGB2_RGB3L() (pst_u16D0RGB2_RGB3() -> u16L)
N#define vSetD0RGB2_RGB3H(ParValue) (pst_u16D0RGB2_RGB3() -> u16H = (ParValue))
N#define u16GetD0RGB2_RGB3H() (pst_u16D0RGB2_RGB3() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB2_RGB3(ParValue)  (*pu32D0RGB2_RGB3() = (ParValue))
N#define u32GetD0RGB2_RGB3()  (*pu32D0RGB2_RGB3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB4_RGB5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020D0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB4_RGB5_REG__       0xC03020D0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB4_RGB5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB4_RGB5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB4_RGB5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB4_RGB5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB4_RGB5()     ((volatile D0RGB4_RGB5_bit_view_st *)\
N(D0RGB4_RGB5_REG__ ))
X#define pst_bitD0RGB4_RGB5()     ((volatile D0RGB4_RGB5_bit_view_st *)(D0RGB4_RGB5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB4_RGB5()     ((volatile D0RGB4_RGB5_byte_view_st *)\
N(D0RGB4_RGB5_REG__ ))
X#define pst_u8D0RGB4_RGB5()     ((volatile D0RGB4_RGB5_byte_view_st *)(D0RGB4_RGB5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB4_RGB5()     ((volatile D0RGB4_RGB5_halfword_view_st *)\
N(D0RGB4_RGB5_REG__ ))
X#define pst_u16D0RGB4_RGB5()     ((volatile D0RGB4_RGB5_halfword_view_st *)(D0RGB4_RGB5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB4_RGB5()     ((volatile u32D0RGB4_RGB5_word_view *)\
N(D0RGB4_RGB5_REG__ ))
X#define pu32D0RGB4_RGB5()     ((volatile u32D0RGB4_RGB5_word_view *)(D0RGB4_RGB5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB4_RGB5_D0RGB4_SEL() (pst_bitD0RGB4_RGB5() -> D0RGB4_SEL)
N#define vSetD0RGB4_RGB5_D0RGB4_SEL(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_SEL=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB4_PU() (pst_bitD0RGB4_RGB5() -> D0RGB4_PU)
N#define vSetD0RGB4_RGB5_D0RGB4_PU(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_PU=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB4_PD() (pst_bitD0RGB4_RGB5() -> D0RGB4_PD)
N#define vSetD0RGB4_RGB5_D0RGB4_PD(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_PD=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB4_SMT() (pst_bitD0RGB4_RGB5() -> D0RGB4_SMT)
N#define vSetD0RGB4_RGB5_D0RGB4_SMT(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_SMT=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB4_IMP() (pst_bitD0RGB4_RGB5() -> D0RGB4_IMP)
N#define vSetD0RGB4_RGB5_D0RGB4_IMP(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_IMP=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB4_LATCHN() (pst_bitD0RGB4_RGB5() -> D0RGB4_LATCHN)
N#define vSetD0RGB4_RGB5_D0RGB4_LATCHN(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB4_LATCHN=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_SEL() (pst_bitD0RGB4_RGB5() -> D0RGB5_SEL)
N#define vSetD0RGB4_RGB5_D0RGB5_SEL(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_SEL=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_PU() (pst_bitD0RGB4_RGB5() -> D0RGB5_PU)
N#define vSetD0RGB4_RGB5_D0RGB5_PU(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_PU=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_PD() (pst_bitD0RGB4_RGB5() -> D0RGB5_PD)
N#define vSetD0RGB4_RGB5_D0RGB5_PD(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_PD=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_SMT() (pst_bitD0RGB4_RGB5() -> D0RGB5_SMT)
N#define vSetD0RGB4_RGB5_D0RGB5_SMT(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_SMT=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_IMP() (pst_bitD0RGB4_RGB5() -> D0RGB5_IMP)
N#define vSetD0RGB4_RGB5_D0RGB5_IMP(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_IMP=(ParValue))
N#define biGetD0RGB4_RGB5_D0RGB5_LATCHN() (pst_bitD0RGB4_RGB5() -> D0RGB5_LATCHN)
N#define vSetD0RGB4_RGB5_D0RGB5_LATCHN(ParValue)  (pst_bitD0RGB4_RGB5() -> D0RGB5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB4_RGB5LL(ParValue) (pst_u8D0RGB4_RGB5() -> u8LL = (ParValue))
N#define u8GetD0RGB4_RGB5LL() (pst_u8D0RGB4_RGB5() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB4_RGB5LH(ParValue) (pst_u8D0RGB4_RGB5() -> u8LH = (ParValue))
N#define u8GetD0RGB4_RGB5LH() (pst_u8D0RGB4_RGB5() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB4_RGB5HL(ParValue) (pst_u8D0RGB4_RGB5() -> u8HL = (ParValue))
N#define u8GetD0RGB4_RGB5HL() (pst_u8D0RGB4_RGB5() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB4_RGB5HH(ParValue) (pst_u8D0RGB4_RGB5() -> u8HH = (ParValue))
N#define u8GetD0RGB4_RGB5HH() (pst_u8D0RGB4_RGB5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB4_RGB5L(ParValue) (pst_u16D0RGB4_RGB5() -> u16L = (ParValue))
N#define u16GetD0RGB4_RGB5L() (pst_u16D0RGB4_RGB5() -> u16L)
N#define vSetD0RGB4_RGB5H(ParValue) (pst_u16D0RGB4_RGB5() -> u16H = (ParValue))
N#define u16GetD0RGB4_RGB5H() (pst_u16D0RGB4_RGB5() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB4_RGB5(ParValue)  (*pu32D0RGB4_RGB5() = (ParValue))
N#define u32GetD0RGB4_RGB5()  (*pu32D0RGB4_RGB5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB6_RGB7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020D4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB6_RGB7_REG__       0xC03020D4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB6_RGB7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB6_RGB7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB6_RGB7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB6_RGB7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB6_RGB7()     ((volatile D0RGB6_RGB7_bit_view_st *)\
N(D0RGB6_RGB7_REG__ ))
X#define pst_bitD0RGB6_RGB7()     ((volatile D0RGB6_RGB7_bit_view_st *)(D0RGB6_RGB7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB6_RGB7()     ((volatile D0RGB6_RGB7_byte_view_st *)\
N(D0RGB6_RGB7_REG__ ))
X#define pst_u8D0RGB6_RGB7()     ((volatile D0RGB6_RGB7_byte_view_st *)(D0RGB6_RGB7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB6_RGB7()     ((volatile D0RGB6_RGB7_halfword_view_st *)\
N(D0RGB6_RGB7_REG__ ))
X#define pst_u16D0RGB6_RGB7()     ((volatile D0RGB6_RGB7_halfword_view_st *)(D0RGB6_RGB7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB6_RGB7()     ((volatile u32D0RGB6_RGB7_word_view *)\
N(D0RGB6_RGB7_REG__ ))
X#define pu32D0RGB6_RGB7()     ((volatile u32D0RGB6_RGB7_word_view *)(D0RGB6_RGB7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB6_RGB7_D0RGB6_SEL() (pst_bitD0RGB6_RGB7() -> D0RGB6_SEL)
N#define vSetD0RGB6_RGB7_D0RGB6_SEL(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_SEL=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB6_PU() (pst_bitD0RGB6_RGB7() -> D0RGB6_PU)
N#define vSetD0RGB6_RGB7_D0RGB6_PU(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_PU=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB6_PD() (pst_bitD0RGB6_RGB7() -> D0RGB6_PD)
N#define vSetD0RGB6_RGB7_D0RGB6_PD(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_PD=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB6_SMT() (pst_bitD0RGB6_RGB7() -> D0RGB6_SMT)
N#define vSetD0RGB6_RGB7_D0RGB6_SMT(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_SMT=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB6_IMP() (pst_bitD0RGB6_RGB7() -> D0RGB6_IMP)
N#define vSetD0RGB6_RGB7_D0RGB6_IMP(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_IMP=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB6_LATCHN() (pst_bitD0RGB6_RGB7() -> D0RGB6_LATCHN)
N#define vSetD0RGB6_RGB7_D0RGB6_LATCHN(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB6_LATCHN=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_SEL() (pst_bitD0RGB6_RGB7() -> D0RGB7_SEL)
N#define vSetD0RGB6_RGB7_D0RGB7_SEL(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_SEL=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_PU() (pst_bitD0RGB6_RGB7() -> D0RGB7_PU)
N#define vSetD0RGB6_RGB7_D0RGB7_PU(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_PU=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_PD() (pst_bitD0RGB6_RGB7() -> D0RGB7_PD)
N#define vSetD0RGB6_RGB7_D0RGB7_PD(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_PD=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_SMT() (pst_bitD0RGB6_RGB7() -> D0RGB7_SMT)
N#define vSetD0RGB6_RGB7_D0RGB7_SMT(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_SMT=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_IMP() (pst_bitD0RGB6_RGB7() -> D0RGB7_IMP)
N#define vSetD0RGB6_RGB7_D0RGB7_IMP(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_IMP=(ParValue))
N#define biGetD0RGB6_RGB7_D0RGB7_LATCHN() (pst_bitD0RGB6_RGB7() -> D0RGB7_LATCHN)
N#define vSetD0RGB6_RGB7_D0RGB7_LATCHN(ParValue)  (pst_bitD0RGB6_RGB7() -> D0RGB7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB6_RGB7LL(ParValue) (pst_u8D0RGB6_RGB7() -> u8LL = (ParValue))
N#define u8GetD0RGB6_RGB7LL() (pst_u8D0RGB6_RGB7() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB6_RGB7LH(ParValue) (pst_u8D0RGB6_RGB7() -> u8LH = (ParValue))
N#define u8GetD0RGB6_RGB7LH() (pst_u8D0RGB6_RGB7() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB6_RGB7HL(ParValue) (pst_u8D0RGB6_RGB7() -> u8HL = (ParValue))
N#define u8GetD0RGB6_RGB7HL() (pst_u8D0RGB6_RGB7() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB6_RGB7HH(ParValue) (pst_u8D0RGB6_RGB7() -> u8HH = (ParValue))
N#define u8GetD0RGB6_RGB7HH() (pst_u8D0RGB6_RGB7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB6_RGB7L(ParValue) (pst_u16D0RGB6_RGB7() -> u16L = (ParValue))
N#define u16GetD0RGB6_RGB7L() (pst_u16D0RGB6_RGB7() -> u16L)
N#define vSetD0RGB6_RGB7H(ParValue) (pst_u16D0RGB6_RGB7() -> u16H = (ParValue))
N#define u16GetD0RGB6_RGB7H() (pst_u16D0RGB6_RGB7() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB6_RGB7(ParValue)  (*pu32D0RGB6_RGB7() = (ParValue))
N#define u32GetD0RGB6_RGB7()  (*pu32D0RGB6_RGB7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB8_RGB9                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020D8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB8_RGB9_REG__       0xC03020D8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB8_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB8_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB8_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB8_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB8_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB8_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB9_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB9_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB9_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB9_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB9_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB9_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB8_RGB9_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB8_RGB9_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB8_RGB9_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB8_RGB9_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB8_RGB9()     ((volatile D0RGB8_RGB9_bit_view_st *)\
N(D0RGB8_RGB9_REG__ ))
X#define pst_bitD0RGB8_RGB9()     ((volatile D0RGB8_RGB9_bit_view_st *)(D0RGB8_RGB9_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB8_RGB9()     ((volatile D0RGB8_RGB9_byte_view_st *)\
N(D0RGB8_RGB9_REG__ ))
X#define pst_u8D0RGB8_RGB9()     ((volatile D0RGB8_RGB9_byte_view_st *)(D0RGB8_RGB9_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB8_RGB9()     ((volatile D0RGB8_RGB9_halfword_view_st *)\
N(D0RGB8_RGB9_REG__ ))
X#define pst_u16D0RGB8_RGB9()     ((volatile D0RGB8_RGB9_halfword_view_st *)(D0RGB8_RGB9_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB8_RGB9()     ((volatile u32D0RGB8_RGB9_word_view *)\
N(D0RGB8_RGB9_REG__ ))
X#define pu32D0RGB8_RGB9()     ((volatile u32D0RGB8_RGB9_word_view *)(D0RGB8_RGB9_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB8_RGB9_D0RGB8_SEL() (pst_bitD0RGB8_RGB9() -> D0RGB8_SEL)
N#define vSetD0RGB8_RGB9_D0RGB8_SEL(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_SEL=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB8_PU() (pst_bitD0RGB8_RGB9() -> D0RGB8_PU)
N#define vSetD0RGB8_RGB9_D0RGB8_PU(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_PU=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB8_PD() (pst_bitD0RGB8_RGB9() -> D0RGB8_PD)
N#define vSetD0RGB8_RGB9_D0RGB8_PD(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_PD=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB8_SMT() (pst_bitD0RGB8_RGB9() -> D0RGB8_SMT)
N#define vSetD0RGB8_RGB9_D0RGB8_SMT(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_SMT=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB8_IMP() (pst_bitD0RGB8_RGB9() -> D0RGB8_IMP)
N#define vSetD0RGB8_RGB9_D0RGB8_IMP(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_IMP=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB8_LATCHN() (pst_bitD0RGB8_RGB9() -> D0RGB8_LATCHN)
N#define vSetD0RGB8_RGB9_D0RGB8_LATCHN(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB8_LATCHN=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_SEL() (pst_bitD0RGB8_RGB9() -> D0RGB9_SEL)
N#define vSetD0RGB8_RGB9_D0RGB9_SEL(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_SEL=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_PU() (pst_bitD0RGB8_RGB9() -> D0RGB9_PU)
N#define vSetD0RGB8_RGB9_D0RGB9_PU(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_PU=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_PD() (pst_bitD0RGB8_RGB9() -> D0RGB9_PD)
N#define vSetD0RGB8_RGB9_D0RGB9_PD(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_PD=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_SMT() (pst_bitD0RGB8_RGB9() -> D0RGB9_SMT)
N#define vSetD0RGB8_RGB9_D0RGB9_SMT(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_SMT=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_IMP() (pst_bitD0RGB8_RGB9() -> D0RGB9_IMP)
N#define vSetD0RGB8_RGB9_D0RGB9_IMP(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_IMP=(ParValue))
N#define biGetD0RGB8_RGB9_D0RGB9_LATCHN() (pst_bitD0RGB8_RGB9() -> D0RGB9_LATCHN)
N#define vSetD0RGB8_RGB9_D0RGB9_LATCHN(ParValue)  (pst_bitD0RGB8_RGB9() -> D0RGB9_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB8_RGB9LL(ParValue) (pst_u8D0RGB8_RGB9() -> u8LL = (ParValue))
N#define u8GetD0RGB8_RGB9LL() (pst_u8D0RGB8_RGB9() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB8_RGB9LH(ParValue) (pst_u8D0RGB8_RGB9() -> u8LH = (ParValue))
N#define u8GetD0RGB8_RGB9LH() (pst_u8D0RGB8_RGB9() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB8_RGB9HL(ParValue) (pst_u8D0RGB8_RGB9() -> u8HL = (ParValue))
N#define u8GetD0RGB8_RGB9HL() (pst_u8D0RGB8_RGB9() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB8_RGB9HH(ParValue) (pst_u8D0RGB8_RGB9() -> u8HH = (ParValue))
N#define u8GetD0RGB8_RGB9HH() (pst_u8D0RGB8_RGB9() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB8_RGB9L(ParValue) (pst_u16D0RGB8_RGB9() -> u16L = (ParValue))
N#define u16GetD0RGB8_RGB9L() (pst_u16D0RGB8_RGB9() -> u16L)
N#define vSetD0RGB8_RGB9H(ParValue) (pst_u16D0RGB8_RGB9() -> u16H = (ParValue))
N#define u16GetD0RGB8_RGB9H() (pst_u16D0RGB8_RGB9() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB8_RGB9(ParValue)  (*pu32D0RGB8_RGB9() = (ParValue))
N#define u32GetD0RGB8_RGB9()  (*pu32D0RGB8_RGB9() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB10_RGB11                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020DC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB10_RGB11_REG__       0xC03020DCU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB10_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB10_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB10_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB10_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB10_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB10_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB11_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB11_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB11_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB11_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB11_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB11_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB10_RGB11_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB10_RGB11_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB10_RGB11_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB10_RGB11_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB10_RGB11()     ((volatile D0RGB10_RGB11_bit_view_st *)\
N(D0RGB10_RGB11_REG__ ))
X#define pst_bitD0RGB10_RGB11()     ((volatile D0RGB10_RGB11_bit_view_st *)(D0RGB10_RGB11_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB10_RGB11()     ((volatile D0RGB10_RGB11_byte_view_st *)\
N(D0RGB10_RGB11_REG__ ))
X#define pst_u8D0RGB10_RGB11()     ((volatile D0RGB10_RGB11_byte_view_st *)(D0RGB10_RGB11_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB10_RGB11()     ((volatile D0RGB10_RGB11_halfword_view_st *)\
N(D0RGB10_RGB11_REG__ ))
X#define pst_u16D0RGB10_RGB11()     ((volatile D0RGB10_RGB11_halfword_view_st *)(D0RGB10_RGB11_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB10_RGB11()     ((volatile u32D0RGB10_RGB11_word_view *)\
N(D0RGB10_RGB11_REG__ ))
X#define pu32D0RGB10_RGB11()     ((volatile u32D0RGB10_RGB11_word_view *)(D0RGB10_RGB11_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB10_RGB11_D0RGB10_SEL() (pst_bitD0RGB10_RGB11() -> D0RGB10_SEL)
N#define vSetD0RGB10_RGB11_D0RGB10_SEL(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_SEL=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB10_PU() (pst_bitD0RGB10_RGB11() -> D0RGB10_PU)
N#define vSetD0RGB10_RGB11_D0RGB10_PU(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_PU=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB10_PD() (pst_bitD0RGB10_RGB11() -> D0RGB10_PD)
N#define vSetD0RGB10_RGB11_D0RGB10_PD(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_PD=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB10_SMT() (pst_bitD0RGB10_RGB11() -> D0RGB10_SMT)
N#define vSetD0RGB10_RGB11_D0RGB10_SMT(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_SMT=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB10_IMP() (pst_bitD0RGB10_RGB11() -> D0RGB10_IMP)
N#define vSetD0RGB10_RGB11_D0RGB10_IMP(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_IMP=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB10_LATCHN() (pst_bitD0RGB10_RGB11() -> D0RGB10_LATCHN)
N#define vSetD0RGB10_RGB11_D0RGB10_LATCHN(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB10_LATCHN=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_SEL() (pst_bitD0RGB10_RGB11() -> D0RGB11_SEL)
N#define vSetD0RGB10_RGB11_D0RGB11_SEL(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_SEL=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_PU() (pst_bitD0RGB10_RGB11() -> D0RGB11_PU)
N#define vSetD0RGB10_RGB11_D0RGB11_PU(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_PU=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_PD() (pst_bitD0RGB10_RGB11() -> D0RGB11_PD)
N#define vSetD0RGB10_RGB11_D0RGB11_PD(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_PD=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_SMT() (pst_bitD0RGB10_RGB11() -> D0RGB11_SMT)
N#define vSetD0RGB10_RGB11_D0RGB11_SMT(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_SMT=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_IMP() (pst_bitD0RGB10_RGB11() -> D0RGB11_IMP)
N#define vSetD0RGB10_RGB11_D0RGB11_IMP(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_IMP=(ParValue))
N#define biGetD0RGB10_RGB11_D0RGB11_LATCHN() (pst_bitD0RGB10_RGB11() -> D0RGB11_LATCHN)
N#define vSetD0RGB10_RGB11_D0RGB11_LATCHN(ParValue)  (pst_bitD0RGB10_RGB11() -> D0RGB11_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB10_RGB11LL(ParValue) (pst_u8D0RGB10_RGB11() -> u8LL = (ParValue))
N#define u8GetD0RGB10_RGB11LL() (pst_u8D0RGB10_RGB11() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB10_RGB11LH(ParValue) (pst_u8D0RGB10_RGB11() -> u8LH = (ParValue))
N#define u8GetD0RGB10_RGB11LH() (pst_u8D0RGB10_RGB11() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB10_RGB11HL(ParValue) (pst_u8D0RGB10_RGB11() -> u8HL = (ParValue))
N#define u8GetD0RGB10_RGB11HL() (pst_u8D0RGB10_RGB11() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB10_RGB11HH(ParValue) (pst_u8D0RGB10_RGB11() -> u8HH = (ParValue))
N#define u8GetD0RGB10_RGB11HH() (pst_u8D0RGB10_RGB11() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB10_RGB11L(ParValue) (pst_u16D0RGB10_RGB11() -> u16L = (ParValue))
N#define u16GetD0RGB10_RGB11L() (pst_u16D0RGB10_RGB11() -> u16L)
N#define vSetD0RGB10_RGB11H(ParValue) (pst_u16D0RGB10_RGB11() -> u16H = (ParValue))
N#define u16GetD0RGB10_RGB11H() (pst_u16D0RGB10_RGB11() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB10_RGB11(ParValue)  (*pu32D0RGB10_RGB11() = (ParValue))
N#define u32GetD0RGB10_RGB11()  (*pu32D0RGB10_RGB11() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB12_RGB13                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020E0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB12_RGB13_REG__       0xC03020E0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB12_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB12_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB12_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB12_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB12_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB12_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB13_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB13_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB13_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB13_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB13_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB13_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB12_RGB13_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB12_RGB13_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB12_RGB13_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB12_RGB13_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB12_RGB13()     ((volatile D0RGB12_RGB13_bit_view_st *)\
N(D0RGB12_RGB13_REG__ ))
X#define pst_bitD0RGB12_RGB13()     ((volatile D0RGB12_RGB13_bit_view_st *)(D0RGB12_RGB13_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB12_RGB13()     ((volatile D0RGB12_RGB13_byte_view_st *)\
N(D0RGB12_RGB13_REG__ ))
X#define pst_u8D0RGB12_RGB13()     ((volatile D0RGB12_RGB13_byte_view_st *)(D0RGB12_RGB13_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB12_RGB13()     ((volatile D0RGB12_RGB13_halfword_view_st *)\
N(D0RGB12_RGB13_REG__ ))
X#define pst_u16D0RGB12_RGB13()     ((volatile D0RGB12_RGB13_halfword_view_st *)(D0RGB12_RGB13_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB12_RGB13()     ((volatile u32D0RGB12_RGB13_word_view *)\
N(D0RGB12_RGB13_REG__ ))
X#define pu32D0RGB12_RGB13()     ((volatile u32D0RGB12_RGB13_word_view *)(D0RGB12_RGB13_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB12_RGB13_D0RGB12_SEL() (pst_bitD0RGB12_RGB13() -> D0RGB12_SEL)
N#define vSetD0RGB12_RGB13_D0RGB12_SEL(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_SEL=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB12_PU() (pst_bitD0RGB12_RGB13() -> D0RGB12_PU)
N#define vSetD0RGB12_RGB13_D0RGB12_PU(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_PU=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB12_PD() (pst_bitD0RGB12_RGB13() -> D0RGB12_PD)
N#define vSetD0RGB12_RGB13_D0RGB12_PD(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_PD=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB12_SMT() (pst_bitD0RGB12_RGB13() -> D0RGB12_SMT)
N#define vSetD0RGB12_RGB13_D0RGB12_SMT(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_SMT=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB12_IMP() (pst_bitD0RGB12_RGB13() -> D0RGB12_IMP)
N#define vSetD0RGB12_RGB13_D0RGB12_IMP(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_IMP=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB12_LATCHN() (pst_bitD0RGB12_RGB13() -> D0RGB12_LATCHN)
N#define vSetD0RGB12_RGB13_D0RGB12_LATCHN(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB12_LATCHN=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_SEL() (pst_bitD0RGB12_RGB13() -> D0RGB13_SEL)
N#define vSetD0RGB12_RGB13_D0RGB13_SEL(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_SEL=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_PU() (pst_bitD0RGB12_RGB13() -> D0RGB13_PU)
N#define vSetD0RGB12_RGB13_D0RGB13_PU(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_PU=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_PD() (pst_bitD0RGB12_RGB13() -> D0RGB13_PD)
N#define vSetD0RGB12_RGB13_D0RGB13_PD(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_PD=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_SMT() (pst_bitD0RGB12_RGB13() -> D0RGB13_SMT)
N#define vSetD0RGB12_RGB13_D0RGB13_SMT(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_SMT=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_IMP() (pst_bitD0RGB12_RGB13() -> D0RGB13_IMP)
N#define vSetD0RGB12_RGB13_D0RGB13_IMP(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_IMP=(ParValue))
N#define biGetD0RGB12_RGB13_D0RGB13_LATCHN() (pst_bitD0RGB12_RGB13() -> D0RGB13_LATCHN)
N#define vSetD0RGB12_RGB13_D0RGB13_LATCHN(ParValue)  (pst_bitD0RGB12_RGB13() -> D0RGB13_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB12_RGB13LL(ParValue) (pst_u8D0RGB12_RGB13() -> u8LL = (ParValue))
N#define u8GetD0RGB12_RGB13LL() (pst_u8D0RGB12_RGB13() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB12_RGB13LH(ParValue) (pst_u8D0RGB12_RGB13() -> u8LH = (ParValue))
N#define u8GetD0RGB12_RGB13LH() (pst_u8D0RGB12_RGB13() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB12_RGB13HL(ParValue) (pst_u8D0RGB12_RGB13() -> u8HL = (ParValue))
N#define u8GetD0RGB12_RGB13HL() (pst_u8D0RGB12_RGB13() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB12_RGB13HH(ParValue) (pst_u8D0RGB12_RGB13() -> u8HH = (ParValue))
N#define u8GetD0RGB12_RGB13HH() (pst_u8D0RGB12_RGB13() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB12_RGB13L(ParValue) (pst_u16D0RGB12_RGB13() -> u16L = (ParValue))
N#define u16GetD0RGB12_RGB13L() (pst_u16D0RGB12_RGB13() -> u16L)
N#define vSetD0RGB12_RGB13H(ParValue) (pst_u16D0RGB12_RGB13() -> u16H = (ParValue))
N#define u16GetD0RGB12_RGB13H() (pst_u16D0RGB12_RGB13() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB12_RGB13(ParValue)  (*pu32D0RGB12_RGB13() = (ParValue))
N#define u32GetD0RGB12_RGB13()  (*pu32D0RGB12_RGB13() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB14_RGB15                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020E4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB14_RGB15_REG__       0xC03020E4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB14_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB14_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB14_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB14_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB14_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB14_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB15_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB15_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB15_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB15_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB15_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB15_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB14_RGB15_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB14_RGB15_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB14_RGB15_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB14_RGB15_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB14_RGB15()     ((volatile D0RGB14_RGB15_bit_view_st *)\
N(D0RGB14_RGB15_REG__ ))
X#define pst_bitD0RGB14_RGB15()     ((volatile D0RGB14_RGB15_bit_view_st *)(D0RGB14_RGB15_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB14_RGB15()     ((volatile D0RGB14_RGB15_byte_view_st *)\
N(D0RGB14_RGB15_REG__ ))
X#define pst_u8D0RGB14_RGB15()     ((volatile D0RGB14_RGB15_byte_view_st *)(D0RGB14_RGB15_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB14_RGB15()     ((volatile D0RGB14_RGB15_halfword_view_st *)\
N(D0RGB14_RGB15_REG__ ))
X#define pst_u16D0RGB14_RGB15()     ((volatile D0RGB14_RGB15_halfword_view_st *)(D0RGB14_RGB15_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB14_RGB15()     ((volatile u32D0RGB14_RGB15_word_view *)\
N(D0RGB14_RGB15_REG__ ))
X#define pu32D0RGB14_RGB15()     ((volatile u32D0RGB14_RGB15_word_view *)(D0RGB14_RGB15_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB14_RGB15_D0RGB14_SEL() (pst_bitD0RGB14_RGB15() -> D0RGB14_SEL)
N#define vSetD0RGB14_RGB15_D0RGB14_SEL(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_SEL=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB14_PU() (pst_bitD0RGB14_RGB15() -> D0RGB14_PU)
N#define vSetD0RGB14_RGB15_D0RGB14_PU(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_PU=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB14_PD() (pst_bitD0RGB14_RGB15() -> D0RGB14_PD)
N#define vSetD0RGB14_RGB15_D0RGB14_PD(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_PD=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB14_SMT() (pst_bitD0RGB14_RGB15() -> D0RGB14_SMT)
N#define vSetD0RGB14_RGB15_D0RGB14_SMT(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_SMT=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB14_IMP() (pst_bitD0RGB14_RGB15() -> D0RGB14_IMP)
N#define vSetD0RGB14_RGB15_D0RGB14_IMP(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_IMP=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB14_LATCHN() (pst_bitD0RGB14_RGB15() -> D0RGB14_LATCHN)
N#define vSetD0RGB14_RGB15_D0RGB14_LATCHN(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB14_LATCHN=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_SEL() (pst_bitD0RGB14_RGB15() -> D0RGB15_SEL)
N#define vSetD0RGB14_RGB15_D0RGB15_SEL(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_SEL=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_PU() (pst_bitD0RGB14_RGB15() -> D0RGB15_PU)
N#define vSetD0RGB14_RGB15_D0RGB15_PU(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_PU=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_PD() (pst_bitD0RGB14_RGB15() -> D0RGB15_PD)
N#define vSetD0RGB14_RGB15_D0RGB15_PD(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_PD=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_SMT() (pst_bitD0RGB14_RGB15() -> D0RGB15_SMT)
N#define vSetD0RGB14_RGB15_D0RGB15_SMT(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_SMT=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_IMP() (pst_bitD0RGB14_RGB15() -> D0RGB15_IMP)
N#define vSetD0RGB14_RGB15_D0RGB15_IMP(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_IMP=(ParValue))
N#define biGetD0RGB14_RGB15_D0RGB15_LATCHN() (pst_bitD0RGB14_RGB15() -> D0RGB15_LATCHN)
N#define vSetD0RGB14_RGB15_D0RGB15_LATCHN(ParValue)  (pst_bitD0RGB14_RGB15() -> D0RGB15_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB14_RGB15LL(ParValue) (pst_u8D0RGB14_RGB15() -> u8LL = (ParValue))
N#define u8GetD0RGB14_RGB15LL() (pst_u8D0RGB14_RGB15() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB14_RGB15LH(ParValue) (pst_u8D0RGB14_RGB15() -> u8LH = (ParValue))
N#define u8GetD0RGB14_RGB15LH() (pst_u8D0RGB14_RGB15() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB14_RGB15HL(ParValue) (pst_u8D0RGB14_RGB15() -> u8HL = (ParValue))
N#define u8GetD0RGB14_RGB15HL() (pst_u8D0RGB14_RGB15() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB14_RGB15HH(ParValue) (pst_u8D0RGB14_RGB15() -> u8HH = (ParValue))
N#define u8GetD0RGB14_RGB15HH() (pst_u8D0RGB14_RGB15() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB14_RGB15L(ParValue) (pst_u16D0RGB14_RGB15() -> u16L = (ParValue))
N#define u16GetD0RGB14_RGB15L() (pst_u16D0RGB14_RGB15() -> u16L)
N#define vSetD0RGB14_RGB15H(ParValue) (pst_u16D0RGB14_RGB15() -> u16H = (ParValue))
N#define u16GetD0RGB14_RGB15H() (pst_u16D0RGB14_RGB15() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB14_RGB15(ParValue)  (*pu32D0RGB14_RGB15() = (ParValue))
N#define u32GetD0RGB14_RGB15()  (*pu32D0RGB14_RGB15() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB16_RGB17                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020E8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB16_RGB17_REG__       0xC03020E8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB16_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB16_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB16_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB16_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB16_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB16_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB17_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB17_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB17_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB17_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB17_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB17_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB16_RGB17_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB16_RGB17_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB16_RGB17_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB16_RGB17_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB16_RGB17()     ((volatile D0RGB16_RGB17_bit_view_st *)\
N(D0RGB16_RGB17_REG__ ))
X#define pst_bitD0RGB16_RGB17()     ((volatile D0RGB16_RGB17_bit_view_st *)(D0RGB16_RGB17_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB16_RGB17()     ((volatile D0RGB16_RGB17_byte_view_st *)\
N(D0RGB16_RGB17_REG__ ))
X#define pst_u8D0RGB16_RGB17()     ((volatile D0RGB16_RGB17_byte_view_st *)(D0RGB16_RGB17_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB16_RGB17()     ((volatile D0RGB16_RGB17_halfword_view_st *)\
N(D0RGB16_RGB17_REG__ ))
X#define pst_u16D0RGB16_RGB17()     ((volatile D0RGB16_RGB17_halfword_view_st *)(D0RGB16_RGB17_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB16_RGB17()     ((volatile u32D0RGB16_RGB17_word_view *)\
N(D0RGB16_RGB17_REG__ ))
X#define pu32D0RGB16_RGB17()     ((volatile u32D0RGB16_RGB17_word_view *)(D0RGB16_RGB17_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB16_RGB17_D0RGB16_SEL() (pst_bitD0RGB16_RGB17() -> D0RGB16_SEL)
N#define vSetD0RGB16_RGB17_D0RGB16_SEL(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_SEL=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB16_PU() (pst_bitD0RGB16_RGB17() -> D0RGB16_PU)
N#define vSetD0RGB16_RGB17_D0RGB16_PU(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_PU=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB16_PD() (pst_bitD0RGB16_RGB17() -> D0RGB16_PD)
N#define vSetD0RGB16_RGB17_D0RGB16_PD(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_PD=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB16_SMT() (pst_bitD0RGB16_RGB17() -> D0RGB16_SMT)
N#define vSetD0RGB16_RGB17_D0RGB16_SMT(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_SMT=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB16_IMP() (pst_bitD0RGB16_RGB17() -> D0RGB16_IMP)
N#define vSetD0RGB16_RGB17_D0RGB16_IMP(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_IMP=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB16_LATCHN() (pst_bitD0RGB16_RGB17() -> D0RGB16_LATCHN)
N#define vSetD0RGB16_RGB17_D0RGB16_LATCHN(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB16_LATCHN=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_SEL() (pst_bitD0RGB16_RGB17() -> D0RGB17_SEL)
N#define vSetD0RGB16_RGB17_D0RGB17_SEL(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_SEL=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_PU() (pst_bitD0RGB16_RGB17() -> D0RGB17_PU)
N#define vSetD0RGB16_RGB17_D0RGB17_PU(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_PU=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_PD() (pst_bitD0RGB16_RGB17() -> D0RGB17_PD)
N#define vSetD0RGB16_RGB17_D0RGB17_PD(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_PD=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_SMT() (pst_bitD0RGB16_RGB17() -> D0RGB17_SMT)
N#define vSetD0RGB16_RGB17_D0RGB17_SMT(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_SMT=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_IMP() (pst_bitD0RGB16_RGB17() -> D0RGB17_IMP)
N#define vSetD0RGB16_RGB17_D0RGB17_IMP(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_IMP=(ParValue))
N#define biGetD0RGB16_RGB17_D0RGB17_LATCHN() (pst_bitD0RGB16_RGB17() -> D0RGB17_LATCHN)
N#define vSetD0RGB16_RGB17_D0RGB17_LATCHN(ParValue)  (pst_bitD0RGB16_RGB17() -> D0RGB17_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB16_RGB17LL(ParValue) (pst_u8D0RGB16_RGB17() -> u8LL = (ParValue))
N#define u8GetD0RGB16_RGB17LL() (pst_u8D0RGB16_RGB17() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB16_RGB17LH(ParValue) (pst_u8D0RGB16_RGB17() -> u8LH = (ParValue))
N#define u8GetD0RGB16_RGB17LH() (pst_u8D0RGB16_RGB17() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB16_RGB17HL(ParValue) (pst_u8D0RGB16_RGB17() -> u8HL = (ParValue))
N#define u8GetD0RGB16_RGB17HL() (pst_u8D0RGB16_RGB17() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB16_RGB17HH(ParValue) (pst_u8D0RGB16_RGB17() -> u8HH = (ParValue))
N#define u8GetD0RGB16_RGB17HH() (pst_u8D0RGB16_RGB17() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB16_RGB17L(ParValue) (pst_u16D0RGB16_RGB17() -> u16L = (ParValue))
N#define u16GetD0RGB16_RGB17L() (pst_u16D0RGB16_RGB17() -> u16L)
N#define vSetD0RGB16_RGB17H(ParValue) (pst_u16D0RGB16_RGB17() -> u16H = (ParValue))
N#define u16GetD0RGB16_RGB17H() (pst_u16D0RGB16_RGB17() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB16_RGB17(ParValue)  (*pu32D0RGB16_RGB17() = (ParValue))
N#define u32GetD0RGB16_RGB17()  (*pu32D0RGB16_RGB17() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB18_RGB19                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020EC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB18_RGB19_REG__       0xC03020ECU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB18_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB18_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB18_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB18_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB18_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB18_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB19_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB19_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB19_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB19_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB19_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB19_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB18_RGB19_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB18_RGB19_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB18_RGB19_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB18_RGB19_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB18_RGB19()     ((volatile D0RGB18_RGB19_bit_view_st *)\
N(D0RGB18_RGB19_REG__ ))
X#define pst_bitD0RGB18_RGB19()     ((volatile D0RGB18_RGB19_bit_view_st *)(D0RGB18_RGB19_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB18_RGB19()     ((volatile D0RGB18_RGB19_byte_view_st *)\
N(D0RGB18_RGB19_REG__ ))
X#define pst_u8D0RGB18_RGB19()     ((volatile D0RGB18_RGB19_byte_view_st *)(D0RGB18_RGB19_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB18_RGB19()     ((volatile D0RGB18_RGB19_halfword_view_st *)\
N(D0RGB18_RGB19_REG__ ))
X#define pst_u16D0RGB18_RGB19()     ((volatile D0RGB18_RGB19_halfword_view_st *)(D0RGB18_RGB19_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB18_RGB19()     ((volatile u32D0RGB18_RGB19_word_view *)\
N(D0RGB18_RGB19_REG__ ))
X#define pu32D0RGB18_RGB19()     ((volatile u32D0RGB18_RGB19_word_view *)(D0RGB18_RGB19_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB18_RGB19_D0RGB18_SEL() (pst_bitD0RGB18_RGB19() -> D0RGB18_SEL)
N#define vSetD0RGB18_RGB19_D0RGB18_SEL(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_SEL=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB18_PU() (pst_bitD0RGB18_RGB19() -> D0RGB18_PU)
N#define vSetD0RGB18_RGB19_D0RGB18_PU(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_PU=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB18_PD() (pst_bitD0RGB18_RGB19() -> D0RGB18_PD)
N#define vSetD0RGB18_RGB19_D0RGB18_PD(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_PD=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB18_SMT() (pst_bitD0RGB18_RGB19() -> D0RGB18_SMT)
N#define vSetD0RGB18_RGB19_D0RGB18_SMT(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_SMT=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB18_IMP() (pst_bitD0RGB18_RGB19() -> D0RGB18_IMP)
N#define vSetD0RGB18_RGB19_D0RGB18_IMP(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_IMP=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB18_LATCHN() (pst_bitD0RGB18_RGB19() -> D0RGB18_LATCHN)
N#define vSetD0RGB18_RGB19_D0RGB18_LATCHN(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB18_LATCHN=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_SEL() (pst_bitD0RGB18_RGB19() -> D0RGB19_SEL)
N#define vSetD0RGB18_RGB19_D0RGB19_SEL(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_SEL=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_PU() (pst_bitD0RGB18_RGB19() -> D0RGB19_PU)
N#define vSetD0RGB18_RGB19_D0RGB19_PU(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_PU=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_PD() (pst_bitD0RGB18_RGB19() -> D0RGB19_PD)
N#define vSetD0RGB18_RGB19_D0RGB19_PD(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_PD=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_SMT() (pst_bitD0RGB18_RGB19() -> D0RGB19_SMT)
N#define vSetD0RGB18_RGB19_D0RGB19_SMT(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_SMT=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_IMP() (pst_bitD0RGB18_RGB19() -> D0RGB19_IMP)
N#define vSetD0RGB18_RGB19_D0RGB19_IMP(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_IMP=(ParValue))
N#define biGetD0RGB18_RGB19_D0RGB19_LATCHN() (pst_bitD0RGB18_RGB19() -> D0RGB19_LATCHN)
N#define vSetD0RGB18_RGB19_D0RGB19_LATCHN(ParValue)  (pst_bitD0RGB18_RGB19() -> D0RGB19_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB18_RGB19LL(ParValue) (pst_u8D0RGB18_RGB19() -> u8LL = (ParValue))
N#define u8GetD0RGB18_RGB19LL() (pst_u8D0RGB18_RGB19() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB18_RGB19LH(ParValue) (pst_u8D0RGB18_RGB19() -> u8LH = (ParValue))
N#define u8GetD0RGB18_RGB19LH() (pst_u8D0RGB18_RGB19() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB18_RGB19HL(ParValue) (pst_u8D0RGB18_RGB19() -> u8HL = (ParValue))
N#define u8GetD0RGB18_RGB19HL() (pst_u8D0RGB18_RGB19() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB18_RGB19HH(ParValue) (pst_u8D0RGB18_RGB19() -> u8HH = (ParValue))
N#define u8GetD0RGB18_RGB19HH() (pst_u8D0RGB18_RGB19() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB18_RGB19L(ParValue) (pst_u16D0RGB18_RGB19() -> u16L = (ParValue))
N#define u16GetD0RGB18_RGB19L() (pst_u16D0RGB18_RGB19() -> u16L)
N#define vSetD0RGB18_RGB19H(ParValue) (pst_u16D0RGB18_RGB19() -> u16H = (ParValue))
N#define u16GetD0RGB18_RGB19H() (pst_u16D0RGB18_RGB19() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB18_RGB19(ParValue)  (*pu32D0RGB18_RGB19() = (ParValue))
N#define u32GetD0RGB18_RGB19()  (*pu32D0RGB18_RGB19() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB20_RGB21                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020F0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB20_RGB21_REG__       0xC03020F0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB20_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB20_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB20_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB20_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB20_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB20_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB21_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB21_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB21_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB21_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB21_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB21_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB20_RGB21_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB20_RGB21_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB20_RGB21_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB20_RGB21_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB20_RGB21()     ((volatile D0RGB20_RGB21_bit_view_st *)\
N(D0RGB20_RGB21_REG__ ))
X#define pst_bitD0RGB20_RGB21()     ((volatile D0RGB20_RGB21_bit_view_st *)(D0RGB20_RGB21_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB20_RGB21()     ((volatile D0RGB20_RGB21_byte_view_st *)\
N(D0RGB20_RGB21_REG__ ))
X#define pst_u8D0RGB20_RGB21()     ((volatile D0RGB20_RGB21_byte_view_st *)(D0RGB20_RGB21_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB20_RGB21()     ((volatile D0RGB20_RGB21_halfword_view_st *)\
N(D0RGB20_RGB21_REG__ ))
X#define pst_u16D0RGB20_RGB21()     ((volatile D0RGB20_RGB21_halfword_view_st *)(D0RGB20_RGB21_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB20_RGB21()     ((volatile u32D0RGB20_RGB21_word_view *)\
N(D0RGB20_RGB21_REG__ ))
X#define pu32D0RGB20_RGB21()     ((volatile u32D0RGB20_RGB21_word_view *)(D0RGB20_RGB21_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB20_RGB21_D0RGB20_SEL() (pst_bitD0RGB20_RGB21() -> D0RGB20_SEL)
N#define vSetD0RGB20_RGB21_D0RGB20_SEL(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_SEL=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB20_PU() (pst_bitD0RGB20_RGB21() -> D0RGB20_PU)
N#define vSetD0RGB20_RGB21_D0RGB20_PU(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_PU=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB20_PD() (pst_bitD0RGB20_RGB21() -> D0RGB20_PD)
N#define vSetD0RGB20_RGB21_D0RGB20_PD(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_PD=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB20_SMT() (pst_bitD0RGB20_RGB21() -> D0RGB20_SMT)
N#define vSetD0RGB20_RGB21_D0RGB20_SMT(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_SMT=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB20_IMP() (pst_bitD0RGB20_RGB21() -> D0RGB20_IMP)
N#define vSetD0RGB20_RGB21_D0RGB20_IMP(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_IMP=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB20_LATCHN() (pst_bitD0RGB20_RGB21() -> D0RGB20_LATCHN)
N#define vSetD0RGB20_RGB21_D0RGB20_LATCHN(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB20_LATCHN=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_SEL() (pst_bitD0RGB20_RGB21() -> D0RGB21_SEL)
N#define vSetD0RGB20_RGB21_D0RGB21_SEL(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_SEL=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_PU() (pst_bitD0RGB20_RGB21() -> D0RGB21_PU)
N#define vSetD0RGB20_RGB21_D0RGB21_PU(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_PU=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_PD() (pst_bitD0RGB20_RGB21() -> D0RGB21_PD)
N#define vSetD0RGB20_RGB21_D0RGB21_PD(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_PD=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_SMT() (pst_bitD0RGB20_RGB21() -> D0RGB21_SMT)
N#define vSetD0RGB20_RGB21_D0RGB21_SMT(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_SMT=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_IMP() (pst_bitD0RGB20_RGB21() -> D0RGB21_IMP)
N#define vSetD0RGB20_RGB21_D0RGB21_IMP(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_IMP=(ParValue))
N#define biGetD0RGB20_RGB21_D0RGB21_LATCHN() (pst_bitD0RGB20_RGB21() -> D0RGB21_LATCHN)
N#define vSetD0RGB20_RGB21_D0RGB21_LATCHN(ParValue)  (pst_bitD0RGB20_RGB21() -> D0RGB21_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB20_RGB21LL(ParValue) (pst_u8D0RGB20_RGB21() -> u8LL = (ParValue))
N#define u8GetD0RGB20_RGB21LL() (pst_u8D0RGB20_RGB21() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB20_RGB21LH(ParValue) (pst_u8D0RGB20_RGB21() -> u8LH = (ParValue))
N#define u8GetD0RGB20_RGB21LH() (pst_u8D0RGB20_RGB21() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB20_RGB21HL(ParValue) (pst_u8D0RGB20_RGB21() -> u8HL = (ParValue))
N#define u8GetD0RGB20_RGB21HL() (pst_u8D0RGB20_RGB21() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB20_RGB21HH(ParValue) (pst_u8D0RGB20_RGB21() -> u8HH = (ParValue))
N#define u8GetD0RGB20_RGB21HH() (pst_u8D0RGB20_RGB21() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB20_RGB21L(ParValue) (pst_u16D0RGB20_RGB21() -> u16L = (ParValue))
N#define u16GetD0RGB20_RGB21L() (pst_u16D0RGB20_RGB21() -> u16L)
N#define vSetD0RGB20_RGB21H(ParValue) (pst_u16D0RGB20_RGB21() -> u16H = (ParValue))
N#define u16GetD0RGB20_RGB21H() (pst_u16D0RGB20_RGB21() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB20_RGB21(ParValue)  (*pu32D0RGB20_RGB21() = (ParValue))
N#define u32GetD0RGB20_RGB21()  (*pu32D0RGB20_RGB21() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D0RGB22_RGB23                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03020F4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D0RGB22_RGB23_REG__       0xC03020F4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D0RGB22_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D0RGB22_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D0RGB22_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D0RGB22_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D0RGB22_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D0RGB22_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D0RGB23_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D0RGB23_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D0RGB23_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D0RGB23_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D0RGB23_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D0RGB23_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D0RGB22_RGB23_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D0RGB22_RGB23_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D0RGB22_RGB23_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D0RGB22_RGB23_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD0RGB22_RGB23()     ((volatile D0RGB22_RGB23_bit_view_st *)\
N(D0RGB22_RGB23_REG__ ))
X#define pst_bitD0RGB22_RGB23()     ((volatile D0RGB22_RGB23_bit_view_st *)(D0RGB22_RGB23_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D0RGB22_RGB23()     ((volatile D0RGB22_RGB23_byte_view_st *)\
N(D0RGB22_RGB23_REG__ ))
X#define pst_u8D0RGB22_RGB23()     ((volatile D0RGB22_RGB23_byte_view_st *)(D0RGB22_RGB23_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D0RGB22_RGB23()     ((volatile D0RGB22_RGB23_halfword_view_st *)\
N(D0RGB22_RGB23_REG__ ))
X#define pst_u16D0RGB22_RGB23()     ((volatile D0RGB22_RGB23_halfword_view_st *)(D0RGB22_RGB23_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D0RGB22_RGB23()     ((volatile u32D0RGB22_RGB23_word_view *)\
N(D0RGB22_RGB23_REG__ ))
X#define pu32D0RGB22_RGB23()     ((volatile u32D0RGB22_RGB23_word_view *)(D0RGB22_RGB23_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD0RGB22_RGB23_D0RGB22_SEL() (pst_bitD0RGB22_RGB23() -> D0RGB22_SEL)
N#define vSetD0RGB22_RGB23_D0RGB22_SEL(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_SEL=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB22_PU() (pst_bitD0RGB22_RGB23() -> D0RGB22_PU)
N#define vSetD0RGB22_RGB23_D0RGB22_PU(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_PU=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB22_PD() (pst_bitD0RGB22_RGB23() -> D0RGB22_PD)
N#define vSetD0RGB22_RGB23_D0RGB22_PD(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_PD=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB22_SMT() (pst_bitD0RGB22_RGB23() -> D0RGB22_SMT)
N#define vSetD0RGB22_RGB23_D0RGB22_SMT(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_SMT=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB22_IMP() (pst_bitD0RGB22_RGB23() -> D0RGB22_IMP)
N#define vSetD0RGB22_RGB23_D0RGB22_IMP(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_IMP=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB22_LATCHN() (pst_bitD0RGB22_RGB23() -> D0RGB22_LATCHN)
N#define vSetD0RGB22_RGB23_D0RGB22_LATCHN(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB22_LATCHN=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_SEL() (pst_bitD0RGB22_RGB23() -> D0RGB23_SEL)
N#define vSetD0RGB22_RGB23_D0RGB23_SEL(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_SEL=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_PU() (pst_bitD0RGB22_RGB23() -> D0RGB23_PU)
N#define vSetD0RGB22_RGB23_D0RGB23_PU(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_PU=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_PD() (pst_bitD0RGB22_RGB23() -> D0RGB23_PD)
N#define vSetD0RGB22_RGB23_D0RGB23_PD(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_PD=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_SMT() (pst_bitD0RGB22_RGB23() -> D0RGB23_SMT)
N#define vSetD0RGB22_RGB23_D0RGB23_SMT(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_SMT=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_IMP() (pst_bitD0RGB22_RGB23() -> D0RGB23_IMP)
N#define vSetD0RGB22_RGB23_D0RGB23_IMP(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_IMP=(ParValue))
N#define biGetD0RGB22_RGB23_D0RGB23_LATCHN() (pst_bitD0RGB22_RGB23() -> D0RGB23_LATCHN)
N#define vSetD0RGB22_RGB23_D0RGB23_LATCHN(ParValue)  (pst_bitD0RGB22_RGB23() -> D0RGB23_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD0RGB22_RGB23LL(ParValue) (pst_u8D0RGB22_RGB23() -> u8LL = (ParValue))
N#define u8GetD0RGB22_RGB23LL() (pst_u8D0RGB22_RGB23() -> u8LL)
N/* LH-struct byte access */
N#define vSetD0RGB22_RGB23LH(ParValue) (pst_u8D0RGB22_RGB23() -> u8LH = (ParValue))
N#define u8GetD0RGB22_RGB23LH() (pst_u8D0RGB22_RGB23() -> u8LH)
N/* HL-struct byte access */
N#define vSetD0RGB22_RGB23HL(ParValue) (pst_u8D0RGB22_RGB23() -> u8HL = (ParValue))
N#define u8GetD0RGB22_RGB23HL() (pst_u8D0RGB22_RGB23() -> u8HL)
N/* HH-struct byte access */
N#define vSetD0RGB22_RGB23HH(ParValue) (pst_u8D0RGB22_RGB23() -> u8HH = (ParValue))
N#define u8GetD0RGB22_RGB23HH() (pst_u8D0RGB22_RGB23() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD0RGB22_RGB23L(ParValue) (pst_u16D0RGB22_RGB23() -> u16L = (ParValue))
N#define u16GetD0RGB22_RGB23L() (pst_u16D0RGB22_RGB23() -> u16L)
N#define vSetD0RGB22_RGB23H(ParValue) (pst_u16D0RGB22_RGB23() -> u16H = (ParValue))
N#define u16GetD0RGB22_RGB23H() (pst_u16D0RGB22_RGB23() -> u16H)
N            
N/* Word access */
N#define vSetD0RGB22_RGB23(ParValue)  (*pu32D0RGB22_RGB23() = (ParValue))
N#define u32GetD0RGB22_RGB23()  (*pu32D0RGB22_RGB23() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DOTCLKIN                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302110                             
N*       ACCESS  : 8, 16, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DOTCLKIN_REG__       0xC0302110U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint16_t   DOTCLKIN_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint16_t   	:5; 	 /* 3..7  bit(s) R */
N  uint16_t   DOTCLKIN_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint16_t   DOTCLKIN_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint16_t   DOTCLKIN_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint16_t   DOTCLKIN_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint16_t   DOTCLKIN_LATCHN	:1; 	 /* 13..13  bit(s) R/W */ 
N  uint16_t   	:2; 	 /* 14..31  bit(s) R */                    
N} DOTCLKIN_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8L;       
N  uint8_t u8H;       
N} DOTCLKIN_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef uint16_t u16DOTCLKIN_halfword_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDOTCLKIN()     ((volatile DOTCLKIN_bit_view_st *)\
N(DOTCLKIN_REG__ ))
X#define pst_bitDOTCLKIN()     ((volatile DOTCLKIN_bit_view_st *)(DOTCLKIN_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DOTCLKIN()     ((volatile DOTCLKIN_byte_view_st *)\
N(DOTCLKIN_REG__ ))
X#define pst_u8DOTCLKIN()     ((volatile DOTCLKIN_byte_view_st *)(DOTCLKIN_REG__ ))
N            
N/* Pointer to HALFWORD */
N#define pu16DOTCLKIN()     ((volatile u16DOTCLKIN_halfword_view *)\
N(DOTCLKIN_REG__ ))
X#define pu16DOTCLKIN()     ((volatile u16DOTCLKIN_halfword_view *)(DOTCLKIN_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDOTCLKIN_DOTCLKIN_SEL() (pst_bitDOTCLKIN() -> DOTCLKIN_SEL)
N#define vSetDOTCLKIN_DOTCLKIN_SEL(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_SEL=(ParValue))
N#define biGetDOTCLKIN_DOTCLKIN_PU() (pst_bitDOTCLKIN() -> DOTCLKIN_PU)
N#define vSetDOTCLKIN_DOTCLKIN_PU(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_PU=(ParValue))
N#define biGetDOTCLKIN_DOTCLKIN_PD() (pst_bitDOTCLKIN() -> DOTCLKIN_PD)
N#define vSetDOTCLKIN_DOTCLKIN_PD(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_PD=(ParValue))
N#define biGetDOTCLKIN_DOTCLKIN_SMT() (pst_bitDOTCLKIN() -> DOTCLKIN_SMT)
N#define vSetDOTCLKIN_DOTCLKIN_SMT(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_SMT=(ParValue))
N#define biGetDOTCLKIN_DOTCLKIN_IMP() (pst_bitDOTCLKIN() -> DOTCLKIN_IMP)
N#define vSetDOTCLKIN_DOTCLKIN_IMP(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_IMP=(ParValue))
N#define biGetDOTCLKIN_DOTCLKIN_LATCHN() (pst_bitDOTCLKIN() -> DOTCLKIN_LATCHN)
N#define vSetDOTCLKIN_DOTCLKIN_LATCHN(ParValue)  (pst_bitDOTCLKIN() -> DOTCLKIN_LATCHN=(ParValue))
N            
N/* L-struct byte access */
N#define vSetDOTCLKINL(ParValue) (pst_u8DOTCLKIN() -> u8L = (ParValue))
N#define u8GetDOTCLKINL() (pst_u8DOTCLKIN() -> u8L)
N/* H-struct byte access */
N#define vSetDOTCLKINH(ParValue) (pst_u8DOTCLKIN() -> u8H = (ParValue))
N#define u8GetDOTCLKINH() (pst_u8DOTCLKIN() -> u8H)
N            
N/* Half-word access */ 
N#define vSetDOTCLKIN(ParValue) (*pu16DOTCLKIN()  = (ParValue))
N#define u16GetDOTCLKIN() (*pu16DOTCLKIN() )     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNLGPP0_GPP1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302114                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNLGPP0_GPP1_REG__       0xC0302114U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PNLGPP0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   PNLGPP0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   PNLGPP0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   PNLGPP0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   PNLGPP0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   PNLGPP0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   PNLGPP1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   PNLGPP1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   PNLGPP1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   PNLGPP1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   PNLGPP1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   PNLGPP1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} PNLGPP0_GPP1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNLGPP0_GPP1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNLGPP0_GPP1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNLGPP0_GPP1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_bit_view_st *)\
N(PNLGPP0_GPP1_REG__ ))
X#define pst_bitPNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_bit_view_st *)(PNLGPP0_GPP1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_byte_view_st *)\
N(PNLGPP0_GPP1_REG__ ))
X#define pst_u8PNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_byte_view_st *)(PNLGPP0_GPP1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_halfword_view_st *)\
N(PNLGPP0_GPP1_REG__ ))
X#define pst_u16PNLGPP0_GPP1()     ((volatile PNLGPP0_GPP1_halfword_view_st *)(PNLGPP0_GPP1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNLGPP0_GPP1()     ((volatile u32PNLGPP0_GPP1_word_view *)\
N(PNLGPP0_GPP1_REG__ ))
X#define pu32PNLGPP0_GPP1()     ((volatile u32PNLGPP0_GPP1_word_view *)(PNLGPP0_GPP1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNLGPP0_GPP1_PNLGPP0_SEL() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_SEL)
N#define vSetPNLGPP0_GPP1_PNLGPP0_SEL(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_SEL=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP0_PU() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_PU)
N#define vSetPNLGPP0_GPP1_PNLGPP0_PU(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_PU=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP0_PD() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_PD)
N#define vSetPNLGPP0_GPP1_PNLGPP0_PD(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_PD=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP0_SMT() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_SMT)
N#define vSetPNLGPP0_GPP1_PNLGPP0_SMT(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_SMT=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP0_IMP() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_IMP)
N#define vSetPNLGPP0_GPP1_PNLGPP0_IMP(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_IMP=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP0_LATCHN() (pst_bitPNLGPP0_GPP1() -> PNLGPP0_LATCHN)
N#define vSetPNLGPP0_GPP1_PNLGPP0_LATCHN(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP0_LATCHN=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_SEL() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_SEL)
N#define vSetPNLGPP0_GPP1_PNLGPP1_SEL(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_SEL=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_PU() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_PU)
N#define vSetPNLGPP0_GPP1_PNLGPP1_PU(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_PU=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_PD() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_PD)
N#define vSetPNLGPP0_GPP1_PNLGPP1_PD(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_PD=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_SMT() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_SMT)
N#define vSetPNLGPP0_GPP1_PNLGPP1_SMT(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_SMT=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_IMP() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_IMP)
N#define vSetPNLGPP0_GPP1_PNLGPP1_IMP(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_IMP=(ParValue))
N#define biGetPNLGPP0_GPP1_PNLGPP1_LATCHN() (pst_bitPNLGPP0_GPP1() -> PNLGPP1_LATCHN)
N#define vSetPNLGPP0_GPP1_PNLGPP1_LATCHN(ParValue)  (pst_bitPNLGPP0_GPP1() -> PNLGPP1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNLGPP0_GPP1LL(ParValue) (pst_u8PNLGPP0_GPP1() -> u8LL = (ParValue))
N#define u8GetPNLGPP0_GPP1LL() (pst_u8PNLGPP0_GPP1() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNLGPP0_GPP1LH(ParValue) (pst_u8PNLGPP0_GPP1() -> u8LH = (ParValue))
N#define u8GetPNLGPP0_GPP1LH() (pst_u8PNLGPP0_GPP1() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNLGPP0_GPP1HL(ParValue) (pst_u8PNLGPP0_GPP1() -> u8HL = (ParValue))
N#define u8GetPNLGPP0_GPP1HL() (pst_u8PNLGPP0_GPP1() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNLGPP0_GPP1HH(ParValue) (pst_u8PNLGPP0_GPP1() -> u8HH = (ParValue))
N#define u8GetPNLGPP0_GPP1HH() (pst_u8PNLGPP0_GPP1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNLGPP0_GPP1L(ParValue) (pst_u16PNLGPP0_GPP1() -> u16L = (ParValue))
N#define u16GetPNLGPP0_GPP1L() (pst_u16PNLGPP0_GPP1() -> u16L)
N#define vSetPNLGPP0_GPP1H(ParValue) (pst_u16PNLGPP0_GPP1() -> u16H = (ParValue))
N#define u16GetPNLGPP0_GPP1H() (pst_u16PNLGPP0_GPP1() -> u16H)
N            
N/* Word access */
N#define vSetPNLGPP0_GPP1(ParValue)  (*pu32PNLGPP0_GPP1() = (ParValue))
N#define u32GetPNLGPP0_GPP1()  (*pu32PNLGPP0_GPP1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNLGPP2_GPP3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302118                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNLGPP2_GPP3_REG__       0xC0302118U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PNLGPP2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   PNLGPP2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   PNLGPP2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   PNLGPP2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   PNLGPP2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   PNLGPP2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   PNLGPP3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   PNLGPP3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   PNLGPP3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   PNLGPP3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   PNLGPP3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   PNLGPP3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} PNLGPP2_GPP3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNLGPP2_GPP3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNLGPP2_GPP3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNLGPP2_GPP3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_bit_view_st *)\
N(PNLGPP2_GPP3_REG__ ))
X#define pst_bitPNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_bit_view_st *)(PNLGPP2_GPP3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_byte_view_st *)\
N(PNLGPP2_GPP3_REG__ ))
X#define pst_u8PNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_byte_view_st *)(PNLGPP2_GPP3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_halfword_view_st *)\
N(PNLGPP2_GPP3_REG__ ))
X#define pst_u16PNLGPP2_GPP3()     ((volatile PNLGPP2_GPP3_halfword_view_st *)(PNLGPP2_GPP3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNLGPP2_GPP3()     ((volatile u32PNLGPP2_GPP3_word_view *)\
N(PNLGPP2_GPP3_REG__ ))
X#define pu32PNLGPP2_GPP3()     ((volatile u32PNLGPP2_GPP3_word_view *)(PNLGPP2_GPP3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNLGPP2_GPP3_PNLGPP2_SEL() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_SEL)
N#define vSetPNLGPP2_GPP3_PNLGPP2_SEL(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_SEL=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP2_PU() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_PU)
N#define vSetPNLGPP2_GPP3_PNLGPP2_PU(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_PU=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP2_PD() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_PD)
N#define vSetPNLGPP2_GPP3_PNLGPP2_PD(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_PD=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP2_SMT() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_SMT)
N#define vSetPNLGPP2_GPP3_PNLGPP2_SMT(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_SMT=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP2_IMP() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_IMP)
N#define vSetPNLGPP2_GPP3_PNLGPP2_IMP(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_IMP=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP2_LATCHN() (pst_bitPNLGPP2_GPP3() -> PNLGPP2_LATCHN)
N#define vSetPNLGPP2_GPP3_PNLGPP2_LATCHN(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP2_LATCHN=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_SEL() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_SEL)
N#define vSetPNLGPP2_GPP3_PNLGPP3_SEL(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_SEL=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_PU() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_PU)
N#define vSetPNLGPP2_GPP3_PNLGPP3_PU(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_PU=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_PD() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_PD)
N#define vSetPNLGPP2_GPP3_PNLGPP3_PD(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_PD=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_SMT() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_SMT)
N#define vSetPNLGPP2_GPP3_PNLGPP3_SMT(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_SMT=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_IMP() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_IMP)
N#define vSetPNLGPP2_GPP3_PNLGPP3_IMP(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_IMP=(ParValue))
N#define biGetPNLGPP2_GPP3_PNLGPP3_LATCHN() (pst_bitPNLGPP2_GPP3() -> PNLGPP3_LATCHN)
N#define vSetPNLGPP2_GPP3_PNLGPP3_LATCHN(ParValue)  (pst_bitPNLGPP2_GPP3() -> PNLGPP3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNLGPP2_GPP3LL(ParValue) (pst_u8PNLGPP2_GPP3() -> u8LL = (ParValue))
N#define u8GetPNLGPP2_GPP3LL() (pst_u8PNLGPP2_GPP3() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNLGPP2_GPP3LH(ParValue) (pst_u8PNLGPP2_GPP3() -> u8LH = (ParValue))
N#define u8GetPNLGPP2_GPP3LH() (pst_u8PNLGPP2_GPP3() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNLGPP2_GPP3HL(ParValue) (pst_u8PNLGPP2_GPP3() -> u8HL = (ParValue))
N#define u8GetPNLGPP2_GPP3HL() (pst_u8PNLGPP2_GPP3() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNLGPP2_GPP3HH(ParValue) (pst_u8PNLGPP2_GPP3() -> u8HH = (ParValue))
N#define u8GetPNLGPP2_GPP3HH() (pst_u8PNLGPP2_GPP3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNLGPP2_GPP3L(ParValue) (pst_u16PNLGPP2_GPP3() -> u16L = (ParValue))
N#define u16GetPNLGPP2_GPP3L() (pst_u16PNLGPP2_GPP3() -> u16L)
N#define vSetPNLGPP2_GPP3H(ParValue) (pst_u16PNLGPP2_GPP3() -> u16H = (ParValue))
N#define u16GetPNLGPP2_GPP3H() (pst_u16PNLGPP2_GPP3() -> u16H)
N            
N/* Word access */
N#define vSetPNLGPP2_GPP3(ParValue)  (*pu32PNLGPP2_GPP3() = (ParValue))
N#define u32GetPNLGPP2_GPP3()  (*pu32PNLGPP2_GPP3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNLGPP4_GPP5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030211C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNLGPP4_GPP5_REG__       0xC030211CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PNLGPP4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   PNLGPP4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   PNLGPP4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   PNLGPP4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   PNLGPP4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   PNLGPP4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   PNLGPP5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   PNLGPP5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   PNLGPP5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   PNLGPP5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   PNLGPP5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   PNLGPP5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} PNLGPP4_GPP5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNLGPP4_GPP5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNLGPP4_GPP5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNLGPP4_GPP5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_bit_view_st *)\
N(PNLGPP4_GPP5_REG__ ))
X#define pst_bitPNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_bit_view_st *)(PNLGPP4_GPP5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_byte_view_st *)\
N(PNLGPP4_GPP5_REG__ ))
X#define pst_u8PNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_byte_view_st *)(PNLGPP4_GPP5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_halfword_view_st *)\
N(PNLGPP4_GPP5_REG__ ))
X#define pst_u16PNLGPP4_GPP5()     ((volatile PNLGPP4_GPP5_halfword_view_st *)(PNLGPP4_GPP5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNLGPP4_GPP5()     ((volatile u32PNLGPP4_GPP5_word_view *)\
N(PNLGPP4_GPP5_REG__ ))
X#define pu32PNLGPP4_GPP5()     ((volatile u32PNLGPP4_GPP5_word_view *)(PNLGPP4_GPP5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNLGPP4_GPP5_PNLGPP4_SEL() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_SEL)
N#define vSetPNLGPP4_GPP5_PNLGPP4_SEL(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_SEL=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP4_PU() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_PU)
N#define vSetPNLGPP4_GPP5_PNLGPP4_PU(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_PU=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP4_PD() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_PD)
N#define vSetPNLGPP4_GPP5_PNLGPP4_PD(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_PD=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP4_SMT() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_SMT)
N#define vSetPNLGPP4_GPP5_PNLGPP4_SMT(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_SMT=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP4_IMP() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_IMP)
N#define vSetPNLGPP4_GPP5_PNLGPP4_IMP(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_IMP=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP4_LATCHN() (pst_bitPNLGPP4_GPP5() -> PNLGPP4_LATCHN)
N#define vSetPNLGPP4_GPP5_PNLGPP4_LATCHN(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP4_LATCHN=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_SEL() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_SEL)
N#define vSetPNLGPP4_GPP5_PNLGPP5_SEL(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_SEL=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_PU() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_PU)
N#define vSetPNLGPP4_GPP5_PNLGPP5_PU(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_PU=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_PD() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_PD)
N#define vSetPNLGPP4_GPP5_PNLGPP5_PD(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_PD=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_SMT() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_SMT)
N#define vSetPNLGPP4_GPP5_PNLGPP5_SMT(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_SMT=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_IMP() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_IMP)
N#define vSetPNLGPP4_GPP5_PNLGPP5_IMP(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_IMP=(ParValue))
N#define biGetPNLGPP4_GPP5_PNLGPP5_LATCHN() (pst_bitPNLGPP4_GPP5() -> PNLGPP5_LATCHN)
N#define vSetPNLGPP4_GPP5_PNLGPP5_LATCHN(ParValue)  (pst_bitPNLGPP4_GPP5() -> PNLGPP5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNLGPP4_GPP5LL(ParValue) (pst_u8PNLGPP4_GPP5() -> u8LL = (ParValue))
N#define u8GetPNLGPP4_GPP5LL() (pst_u8PNLGPP4_GPP5() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNLGPP4_GPP5LH(ParValue) (pst_u8PNLGPP4_GPP5() -> u8LH = (ParValue))
N#define u8GetPNLGPP4_GPP5LH() (pst_u8PNLGPP4_GPP5() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNLGPP4_GPP5HL(ParValue) (pst_u8PNLGPP4_GPP5() -> u8HL = (ParValue))
N#define u8GetPNLGPP4_GPP5HL() (pst_u8PNLGPP4_GPP5() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNLGPP4_GPP5HH(ParValue) (pst_u8PNLGPP4_GPP5() -> u8HH = (ParValue))
N#define u8GetPNLGPP4_GPP5HH() (pst_u8PNLGPP4_GPP5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNLGPP4_GPP5L(ParValue) (pst_u16PNLGPP4_GPP5() -> u16L = (ParValue))
N#define u16GetPNLGPP4_GPP5L() (pst_u16PNLGPP4_GPP5() -> u16L)
N#define vSetPNLGPP4_GPP5H(ParValue) (pst_u16PNLGPP4_GPP5() -> u16H = (ParValue))
N#define u16GetPNLGPP4_GPP5H() (pst_u16PNLGPP4_GPP5() -> u16H)
N            
N/* Word access */
N#define vSetPNLGPP4_GPP5(ParValue)  (*pu32PNLGPP4_GPP5() = (ParValue))
N#define u32GetPNLGPP4_GPP5()  (*pu32PNLGPP4_GPP5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNLGPP6_GPP7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302120                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNLGPP6_GPP7_REG__       0xC0302120U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PNLGPP6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   PNLGPP6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   PNLGPP6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   PNLGPP6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   PNLGPP6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   PNLGPP6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   PNLGPP7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   PNLGPP7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   PNLGPP7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   PNLGPP7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   PNLGPP7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   PNLGPP7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} PNLGPP6_GPP7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNLGPP6_GPP7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNLGPP6_GPP7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNLGPP6_GPP7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_bit_view_st *)\
N(PNLGPP6_GPP7_REG__ ))
X#define pst_bitPNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_bit_view_st *)(PNLGPP6_GPP7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_byte_view_st *)\
N(PNLGPP6_GPP7_REG__ ))
X#define pst_u8PNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_byte_view_st *)(PNLGPP6_GPP7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_halfword_view_st *)\
N(PNLGPP6_GPP7_REG__ ))
X#define pst_u16PNLGPP6_GPP7()     ((volatile PNLGPP6_GPP7_halfword_view_st *)(PNLGPP6_GPP7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNLGPP6_GPP7()     ((volatile u32PNLGPP6_GPP7_word_view *)\
N(PNLGPP6_GPP7_REG__ ))
X#define pu32PNLGPP6_GPP7()     ((volatile u32PNLGPP6_GPP7_word_view *)(PNLGPP6_GPP7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNLGPP6_GPP7_PNLGPP6_SEL() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_SEL)
N#define vSetPNLGPP6_GPP7_PNLGPP6_SEL(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_SEL=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP6_PU() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_PU)
N#define vSetPNLGPP6_GPP7_PNLGPP6_PU(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_PU=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP6_PD() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_PD)
N#define vSetPNLGPP6_GPP7_PNLGPP6_PD(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_PD=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP6_SMT() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_SMT)
N#define vSetPNLGPP6_GPP7_PNLGPP6_SMT(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_SMT=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP6_IMP() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_IMP)
N#define vSetPNLGPP6_GPP7_PNLGPP6_IMP(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_IMP=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP6_LATCHN() (pst_bitPNLGPP6_GPP7() -> PNLGPP6_LATCHN)
N#define vSetPNLGPP6_GPP7_PNLGPP6_LATCHN(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP6_LATCHN=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_SEL() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_SEL)
N#define vSetPNLGPP6_GPP7_PNLGPP7_SEL(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_SEL=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_PU() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_PU)
N#define vSetPNLGPP6_GPP7_PNLGPP7_PU(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_PU=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_PD() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_PD)
N#define vSetPNLGPP6_GPP7_PNLGPP7_PD(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_PD=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_SMT() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_SMT)
N#define vSetPNLGPP6_GPP7_PNLGPP7_SMT(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_SMT=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_IMP() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_IMP)
N#define vSetPNLGPP6_GPP7_PNLGPP7_IMP(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_IMP=(ParValue))
N#define biGetPNLGPP6_GPP7_PNLGPP7_LATCHN() (pst_bitPNLGPP6_GPP7() -> PNLGPP7_LATCHN)
N#define vSetPNLGPP6_GPP7_PNLGPP7_LATCHN(ParValue)  (pst_bitPNLGPP6_GPP7() -> PNLGPP7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNLGPP6_GPP7LL(ParValue) (pst_u8PNLGPP6_GPP7() -> u8LL = (ParValue))
N#define u8GetPNLGPP6_GPP7LL() (pst_u8PNLGPP6_GPP7() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNLGPP6_GPP7LH(ParValue) (pst_u8PNLGPP6_GPP7() -> u8LH = (ParValue))
N#define u8GetPNLGPP6_GPP7LH() (pst_u8PNLGPP6_GPP7() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNLGPP6_GPP7HL(ParValue) (pst_u8PNLGPP6_GPP7() -> u8HL = (ParValue))
N#define u8GetPNLGPP6_GPP7HL() (pst_u8PNLGPP6_GPP7() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNLGPP6_GPP7HH(ParValue) (pst_u8PNLGPP6_GPP7() -> u8HH = (ParValue))
N#define u8GetPNLGPP6_GPP7HH() (pst_u8PNLGPP6_GPP7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNLGPP6_GPP7L(ParValue) (pst_u16PNLGPP6_GPP7() -> u16L = (ParValue))
N#define u16GetPNLGPP6_GPP7L() (pst_u16PNLGPP6_GPP7() -> u16L)
N#define vSetPNLGPP6_GPP7H(ParValue) (pst_u16PNLGPP6_GPP7() -> u16H = (ParValue))
N#define u16GetPNLGPP6_GPP7H() (pst_u16PNLGPP6_GPP7() -> u16H)
N            
N/* Word access */
N#define vSetPNLGPP6_GPP7(ParValue)  (*pu32PNLGPP6_GPP7() = (ParValue))
N#define u32GetPNLGPP6_GPP7()  (*pu32PNLGPP6_GPP7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1HDISP_HSYNC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302130                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1HDISP_HSYNC_REG__       0xC0302130U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1HDISP_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1HDISP_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1HDISP_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1HDISP_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1HDISP_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1HDISP_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1HSYNC_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1HSYNC_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1HSYNC_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1HSYNC_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1HSYNC_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1HSYNC_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1HDISP_HSYNC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1HDISP_HSYNC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1HDISP_HSYNC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1HDISP_HSYNC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_bit_view_st *)\
N(D1HDISP_HSYNC_REG__ ))
X#define pst_bitD1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_bit_view_st *)(D1HDISP_HSYNC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_byte_view_st *)\
N(D1HDISP_HSYNC_REG__ ))
X#define pst_u8D1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_byte_view_st *)(D1HDISP_HSYNC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_halfword_view_st *)\
N(D1HDISP_HSYNC_REG__ ))
X#define pst_u16D1HDISP_HSYNC()     ((volatile D1HDISP_HSYNC_halfword_view_st *)(D1HDISP_HSYNC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1HDISP_HSYNC()     ((volatile u32D1HDISP_HSYNC_word_view *)\
N(D1HDISP_HSYNC_REG__ ))
X#define pu32D1HDISP_HSYNC()     ((volatile u32D1HDISP_HSYNC_word_view *)(D1HDISP_HSYNC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1HDISP_HSYNC_D1HDISP_SEL() (pst_bitD1HDISP_HSYNC() -> D1HDISP_SEL)
N#define vSetD1HDISP_HSYNC_D1HDISP_SEL(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_SEL=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HDISP_PU() (pst_bitD1HDISP_HSYNC() -> D1HDISP_PU)
N#define vSetD1HDISP_HSYNC_D1HDISP_PU(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_PU=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HDISP_PD() (pst_bitD1HDISP_HSYNC() -> D1HDISP_PD)
N#define vSetD1HDISP_HSYNC_D1HDISP_PD(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_PD=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HDISP_SMT() (pst_bitD1HDISP_HSYNC() -> D1HDISP_SMT)
N#define vSetD1HDISP_HSYNC_D1HDISP_SMT(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_SMT=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HDISP_IMP() (pst_bitD1HDISP_HSYNC() -> D1HDISP_IMP)
N#define vSetD1HDISP_HSYNC_D1HDISP_IMP(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_IMP=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HDISP_LATCHN() (pst_bitD1HDISP_HSYNC() -> D1HDISP_LATCHN)
N#define vSetD1HDISP_HSYNC_D1HDISP_LATCHN(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HDISP_LATCHN=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_SEL() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_SEL)
N#define vSetD1HDISP_HSYNC_D1HSYNC_SEL(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_SEL=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_PU() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_PU)
N#define vSetD1HDISP_HSYNC_D1HSYNC_PU(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_PU=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_PD() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_PD)
N#define vSetD1HDISP_HSYNC_D1HSYNC_PD(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_PD=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_SMT() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_SMT)
N#define vSetD1HDISP_HSYNC_D1HSYNC_SMT(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_SMT=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_IMP() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_IMP)
N#define vSetD1HDISP_HSYNC_D1HSYNC_IMP(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_IMP=(ParValue))
N#define biGetD1HDISP_HSYNC_D1HSYNC_LATCHN() (pst_bitD1HDISP_HSYNC() -> D1HSYNC_LATCHN)
N#define vSetD1HDISP_HSYNC_D1HSYNC_LATCHN(ParValue)  (pst_bitD1HDISP_HSYNC() -> D1HSYNC_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1HDISP_HSYNCLL(ParValue) (pst_u8D1HDISP_HSYNC() -> u8LL = (ParValue))
N#define u8GetD1HDISP_HSYNCLL() (pst_u8D1HDISP_HSYNC() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1HDISP_HSYNCLH(ParValue) (pst_u8D1HDISP_HSYNC() -> u8LH = (ParValue))
N#define u8GetD1HDISP_HSYNCLH() (pst_u8D1HDISP_HSYNC() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1HDISP_HSYNCHL(ParValue) (pst_u8D1HDISP_HSYNC() -> u8HL = (ParValue))
N#define u8GetD1HDISP_HSYNCHL() (pst_u8D1HDISP_HSYNC() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1HDISP_HSYNCHH(ParValue) (pst_u8D1HDISP_HSYNC() -> u8HH = (ParValue))
N#define u8GetD1HDISP_HSYNCHH() (pst_u8D1HDISP_HSYNC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1HDISP_HSYNCL(ParValue) (pst_u16D1HDISP_HSYNC() -> u16L = (ParValue))
N#define u16GetD1HDISP_HSYNCL() (pst_u16D1HDISP_HSYNC() -> u16L)
N#define vSetD1HDISP_HSYNCH(ParValue) (pst_u16D1HDISP_HSYNC() -> u16H = (ParValue))
N#define u16GetD1HDISP_HSYNCH() (pst_u16D1HDISP_HSYNC() -> u16H)
N            
N/* Word access */
N#define vSetD1HDISP_HSYNC(ParValue)  (*pu32D1HDISP_HSYNC() = (ParValue))
N#define u32GetD1HDISP_HSYNC()  (*pu32D1HDISP_HSYNC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1VSYNC_DOTCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302134                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1VSYNC_DOTCLK_REG__       0xC0302134U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1VSYNC_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1VSYNC_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1VSYNC_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1VSYNC_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1VSYNC_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1VSYNC_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1DOTCLK_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1DOTCLK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1DOTCLK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1DOTCLK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1DOTCLK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1DOTCLK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1VSYNC_DOTCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1VSYNC_DOTCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1VSYNC_DOTCLK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1VSYNC_DOTCLK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_bit_view_st *)\
N(D1VSYNC_DOTCLK_REG__ ))
X#define pst_bitD1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_bit_view_st *)(D1VSYNC_DOTCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_byte_view_st *)\
N(D1VSYNC_DOTCLK_REG__ ))
X#define pst_u8D1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_byte_view_st *)(D1VSYNC_DOTCLK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_halfword_view_st *)\
N(D1VSYNC_DOTCLK_REG__ ))
X#define pst_u16D1VSYNC_DOTCLK()     ((volatile D1VSYNC_DOTCLK_halfword_view_st *)(D1VSYNC_DOTCLK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1VSYNC_DOTCLK()     ((volatile u32D1VSYNC_DOTCLK_word_view *)\
N(D1VSYNC_DOTCLK_REG__ ))
X#define pu32D1VSYNC_DOTCLK()     ((volatile u32D1VSYNC_DOTCLK_word_view *)(D1VSYNC_DOTCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_SEL() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_SEL)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_SEL(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_SEL=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_PU() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_PU)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_PU(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_PU=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_PD() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_PD)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_PD(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_PD=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_SMT() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_SMT)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_SMT(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_SMT=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_IMP() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_IMP)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_IMP(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_IMP=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1VSYNC_LATCHN() (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_LATCHN)
N#define vSetD1VSYNC_DOTCLK_D1VSYNC_LATCHN(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1VSYNC_LATCHN=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_SEL() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_SEL)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_SEL(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_SEL=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_PU() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_PU)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_PU(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_PU=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_PD() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_PD)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_PD(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_PD=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_SMT() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_SMT)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_SMT(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_SMT=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_IMP() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_IMP)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_IMP(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_IMP=(ParValue))
N#define biGetD1VSYNC_DOTCLK_D1DOTCLK_LATCHN() (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_LATCHN)
N#define vSetD1VSYNC_DOTCLK_D1DOTCLK_LATCHN(ParValue)  (pst_bitD1VSYNC_DOTCLK() -> D1DOTCLK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1VSYNC_DOTCLKLL(ParValue) (pst_u8D1VSYNC_DOTCLK() -> u8LL = (ParValue))
N#define u8GetD1VSYNC_DOTCLKLL() (pst_u8D1VSYNC_DOTCLK() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1VSYNC_DOTCLKLH(ParValue) (pst_u8D1VSYNC_DOTCLK() -> u8LH = (ParValue))
N#define u8GetD1VSYNC_DOTCLKLH() (pst_u8D1VSYNC_DOTCLK() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1VSYNC_DOTCLKHL(ParValue) (pst_u8D1VSYNC_DOTCLK() -> u8HL = (ParValue))
N#define u8GetD1VSYNC_DOTCLKHL() (pst_u8D1VSYNC_DOTCLK() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1VSYNC_DOTCLKHH(ParValue) (pst_u8D1VSYNC_DOTCLK() -> u8HH = (ParValue))
N#define u8GetD1VSYNC_DOTCLKHH() (pst_u8D1VSYNC_DOTCLK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1VSYNC_DOTCLKL(ParValue) (pst_u16D1VSYNC_DOTCLK() -> u16L = (ParValue))
N#define u16GetD1VSYNC_DOTCLKL() (pst_u16D1VSYNC_DOTCLK() -> u16L)
N#define vSetD1VSYNC_DOTCLKH(ParValue) (pst_u16D1VSYNC_DOTCLK() -> u16H = (ParValue))
N#define u16GetD1VSYNC_DOTCLKH() (pst_u16D1VSYNC_DOTCLK() -> u16H)
N            
N/* Word access */
N#define vSetD1VSYNC_DOTCLK(ParValue)  (*pu32D1VSYNC_DOTCLK() = (ParValue))
N#define u32GetD1VSYNC_DOTCLK()  (*pu32D1VSYNC_DOTCLK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB0_RGB1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302138                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB0_RGB1_REG__       0xC0302138U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB0_RGB1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB0_RGB1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB0_RGB1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB0_RGB1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB0_RGB1()     ((volatile D1RGB0_RGB1_bit_view_st *)\
N(D1RGB0_RGB1_REG__ ))
X#define pst_bitD1RGB0_RGB1()     ((volatile D1RGB0_RGB1_bit_view_st *)(D1RGB0_RGB1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB0_RGB1()     ((volatile D1RGB0_RGB1_byte_view_st *)\
N(D1RGB0_RGB1_REG__ ))
X#define pst_u8D1RGB0_RGB1()     ((volatile D1RGB0_RGB1_byte_view_st *)(D1RGB0_RGB1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB0_RGB1()     ((volatile D1RGB0_RGB1_halfword_view_st *)\
N(D1RGB0_RGB1_REG__ ))
X#define pst_u16D1RGB0_RGB1()     ((volatile D1RGB0_RGB1_halfword_view_st *)(D1RGB0_RGB1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB0_RGB1()     ((volatile u32D1RGB0_RGB1_word_view *)\
N(D1RGB0_RGB1_REG__ ))
X#define pu32D1RGB0_RGB1()     ((volatile u32D1RGB0_RGB1_word_view *)(D1RGB0_RGB1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB0_RGB1_D1RGB0_SEL() (pst_bitD1RGB0_RGB1() -> D1RGB0_SEL)
N#define vSetD1RGB0_RGB1_D1RGB0_SEL(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_SEL=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB0_PU() (pst_bitD1RGB0_RGB1() -> D1RGB0_PU)
N#define vSetD1RGB0_RGB1_D1RGB0_PU(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_PU=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB0_PD() (pst_bitD1RGB0_RGB1() -> D1RGB0_PD)
N#define vSetD1RGB0_RGB1_D1RGB0_PD(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_PD=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB0_SMT() (pst_bitD1RGB0_RGB1() -> D1RGB0_SMT)
N#define vSetD1RGB0_RGB1_D1RGB0_SMT(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_SMT=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB0_IMP() (pst_bitD1RGB0_RGB1() -> D1RGB0_IMP)
N#define vSetD1RGB0_RGB1_D1RGB0_IMP(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_IMP=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB0_LATCHN() (pst_bitD1RGB0_RGB1() -> D1RGB0_LATCHN)
N#define vSetD1RGB0_RGB1_D1RGB0_LATCHN(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB0_LATCHN=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_SEL() (pst_bitD1RGB0_RGB1() -> D1RGB1_SEL)
N#define vSetD1RGB0_RGB1_D1RGB1_SEL(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_SEL=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_PU() (pst_bitD1RGB0_RGB1() -> D1RGB1_PU)
N#define vSetD1RGB0_RGB1_D1RGB1_PU(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_PU=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_PD() (pst_bitD1RGB0_RGB1() -> D1RGB1_PD)
N#define vSetD1RGB0_RGB1_D1RGB1_PD(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_PD=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_SMT() (pst_bitD1RGB0_RGB1() -> D1RGB1_SMT)
N#define vSetD1RGB0_RGB1_D1RGB1_SMT(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_SMT=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_IMP() (pst_bitD1RGB0_RGB1() -> D1RGB1_IMP)
N#define vSetD1RGB0_RGB1_D1RGB1_IMP(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_IMP=(ParValue))
N#define biGetD1RGB0_RGB1_D1RGB1_LATCHN() (pst_bitD1RGB0_RGB1() -> D1RGB1_LATCHN)
N#define vSetD1RGB0_RGB1_D1RGB1_LATCHN(ParValue)  (pst_bitD1RGB0_RGB1() -> D1RGB1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB0_RGB1LL(ParValue) (pst_u8D1RGB0_RGB1() -> u8LL = (ParValue))
N#define u8GetD1RGB0_RGB1LL() (pst_u8D1RGB0_RGB1() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB0_RGB1LH(ParValue) (pst_u8D1RGB0_RGB1() -> u8LH = (ParValue))
N#define u8GetD1RGB0_RGB1LH() (pst_u8D1RGB0_RGB1() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB0_RGB1HL(ParValue) (pst_u8D1RGB0_RGB1() -> u8HL = (ParValue))
N#define u8GetD1RGB0_RGB1HL() (pst_u8D1RGB0_RGB1() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB0_RGB1HH(ParValue) (pst_u8D1RGB0_RGB1() -> u8HH = (ParValue))
N#define u8GetD1RGB0_RGB1HH() (pst_u8D1RGB0_RGB1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB0_RGB1L(ParValue) (pst_u16D1RGB0_RGB1() -> u16L = (ParValue))
N#define u16GetD1RGB0_RGB1L() (pst_u16D1RGB0_RGB1() -> u16L)
N#define vSetD1RGB0_RGB1H(ParValue) (pst_u16D1RGB0_RGB1() -> u16H = (ParValue))
N#define u16GetD1RGB0_RGB1H() (pst_u16D1RGB0_RGB1() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB0_RGB1(ParValue)  (*pu32D1RGB0_RGB1() = (ParValue))
N#define u32GetD1RGB0_RGB1()  (*pu32D1RGB0_RGB1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB2_RGB3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030213C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB2_RGB3_REG__       0xC030213CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB2_RGB3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB2_RGB3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB2_RGB3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB2_RGB3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB2_RGB3()     ((volatile D1RGB2_RGB3_bit_view_st *)\
N(D1RGB2_RGB3_REG__ ))
X#define pst_bitD1RGB2_RGB3()     ((volatile D1RGB2_RGB3_bit_view_st *)(D1RGB2_RGB3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB2_RGB3()     ((volatile D1RGB2_RGB3_byte_view_st *)\
N(D1RGB2_RGB3_REG__ ))
X#define pst_u8D1RGB2_RGB3()     ((volatile D1RGB2_RGB3_byte_view_st *)(D1RGB2_RGB3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB2_RGB3()     ((volatile D1RGB2_RGB3_halfword_view_st *)\
N(D1RGB2_RGB3_REG__ ))
X#define pst_u16D1RGB2_RGB3()     ((volatile D1RGB2_RGB3_halfword_view_st *)(D1RGB2_RGB3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB2_RGB3()     ((volatile u32D1RGB2_RGB3_word_view *)\
N(D1RGB2_RGB3_REG__ ))
X#define pu32D1RGB2_RGB3()     ((volatile u32D1RGB2_RGB3_word_view *)(D1RGB2_RGB3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB2_RGB3_D1RGB2_SEL() (pst_bitD1RGB2_RGB3() -> D1RGB2_SEL)
N#define vSetD1RGB2_RGB3_D1RGB2_SEL(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_SEL=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB2_PU() (pst_bitD1RGB2_RGB3() -> D1RGB2_PU)
N#define vSetD1RGB2_RGB3_D1RGB2_PU(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_PU=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB2_PD() (pst_bitD1RGB2_RGB3() -> D1RGB2_PD)
N#define vSetD1RGB2_RGB3_D1RGB2_PD(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_PD=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB2_SMT() (pst_bitD1RGB2_RGB3() -> D1RGB2_SMT)
N#define vSetD1RGB2_RGB3_D1RGB2_SMT(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_SMT=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB2_IMP() (pst_bitD1RGB2_RGB3() -> D1RGB2_IMP)
N#define vSetD1RGB2_RGB3_D1RGB2_IMP(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_IMP=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB2_LATCHN() (pst_bitD1RGB2_RGB3() -> D1RGB2_LATCHN)
N#define vSetD1RGB2_RGB3_D1RGB2_LATCHN(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB2_LATCHN=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_SEL() (pst_bitD1RGB2_RGB3() -> D1RGB3_SEL)
N#define vSetD1RGB2_RGB3_D1RGB3_SEL(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_SEL=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_PU() (pst_bitD1RGB2_RGB3() -> D1RGB3_PU)
N#define vSetD1RGB2_RGB3_D1RGB3_PU(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_PU=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_PD() (pst_bitD1RGB2_RGB3() -> D1RGB3_PD)
N#define vSetD1RGB2_RGB3_D1RGB3_PD(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_PD=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_SMT() (pst_bitD1RGB2_RGB3() -> D1RGB3_SMT)
N#define vSetD1RGB2_RGB3_D1RGB3_SMT(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_SMT=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_IMP() (pst_bitD1RGB2_RGB3() -> D1RGB3_IMP)
N#define vSetD1RGB2_RGB3_D1RGB3_IMP(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_IMP=(ParValue))
N#define biGetD1RGB2_RGB3_D1RGB3_LATCHN() (pst_bitD1RGB2_RGB3() -> D1RGB3_LATCHN)
N#define vSetD1RGB2_RGB3_D1RGB3_LATCHN(ParValue)  (pst_bitD1RGB2_RGB3() -> D1RGB3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB2_RGB3LL(ParValue) (pst_u8D1RGB2_RGB3() -> u8LL = (ParValue))
N#define u8GetD1RGB2_RGB3LL() (pst_u8D1RGB2_RGB3() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB2_RGB3LH(ParValue) (pst_u8D1RGB2_RGB3() -> u8LH = (ParValue))
N#define u8GetD1RGB2_RGB3LH() (pst_u8D1RGB2_RGB3() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB2_RGB3HL(ParValue) (pst_u8D1RGB2_RGB3() -> u8HL = (ParValue))
N#define u8GetD1RGB2_RGB3HL() (pst_u8D1RGB2_RGB3() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB2_RGB3HH(ParValue) (pst_u8D1RGB2_RGB3() -> u8HH = (ParValue))
N#define u8GetD1RGB2_RGB3HH() (pst_u8D1RGB2_RGB3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB2_RGB3L(ParValue) (pst_u16D1RGB2_RGB3() -> u16L = (ParValue))
N#define u16GetD1RGB2_RGB3L() (pst_u16D1RGB2_RGB3() -> u16L)
N#define vSetD1RGB2_RGB3H(ParValue) (pst_u16D1RGB2_RGB3() -> u16H = (ParValue))
N#define u16GetD1RGB2_RGB3H() (pst_u16D1RGB2_RGB3() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB2_RGB3(ParValue)  (*pu32D1RGB2_RGB3() = (ParValue))
N#define u32GetD1RGB2_RGB3()  (*pu32D1RGB2_RGB3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB4_RGB5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302140                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB4_RGB5_REG__       0xC0302140U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB4_RGB5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB4_RGB5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB4_RGB5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB4_RGB5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB4_RGB5()     ((volatile D1RGB4_RGB5_bit_view_st *)\
N(D1RGB4_RGB5_REG__ ))
X#define pst_bitD1RGB4_RGB5()     ((volatile D1RGB4_RGB5_bit_view_st *)(D1RGB4_RGB5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB4_RGB5()     ((volatile D1RGB4_RGB5_byte_view_st *)\
N(D1RGB4_RGB5_REG__ ))
X#define pst_u8D1RGB4_RGB5()     ((volatile D1RGB4_RGB5_byte_view_st *)(D1RGB4_RGB5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB4_RGB5()     ((volatile D1RGB4_RGB5_halfword_view_st *)\
N(D1RGB4_RGB5_REG__ ))
X#define pst_u16D1RGB4_RGB5()     ((volatile D1RGB4_RGB5_halfword_view_st *)(D1RGB4_RGB5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB4_RGB5()     ((volatile u32D1RGB4_RGB5_word_view *)\
N(D1RGB4_RGB5_REG__ ))
X#define pu32D1RGB4_RGB5()     ((volatile u32D1RGB4_RGB5_word_view *)(D1RGB4_RGB5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB4_RGB5_D1RGB4_SEL() (pst_bitD1RGB4_RGB5() -> D1RGB4_SEL)
N#define vSetD1RGB4_RGB5_D1RGB4_SEL(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_SEL=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB4_PU() (pst_bitD1RGB4_RGB5() -> D1RGB4_PU)
N#define vSetD1RGB4_RGB5_D1RGB4_PU(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_PU=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB4_PD() (pst_bitD1RGB4_RGB5() -> D1RGB4_PD)
N#define vSetD1RGB4_RGB5_D1RGB4_PD(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_PD=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB4_SMT() (pst_bitD1RGB4_RGB5() -> D1RGB4_SMT)
N#define vSetD1RGB4_RGB5_D1RGB4_SMT(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_SMT=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB4_IMP() (pst_bitD1RGB4_RGB5() -> D1RGB4_IMP)
N#define vSetD1RGB4_RGB5_D1RGB4_IMP(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_IMP=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB4_LATCHN() (pst_bitD1RGB4_RGB5() -> D1RGB4_LATCHN)
N#define vSetD1RGB4_RGB5_D1RGB4_LATCHN(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB4_LATCHN=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_SEL() (pst_bitD1RGB4_RGB5() -> D1RGB5_SEL)
N#define vSetD1RGB4_RGB5_D1RGB5_SEL(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_SEL=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_PU() (pst_bitD1RGB4_RGB5() -> D1RGB5_PU)
N#define vSetD1RGB4_RGB5_D1RGB5_PU(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_PU=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_PD() (pst_bitD1RGB4_RGB5() -> D1RGB5_PD)
N#define vSetD1RGB4_RGB5_D1RGB5_PD(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_PD=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_SMT() (pst_bitD1RGB4_RGB5() -> D1RGB5_SMT)
N#define vSetD1RGB4_RGB5_D1RGB5_SMT(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_SMT=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_IMP() (pst_bitD1RGB4_RGB5() -> D1RGB5_IMP)
N#define vSetD1RGB4_RGB5_D1RGB5_IMP(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_IMP=(ParValue))
N#define biGetD1RGB4_RGB5_D1RGB5_LATCHN() (pst_bitD1RGB4_RGB5() -> D1RGB5_LATCHN)
N#define vSetD1RGB4_RGB5_D1RGB5_LATCHN(ParValue)  (pst_bitD1RGB4_RGB5() -> D1RGB5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB4_RGB5LL(ParValue) (pst_u8D1RGB4_RGB5() -> u8LL = (ParValue))
N#define u8GetD1RGB4_RGB5LL() (pst_u8D1RGB4_RGB5() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB4_RGB5LH(ParValue) (pst_u8D1RGB4_RGB5() -> u8LH = (ParValue))
N#define u8GetD1RGB4_RGB5LH() (pst_u8D1RGB4_RGB5() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB4_RGB5HL(ParValue) (pst_u8D1RGB4_RGB5() -> u8HL = (ParValue))
N#define u8GetD1RGB4_RGB5HL() (pst_u8D1RGB4_RGB5() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB4_RGB5HH(ParValue) (pst_u8D1RGB4_RGB5() -> u8HH = (ParValue))
N#define u8GetD1RGB4_RGB5HH() (pst_u8D1RGB4_RGB5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB4_RGB5L(ParValue) (pst_u16D1RGB4_RGB5() -> u16L = (ParValue))
N#define u16GetD1RGB4_RGB5L() (pst_u16D1RGB4_RGB5() -> u16L)
N#define vSetD1RGB4_RGB5H(ParValue) (pst_u16D1RGB4_RGB5() -> u16H = (ParValue))
N#define u16GetD1RGB4_RGB5H() (pst_u16D1RGB4_RGB5() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB4_RGB5(ParValue)  (*pu32D1RGB4_RGB5() = (ParValue))
N#define u32GetD1RGB4_RGB5()  (*pu32D1RGB4_RGB5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB6_RGB7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302144                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB6_RGB7_REG__       0xC0302144U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB6_RGB7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB6_RGB7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB6_RGB7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB6_RGB7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB6_RGB7()     ((volatile D1RGB6_RGB7_bit_view_st *)\
N(D1RGB6_RGB7_REG__ ))
X#define pst_bitD1RGB6_RGB7()     ((volatile D1RGB6_RGB7_bit_view_st *)(D1RGB6_RGB7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB6_RGB7()     ((volatile D1RGB6_RGB7_byte_view_st *)\
N(D1RGB6_RGB7_REG__ ))
X#define pst_u8D1RGB6_RGB7()     ((volatile D1RGB6_RGB7_byte_view_st *)(D1RGB6_RGB7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB6_RGB7()     ((volatile D1RGB6_RGB7_halfword_view_st *)\
N(D1RGB6_RGB7_REG__ ))
X#define pst_u16D1RGB6_RGB7()     ((volatile D1RGB6_RGB7_halfword_view_st *)(D1RGB6_RGB7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB6_RGB7()     ((volatile u32D1RGB6_RGB7_word_view *)\
N(D1RGB6_RGB7_REG__ ))
X#define pu32D1RGB6_RGB7()     ((volatile u32D1RGB6_RGB7_word_view *)(D1RGB6_RGB7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB6_RGB7_D1RGB6_SEL() (pst_bitD1RGB6_RGB7() -> D1RGB6_SEL)
N#define vSetD1RGB6_RGB7_D1RGB6_SEL(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_SEL=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB6_PU() (pst_bitD1RGB6_RGB7() -> D1RGB6_PU)
N#define vSetD1RGB6_RGB7_D1RGB6_PU(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_PU=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB6_PD() (pst_bitD1RGB6_RGB7() -> D1RGB6_PD)
N#define vSetD1RGB6_RGB7_D1RGB6_PD(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_PD=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB6_SMT() (pst_bitD1RGB6_RGB7() -> D1RGB6_SMT)
N#define vSetD1RGB6_RGB7_D1RGB6_SMT(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_SMT=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB6_IMP() (pst_bitD1RGB6_RGB7() -> D1RGB6_IMP)
N#define vSetD1RGB6_RGB7_D1RGB6_IMP(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_IMP=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB6_LATCHN() (pst_bitD1RGB6_RGB7() -> D1RGB6_LATCHN)
N#define vSetD1RGB6_RGB7_D1RGB6_LATCHN(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB6_LATCHN=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_SEL() (pst_bitD1RGB6_RGB7() -> D1RGB7_SEL)
N#define vSetD1RGB6_RGB7_D1RGB7_SEL(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_SEL=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_PU() (pst_bitD1RGB6_RGB7() -> D1RGB7_PU)
N#define vSetD1RGB6_RGB7_D1RGB7_PU(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_PU=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_PD() (pst_bitD1RGB6_RGB7() -> D1RGB7_PD)
N#define vSetD1RGB6_RGB7_D1RGB7_PD(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_PD=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_SMT() (pst_bitD1RGB6_RGB7() -> D1RGB7_SMT)
N#define vSetD1RGB6_RGB7_D1RGB7_SMT(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_SMT=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_IMP() (pst_bitD1RGB6_RGB7() -> D1RGB7_IMP)
N#define vSetD1RGB6_RGB7_D1RGB7_IMP(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_IMP=(ParValue))
N#define biGetD1RGB6_RGB7_D1RGB7_LATCHN() (pst_bitD1RGB6_RGB7() -> D1RGB7_LATCHN)
N#define vSetD1RGB6_RGB7_D1RGB7_LATCHN(ParValue)  (pst_bitD1RGB6_RGB7() -> D1RGB7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB6_RGB7LL(ParValue) (pst_u8D1RGB6_RGB7() -> u8LL = (ParValue))
N#define u8GetD1RGB6_RGB7LL() (pst_u8D1RGB6_RGB7() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB6_RGB7LH(ParValue) (pst_u8D1RGB6_RGB7() -> u8LH = (ParValue))
N#define u8GetD1RGB6_RGB7LH() (pst_u8D1RGB6_RGB7() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB6_RGB7HL(ParValue) (pst_u8D1RGB6_RGB7() -> u8HL = (ParValue))
N#define u8GetD1RGB6_RGB7HL() (pst_u8D1RGB6_RGB7() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB6_RGB7HH(ParValue) (pst_u8D1RGB6_RGB7() -> u8HH = (ParValue))
N#define u8GetD1RGB6_RGB7HH() (pst_u8D1RGB6_RGB7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB6_RGB7L(ParValue) (pst_u16D1RGB6_RGB7() -> u16L = (ParValue))
N#define u16GetD1RGB6_RGB7L() (pst_u16D1RGB6_RGB7() -> u16L)
N#define vSetD1RGB6_RGB7H(ParValue) (pst_u16D1RGB6_RGB7() -> u16H = (ParValue))
N#define u16GetD1RGB6_RGB7H() (pst_u16D1RGB6_RGB7() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB6_RGB7(ParValue)  (*pu32D1RGB6_RGB7() = (ParValue))
N#define u32GetD1RGB6_RGB7()  (*pu32D1RGB6_RGB7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB8_RGB9                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302148                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB8_RGB9_REG__       0xC0302148U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB8_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB8_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB8_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB8_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB8_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB8_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB9_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB9_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB9_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB9_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB9_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB9_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB8_RGB9_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB8_RGB9_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB8_RGB9_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB8_RGB9_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB8_RGB9()     ((volatile D1RGB8_RGB9_bit_view_st *)\
N(D1RGB8_RGB9_REG__ ))
X#define pst_bitD1RGB8_RGB9()     ((volatile D1RGB8_RGB9_bit_view_st *)(D1RGB8_RGB9_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB8_RGB9()     ((volatile D1RGB8_RGB9_byte_view_st *)\
N(D1RGB8_RGB9_REG__ ))
X#define pst_u8D1RGB8_RGB9()     ((volatile D1RGB8_RGB9_byte_view_st *)(D1RGB8_RGB9_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB8_RGB9()     ((volatile D1RGB8_RGB9_halfword_view_st *)\
N(D1RGB8_RGB9_REG__ ))
X#define pst_u16D1RGB8_RGB9()     ((volatile D1RGB8_RGB9_halfword_view_st *)(D1RGB8_RGB9_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB8_RGB9()     ((volatile u32D1RGB8_RGB9_word_view *)\
N(D1RGB8_RGB9_REG__ ))
X#define pu32D1RGB8_RGB9()     ((volatile u32D1RGB8_RGB9_word_view *)(D1RGB8_RGB9_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB8_RGB9_D1RGB8_SEL() (pst_bitD1RGB8_RGB9() -> D1RGB8_SEL)
N#define vSetD1RGB8_RGB9_D1RGB8_SEL(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_SEL=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB8_PU() (pst_bitD1RGB8_RGB9() -> D1RGB8_PU)
N#define vSetD1RGB8_RGB9_D1RGB8_PU(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_PU=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB8_PD() (pst_bitD1RGB8_RGB9() -> D1RGB8_PD)
N#define vSetD1RGB8_RGB9_D1RGB8_PD(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_PD=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB8_SMT() (pst_bitD1RGB8_RGB9() -> D1RGB8_SMT)
N#define vSetD1RGB8_RGB9_D1RGB8_SMT(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_SMT=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB8_IMP() (pst_bitD1RGB8_RGB9() -> D1RGB8_IMP)
N#define vSetD1RGB8_RGB9_D1RGB8_IMP(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_IMP=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB8_LATCHN() (pst_bitD1RGB8_RGB9() -> D1RGB8_LATCHN)
N#define vSetD1RGB8_RGB9_D1RGB8_LATCHN(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB8_LATCHN=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_SEL() (pst_bitD1RGB8_RGB9() -> D1RGB9_SEL)
N#define vSetD1RGB8_RGB9_D1RGB9_SEL(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_SEL=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_PU() (pst_bitD1RGB8_RGB9() -> D1RGB9_PU)
N#define vSetD1RGB8_RGB9_D1RGB9_PU(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_PU=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_PD() (pst_bitD1RGB8_RGB9() -> D1RGB9_PD)
N#define vSetD1RGB8_RGB9_D1RGB9_PD(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_PD=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_SMT() (pst_bitD1RGB8_RGB9() -> D1RGB9_SMT)
N#define vSetD1RGB8_RGB9_D1RGB9_SMT(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_SMT=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_IMP() (pst_bitD1RGB8_RGB9() -> D1RGB9_IMP)
N#define vSetD1RGB8_RGB9_D1RGB9_IMP(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_IMP=(ParValue))
N#define biGetD1RGB8_RGB9_D1RGB9_LATCHN() (pst_bitD1RGB8_RGB9() -> D1RGB9_LATCHN)
N#define vSetD1RGB8_RGB9_D1RGB9_LATCHN(ParValue)  (pst_bitD1RGB8_RGB9() -> D1RGB9_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB8_RGB9LL(ParValue) (pst_u8D1RGB8_RGB9() -> u8LL = (ParValue))
N#define u8GetD1RGB8_RGB9LL() (pst_u8D1RGB8_RGB9() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB8_RGB9LH(ParValue) (pst_u8D1RGB8_RGB9() -> u8LH = (ParValue))
N#define u8GetD1RGB8_RGB9LH() (pst_u8D1RGB8_RGB9() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB8_RGB9HL(ParValue) (pst_u8D1RGB8_RGB9() -> u8HL = (ParValue))
N#define u8GetD1RGB8_RGB9HL() (pst_u8D1RGB8_RGB9() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB8_RGB9HH(ParValue) (pst_u8D1RGB8_RGB9() -> u8HH = (ParValue))
N#define u8GetD1RGB8_RGB9HH() (pst_u8D1RGB8_RGB9() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB8_RGB9L(ParValue) (pst_u16D1RGB8_RGB9() -> u16L = (ParValue))
N#define u16GetD1RGB8_RGB9L() (pst_u16D1RGB8_RGB9() -> u16L)
N#define vSetD1RGB8_RGB9H(ParValue) (pst_u16D1RGB8_RGB9() -> u16H = (ParValue))
N#define u16GetD1RGB8_RGB9H() (pst_u16D1RGB8_RGB9() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB8_RGB9(ParValue)  (*pu32D1RGB8_RGB9() = (ParValue))
N#define u32GetD1RGB8_RGB9()  (*pu32D1RGB8_RGB9() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB10_RGB11                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030214C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB10_RGB11_REG__       0xC030214CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB10_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB10_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB10_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB10_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB10_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB10_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB11_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB11_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB11_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB11_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB11_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB11_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB10_RGB11_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB10_RGB11_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB10_RGB11_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB10_RGB11_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB10_RGB11()     ((volatile D1RGB10_RGB11_bit_view_st *)\
N(D1RGB10_RGB11_REG__ ))
X#define pst_bitD1RGB10_RGB11()     ((volatile D1RGB10_RGB11_bit_view_st *)(D1RGB10_RGB11_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB10_RGB11()     ((volatile D1RGB10_RGB11_byte_view_st *)\
N(D1RGB10_RGB11_REG__ ))
X#define pst_u8D1RGB10_RGB11()     ((volatile D1RGB10_RGB11_byte_view_st *)(D1RGB10_RGB11_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB10_RGB11()     ((volatile D1RGB10_RGB11_halfword_view_st *)\
N(D1RGB10_RGB11_REG__ ))
X#define pst_u16D1RGB10_RGB11()     ((volatile D1RGB10_RGB11_halfword_view_st *)(D1RGB10_RGB11_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB10_RGB11()     ((volatile u32D1RGB10_RGB11_word_view *)\
N(D1RGB10_RGB11_REG__ ))
X#define pu32D1RGB10_RGB11()     ((volatile u32D1RGB10_RGB11_word_view *)(D1RGB10_RGB11_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB10_RGB11_D1RGB10_SEL() (pst_bitD1RGB10_RGB11() -> D1RGB10_SEL)
N#define vSetD1RGB10_RGB11_D1RGB10_SEL(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_SEL=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB10_PU() (pst_bitD1RGB10_RGB11() -> D1RGB10_PU)
N#define vSetD1RGB10_RGB11_D1RGB10_PU(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_PU=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB10_PD() (pst_bitD1RGB10_RGB11() -> D1RGB10_PD)
N#define vSetD1RGB10_RGB11_D1RGB10_PD(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_PD=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB10_SMT() (pst_bitD1RGB10_RGB11() -> D1RGB10_SMT)
N#define vSetD1RGB10_RGB11_D1RGB10_SMT(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_SMT=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB10_IMP() (pst_bitD1RGB10_RGB11() -> D1RGB10_IMP)
N#define vSetD1RGB10_RGB11_D1RGB10_IMP(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_IMP=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB10_LATCHN() (pst_bitD1RGB10_RGB11() -> D1RGB10_LATCHN)
N#define vSetD1RGB10_RGB11_D1RGB10_LATCHN(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB10_LATCHN=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_SEL() (pst_bitD1RGB10_RGB11() -> D1RGB11_SEL)
N#define vSetD1RGB10_RGB11_D1RGB11_SEL(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_SEL=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_PU() (pst_bitD1RGB10_RGB11() -> D1RGB11_PU)
N#define vSetD1RGB10_RGB11_D1RGB11_PU(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_PU=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_PD() (pst_bitD1RGB10_RGB11() -> D1RGB11_PD)
N#define vSetD1RGB10_RGB11_D1RGB11_PD(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_PD=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_SMT() (pst_bitD1RGB10_RGB11() -> D1RGB11_SMT)
N#define vSetD1RGB10_RGB11_D1RGB11_SMT(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_SMT=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_IMP() (pst_bitD1RGB10_RGB11() -> D1RGB11_IMP)
N#define vSetD1RGB10_RGB11_D1RGB11_IMP(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_IMP=(ParValue))
N#define biGetD1RGB10_RGB11_D1RGB11_LATCHN() (pst_bitD1RGB10_RGB11() -> D1RGB11_LATCHN)
N#define vSetD1RGB10_RGB11_D1RGB11_LATCHN(ParValue)  (pst_bitD1RGB10_RGB11() -> D1RGB11_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB10_RGB11LL(ParValue) (pst_u8D1RGB10_RGB11() -> u8LL = (ParValue))
N#define u8GetD1RGB10_RGB11LL() (pst_u8D1RGB10_RGB11() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB10_RGB11LH(ParValue) (pst_u8D1RGB10_RGB11() -> u8LH = (ParValue))
N#define u8GetD1RGB10_RGB11LH() (pst_u8D1RGB10_RGB11() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB10_RGB11HL(ParValue) (pst_u8D1RGB10_RGB11() -> u8HL = (ParValue))
N#define u8GetD1RGB10_RGB11HL() (pst_u8D1RGB10_RGB11() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB10_RGB11HH(ParValue) (pst_u8D1RGB10_RGB11() -> u8HH = (ParValue))
N#define u8GetD1RGB10_RGB11HH() (pst_u8D1RGB10_RGB11() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB10_RGB11L(ParValue) (pst_u16D1RGB10_RGB11() -> u16L = (ParValue))
N#define u16GetD1RGB10_RGB11L() (pst_u16D1RGB10_RGB11() -> u16L)
N#define vSetD1RGB10_RGB11H(ParValue) (pst_u16D1RGB10_RGB11() -> u16H = (ParValue))
N#define u16GetD1RGB10_RGB11H() (pst_u16D1RGB10_RGB11() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB10_RGB11(ParValue)  (*pu32D1RGB10_RGB11() = (ParValue))
N#define u32GetD1RGB10_RGB11()  (*pu32D1RGB10_RGB11() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB12_RGB13                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302150                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB12_RGB13_REG__       0xC0302150U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB12_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB12_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB12_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB12_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB12_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB12_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB13_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB13_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB13_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB13_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB13_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB13_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB12_RGB13_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB12_RGB13_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB12_RGB13_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB12_RGB13_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB12_RGB13()     ((volatile D1RGB12_RGB13_bit_view_st *)\
N(D1RGB12_RGB13_REG__ ))
X#define pst_bitD1RGB12_RGB13()     ((volatile D1RGB12_RGB13_bit_view_st *)(D1RGB12_RGB13_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB12_RGB13()     ((volatile D1RGB12_RGB13_byte_view_st *)\
N(D1RGB12_RGB13_REG__ ))
X#define pst_u8D1RGB12_RGB13()     ((volatile D1RGB12_RGB13_byte_view_st *)(D1RGB12_RGB13_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB12_RGB13()     ((volatile D1RGB12_RGB13_halfword_view_st *)\
N(D1RGB12_RGB13_REG__ ))
X#define pst_u16D1RGB12_RGB13()     ((volatile D1RGB12_RGB13_halfword_view_st *)(D1RGB12_RGB13_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB12_RGB13()     ((volatile u32D1RGB12_RGB13_word_view *)\
N(D1RGB12_RGB13_REG__ ))
X#define pu32D1RGB12_RGB13()     ((volatile u32D1RGB12_RGB13_word_view *)(D1RGB12_RGB13_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB12_RGB13_D1RGB12_SEL() (pst_bitD1RGB12_RGB13() -> D1RGB12_SEL)
N#define vSetD1RGB12_RGB13_D1RGB12_SEL(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_SEL=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB12_PU() (pst_bitD1RGB12_RGB13() -> D1RGB12_PU)
N#define vSetD1RGB12_RGB13_D1RGB12_PU(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_PU=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB12_PD() (pst_bitD1RGB12_RGB13() -> D1RGB12_PD)
N#define vSetD1RGB12_RGB13_D1RGB12_PD(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_PD=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB12_SMT() (pst_bitD1RGB12_RGB13() -> D1RGB12_SMT)
N#define vSetD1RGB12_RGB13_D1RGB12_SMT(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_SMT=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB12_IMP() (pst_bitD1RGB12_RGB13() -> D1RGB12_IMP)
N#define vSetD1RGB12_RGB13_D1RGB12_IMP(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_IMP=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB12_LATCHN() (pst_bitD1RGB12_RGB13() -> D1RGB12_LATCHN)
N#define vSetD1RGB12_RGB13_D1RGB12_LATCHN(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB12_LATCHN=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_SEL() (pst_bitD1RGB12_RGB13() -> D1RGB13_SEL)
N#define vSetD1RGB12_RGB13_D1RGB13_SEL(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_SEL=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_PU() (pst_bitD1RGB12_RGB13() -> D1RGB13_PU)
N#define vSetD1RGB12_RGB13_D1RGB13_PU(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_PU=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_PD() (pst_bitD1RGB12_RGB13() -> D1RGB13_PD)
N#define vSetD1RGB12_RGB13_D1RGB13_PD(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_PD=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_SMT() (pst_bitD1RGB12_RGB13() -> D1RGB13_SMT)
N#define vSetD1RGB12_RGB13_D1RGB13_SMT(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_SMT=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_IMP() (pst_bitD1RGB12_RGB13() -> D1RGB13_IMP)
N#define vSetD1RGB12_RGB13_D1RGB13_IMP(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_IMP=(ParValue))
N#define biGetD1RGB12_RGB13_D1RGB13_LATCHN() (pst_bitD1RGB12_RGB13() -> D1RGB13_LATCHN)
N#define vSetD1RGB12_RGB13_D1RGB13_LATCHN(ParValue)  (pst_bitD1RGB12_RGB13() -> D1RGB13_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB12_RGB13LL(ParValue) (pst_u8D1RGB12_RGB13() -> u8LL = (ParValue))
N#define u8GetD1RGB12_RGB13LL() (pst_u8D1RGB12_RGB13() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB12_RGB13LH(ParValue) (pst_u8D1RGB12_RGB13() -> u8LH = (ParValue))
N#define u8GetD1RGB12_RGB13LH() (pst_u8D1RGB12_RGB13() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB12_RGB13HL(ParValue) (pst_u8D1RGB12_RGB13() -> u8HL = (ParValue))
N#define u8GetD1RGB12_RGB13HL() (pst_u8D1RGB12_RGB13() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB12_RGB13HH(ParValue) (pst_u8D1RGB12_RGB13() -> u8HH = (ParValue))
N#define u8GetD1RGB12_RGB13HH() (pst_u8D1RGB12_RGB13() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB12_RGB13L(ParValue) (pst_u16D1RGB12_RGB13() -> u16L = (ParValue))
N#define u16GetD1RGB12_RGB13L() (pst_u16D1RGB12_RGB13() -> u16L)
N#define vSetD1RGB12_RGB13H(ParValue) (pst_u16D1RGB12_RGB13() -> u16H = (ParValue))
N#define u16GetD1RGB12_RGB13H() (pst_u16D1RGB12_RGB13() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB12_RGB13(ParValue)  (*pu32D1RGB12_RGB13() = (ParValue))
N#define u32GetD1RGB12_RGB13()  (*pu32D1RGB12_RGB13() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB14_RGB15                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302154                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB14_RGB15_REG__       0xC0302154U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB14_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB14_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB14_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB14_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB14_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB14_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB15_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB15_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB15_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB15_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB15_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB15_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB14_RGB15_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB14_RGB15_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB14_RGB15_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB14_RGB15_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB14_RGB15()     ((volatile D1RGB14_RGB15_bit_view_st *)\
N(D1RGB14_RGB15_REG__ ))
X#define pst_bitD1RGB14_RGB15()     ((volatile D1RGB14_RGB15_bit_view_st *)(D1RGB14_RGB15_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB14_RGB15()     ((volatile D1RGB14_RGB15_byte_view_st *)\
N(D1RGB14_RGB15_REG__ ))
X#define pst_u8D1RGB14_RGB15()     ((volatile D1RGB14_RGB15_byte_view_st *)(D1RGB14_RGB15_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB14_RGB15()     ((volatile D1RGB14_RGB15_halfword_view_st *)\
N(D1RGB14_RGB15_REG__ ))
X#define pst_u16D1RGB14_RGB15()     ((volatile D1RGB14_RGB15_halfword_view_st *)(D1RGB14_RGB15_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB14_RGB15()     ((volatile u32D1RGB14_RGB15_word_view *)\
N(D1RGB14_RGB15_REG__ ))
X#define pu32D1RGB14_RGB15()     ((volatile u32D1RGB14_RGB15_word_view *)(D1RGB14_RGB15_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB14_RGB15_D1RGB14_SEL() (pst_bitD1RGB14_RGB15() -> D1RGB14_SEL)
N#define vSetD1RGB14_RGB15_D1RGB14_SEL(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_SEL=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB14_PU() (pst_bitD1RGB14_RGB15() -> D1RGB14_PU)
N#define vSetD1RGB14_RGB15_D1RGB14_PU(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_PU=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB14_PD() (pst_bitD1RGB14_RGB15() -> D1RGB14_PD)
N#define vSetD1RGB14_RGB15_D1RGB14_PD(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_PD=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB14_SMT() (pst_bitD1RGB14_RGB15() -> D1RGB14_SMT)
N#define vSetD1RGB14_RGB15_D1RGB14_SMT(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_SMT=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB14_IMP() (pst_bitD1RGB14_RGB15() -> D1RGB14_IMP)
N#define vSetD1RGB14_RGB15_D1RGB14_IMP(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_IMP=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB14_LATCHN() (pst_bitD1RGB14_RGB15() -> D1RGB14_LATCHN)
N#define vSetD1RGB14_RGB15_D1RGB14_LATCHN(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB14_LATCHN=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_SEL() (pst_bitD1RGB14_RGB15() -> D1RGB15_SEL)
N#define vSetD1RGB14_RGB15_D1RGB15_SEL(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_SEL=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_PU() (pst_bitD1RGB14_RGB15() -> D1RGB15_PU)
N#define vSetD1RGB14_RGB15_D1RGB15_PU(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_PU=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_PD() (pst_bitD1RGB14_RGB15() -> D1RGB15_PD)
N#define vSetD1RGB14_RGB15_D1RGB15_PD(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_PD=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_SMT() (pst_bitD1RGB14_RGB15() -> D1RGB15_SMT)
N#define vSetD1RGB14_RGB15_D1RGB15_SMT(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_SMT=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_IMP() (pst_bitD1RGB14_RGB15() -> D1RGB15_IMP)
N#define vSetD1RGB14_RGB15_D1RGB15_IMP(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_IMP=(ParValue))
N#define biGetD1RGB14_RGB15_D1RGB15_LATCHN() (pst_bitD1RGB14_RGB15() -> D1RGB15_LATCHN)
N#define vSetD1RGB14_RGB15_D1RGB15_LATCHN(ParValue)  (pst_bitD1RGB14_RGB15() -> D1RGB15_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB14_RGB15LL(ParValue) (pst_u8D1RGB14_RGB15() -> u8LL = (ParValue))
N#define u8GetD1RGB14_RGB15LL() (pst_u8D1RGB14_RGB15() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB14_RGB15LH(ParValue) (pst_u8D1RGB14_RGB15() -> u8LH = (ParValue))
N#define u8GetD1RGB14_RGB15LH() (pst_u8D1RGB14_RGB15() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB14_RGB15HL(ParValue) (pst_u8D1RGB14_RGB15() -> u8HL = (ParValue))
N#define u8GetD1RGB14_RGB15HL() (pst_u8D1RGB14_RGB15() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB14_RGB15HH(ParValue) (pst_u8D1RGB14_RGB15() -> u8HH = (ParValue))
N#define u8GetD1RGB14_RGB15HH() (pst_u8D1RGB14_RGB15() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB14_RGB15L(ParValue) (pst_u16D1RGB14_RGB15() -> u16L = (ParValue))
N#define u16GetD1RGB14_RGB15L() (pst_u16D1RGB14_RGB15() -> u16L)
N#define vSetD1RGB14_RGB15H(ParValue) (pst_u16D1RGB14_RGB15() -> u16H = (ParValue))
N#define u16GetD1RGB14_RGB15H() (pst_u16D1RGB14_RGB15() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB14_RGB15(ParValue)  (*pu32D1RGB14_RGB15() = (ParValue))
N#define u32GetD1RGB14_RGB15()  (*pu32D1RGB14_RGB15() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB16_RGB17                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302158                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB16_RGB17_REG__       0xC0302158U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB16_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB16_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB16_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB16_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB16_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB16_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB17_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB17_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB17_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB17_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB17_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB17_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB16_RGB17_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB16_RGB17_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB16_RGB17_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB16_RGB17_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB16_RGB17()     ((volatile D1RGB16_RGB17_bit_view_st *)\
N(D1RGB16_RGB17_REG__ ))
X#define pst_bitD1RGB16_RGB17()     ((volatile D1RGB16_RGB17_bit_view_st *)(D1RGB16_RGB17_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB16_RGB17()     ((volatile D1RGB16_RGB17_byte_view_st *)\
N(D1RGB16_RGB17_REG__ ))
X#define pst_u8D1RGB16_RGB17()     ((volatile D1RGB16_RGB17_byte_view_st *)(D1RGB16_RGB17_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB16_RGB17()     ((volatile D1RGB16_RGB17_halfword_view_st *)\
N(D1RGB16_RGB17_REG__ ))
X#define pst_u16D1RGB16_RGB17()     ((volatile D1RGB16_RGB17_halfword_view_st *)(D1RGB16_RGB17_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB16_RGB17()     ((volatile u32D1RGB16_RGB17_word_view *)\
N(D1RGB16_RGB17_REG__ ))
X#define pu32D1RGB16_RGB17()     ((volatile u32D1RGB16_RGB17_word_view *)(D1RGB16_RGB17_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB16_RGB17_D1RGB16_SEL() (pst_bitD1RGB16_RGB17() -> D1RGB16_SEL)
N#define vSetD1RGB16_RGB17_D1RGB16_SEL(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_SEL=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB16_PU() (pst_bitD1RGB16_RGB17() -> D1RGB16_PU)
N#define vSetD1RGB16_RGB17_D1RGB16_PU(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_PU=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB16_PD() (pst_bitD1RGB16_RGB17() -> D1RGB16_PD)
N#define vSetD1RGB16_RGB17_D1RGB16_PD(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_PD=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB16_SMT() (pst_bitD1RGB16_RGB17() -> D1RGB16_SMT)
N#define vSetD1RGB16_RGB17_D1RGB16_SMT(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_SMT=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB16_IMP() (pst_bitD1RGB16_RGB17() -> D1RGB16_IMP)
N#define vSetD1RGB16_RGB17_D1RGB16_IMP(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_IMP=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB16_LATCHN() (pst_bitD1RGB16_RGB17() -> D1RGB16_LATCHN)
N#define vSetD1RGB16_RGB17_D1RGB16_LATCHN(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB16_LATCHN=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_SEL() (pst_bitD1RGB16_RGB17() -> D1RGB17_SEL)
N#define vSetD1RGB16_RGB17_D1RGB17_SEL(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_SEL=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_PU() (pst_bitD1RGB16_RGB17() -> D1RGB17_PU)
N#define vSetD1RGB16_RGB17_D1RGB17_PU(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_PU=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_PD() (pst_bitD1RGB16_RGB17() -> D1RGB17_PD)
N#define vSetD1RGB16_RGB17_D1RGB17_PD(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_PD=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_SMT() (pst_bitD1RGB16_RGB17() -> D1RGB17_SMT)
N#define vSetD1RGB16_RGB17_D1RGB17_SMT(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_SMT=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_IMP() (pst_bitD1RGB16_RGB17() -> D1RGB17_IMP)
N#define vSetD1RGB16_RGB17_D1RGB17_IMP(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_IMP=(ParValue))
N#define biGetD1RGB16_RGB17_D1RGB17_LATCHN() (pst_bitD1RGB16_RGB17() -> D1RGB17_LATCHN)
N#define vSetD1RGB16_RGB17_D1RGB17_LATCHN(ParValue)  (pst_bitD1RGB16_RGB17() -> D1RGB17_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB16_RGB17LL(ParValue) (pst_u8D1RGB16_RGB17() -> u8LL = (ParValue))
N#define u8GetD1RGB16_RGB17LL() (pst_u8D1RGB16_RGB17() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB16_RGB17LH(ParValue) (pst_u8D1RGB16_RGB17() -> u8LH = (ParValue))
N#define u8GetD1RGB16_RGB17LH() (pst_u8D1RGB16_RGB17() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB16_RGB17HL(ParValue) (pst_u8D1RGB16_RGB17() -> u8HL = (ParValue))
N#define u8GetD1RGB16_RGB17HL() (pst_u8D1RGB16_RGB17() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB16_RGB17HH(ParValue) (pst_u8D1RGB16_RGB17() -> u8HH = (ParValue))
N#define u8GetD1RGB16_RGB17HH() (pst_u8D1RGB16_RGB17() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB16_RGB17L(ParValue) (pst_u16D1RGB16_RGB17() -> u16L = (ParValue))
N#define u16GetD1RGB16_RGB17L() (pst_u16D1RGB16_RGB17() -> u16L)
N#define vSetD1RGB16_RGB17H(ParValue) (pst_u16D1RGB16_RGB17() -> u16H = (ParValue))
N#define u16GetD1RGB16_RGB17H() (pst_u16D1RGB16_RGB17() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB16_RGB17(ParValue)  (*pu32D1RGB16_RGB17() = (ParValue))
N#define u32GetD1RGB16_RGB17()  (*pu32D1RGB16_RGB17() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB18_RGB19                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030215C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB18_RGB19_REG__       0xC030215CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB18_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB18_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB18_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB18_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB18_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB18_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB19_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB19_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB19_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB19_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB19_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB19_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB18_RGB19_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB18_RGB19_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB18_RGB19_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB18_RGB19_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB18_RGB19()     ((volatile D1RGB18_RGB19_bit_view_st *)\
N(D1RGB18_RGB19_REG__ ))
X#define pst_bitD1RGB18_RGB19()     ((volatile D1RGB18_RGB19_bit_view_st *)(D1RGB18_RGB19_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB18_RGB19()     ((volatile D1RGB18_RGB19_byte_view_st *)\
N(D1RGB18_RGB19_REG__ ))
X#define pst_u8D1RGB18_RGB19()     ((volatile D1RGB18_RGB19_byte_view_st *)(D1RGB18_RGB19_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB18_RGB19()     ((volatile D1RGB18_RGB19_halfword_view_st *)\
N(D1RGB18_RGB19_REG__ ))
X#define pst_u16D1RGB18_RGB19()     ((volatile D1RGB18_RGB19_halfword_view_st *)(D1RGB18_RGB19_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB18_RGB19()     ((volatile u32D1RGB18_RGB19_word_view *)\
N(D1RGB18_RGB19_REG__ ))
X#define pu32D1RGB18_RGB19()     ((volatile u32D1RGB18_RGB19_word_view *)(D1RGB18_RGB19_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB18_RGB19_D1RGB18_SEL() (pst_bitD1RGB18_RGB19() -> D1RGB18_SEL)
N#define vSetD1RGB18_RGB19_D1RGB18_SEL(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_SEL=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB18_PU() (pst_bitD1RGB18_RGB19() -> D1RGB18_PU)
N#define vSetD1RGB18_RGB19_D1RGB18_PU(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_PU=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB18_PD() (pst_bitD1RGB18_RGB19() -> D1RGB18_PD)
N#define vSetD1RGB18_RGB19_D1RGB18_PD(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_PD=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB18_SMT() (pst_bitD1RGB18_RGB19() -> D1RGB18_SMT)
N#define vSetD1RGB18_RGB19_D1RGB18_SMT(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_SMT=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB18_IMP() (pst_bitD1RGB18_RGB19() -> D1RGB18_IMP)
N#define vSetD1RGB18_RGB19_D1RGB18_IMP(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_IMP=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB18_LATCHN() (pst_bitD1RGB18_RGB19() -> D1RGB18_LATCHN)
N#define vSetD1RGB18_RGB19_D1RGB18_LATCHN(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB18_LATCHN=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_SEL() (pst_bitD1RGB18_RGB19() -> D1RGB19_SEL)
N#define vSetD1RGB18_RGB19_D1RGB19_SEL(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_SEL=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_PU() (pst_bitD1RGB18_RGB19() -> D1RGB19_PU)
N#define vSetD1RGB18_RGB19_D1RGB19_PU(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_PU=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_PD() (pst_bitD1RGB18_RGB19() -> D1RGB19_PD)
N#define vSetD1RGB18_RGB19_D1RGB19_PD(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_PD=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_SMT() (pst_bitD1RGB18_RGB19() -> D1RGB19_SMT)
N#define vSetD1RGB18_RGB19_D1RGB19_SMT(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_SMT=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_IMP() (pst_bitD1RGB18_RGB19() -> D1RGB19_IMP)
N#define vSetD1RGB18_RGB19_D1RGB19_IMP(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_IMP=(ParValue))
N#define biGetD1RGB18_RGB19_D1RGB19_LATCHN() (pst_bitD1RGB18_RGB19() -> D1RGB19_LATCHN)
N#define vSetD1RGB18_RGB19_D1RGB19_LATCHN(ParValue)  (pst_bitD1RGB18_RGB19() -> D1RGB19_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB18_RGB19LL(ParValue) (pst_u8D1RGB18_RGB19() -> u8LL = (ParValue))
N#define u8GetD1RGB18_RGB19LL() (pst_u8D1RGB18_RGB19() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB18_RGB19LH(ParValue) (pst_u8D1RGB18_RGB19() -> u8LH = (ParValue))
N#define u8GetD1RGB18_RGB19LH() (pst_u8D1RGB18_RGB19() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB18_RGB19HL(ParValue) (pst_u8D1RGB18_RGB19() -> u8HL = (ParValue))
N#define u8GetD1RGB18_RGB19HL() (pst_u8D1RGB18_RGB19() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB18_RGB19HH(ParValue) (pst_u8D1RGB18_RGB19() -> u8HH = (ParValue))
N#define u8GetD1RGB18_RGB19HH() (pst_u8D1RGB18_RGB19() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB18_RGB19L(ParValue) (pst_u16D1RGB18_RGB19() -> u16L = (ParValue))
N#define u16GetD1RGB18_RGB19L() (pst_u16D1RGB18_RGB19() -> u16L)
N#define vSetD1RGB18_RGB19H(ParValue) (pst_u16D1RGB18_RGB19() -> u16H = (ParValue))
N#define u16GetD1RGB18_RGB19H() (pst_u16D1RGB18_RGB19() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB18_RGB19(ParValue)  (*pu32D1RGB18_RGB19() = (ParValue))
N#define u32GetD1RGB18_RGB19()  (*pu32D1RGB18_RGB19() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB20_RGB21                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302160                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB20_RGB21_REG__       0xC0302160U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB20_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB20_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB20_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB20_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB20_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB20_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB21_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB21_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB21_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB21_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB21_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB21_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB20_RGB21_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB20_RGB21_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB20_RGB21_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB20_RGB21_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB20_RGB21()     ((volatile D1RGB20_RGB21_bit_view_st *)\
N(D1RGB20_RGB21_REG__ ))
X#define pst_bitD1RGB20_RGB21()     ((volatile D1RGB20_RGB21_bit_view_st *)(D1RGB20_RGB21_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB20_RGB21()     ((volatile D1RGB20_RGB21_byte_view_st *)\
N(D1RGB20_RGB21_REG__ ))
X#define pst_u8D1RGB20_RGB21()     ((volatile D1RGB20_RGB21_byte_view_st *)(D1RGB20_RGB21_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB20_RGB21()     ((volatile D1RGB20_RGB21_halfword_view_st *)\
N(D1RGB20_RGB21_REG__ ))
X#define pst_u16D1RGB20_RGB21()     ((volatile D1RGB20_RGB21_halfword_view_st *)(D1RGB20_RGB21_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB20_RGB21()     ((volatile u32D1RGB20_RGB21_word_view *)\
N(D1RGB20_RGB21_REG__ ))
X#define pu32D1RGB20_RGB21()     ((volatile u32D1RGB20_RGB21_word_view *)(D1RGB20_RGB21_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB20_RGB21_D1RGB20_SEL() (pst_bitD1RGB20_RGB21() -> D1RGB20_SEL)
N#define vSetD1RGB20_RGB21_D1RGB20_SEL(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_SEL=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB20_PU() (pst_bitD1RGB20_RGB21() -> D1RGB20_PU)
N#define vSetD1RGB20_RGB21_D1RGB20_PU(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_PU=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB20_PD() (pst_bitD1RGB20_RGB21() -> D1RGB20_PD)
N#define vSetD1RGB20_RGB21_D1RGB20_PD(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_PD=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB20_SMT() (pst_bitD1RGB20_RGB21() -> D1RGB20_SMT)
N#define vSetD1RGB20_RGB21_D1RGB20_SMT(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_SMT=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB20_IMP() (pst_bitD1RGB20_RGB21() -> D1RGB20_IMP)
N#define vSetD1RGB20_RGB21_D1RGB20_IMP(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_IMP=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB20_LATCHN() (pst_bitD1RGB20_RGB21() -> D1RGB20_LATCHN)
N#define vSetD1RGB20_RGB21_D1RGB20_LATCHN(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB20_LATCHN=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_SEL() (pst_bitD1RGB20_RGB21() -> D1RGB21_SEL)
N#define vSetD1RGB20_RGB21_D1RGB21_SEL(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_SEL=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_PU() (pst_bitD1RGB20_RGB21() -> D1RGB21_PU)
N#define vSetD1RGB20_RGB21_D1RGB21_PU(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_PU=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_PD() (pst_bitD1RGB20_RGB21() -> D1RGB21_PD)
N#define vSetD1RGB20_RGB21_D1RGB21_PD(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_PD=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_SMT() (pst_bitD1RGB20_RGB21() -> D1RGB21_SMT)
N#define vSetD1RGB20_RGB21_D1RGB21_SMT(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_SMT=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_IMP() (pst_bitD1RGB20_RGB21() -> D1RGB21_IMP)
N#define vSetD1RGB20_RGB21_D1RGB21_IMP(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_IMP=(ParValue))
N#define biGetD1RGB20_RGB21_D1RGB21_LATCHN() (pst_bitD1RGB20_RGB21() -> D1RGB21_LATCHN)
N#define vSetD1RGB20_RGB21_D1RGB21_LATCHN(ParValue)  (pst_bitD1RGB20_RGB21() -> D1RGB21_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB20_RGB21LL(ParValue) (pst_u8D1RGB20_RGB21() -> u8LL = (ParValue))
N#define u8GetD1RGB20_RGB21LL() (pst_u8D1RGB20_RGB21() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB20_RGB21LH(ParValue) (pst_u8D1RGB20_RGB21() -> u8LH = (ParValue))
N#define u8GetD1RGB20_RGB21LH() (pst_u8D1RGB20_RGB21() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB20_RGB21HL(ParValue) (pst_u8D1RGB20_RGB21() -> u8HL = (ParValue))
N#define u8GetD1RGB20_RGB21HL() (pst_u8D1RGB20_RGB21() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB20_RGB21HH(ParValue) (pst_u8D1RGB20_RGB21() -> u8HH = (ParValue))
N#define u8GetD1RGB20_RGB21HH() (pst_u8D1RGB20_RGB21() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB20_RGB21L(ParValue) (pst_u16D1RGB20_RGB21() -> u16L = (ParValue))
N#define u16GetD1RGB20_RGB21L() (pst_u16D1RGB20_RGB21() -> u16L)
N#define vSetD1RGB20_RGB21H(ParValue) (pst_u16D1RGB20_RGB21() -> u16H = (ParValue))
N#define u16GetD1RGB20_RGB21H() (pst_u16D1RGB20_RGB21() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB20_RGB21(ParValue)  (*pu32D1RGB20_RGB21() = (ParValue))
N#define u32GetD1RGB20_RGB21()  (*pu32D1RGB20_RGB21() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: D1RGB22_RGB23                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302164                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define D1RGB22_RGB23_REG__       0xC0302164U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   D1RGB22_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   D1RGB22_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   D1RGB22_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   D1RGB22_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   D1RGB22_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   D1RGB22_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   D1RGB23_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   D1RGB23_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   D1RGB23_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   D1RGB23_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   D1RGB23_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   D1RGB23_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} D1RGB22_RGB23_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} D1RGB22_RGB23_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} D1RGB22_RGB23_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32D1RGB22_RGB23_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitD1RGB22_RGB23()     ((volatile D1RGB22_RGB23_bit_view_st *)\
N(D1RGB22_RGB23_REG__ ))
X#define pst_bitD1RGB22_RGB23()     ((volatile D1RGB22_RGB23_bit_view_st *)(D1RGB22_RGB23_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8D1RGB22_RGB23()     ((volatile D1RGB22_RGB23_byte_view_st *)\
N(D1RGB22_RGB23_REG__ ))
X#define pst_u8D1RGB22_RGB23()     ((volatile D1RGB22_RGB23_byte_view_st *)(D1RGB22_RGB23_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16D1RGB22_RGB23()     ((volatile D1RGB22_RGB23_halfword_view_st *)\
N(D1RGB22_RGB23_REG__ ))
X#define pst_u16D1RGB22_RGB23()     ((volatile D1RGB22_RGB23_halfword_view_st *)(D1RGB22_RGB23_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32D1RGB22_RGB23()     ((volatile u32D1RGB22_RGB23_word_view *)\
N(D1RGB22_RGB23_REG__ ))
X#define pu32D1RGB22_RGB23()     ((volatile u32D1RGB22_RGB23_word_view *)(D1RGB22_RGB23_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetD1RGB22_RGB23_D1RGB22_SEL() (pst_bitD1RGB22_RGB23() -> D1RGB22_SEL)
N#define vSetD1RGB22_RGB23_D1RGB22_SEL(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_SEL=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB22_PU() (pst_bitD1RGB22_RGB23() -> D1RGB22_PU)
N#define vSetD1RGB22_RGB23_D1RGB22_PU(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_PU=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB22_PD() (pst_bitD1RGB22_RGB23() -> D1RGB22_PD)
N#define vSetD1RGB22_RGB23_D1RGB22_PD(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_PD=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB22_SMT() (pst_bitD1RGB22_RGB23() -> D1RGB22_SMT)
N#define vSetD1RGB22_RGB23_D1RGB22_SMT(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_SMT=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB22_IMP() (pst_bitD1RGB22_RGB23() -> D1RGB22_IMP)
N#define vSetD1RGB22_RGB23_D1RGB22_IMP(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_IMP=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB22_LATCHN() (pst_bitD1RGB22_RGB23() -> D1RGB22_LATCHN)
N#define vSetD1RGB22_RGB23_D1RGB22_LATCHN(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB22_LATCHN=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_SEL() (pst_bitD1RGB22_RGB23() -> D1RGB23_SEL)
N#define vSetD1RGB22_RGB23_D1RGB23_SEL(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_SEL=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_PU() (pst_bitD1RGB22_RGB23() -> D1RGB23_PU)
N#define vSetD1RGB22_RGB23_D1RGB23_PU(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_PU=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_PD() (pst_bitD1RGB22_RGB23() -> D1RGB23_PD)
N#define vSetD1RGB22_RGB23_D1RGB23_PD(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_PD=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_SMT() (pst_bitD1RGB22_RGB23() -> D1RGB23_SMT)
N#define vSetD1RGB22_RGB23_D1RGB23_SMT(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_SMT=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_IMP() (pst_bitD1RGB22_RGB23() -> D1RGB23_IMP)
N#define vSetD1RGB22_RGB23_D1RGB23_IMP(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_IMP=(ParValue))
N#define biGetD1RGB22_RGB23_D1RGB23_LATCHN() (pst_bitD1RGB22_RGB23() -> D1RGB23_LATCHN)
N#define vSetD1RGB22_RGB23_D1RGB23_LATCHN(ParValue)  (pst_bitD1RGB22_RGB23() -> D1RGB23_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetD1RGB22_RGB23LL(ParValue) (pst_u8D1RGB22_RGB23() -> u8LL = (ParValue))
N#define u8GetD1RGB22_RGB23LL() (pst_u8D1RGB22_RGB23() -> u8LL)
N/* LH-struct byte access */
N#define vSetD1RGB22_RGB23LH(ParValue) (pst_u8D1RGB22_RGB23() -> u8LH = (ParValue))
N#define u8GetD1RGB22_RGB23LH() (pst_u8D1RGB22_RGB23() -> u8LH)
N/* HL-struct byte access */
N#define vSetD1RGB22_RGB23HL(ParValue) (pst_u8D1RGB22_RGB23() -> u8HL = (ParValue))
N#define u8GetD1RGB22_RGB23HL() (pst_u8D1RGB22_RGB23() -> u8HL)
N/* HH-struct byte access */
N#define vSetD1RGB22_RGB23HH(ParValue) (pst_u8D1RGB22_RGB23() -> u8HH = (ParValue))
N#define u8GetD1RGB22_RGB23HH() (pst_u8D1RGB22_RGB23() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetD1RGB22_RGB23L(ParValue) (pst_u16D1RGB22_RGB23() -> u16L = (ParValue))
N#define u16GetD1RGB22_RGB23L() (pst_u16D1RGB22_RGB23() -> u16L)
N#define vSetD1RGB22_RGB23H(ParValue) (pst_u16D1RGB22_RGB23() -> u16H = (ParValue))
N#define u16GetD1RGB22_RGB23H() (pst_u16D1RGB22_RGB23() -> u16H)
N            
N/* Word access */
N#define vSetD1RGB22_RGB23(ParValue)  (*pu32D1RGB22_RGB23() = (ParValue))
N#define u32GetD1RGB22_RGB23()  (*pu32D1RGB22_RGB23() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMCBCR0_CBCR1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302180                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMCBCR0_CBCR1_REG__       0xC0302180U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMCBCR0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMCBCR0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMCBCR0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMCBCR0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMCBCR0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMCBCR0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMCBCR1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMCBCR1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMCBCR1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMCBCR1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMCBCR1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMCBCR1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMCBCR0_CBCR1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMCBCR0_CBCR1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMCBCR0_CBCR1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMCBCR0_CBCR1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_bit_view_st *)\
N(CMCBCR0_CBCR1_REG__ ))
X#define pst_bitCMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_bit_view_st *)(CMCBCR0_CBCR1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_byte_view_st *)\
N(CMCBCR0_CBCR1_REG__ ))
X#define pst_u8CMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_byte_view_st *)(CMCBCR0_CBCR1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_halfword_view_st *)\
N(CMCBCR0_CBCR1_REG__ ))
X#define pst_u16CMCBCR0_CBCR1()     ((volatile CMCBCR0_CBCR1_halfword_view_st *)(CMCBCR0_CBCR1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMCBCR0_CBCR1()     ((volatile u32CMCBCR0_CBCR1_word_view *)\
N(CMCBCR0_CBCR1_REG__ ))
X#define pu32CMCBCR0_CBCR1()     ((volatile u32CMCBCR0_CBCR1_word_view *)(CMCBCR0_CBCR1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMCBCR0_CBCR1_CMCBCR0_SEL() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_SEL)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_SEL(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_SEL=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR0_PU() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_PU)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_PU(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_PU=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR0_PD() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_PD)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_PD(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_PD=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR0_SMT() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_SMT)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_SMT(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_SMT=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR0_IMP() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_IMP)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_IMP(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_IMP=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR0_LATCHN() (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_LATCHN)
N#define vSetCMCBCR0_CBCR1_CMCBCR0_LATCHN(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR0_LATCHN=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_SEL() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_SEL)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_SEL(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_SEL=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_PU() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_PU)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_PU(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_PU=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_PD() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_PD)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_PD(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_PD=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_SMT() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_SMT)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_SMT(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_SMT=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_IMP() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_IMP)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_IMP(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_IMP=(ParValue))
N#define biGetCMCBCR0_CBCR1_CMCBCR1_LATCHN() (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_LATCHN)
N#define vSetCMCBCR0_CBCR1_CMCBCR1_LATCHN(ParValue)  (pst_bitCMCBCR0_CBCR1() -> CMCBCR1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMCBCR0_CBCR1LL(ParValue) (pst_u8CMCBCR0_CBCR1() -> u8LL = (ParValue))
N#define u8GetCMCBCR0_CBCR1LL() (pst_u8CMCBCR0_CBCR1() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMCBCR0_CBCR1LH(ParValue) (pst_u8CMCBCR0_CBCR1() -> u8LH = (ParValue))
N#define u8GetCMCBCR0_CBCR1LH() (pst_u8CMCBCR0_CBCR1() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMCBCR0_CBCR1HL(ParValue) (pst_u8CMCBCR0_CBCR1() -> u8HL = (ParValue))
N#define u8GetCMCBCR0_CBCR1HL() (pst_u8CMCBCR0_CBCR1() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMCBCR0_CBCR1HH(ParValue) (pst_u8CMCBCR0_CBCR1() -> u8HH = (ParValue))
N#define u8GetCMCBCR0_CBCR1HH() (pst_u8CMCBCR0_CBCR1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMCBCR0_CBCR1L(ParValue) (pst_u16CMCBCR0_CBCR1() -> u16L = (ParValue))
N#define u16GetCMCBCR0_CBCR1L() (pst_u16CMCBCR0_CBCR1() -> u16L)
N#define vSetCMCBCR0_CBCR1H(ParValue) (pst_u16CMCBCR0_CBCR1() -> u16H = (ParValue))
N#define u16GetCMCBCR0_CBCR1H() (pst_u16CMCBCR0_CBCR1() -> u16H)
N            
N/* Word access */
N#define vSetCMCBCR0_CBCR1(ParValue)  (*pu32CMCBCR0_CBCR1() = (ParValue))
N#define u32GetCMCBCR0_CBCR1()  (*pu32CMCBCR0_CBCR1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMCBCR2_CBCR3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302184                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMCBCR2_CBCR3_REG__       0xC0302184U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMCBCR2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMCBCR2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMCBCR2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMCBCR2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMCBCR2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMCBCR2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMCBCR3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMCBCR3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMCBCR3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMCBCR3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMCBCR3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMCBCR3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMCBCR2_CBCR3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMCBCR2_CBCR3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMCBCR2_CBCR3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMCBCR2_CBCR3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_bit_view_st *)\
N(CMCBCR2_CBCR3_REG__ ))
X#define pst_bitCMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_bit_view_st *)(CMCBCR2_CBCR3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_byte_view_st *)\
N(CMCBCR2_CBCR3_REG__ ))
X#define pst_u8CMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_byte_view_st *)(CMCBCR2_CBCR3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_halfword_view_st *)\
N(CMCBCR2_CBCR3_REG__ ))
X#define pst_u16CMCBCR2_CBCR3()     ((volatile CMCBCR2_CBCR3_halfword_view_st *)(CMCBCR2_CBCR3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMCBCR2_CBCR3()     ((volatile u32CMCBCR2_CBCR3_word_view *)\
N(CMCBCR2_CBCR3_REG__ ))
X#define pu32CMCBCR2_CBCR3()     ((volatile u32CMCBCR2_CBCR3_word_view *)(CMCBCR2_CBCR3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMCBCR2_CBCR3_CMCBCR2_SEL() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_SEL)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_SEL(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_SEL=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR2_PU() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_PU)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_PU(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_PU=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR2_PD() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_PD)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_PD(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_PD=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR2_SMT() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_SMT)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_SMT(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_SMT=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR2_IMP() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_IMP)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_IMP(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_IMP=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR2_LATCHN() (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_LATCHN)
N#define vSetCMCBCR2_CBCR3_CMCBCR2_LATCHN(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR2_LATCHN=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_SEL() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_SEL)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_SEL(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_SEL=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_PU() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_PU)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_PU(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_PU=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_PD() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_PD)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_PD(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_PD=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_SMT() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_SMT)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_SMT(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_SMT=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_IMP() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_IMP)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_IMP(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_IMP=(ParValue))
N#define biGetCMCBCR2_CBCR3_CMCBCR3_LATCHN() (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_LATCHN)
N#define vSetCMCBCR2_CBCR3_CMCBCR3_LATCHN(ParValue)  (pst_bitCMCBCR2_CBCR3() -> CMCBCR3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMCBCR2_CBCR3LL(ParValue) (pst_u8CMCBCR2_CBCR3() -> u8LL = (ParValue))
N#define u8GetCMCBCR2_CBCR3LL() (pst_u8CMCBCR2_CBCR3() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMCBCR2_CBCR3LH(ParValue) (pst_u8CMCBCR2_CBCR3() -> u8LH = (ParValue))
N#define u8GetCMCBCR2_CBCR3LH() (pst_u8CMCBCR2_CBCR3() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMCBCR2_CBCR3HL(ParValue) (pst_u8CMCBCR2_CBCR3() -> u8HL = (ParValue))
N#define u8GetCMCBCR2_CBCR3HL() (pst_u8CMCBCR2_CBCR3() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMCBCR2_CBCR3HH(ParValue) (pst_u8CMCBCR2_CBCR3() -> u8HH = (ParValue))
N#define u8GetCMCBCR2_CBCR3HH() (pst_u8CMCBCR2_CBCR3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMCBCR2_CBCR3L(ParValue) (pst_u16CMCBCR2_CBCR3() -> u16L = (ParValue))
N#define u16GetCMCBCR2_CBCR3L() (pst_u16CMCBCR2_CBCR3() -> u16L)
N#define vSetCMCBCR2_CBCR3H(ParValue) (pst_u16CMCBCR2_CBCR3() -> u16H = (ParValue))
N#define u16GetCMCBCR2_CBCR3H() (pst_u16CMCBCR2_CBCR3() -> u16H)
N            
N/* Word access */
N#define vSetCMCBCR2_CBCR3(ParValue)  (*pu32CMCBCR2_CBCR3() = (ParValue))
N#define u32GetCMCBCR2_CBCR3()  (*pu32CMCBCR2_CBCR3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMCBCR4_CBCR5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302188                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMCBCR4_CBCR5_REG__       0xC0302188U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMCBCR4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMCBCR4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMCBCR4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMCBCR4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMCBCR4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMCBCR4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMCBCR5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMCBCR5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMCBCR5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMCBCR5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMCBCR5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMCBCR5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMCBCR4_CBCR5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMCBCR4_CBCR5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMCBCR4_CBCR5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMCBCR4_CBCR5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_bit_view_st *)\
N(CMCBCR4_CBCR5_REG__ ))
X#define pst_bitCMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_bit_view_st *)(CMCBCR4_CBCR5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_byte_view_st *)\
N(CMCBCR4_CBCR5_REG__ ))
X#define pst_u8CMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_byte_view_st *)(CMCBCR4_CBCR5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_halfword_view_st *)\
N(CMCBCR4_CBCR5_REG__ ))
X#define pst_u16CMCBCR4_CBCR5()     ((volatile CMCBCR4_CBCR5_halfword_view_st *)(CMCBCR4_CBCR5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMCBCR4_CBCR5()     ((volatile u32CMCBCR4_CBCR5_word_view *)\
N(CMCBCR4_CBCR5_REG__ ))
X#define pu32CMCBCR4_CBCR5()     ((volatile u32CMCBCR4_CBCR5_word_view *)(CMCBCR4_CBCR5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMCBCR4_CBCR5_CMCBCR4_SEL() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_SEL)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_SEL(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_SEL=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR4_PU() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_PU)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_PU(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_PU=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR4_PD() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_PD)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_PD(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_PD=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR4_SMT() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_SMT)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_SMT(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_SMT=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR4_IMP() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_IMP)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_IMP(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_IMP=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR4_LATCHN() (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_LATCHN)
N#define vSetCMCBCR4_CBCR5_CMCBCR4_LATCHN(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR4_LATCHN=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_SEL() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_SEL)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_SEL(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_SEL=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_PU() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_PU)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_PU(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_PU=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_PD() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_PD)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_PD(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_PD=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_SMT() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_SMT)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_SMT(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_SMT=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_IMP() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_IMP)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_IMP(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_IMP=(ParValue))
N#define biGetCMCBCR4_CBCR5_CMCBCR5_LATCHN() (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_LATCHN)
N#define vSetCMCBCR4_CBCR5_CMCBCR5_LATCHN(ParValue)  (pst_bitCMCBCR4_CBCR5() -> CMCBCR5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMCBCR4_CBCR5LL(ParValue) (pst_u8CMCBCR4_CBCR5() -> u8LL = (ParValue))
N#define u8GetCMCBCR4_CBCR5LL() (pst_u8CMCBCR4_CBCR5() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMCBCR4_CBCR5LH(ParValue) (pst_u8CMCBCR4_CBCR5() -> u8LH = (ParValue))
N#define u8GetCMCBCR4_CBCR5LH() (pst_u8CMCBCR4_CBCR5() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMCBCR4_CBCR5HL(ParValue) (pst_u8CMCBCR4_CBCR5() -> u8HL = (ParValue))
N#define u8GetCMCBCR4_CBCR5HL() (pst_u8CMCBCR4_CBCR5() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMCBCR4_CBCR5HH(ParValue) (pst_u8CMCBCR4_CBCR5() -> u8HH = (ParValue))
N#define u8GetCMCBCR4_CBCR5HH() (pst_u8CMCBCR4_CBCR5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMCBCR4_CBCR5L(ParValue) (pst_u16CMCBCR4_CBCR5() -> u16L = (ParValue))
N#define u16GetCMCBCR4_CBCR5L() (pst_u16CMCBCR4_CBCR5() -> u16L)
N#define vSetCMCBCR4_CBCR5H(ParValue) (pst_u16CMCBCR4_CBCR5() -> u16H = (ParValue))
N#define u16GetCMCBCR4_CBCR5H() (pst_u16CMCBCR4_CBCR5() -> u16H)
N            
N/* Word access */
N#define vSetCMCBCR4_CBCR5(ParValue)  (*pu32CMCBCR4_CBCR5() = (ParValue))
N#define u32GetCMCBCR4_CBCR5()  (*pu32CMCBCR4_CBCR5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMCBCR6_CBCR7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030218C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMCBCR6_CBCR7_REG__       0xC030218CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMCBCR6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMCBCR6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMCBCR6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMCBCR6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMCBCR6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMCBCR6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMCBCR7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMCBCR7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMCBCR7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMCBCR7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMCBCR7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMCBCR7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMCBCR6_CBCR7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMCBCR6_CBCR7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMCBCR6_CBCR7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMCBCR6_CBCR7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_bit_view_st *)\
N(CMCBCR6_CBCR7_REG__ ))
X#define pst_bitCMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_bit_view_st *)(CMCBCR6_CBCR7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_byte_view_st *)\
N(CMCBCR6_CBCR7_REG__ ))
X#define pst_u8CMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_byte_view_st *)(CMCBCR6_CBCR7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_halfword_view_st *)\
N(CMCBCR6_CBCR7_REG__ ))
X#define pst_u16CMCBCR6_CBCR7()     ((volatile CMCBCR6_CBCR7_halfword_view_st *)(CMCBCR6_CBCR7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMCBCR6_CBCR7()     ((volatile u32CMCBCR6_CBCR7_word_view *)\
N(CMCBCR6_CBCR7_REG__ ))
X#define pu32CMCBCR6_CBCR7()     ((volatile u32CMCBCR6_CBCR7_word_view *)(CMCBCR6_CBCR7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMCBCR6_CBCR7_CMCBCR6_SEL() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_SEL)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_SEL(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_SEL=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR6_PU() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_PU)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_PU(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_PU=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR6_PD() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_PD)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_PD(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_PD=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR6_SMT() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_SMT)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_SMT(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_SMT=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR6_IMP() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_IMP)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_IMP(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_IMP=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR6_LATCHN() (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_LATCHN)
N#define vSetCMCBCR6_CBCR7_CMCBCR6_LATCHN(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR6_LATCHN=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_SEL() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_SEL)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_SEL(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_SEL=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_PU() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_PU)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_PU(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_PU=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_PD() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_PD)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_PD(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_PD=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_SMT() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_SMT)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_SMT(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_SMT=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_IMP() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_IMP)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_IMP(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_IMP=(ParValue))
N#define biGetCMCBCR6_CBCR7_CMCBCR7_LATCHN() (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_LATCHN)
N#define vSetCMCBCR6_CBCR7_CMCBCR7_LATCHN(ParValue)  (pst_bitCMCBCR6_CBCR7() -> CMCBCR7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMCBCR6_CBCR7LL(ParValue) (pst_u8CMCBCR6_CBCR7() -> u8LL = (ParValue))
N#define u8GetCMCBCR6_CBCR7LL() (pst_u8CMCBCR6_CBCR7() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMCBCR6_CBCR7LH(ParValue) (pst_u8CMCBCR6_CBCR7() -> u8LH = (ParValue))
N#define u8GetCMCBCR6_CBCR7LH() (pst_u8CMCBCR6_CBCR7() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMCBCR6_CBCR7HL(ParValue) (pst_u8CMCBCR6_CBCR7() -> u8HL = (ParValue))
N#define u8GetCMCBCR6_CBCR7HL() (pst_u8CMCBCR6_CBCR7() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMCBCR6_CBCR7HH(ParValue) (pst_u8CMCBCR6_CBCR7() -> u8HH = (ParValue))
N#define u8GetCMCBCR6_CBCR7HH() (pst_u8CMCBCR6_CBCR7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMCBCR6_CBCR7L(ParValue) (pst_u16CMCBCR6_CBCR7() -> u16L = (ParValue))
N#define u16GetCMCBCR6_CBCR7L() (pst_u16CMCBCR6_CBCR7() -> u16L)
N#define vSetCMCBCR6_CBCR7H(ParValue) (pst_u16CMCBCR6_CBCR7() -> u16H = (ParValue))
N#define u16GetCMCBCR6_CBCR7H() (pst_u16CMCBCR6_CBCR7() -> u16H)
N            
N/* Word access */
N#define vSetCMCBCR6_CBCR7(ParValue)  (*pu32CMCBCR6_CBCR7() = (ParValue))
N#define u32GetCMCBCR6_CBCR7()  (*pu32CMCBCR6_CBCR7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302190                             
N*       ACCESS  : 8, 16, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMCLK_REG__       0xC0302190U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint16_t   CMCLK_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint16_t   	:5; 	 /* 3..7  bit(s) R */
N  uint16_t   CMCLK_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint16_t   CMCLK_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint16_t   CMCLK_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint16_t   CMCLK_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint16_t   CMCLK_LATCHN	:1; 	 /* 13..13  bit(s) R/W */ 
N  uint16_t   	:2; 	 /* 14..31  bit(s) R */                    
N} CMCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8L;       
N  uint8_t u8H;       
N} CMCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef uint16_t u16CMCLK_halfword_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMCLK()     ((volatile CMCLK_bit_view_st *)\
N(CMCLK_REG__ ))
X#define pst_bitCMCLK()     ((volatile CMCLK_bit_view_st *)(CMCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMCLK()     ((volatile CMCLK_byte_view_st *)\
N(CMCLK_REG__ ))
X#define pst_u8CMCLK()     ((volatile CMCLK_byte_view_st *)(CMCLK_REG__ ))
N            
N/* Pointer to HALFWORD */
N#define pu16CMCLK()     ((volatile u16CMCLK_halfword_view *)\
N(CMCLK_REG__ ))
X#define pu16CMCLK()     ((volatile u16CMCLK_halfword_view *)(CMCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMCLK_CMCLK_SEL() (pst_bitCMCLK() -> CMCLK_SEL)
N#define vSetCMCLK_CMCLK_SEL(ParValue)  (pst_bitCMCLK() -> CMCLK_SEL=(ParValue))
N#define biGetCMCLK_CMCLK_PU() (pst_bitCMCLK() -> CMCLK_PU)
N#define vSetCMCLK_CMCLK_PU(ParValue)  (pst_bitCMCLK() -> CMCLK_PU=(ParValue))
N#define biGetCMCLK_CMCLK_PD() (pst_bitCMCLK() -> CMCLK_PD)
N#define vSetCMCLK_CMCLK_PD(ParValue)  (pst_bitCMCLK() -> CMCLK_PD=(ParValue))
N#define biGetCMCLK_CMCLK_SMT() (pst_bitCMCLK() -> CMCLK_SMT)
N#define vSetCMCLK_CMCLK_SMT(ParValue)  (pst_bitCMCLK() -> CMCLK_SMT=(ParValue))
N#define biGetCMCLK_CMCLK_IMP() (pst_bitCMCLK() -> CMCLK_IMP)
N#define vSetCMCLK_CMCLK_IMP(ParValue)  (pst_bitCMCLK() -> CMCLK_IMP=(ParValue))
N#define biGetCMCLK_CMCLK_LATCHN() (pst_bitCMCLK() -> CMCLK_LATCHN)
N#define vSetCMCLK_CMCLK_LATCHN(ParValue)  (pst_bitCMCLK() -> CMCLK_LATCHN=(ParValue))
N            
N/* L-struct byte access */
N#define vSetCMCLKL(ParValue) (pst_u8CMCLK() -> u8L = (ParValue))
N#define u8GetCMCLKL() (pst_u8CMCLK() -> u8L)
N/* H-struct byte access */
N#define vSetCMCLKH(ParValue) (pst_u8CMCLK() -> u8H = (ParValue))
N#define u8GetCMCLKH() (pst_u8CMCLK() -> u8H)
N            
N/* Half-word access */ 
N#define vSetCMCLK(ParValue) (*pu16CMCLK()  = (ParValue))
N#define u16GetCMCLK() (*pu16CMCLK() )     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMFODD_HDISP                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302194                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMFODD_HDISP_REG__       0xC0302194U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMFODD_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMFODD_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMFODD_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMFODD_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMFODD_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMFODD_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMHDISP_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMHDISP_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMHDISP_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMHDISP_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMHDISP_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMHDISP_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMFODD_HDISP_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMFODD_HDISP_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMFODD_HDISP_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMFODD_HDISP_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMFODD_HDISP()     ((volatile CMFODD_HDISP_bit_view_st *)\
N(CMFODD_HDISP_REG__ ))
X#define pst_bitCMFODD_HDISP()     ((volatile CMFODD_HDISP_bit_view_st *)(CMFODD_HDISP_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMFODD_HDISP()     ((volatile CMFODD_HDISP_byte_view_st *)\
N(CMFODD_HDISP_REG__ ))
X#define pst_u8CMFODD_HDISP()     ((volatile CMFODD_HDISP_byte_view_st *)(CMFODD_HDISP_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMFODD_HDISP()     ((volatile CMFODD_HDISP_halfword_view_st *)\
N(CMFODD_HDISP_REG__ ))
X#define pst_u16CMFODD_HDISP()     ((volatile CMFODD_HDISP_halfword_view_st *)(CMFODD_HDISP_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMFODD_HDISP()     ((volatile u32CMFODD_HDISP_word_view *)\
N(CMFODD_HDISP_REG__ ))
X#define pu32CMFODD_HDISP()     ((volatile u32CMFODD_HDISP_word_view *)(CMFODD_HDISP_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMFODD_HDISP_CMFODD_SEL() (pst_bitCMFODD_HDISP() -> CMFODD_SEL)
N#define vSetCMFODD_HDISP_CMFODD_SEL(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_SEL=(ParValue))
N#define biGetCMFODD_HDISP_CMFODD_PU() (pst_bitCMFODD_HDISP() -> CMFODD_PU)
N#define vSetCMFODD_HDISP_CMFODD_PU(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_PU=(ParValue))
N#define biGetCMFODD_HDISP_CMFODD_PD() (pst_bitCMFODD_HDISP() -> CMFODD_PD)
N#define vSetCMFODD_HDISP_CMFODD_PD(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_PD=(ParValue))
N#define biGetCMFODD_HDISP_CMFODD_SMT() (pst_bitCMFODD_HDISP() -> CMFODD_SMT)
N#define vSetCMFODD_HDISP_CMFODD_SMT(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_SMT=(ParValue))
N#define biGetCMFODD_HDISP_CMFODD_IMP() (pst_bitCMFODD_HDISP() -> CMFODD_IMP)
N#define vSetCMFODD_HDISP_CMFODD_IMP(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_IMP=(ParValue))
N#define biGetCMFODD_HDISP_CMFODD_LATCHN() (pst_bitCMFODD_HDISP() -> CMFODD_LATCHN)
N#define vSetCMFODD_HDISP_CMFODD_LATCHN(ParValue)  (pst_bitCMFODD_HDISP() -> CMFODD_LATCHN=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_SEL() (pst_bitCMFODD_HDISP() -> CMHDISP_SEL)
N#define vSetCMFODD_HDISP_CMHDISP_SEL(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_SEL=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_PU() (pst_bitCMFODD_HDISP() -> CMHDISP_PU)
N#define vSetCMFODD_HDISP_CMHDISP_PU(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_PU=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_PD() (pst_bitCMFODD_HDISP() -> CMHDISP_PD)
N#define vSetCMFODD_HDISP_CMHDISP_PD(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_PD=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_SMT() (pst_bitCMFODD_HDISP() -> CMHDISP_SMT)
N#define vSetCMFODD_HDISP_CMHDISP_SMT(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_SMT=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_IMP() (pst_bitCMFODD_HDISP() -> CMHDISP_IMP)
N#define vSetCMFODD_HDISP_CMHDISP_IMP(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_IMP=(ParValue))
N#define biGetCMFODD_HDISP_CMHDISP_LATCHN() (pst_bitCMFODD_HDISP() -> CMHDISP_LATCHN)
N#define vSetCMFODD_HDISP_CMHDISP_LATCHN(ParValue)  (pst_bitCMFODD_HDISP() -> CMHDISP_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMFODD_HDISPLL(ParValue) (pst_u8CMFODD_HDISP() -> u8LL = (ParValue))
N#define u8GetCMFODD_HDISPLL() (pst_u8CMFODD_HDISP() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMFODD_HDISPLH(ParValue) (pst_u8CMFODD_HDISP() -> u8LH = (ParValue))
N#define u8GetCMFODD_HDISPLH() (pst_u8CMFODD_HDISP() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMFODD_HDISPHL(ParValue) (pst_u8CMFODD_HDISP() -> u8HL = (ParValue))
N#define u8GetCMFODD_HDISPHL() (pst_u8CMFODD_HDISP() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMFODD_HDISPHH(ParValue) (pst_u8CMFODD_HDISP() -> u8HH = (ParValue))
N#define u8GetCMFODD_HDISPHH() (pst_u8CMFODD_HDISP() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMFODD_HDISPL(ParValue) (pst_u16CMFODD_HDISP() -> u16L = (ParValue))
N#define u16GetCMFODD_HDISPL() (pst_u16CMFODD_HDISP() -> u16L)
N#define vSetCMFODD_HDISPH(ParValue) (pst_u16CMFODD_HDISP() -> u16H = (ParValue))
N#define u16GetCMFODD_HDISPH() (pst_u16CMFODD_HDISP() -> u16H)
N            
N/* Word access */
N#define vSetCMFODD_HDISP(ParValue)  (*pu32CMFODD_HDISP() = (ParValue))
N#define u32GetCMFODD_HDISP()  (*pu32CMFODD_HDISP() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMHSYNC_VSYNC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302198                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMHSYNC_VSYNC_REG__       0xC0302198U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMHSYNC_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMHSYNC_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMHSYNC_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMHSYNC_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMHSYNC_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMHSYNC_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMVSYNC_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMVSYNC_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMVSYNC_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMVSYNC_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMVSYNC_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMVSYNC_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMHSYNC_VSYNC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMHSYNC_VSYNC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMHSYNC_VSYNC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMHSYNC_VSYNC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_bit_view_st *)\
N(CMHSYNC_VSYNC_REG__ ))
X#define pst_bitCMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_bit_view_st *)(CMHSYNC_VSYNC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_byte_view_st *)\
N(CMHSYNC_VSYNC_REG__ ))
X#define pst_u8CMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_byte_view_st *)(CMHSYNC_VSYNC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_halfword_view_st *)\
N(CMHSYNC_VSYNC_REG__ ))
X#define pst_u16CMHSYNC_VSYNC()     ((volatile CMHSYNC_VSYNC_halfword_view_st *)(CMHSYNC_VSYNC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMHSYNC_VSYNC()     ((volatile u32CMHSYNC_VSYNC_word_view *)\
N(CMHSYNC_VSYNC_REG__ ))
X#define pu32CMHSYNC_VSYNC()     ((volatile u32CMHSYNC_VSYNC_word_view *)(CMHSYNC_VSYNC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMHSYNC_VSYNC_CMHSYNC_SEL() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_SEL)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_SEL(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_SEL=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMHSYNC_PU() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_PU)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_PU(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_PU=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMHSYNC_PD() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_PD)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_PD(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_PD=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMHSYNC_SMT() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_SMT)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_SMT(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_SMT=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMHSYNC_IMP() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_IMP)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_IMP(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_IMP=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMHSYNC_LATCHN() (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_LATCHN)
N#define vSetCMHSYNC_VSYNC_CMHSYNC_LATCHN(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMHSYNC_LATCHN=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_SEL() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_SEL)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_SEL(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_SEL=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_PU() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_PU)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_PU(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_PU=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_PD() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_PD)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_PD(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_PD=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_SMT() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_SMT)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_SMT(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_SMT=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_IMP() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_IMP)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_IMP(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_IMP=(ParValue))
N#define biGetCMHSYNC_VSYNC_CMVSYNC_LATCHN() (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_LATCHN)
N#define vSetCMHSYNC_VSYNC_CMVSYNC_LATCHN(ParValue)  (pst_bitCMHSYNC_VSYNC() -> CMVSYNC_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMHSYNC_VSYNCLL(ParValue) (pst_u8CMHSYNC_VSYNC() -> u8LL = (ParValue))
N#define u8GetCMHSYNC_VSYNCLL() (pst_u8CMHSYNC_VSYNC() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMHSYNC_VSYNCLH(ParValue) (pst_u8CMHSYNC_VSYNC() -> u8LH = (ParValue))
N#define u8GetCMHSYNC_VSYNCLH() (pst_u8CMHSYNC_VSYNC() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMHSYNC_VSYNCHL(ParValue) (pst_u8CMHSYNC_VSYNC() -> u8HL = (ParValue))
N#define u8GetCMHSYNC_VSYNCHL() (pst_u8CMHSYNC_VSYNC() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMHSYNC_VSYNCHH(ParValue) (pst_u8CMHSYNC_VSYNC() -> u8HH = (ParValue))
N#define u8GetCMHSYNC_VSYNCHH() (pst_u8CMHSYNC_VSYNC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMHSYNC_VSYNCL(ParValue) (pst_u16CMHSYNC_VSYNC() -> u16L = (ParValue))
N#define u16GetCMHSYNC_VSYNCL() (pst_u16CMHSYNC_VSYNC() -> u16L)
N#define vSetCMHSYNC_VSYNCH(ParValue) (pst_u16CMHSYNC_VSYNC() -> u16H = (ParValue))
N#define u16GetCMHSYNC_VSYNCH() (pst_u16CMHSYNC_VSYNC() -> u16H)
N            
N/* Word access */
N#define vSetCMHSYNC_VSYNC(ParValue)  (*pu32CMHSYNC_VSYNC() = (ParValue))
N#define u32GetCMHSYNC_VSYNC()  (*pu32CMHSYNC_VSYNC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMY0_Y1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030219C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMY0_Y1_REG__       0xC030219CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMY0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMY0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMY0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMY0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMY0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMY0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMY1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMY1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMY1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMY1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMY1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMY1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMY0_Y1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMY0_Y1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMY0_Y1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMY0_Y1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMY0_Y1()     ((volatile CMY0_Y1_bit_view_st *)\
N(CMY0_Y1_REG__ ))
X#define pst_bitCMY0_Y1()     ((volatile CMY0_Y1_bit_view_st *)(CMY0_Y1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMY0_Y1()     ((volatile CMY0_Y1_byte_view_st *)\
N(CMY0_Y1_REG__ ))
X#define pst_u8CMY0_Y1()     ((volatile CMY0_Y1_byte_view_st *)(CMY0_Y1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMY0_Y1()     ((volatile CMY0_Y1_halfword_view_st *)\
N(CMY0_Y1_REG__ ))
X#define pst_u16CMY0_Y1()     ((volatile CMY0_Y1_halfword_view_st *)(CMY0_Y1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMY0_Y1()     ((volatile u32CMY0_Y1_word_view *)\
N(CMY0_Y1_REG__ ))
X#define pu32CMY0_Y1()     ((volatile u32CMY0_Y1_word_view *)(CMY0_Y1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMY0_Y1_CMY0_SEL() (pst_bitCMY0_Y1() -> CMY0_SEL)
N#define vSetCMY0_Y1_CMY0_SEL(ParValue)  (pst_bitCMY0_Y1() -> CMY0_SEL=(ParValue))
N#define biGetCMY0_Y1_CMY0_PU() (pst_bitCMY0_Y1() -> CMY0_PU)
N#define vSetCMY0_Y1_CMY0_PU(ParValue)  (pst_bitCMY0_Y1() -> CMY0_PU=(ParValue))
N#define biGetCMY0_Y1_CMY0_PD() (pst_bitCMY0_Y1() -> CMY0_PD)
N#define vSetCMY0_Y1_CMY0_PD(ParValue)  (pst_bitCMY0_Y1() -> CMY0_PD=(ParValue))
N#define biGetCMY0_Y1_CMY0_SMT() (pst_bitCMY0_Y1() -> CMY0_SMT)
N#define vSetCMY0_Y1_CMY0_SMT(ParValue)  (pst_bitCMY0_Y1() -> CMY0_SMT=(ParValue))
N#define biGetCMY0_Y1_CMY0_IMP() (pst_bitCMY0_Y1() -> CMY0_IMP)
N#define vSetCMY0_Y1_CMY0_IMP(ParValue)  (pst_bitCMY0_Y1() -> CMY0_IMP=(ParValue))
N#define biGetCMY0_Y1_CMY0_LATCHN() (pst_bitCMY0_Y1() -> CMY0_LATCHN)
N#define vSetCMY0_Y1_CMY0_LATCHN(ParValue)  (pst_bitCMY0_Y1() -> CMY0_LATCHN=(ParValue))
N#define biGetCMY0_Y1_CMY1_SEL() (pst_bitCMY0_Y1() -> CMY1_SEL)
N#define vSetCMY0_Y1_CMY1_SEL(ParValue)  (pst_bitCMY0_Y1() -> CMY1_SEL=(ParValue))
N#define biGetCMY0_Y1_CMY1_PU() (pst_bitCMY0_Y1() -> CMY1_PU)
N#define vSetCMY0_Y1_CMY1_PU(ParValue)  (pst_bitCMY0_Y1() -> CMY1_PU=(ParValue))
N#define biGetCMY0_Y1_CMY1_PD() (pst_bitCMY0_Y1() -> CMY1_PD)
N#define vSetCMY0_Y1_CMY1_PD(ParValue)  (pst_bitCMY0_Y1() -> CMY1_PD=(ParValue))
N#define biGetCMY0_Y1_CMY1_SMT() (pst_bitCMY0_Y1() -> CMY1_SMT)
N#define vSetCMY0_Y1_CMY1_SMT(ParValue)  (pst_bitCMY0_Y1() -> CMY1_SMT=(ParValue))
N#define biGetCMY0_Y1_CMY1_IMP() (pst_bitCMY0_Y1() -> CMY1_IMP)
N#define vSetCMY0_Y1_CMY1_IMP(ParValue)  (pst_bitCMY0_Y1() -> CMY1_IMP=(ParValue))
N#define biGetCMY0_Y1_CMY1_LATCHN() (pst_bitCMY0_Y1() -> CMY1_LATCHN)
N#define vSetCMY0_Y1_CMY1_LATCHN(ParValue)  (pst_bitCMY0_Y1() -> CMY1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMY0_Y1LL(ParValue) (pst_u8CMY0_Y1() -> u8LL = (ParValue))
N#define u8GetCMY0_Y1LL() (pst_u8CMY0_Y1() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMY0_Y1LH(ParValue) (pst_u8CMY0_Y1() -> u8LH = (ParValue))
N#define u8GetCMY0_Y1LH() (pst_u8CMY0_Y1() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMY0_Y1HL(ParValue) (pst_u8CMY0_Y1() -> u8HL = (ParValue))
N#define u8GetCMY0_Y1HL() (pst_u8CMY0_Y1() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMY0_Y1HH(ParValue) (pst_u8CMY0_Y1() -> u8HH = (ParValue))
N#define u8GetCMY0_Y1HH() (pst_u8CMY0_Y1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMY0_Y1L(ParValue) (pst_u16CMY0_Y1() -> u16L = (ParValue))
N#define u16GetCMY0_Y1L() (pst_u16CMY0_Y1() -> u16L)
N#define vSetCMY0_Y1H(ParValue) (pst_u16CMY0_Y1() -> u16H = (ParValue))
N#define u16GetCMY0_Y1H() (pst_u16CMY0_Y1() -> u16H)
N            
N/* Word access */
N#define vSetCMY0_Y1(ParValue)  (*pu32CMY0_Y1() = (ParValue))
N#define u32GetCMY0_Y1()  (*pu32CMY0_Y1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMY2_Y3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021A0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMY2_Y3_REG__       0xC03021A0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMY2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMY2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMY2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMY2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMY2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMY2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMY3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMY3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMY3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMY3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMY3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMY3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMY2_Y3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMY2_Y3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMY2_Y3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMY2_Y3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMY2_Y3()     ((volatile CMY2_Y3_bit_view_st *)\
N(CMY2_Y3_REG__ ))
X#define pst_bitCMY2_Y3()     ((volatile CMY2_Y3_bit_view_st *)(CMY2_Y3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMY2_Y3()     ((volatile CMY2_Y3_byte_view_st *)\
N(CMY2_Y3_REG__ ))
X#define pst_u8CMY2_Y3()     ((volatile CMY2_Y3_byte_view_st *)(CMY2_Y3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMY2_Y3()     ((volatile CMY2_Y3_halfword_view_st *)\
N(CMY2_Y3_REG__ ))
X#define pst_u16CMY2_Y3()     ((volatile CMY2_Y3_halfword_view_st *)(CMY2_Y3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMY2_Y3()     ((volatile u32CMY2_Y3_word_view *)\
N(CMY2_Y3_REG__ ))
X#define pu32CMY2_Y3()     ((volatile u32CMY2_Y3_word_view *)(CMY2_Y3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMY2_Y3_CMY2_SEL() (pst_bitCMY2_Y3() -> CMY2_SEL)
N#define vSetCMY2_Y3_CMY2_SEL(ParValue)  (pst_bitCMY2_Y3() -> CMY2_SEL=(ParValue))
N#define biGetCMY2_Y3_CMY2_PU() (pst_bitCMY2_Y3() -> CMY2_PU)
N#define vSetCMY2_Y3_CMY2_PU(ParValue)  (pst_bitCMY2_Y3() -> CMY2_PU=(ParValue))
N#define biGetCMY2_Y3_CMY2_PD() (pst_bitCMY2_Y3() -> CMY2_PD)
N#define vSetCMY2_Y3_CMY2_PD(ParValue)  (pst_bitCMY2_Y3() -> CMY2_PD=(ParValue))
N#define biGetCMY2_Y3_CMY2_SMT() (pst_bitCMY2_Y3() -> CMY2_SMT)
N#define vSetCMY2_Y3_CMY2_SMT(ParValue)  (pst_bitCMY2_Y3() -> CMY2_SMT=(ParValue))
N#define biGetCMY2_Y3_CMY2_IMP() (pst_bitCMY2_Y3() -> CMY2_IMP)
N#define vSetCMY2_Y3_CMY2_IMP(ParValue)  (pst_bitCMY2_Y3() -> CMY2_IMP=(ParValue))
N#define biGetCMY2_Y3_CMY2_LATCHN() (pst_bitCMY2_Y3() -> CMY2_LATCHN)
N#define vSetCMY2_Y3_CMY2_LATCHN(ParValue)  (pst_bitCMY2_Y3() -> CMY2_LATCHN=(ParValue))
N#define biGetCMY2_Y3_CMY3_SEL() (pst_bitCMY2_Y3() -> CMY3_SEL)
N#define vSetCMY2_Y3_CMY3_SEL(ParValue)  (pst_bitCMY2_Y3() -> CMY3_SEL=(ParValue))
N#define biGetCMY2_Y3_CMY3_PU() (pst_bitCMY2_Y3() -> CMY3_PU)
N#define vSetCMY2_Y3_CMY3_PU(ParValue)  (pst_bitCMY2_Y3() -> CMY3_PU=(ParValue))
N#define biGetCMY2_Y3_CMY3_PD() (pst_bitCMY2_Y3() -> CMY3_PD)
N#define vSetCMY2_Y3_CMY3_PD(ParValue)  (pst_bitCMY2_Y3() -> CMY3_PD=(ParValue))
N#define biGetCMY2_Y3_CMY3_SMT() (pst_bitCMY2_Y3() -> CMY3_SMT)
N#define vSetCMY2_Y3_CMY3_SMT(ParValue)  (pst_bitCMY2_Y3() -> CMY3_SMT=(ParValue))
N#define biGetCMY2_Y3_CMY3_IMP() (pst_bitCMY2_Y3() -> CMY3_IMP)
N#define vSetCMY2_Y3_CMY3_IMP(ParValue)  (pst_bitCMY2_Y3() -> CMY3_IMP=(ParValue))
N#define biGetCMY2_Y3_CMY3_LATCHN() (pst_bitCMY2_Y3() -> CMY3_LATCHN)
N#define vSetCMY2_Y3_CMY3_LATCHN(ParValue)  (pst_bitCMY2_Y3() -> CMY3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMY2_Y3LL(ParValue) (pst_u8CMY2_Y3() -> u8LL = (ParValue))
N#define u8GetCMY2_Y3LL() (pst_u8CMY2_Y3() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMY2_Y3LH(ParValue) (pst_u8CMY2_Y3() -> u8LH = (ParValue))
N#define u8GetCMY2_Y3LH() (pst_u8CMY2_Y3() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMY2_Y3HL(ParValue) (pst_u8CMY2_Y3() -> u8HL = (ParValue))
N#define u8GetCMY2_Y3HL() (pst_u8CMY2_Y3() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMY2_Y3HH(ParValue) (pst_u8CMY2_Y3() -> u8HH = (ParValue))
N#define u8GetCMY2_Y3HH() (pst_u8CMY2_Y3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMY2_Y3L(ParValue) (pst_u16CMY2_Y3() -> u16L = (ParValue))
N#define u16GetCMY2_Y3L() (pst_u16CMY2_Y3() -> u16L)
N#define vSetCMY2_Y3H(ParValue) (pst_u16CMY2_Y3() -> u16H = (ParValue))
N#define u16GetCMY2_Y3H() (pst_u16CMY2_Y3() -> u16H)
N            
N/* Word access */
N#define vSetCMY2_Y3(ParValue)  (*pu32CMY2_Y3() = (ParValue))
N#define u32GetCMY2_Y3()  (*pu32CMY2_Y3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMY4_Y5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021A4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMY4_Y5_REG__       0xC03021A4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMY4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMY4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMY4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMY4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMY4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMY4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMY5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMY5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMY5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMY5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMY5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMY5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMY4_Y5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMY4_Y5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMY4_Y5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMY4_Y5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMY4_Y5()     ((volatile CMY4_Y5_bit_view_st *)\
N(CMY4_Y5_REG__ ))
X#define pst_bitCMY4_Y5()     ((volatile CMY4_Y5_bit_view_st *)(CMY4_Y5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMY4_Y5()     ((volatile CMY4_Y5_byte_view_st *)\
N(CMY4_Y5_REG__ ))
X#define pst_u8CMY4_Y5()     ((volatile CMY4_Y5_byte_view_st *)(CMY4_Y5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMY4_Y5()     ((volatile CMY4_Y5_halfword_view_st *)\
N(CMY4_Y5_REG__ ))
X#define pst_u16CMY4_Y5()     ((volatile CMY4_Y5_halfword_view_st *)(CMY4_Y5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMY4_Y5()     ((volatile u32CMY4_Y5_word_view *)\
N(CMY4_Y5_REG__ ))
X#define pu32CMY4_Y5()     ((volatile u32CMY4_Y5_word_view *)(CMY4_Y5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMY4_Y5_CMY4_SEL() (pst_bitCMY4_Y5() -> CMY4_SEL)
N#define vSetCMY4_Y5_CMY4_SEL(ParValue)  (pst_bitCMY4_Y5() -> CMY4_SEL=(ParValue))
N#define biGetCMY4_Y5_CMY4_PU() (pst_bitCMY4_Y5() -> CMY4_PU)
N#define vSetCMY4_Y5_CMY4_PU(ParValue)  (pst_bitCMY4_Y5() -> CMY4_PU=(ParValue))
N#define biGetCMY4_Y5_CMY4_PD() (pst_bitCMY4_Y5() -> CMY4_PD)
N#define vSetCMY4_Y5_CMY4_PD(ParValue)  (pst_bitCMY4_Y5() -> CMY4_PD=(ParValue))
N#define biGetCMY4_Y5_CMY4_SMT() (pst_bitCMY4_Y5() -> CMY4_SMT)
N#define vSetCMY4_Y5_CMY4_SMT(ParValue)  (pst_bitCMY4_Y5() -> CMY4_SMT=(ParValue))
N#define biGetCMY4_Y5_CMY4_IMP() (pst_bitCMY4_Y5() -> CMY4_IMP)
N#define vSetCMY4_Y5_CMY4_IMP(ParValue)  (pst_bitCMY4_Y5() -> CMY4_IMP=(ParValue))
N#define biGetCMY4_Y5_CMY4_LATCHN() (pst_bitCMY4_Y5() -> CMY4_LATCHN)
N#define vSetCMY4_Y5_CMY4_LATCHN(ParValue)  (pst_bitCMY4_Y5() -> CMY4_LATCHN=(ParValue))
N#define biGetCMY4_Y5_CMY5_SEL() (pst_bitCMY4_Y5() -> CMY5_SEL)
N#define vSetCMY4_Y5_CMY5_SEL(ParValue)  (pst_bitCMY4_Y5() -> CMY5_SEL=(ParValue))
N#define biGetCMY4_Y5_CMY5_PU() (pst_bitCMY4_Y5() -> CMY5_PU)
N#define vSetCMY4_Y5_CMY5_PU(ParValue)  (pst_bitCMY4_Y5() -> CMY5_PU=(ParValue))
N#define biGetCMY4_Y5_CMY5_PD() (pst_bitCMY4_Y5() -> CMY5_PD)
N#define vSetCMY4_Y5_CMY5_PD(ParValue)  (pst_bitCMY4_Y5() -> CMY5_PD=(ParValue))
N#define biGetCMY4_Y5_CMY5_SMT() (pst_bitCMY4_Y5() -> CMY5_SMT)
N#define vSetCMY4_Y5_CMY5_SMT(ParValue)  (pst_bitCMY4_Y5() -> CMY5_SMT=(ParValue))
N#define biGetCMY4_Y5_CMY5_IMP() (pst_bitCMY4_Y5() -> CMY5_IMP)
N#define vSetCMY4_Y5_CMY5_IMP(ParValue)  (pst_bitCMY4_Y5() -> CMY5_IMP=(ParValue))
N#define biGetCMY4_Y5_CMY5_LATCHN() (pst_bitCMY4_Y5() -> CMY5_LATCHN)
N#define vSetCMY4_Y5_CMY5_LATCHN(ParValue)  (pst_bitCMY4_Y5() -> CMY5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMY4_Y5LL(ParValue) (pst_u8CMY4_Y5() -> u8LL = (ParValue))
N#define u8GetCMY4_Y5LL() (pst_u8CMY4_Y5() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMY4_Y5LH(ParValue) (pst_u8CMY4_Y5() -> u8LH = (ParValue))
N#define u8GetCMY4_Y5LH() (pst_u8CMY4_Y5() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMY4_Y5HL(ParValue) (pst_u8CMY4_Y5() -> u8HL = (ParValue))
N#define u8GetCMY4_Y5HL() (pst_u8CMY4_Y5() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMY4_Y5HH(ParValue) (pst_u8CMY4_Y5() -> u8HH = (ParValue))
N#define u8GetCMY4_Y5HH() (pst_u8CMY4_Y5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMY4_Y5L(ParValue) (pst_u16CMY4_Y5() -> u16L = (ParValue))
N#define u16GetCMY4_Y5L() (pst_u16CMY4_Y5() -> u16L)
N#define vSetCMY4_Y5H(ParValue) (pst_u16CMY4_Y5() -> u16H = (ParValue))
N#define u16GetCMY4_Y5H() (pst_u16CMY4_Y5() -> u16H)
N            
N/* Word access */
N#define vSetCMY4_Y5(ParValue)  (*pu32CMY4_Y5() = (ParValue))
N#define u32GetCMY4_Y5()  (*pu32CMY4_Y5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMY6_Y7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021A8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMY6_Y7_REG__       0xC03021A8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMY6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMY6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMY6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMY6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMY6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMY6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMY7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMY7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMY7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMY7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMY7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMY7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMY6_Y7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMY6_Y7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMY6_Y7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMY6_Y7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMY6_Y7()     ((volatile CMY6_Y7_bit_view_st *)\
N(CMY6_Y7_REG__ ))
X#define pst_bitCMY6_Y7()     ((volatile CMY6_Y7_bit_view_st *)(CMY6_Y7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMY6_Y7()     ((volatile CMY6_Y7_byte_view_st *)\
N(CMY6_Y7_REG__ ))
X#define pst_u8CMY6_Y7()     ((volatile CMY6_Y7_byte_view_st *)(CMY6_Y7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMY6_Y7()     ((volatile CMY6_Y7_halfword_view_st *)\
N(CMY6_Y7_REG__ ))
X#define pst_u16CMY6_Y7()     ((volatile CMY6_Y7_halfword_view_st *)(CMY6_Y7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMY6_Y7()     ((volatile u32CMY6_Y7_word_view *)\
N(CMY6_Y7_REG__ ))
X#define pu32CMY6_Y7()     ((volatile u32CMY6_Y7_word_view *)(CMY6_Y7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMY6_Y7_CMY6_SEL() (pst_bitCMY6_Y7() -> CMY6_SEL)
N#define vSetCMY6_Y7_CMY6_SEL(ParValue)  (pst_bitCMY6_Y7() -> CMY6_SEL=(ParValue))
N#define biGetCMY6_Y7_CMY6_PU() (pst_bitCMY6_Y7() -> CMY6_PU)
N#define vSetCMY6_Y7_CMY6_PU(ParValue)  (pst_bitCMY6_Y7() -> CMY6_PU=(ParValue))
N#define biGetCMY6_Y7_CMY6_PD() (pst_bitCMY6_Y7() -> CMY6_PD)
N#define vSetCMY6_Y7_CMY6_PD(ParValue)  (pst_bitCMY6_Y7() -> CMY6_PD=(ParValue))
N#define biGetCMY6_Y7_CMY6_SMT() (pst_bitCMY6_Y7() -> CMY6_SMT)
N#define vSetCMY6_Y7_CMY6_SMT(ParValue)  (pst_bitCMY6_Y7() -> CMY6_SMT=(ParValue))
N#define biGetCMY6_Y7_CMY6_IMP() (pst_bitCMY6_Y7() -> CMY6_IMP)
N#define vSetCMY6_Y7_CMY6_IMP(ParValue)  (pst_bitCMY6_Y7() -> CMY6_IMP=(ParValue))
N#define biGetCMY6_Y7_CMY6_LATCHN() (pst_bitCMY6_Y7() -> CMY6_LATCHN)
N#define vSetCMY6_Y7_CMY6_LATCHN(ParValue)  (pst_bitCMY6_Y7() -> CMY6_LATCHN=(ParValue))
N#define biGetCMY6_Y7_CMY7_SEL() (pst_bitCMY6_Y7() -> CMY7_SEL)
N#define vSetCMY6_Y7_CMY7_SEL(ParValue)  (pst_bitCMY6_Y7() -> CMY7_SEL=(ParValue))
N#define biGetCMY6_Y7_CMY7_PU() (pst_bitCMY6_Y7() -> CMY7_PU)
N#define vSetCMY6_Y7_CMY7_PU(ParValue)  (pst_bitCMY6_Y7() -> CMY7_PU=(ParValue))
N#define biGetCMY6_Y7_CMY7_PD() (pst_bitCMY6_Y7() -> CMY7_PD)
N#define vSetCMY6_Y7_CMY7_PD(ParValue)  (pst_bitCMY6_Y7() -> CMY7_PD=(ParValue))
N#define biGetCMY6_Y7_CMY7_SMT() (pst_bitCMY6_Y7() -> CMY7_SMT)
N#define vSetCMY6_Y7_CMY7_SMT(ParValue)  (pst_bitCMY6_Y7() -> CMY7_SMT=(ParValue))
N#define biGetCMY6_Y7_CMY7_IMP() (pst_bitCMY6_Y7() -> CMY7_IMP)
N#define vSetCMY6_Y7_CMY7_IMP(ParValue)  (pst_bitCMY6_Y7() -> CMY7_IMP=(ParValue))
N#define biGetCMY6_Y7_CMY7_LATCHN() (pst_bitCMY6_Y7() -> CMY7_LATCHN)
N#define vSetCMY6_Y7_CMY7_LATCHN(ParValue)  (pst_bitCMY6_Y7() -> CMY7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMY6_Y7LL(ParValue) (pst_u8CMY6_Y7() -> u8LL = (ParValue))
N#define u8GetCMY6_Y7LL() (pst_u8CMY6_Y7() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMY6_Y7LH(ParValue) (pst_u8CMY6_Y7() -> u8LH = (ParValue))
N#define u8GetCMY6_Y7LH() (pst_u8CMY6_Y7() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMY6_Y7HL(ParValue) (pst_u8CMY6_Y7() -> u8HL = (ParValue))
N#define u8GetCMY6_Y7HL() (pst_u8CMY6_Y7() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMY6_Y7HH(ParValue) (pst_u8CMY6_Y7() -> u8HH = (ParValue))
N#define u8GetCMY6_Y7HH() (pst_u8CMY6_Y7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMY6_Y7L(ParValue) (pst_u16CMY6_Y7() -> u16L = (ParValue))
N#define u16GetCMY6_Y7L() (pst_u16CMY6_Y7() -> u16L)
N#define vSetCMY6_Y7H(ParValue) (pst_u16CMY6_Y7() -> u16H = (ParValue))
N#define u16GetCMY6_Y7H() (pst_u16CMY6_Y7() -> u16H)
N            
N/* Word access */
N#define vSetCMY6_Y7(ParValue)  (*pu32CMY6_Y7() = (ParValue))
N#define u32GetCMY6_Y7()  (*pu32CMY6_Y7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMRGB0_RGB1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021AC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMRGB0_RGB1_REG__       0xC03021ACU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMRGB0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMRGB0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMRGB0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMRGB0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMRGB0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMRGB0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMRGB1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMRGB1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMRGB1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMRGB1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMRGB1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMRGB1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMRGB0_RGB1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMRGB0_RGB1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMRGB0_RGB1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMRGB0_RGB1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMRGB0_RGB1()     ((volatile CMRGB0_RGB1_bit_view_st *)\
N(CMRGB0_RGB1_REG__ ))
X#define pst_bitCMRGB0_RGB1()     ((volatile CMRGB0_RGB1_bit_view_st *)(CMRGB0_RGB1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMRGB0_RGB1()     ((volatile CMRGB0_RGB1_byte_view_st *)\
N(CMRGB0_RGB1_REG__ ))
X#define pst_u8CMRGB0_RGB1()     ((volatile CMRGB0_RGB1_byte_view_st *)(CMRGB0_RGB1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMRGB0_RGB1()     ((volatile CMRGB0_RGB1_halfword_view_st *)\
N(CMRGB0_RGB1_REG__ ))
X#define pst_u16CMRGB0_RGB1()     ((volatile CMRGB0_RGB1_halfword_view_st *)(CMRGB0_RGB1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMRGB0_RGB1()     ((volatile u32CMRGB0_RGB1_word_view *)\
N(CMRGB0_RGB1_REG__ ))
X#define pu32CMRGB0_RGB1()     ((volatile u32CMRGB0_RGB1_word_view *)(CMRGB0_RGB1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMRGB0_RGB1_CMRGB0_SEL() (pst_bitCMRGB0_RGB1() -> CMRGB0_SEL)
N#define vSetCMRGB0_RGB1_CMRGB0_SEL(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_SEL=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB0_PU() (pst_bitCMRGB0_RGB1() -> CMRGB0_PU)
N#define vSetCMRGB0_RGB1_CMRGB0_PU(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_PU=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB0_PD() (pst_bitCMRGB0_RGB1() -> CMRGB0_PD)
N#define vSetCMRGB0_RGB1_CMRGB0_PD(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_PD=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB0_SMT() (pst_bitCMRGB0_RGB1() -> CMRGB0_SMT)
N#define vSetCMRGB0_RGB1_CMRGB0_SMT(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_SMT=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB0_IMP() (pst_bitCMRGB0_RGB1() -> CMRGB0_IMP)
N#define vSetCMRGB0_RGB1_CMRGB0_IMP(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_IMP=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB0_LATCHN() (pst_bitCMRGB0_RGB1() -> CMRGB0_LATCHN)
N#define vSetCMRGB0_RGB1_CMRGB0_LATCHN(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB0_LATCHN=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_SEL() (pst_bitCMRGB0_RGB1() -> CMRGB1_SEL)
N#define vSetCMRGB0_RGB1_CMRGB1_SEL(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_SEL=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_PU() (pst_bitCMRGB0_RGB1() -> CMRGB1_PU)
N#define vSetCMRGB0_RGB1_CMRGB1_PU(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_PU=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_PD() (pst_bitCMRGB0_RGB1() -> CMRGB1_PD)
N#define vSetCMRGB0_RGB1_CMRGB1_PD(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_PD=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_SMT() (pst_bitCMRGB0_RGB1() -> CMRGB1_SMT)
N#define vSetCMRGB0_RGB1_CMRGB1_SMT(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_SMT=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_IMP() (pst_bitCMRGB0_RGB1() -> CMRGB1_IMP)
N#define vSetCMRGB0_RGB1_CMRGB1_IMP(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_IMP=(ParValue))
N#define biGetCMRGB0_RGB1_CMRGB1_LATCHN() (pst_bitCMRGB0_RGB1() -> CMRGB1_LATCHN)
N#define vSetCMRGB0_RGB1_CMRGB1_LATCHN(ParValue)  (pst_bitCMRGB0_RGB1() -> CMRGB1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMRGB0_RGB1LL(ParValue) (pst_u8CMRGB0_RGB1() -> u8LL = (ParValue))
N#define u8GetCMRGB0_RGB1LL() (pst_u8CMRGB0_RGB1() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMRGB0_RGB1LH(ParValue) (pst_u8CMRGB0_RGB1() -> u8LH = (ParValue))
N#define u8GetCMRGB0_RGB1LH() (pst_u8CMRGB0_RGB1() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMRGB0_RGB1HL(ParValue) (pst_u8CMRGB0_RGB1() -> u8HL = (ParValue))
N#define u8GetCMRGB0_RGB1HL() (pst_u8CMRGB0_RGB1() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMRGB0_RGB1HH(ParValue) (pst_u8CMRGB0_RGB1() -> u8HH = (ParValue))
N#define u8GetCMRGB0_RGB1HH() (pst_u8CMRGB0_RGB1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMRGB0_RGB1L(ParValue) (pst_u16CMRGB0_RGB1() -> u16L = (ParValue))
N#define u16GetCMRGB0_RGB1L() (pst_u16CMRGB0_RGB1() -> u16L)
N#define vSetCMRGB0_RGB1H(ParValue) (pst_u16CMRGB0_RGB1() -> u16H = (ParValue))
N#define u16GetCMRGB0_RGB1H() (pst_u16CMRGB0_RGB1() -> u16H)
N            
N/* Word access */
N#define vSetCMRGB0_RGB1(ParValue)  (*pu32CMRGB0_RGB1() = (ParValue))
N#define u32GetCMRGB0_RGB1()  (*pu32CMRGB0_RGB1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMRGB2_RGB3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021B0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMRGB2_RGB3_REG__       0xC03021B0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMRGB2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMRGB2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMRGB2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMRGB2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMRGB2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMRGB2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMRGB3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMRGB3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMRGB3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMRGB3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMRGB3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMRGB3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMRGB2_RGB3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMRGB2_RGB3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMRGB2_RGB3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMRGB2_RGB3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMRGB2_RGB3()     ((volatile CMRGB2_RGB3_bit_view_st *)\
N(CMRGB2_RGB3_REG__ ))
X#define pst_bitCMRGB2_RGB3()     ((volatile CMRGB2_RGB3_bit_view_st *)(CMRGB2_RGB3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMRGB2_RGB3()     ((volatile CMRGB2_RGB3_byte_view_st *)\
N(CMRGB2_RGB3_REG__ ))
X#define pst_u8CMRGB2_RGB3()     ((volatile CMRGB2_RGB3_byte_view_st *)(CMRGB2_RGB3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMRGB2_RGB3()     ((volatile CMRGB2_RGB3_halfword_view_st *)\
N(CMRGB2_RGB3_REG__ ))
X#define pst_u16CMRGB2_RGB3()     ((volatile CMRGB2_RGB3_halfword_view_st *)(CMRGB2_RGB3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMRGB2_RGB3()     ((volatile u32CMRGB2_RGB3_word_view *)\
N(CMRGB2_RGB3_REG__ ))
X#define pu32CMRGB2_RGB3()     ((volatile u32CMRGB2_RGB3_word_view *)(CMRGB2_RGB3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMRGB2_RGB3_CMRGB2_SEL() (pst_bitCMRGB2_RGB3() -> CMRGB2_SEL)
N#define vSetCMRGB2_RGB3_CMRGB2_SEL(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_SEL=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB2_PU() (pst_bitCMRGB2_RGB3() -> CMRGB2_PU)
N#define vSetCMRGB2_RGB3_CMRGB2_PU(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_PU=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB2_PD() (pst_bitCMRGB2_RGB3() -> CMRGB2_PD)
N#define vSetCMRGB2_RGB3_CMRGB2_PD(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_PD=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB2_SMT() (pst_bitCMRGB2_RGB3() -> CMRGB2_SMT)
N#define vSetCMRGB2_RGB3_CMRGB2_SMT(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_SMT=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB2_IMP() (pst_bitCMRGB2_RGB3() -> CMRGB2_IMP)
N#define vSetCMRGB2_RGB3_CMRGB2_IMP(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_IMP=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB2_LATCHN() (pst_bitCMRGB2_RGB3() -> CMRGB2_LATCHN)
N#define vSetCMRGB2_RGB3_CMRGB2_LATCHN(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB2_LATCHN=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_SEL() (pst_bitCMRGB2_RGB3() -> CMRGB3_SEL)
N#define vSetCMRGB2_RGB3_CMRGB3_SEL(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_SEL=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_PU() (pst_bitCMRGB2_RGB3() -> CMRGB3_PU)
N#define vSetCMRGB2_RGB3_CMRGB3_PU(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_PU=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_PD() (pst_bitCMRGB2_RGB3() -> CMRGB3_PD)
N#define vSetCMRGB2_RGB3_CMRGB3_PD(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_PD=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_SMT() (pst_bitCMRGB2_RGB3() -> CMRGB3_SMT)
N#define vSetCMRGB2_RGB3_CMRGB3_SMT(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_SMT=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_IMP() (pst_bitCMRGB2_RGB3() -> CMRGB3_IMP)
N#define vSetCMRGB2_RGB3_CMRGB3_IMP(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_IMP=(ParValue))
N#define biGetCMRGB2_RGB3_CMRGB3_LATCHN() (pst_bitCMRGB2_RGB3() -> CMRGB3_LATCHN)
N#define vSetCMRGB2_RGB3_CMRGB3_LATCHN(ParValue)  (pst_bitCMRGB2_RGB3() -> CMRGB3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMRGB2_RGB3LL(ParValue) (pst_u8CMRGB2_RGB3() -> u8LL = (ParValue))
N#define u8GetCMRGB2_RGB3LL() (pst_u8CMRGB2_RGB3() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMRGB2_RGB3LH(ParValue) (pst_u8CMRGB2_RGB3() -> u8LH = (ParValue))
N#define u8GetCMRGB2_RGB3LH() (pst_u8CMRGB2_RGB3() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMRGB2_RGB3HL(ParValue) (pst_u8CMRGB2_RGB3() -> u8HL = (ParValue))
N#define u8GetCMRGB2_RGB3HL() (pst_u8CMRGB2_RGB3() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMRGB2_RGB3HH(ParValue) (pst_u8CMRGB2_RGB3() -> u8HH = (ParValue))
N#define u8GetCMRGB2_RGB3HH() (pst_u8CMRGB2_RGB3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMRGB2_RGB3L(ParValue) (pst_u16CMRGB2_RGB3() -> u16L = (ParValue))
N#define u16GetCMRGB2_RGB3L() (pst_u16CMRGB2_RGB3() -> u16L)
N#define vSetCMRGB2_RGB3H(ParValue) (pst_u16CMRGB2_RGB3() -> u16H = (ParValue))
N#define u16GetCMRGB2_RGB3H() (pst_u16CMRGB2_RGB3() -> u16H)
N            
N/* Word access */
N#define vSetCMRGB2_RGB3(ParValue)  (*pu32CMRGB2_RGB3() = (ParValue))
N#define u32GetCMRGB2_RGB3()  (*pu32CMRGB2_RGB3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMRGB4_RGB5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021B4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMRGB4_RGB5_REG__       0xC03021B4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMRGB4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMRGB4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMRGB4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMRGB4_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMRGB4_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMRGB4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMRGB5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMRGB5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMRGB5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMRGB5_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMRGB5_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMRGB5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMRGB4_RGB5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMRGB4_RGB5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMRGB4_RGB5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMRGB4_RGB5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMRGB4_RGB5()     ((volatile CMRGB4_RGB5_bit_view_st *)\
N(CMRGB4_RGB5_REG__ ))
X#define pst_bitCMRGB4_RGB5()     ((volatile CMRGB4_RGB5_bit_view_st *)(CMRGB4_RGB5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMRGB4_RGB5()     ((volatile CMRGB4_RGB5_byte_view_st *)\
N(CMRGB4_RGB5_REG__ ))
X#define pst_u8CMRGB4_RGB5()     ((volatile CMRGB4_RGB5_byte_view_st *)(CMRGB4_RGB5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMRGB4_RGB5()     ((volatile CMRGB4_RGB5_halfword_view_st *)\
N(CMRGB4_RGB5_REG__ ))
X#define pst_u16CMRGB4_RGB5()     ((volatile CMRGB4_RGB5_halfword_view_st *)(CMRGB4_RGB5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMRGB4_RGB5()     ((volatile u32CMRGB4_RGB5_word_view *)\
N(CMRGB4_RGB5_REG__ ))
X#define pu32CMRGB4_RGB5()     ((volatile u32CMRGB4_RGB5_word_view *)(CMRGB4_RGB5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMRGB4_RGB5_CMRGB4_SEL() (pst_bitCMRGB4_RGB5() -> CMRGB4_SEL)
N#define vSetCMRGB4_RGB5_CMRGB4_SEL(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_SEL=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB4_PU() (pst_bitCMRGB4_RGB5() -> CMRGB4_PU)
N#define vSetCMRGB4_RGB5_CMRGB4_PU(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_PU=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB4_PD() (pst_bitCMRGB4_RGB5() -> CMRGB4_PD)
N#define vSetCMRGB4_RGB5_CMRGB4_PD(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_PD=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB4_SMT() (pst_bitCMRGB4_RGB5() -> CMRGB4_SMT)
N#define vSetCMRGB4_RGB5_CMRGB4_SMT(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_SMT=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB4_IMP() (pst_bitCMRGB4_RGB5() -> CMRGB4_IMP)
N#define vSetCMRGB4_RGB5_CMRGB4_IMP(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_IMP=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB4_LATCHN() (pst_bitCMRGB4_RGB5() -> CMRGB4_LATCHN)
N#define vSetCMRGB4_RGB5_CMRGB4_LATCHN(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB4_LATCHN=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_SEL() (pst_bitCMRGB4_RGB5() -> CMRGB5_SEL)
N#define vSetCMRGB4_RGB5_CMRGB5_SEL(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_SEL=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_PU() (pst_bitCMRGB4_RGB5() -> CMRGB5_PU)
N#define vSetCMRGB4_RGB5_CMRGB5_PU(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_PU=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_PD() (pst_bitCMRGB4_RGB5() -> CMRGB5_PD)
N#define vSetCMRGB4_RGB5_CMRGB5_PD(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_PD=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_SMT() (pst_bitCMRGB4_RGB5() -> CMRGB5_SMT)
N#define vSetCMRGB4_RGB5_CMRGB5_SMT(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_SMT=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_IMP() (pst_bitCMRGB4_RGB5() -> CMRGB5_IMP)
N#define vSetCMRGB4_RGB5_CMRGB5_IMP(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_IMP=(ParValue))
N#define biGetCMRGB4_RGB5_CMRGB5_LATCHN() (pst_bitCMRGB4_RGB5() -> CMRGB5_LATCHN)
N#define vSetCMRGB4_RGB5_CMRGB5_LATCHN(ParValue)  (pst_bitCMRGB4_RGB5() -> CMRGB5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMRGB4_RGB5LL(ParValue) (pst_u8CMRGB4_RGB5() -> u8LL = (ParValue))
N#define u8GetCMRGB4_RGB5LL() (pst_u8CMRGB4_RGB5() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMRGB4_RGB5LH(ParValue) (pst_u8CMRGB4_RGB5() -> u8LH = (ParValue))
N#define u8GetCMRGB4_RGB5LH() (pst_u8CMRGB4_RGB5() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMRGB4_RGB5HL(ParValue) (pst_u8CMRGB4_RGB5() -> u8HL = (ParValue))
N#define u8GetCMRGB4_RGB5HL() (pst_u8CMRGB4_RGB5() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMRGB4_RGB5HH(ParValue) (pst_u8CMRGB4_RGB5() -> u8HH = (ParValue))
N#define u8GetCMRGB4_RGB5HH() (pst_u8CMRGB4_RGB5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMRGB4_RGB5L(ParValue) (pst_u16CMRGB4_RGB5() -> u16L = (ParValue))
N#define u16GetCMRGB4_RGB5L() (pst_u16CMRGB4_RGB5() -> u16L)
N#define vSetCMRGB4_RGB5H(ParValue) (pst_u16CMRGB4_RGB5() -> u16H = (ParValue))
N#define u16GetCMRGB4_RGB5H() (pst_u16CMRGB4_RGB5() -> u16H)
N            
N/* Word access */
N#define vSetCMRGB4_RGB5(ParValue)  (*pu32CMRGB4_RGB5() = (ParValue))
N#define u32GetCMRGB4_RGB5()  (*pu32CMRGB4_RGB5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CMRGB6_RGB7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021B8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CMRGB6_RGB7_REG__       0xC03021B8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CMRGB6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CMRGB6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CMRGB6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   CMRGB6_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   CMRGB6_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   CMRGB6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CMRGB7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CMRGB7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CMRGB7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CMRGB7_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CMRGB7_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CMRGB7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CMRGB6_RGB7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CMRGB6_RGB7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CMRGB6_RGB7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CMRGB6_RGB7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCMRGB6_RGB7()     ((volatile CMRGB6_RGB7_bit_view_st *)\
N(CMRGB6_RGB7_REG__ ))
X#define pst_bitCMRGB6_RGB7()     ((volatile CMRGB6_RGB7_bit_view_st *)(CMRGB6_RGB7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CMRGB6_RGB7()     ((volatile CMRGB6_RGB7_byte_view_st *)\
N(CMRGB6_RGB7_REG__ ))
X#define pst_u8CMRGB6_RGB7()     ((volatile CMRGB6_RGB7_byte_view_st *)(CMRGB6_RGB7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CMRGB6_RGB7()     ((volatile CMRGB6_RGB7_halfword_view_st *)\
N(CMRGB6_RGB7_REG__ ))
X#define pst_u16CMRGB6_RGB7()     ((volatile CMRGB6_RGB7_halfword_view_st *)(CMRGB6_RGB7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CMRGB6_RGB7()     ((volatile u32CMRGB6_RGB7_word_view *)\
N(CMRGB6_RGB7_REG__ ))
X#define pu32CMRGB6_RGB7()     ((volatile u32CMRGB6_RGB7_word_view *)(CMRGB6_RGB7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCMRGB6_RGB7_CMRGB6_SEL() (pst_bitCMRGB6_RGB7() -> CMRGB6_SEL)
N#define vSetCMRGB6_RGB7_CMRGB6_SEL(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_SEL=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB6_PU() (pst_bitCMRGB6_RGB7() -> CMRGB6_PU)
N#define vSetCMRGB6_RGB7_CMRGB6_PU(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_PU=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB6_PD() (pst_bitCMRGB6_RGB7() -> CMRGB6_PD)
N#define vSetCMRGB6_RGB7_CMRGB6_PD(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_PD=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB6_SMT() (pst_bitCMRGB6_RGB7() -> CMRGB6_SMT)
N#define vSetCMRGB6_RGB7_CMRGB6_SMT(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_SMT=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB6_IMP() (pst_bitCMRGB6_RGB7() -> CMRGB6_IMP)
N#define vSetCMRGB6_RGB7_CMRGB6_IMP(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_IMP=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB6_LATCHN() (pst_bitCMRGB6_RGB7() -> CMRGB6_LATCHN)
N#define vSetCMRGB6_RGB7_CMRGB6_LATCHN(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB6_LATCHN=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_SEL() (pst_bitCMRGB6_RGB7() -> CMRGB7_SEL)
N#define vSetCMRGB6_RGB7_CMRGB7_SEL(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_SEL=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_PU() (pst_bitCMRGB6_RGB7() -> CMRGB7_PU)
N#define vSetCMRGB6_RGB7_CMRGB7_PU(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_PU=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_PD() (pst_bitCMRGB6_RGB7() -> CMRGB7_PD)
N#define vSetCMRGB6_RGB7_CMRGB7_PD(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_PD=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_SMT() (pst_bitCMRGB6_RGB7() -> CMRGB7_SMT)
N#define vSetCMRGB6_RGB7_CMRGB7_SMT(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_SMT=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_IMP() (pst_bitCMRGB6_RGB7() -> CMRGB7_IMP)
N#define vSetCMRGB6_RGB7_CMRGB7_IMP(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_IMP=(ParValue))
N#define biGetCMRGB6_RGB7_CMRGB7_LATCHN() (pst_bitCMRGB6_RGB7() -> CMRGB7_LATCHN)
N#define vSetCMRGB6_RGB7_CMRGB7_LATCHN(ParValue)  (pst_bitCMRGB6_RGB7() -> CMRGB7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCMRGB6_RGB7LL(ParValue) (pst_u8CMRGB6_RGB7() -> u8LL = (ParValue))
N#define u8GetCMRGB6_RGB7LL() (pst_u8CMRGB6_RGB7() -> u8LL)
N/* LH-struct byte access */
N#define vSetCMRGB6_RGB7LH(ParValue) (pst_u8CMRGB6_RGB7() -> u8LH = (ParValue))
N#define u8GetCMRGB6_RGB7LH() (pst_u8CMRGB6_RGB7() -> u8LH)
N/* HL-struct byte access */
N#define vSetCMRGB6_RGB7HL(ParValue) (pst_u8CMRGB6_RGB7() -> u8HL = (ParValue))
N#define u8GetCMRGB6_RGB7HL() (pst_u8CMRGB6_RGB7() -> u8HL)
N/* HH-struct byte access */
N#define vSetCMRGB6_RGB7HH(ParValue) (pst_u8CMRGB6_RGB7() -> u8HH = (ParValue))
N#define u8GetCMRGB6_RGB7HH() (pst_u8CMRGB6_RGB7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCMRGB6_RGB7L(ParValue) (pst_u16CMRGB6_RGB7() -> u16L = (ParValue))
N#define u16GetCMRGB6_RGB7L() (pst_u16CMRGB6_RGB7() -> u16L)
N#define vSetCMRGB6_RGB7H(ParValue) (pst_u16CMRGB6_RGB7() -> u16H = (ParValue))
N#define u16GetCMRGB6_RGB7H() (pst_u16CMRGB6_RGB7() -> u16H)
N            
N/* Word access */
N#define vSetCMRGB6_RGB7(ParValue)  (*pu32CMRGB6_RGB7() = (ParValue))
N#define u32GetCMRGB6_RGB7()  (*pu32CMRGB6_RGB7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: I2CCLK_DATA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021E0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define I2CCLK_DATA_REG__       0xC03021E0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   I2CCLK_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   I2CCLK_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   I2CCLK_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   I2CCLK_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   I2CCLK_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   I2CCLK_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   I2CDATA_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   I2CDATA_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   I2CDATA_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   I2CDATA_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   I2CDATA_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   I2CDATA_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} I2CCLK_DATA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} I2CCLK_DATA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} I2CCLK_DATA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32I2CCLK_DATA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitI2CCLK_DATA()     ((volatile I2CCLK_DATA_bit_view_st *)\
N(I2CCLK_DATA_REG__ ))
X#define pst_bitI2CCLK_DATA()     ((volatile I2CCLK_DATA_bit_view_st *)(I2CCLK_DATA_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8I2CCLK_DATA()     ((volatile I2CCLK_DATA_byte_view_st *)\
N(I2CCLK_DATA_REG__ ))
X#define pst_u8I2CCLK_DATA()     ((volatile I2CCLK_DATA_byte_view_st *)(I2CCLK_DATA_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16I2CCLK_DATA()     ((volatile I2CCLK_DATA_halfword_view_st *)\
N(I2CCLK_DATA_REG__ ))
X#define pst_u16I2CCLK_DATA()     ((volatile I2CCLK_DATA_halfword_view_st *)(I2CCLK_DATA_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32I2CCLK_DATA()     ((volatile u32I2CCLK_DATA_word_view *)\
N(I2CCLK_DATA_REG__ ))
X#define pu32I2CCLK_DATA()     ((volatile u32I2CCLK_DATA_word_view *)(I2CCLK_DATA_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetI2CCLK_DATA_I2CCLK_SEL() (pst_bitI2CCLK_DATA() -> I2CCLK_SEL)
N#define vSetI2CCLK_DATA_I2CCLK_SEL(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_SEL=(ParValue))
N#define biGetI2CCLK_DATA_I2CCLK_PU() (pst_bitI2CCLK_DATA() -> I2CCLK_PU)
N#define vSetI2CCLK_DATA_I2CCLK_PU(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_PU=(ParValue))
N#define biGetI2CCLK_DATA_I2CCLK_PD() (pst_bitI2CCLK_DATA() -> I2CCLK_PD)
N#define vSetI2CCLK_DATA_I2CCLK_PD(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_PD=(ParValue))
N#define biGetI2CCLK_DATA_I2CCLK_SMT() (pst_bitI2CCLK_DATA() -> I2CCLK_SMT)
N#define vSetI2CCLK_DATA_I2CCLK_SMT(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_SMT=(ParValue))
N#define biGetI2CCLK_DATA_I2CCLK_IMP() (pst_bitI2CCLK_DATA() -> I2CCLK_IMP)
N#define vSetI2CCLK_DATA_I2CCLK_IMP(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_IMP=(ParValue))
N#define biGetI2CCLK_DATA_I2CCLK_LATCHN() (pst_bitI2CCLK_DATA() -> I2CCLK_LATCHN)
N#define vSetI2CCLK_DATA_I2CCLK_LATCHN(ParValue)  (pst_bitI2CCLK_DATA() -> I2CCLK_LATCHN=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_SEL() (pst_bitI2CCLK_DATA() -> I2CDATA_SEL)
N#define vSetI2CCLK_DATA_I2CDATA_SEL(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_SEL=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_PU() (pst_bitI2CCLK_DATA() -> I2CDATA_PU)
N#define vSetI2CCLK_DATA_I2CDATA_PU(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_PU=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_PD() (pst_bitI2CCLK_DATA() -> I2CDATA_PD)
N#define vSetI2CCLK_DATA_I2CDATA_PD(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_PD=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_SMT() (pst_bitI2CCLK_DATA() -> I2CDATA_SMT)
N#define vSetI2CCLK_DATA_I2CDATA_SMT(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_SMT=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_IMP() (pst_bitI2CCLK_DATA() -> I2CDATA_IMP)
N#define vSetI2CCLK_DATA_I2CDATA_IMP(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_IMP=(ParValue))
N#define biGetI2CCLK_DATA_I2CDATA_LATCHN() (pst_bitI2CCLK_DATA() -> I2CDATA_LATCHN)
N#define vSetI2CCLK_DATA_I2CDATA_LATCHN(ParValue)  (pst_bitI2CCLK_DATA() -> I2CDATA_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetI2CCLK_DATALL(ParValue) (pst_u8I2CCLK_DATA() -> u8LL = (ParValue))
N#define u8GetI2CCLK_DATALL() (pst_u8I2CCLK_DATA() -> u8LL)
N/* LH-struct byte access */
N#define vSetI2CCLK_DATALH(ParValue) (pst_u8I2CCLK_DATA() -> u8LH = (ParValue))
N#define u8GetI2CCLK_DATALH() (pst_u8I2CCLK_DATA() -> u8LH)
N/* HL-struct byte access */
N#define vSetI2CCLK_DATAHL(ParValue) (pst_u8I2CCLK_DATA() -> u8HL = (ParValue))
N#define u8GetI2CCLK_DATAHL() (pst_u8I2CCLK_DATA() -> u8HL)
N/* HH-struct byte access */
N#define vSetI2CCLK_DATAHH(ParValue) (pst_u8I2CCLK_DATA() -> u8HH = (ParValue))
N#define u8GetI2CCLK_DATAHH() (pst_u8I2CCLK_DATA() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetI2CCLK_DATAL(ParValue) (pst_u16I2CCLK_DATA() -> u16L = (ParValue))
N#define u16GetI2CCLK_DATAL() (pst_u16I2CCLK_DATA() -> u16L)
N#define vSetI2CCLK_DATAH(ParValue) (pst_u16I2CCLK_DATA() -> u16H = (ParValue))
N#define u16GetI2CCLK_DATAH() (pst_u16I2CCLK_DATA() -> u16H)
N            
N/* Word access */
N#define vSetI2CCLK_DATA(ParValue)  (*pu32I2CCLK_DATA() = (ParValue))
N#define u32GetI2CCLK_DATA()  (*pu32I2CCLK_DATA() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CANRX0_TX0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021E4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CANRX0_TX0_REG__       0xC03021E4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CANRX0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CANRX0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CANRX0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   	:3; 	 /* 10..12  bit(s) R */
N  uint32_t   CANRX0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CANTX0_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CANTX0_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CANTX0_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CANTX0_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CANTX0_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CANTX0_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CANRX0_TX0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CANRX0_TX0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CANRX0_TX0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CANRX0_TX0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCANRX0_TX0()     ((volatile CANRX0_TX0_bit_view_st *)\
N(CANRX0_TX0_REG__ ))
X#define pst_bitCANRX0_TX0()     ((volatile CANRX0_TX0_bit_view_st *)(CANRX0_TX0_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CANRX0_TX0()     ((volatile CANRX0_TX0_byte_view_st *)\
N(CANRX0_TX0_REG__ ))
X#define pst_u8CANRX0_TX0()     ((volatile CANRX0_TX0_byte_view_st *)(CANRX0_TX0_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CANRX0_TX0()     ((volatile CANRX0_TX0_halfword_view_st *)\
N(CANRX0_TX0_REG__ ))
X#define pst_u16CANRX0_TX0()     ((volatile CANRX0_TX0_halfword_view_st *)(CANRX0_TX0_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CANRX0_TX0()     ((volatile u32CANRX0_TX0_word_view *)\
N(CANRX0_TX0_REG__ ))
X#define pu32CANRX0_TX0()     ((volatile u32CANRX0_TX0_word_view *)(CANRX0_TX0_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCANRX0_TX0_CANRX0_SEL() (pst_bitCANRX0_TX0() -> CANRX0_SEL)
N#define vSetCANRX0_TX0_CANRX0_SEL(ParValue)  (pst_bitCANRX0_TX0() -> CANRX0_SEL=(ParValue))
N#define biGetCANRX0_TX0_CANRX0_PU() (pst_bitCANRX0_TX0() -> CANRX0_PU)
N#define vSetCANRX0_TX0_CANRX0_PU(ParValue)  (pst_bitCANRX0_TX0() -> CANRX0_PU=(ParValue))
N#define biGetCANRX0_TX0_CANRX0_PD() (pst_bitCANRX0_TX0() -> CANRX0_PD)
N#define vSetCANRX0_TX0_CANRX0_PD(ParValue)  (pst_bitCANRX0_TX0() -> CANRX0_PD=(ParValue))
N#define biGetCANRX0_TX0_CANRX0_LATCHN() (pst_bitCANRX0_TX0() -> CANRX0_LATCHN)
N#define vSetCANRX0_TX0_CANRX0_LATCHN(ParValue)  (pst_bitCANRX0_TX0() -> CANRX0_LATCHN=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_SEL() (pst_bitCANRX0_TX0() -> CANTX0_SEL)
N#define vSetCANRX0_TX0_CANTX0_SEL(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_SEL=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_PU() (pst_bitCANRX0_TX0() -> CANTX0_PU)
N#define vSetCANRX0_TX0_CANTX0_PU(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_PU=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_PD() (pst_bitCANRX0_TX0() -> CANTX0_PD)
N#define vSetCANRX0_TX0_CANTX0_PD(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_PD=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_SMT() (pst_bitCANRX0_TX0() -> CANTX0_SMT)
N#define vSetCANRX0_TX0_CANTX0_SMT(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_SMT=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_IMP() (pst_bitCANRX0_TX0() -> CANTX0_IMP)
N#define vSetCANRX0_TX0_CANTX0_IMP(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_IMP=(ParValue))
N#define biGetCANRX0_TX0_CANTX0_LATCHN() (pst_bitCANRX0_TX0() -> CANTX0_LATCHN)
N#define vSetCANRX0_TX0_CANTX0_LATCHN(ParValue)  (pst_bitCANRX0_TX0() -> CANTX0_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCANRX0_TX0LL(ParValue) (pst_u8CANRX0_TX0() -> u8LL = (ParValue))
N#define u8GetCANRX0_TX0LL() (pst_u8CANRX0_TX0() -> u8LL)
N/* LH-struct byte access */
N#define vSetCANRX0_TX0LH(ParValue) (pst_u8CANRX0_TX0() -> u8LH = (ParValue))
N#define u8GetCANRX0_TX0LH() (pst_u8CANRX0_TX0() -> u8LH)
N/* HL-struct byte access */
N#define vSetCANRX0_TX0HL(ParValue) (pst_u8CANRX0_TX0() -> u8HL = (ParValue))
N#define u8GetCANRX0_TX0HL() (pst_u8CANRX0_TX0() -> u8HL)
N/* HH-struct byte access */
N#define vSetCANRX0_TX0HH(ParValue) (pst_u8CANRX0_TX0() -> u8HH = (ParValue))
N#define u8GetCANRX0_TX0HH() (pst_u8CANRX0_TX0() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCANRX0_TX0L(ParValue) (pst_u16CANRX0_TX0() -> u16L = (ParValue))
N#define u16GetCANRX0_TX0L() (pst_u16CANRX0_TX0() -> u16L)
N#define vSetCANRX0_TX0H(ParValue) (pst_u16CANRX0_TX0() -> u16H = (ParValue))
N#define u16GetCANRX0_TX0H() (pst_u16CANRX0_TX0() -> u16H)
N            
N/* Word access */
N#define vSetCANRX0_TX0(ParValue)  (*pu32CANRX0_TX0() = (ParValue))
N#define u32GetCANRX0_TX0()  (*pu32CANRX0_TX0() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: CANRX1_TX1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021E8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define CANRX1_TX1_REG__       0xC03021E8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CANRX1_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   CANRX1_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   CANRX1_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   	:3; 	 /* 10..12  bit(s) R */
N  uint32_t   CANRX1_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   CANTX1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   CANTX1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   CANTX1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   CANTX1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   CANTX1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   CANTX1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} CANRX1_TX1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} CANRX1_TX1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} CANRX1_TX1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32CANRX1_TX1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitCANRX1_TX1()     ((volatile CANRX1_TX1_bit_view_st *)\
N(CANRX1_TX1_REG__ ))
X#define pst_bitCANRX1_TX1()     ((volatile CANRX1_TX1_bit_view_st *)(CANRX1_TX1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8CANRX1_TX1()     ((volatile CANRX1_TX1_byte_view_st *)\
N(CANRX1_TX1_REG__ ))
X#define pst_u8CANRX1_TX1()     ((volatile CANRX1_TX1_byte_view_st *)(CANRX1_TX1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16CANRX1_TX1()     ((volatile CANRX1_TX1_halfword_view_st *)\
N(CANRX1_TX1_REG__ ))
X#define pst_u16CANRX1_TX1()     ((volatile CANRX1_TX1_halfword_view_st *)(CANRX1_TX1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32CANRX1_TX1()     ((volatile u32CANRX1_TX1_word_view *)\
N(CANRX1_TX1_REG__ ))
X#define pu32CANRX1_TX1()     ((volatile u32CANRX1_TX1_word_view *)(CANRX1_TX1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetCANRX1_TX1_CANRX1_SEL() (pst_bitCANRX1_TX1() -> CANRX1_SEL)
N#define vSetCANRX1_TX1_CANRX1_SEL(ParValue)  (pst_bitCANRX1_TX1() -> CANRX1_SEL=(ParValue))
N#define biGetCANRX1_TX1_CANRX1_PU() (pst_bitCANRX1_TX1() -> CANRX1_PU)
N#define vSetCANRX1_TX1_CANRX1_PU(ParValue)  (pst_bitCANRX1_TX1() -> CANRX1_PU=(ParValue))
N#define biGetCANRX1_TX1_CANRX1_PD() (pst_bitCANRX1_TX1() -> CANRX1_PD)
N#define vSetCANRX1_TX1_CANRX1_PD(ParValue)  (pst_bitCANRX1_TX1() -> CANRX1_PD=(ParValue))
N#define biGetCANRX1_TX1_CANRX1_LATCHN() (pst_bitCANRX1_TX1() -> CANRX1_LATCHN)
N#define vSetCANRX1_TX1_CANRX1_LATCHN(ParValue)  (pst_bitCANRX1_TX1() -> CANRX1_LATCHN=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_SEL() (pst_bitCANRX1_TX1() -> CANTX1_SEL)
N#define vSetCANRX1_TX1_CANTX1_SEL(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_SEL=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_PU() (pst_bitCANRX1_TX1() -> CANTX1_PU)
N#define vSetCANRX1_TX1_CANTX1_PU(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_PU=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_PD() (pst_bitCANRX1_TX1() -> CANTX1_PD)
N#define vSetCANRX1_TX1_CANTX1_PD(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_PD=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_SMT() (pst_bitCANRX1_TX1() -> CANTX1_SMT)
N#define vSetCANRX1_TX1_CANTX1_SMT(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_SMT=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_IMP() (pst_bitCANRX1_TX1() -> CANTX1_IMP)
N#define vSetCANRX1_TX1_CANTX1_IMP(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_IMP=(ParValue))
N#define biGetCANRX1_TX1_CANTX1_LATCHN() (pst_bitCANRX1_TX1() -> CANTX1_LATCHN)
N#define vSetCANRX1_TX1_CANTX1_LATCHN(ParValue)  (pst_bitCANRX1_TX1() -> CANTX1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetCANRX1_TX1LL(ParValue) (pst_u8CANRX1_TX1() -> u8LL = (ParValue))
N#define u8GetCANRX1_TX1LL() (pst_u8CANRX1_TX1() -> u8LL)
N/* LH-struct byte access */
N#define vSetCANRX1_TX1LH(ParValue) (pst_u8CANRX1_TX1() -> u8LH = (ParValue))
N#define u8GetCANRX1_TX1LH() (pst_u8CANRX1_TX1() -> u8LH)
N/* HL-struct byte access */
N#define vSetCANRX1_TX1HL(ParValue) (pst_u8CANRX1_TX1() -> u8HL = (ParValue))
N#define u8GetCANRX1_TX1HL() (pst_u8CANRX1_TX1() -> u8HL)
N/* HH-struct byte access */
N#define vSetCANRX1_TX1HH(ParValue) (pst_u8CANRX1_TX1() -> u8HH = (ParValue))
N#define u8GetCANRX1_TX1HH() (pst_u8CANRX1_TX1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetCANRX1_TX1L(ParValue) (pst_u16CANRX1_TX1() -> u16L = (ParValue))
N#define u16GetCANRX1_TX1L() (pst_u16CANRX1_TX1() -> u16L)
N#define vSetCANRX1_TX1H(ParValue) (pst_u16CANRX1_TX1() -> u16H = (ParValue))
N#define u16GetCANRX1_TX1H() (pst_u16CANRX1_TX1() -> u16H)
N            
N/* Word access */
N#define vSetCANRX1_TX1(ParValue)  (*pu32CANRX1_TX1() = (ParValue))
N#define u32GetCANRX1_TX1()  (*pu32CANRX1_TX1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: MLBDAT_IO_SIG_IO                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021EC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define MLBDAT_IO_SIG_IO_REG__       0xC03021ECU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   MLBDAT_IO_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   MLBDAT_IO_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   MLBDAT_IO_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   MLBDAT_IO_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   MLBDAT_IO_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   MLBSIG_IO_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   MLBSIG_IO_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   MLBSIG_IO_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   MLBSIG_IO_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   MLBSIG_IO_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} MLBDAT_IO_SIG_IO_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} MLBDAT_IO_SIG_IO_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} MLBDAT_IO_SIG_IO_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32MLBDAT_IO_SIG_IO_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitMLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_bit_view_st *)\
N(MLBDAT_IO_SIG_IO_REG__ ))
X#define pst_bitMLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_bit_view_st *)(MLBDAT_IO_SIG_IO_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8MLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_byte_view_st *)\
N(MLBDAT_IO_SIG_IO_REG__ ))
X#define pst_u8MLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_byte_view_st *)(MLBDAT_IO_SIG_IO_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16MLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_halfword_view_st *)\
N(MLBDAT_IO_SIG_IO_REG__ ))
X#define pst_u16MLBDAT_IO_SIG_IO()     ((volatile MLBDAT_IO_SIG_IO_halfword_view_st *)(MLBDAT_IO_SIG_IO_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32MLBDAT_IO_SIG_IO()     ((volatile u32MLBDAT_IO_SIG_IO_word_view *)\
N(MLBDAT_IO_SIG_IO_REG__ ))
X#define pu32MLBDAT_IO_SIG_IO()     ((volatile u32MLBDAT_IO_SIG_IO_word_view *)(MLBDAT_IO_SIG_IO_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetMLBDAT_IO_SIG_IO_MLBDAT_IO_PU() (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_PU)
N#define vSetMLBDAT_IO_SIG_IO_MLBDAT_IO_PU(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_PU=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBDAT_IO_PD() (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_PD)
N#define vSetMLBDAT_IO_SIG_IO_MLBDAT_IO_PD(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_PD=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBDAT_IO_SMT() (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_SMT)
N#define vSetMLBDAT_IO_SIG_IO_MLBDAT_IO_SMT(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_SMT=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBDAT_IO_IMP() (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_IMP)
N#define vSetMLBDAT_IO_SIG_IO_MLBDAT_IO_IMP(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_IMP=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBDAT_IO_LATCHN() (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_LATCHN)
N#define vSetMLBDAT_IO_SIG_IO_MLBDAT_IO_LATCHN(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBDAT_IO_LATCHN=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBSIG_IO_PU() (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_PU)
N#define vSetMLBDAT_IO_SIG_IO_MLBSIG_IO_PU(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_PU=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBSIG_IO_PD() (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_PD)
N#define vSetMLBDAT_IO_SIG_IO_MLBSIG_IO_PD(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_PD=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBSIG_IO_SMT() (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_SMT)
N#define vSetMLBDAT_IO_SIG_IO_MLBSIG_IO_SMT(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_SMT=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBSIG_IO_IMP() (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_IMP)
N#define vSetMLBDAT_IO_SIG_IO_MLBSIG_IO_IMP(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_IMP=(ParValue))
N#define biGetMLBDAT_IO_SIG_IO_MLBSIG_IO_LATCHN() (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_LATCHN)
N#define vSetMLBDAT_IO_SIG_IO_MLBSIG_IO_LATCHN(ParValue)  (pst_bitMLBDAT_IO_SIG_IO() -> MLBSIG_IO_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetMLBDAT_IO_SIG_IOLL(ParValue) (pst_u8MLBDAT_IO_SIG_IO() -> u8LL = (ParValue))
N#define u8GetMLBDAT_IO_SIG_IOLL() (pst_u8MLBDAT_IO_SIG_IO() -> u8LL)
N/* LH-struct byte access */
N#define vSetMLBDAT_IO_SIG_IOLH(ParValue) (pst_u8MLBDAT_IO_SIG_IO() -> u8LH = (ParValue))
N#define u8GetMLBDAT_IO_SIG_IOLH() (pst_u8MLBDAT_IO_SIG_IO() -> u8LH)
N/* HL-struct byte access */
N#define vSetMLBDAT_IO_SIG_IOHL(ParValue) (pst_u8MLBDAT_IO_SIG_IO() -> u8HL = (ParValue))
N#define u8GetMLBDAT_IO_SIG_IOHL() (pst_u8MLBDAT_IO_SIG_IO() -> u8HL)
N/* HH-struct byte access */
N#define vSetMLBDAT_IO_SIG_IOHH(ParValue) (pst_u8MLBDAT_IO_SIG_IO() -> u8HH = (ParValue))
N#define u8GetMLBDAT_IO_SIG_IOHH() (pst_u8MLBDAT_IO_SIG_IO() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetMLBDAT_IO_SIG_IOL(ParValue) (pst_u16MLBDAT_IO_SIG_IO() -> u16L = (ParValue))
N#define u16GetMLBDAT_IO_SIG_IOL() (pst_u16MLBDAT_IO_SIG_IO() -> u16L)
N#define vSetMLBDAT_IO_SIG_IOH(ParValue) (pst_u16MLBDAT_IO_SIG_IO() -> u16H = (ParValue))
N#define u16GetMLBDAT_IO_SIG_IOH() (pst_u16MLBDAT_IO_SIG_IO() -> u16H)
N            
N/* Word access */
N#define vSetMLBDAT_IO_SIG_IO(ParValue)  (*pu32MLBDAT_IO_SIG_IO() = (ParValue))
N#define u32GetMLBDAT_IO_SIG_IO()  (*pu32MLBDAT_IO_SIG_IO() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: MLBCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021F0                             
N*       ACCESS  : 8, 16, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define MLBCLK_REG__       0xC03021F0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint16_t   	:8; 	 /* 0..7  bit(s) R */
N  uint16_t   MLBCLK_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint16_t   MLBCLK_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint16_t   MLBCLK_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint16_t   	:2; 	 /* 11..12  bit(s) R */
N  uint16_t   MLBCLK_LATCHN	:1; 	 /* 13..13  bit(s) R/W */ 
N  uint16_t   	:2; 	 /* 14..31  bit(s) R */                    
N} MLBCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8L;       
N  uint8_t u8H;       
N} MLBCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef uint16_t u16MLBCLK_halfword_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitMLBCLK()     ((volatile MLBCLK_bit_view_st *)\
N(MLBCLK_REG__ ))
X#define pst_bitMLBCLK()     ((volatile MLBCLK_bit_view_st *)(MLBCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8MLBCLK()     ((volatile MLBCLK_byte_view_st *)\
N(MLBCLK_REG__ ))
X#define pst_u8MLBCLK()     ((volatile MLBCLK_byte_view_st *)(MLBCLK_REG__ ))
N            
N/* Pointer to HALFWORD */
N#define pu16MLBCLK()     ((volatile u16MLBCLK_halfword_view *)\
N(MLBCLK_REG__ ))
X#define pu16MLBCLK()     ((volatile u16MLBCLK_halfword_view *)(MLBCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetMLBCLK_MLBCLK_PU() (pst_bitMLBCLK() -> MLBCLK_PU)
N#define vSetMLBCLK_MLBCLK_PU(ParValue)  (pst_bitMLBCLK() -> MLBCLK_PU=(ParValue))
N#define biGetMLBCLK_MLBCLK_PD() (pst_bitMLBCLK() -> MLBCLK_PD)
N#define vSetMLBCLK_MLBCLK_PD(ParValue)  (pst_bitMLBCLK() -> MLBCLK_PD=(ParValue))
N#define biGetMLBCLK_MLBCLK_SMT() (pst_bitMLBCLK() -> MLBCLK_SMT)
N#define vSetMLBCLK_MLBCLK_SMT(ParValue)  (pst_bitMLBCLK() -> MLBCLK_SMT=(ParValue))
N#define biGetMLBCLK_MLBCLK_LATCHN() (pst_bitMLBCLK() -> MLBCLK_LATCHN)
N#define vSetMLBCLK_MLBCLK_LATCHN(ParValue)  (pst_bitMLBCLK() -> MLBCLK_LATCHN=(ParValue))
N            
N/* L-struct byte access */
N#define vSetMLBCLKL(ParValue) (pst_u8MLBCLK() -> u8L = (ParValue))
N#define u8GetMLBCLKL() (pst_u8MLBCLK() -> u8L)
N/* H-struct byte access */
N#define vSetMLBCLKH(ParValue) (pst_u8MLBCLK() -> u8H = (ParValue))
N#define u8GetMLBCLKH() (pst_u8MLBCLK() -> u8H)
N            
N/* Half-word access */ 
N#define vSetMLBCLK(ParValue) (*pu16MLBCLK()  = (ParValue))
N#define u16GetMLBCLK() (*pu16MLBCLK() )     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ESEI0MISO_MOSI                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021F4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ESEI0MISO_MOSI_REG__       0xC03021F4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ESEI0MISO_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ESEI0MISO_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ESEI0MISO_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   	:3; 	 /* 10..12  bit(s) R */
N  uint32_t   ESEI0MISO_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ESEI0MOSI_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ESEI0MOSI_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ESEI0MOSI_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   	:3; 	 /* 26..28  bit(s) R */
N  uint32_t   ESEI0MOSI_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ESEI0MISO_MOSI_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ESEI0MISO_MOSI_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ESEI0MISO_MOSI_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ESEI0MISO_MOSI_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_bit_view_st *)\
N(ESEI0MISO_MOSI_REG__ ))
X#define pst_bitESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_bit_view_st *)(ESEI0MISO_MOSI_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_byte_view_st *)\
N(ESEI0MISO_MOSI_REG__ ))
X#define pst_u8ESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_byte_view_st *)(ESEI0MISO_MOSI_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_halfword_view_st *)\
N(ESEI0MISO_MOSI_REG__ ))
X#define pst_u16ESEI0MISO_MOSI()     ((volatile ESEI0MISO_MOSI_halfword_view_st *)(ESEI0MISO_MOSI_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ESEI0MISO_MOSI()     ((volatile u32ESEI0MISO_MOSI_word_view *)\
N(ESEI0MISO_MOSI_REG__ ))
X#define pu32ESEI0MISO_MOSI()     ((volatile u32ESEI0MISO_MOSI_word_view *)(ESEI0MISO_MOSI_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetESEI0MISO_MOSI_ESEI0MISO_SEL() (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_SEL)
N#define vSetESEI0MISO_MOSI_ESEI0MISO_SEL(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_SEL=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MISO_PU() (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_PU)
N#define vSetESEI0MISO_MOSI_ESEI0MISO_PU(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_PU=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MISO_PD() (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_PD)
N#define vSetESEI0MISO_MOSI_ESEI0MISO_PD(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_PD=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MISO_LATCHN() (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_LATCHN)
N#define vSetESEI0MISO_MOSI_ESEI0MISO_LATCHN(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MISO_LATCHN=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MOSI_SEL() (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_SEL)
N#define vSetESEI0MISO_MOSI_ESEI0MOSI_SEL(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_SEL=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MOSI_PU() (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_PU)
N#define vSetESEI0MISO_MOSI_ESEI0MOSI_PU(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_PU=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MOSI_PD() (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_PD)
N#define vSetESEI0MISO_MOSI_ESEI0MOSI_PD(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_PD=(ParValue))
N#define biGetESEI0MISO_MOSI_ESEI0MOSI_LATCHN() (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_LATCHN)
N#define vSetESEI0MISO_MOSI_ESEI0MOSI_LATCHN(ParValue)  (pst_bitESEI0MISO_MOSI() -> ESEI0MOSI_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetESEI0MISO_MOSILL(ParValue) (pst_u8ESEI0MISO_MOSI() -> u8LL = (ParValue))
N#define u8GetESEI0MISO_MOSILL() (pst_u8ESEI0MISO_MOSI() -> u8LL)
N/* LH-struct byte access */
N#define vSetESEI0MISO_MOSILH(ParValue) (pst_u8ESEI0MISO_MOSI() -> u8LH = (ParValue))
N#define u8GetESEI0MISO_MOSILH() (pst_u8ESEI0MISO_MOSI() -> u8LH)
N/* HL-struct byte access */
N#define vSetESEI0MISO_MOSIHL(ParValue) (pst_u8ESEI0MISO_MOSI() -> u8HL = (ParValue))
N#define u8GetESEI0MISO_MOSIHL() (pst_u8ESEI0MISO_MOSI() -> u8HL)
N/* HH-struct byte access */
N#define vSetESEI0MISO_MOSIHH(ParValue) (pst_u8ESEI0MISO_MOSI() -> u8HH = (ParValue))
N#define u8GetESEI0MISO_MOSIHH() (pst_u8ESEI0MISO_MOSI() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetESEI0MISO_MOSIL(ParValue) (pst_u16ESEI0MISO_MOSI() -> u16L = (ParValue))
N#define u16GetESEI0MISO_MOSIL() (pst_u16ESEI0MISO_MOSI() -> u16L)
N#define vSetESEI0MISO_MOSIH(ParValue) (pst_u16ESEI0MISO_MOSI() -> u16H = (ParValue))
N#define u16GetESEI0MISO_MOSIH() (pst_u16ESEI0MISO_MOSI() -> u16H)
N            
N/* Word access */
N#define vSetESEI0MISO_MOSI(ParValue)  (*pu32ESEI0MISO_MOSI() = (ParValue))
N#define u32GetESEI0MISO_MOSI()  (*pu32ESEI0MISO_MOSI() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ESEI0SCLK_SSOI                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021F8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ESEI0SCLK_SSOI_REG__       0xC03021F8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ESEI0SCLK_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ESEI0SCLK_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ESEI0SCLK_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   	:3; 	 /* 10..12  bit(s) R */
N  uint32_t   ESEI0SCLK_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ESEI0SSOI_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ESEI0SSOI_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ESEI0SSOI_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   	:3; 	 /* 26..28  bit(s) R */
N  uint32_t   ESEI0SSOI_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ESEI0SCLK_SSOI_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ESEI0SCLK_SSOI_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ESEI0SCLK_SSOI_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ESEI0SCLK_SSOI_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_bit_view_st *)\
N(ESEI0SCLK_SSOI_REG__ ))
X#define pst_bitESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_bit_view_st *)(ESEI0SCLK_SSOI_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_byte_view_st *)\
N(ESEI0SCLK_SSOI_REG__ ))
X#define pst_u8ESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_byte_view_st *)(ESEI0SCLK_SSOI_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_halfword_view_st *)\
N(ESEI0SCLK_SSOI_REG__ ))
X#define pst_u16ESEI0SCLK_SSOI()     ((volatile ESEI0SCLK_SSOI_halfword_view_st *)(ESEI0SCLK_SSOI_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ESEI0SCLK_SSOI()     ((volatile u32ESEI0SCLK_SSOI_word_view *)\
N(ESEI0SCLK_SSOI_REG__ ))
X#define pu32ESEI0SCLK_SSOI()     ((volatile u32ESEI0SCLK_SSOI_word_view *)(ESEI0SCLK_SSOI_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetESEI0SCLK_SSOI_ESEI0SCLK_SEL() (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_SEL)
N#define vSetESEI0SCLK_SSOI_ESEI0SCLK_SEL(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_SEL=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SCLK_PU() (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_PU)
N#define vSetESEI0SCLK_SSOI_ESEI0SCLK_PU(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_PU=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SCLK_PD() (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_PD)
N#define vSetESEI0SCLK_SSOI_ESEI0SCLK_PD(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_PD=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SCLK_LATCHN() (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_LATCHN)
N#define vSetESEI0SCLK_SSOI_ESEI0SCLK_LATCHN(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SCLK_LATCHN=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SSOI_SEL() (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_SEL)
N#define vSetESEI0SCLK_SSOI_ESEI0SSOI_SEL(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_SEL=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SSOI_PU() (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_PU)
N#define vSetESEI0SCLK_SSOI_ESEI0SSOI_PU(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_PU=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SSOI_PD() (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_PD)
N#define vSetESEI0SCLK_SSOI_ESEI0SSOI_PD(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_PD=(ParValue))
N#define biGetESEI0SCLK_SSOI_ESEI0SSOI_LATCHN() (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_LATCHN)
N#define vSetESEI0SCLK_SSOI_ESEI0SSOI_LATCHN(ParValue)  (pst_bitESEI0SCLK_SSOI() -> ESEI0SSOI_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetESEI0SCLK_SSOILL(ParValue) (pst_u8ESEI0SCLK_SSOI() -> u8LL = (ParValue))
N#define u8GetESEI0SCLK_SSOILL() (pst_u8ESEI0SCLK_SSOI() -> u8LL)
N/* LH-struct byte access */
N#define vSetESEI0SCLK_SSOILH(ParValue) (pst_u8ESEI0SCLK_SSOI() -> u8LH = (ParValue))
N#define u8GetESEI0SCLK_SSOILH() (pst_u8ESEI0SCLK_SSOI() -> u8LH)
N/* HL-struct byte access */
N#define vSetESEI0SCLK_SSOIHL(ParValue) (pst_u8ESEI0SCLK_SSOI() -> u8HL = (ParValue))
N#define u8GetESEI0SCLK_SSOIHL() (pst_u8ESEI0SCLK_SSOI() -> u8HL)
N/* HH-struct byte access */
N#define vSetESEI0SCLK_SSOIHH(ParValue) (pst_u8ESEI0SCLK_SSOI() -> u8HH = (ParValue))
N#define u8GetESEI0SCLK_SSOIHH() (pst_u8ESEI0SCLK_SSOI() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetESEI0SCLK_SSOIL(ParValue) (pst_u16ESEI0SCLK_SSOI() -> u16L = (ParValue))
N#define u16GetESEI0SCLK_SSOIL() (pst_u16ESEI0SCLK_SSOI() -> u16L)
N#define vSetESEI0SCLK_SSOIH(ParValue) (pst_u16ESEI0SCLK_SSOI() -> u16H = (ParValue))
N#define u16GetESEI0SCLK_SSOIH() (pst_u16ESEI0SCLK_SSOI() -> u16H)
N            
N/* Word access */
N#define vSetESEI0SCLK_SSOI(ParValue)  (*pu32ESEI0SCLK_SSOI() = (ParValue))
N#define u32GetESEI0SCLK_SSOI()  (*pu32ESEI0SCLK_SSOI() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: I2S0CLK_WS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC03021FC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define I2S0CLK_WS_REG__       0xC03021FCU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   I2S0CLK_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   I2S0CLK_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   I2S0CLK_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   I2S0CLK_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   I2S0CLK_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   I2S0CLK_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   I2S0WS_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   I2S0WS_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   I2S0WS_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   I2S0WS_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   I2S0WS_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   I2S0WS_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} I2S0CLK_WS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} I2S0CLK_WS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} I2S0CLK_WS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32I2S0CLK_WS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitI2S0CLK_WS()     ((volatile I2S0CLK_WS_bit_view_st *)\
N(I2S0CLK_WS_REG__ ))
X#define pst_bitI2S0CLK_WS()     ((volatile I2S0CLK_WS_bit_view_st *)(I2S0CLK_WS_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8I2S0CLK_WS()     ((volatile I2S0CLK_WS_byte_view_st *)\
N(I2S0CLK_WS_REG__ ))
X#define pst_u8I2S0CLK_WS()     ((volatile I2S0CLK_WS_byte_view_st *)(I2S0CLK_WS_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16I2S0CLK_WS()     ((volatile I2S0CLK_WS_halfword_view_st *)\
N(I2S0CLK_WS_REG__ ))
X#define pst_u16I2S0CLK_WS()     ((volatile I2S0CLK_WS_halfword_view_st *)(I2S0CLK_WS_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32I2S0CLK_WS()     ((volatile u32I2S0CLK_WS_word_view *)\
N(I2S0CLK_WS_REG__ ))
X#define pu32I2S0CLK_WS()     ((volatile u32I2S0CLK_WS_word_view *)(I2S0CLK_WS_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetI2S0CLK_WS_I2S0CLK_SEL() (pst_bitI2S0CLK_WS() -> I2S0CLK_SEL)
N#define vSetI2S0CLK_WS_I2S0CLK_SEL(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_SEL=(ParValue))
N#define biGetI2S0CLK_WS_I2S0CLK_PU() (pst_bitI2S0CLK_WS() -> I2S0CLK_PU)
N#define vSetI2S0CLK_WS_I2S0CLK_PU(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_PU=(ParValue))
N#define biGetI2S0CLK_WS_I2S0CLK_PD() (pst_bitI2S0CLK_WS() -> I2S0CLK_PD)
N#define vSetI2S0CLK_WS_I2S0CLK_PD(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_PD=(ParValue))
N#define biGetI2S0CLK_WS_I2S0CLK_SMT() (pst_bitI2S0CLK_WS() -> I2S0CLK_SMT)
N#define vSetI2S0CLK_WS_I2S0CLK_SMT(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_SMT=(ParValue))
N#define biGetI2S0CLK_WS_I2S0CLK_IMP() (pst_bitI2S0CLK_WS() -> I2S0CLK_IMP)
N#define vSetI2S0CLK_WS_I2S0CLK_IMP(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_IMP=(ParValue))
N#define biGetI2S0CLK_WS_I2S0CLK_LATCHN() (pst_bitI2S0CLK_WS() -> I2S0CLK_LATCHN)
N#define vSetI2S0CLK_WS_I2S0CLK_LATCHN(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0CLK_LATCHN=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_SEL() (pst_bitI2S0CLK_WS() -> I2S0WS_SEL)
N#define vSetI2S0CLK_WS_I2S0WS_SEL(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_SEL=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_PU() (pst_bitI2S0CLK_WS() -> I2S0WS_PU)
N#define vSetI2S0CLK_WS_I2S0WS_PU(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_PU=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_PD() (pst_bitI2S0CLK_WS() -> I2S0WS_PD)
N#define vSetI2S0CLK_WS_I2S0WS_PD(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_PD=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_SMT() (pst_bitI2S0CLK_WS() -> I2S0WS_SMT)
N#define vSetI2S0CLK_WS_I2S0WS_SMT(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_SMT=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_IMP() (pst_bitI2S0CLK_WS() -> I2S0WS_IMP)
N#define vSetI2S0CLK_WS_I2S0WS_IMP(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_IMP=(ParValue))
N#define biGetI2S0CLK_WS_I2S0WS_LATCHN() (pst_bitI2S0CLK_WS() -> I2S0WS_LATCHN)
N#define vSetI2S0CLK_WS_I2S0WS_LATCHN(ParValue)  (pst_bitI2S0CLK_WS() -> I2S0WS_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetI2S0CLK_WSLL(ParValue) (pst_u8I2S0CLK_WS() -> u8LL = (ParValue))
N#define u8GetI2S0CLK_WSLL() (pst_u8I2S0CLK_WS() -> u8LL)
N/* LH-struct byte access */
N#define vSetI2S0CLK_WSLH(ParValue) (pst_u8I2S0CLK_WS() -> u8LH = (ParValue))
N#define u8GetI2S0CLK_WSLH() (pst_u8I2S0CLK_WS() -> u8LH)
N/* HL-struct byte access */
N#define vSetI2S0CLK_WSHL(ParValue) (pst_u8I2S0CLK_WS() -> u8HL = (ParValue))
N#define u8GetI2S0CLK_WSHL() (pst_u8I2S0CLK_WS() -> u8HL)
N/* HH-struct byte access */
N#define vSetI2S0CLK_WSHH(ParValue) (pst_u8I2S0CLK_WS() -> u8HH = (ParValue))
N#define u8GetI2S0CLK_WSHH() (pst_u8I2S0CLK_WS() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetI2S0CLK_WSL(ParValue) (pst_u16I2S0CLK_WS() -> u16L = (ParValue))
N#define u16GetI2S0CLK_WSL() (pst_u16I2S0CLK_WS() -> u16L)
N#define vSetI2S0CLK_WSH(ParValue) (pst_u16I2S0CLK_WS() -> u16H = (ParValue))
N#define u16GetI2S0CLK_WSH() (pst_u16I2S0CLK_WS() -> u16H)
N            
N/* Word access */
N#define vSetI2S0CLK_WS(ParValue)  (*pu32I2S0CLK_WS() = (ParValue))
N#define u32GetI2S0CLK_WS()  (*pu32I2S0CLK_WS() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: I2S0SD_MCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302200                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define I2S0SD_MCLK_REG__       0xC0302200U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   I2S0SD_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   I2S0SD_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   I2S0SD_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   I2S0SD_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   I2S0SD_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   I2S0SD_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   I2SMCLK_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   I2SMCLK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   I2SMCLK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   I2SMCLK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   I2SMCLK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   I2SMCLK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} I2S0SD_MCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} I2S0SD_MCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} I2S0SD_MCLK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32I2S0SD_MCLK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitI2S0SD_MCLK()     ((volatile I2S0SD_MCLK_bit_view_st *)\
N(I2S0SD_MCLK_REG__ ))
X#define pst_bitI2S0SD_MCLK()     ((volatile I2S0SD_MCLK_bit_view_st *)(I2S0SD_MCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8I2S0SD_MCLK()     ((volatile I2S0SD_MCLK_byte_view_st *)\
N(I2S0SD_MCLK_REG__ ))
X#define pst_u8I2S0SD_MCLK()     ((volatile I2S0SD_MCLK_byte_view_st *)(I2S0SD_MCLK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16I2S0SD_MCLK()     ((volatile I2S0SD_MCLK_halfword_view_st *)\
N(I2S0SD_MCLK_REG__ ))
X#define pst_u16I2S0SD_MCLK()     ((volatile I2S0SD_MCLK_halfword_view_st *)(I2S0SD_MCLK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32I2S0SD_MCLK()     ((volatile u32I2S0SD_MCLK_word_view *)\
N(I2S0SD_MCLK_REG__ ))
X#define pu32I2S0SD_MCLK()     ((volatile u32I2S0SD_MCLK_word_view *)(I2S0SD_MCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetI2S0SD_MCLK_I2S0SD_SEL() (pst_bitI2S0SD_MCLK() -> I2S0SD_SEL)
N#define vSetI2S0SD_MCLK_I2S0SD_SEL(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_SEL=(ParValue))
N#define biGetI2S0SD_MCLK_I2S0SD_PU() (pst_bitI2S0SD_MCLK() -> I2S0SD_PU)
N#define vSetI2S0SD_MCLK_I2S0SD_PU(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_PU=(ParValue))
N#define biGetI2S0SD_MCLK_I2S0SD_PD() (pst_bitI2S0SD_MCLK() -> I2S0SD_PD)
N#define vSetI2S0SD_MCLK_I2S0SD_PD(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_PD=(ParValue))
N#define biGetI2S0SD_MCLK_I2S0SD_SMT() (pst_bitI2S0SD_MCLK() -> I2S0SD_SMT)
N#define vSetI2S0SD_MCLK_I2S0SD_SMT(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_SMT=(ParValue))
N#define biGetI2S0SD_MCLK_I2S0SD_IMP() (pst_bitI2S0SD_MCLK() -> I2S0SD_IMP)
N#define vSetI2S0SD_MCLK_I2S0SD_IMP(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_IMP=(ParValue))
N#define biGetI2S0SD_MCLK_I2S0SD_LATCHN() (pst_bitI2S0SD_MCLK() -> I2S0SD_LATCHN)
N#define vSetI2S0SD_MCLK_I2S0SD_LATCHN(ParValue)  (pst_bitI2S0SD_MCLK() -> I2S0SD_LATCHN=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_SEL() (pst_bitI2S0SD_MCLK() -> I2SMCLK_SEL)
N#define vSetI2S0SD_MCLK_I2SMCLK_SEL(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_SEL=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_PU() (pst_bitI2S0SD_MCLK() -> I2SMCLK_PU)
N#define vSetI2S0SD_MCLK_I2SMCLK_PU(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_PU=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_PD() (pst_bitI2S0SD_MCLK() -> I2SMCLK_PD)
N#define vSetI2S0SD_MCLK_I2SMCLK_PD(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_PD=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_SMT() (pst_bitI2S0SD_MCLK() -> I2SMCLK_SMT)
N#define vSetI2S0SD_MCLK_I2SMCLK_SMT(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_SMT=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_IMP() (pst_bitI2S0SD_MCLK() -> I2SMCLK_IMP)
N#define vSetI2S0SD_MCLK_I2SMCLK_IMP(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_IMP=(ParValue))
N#define biGetI2S0SD_MCLK_I2SMCLK_LATCHN() (pst_bitI2S0SD_MCLK() -> I2SMCLK_LATCHN)
N#define vSetI2S0SD_MCLK_I2SMCLK_LATCHN(ParValue)  (pst_bitI2S0SD_MCLK() -> I2SMCLK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetI2S0SD_MCLKLL(ParValue) (pst_u8I2S0SD_MCLK() -> u8LL = (ParValue))
N#define u8GetI2S0SD_MCLKLL() (pst_u8I2S0SD_MCLK() -> u8LL)
N/* LH-struct byte access */
N#define vSetI2S0SD_MCLKLH(ParValue) (pst_u8I2S0SD_MCLK() -> u8LH = (ParValue))
N#define u8GetI2S0SD_MCLKLH() (pst_u8I2S0SD_MCLK() -> u8LH)
N/* HL-struct byte access */
N#define vSetI2S0SD_MCLKHL(ParValue) (pst_u8I2S0SD_MCLK() -> u8HL = (ParValue))
N#define u8GetI2S0SD_MCLKHL() (pst_u8I2S0SD_MCLK() -> u8HL)
N/* HH-struct byte access */
N#define vSetI2S0SD_MCLKHH(ParValue) (pst_u8I2S0SD_MCLK() -> u8HH = (ParValue))
N#define u8GetI2S0SD_MCLKHH() (pst_u8I2S0SD_MCLK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetI2S0SD_MCLKL(ParValue) (pst_u16I2S0SD_MCLK() -> u16L = (ParValue))
N#define u16GetI2S0SD_MCLKL() (pst_u16I2S0SD_MCLK() -> u16L)
N#define vSetI2S0SD_MCLKH(ParValue) (pst_u16I2S0SD_MCLK() -> u16H = (ParValue))
N#define u16GetI2S0SD_MCLKH() (pst_u16I2S0SD_MCLK() -> u16H)
N            
N/* Word access */
N#define vSetI2S0SD_MCLK(ParValue)  (*pu32I2S0SD_MCLK() = (ParValue))
N#define u32GetI2S0SD_MCLK()  (*pu32I2S0SD_MCLK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PWMOUT00                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302204                             
N*       ACCESS  : 8, 16, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PWMOUT00_REG__       0xC0302204U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint16_t   PWMOUT00_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint16_t   	:5; 	 /* 3..7  bit(s) R */
N  uint16_t   PWMOUT00_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint16_t   PWMOUT00_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint16_t   PWMOUT00_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint16_t   PWMOUT00_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint16_t   PWMOUT00_LATCHN	:1; 	 /* 13..13  bit(s) R/W */ 
N  uint16_t   	:2; 	 /* 14..31  bit(s) R */                    
N} PWMOUT00_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8L;       
N  uint8_t u8H;       
N} PWMOUT00_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef uint16_t u16PWMOUT00_halfword_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPWMOUT00()     ((volatile PWMOUT00_bit_view_st *)\
N(PWMOUT00_REG__ ))
X#define pst_bitPWMOUT00()     ((volatile PWMOUT00_bit_view_st *)(PWMOUT00_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PWMOUT00()     ((volatile PWMOUT00_byte_view_st *)\
N(PWMOUT00_REG__ ))
X#define pst_u8PWMOUT00()     ((volatile PWMOUT00_byte_view_st *)(PWMOUT00_REG__ ))
N            
N/* Pointer to HALFWORD */
N#define pu16PWMOUT00()     ((volatile u16PWMOUT00_halfword_view *)\
N(PWMOUT00_REG__ ))
X#define pu16PWMOUT00()     ((volatile u16PWMOUT00_halfword_view *)(PWMOUT00_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPWMOUT00_PWMOUT00_SEL() (pst_bitPWMOUT00() -> PWMOUT00_SEL)
N#define vSetPWMOUT00_PWMOUT00_SEL(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_SEL=(ParValue))
N#define biGetPWMOUT00_PWMOUT00_PU() (pst_bitPWMOUT00() -> PWMOUT00_PU)
N#define vSetPWMOUT00_PWMOUT00_PU(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_PU=(ParValue))
N#define biGetPWMOUT00_PWMOUT00_PD() (pst_bitPWMOUT00() -> PWMOUT00_PD)
N#define vSetPWMOUT00_PWMOUT00_PD(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_PD=(ParValue))
N#define biGetPWMOUT00_PWMOUT00_SMT() (pst_bitPWMOUT00() -> PWMOUT00_SMT)
N#define vSetPWMOUT00_PWMOUT00_SMT(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_SMT=(ParValue))
N#define biGetPWMOUT00_PWMOUT00_IMP() (pst_bitPWMOUT00() -> PWMOUT00_IMP)
N#define vSetPWMOUT00_PWMOUT00_IMP(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_IMP=(ParValue))
N#define biGetPWMOUT00_PWMOUT00_LATCHN() (pst_bitPWMOUT00() -> PWMOUT00_LATCHN)
N#define vSetPWMOUT00_PWMOUT00_LATCHN(ParValue)  (pst_bitPWMOUT00() -> PWMOUT00_LATCHN=(ParValue))
N            
N/* L-struct byte access */
N#define vSetPWMOUT00L(ParValue) (pst_u8PWMOUT00() -> u8L = (ParValue))
N#define u8GetPWMOUT00L() (pst_u8PWMOUT00() -> u8L)
N/* H-struct byte access */
N#define vSetPWMOUT00H(ParValue) (pst_u8PWMOUT00() -> u8H = (ParValue))
N#define u8GetPWMOUT00H() (pst_u8PWMOUT00() -> u8H)
N            
N/* Half-word access */ 
N#define vSetPWMOUT00(ParValue) (*pu16PWMOUT00()  = (ParValue))
N#define u16GetPWMOUT00() (*pu16PWMOUT00() )     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: HSPWM0_0N                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302208                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define HSPWM0_0N_REG__       0xC0302208U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   HSPWM0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   HSPWM0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   HSPWM0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   HSPWM0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   HSPWM0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   HSPWM0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   HSPWM0N_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   HSPWM0N_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   HSPWM0N_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   HSPWM0N_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   HSPWM0N_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   HSPWM0N_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} HSPWM0_0N_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} HSPWM0_0N_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} HSPWM0_0N_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32HSPWM0_0N_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitHSPWM0_0N()     ((volatile HSPWM0_0N_bit_view_st *)\
N(HSPWM0_0N_REG__ ))
X#define pst_bitHSPWM0_0N()     ((volatile HSPWM0_0N_bit_view_st *)(HSPWM0_0N_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8HSPWM0_0N()     ((volatile HSPWM0_0N_byte_view_st *)\
N(HSPWM0_0N_REG__ ))
X#define pst_u8HSPWM0_0N()     ((volatile HSPWM0_0N_byte_view_st *)(HSPWM0_0N_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16HSPWM0_0N()     ((volatile HSPWM0_0N_halfword_view_st *)\
N(HSPWM0_0N_REG__ ))
X#define pst_u16HSPWM0_0N()     ((volatile HSPWM0_0N_halfword_view_st *)(HSPWM0_0N_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32HSPWM0_0N()     ((volatile u32HSPWM0_0N_word_view *)\
N(HSPWM0_0N_REG__ ))
X#define pu32HSPWM0_0N()     ((volatile u32HSPWM0_0N_word_view *)(HSPWM0_0N_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetHSPWM0_0N_HSPWM0_SEL() (pst_bitHSPWM0_0N() -> HSPWM0_SEL)
N#define vSetHSPWM0_0N_HSPWM0_SEL(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_SEL=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0_PU() (pst_bitHSPWM0_0N() -> HSPWM0_PU)
N#define vSetHSPWM0_0N_HSPWM0_PU(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_PU=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0_PD() (pst_bitHSPWM0_0N() -> HSPWM0_PD)
N#define vSetHSPWM0_0N_HSPWM0_PD(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_PD=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0_SMT() (pst_bitHSPWM0_0N() -> HSPWM0_SMT)
N#define vSetHSPWM0_0N_HSPWM0_SMT(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_SMT=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0_IMP() (pst_bitHSPWM0_0N() -> HSPWM0_IMP)
N#define vSetHSPWM0_0N_HSPWM0_IMP(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_IMP=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0_LATCHN() (pst_bitHSPWM0_0N() -> HSPWM0_LATCHN)
N#define vSetHSPWM0_0N_HSPWM0_LATCHN(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0_LATCHN=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_SEL() (pst_bitHSPWM0_0N() -> HSPWM0N_SEL)
N#define vSetHSPWM0_0N_HSPWM0N_SEL(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_SEL=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_PU() (pst_bitHSPWM0_0N() -> HSPWM0N_PU)
N#define vSetHSPWM0_0N_HSPWM0N_PU(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_PU=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_PD() (pst_bitHSPWM0_0N() -> HSPWM0N_PD)
N#define vSetHSPWM0_0N_HSPWM0N_PD(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_PD=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_SMT() (pst_bitHSPWM0_0N() -> HSPWM0N_SMT)
N#define vSetHSPWM0_0N_HSPWM0N_SMT(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_SMT=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_IMP() (pst_bitHSPWM0_0N() -> HSPWM0N_IMP)
N#define vSetHSPWM0_0N_HSPWM0N_IMP(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_IMP=(ParValue))
N#define biGetHSPWM0_0N_HSPWM0N_LATCHN() (pst_bitHSPWM0_0N() -> HSPWM0N_LATCHN)
N#define vSetHSPWM0_0N_HSPWM0N_LATCHN(ParValue)  (pst_bitHSPWM0_0N() -> HSPWM0N_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetHSPWM0_0NLL(ParValue) (pst_u8HSPWM0_0N() -> u8LL = (ParValue))
N#define u8GetHSPWM0_0NLL() (pst_u8HSPWM0_0N() -> u8LL)
N/* LH-struct byte access */
N#define vSetHSPWM0_0NLH(ParValue) (pst_u8HSPWM0_0N() -> u8LH = (ParValue))
N#define u8GetHSPWM0_0NLH() (pst_u8HSPWM0_0N() -> u8LH)
N/* HL-struct byte access */
N#define vSetHSPWM0_0NHL(ParValue) (pst_u8HSPWM0_0N() -> u8HL = (ParValue))
N#define u8GetHSPWM0_0NHL() (pst_u8HSPWM0_0N() -> u8HL)
N/* HH-struct byte access */
N#define vSetHSPWM0_0NHH(ParValue) (pst_u8HSPWM0_0N() -> u8HH = (ParValue))
N#define u8GetHSPWM0_0NHH() (pst_u8HSPWM0_0N() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetHSPWM0_0NL(ParValue) (pst_u16HSPWM0_0N() -> u16L = (ParValue))
N#define u16GetHSPWM0_0NL() (pst_u16HSPWM0_0N() -> u16L)
N#define vSetHSPWM0_0NH(ParValue) (pst_u16HSPWM0_0N() -> u16H = (ParValue))
N#define u16GetHSPWM0_0NH() (pst_u16HSPWM0_0N() -> u16H)
N            
N/* Word access */
N#define vSetHSPWM0_0N(ParValue)  (*pu32HSPWM0_0N() = (ParValue))
N#define u32GetHSPWM0_0N()  (*pu32HSPWM0_0N() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: HSPWM1_1N                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030220C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define HSPWM1_1N_REG__       0xC030220CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   HSPWM1_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   HSPWM1_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   HSPWM1_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   HSPWM1_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   HSPWM1_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   HSPWM1_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   HSPWM1N_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   HSPWM1N_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   HSPWM1N_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   HSPWM1N_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   HSPWM1N_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   HSPWM1N_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} HSPWM1_1N_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} HSPWM1_1N_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} HSPWM1_1N_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32HSPWM1_1N_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitHSPWM1_1N()     ((volatile HSPWM1_1N_bit_view_st *)\
N(HSPWM1_1N_REG__ ))
X#define pst_bitHSPWM1_1N()     ((volatile HSPWM1_1N_bit_view_st *)(HSPWM1_1N_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8HSPWM1_1N()     ((volatile HSPWM1_1N_byte_view_st *)\
N(HSPWM1_1N_REG__ ))
X#define pst_u8HSPWM1_1N()     ((volatile HSPWM1_1N_byte_view_st *)(HSPWM1_1N_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16HSPWM1_1N()     ((volatile HSPWM1_1N_halfword_view_st *)\
N(HSPWM1_1N_REG__ ))
X#define pst_u16HSPWM1_1N()     ((volatile HSPWM1_1N_halfword_view_st *)(HSPWM1_1N_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32HSPWM1_1N()     ((volatile u32HSPWM1_1N_word_view *)\
N(HSPWM1_1N_REG__ ))
X#define pu32HSPWM1_1N()     ((volatile u32HSPWM1_1N_word_view *)(HSPWM1_1N_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetHSPWM1_1N_HSPWM1_SEL() (pst_bitHSPWM1_1N() -> HSPWM1_SEL)
N#define vSetHSPWM1_1N_HSPWM1_SEL(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_SEL=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1_PU() (pst_bitHSPWM1_1N() -> HSPWM1_PU)
N#define vSetHSPWM1_1N_HSPWM1_PU(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_PU=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1_PD() (pst_bitHSPWM1_1N() -> HSPWM1_PD)
N#define vSetHSPWM1_1N_HSPWM1_PD(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_PD=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1_SMT() (pst_bitHSPWM1_1N() -> HSPWM1_SMT)
N#define vSetHSPWM1_1N_HSPWM1_SMT(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_SMT=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1_IMP() (pst_bitHSPWM1_1N() -> HSPWM1_IMP)
N#define vSetHSPWM1_1N_HSPWM1_IMP(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_IMP=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1_LATCHN() (pst_bitHSPWM1_1N() -> HSPWM1_LATCHN)
N#define vSetHSPWM1_1N_HSPWM1_LATCHN(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1_LATCHN=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_SEL() (pst_bitHSPWM1_1N() -> HSPWM1N_SEL)
N#define vSetHSPWM1_1N_HSPWM1N_SEL(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_SEL=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_PU() (pst_bitHSPWM1_1N() -> HSPWM1N_PU)
N#define vSetHSPWM1_1N_HSPWM1N_PU(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_PU=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_PD() (pst_bitHSPWM1_1N() -> HSPWM1N_PD)
N#define vSetHSPWM1_1N_HSPWM1N_PD(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_PD=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_SMT() (pst_bitHSPWM1_1N() -> HSPWM1N_SMT)
N#define vSetHSPWM1_1N_HSPWM1N_SMT(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_SMT=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_IMP() (pst_bitHSPWM1_1N() -> HSPWM1N_IMP)
N#define vSetHSPWM1_1N_HSPWM1N_IMP(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_IMP=(ParValue))
N#define biGetHSPWM1_1N_HSPWM1N_LATCHN() (pst_bitHSPWM1_1N() -> HSPWM1N_LATCHN)
N#define vSetHSPWM1_1N_HSPWM1N_LATCHN(ParValue)  (pst_bitHSPWM1_1N() -> HSPWM1N_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetHSPWM1_1NLL(ParValue) (pst_u8HSPWM1_1N() -> u8LL = (ParValue))
N#define u8GetHSPWM1_1NLL() (pst_u8HSPWM1_1N() -> u8LL)
N/* LH-struct byte access */
N#define vSetHSPWM1_1NLH(ParValue) (pst_u8HSPWM1_1N() -> u8LH = (ParValue))
N#define u8GetHSPWM1_1NLH() (pst_u8HSPWM1_1N() -> u8LH)
N/* HL-struct byte access */
N#define vSetHSPWM1_1NHL(ParValue) (pst_u8HSPWM1_1N() -> u8HL = (ParValue))
N#define u8GetHSPWM1_1NHL() (pst_u8HSPWM1_1N() -> u8HL)
N/* HH-struct byte access */
N#define vSetHSPWM1_1NHH(ParValue) (pst_u8HSPWM1_1N() -> u8HH = (ParValue))
N#define u8GetHSPWM1_1NHH() (pst_u8HSPWM1_1N() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetHSPWM1_1NL(ParValue) (pst_u16HSPWM1_1N() -> u16L = (ParValue))
N#define u16GetHSPWM1_1NL() (pst_u16HSPWM1_1N() -> u16L)
N#define vSetHSPWM1_1NH(ParValue) (pst_u16HSPWM1_1N() -> u16H = (ParValue))
N#define u16GetHSPWM1_1NH() (pst_u16HSPWM1_1N() -> u16H)
N            
N/* Word access */
N#define vSetHSPWM1_1N(ParValue)  (*pu32HSPWM1_1N() = (ParValue))
N#define u32GetHSPWM1_1N()  (*pu32HSPWM1_1N() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: UART0RX_TX                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302210                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define UART0RX_TX_REG__       0xC0302210U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   UART0RX_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   UART0RX_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   UART0RX_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   UART0RX_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   UART0RX_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   UART0RX_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   UART0TX_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   UART0TX_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   UART0TX_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   UART0TX_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   UART0TX_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   UART0TX_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} UART0RX_TX_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} UART0RX_TX_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} UART0RX_TX_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32UART0RX_TX_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitUART0RX_TX()     ((volatile UART0RX_TX_bit_view_st *)\
N(UART0RX_TX_REG__ ))
X#define pst_bitUART0RX_TX()     ((volatile UART0RX_TX_bit_view_st *)(UART0RX_TX_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8UART0RX_TX()     ((volatile UART0RX_TX_byte_view_st *)\
N(UART0RX_TX_REG__ ))
X#define pst_u8UART0RX_TX()     ((volatile UART0RX_TX_byte_view_st *)(UART0RX_TX_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16UART0RX_TX()     ((volatile UART0RX_TX_halfword_view_st *)\
N(UART0RX_TX_REG__ ))
X#define pst_u16UART0RX_TX()     ((volatile UART0RX_TX_halfword_view_st *)(UART0RX_TX_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32UART0RX_TX()     ((volatile u32UART0RX_TX_word_view *)\
N(UART0RX_TX_REG__ ))
X#define pu32UART0RX_TX()     ((volatile u32UART0RX_TX_word_view *)(UART0RX_TX_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetUART0RX_TX_UART0RX_SEL() (pst_bitUART0RX_TX() -> UART0RX_SEL)
N#define vSetUART0RX_TX_UART0RX_SEL(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_SEL=(ParValue))
N#define biGetUART0RX_TX_UART0RX_PU() (pst_bitUART0RX_TX() -> UART0RX_PU)
N#define vSetUART0RX_TX_UART0RX_PU(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_PU=(ParValue))
N#define biGetUART0RX_TX_UART0RX_PD() (pst_bitUART0RX_TX() -> UART0RX_PD)
N#define vSetUART0RX_TX_UART0RX_PD(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_PD=(ParValue))
N#define biGetUART0RX_TX_UART0RX_SMT() (pst_bitUART0RX_TX() -> UART0RX_SMT)
N#define vSetUART0RX_TX_UART0RX_SMT(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_SMT=(ParValue))
N#define biGetUART0RX_TX_UART0RX_IMP() (pst_bitUART0RX_TX() -> UART0RX_IMP)
N#define vSetUART0RX_TX_UART0RX_IMP(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_IMP=(ParValue))
N#define biGetUART0RX_TX_UART0RX_LATCHN() (pst_bitUART0RX_TX() -> UART0RX_LATCHN)
N#define vSetUART0RX_TX_UART0RX_LATCHN(ParValue)  (pst_bitUART0RX_TX() -> UART0RX_LATCHN=(ParValue))
N#define biGetUART0RX_TX_UART0TX_SEL() (pst_bitUART0RX_TX() -> UART0TX_SEL)
N#define vSetUART0RX_TX_UART0TX_SEL(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_SEL=(ParValue))
N#define biGetUART0RX_TX_UART0TX_PU() (pst_bitUART0RX_TX() -> UART0TX_PU)
N#define vSetUART0RX_TX_UART0TX_PU(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_PU=(ParValue))
N#define biGetUART0RX_TX_UART0TX_PD() (pst_bitUART0RX_TX() -> UART0TX_PD)
N#define vSetUART0RX_TX_UART0TX_PD(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_PD=(ParValue))
N#define biGetUART0RX_TX_UART0TX_SMT() (pst_bitUART0RX_TX() -> UART0TX_SMT)
N#define vSetUART0RX_TX_UART0TX_SMT(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_SMT=(ParValue))
N#define biGetUART0RX_TX_UART0TX_IMP() (pst_bitUART0RX_TX() -> UART0TX_IMP)
N#define vSetUART0RX_TX_UART0TX_IMP(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_IMP=(ParValue))
N#define biGetUART0RX_TX_UART0TX_LATCHN() (pst_bitUART0RX_TX() -> UART0TX_LATCHN)
N#define vSetUART0RX_TX_UART0TX_LATCHN(ParValue)  (pst_bitUART0RX_TX() -> UART0TX_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetUART0RX_TXLL(ParValue) (pst_u8UART0RX_TX() -> u8LL = (ParValue))
N#define u8GetUART0RX_TXLL() (pst_u8UART0RX_TX() -> u8LL)
N/* LH-struct byte access */
N#define vSetUART0RX_TXLH(ParValue) (pst_u8UART0RX_TX() -> u8LH = (ParValue))
N#define u8GetUART0RX_TXLH() (pst_u8UART0RX_TX() -> u8LH)
N/* HL-struct byte access */
N#define vSetUART0RX_TXHL(ParValue) (pst_u8UART0RX_TX() -> u8HL = (ParValue))
N#define u8GetUART0RX_TXHL() (pst_u8UART0RX_TX() -> u8HL)
N/* HH-struct byte access */
N#define vSetUART0RX_TXHH(ParValue) (pst_u8UART0RX_TX() -> u8HH = (ParValue))
N#define u8GetUART0RX_TXHH() (pst_u8UART0RX_TX() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetUART0RX_TXL(ParValue) (pst_u16UART0RX_TX() -> u16L = (ParValue))
N#define u16GetUART0RX_TXL() (pst_u16UART0RX_TX() -> u16L)
N#define vSetUART0RX_TXH(ParValue) (pst_u16UART0RX_TX() -> u16H = (ParValue))
N#define u16GetUART0RX_TXH() (pst_u16UART0RX_TX() -> u16H)
N            
N/* Word access */
N#define vSetUART0RX_TX(ParValue)  (*pu32UART0RX_TX() = (ParValue))
N#define u32GetUART0RX_TX()  (*pu32UART0RX_TX() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SIP_QSPI_SIO0_SIO1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302220                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SIP_QSPI_SIO0_SIO1_REG__       0xC0302220U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   SIP_QSPI_SIO0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO0_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO0_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   SIP_QSPI_SIO1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO1_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO1_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} SIP_QSPI_SIO0_SIO1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SIP_QSPI_SIO0_SIO1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SIP_QSPI_SIO0_SIO1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SIP_QSPI_SIO0_SIO1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_bit_view_st *)\
N(SIP_QSPI_SIO0_SIO1_REG__ ))
X#define pst_bitSIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_bit_view_st *)(SIP_QSPI_SIO0_SIO1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_byte_view_st *)\
N(SIP_QSPI_SIO0_SIO1_REG__ ))
X#define pst_u8SIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_byte_view_st *)(SIP_QSPI_SIO0_SIO1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_halfword_view_st *)\
N(SIP_QSPI_SIO0_SIO1_REG__ ))
X#define pst_u16SIP_QSPI_SIO0_SIO1()     ((volatile SIP_QSPI_SIO0_SIO1_halfword_view_st *)(SIP_QSPI_SIO0_SIO1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SIP_QSPI_SIO0_SIO1()     ((volatile u32SIP_QSPI_SIO0_SIO1_word_view *)\
N(SIP_QSPI_SIO0_SIO1_REG__ ))
X#define pu32SIP_QSPI_SIO0_SIO1()     ((volatile u32SIP_QSPI_SIO0_SIO1_word_view *)(SIP_QSPI_SIO0_SIO1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_PU() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_PU)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_PU(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_PU=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_PD() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_PD)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_PD(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_PD=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_SMT() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_SMT)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_SMT(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_SMT=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_IMP() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_IMP)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_IMP(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_IMP=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_LATCHN() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_LATCHN)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO0_LATCHN(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO0_LATCHN=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_PU() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_PU)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_PU(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_PU=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_PD() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_PD)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_PD(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_PD=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_SMT() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_SMT)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_SMT(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_SMT=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_IMP() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_IMP)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_IMP(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_IMP=(ParValue))
N#define biGetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_LATCHN() (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_LATCHN)
N#define vSetSIP_QSPI_SIO0_SIO1_SIP_QSPI_SIO1_LATCHN(ParValue)  (pst_bitSIP_QSPI_SIO0_SIO1() -> SIP_QSPI_SIO1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSIP_QSPI_SIO0_SIO1LL(ParValue) (pst_u8SIP_QSPI_SIO0_SIO1() -> u8LL = (ParValue))
N#define u8GetSIP_QSPI_SIO0_SIO1LL() (pst_u8SIP_QSPI_SIO0_SIO1() -> u8LL)
N/* LH-struct byte access */
N#define vSetSIP_QSPI_SIO0_SIO1LH(ParValue) (pst_u8SIP_QSPI_SIO0_SIO1() -> u8LH = (ParValue))
N#define u8GetSIP_QSPI_SIO0_SIO1LH() (pst_u8SIP_QSPI_SIO0_SIO1() -> u8LH)
N/* HL-struct byte access */
N#define vSetSIP_QSPI_SIO0_SIO1HL(ParValue) (pst_u8SIP_QSPI_SIO0_SIO1() -> u8HL = (ParValue))
N#define u8GetSIP_QSPI_SIO0_SIO1HL() (pst_u8SIP_QSPI_SIO0_SIO1() -> u8HL)
N/* HH-struct byte access */
N#define vSetSIP_QSPI_SIO0_SIO1HH(ParValue) (pst_u8SIP_QSPI_SIO0_SIO1() -> u8HH = (ParValue))
N#define u8GetSIP_QSPI_SIO0_SIO1HH() (pst_u8SIP_QSPI_SIO0_SIO1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSIP_QSPI_SIO0_SIO1L(ParValue) (pst_u16SIP_QSPI_SIO0_SIO1() -> u16L = (ParValue))
N#define u16GetSIP_QSPI_SIO0_SIO1L() (pst_u16SIP_QSPI_SIO0_SIO1() -> u16L)
N#define vSetSIP_QSPI_SIO0_SIO1H(ParValue) (pst_u16SIP_QSPI_SIO0_SIO1() -> u16H = (ParValue))
N#define u16GetSIP_QSPI_SIO0_SIO1H() (pst_u16SIP_QSPI_SIO0_SIO1() -> u16H)
N            
N/* Word access */
N#define vSetSIP_QSPI_SIO0_SIO1(ParValue)  (*pu32SIP_QSPI_SIO0_SIO1() = (ParValue))
N#define u32GetSIP_QSPI_SIO0_SIO1()  (*pu32SIP_QSPI_SIO0_SIO1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SIP_QSPI_SIO2_SIO3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302224                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SIP_QSPI_SIO2_SIO3_REG__       0xC0302224U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   SIP_QSPI_SIO2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO2_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO2_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   SIP_QSPI_SIO3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO3_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO3_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   SIP_QSPI_SIO3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} SIP_QSPI_SIO2_SIO3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SIP_QSPI_SIO2_SIO3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SIP_QSPI_SIO2_SIO3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SIP_QSPI_SIO2_SIO3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_bit_view_st *)\
N(SIP_QSPI_SIO2_SIO3_REG__ ))
X#define pst_bitSIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_bit_view_st *)(SIP_QSPI_SIO2_SIO3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_byte_view_st *)\
N(SIP_QSPI_SIO2_SIO3_REG__ ))
X#define pst_u8SIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_byte_view_st *)(SIP_QSPI_SIO2_SIO3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_halfword_view_st *)\
N(SIP_QSPI_SIO2_SIO3_REG__ ))
X#define pst_u16SIP_QSPI_SIO2_SIO3()     ((volatile SIP_QSPI_SIO2_SIO3_halfword_view_st *)(SIP_QSPI_SIO2_SIO3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SIP_QSPI_SIO2_SIO3()     ((volatile u32SIP_QSPI_SIO2_SIO3_word_view *)\
N(SIP_QSPI_SIO2_SIO3_REG__ ))
X#define pu32SIP_QSPI_SIO2_SIO3()     ((volatile u32SIP_QSPI_SIO2_SIO3_word_view *)(SIP_QSPI_SIO2_SIO3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_PU() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_PU)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_PU(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_PU=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_PD() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_PD)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_PD(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_PD=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_SMT() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_SMT)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_SMT(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_SMT=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_IMP() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_IMP)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_IMP(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_IMP=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_LATCHN() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_LATCHN)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO2_LATCHN(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO2_LATCHN=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_PU() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_PU)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_PU(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_PU=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_PD() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_PD)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_PD(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_PD=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_SMT() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_SMT)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_SMT(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_SMT=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_IMP() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_IMP)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_IMP(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_IMP=(ParValue))
N#define biGetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_LATCHN() (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_LATCHN)
N#define vSetSIP_QSPI_SIO2_SIO3_SIP_QSPI_SIO3_LATCHN(ParValue)  (pst_bitSIP_QSPI_SIO2_SIO3() -> SIP_QSPI_SIO3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSIP_QSPI_SIO2_SIO3LL(ParValue) (pst_u8SIP_QSPI_SIO2_SIO3() -> u8LL = (ParValue))
N#define u8GetSIP_QSPI_SIO2_SIO3LL() (pst_u8SIP_QSPI_SIO2_SIO3() -> u8LL)
N/* LH-struct byte access */
N#define vSetSIP_QSPI_SIO2_SIO3LH(ParValue) (pst_u8SIP_QSPI_SIO2_SIO3() -> u8LH = (ParValue))
N#define u8GetSIP_QSPI_SIO2_SIO3LH() (pst_u8SIP_QSPI_SIO2_SIO3() -> u8LH)
N/* HL-struct byte access */
N#define vSetSIP_QSPI_SIO2_SIO3HL(ParValue) (pst_u8SIP_QSPI_SIO2_SIO3() -> u8HL = (ParValue))
N#define u8GetSIP_QSPI_SIO2_SIO3HL() (pst_u8SIP_QSPI_SIO2_SIO3() -> u8HL)
N/* HH-struct byte access */
N#define vSetSIP_QSPI_SIO2_SIO3HH(ParValue) (pst_u8SIP_QSPI_SIO2_SIO3() -> u8HH = (ParValue))
N#define u8GetSIP_QSPI_SIO2_SIO3HH() (pst_u8SIP_QSPI_SIO2_SIO3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSIP_QSPI_SIO2_SIO3L(ParValue) (pst_u16SIP_QSPI_SIO2_SIO3() -> u16L = (ParValue))
N#define u16GetSIP_QSPI_SIO2_SIO3L() (pst_u16SIP_QSPI_SIO2_SIO3() -> u16L)
N#define vSetSIP_QSPI_SIO2_SIO3H(ParValue) (pst_u16SIP_QSPI_SIO2_SIO3() -> u16H = (ParValue))
N#define u16GetSIP_QSPI_SIO2_SIO3H() (pst_u16SIP_QSPI_SIO2_SIO3() -> u16H)
N            
N/* Word access */
N#define vSetSIP_QSPI_SIO2_SIO3(ParValue)  (*pu32SIP_QSPI_SIO2_SIO3() = (ParValue))
N#define u32GetSIP_QSPI_SIO2_SIO3()  (*pu32SIP_QSPI_SIO2_SIO3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SIP_QSPI_CS_SCLK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302228                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SIP_QSPI_CS_SCLK_REG__       0xC0302228U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   SIP_QSPI_CS_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   SIP_QSPI_CS_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   SIP_QSPI_CS_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   SIP_QSPI_CS_IMP	:2; 	 /* 11..12  bit(s) R/W */
N  uint32_t   SIP_QSPI_CS_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   SIP_QSPI_SCLK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   SIP_QSPI_SCLK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   SIP_QSPI_SCLK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   SIP_QSPI_SCLK_IMP	:2; 	 /* 27..28  bit(s) R/W */
N  uint32_t   SIP_QSPI_SCLK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} SIP_QSPI_CS_SCLK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SIP_QSPI_CS_SCLK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SIP_QSPI_CS_SCLK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SIP_QSPI_CS_SCLK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_bit_view_st *)\
N(SIP_QSPI_CS_SCLK_REG__ ))
X#define pst_bitSIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_bit_view_st *)(SIP_QSPI_CS_SCLK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_byte_view_st *)\
N(SIP_QSPI_CS_SCLK_REG__ ))
X#define pst_u8SIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_byte_view_st *)(SIP_QSPI_CS_SCLK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_halfword_view_st *)\
N(SIP_QSPI_CS_SCLK_REG__ ))
X#define pst_u16SIP_QSPI_CS_SCLK()     ((volatile SIP_QSPI_CS_SCLK_halfword_view_st *)(SIP_QSPI_CS_SCLK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SIP_QSPI_CS_SCLK()     ((volatile u32SIP_QSPI_CS_SCLK_word_view *)\
N(SIP_QSPI_CS_SCLK_REG__ ))
X#define pu32SIP_QSPI_CS_SCLK()     ((volatile u32SIP_QSPI_CS_SCLK_word_view *)(SIP_QSPI_CS_SCLK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_PU() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_PU)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_PU(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_PU=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_PD() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_PD)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_PD(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_PD=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_SMT() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_SMT)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_SMT(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_SMT=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_IMP() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_IMP)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_IMP(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_IMP=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_LATCHN() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_LATCHN)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_CS_LATCHN(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_CS_LATCHN=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_PU() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_PU)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_PU(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_PU=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_PD() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_PD)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_PD(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_PD=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_SMT() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_SMT)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_SMT(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_SMT=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_IMP() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_IMP)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_IMP(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_IMP=(ParValue))
N#define biGetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_LATCHN() (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_LATCHN)
N#define vSetSIP_QSPI_CS_SCLK_SIP_QSPI_SCLK_LATCHN(ParValue)  (pst_bitSIP_QSPI_CS_SCLK() -> SIP_QSPI_SCLK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSIP_QSPI_CS_SCLKLL(ParValue) (pst_u8SIP_QSPI_CS_SCLK() -> u8LL = (ParValue))
N#define u8GetSIP_QSPI_CS_SCLKLL() (pst_u8SIP_QSPI_CS_SCLK() -> u8LL)
N/* LH-struct byte access */
N#define vSetSIP_QSPI_CS_SCLKLH(ParValue) (pst_u8SIP_QSPI_CS_SCLK() -> u8LH = (ParValue))
N#define u8GetSIP_QSPI_CS_SCLKLH() (pst_u8SIP_QSPI_CS_SCLK() -> u8LH)
N/* HL-struct byte access */
N#define vSetSIP_QSPI_CS_SCLKHL(ParValue) (pst_u8SIP_QSPI_CS_SCLK() -> u8HL = (ParValue))
N#define u8GetSIP_QSPI_CS_SCLKHL() (pst_u8SIP_QSPI_CS_SCLK() -> u8HL)
N/* HH-struct byte access */
N#define vSetSIP_QSPI_CS_SCLKHH(ParValue) (pst_u8SIP_QSPI_CS_SCLK() -> u8HH = (ParValue))
N#define u8GetSIP_QSPI_CS_SCLKHH() (pst_u8SIP_QSPI_CS_SCLK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSIP_QSPI_CS_SCLKL(ParValue) (pst_u16SIP_QSPI_CS_SCLK() -> u16L = (ParValue))
N#define u16GetSIP_QSPI_CS_SCLKL() (pst_u16SIP_QSPI_CS_SCLK() -> u16L)
N#define vSetSIP_QSPI_CS_SCLKH(ParValue) (pst_u16SIP_QSPI_CS_SCLK() -> u16H = (ParValue))
N#define u16GetSIP_QSPI_CS_SCLKH() (pst_u16SIP_QSPI_CS_SCLK() -> u16H)
N            
N/* Word access */
N#define vSetSIP_QSPI_CS_SCLK(ParValue)  (*pu32SIP_QSPI_CS_SCLK() = (ParValue))
N#define u32GetSIP_QSPI_CS_SCLK()  (*pu32SIP_QSPI_CS_SCLK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: NMI_RESETN                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302230                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define NMI_RESETN_REG__       0xC0302230U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   NMI_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   NMI_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   NMI_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   NMI_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   RESETN_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   RESETN_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   RESETN_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   RESETN_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} NMI_RESETN_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} NMI_RESETN_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} NMI_RESETN_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32NMI_RESETN_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitNMI_RESETN()     ((volatile NMI_RESETN_bit_view_st *)\
N(NMI_RESETN_REG__ ))
X#define pst_bitNMI_RESETN()     ((volatile NMI_RESETN_bit_view_st *)(NMI_RESETN_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8NMI_RESETN()     ((volatile NMI_RESETN_byte_view_st *)\
N(NMI_RESETN_REG__ ))
X#define pst_u8NMI_RESETN()     ((volatile NMI_RESETN_byte_view_st *)(NMI_RESETN_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16NMI_RESETN()     ((volatile NMI_RESETN_halfword_view_st *)\
N(NMI_RESETN_REG__ ))
X#define pst_u16NMI_RESETN()     ((volatile NMI_RESETN_halfword_view_st *)(NMI_RESETN_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32NMI_RESETN()     ((volatile u32NMI_RESETN_word_view *)\
N(NMI_RESETN_REG__ ))
X#define pu32NMI_RESETN()     ((volatile u32NMI_RESETN_word_view *)(NMI_RESETN_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetNMI_RESETN_NMI_PU() (pst_bitNMI_RESETN() -> NMI_PU)
N#define vSetNMI_RESETN_NMI_PU(ParValue)  (pst_bitNMI_RESETN() -> NMI_PU=(ParValue))
N#define biGetNMI_RESETN_NMI_PD() (pst_bitNMI_RESETN() -> NMI_PD)
N#define vSetNMI_RESETN_NMI_PD(ParValue)  (pst_bitNMI_RESETN() -> NMI_PD=(ParValue))
N#define biGetNMI_RESETN_NMI_SMT() (pst_bitNMI_RESETN() -> NMI_SMT)
N#define vSetNMI_RESETN_NMI_SMT(ParValue)  (pst_bitNMI_RESETN() -> NMI_SMT=(ParValue))
N#define biGetNMI_RESETN_NMI_LATCHN() (pst_bitNMI_RESETN() -> NMI_LATCHN)
N#define vSetNMI_RESETN_NMI_LATCHN(ParValue)  (pst_bitNMI_RESETN() -> NMI_LATCHN=(ParValue))
N#define biGetNMI_RESETN_RESETN_PU() (pst_bitNMI_RESETN() -> RESETN_PU)
N#define vSetNMI_RESETN_RESETN_PU(ParValue)  (pst_bitNMI_RESETN() -> RESETN_PU=(ParValue))
N#define biGetNMI_RESETN_RESETN_PD() (pst_bitNMI_RESETN() -> RESETN_PD)
N#define vSetNMI_RESETN_RESETN_PD(ParValue)  (pst_bitNMI_RESETN() -> RESETN_PD=(ParValue))
N#define biGetNMI_RESETN_RESETN_SMT() (pst_bitNMI_RESETN() -> RESETN_SMT)
N#define vSetNMI_RESETN_RESETN_SMT(ParValue)  (pst_bitNMI_RESETN() -> RESETN_SMT=(ParValue))
N#define biGetNMI_RESETN_RESETN_LATCHN() (pst_bitNMI_RESETN() -> RESETN_LATCHN)
N#define vSetNMI_RESETN_RESETN_LATCHN(ParValue)  (pst_bitNMI_RESETN() -> RESETN_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetNMI_RESETNLL(ParValue) (pst_u8NMI_RESETN() -> u8LL = (ParValue))
N#define u8GetNMI_RESETNLL() (pst_u8NMI_RESETN() -> u8LL)
N/* LH-struct byte access */
N#define vSetNMI_RESETNLH(ParValue) (pst_u8NMI_RESETN() -> u8LH = (ParValue))
N#define u8GetNMI_RESETNLH() (pst_u8NMI_RESETN() -> u8LH)
N/* HL-struct byte access */
N#define vSetNMI_RESETNHL(ParValue) (pst_u8NMI_RESETN() -> u8HL = (ParValue))
N#define u8GetNMI_RESETNHL() (pst_u8NMI_RESETN() -> u8HL)
N/* HH-struct byte access */
N#define vSetNMI_RESETNHH(ParValue) (pst_u8NMI_RESETN() -> u8HH = (ParValue))
N#define u8GetNMI_RESETNHH() (pst_u8NMI_RESETN() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetNMI_RESETNL(ParValue) (pst_u16NMI_RESETN() -> u16L = (ParValue))
N#define u16GetNMI_RESETNL() (pst_u16NMI_RESETN() -> u16L)
N#define vSetNMI_RESETNH(ParValue) (pst_u16NMI_RESETN() -> u16H = (ParValue))
N#define u16GetNMI_RESETNH() (pst_u16NMI_RESETN() -> u16H)
N            
N/* Word access */
N#define vSetNMI_RESETN(ParValue)  (*pu32NMI_RESETN() = (ParValue))
N#define u32GetNMI_RESETN()  (*pu32NMI_RESETN() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DSU_JTAG_SEL_GTCK                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302234                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DSU_JTAG_SEL_GTCK_REG__       0xC0302234U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   DSU_JTAG_SEL_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DSU_JTAG_SEL_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DSU_JTAG_SEL_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   DSU_JTAG_SEL_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   DSU_GTCK_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DSU_GTCK_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DSU_GTCK_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   DSU_GTCK_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} DSU_JTAG_SEL_GTCK_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DSU_JTAG_SEL_GTCK_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DSU_JTAG_SEL_GTCK_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DSU_JTAG_SEL_GTCK_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_bit_view_st *)\
N(DSU_JTAG_SEL_GTCK_REG__ ))
X#define pst_bitDSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_bit_view_st *)(DSU_JTAG_SEL_GTCK_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_byte_view_st *)\
N(DSU_JTAG_SEL_GTCK_REG__ ))
X#define pst_u8DSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_byte_view_st *)(DSU_JTAG_SEL_GTCK_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_halfword_view_st *)\
N(DSU_JTAG_SEL_GTCK_REG__ ))
X#define pst_u16DSU_JTAG_SEL_GTCK()     ((volatile DSU_JTAG_SEL_GTCK_halfword_view_st *)(DSU_JTAG_SEL_GTCK_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DSU_JTAG_SEL_GTCK()     ((volatile u32DSU_JTAG_SEL_GTCK_word_view *)\
N(DSU_JTAG_SEL_GTCK_REG__ ))
X#define pu32DSU_JTAG_SEL_GTCK()     ((volatile u32DSU_JTAG_SEL_GTCK_word_view *)(DSU_JTAG_SEL_GTCK_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_PU() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_PU)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_PU(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_PU=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_PD() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_PD)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_PD(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_PD=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_SMT() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_SMT)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_SMT(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_SMT=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_LATCHN() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_LATCHN)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_JTAG_SEL_LATCHN(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_JTAG_SEL_LATCHN=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_GTCK_PU() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_PU)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_GTCK_PU(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_PU=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_GTCK_PD() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_PD)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_GTCK_PD(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_PD=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_GTCK_SMT() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_SMT)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_GTCK_SMT(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_SMT=(ParValue))
N#define biGetDSU_JTAG_SEL_GTCK_DSU_GTCK_LATCHN() (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_LATCHN)
N#define vSetDSU_JTAG_SEL_GTCK_DSU_GTCK_LATCHN(ParValue)  (pst_bitDSU_JTAG_SEL_GTCK() -> DSU_GTCK_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDSU_JTAG_SEL_GTCKLL(ParValue) (pst_u8DSU_JTAG_SEL_GTCK() -> u8LL = (ParValue))
N#define u8GetDSU_JTAG_SEL_GTCKLL() (pst_u8DSU_JTAG_SEL_GTCK() -> u8LL)
N/* LH-struct byte access */
N#define vSetDSU_JTAG_SEL_GTCKLH(ParValue) (pst_u8DSU_JTAG_SEL_GTCK() -> u8LH = (ParValue))
N#define u8GetDSU_JTAG_SEL_GTCKLH() (pst_u8DSU_JTAG_SEL_GTCK() -> u8LH)
N/* HL-struct byte access */
N#define vSetDSU_JTAG_SEL_GTCKHL(ParValue) (pst_u8DSU_JTAG_SEL_GTCK() -> u8HL = (ParValue))
N#define u8GetDSU_JTAG_SEL_GTCKHL() (pst_u8DSU_JTAG_SEL_GTCK() -> u8HL)
N/* HH-struct byte access */
N#define vSetDSU_JTAG_SEL_GTCKHH(ParValue) (pst_u8DSU_JTAG_SEL_GTCK() -> u8HH = (ParValue))
N#define u8GetDSU_JTAG_SEL_GTCKHH() (pst_u8DSU_JTAG_SEL_GTCK() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDSU_JTAG_SEL_GTCKL(ParValue) (pst_u16DSU_JTAG_SEL_GTCK() -> u16L = (ParValue))
N#define u16GetDSU_JTAG_SEL_GTCKL() (pst_u16DSU_JTAG_SEL_GTCK() -> u16L)
N#define vSetDSU_JTAG_SEL_GTCKH(ParValue) (pst_u16DSU_JTAG_SEL_GTCK() -> u16H = (ParValue))
N#define u16GetDSU_JTAG_SEL_GTCKH() (pst_u16DSU_JTAG_SEL_GTCK() -> u16H)
N            
N/* Word access */
N#define vSetDSU_JTAG_SEL_GTCK(ParValue)  (*pu32DSU_JTAG_SEL_GTCK() = (ParValue))
N#define u32GetDSU_JTAG_SEL_GTCK()  (*pu32DSU_JTAG_SEL_GTCK() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DSU_GTDI_GTMS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302238                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DSU_GTDI_GTMS_REG__       0xC0302238U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   DSU_GTDI_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DSU_GTDI_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DSU_GTDI_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   DSU_GTDI_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   DSU_GTMS_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DSU_GTMS_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DSU_GTMS_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DSU_GTMS_IMP	:2; 	 /* 27..28  bit(s) R/W */ 
N  uint32_t   	:3; 	 /* 29..31  bit(s) R */                    
N} DSU_GTDI_GTMS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DSU_GTDI_GTMS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DSU_GTDI_GTMS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DSU_GTDI_GTMS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_bit_view_st *)\
N(DSU_GTDI_GTMS_REG__ ))
X#define pst_bitDSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_bit_view_st *)(DSU_GTDI_GTMS_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_byte_view_st *)\
N(DSU_GTDI_GTMS_REG__ ))
X#define pst_u8DSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_byte_view_st *)(DSU_GTDI_GTMS_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_halfword_view_st *)\
N(DSU_GTDI_GTMS_REG__ ))
X#define pst_u16DSU_GTDI_GTMS()     ((volatile DSU_GTDI_GTMS_halfword_view_st *)(DSU_GTDI_GTMS_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DSU_GTDI_GTMS()     ((volatile u32DSU_GTDI_GTMS_word_view *)\
N(DSU_GTDI_GTMS_REG__ ))
X#define pu32DSU_GTDI_GTMS()     ((volatile u32DSU_GTDI_GTMS_word_view *)(DSU_GTDI_GTMS_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDSU_GTDI_GTMS_DSU_GTDI_PU() (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_PU)
N#define vSetDSU_GTDI_GTMS_DSU_GTDI_PU(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_PU=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTDI_PD() (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_PD)
N#define vSetDSU_GTDI_GTMS_DSU_GTDI_PD(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_PD=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTDI_SMT() (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_SMT)
N#define vSetDSU_GTDI_GTMS_DSU_GTDI_SMT(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_SMT=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTDI_LATCHN() (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_LATCHN)
N#define vSetDSU_GTDI_GTMS_DSU_GTDI_LATCHN(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTDI_LATCHN=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTMS_PU() (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_PU)
N#define vSetDSU_GTDI_GTMS_DSU_GTMS_PU(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_PU=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTMS_PD() (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_PD)
N#define vSetDSU_GTDI_GTMS_DSU_GTMS_PD(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_PD=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTMS_SMT() (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_SMT)
N#define vSetDSU_GTDI_GTMS_DSU_GTMS_SMT(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_SMT=(ParValue))
N#define biGetDSU_GTDI_GTMS_DSU_GTMS_IMP() (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_IMP)
N#define vSetDSU_GTDI_GTMS_DSU_GTMS_IMP(ParValue)  (pst_bitDSU_GTDI_GTMS() -> DSU_GTMS_IMP=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDSU_GTDI_GTMSLL(ParValue) (pst_u8DSU_GTDI_GTMS() -> u8LL = (ParValue))
N#define u8GetDSU_GTDI_GTMSLL() (pst_u8DSU_GTDI_GTMS() -> u8LL)
N/* LH-struct byte access */
N#define vSetDSU_GTDI_GTMSLH(ParValue) (pst_u8DSU_GTDI_GTMS() -> u8LH = (ParValue))
N#define u8GetDSU_GTDI_GTMSLH() (pst_u8DSU_GTDI_GTMS() -> u8LH)
N/* HL-struct byte access */
N#define vSetDSU_GTDI_GTMSHL(ParValue) (pst_u8DSU_GTDI_GTMS() -> u8HL = (ParValue))
N#define u8GetDSU_GTDI_GTMSHL() (pst_u8DSU_GTDI_GTMS() -> u8HL)
N/* HH-struct byte access */
N#define vSetDSU_GTDI_GTMSHH(ParValue) (pst_u8DSU_GTDI_GTMS() -> u8HH = (ParValue))
N#define u8GetDSU_GTDI_GTMSHH() (pst_u8DSU_GTDI_GTMS() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDSU_GTDI_GTMSL(ParValue) (pst_u16DSU_GTDI_GTMS() -> u16L = (ParValue))
N#define u16GetDSU_GTDI_GTMSL() (pst_u16DSU_GTDI_GTMS() -> u16L)
N#define vSetDSU_GTDI_GTMSH(ParValue) (pst_u16DSU_GTDI_GTMS() -> u16H = (ParValue))
N#define u16GetDSU_GTDI_GTMSH() (pst_u16DSU_GTDI_GTMS() -> u16H)
N            
N/* Word access */
N#define vSetDSU_GTDI_GTMS(ParValue)  (*pu32DSU_GTDI_GTMS() = (ParValue))
N#define u32GetDSU_GTDI_GTMS()  (*pu32DSU_GTDI_GTMS() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: DSU_GTRST_TPC0_GTDO                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030223C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define DSU_GTRST_TPC0_GTDO_REG__       0xC030223CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:8; 	 /* 0..7  bit(s) R */
N  uint32_t   DSU_GTRST_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   DSU_GTRST_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DSU_GTRST_SMT	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   DSU_GTRST_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:8; 	 /* 16..23  bit(s) R */
N  uint32_t   DSU_TPC0_GTDO_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   DSU_TPC0_GTDO_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   DSU_TPC0_GTDO_SMT	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   DSU_TPC0_GTDO_IMP	:2; 	 /* 27..28  bit(s) R/W */ 
N  uint32_t   	:3; 	 /* 29..31  bit(s) R */                    
N} DSU_GTRST_TPC0_GTDO_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} DSU_GTRST_TPC0_GTDO_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} DSU_GTRST_TPC0_GTDO_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32DSU_GTRST_TPC0_GTDO_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitDSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_bit_view_st *)\
N(DSU_GTRST_TPC0_GTDO_REG__ ))
X#define pst_bitDSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_bit_view_st *)(DSU_GTRST_TPC0_GTDO_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8DSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_byte_view_st *)\
N(DSU_GTRST_TPC0_GTDO_REG__ ))
X#define pst_u8DSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_byte_view_st *)(DSU_GTRST_TPC0_GTDO_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16DSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_halfword_view_st *)\
N(DSU_GTRST_TPC0_GTDO_REG__ ))
X#define pst_u16DSU_GTRST_TPC0_GTDO()     ((volatile DSU_GTRST_TPC0_GTDO_halfword_view_st *)(DSU_GTRST_TPC0_GTDO_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32DSU_GTRST_TPC0_GTDO()     ((volatile u32DSU_GTRST_TPC0_GTDO_word_view *)\
N(DSU_GTRST_TPC0_GTDO_REG__ ))
X#define pu32DSU_GTRST_TPC0_GTDO()     ((volatile u32DSU_GTRST_TPC0_GTDO_word_view *)(DSU_GTRST_TPC0_GTDO_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_GTRST_PU() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_PU)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_GTRST_PU(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_PU=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_GTRST_PD() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_PD)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_GTRST_PD(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_PD=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_GTRST_SMT() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_SMT)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_GTRST_SMT(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_SMT=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_GTRST_LATCHN() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_LATCHN)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_GTRST_LATCHN(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_GTRST_LATCHN=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_PU() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_PU)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_PU(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_PU=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_PD() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_PD)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_PD(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_PD=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_SMT() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_SMT)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_SMT(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_SMT=(ParValue))
N#define biGetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_IMP() (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_IMP)
N#define vSetDSU_GTRST_TPC0_GTDO_DSU_TPC0_GTDO_IMP(ParValue)  (pst_bitDSU_GTRST_TPC0_GTDO() -> DSU_TPC0_GTDO_IMP=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetDSU_GTRST_TPC0_GTDOLL(ParValue) (pst_u8DSU_GTRST_TPC0_GTDO() -> u8LL = (ParValue))
N#define u8GetDSU_GTRST_TPC0_GTDOLL() (pst_u8DSU_GTRST_TPC0_GTDO() -> u8LL)
N/* LH-struct byte access */
N#define vSetDSU_GTRST_TPC0_GTDOLH(ParValue) (pst_u8DSU_GTRST_TPC0_GTDO() -> u8LH = (ParValue))
N#define u8GetDSU_GTRST_TPC0_GTDOLH() (pst_u8DSU_GTRST_TPC0_GTDO() -> u8LH)
N/* HL-struct byte access */
N#define vSetDSU_GTRST_TPC0_GTDOHL(ParValue) (pst_u8DSU_GTRST_TPC0_GTDO() -> u8HL = (ParValue))
N#define u8GetDSU_GTRST_TPC0_GTDOHL() (pst_u8DSU_GTRST_TPC0_GTDO() -> u8HL)
N/* HH-struct byte access */
N#define vSetDSU_GTRST_TPC0_GTDOHH(ParValue) (pst_u8DSU_GTRST_TPC0_GTDO() -> u8HH = (ParValue))
N#define u8GetDSU_GTRST_TPC0_GTDOHH() (pst_u8DSU_GTRST_TPC0_GTDO() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetDSU_GTRST_TPC0_GTDOL(ParValue) (pst_u16DSU_GTRST_TPC0_GTDO() -> u16L = (ParValue))
N#define u16GetDSU_GTRST_TPC0_GTDOL() (pst_u16DSU_GTRST_TPC0_GTDO() -> u16L)
N#define vSetDSU_GTRST_TPC0_GTDOH(ParValue) (pst_u16DSU_GTRST_TPC0_GTDO() -> u16H = (ParValue))
N#define u16GetDSU_GTRST_TPC0_GTDOH() (pst_u16DSU_GTRST_TPC0_GTDO() -> u16H)
N            
N/* Word access */
N#define vSetDSU_GTRST_TPC0_GTDO(ParValue)  (*pu32DSU_GTRST_TPC0_GTDO() = (ParValue))
N#define u32GetDSU_GTRST_TPC0_GTDO()  (*pu32DSU_GTRST_TPC0_GTDO() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN0_IN1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302250                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN0_IN1_REG__       0xC0302250U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ADC_IN0_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN0_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN0_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN0_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN0_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ADC_IN1_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN1_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN1_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN1_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN1_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN0_IN1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN0_IN1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN0_IN1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN0_IN1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN0_IN1()     ((volatile ADC_IN0_IN1_bit_view_st *)\
N(ADC_IN0_IN1_REG__ ))
X#define pst_bitADC_IN0_IN1()     ((volatile ADC_IN0_IN1_bit_view_st *)(ADC_IN0_IN1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN0_IN1()     ((volatile ADC_IN0_IN1_byte_view_st *)\
N(ADC_IN0_IN1_REG__ ))
X#define pst_u8ADC_IN0_IN1()     ((volatile ADC_IN0_IN1_byte_view_st *)(ADC_IN0_IN1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN0_IN1()     ((volatile ADC_IN0_IN1_halfword_view_st *)\
N(ADC_IN0_IN1_REG__ ))
X#define pst_u16ADC_IN0_IN1()     ((volatile ADC_IN0_IN1_halfword_view_st *)(ADC_IN0_IN1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN0_IN1()     ((volatile u32ADC_IN0_IN1_word_view *)\
N(ADC_IN0_IN1_REG__ ))
X#define pu32ADC_IN0_IN1()     ((volatile u32ADC_IN0_IN1_word_view *)(ADC_IN0_IN1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN0_IN1_ADC_IN0_SEL() (pst_bitADC_IN0_IN1() -> ADC_IN0_SEL)
N#define vSetADC_IN0_IN1_ADC_IN0_SEL(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN0_SEL=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN0_PU() (pst_bitADC_IN0_IN1() -> ADC_IN0_PU)
N#define vSetADC_IN0_IN1_ADC_IN0_PU(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN0_PU=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN0_PD() (pst_bitADC_IN0_IN1() -> ADC_IN0_PD)
N#define vSetADC_IN0_IN1_ADC_IN0_PD(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN0_PD=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN0_PODN() (pst_bitADC_IN0_IN1() -> ADC_IN0_PODN)
N#define vSetADC_IN0_IN1_ADC_IN0_PODN(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN0_PODN=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN0_LATCHN() (pst_bitADC_IN0_IN1() -> ADC_IN0_LATCHN)
N#define vSetADC_IN0_IN1_ADC_IN0_LATCHN(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN0_LATCHN=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN1_SEL() (pst_bitADC_IN0_IN1() -> ADC_IN1_SEL)
N#define vSetADC_IN0_IN1_ADC_IN1_SEL(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN1_SEL=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN1_PU() (pst_bitADC_IN0_IN1() -> ADC_IN1_PU)
N#define vSetADC_IN0_IN1_ADC_IN1_PU(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN1_PU=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN1_PD() (pst_bitADC_IN0_IN1() -> ADC_IN1_PD)
N#define vSetADC_IN0_IN1_ADC_IN1_PD(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN1_PD=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN1_PODN() (pst_bitADC_IN0_IN1() -> ADC_IN1_PODN)
N#define vSetADC_IN0_IN1_ADC_IN1_PODN(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN1_PODN=(ParValue))
N#define biGetADC_IN0_IN1_ADC_IN1_LATCHN() (pst_bitADC_IN0_IN1() -> ADC_IN1_LATCHN)
N#define vSetADC_IN0_IN1_ADC_IN1_LATCHN(ParValue)  (pst_bitADC_IN0_IN1() -> ADC_IN1_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN0_IN1LL(ParValue) (pst_u8ADC_IN0_IN1() -> u8LL = (ParValue))
N#define u8GetADC_IN0_IN1LL() (pst_u8ADC_IN0_IN1() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN0_IN1LH(ParValue) (pst_u8ADC_IN0_IN1() -> u8LH = (ParValue))
N#define u8GetADC_IN0_IN1LH() (pst_u8ADC_IN0_IN1() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN0_IN1HL(ParValue) (pst_u8ADC_IN0_IN1() -> u8HL = (ParValue))
N#define u8GetADC_IN0_IN1HL() (pst_u8ADC_IN0_IN1() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN0_IN1HH(ParValue) (pst_u8ADC_IN0_IN1() -> u8HH = (ParValue))
N#define u8GetADC_IN0_IN1HH() (pst_u8ADC_IN0_IN1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN0_IN1L(ParValue) (pst_u16ADC_IN0_IN1() -> u16L = (ParValue))
N#define u16GetADC_IN0_IN1L() (pst_u16ADC_IN0_IN1() -> u16L)
N#define vSetADC_IN0_IN1H(ParValue) (pst_u16ADC_IN0_IN1() -> u16H = (ParValue))
N#define u16GetADC_IN0_IN1H() (pst_u16ADC_IN0_IN1() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN0_IN1(ParValue)  (*pu32ADC_IN0_IN1() = (ParValue))
N#define u32GetADC_IN0_IN1()  (*pu32ADC_IN0_IN1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN2_IN3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302254                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN2_IN3_REG__       0xC0302254U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ADC_IN2_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN2_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN2_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN2_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN2_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ADC_IN3_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN3_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN3_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN3_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN3_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN2_IN3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN2_IN3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN2_IN3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN2_IN3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN2_IN3()     ((volatile ADC_IN2_IN3_bit_view_st *)\
N(ADC_IN2_IN3_REG__ ))
X#define pst_bitADC_IN2_IN3()     ((volatile ADC_IN2_IN3_bit_view_st *)(ADC_IN2_IN3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN2_IN3()     ((volatile ADC_IN2_IN3_byte_view_st *)\
N(ADC_IN2_IN3_REG__ ))
X#define pst_u8ADC_IN2_IN3()     ((volatile ADC_IN2_IN3_byte_view_st *)(ADC_IN2_IN3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN2_IN3()     ((volatile ADC_IN2_IN3_halfword_view_st *)\
N(ADC_IN2_IN3_REG__ ))
X#define pst_u16ADC_IN2_IN3()     ((volatile ADC_IN2_IN3_halfword_view_st *)(ADC_IN2_IN3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN2_IN3()     ((volatile u32ADC_IN2_IN3_word_view *)\
N(ADC_IN2_IN3_REG__ ))
X#define pu32ADC_IN2_IN3()     ((volatile u32ADC_IN2_IN3_word_view *)(ADC_IN2_IN3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN2_IN3_ADC_IN2_SEL() (pst_bitADC_IN2_IN3() -> ADC_IN2_SEL)
N#define vSetADC_IN2_IN3_ADC_IN2_SEL(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN2_SEL=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN2_PU() (pst_bitADC_IN2_IN3() -> ADC_IN2_PU)
N#define vSetADC_IN2_IN3_ADC_IN2_PU(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN2_PU=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN2_PD() (pst_bitADC_IN2_IN3() -> ADC_IN2_PD)
N#define vSetADC_IN2_IN3_ADC_IN2_PD(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN2_PD=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN2_PODN() (pst_bitADC_IN2_IN3() -> ADC_IN2_PODN)
N#define vSetADC_IN2_IN3_ADC_IN2_PODN(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN2_PODN=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN2_LATCHN() (pst_bitADC_IN2_IN3() -> ADC_IN2_LATCHN)
N#define vSetADC_IN2_IN3_ADC_IN2_LATCHN(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN2_LATCHN=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN3_SEL() (pst_bitADC_IN2_IN3() -> ADC_IN3_SEL)
N#define vSetADC_IN2_IN3_ADC_IN3_SEL(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN3_SEL=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN3_PU() (pst_bitADC_IN2_IN3() -> ADC_IN3_PU)
N#define vSetADC_IN2_IN3_ADC_IN3_PU(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN3_PU=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN3_PD() (pst_bitADC_IN2_IN3() -> ADC_IN3_PD)
N#define vSetADC_IN2_IN3_ADC_IN3_PD(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN3_PD=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN3_PODN() (pst_bitADC_IN2_IN3() -> ADC_IN3_PODN)
N#define vSetADC_IN2_IN3_ADC_IN3_PODN(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN3_PODN=(ParValue))
N#define biGetADC_IN2_IN3_ADC_IN3_LATCHN() (pst_bitADC_IN2_IN3() -> ADC_IN3_LATCHN)
N#define vSetADC_IN2_IN3_ADC_IN3_LATCHN(ParValue)  (pst_bitADC_IN2_IN3() -> ADC_IN3_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN2_IN3LL(ParValue) (pst_u8ADC_IN2_IN3() -> u8LL = (ParValue))
N#define u8GetADC_IN2_IN3LL() (pst_u8ADC_IN2_IN3() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN2_IN3LH(ParValue) (pst_u8ADC_IN2_IN3() -> u8LH = (ParValue))
N#define u8GetADC_IN2_IN3LH() (pst_u8ADC_IN2_IN3() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN2_IN3HL(ParValue) (pst_u8ADC_IN2_IN3() -> u8HL = (ParValue))
N#define u8GetADC_IN2_IN3HL() (pst_u8ADC_IN2_IN3() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN2_IN3HH(ParValue) (pst_u8ADC_IN2_IN3() -> u8HH = (ParValue))
N#define u8GetADC_IN2_IN3HH() (pst_u8ADC_IN2_IN3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN2_IN3L(ParValue) (pst_u16ADC_IN2_IN3() -> u16L = (ParValue))
N#define u16GetADC_IN2_IN3L() (pst_u16ADC_IN2_IN3() -> u16L)
N#define vSetADC_IN2_IN3H(ParValue) (pst_u16ADC_IN2_IN3() -> u16H = (ParValue))
N#define u16GetADC_IN2_IN3H() (pst_u16ADC_IN2_IN3() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN2_IN3(ParValue)  (*pu32ADC_IN2_IN3() = (ParValue))
N#define u32GetADC_IN2_IN3()  (*pu32ADC_IN2_IN3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN4_IN5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302258                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN4_IN5_REG__       0xC0302258U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ADC_IN4_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN4_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN4_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN4_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN4_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ADC_IN5_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN5_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN5_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN5_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN5_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN4_IN5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN4_IN5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN4_IN5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN4_IN5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN4_IN5()     ((volatile ADC_IN4_IN5_bit_view_st *)\
N(ADC_IN4_IN5_REG__ ))
X#define pst_bitADC_IN4_IN5()     ((volatile ADC_IN4_IN5_bit_view_st *)(ADC_IN4_IN5_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN4_IN5()     ((volatile ADC_IN4_IN5_byte_view_st *)\
N(ADC_IN4_IN5_REG__ ))
X#define pst_u8ADC_IN4_IN5()     ((volatile ADC_IN4_IN5_byte_view_st *)(ADC_IN4_IN5_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN4_IN5()     ((volatile ADC_IN4_IN5_halfword_view_st *)\
N(ADC_IN4_IN5_REG__ ))
X#define pst_u16ADC_IN4_IN5()     ((volatile ADC_IN4_IN5_halfword_view_st *)(ADC_IN4_IN5_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN4_IN5()     ((volatile u32ADC_IN4_IN5_word_view *)\
N(ADC_IN4_IN5_REG__ ))
X#define pu32ADC_IN4_IN5()     ((volatile u32ADC_IN4_IN5_word_view *)(ADC_IN4_IN5_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN4_IN5_ADC_IN4_SEL() (pst_bitADC_IN4_IN5() -> ADC_IN4_SEL)
N#define vSetADC_IN4_IN5_ADC_IN4_SEL(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN4_SEL=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN4_PU() (pst_bitADC_IN4_IN5() -> ADC_IN4_PU)
N#define vSetADC_IN4_IN5_ADC_IN4_PU(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN4_PU=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN4_PD() (pst_bitADC_IN4_IN5() -> ADC_IN4_PD)
N#define vSetADC_IN4_IN5_ADC_IN4_PD(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN4_PD=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN4_PODN() (pst_bitADC_IN4_IN5() -> ADC_IN4_PODN)
N#define vSetADC_IN4_IN5_ADC_IN4_PODN(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN4_PODN=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN4_LATCHN() (pst_bitADC_IN4_IN5() -> ADC_IN4_LATCHN)
N#define vSetADC_IN4_IN5_ADC_IN4_LATCHN(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN4_LATCHN=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN5_SEL() (pst_bitADC_IN4_IN5() -> ADC_IN5_SEL)
N#define vSetADC_IN4_IN5_ADC_IN5_SEL(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN5_SEL=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN5_PU() (pst_bitADC_IN4_IN5() -> ADC_IN5_PU)
N#define vSetADC_IN4_IN5_ADC_IN5_PU(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN5_PU=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN5_PD() (pst_bitADC_IN4_IN5() -> ADC_IN5_PD)
N#define vSetADC_IN4_IN5_ADC_IN5_PD(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN5_PD=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN5_PODN() (pst_bitADC_IN4_IN5() -> ADC_IN5_PODN)
N#define vSetADC_IN4_IN5_ADC_IN5_PODN(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN5_PODN=(ParValue))
N#define biGetADC_IN4_IN5_ADC_IN5_LATCHN() (pst_bitADC_IN4_IN5() -> ADC_IN5_LATCHN)
N#define vSetADC_IN4_IN5_ADC_IN5_LATCHN(ParValue)  (pst_bitADC_IN4_IN5() -> ADC_IN5_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN4_IN5LL(ParValue) (pst_u8ADC_IN4_IN5() -> u8LL = (ParValue))
N#define u8GetADC_IN4_IN5LL() (pst_u8ADC_IN4_IN5() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN4_IN5LH(ParValue) (pst_u8ADC_IN4_IN5() -> u8LH = (ParValue))
N#define u8GetADC_IN4_IN5LH() (pst_u8ADC_IN4_IN5() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN4_IN5HL(ParValue) (pst_u8ADC_IN4_IN5() -> u8HL = (ParValue))
N#define u8GetADC_IN4_IN5HL() (pst_u8ADC_IN4_IN5() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN4_IN5HH(ParValue) (pst_u8ADC_IN4_IN5() -> u8HH = (ParValue))
N#define u8GetADC_IN4_IN5HH() (pst_u8ADC_IN4_IN5() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN4_IN5L(ParValue) (pst_u16ADC_IN4_IN5() -> u16L = (ParValue))
N#define u16GetADC_IN4_IN5L() (pst_u16ADC_IN4_IN5() -> u16L)
N#define vSetADC_IN4_IN5H(ParValue) (pst_u16ADC_IN4_IN5() -> u16H = (ParValue))
N#define u16GetADC_IN4_IN5H() (pst_u16ADC_IN4_IN5() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN4_IN5(ParValue)  (*pu32ADC_IN4_IN5() = (ParValue))
N#define u32GetADC_IN4_IN5()  (*pu32ADC_IN4_IN5() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN6_IN7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030225C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN6_IN7_REG__       0xC030225CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   ADC_IN6_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN6_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN6_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN6_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN6_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   ADC_IN7_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN7_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN7_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN7_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN7_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN6_IN7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN6_IN7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN6_IN7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN6_IN7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN6_IN7()     ((volatile ADC_IN6_IN7_bit_view_st *)\
N(ADC_IN6_IN7_REG__ ))
X#define pst_bitADC_IN6_IN7()     ((volatile ADC_IN6_IN7_bit_view_st *)(ADC_IN6_IN7_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN6_IN7()     ((volatile ADC_IN6_IN7_byte_view_st *)\
N(ADC_IN6_IN7_REG__ ))
X#define pst_u8ADC_IN6_IN7()     ((volatile ADC_IN6_IN7_byte_view_st *)(ADC_IN6_IN7_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN6_IN7()     ((volatile ADC_IN6_IN7_halfword_view_st *)\
N(ADC_IN6_IN7_REG__ ))
X#define pst_u16ADC_IN6_IN7()     ((volatile ADC_IN6_IN7_halfword_view_st *)(ADC_IN6_IN7_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN6_IN7()     ((volatile u32ADC_IN6_IN7_word_view *)\
N(ADC_IN6_IN7_REG__ ))
X#define pu32ADC_IN6_IN7()     ((volatile u32ADC_IN6_IN7_word_view *)(ADC_IN6_IN7_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN6_IN7_ADC_IN6_SEL() (pst_bitADC_IN6_IN7() -> ADC_IN6_SEL)
N#define vSetADC_IN6_IN7_ADC_IN6_SEL(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN6_SEL=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN6_PU() (pst_bitADC_IN6_IN7() -> ADC_IN6_PU)
N#define vSetADC_IN6_IN7_ADC_IN6_PU(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN6_PU=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN6_PD() (pst_bitADC_IN6_IN7() -> ADC_IN6_PD)
N#define vSetADC_IN6_IN7_ADC_IN6_PD(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN6_PD=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN6_PODN() (pst_bitADC_IN6_IN7() -> ADC_IN6_PODN)
N#define vSetADC_IN6_IN7_ADC_IN6_PODN(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN6_PODN=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN6_LATCHN() (pst_bitADC_IN6_IN7() -> ADC_IN6_LATCHN)
N#define vSetADC_IN6_IN7_ADC_IN6_LATCHN(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN6_LATCHN=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN7_SEL() (pst_bitADC_IN6_IN7() -> ADC_IN7_SEL)
N#define vSetADC_IN6_IN7_ADC_IN7_SEL(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN7_SEL=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN7_PU() (pst_bitADC_IN6_IN7() -> ADC_IN7_PU)
N#define vSetADC_IN6_IN7_ADC_IN7_PU(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN7_PU=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN7_PD() (pst_bitADC_IN6_IN7() -> ADC_IN7_PD)
N#define vSetADC_IN6_IN7_ADC_IN7_PD(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN7_PD=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN7_PODN() (pst_bitADC_IN6_IN7() -> ADC_IN7_PODN)
N#define vSetADC_IN6_IN7_ADC_IN7_PODN(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN7_PODN=(ParValue))
N#define biGetADC_IN6_IN7_ADC_IN7_LATCHN() (pst_bitADC_IN6_IN7() -> ADC_IN7_LATCHN)
N#define vSetADC_IN6_IN7_ADC_IN7_LATCHN(ParValue)  (pst_bitADC_IN6_IN7() -> ADC_IN7_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN6_IN7LL(ParValue) (pst_u8ADC_IN6_IN7() -> u8LL = (ParValue))
N#define u8GetADC_IN6_IN7LL() (pst_u8ADC_IN6_IN7() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN6_IN7LH(ParValue) (pst_u8ADC_IN6_IN7() -> u8LH = (ParValue))
N#define u8GetADC_IN6_IN7LH() (pst_u8ADC_IN6_IN7() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN6_IN7HL(ParValue) (pst_u8ADC_IN6_IN7() -> u8HL = (ParValue))
N#define u8GetADC_IN6_IN7HL() (pst_u8ADC_IN6_IN7() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN6_IN7HH(ParValue) (pst_u8ADC_IN6_IN7() -> u8HH = (ParValue))
N#define u8GetADC_IN6_IN7HH() (pst_u8ADC_IN6_IN7() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN6_IN7L(ParValue) (pst_u16ADC_IN6_IN7() -> u16L = (ParValue))
N#define u16GetADC_IN6_IN7L() (pst_u16ADC_IN6_IN7() -> u16L)
N#define vSetADC_IN6_IN7H(ParValue) (pst_u16ADC_IN6_IN7() -> u16H = (ParValue))
N#define u16GetADC_IN6_IN7H() (pst_u16ADC_IN6_IN7() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN6_IN7(ParValue)  (*pu32ADC_IN6_IN7() = (ParValue))
N#define u32GetADC_IN6_IN7()  (*pu32ADC_IN6_IN7() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN8_IN9                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302260                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN8_IN9_REG__       0xC0302260U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:3; 	 /* 0..2  bit(s) R */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN8_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN8_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN8_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN8_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:3; 	 /* 16..18  bit(s) R */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN9_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN9_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN9_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN9_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN8_IN9_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN8_IN9_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN8_IN9_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN8_IN9_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN8_IN9()     ((volatile ADC_IN8_IN9_bit_view_st *)\
N(ADC_IN8_IN9_REG__ ))
X#define pst_bitADC_IN8_IN9()     ((volatile ADC_IN8_IN9_bit_view_st *)(ADC_IN8_IN9_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN8_IN9()     ((volatile ADC_IN8_IN9_byte_view_st *)\
N(ADC_IN8_IN9_REG__ ))
X#define pst_u8ADC_IN8_IN9()     ((volatile ADC_IN8_IN9_byte_view_st *)(ADC_IN8_IN9_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN8_IN9()     ((volatile ADC_IN8_IN9_halfword_view_st *)\
N(ADC_IN8_IN9_REG__ ))
X#define pst_u16ADC_IN8_IN9()     ((volatile ADC_IN8_IN9_halfword_view_st *)(ADC_IN8_IN9_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN8_IN9()     ((volatile u32ADC_IN8_IN9_word_view *)\
N(ADC_IN8_IN9_REG__ ))
X#define pu32ADC_IN8_IN9()     ((volatile u32ADC_IN8_IN9_word_view *)(ADC_IN8_IN9_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN8_IN9_ADC_IN8_PU() (pst_bitADC_IN8_IN9() -> ADC_IN8_PU)
N#define vSetADC_IN8_IN9_ADC_IN8_PU(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN8_PU=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN8_PD() (pst_bitADC_IN8_IN9() -> ADC_IN8_PD)
N#define vSetADC_IN8_IN9_ADC_IN8_PD(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN8_PD=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN8_PODN() (pst_bitADC_IN8_IN9() -> ADC_IN8_PODN)
N#define vSetADC_IN8_IN9_ADC_IN8_PODN(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN8_PODN=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN8_LATCHN() (pst_bitADC_IN8_IN9() -> ADC_IN8_LATCHN)
N#define vSetADC_IN8_IN9_ADC_IN8_LATCHN(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN8_LATCHN=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN9_PU() (pst_bitADC_IN8_IN9() -> ADC_IN9_PU)
N#define vSetADC_IN8_IN9_ADC_IN9_PU(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN9_PU=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN9_PD() (pst_bitADC_IN8_IN9() -> ADC_IN9_PD)
N#define vSetADC_IN8_IN9_ADC_IN9_PD(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN9_PD=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN9_PODN() (pst_bitADC_IN8_IN9() -> ADC_IN9_PODN)
N#define vSetADC_IN8_IN9_ADC_IN9_PODN(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN9_PODN=(ParValue))
N#define biGetADC_IN8_IN9_ADC_IN9_LATCHN() (pst_bitADC_IN8_IN9() -> ADC_IN9_LATCHN)
N#define vSetADC_IN8_IN9_ADC_IN9_LATCHN(ParValue)  (pst_bitADC_IN8_IN9() -> ADC_IN9_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN8_IN9LL(ParValue) (pst_u8ADC_IN8_IN9() -> u8LL = (ParValue))
N#define u8GetADC_IN8_IN9LL() (pst_u8ADC_IN8_IN9() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN8_IN9LH(ParValue) (pst_u8ADC_IN8_IN9() -> u8LH = (ParValue))
N#define u8GetADC_IN8_IN9LH() (pst_u8ADC_IN8_IN9() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN8_IN9HL(ParValue) (pst_u8ADC_IN8_IN9() -> u8HL = (ParValue))
N#define u8GetADC_IN8_IN9HL() (pst_u8ADC_IN8_IN9() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN8_IN9HH(ParValue) (pst_u8ADC_IN8_IN9() -> u8HH = (ParValue))
N#define u8GetADC_IN8_IN9HH() (pst_u8ADC_IN8_IN9() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN8_IN9L(ParValue) (pst_u16ADC_IN8_IN9() -> u16L = (ParValue))
N#define u16GetADC_IN8_IN9L() (pst_u16ADC_IN8_IN9() -> u16L)
N#define vSetADC_IN8_IN9H(ParValue) (pst_u16ADC_IN8_IN9() -> u16H = (ParValue))
N#define u16GetADC_IN8_IN9H() (pst_u16ADC_IN8_IN9() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN8_IN9(ParValue)  (*pu32ADC_IN8_IN9() = (ParValue))
N#define u32GetADC_IN8_IN9()  (*pu32ADC_IN8_IN9() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN10_IN11                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302264                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN10_IN11_REG__       0xC0302264U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:3; 	 /* 0..2  bit(s) R */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN10_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN10_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN10_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN10_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:3; 	 /* 16..18  bit(s) R */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN11_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN11_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN11_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN11_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN10_IN11_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN10_IN11_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN10_IN11_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN10_IN11_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN10_IN11()     ((volatile ADC_IN10_IN11_bit_view_st *)\
N(ADC_IN10_IN11_REG__ ))
X#define pst_bitADC_IN10_IN11()     ((volatile ADC_IN10_IN11_bit_view_st *)(ADC_IN10_IN11_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN10_IN11()     ((volatile ADC_IN10_IN11_byte_view_st *)\
N(ADC_IN10_IN11_REG__ ))
X#define pst_u8ADC_IN10_IN11()     ((volatile ADC_IN10_IN11_byte_view_st *)(ADC_IN10_IN11_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN10_IN11()     ((volatile ADC_IN10_IN11_halfword_view_st *)\
N(ADC_IN10_IN11_REG__ ))
X#define pst_u16ADC_IN10_IN11()     ((volatile ADC_IN10_IN11_halfword_view_st *)(ADC_IN10_IN11_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN10_IN11()     ((volatile u32ADC_IN10_IN11_word_view *)\
N(ADC_IN10_IN11_REG__ ))
X#define pu32ADC_IN10_IN11()     ((volatile u32ADC_IN10_IN11_word_view *)(ADC_IN10_IN11_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN10_IN11_ADC_IN10_PU() (pst_bitADC_IN10_IN11() -> ADC_IN10_PU)
N#define vSetADC_IN10_IN11_ADC_IN10_PU(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN10_PU=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN10_PD() (pst_bitADC_IN10_IN11() -> ADC_IN10_PD)
N#define vSetADC_IN10_IN11_ADC_IN10_PD(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN10_PD=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN10_PODN() (pst_bitADC_IN10_IN11() -> ADC_IN10_PODN)
N#define vSetADC_IN10_IN11_ADC_IN10_PODN(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN10_PODN=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN10_LATCHN() (pst_bitADC_IN10_IN11() -> ADC_IN10_LATCHN)
N#define vSetADC_IN10_IN11_ADC_IN10_LATCHN(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN10_LATCHN=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN11_PU() (pst_bitADC_IN10_IN11() -> ADC_IN11_PU)
N#define vSetADC_IN10_IN11_ADC_IN11_PU(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN11_PU=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN11_PD() (pst_bitADC_IN10_IN11() -> ADC_IN11_PD)
N#define vSetADC_IN10_IN11_ADC_IN11_PD(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN11_PD=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN11_PODN() (pst_bitADC_IN10_IN11() -> ADC_IN11_PODN)
N#define vSetADC_IN10_IN11_ADC_IN11_PODN(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN11_PODN=(ParValue))
N#define biGetADC_IN10_IN11_ADC_IN11_LATCHN() (pst_bitADC_IN10_IN11() -> ADC_IN11_LATCHN)
N#define vSetADC_IN10_IN11_ADC_IN11_LATCHN(ParValue)  (pst_bitADC_IN10_IN11() -> ADC_IN11_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN10_IN11LL(ParValue) (pst_u8ADC_IN10_IN11() -> u8LL = (ParValue))
N#define u8GetADC_IN10_IN11LL() (pst_u8ADC_IN10_IN11() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN10_IN11LH(ParValue) (pst_u8ADC_IN10_IN11() -> u8LH = (ParValue))
N#define u8GetADC_IN10_IN11LH() (pst_u8ADC_IN10_IN11() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN10_IN11HL(ParValue) (pst_u8ADC_IN10_IN11() -> u8HL = (ParValue))
N#define u8GetADC_IN10_IN11HL() (pst_u8ADC_IN10_IN11() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN10_IN11HH(ParValue) (pst_u8ADC_IN10_IN11() -> u8HH = (ParValue))
N#define u8GetADC_IN10_IN11HH() (pst_u8ADC_IN10_IN11() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN10_IN11L(ParValue) (pst_u16ADC_IN10_IN11() -> u16L = (ParValue))
N#define u16GetADC_IN10_IN11L() (pst_u16ADC_IN10_IN11() -> u16L)
N#define vSetADC_IN10_IN11H(ParValue) (pst_u16ADC_IN10_IN11() -> u16H = (ParValue))
N#define u16GetADC_IN10_IN11H() (pst_u16ADC_IN10_IN11() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN10_IN11(ParValue)  (*pu32ADC_IN10_IN11() = (ParValue))
N#define u32GetADC_IN10_IN11()  (*pu32ADC_IN10_IN11() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: ADC_IN12_IN13                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302268                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define ADC_IN12_IN13_REG__       0xC0302268U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   	:3; 	 /* 0..2  bit(s) R */
N  uint32_t   	:5; 	 /* 3..7  bit(s) R */
N  uint32_t   ADC_IN12_PU	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   ADC_IN12_PD	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   ADC_IN12_PODN	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   	:2; 	 /* 11..12  bit(s) R */
N  uint32_t   ADC_IN12_LATCHN	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   	:2; 	 /* 14..15  bit(s) R */
N  uint32_t   	:3; 	 /* 16..18  bit(s) R */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   ADC_IN13_PU	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   ADC_IN13_PD	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   ADC_IN13_PODN	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   	:2; 	 /* 27..28  bit(s) R */
N  uint32_t   ADC_IN13_LATCHN	:1; 	 /* 29..29  bit(s) R/W */ 
N  uint32_t   	:2; 	 /* 30..31  bit(s) R */                    
N} ADC_IN12_IN13_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} ADC_IN12_IN13_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} ADC_IN12_IN13_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32ADC_IN12_IN13_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitADC_IN12_IN13()     ((volatile ADC_IN12_IN13_bit_view_st *)\
N(ADC_IN12_IN13_REG__ ))
X#define pst_bitADC_IN12_IN13()     ((volatile ADC_IN12_IN13_bit_view_st *)(ADC_IN12_IN13_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8ADC_IN12_IN13()     ((volatile ADC_IN12_IN13_byte_view_st *)\
N(ADC_IN12_IN13_REG__ ))
X#define pst_u8ADC_IN12_IN13()     ((volatile ADC_IN12_IN13_byte_view_st *)(ADC_IN12_IN13_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16ADC_IN12_IN13()     ((volatile ADC_IN12_IN13_halfword_view_st *)\
N(ADC_IN12_IN13_REG__ ))
X#define pst_u16ADC_IN12_IN13()     ((volatile ADC_IN12_IN13_halfword_view_st *)(ADC_IN12_IN13_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32ADC_IN12_IN13()     ((volatile u32ADC_IN12_IN13_word_view *)\
N(ADC_IN12_IN13_REG__ ))
X#define pu32ADC_IN12_IN13()     ((volatile u32ADC_IN12_IN13_word_view *)(ADC_IN12_IN13_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetADC_IN12_IN13_ADC_IN12_PU() (pst_bitADC_IN12_IN13() -> ADC_IN12_PU)
N#define vSetADC_IN12_IN13_ADC_IN12_PU(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN12_PU=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN12_PD() (pst_bitADC_IN12_IN13() -> ADC_IN12_PD)
N#define vSetADC_IN12_IN13_ADC_IN12_PD(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN12_PD=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN12_PODN() (pst_bitADC_IN12_IN13() -> ADC_IN12_PODN)
N#define vSetADC_IN12_IN13_ADC_IN12_PODN(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN12_PODN=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN12_LATCHN() (pst_bitADC_IN12_IN13() -> ADC_IN12_LATCHN)
N#define vSetADC_IN12_IN13_ADC_IN12_LATCHN(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN12_LATCHN=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN13_PU() (pst_bitADC_IN12_IN13() -> ADC_IN13_PU)
N#define vSetADC_IN12_IN13_ADC_IN13_PU(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN13_PU=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN13_PD() (pst_bitADC_IN12_IN13() -> ADC_IN13_PD)
N#define vSetADC_IN12_IN13_ADC_IN13_PD(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN13_PD=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN13_PODN() (pst_bitADC_IN12_IN13() -> ADC_IN13_PODN)
N#define vSetADC_IN12_IN13_ADC_IN13_PODN(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN13_PODN=(ParValue))
N#define biGetADC_IN12_IN13_ADC_IN13_LATCHN() (pst_bitADC_IN12_IN13() -> ADC_IN13_LATCHN)
N#define vSetADC_IN12_IN13_ADC_IN13_LATCHN(ParValue)  (pst_bitADC_IN12_IN13() -> ADC_IN13_LATCHN=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetADC_IN12_IN13LL(ParValue) (pst_u8ADC_IN12_IN13() -> u8LL = (ParValue))
N#define u8GetADC_IN12_IN13LL() (pst_u8ADC_IN12_IN13() -> u8LL)
N/* LH-struct byte access */
N#define vSetADC_IN12_IN13LH(ParValue) (pst_u8ADC_IN12_IN13() -> u8LH = (ParValue))
N#define u8GetADC_IN12_IN13LH() (pst_u8ADC_IN12_IN13() -> u8LH)
N/* HL-struct byte access */
N#define vSetADC_IN12_IN13HL(ParValue) (pst_u8ADC_IN12_IN13() -> u8HL = (ParValue))
N#define u8GetADC_IN12_IN13HL() (pst_u8ADC_IN12_IN13() -> u8HL)
N/* HH-struct byte access */
N#define vSetADC_IN12_IN13HH(ParValue) (pst_u8ADC_IN12_IN13() -> u8HH = (ParValue))
N#define u8GetADC_IN12_IN13HH() (pst_u8ADC_IN12_IN13() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetADC_IN12_IN13L(ParValue) (pst_u16ADC_IN12_IN13() -> u16L = (ParValue))
N#define u16GetADC_IN12_IN13L() (pst_u16ADC_IN12_IN13() -> u16L)
N#define vSetADC_IN12_IN13H(ParValue) (pst_u16ADC_IN12_IN13() -> u16H = (ParValue))
N#define u16GetADC_IN12_IN13H() (pst_u16ADC_IN12_IN13() -> u16H)
N            
N/* Word access */
N#define vSetADC_IN12_IN13(ParValue)  (*pu32ADC_IN12_IN13() = (ParValue))
N#define u32GetADC_IN12_IN13()  (*pu32ADC_IN12_IN13() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SC0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302280                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SC0_REG__       0xC0302280U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   SC0_C0_LEFT_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:3; 	 /* 3..5  bit(s) R */
N  uint32_t   SC0_LATCHN	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   SC0_PWDN	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   SC0_C0_RIGHT_SEL	:3; 	 /* 8..10  bit(s) R/W */
N  uint32_t   	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   SC0_C1_LEFT_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   SC0_C1_RIGHT_SEL	:3; 	 /* 24..26  bit(s) R/W */ 
N  uint32_t   	:5; 	 /* 27..31  bit(s) R */                    
N} SC0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SC0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SC0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SC0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSC0()     ((volatile SC0_bit_view_st *)\
N(SC0_REG__ ))
X#define pst_bitSC0()     ((volatile SC0_bit_view_st *)(SC0_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SC0()     ((volatile SC0_byte_view_st *)\
N(SC0_REG__ ))
X#define pst_u8SC0()     ((volatile SC0_byte_view_st *)(SC0_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SC0()     ((volatile SC0_halfword_view_st *)\
N(SC0_REG__ ))
X#define pst_u16SC0()     ((volatile SC0_halfword_view_st *)(SC0_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SC0()     ((volatile u32SC0_word_view *)\
N(SC0_REG__ ))
X#define pu32SC0()     ((volatile u32SC0_word_view *)(SC0_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSC0_SC0_C0_LEFT_SEL() (pst_bitSC0() -> SC0_C0_LEFT_SEL)
N#define vSetSC0_SC0_C0_LEFT_SEL(ParValue)  (pst_bitSC0() -> SC0_C0_LEFT_SEL=(ParValue))
N#define biGetSC0_SC0_LATCHN() (pst_bitSC0() -> SC0_LATCHN)
N#define vSetSC0_SC0_LATCHN(ParValue)  (pst_bitSC0() -> SC0_LATCHN=(ParValue))
N#define biGetSC0_SC0_PWDN() (pst_bitSC0() -> SC0_PWDN)
N#define vSetSC0_SC0_PWDN(ParValue)  (pst_bitSC0() -> SC0_PWDN=(ParValue))
N#define biGetSC0_SC0_C0_RIGHT_SEL() (pst_bitSC0() -> SC0_C0_RIGHT_SEL)
N#define vSetSC0_SC0_C0_RIGHT_SEL(ParValue)  (pst_bitSC0() -> SC0_C0_RIGHT_SEL=(ParValue))
N#define biGetSC0_SC0_C1_LEFT_SEL() (pst_bitSC0() -> SC0_C1_LEFT_SEL)
N#define vSetSC0_SC0_C1_LEFT_SEL(ParValue)  (pst_bitSC0() -> SC0_C1_LEFT_SEL=(ParValue))
N#define biGetSC0_SC0_C1_RIGHT_SEL() (pst_bitSC0() -> SC0_C1_RIGHT_SEL)
N#define vSetSC0_SC0_C1_RIGHT_SEL(ParValue)  (pst_bitSC0() -> SC0_C1_RIGHT_SEL=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSC0LL(ParValue) (pst_u8SC0() -> u8LL = (ParValue))
N#define u8GetSC0LL() (pst_u8SC0() -> u8LL)
N/* LH-struct byte access */
N#define vSetSC0LH(ParValue) (pst_u8SC0() -> u8LH = (ParValue))
N#define u8GetSC0LH() (pst_u8SC0() -> u8LH)
N/* HL-struct byte access */
N#define vSetSC0HL(ParValue) (pst_u8SC0() -> u8HL = (ParValue))
N#define u8GetSC0HL() (pst_u8SC0() -> u8HL)
N/* HH-struct byte access */
N#define vSetSC0HH(ParValue) (pst_u8SC0() -> u8HH = (ParValue))
N#define u8GetSC0HH() (pst_u8SC0() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSC0L(ParValue) (pst_u16SC0() -> u16L = (ParValue))
N#define u16GetSC0L() (pst_u16SC0() -> u16L)
N#define vSetSC0H(ParValue) (pst_u16SC0() -> u16H = (ParValue))
N#define u16GetSC0H() (pst_u16SC0() -> u16H)
N            
N/* Word access */
N#define vSetSC0(ParValue)  (*pu32SC0() = (ParValue))
N#define u32GetSC0()  (*pu32SC0() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SC1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302284                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SC1_REG__       0xC0302284U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   SC1_C0_LEFT_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:3; 	 /* 3..5  bit(s) R */
N  uint32_t   SC1_LATCHN	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   SC1_PWDN	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   SC1_C0_RIGHT_SEL	:3; 	 /* 8..10  bit(s) R/W */
N  uint32_t   	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   SC1_C1_LEFT_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   SC1_C1_RIGHT_SEL	:3; 	 /* 24..26  bit(s) R/W */ 
N  uint32_t   	:5; 	 /* 27..31  bit(s) R */                    
N} SC1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SC1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SC1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SC1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSC1()     ((volatile SC1_bit_view_st *)\
N(SC1_REG__ ))
X#define pst_bitSC1()     ((volatile SC1_bit_view_st *)(SC1_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SC1()     ((volatile SC1_byte_view_st *)\
N(SC1_REG__ ))
X#define pst_u8SC1()     ((volatile SC1_byte_view_st *)(SC1_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SC1()     ((volatile SC1_halfword_view_st *)\
N(SC1_REG__ ))
X#define pst_u16SC1()     ((volatile SC1_halfword_view_st *)(SC1_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SC1()     ((volatile u32SC1_word_view *)\
N(SC1_REG__ ))
X#define pu32SC1()     ((volatile u32SC1_word_view *)(SC1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSC1_SC1_C0_LEFT_SEL() (pst_bitSC1() -> SC1_C0_LEFT_SEL)
N#define vSetSC1_SC1_C0_LEFT_SEL(ParValue)  (pst_bitSC1() -> SC1_C0_LEFT_SEL=(ParValue))
N#define biGetSC1_SC1_LATCHN() (pst_bitSC1() -> SC1_LATCHN)
N#define vSetSC1_SC1_LATCHN(ParValue)  (pst_bitSC1() -> SC1_LATCHN=(ParValue))
N#define biGetSC1_SC1_PWDN() (pst_bitSC1() -> SC1_PWDN)
N#define vSetSC1_SC1_PWDN(ParValue)  (pst_bitSC1() -> SC1_PWDN=(ParValue))
N#define biGetSC1_SC1_C0_RIGHT_SEL() (pst_bitSC1() -> SC1_C0_RIGHT_SEL)
N#define vSetSC1_SC1_C0_RIGHT_SEL(ParValue)  (pst_bitSC1() -> SC1_C0_RIGHT_SEL=(ParValue))
N#define biGetSC1_SC1_C1_LEFT_SEL() (pst_bitSC1() -> SC1_C1_LEFT_SEL)
N#define vSetSC1_SC1_C1_LEFT_SEL(ParValue)  (pst_bitSC1() -> SC1_C1_LEFT_SEL=(ParValue))
N#define biGetSC1_SC1_C1_RIGHT_SEL() (pst_bitSC1() -> SC1_C1_RIGHT_SEL)
N#define vSetSC1_SC1_C1_RIGHT_SEL(ParValue)  (pst_bitSC1() -> SC1_C1_RIGHT_SEL=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSC1LL(ParValue) (pst_u8SC1() -> u8LL = (ParValue))
N#define u8GetSC1LL() (pst_u8SC1() -> u8LL)
N/* LH-struct byte access */
N#define vSetSC1LH(ParValue) (pst_u8SC1() -> u8LH = (ParValue))
N#define u8GetSC1LH() (pst_u8SC1() -> u8LH)
N/* HL-struct byte access */
N#define vSetSC1HL(ParValue) (pst_u8SC1() -> u8HL = (ParValue))
N#define u8GetSC1HL() (pst_u8SC1() -> u8HL)
N/* HH-struct byte access */
N#define vSetSC1HH(ParValue) (pst_u8SC1() -> u8HH = (ParValue))
N#define u8GetSC1HH() (pst_u8SC1() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSC1L(ParValue) (pst_u16SC1() -> u16L = (ParValue))
N#define u16GetSC1L() (pst_u16SC1() -> u16L)
N#define vSetSC1H(ParValue) (pst_u16SC1() -> u16H = (ParValue))
N#define u16GetSC1H() (pst_u16SC1() -> u16H)
N            
N/* Word access */
N#define vSetSC1(ParValue)  (*pu32SC1() = (ParValue))
N#define u32GetSC1()  (*pu32SC1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SC2                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302288                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SC2_REG__       0xC0302288U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   SC2_C0_LEFT_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:3; 	 /* 3..5  bit(s) R */
N  uint32_t   SC2_LATCHN	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   SC2_PWDN	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   SC2_C0_RIGHT_SEL	:3; 	 /* 8..10  bit(s) R/W */
N  uint32_t   	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   SC2_C1_LEFT_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   SC2_C1_RIGHT_SEL	:3; 	 /* 24..26  bit(s) R/W */ 
N  uint32_t   	:5; 	 /* 27..31  bit(s) R */                    
N} SC2_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SC2_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SC2_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SC2_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSC2()     ((volatile SC2_bit_view_st *)\
N(SC2_REG__ ))
X#define pst_bitSC2()     ((volatile SC2_bit_view_st *)(SC2_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SC2()     ((volatile SC2_byte_view_st *)\
N(SC2_REG__ ))
X#define pst_u8SC2()     ((volatile SC2_byte_view_st *)(SC2_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SC2()     ((volatile SC2_halfword_view_st *)\
N(SC2_REG__ ))
X#define pst_u16SC2()     ((volatile SC2_halfword_view_st *)(SC2_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SC2()     ((volatile u32SC2_word_view *)\
N(SC2_REG__ ))
X#define pu32SC2()     ((volatile u32SC2_word_view *)(SC2_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSC2_SC2_C0_LEFT_SEL() (pst_bitSC2() -> SC2_C0_LEFT_SEL)
N#define vSetSC2_SC2_C0_LEFT_SEL(ParValue)  (pst_bitSC2() -> SC2_C0_LEFT_SEL=(ParValue))
N#define biGetSC2_SC2_LATCHN() (pst_bitSC2() -> SC2_LATCHN)
N#define vSetSC2_SC2_LATCHN(ParValue)  (pst_bitSC2() -> SC2_LATCHN=(ParValue))
N#define biGetSC2_SC2_PWDN() (pst_bitSC2() -> SC2_PWDN)
N#define vSetSC2_SC2_PWDN(ParValue)  (pst_bitSC2() -> SC2_PWDN=(ParValue))
N#define biGetSC2_SC2_C0_RIGHT_SEL() (pst_bitSC2() -> SC2_C0_RIGHT_SEL)
N#define vSetSC2_SC2_C0_RIGHT_SEL(ParValue)  (pst_bitSC2() -> SC2_C0_RIGHT_SEL=(ParValue))
N#define biGetSC2_SC2_C1_LEFT_SEL() (pst_bitSC2() -> SC2_C1_LEFT_SEL)
N#define vSetSC2_SC2_C1_LEFT_SEL(ParValue)  (pst_bitSC2() -> SC2_C1_LEFT_SEL=(ParValue))
N#define biGetSC2_SC2_C1_RIGHT_SEL() (pst_bitSC2() -> SC2_C1_RIGHT_SEL)
N#define vSetSC2_SC2_C1_RIGHT_SEL(ParValue)  (pst_bitSC2() -> SC2_C1_RIGHT_SEL=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSC2LL(ParValue) (pst_u8SC2() -> u8LL = (ParValue))
N#define u8GetSC2LL() (pst_u8SC2() -> u8LL)
N/* LH-struct byte access */
N#define vSetSC2LH(ParValue) (pst_u8SC2() -> u8LH = (ParValue))
N#define u8GetSC2LH() (pst_u8SC2() -> u8LH)
N/* HL-struct byte access */
N#define vSetSC2HL(ParValue) (pst_u8SC2() -> u8HL = (ParValue))
N#define u8GetSC2HL() (pst_u8SC2() -> u8HL)
N/* HH-struct byte access */
N#define vSetSC2HH(ParValue) (pst_u8SC2() -> u8HH = (ParValue))
N#define u8GetSC2HH() (pst_u8SC2() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSC2L(ParValue) (pst_u16SC2() -> u16L = (ParValue))
N#define u16GetSC2L() (pst_u16SC2() -> u16L)
N#define vSetSC2H(ParValue) (pst_u16SC2() -> u16H = (ParValue))
N#define u16GetSC2H() (pst_u16SC2() -> u16H)
N            
N/* Word access */
N#define vSetSC2(ParValue)  (*pu32SC2() = (ParValue))
N#define u32GetSC2()  (*pu32SC2() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SC3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC030228C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SC3_REG__       0xC030228CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   SC3_C0_LEFT_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:3; 	 /* 3..5  bit(s) R */
N  uint32_t   SC3_LATCHN	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   SC3_PWDN	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   SC3_C0_RIGHT_SEL	:3; 	 /* 8..10  bit(s) R/W */
N  uint32_t   	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   SC3_C1_LEFT_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   SC3_C1_RIGHT_SEL	:3; 	 /* 24..26  bit(s) R/W */ 
N  uint32_t   	:5; 	 /* 27..31  bit(s) R */                    
N} SC3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SC3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SC3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SC3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSC3()     ((volatile SC3_bit_view_st *)\
N(SC3_REG__ ))
X#define pst_bitSC3()     ((volatile SC3_bit_view_st *)(SC3_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SC3()     ((volatile SC3_byte_view_st *)\
N(SC3_REG__ ))
X#define pst_u8SC3()     ((volatile SC3_byte_view_st *)(SC3_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SC3()     ((volatile SC3_halfword_view_st *)\
N(SC3_REG__ ))
X#define pst_u16SC3()     ((volatile SC3_halfword_view_st *)(SC3_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SC3()     ((volatile u32SC3_word_view *)\
N(SC3_REG__ ))
X#define pu32SC3()     ((volatile u32SC3_word_view *)(SC3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSC3_SC3_C0_LEFT_SEL() (pst_bitSC3() -> SC3_C0_LEFT_SEL)
N#define vSetSC3_SC3_C0_LEFT_SEL(ParValue)  (pst_bitSC3() -> SC3_C0_LEFT_SEL=(ParValue))
N#define biGetSC3_SC3_LATCHN() (pst_bitSC3() -> SC3_LATCHN)
N#define vSetSC3_SC3_LATCHN(ParValue)  (pst_bitSC3() -> SC3_LATCHN=(ParValue))
N#define biGetSC3_SC3_PWDN() (pst_bitSC3() -> SC3_PWDN)
N#define vSetSC3_SC3_PWDN(ParValue)  (pst_bitSC3() -> SC3_PWDN=(ParValue))
N#define biGetSC3_SC3_C0_RIGHT_SEL() (pst_bitSC3() -> SC3_C0_RIGHT_SEL)
N#define vSetSC3_SC3_C0_RIGHT_SEL(ParValue)  (pst_bitSC3() -> SC3_C0_RIGHT_SEL=(ParValue))
N#define biGetSC3_SC3_C1_LEFT_SEL() (pst_bitSC3() -> SC3_C1_LEFT_SEL)
N#define vSetSC3_SC3_C1_LEFT_SEL(ParValue)  (pst_bitSC3() -> SC3_C1_LEFT_SEL=(ParValue))
N#define biGetSC3_SC3_C1_RIGHT_SEL() (pst_bitSC3() -> SC3_C1_RIGHT_SEL)
N#define vSetSC3_SC3_C1_RIGHT_SEL(ParValue)  (pst_bitSC3() -> SC3_C1_RIGHT_SEL=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSC3LL(ParValue) (pst_u8SC3() -> u8LL = (ParValue))
N#define u8GetSC3LL() (pst_u8SC3() -> u8LL)
N/* LH-struct byte access */
N#define vSetSC3LH(ParValue) (pst_u8SC3() -> u8LH = (ParValue))
N#define u8GetSC3LH() (pst_u8SC3() -> u8LH)
N/* HL-struct byte access */
N#define vSetSC3HL(ParValue) (pst_u8SC3() -> u8HL = (ParValue))
N#define u8GetSC3HL() (pst_u8SC3() -> u8HL)
N/* HH-struct byte access */
N#define vSetSC3HH(ParValue) (pst_u8SC3() -> u8HH = (ParValue))
N#define u8GetSC3HH() (pst_u8SC3() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSC3L(ParValue) (pst_u16SC3() -> u16L = (ParValue))
N#define u16GetSC3L() (pst_u16SC3() -> u16L)
N#define vSetSC3H(ParValue) (pst_u16SC3() -> u16H = (ParValue))
N#define u16GetSC3H() (pst_u16SC3() -> u16H)
N            
N/* Word access */
N#define vSetSC3(ParValue)  (*pu32SC3() = (ParValue))
N#define u32GetSC3()  (*pu32SC3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SC4                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302290                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SC4_REG__       0xC0302290U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   SC4_C0_LEFT_SEL	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   	:3; 	 /* 3..5  bit(s) R */
N  uint32_t   SC4_LATCHN	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   SC4_PWDN	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   SC4_C0_RIGHT_SEL	:3; 	 /* 8..10  bit(s) R/W */
N  uint32_t   	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   SC4_C1_LEFT_SEL	:3; 	 /* 16..18  bit(s) R/W */
N  uint32_t   	:5; 	 /* 19..23  bit(s) R */
N  uint32_t   SC4_C1_RIGHT_SEL	:3; 	 /* 24..26  bit(s) R/W */ 
N  uint32_t   	:5; 	 /* 27..31  bit(s) R */                    
N} SC4_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} SC4_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} SC4_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32SC4_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSC4()     ((volatile SC4_bit_view_st *)\
N(SC4_REG__ ))
X#define pst_bitSC4()     ((volatile SC4_bit_view_st *)(SC4_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8SC4()     ((volatile SC4_byte_view_st *)\
N(SC4_REG__ ))
X#define pst_u8SC4()     ((volatile SC4_byte_view_st *)(SC4_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16SC4()     ((volatile SC4_halfword_view_st *)\
N(SC4_REG__ ))
X#define pst_u16SC4()     ((volatile SC4_halfword_view_st *)(SC4_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32SC4()     ((volatile u32SC4_word_view *)\
N(SC4_REG__ ))
X#define pu32SC4()     ((volatile u32SC4_word_view *)(SC4_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSC4_SC4_C0_LEFT_SEL() (pst_bitSC4() -> SC4_C0_LEFT_SEL)
N#define vSetSC4_SC4_C0_LEFT_SEL(ParValue)  (pst_bitSC4() -> SC4_C0_LEFT_SEL=(ParValue))
N#define biGetSC4_SC4_LATCHN() (pst_bitSC4() -> SC4_LATCHN)
N#define vSetSC4_SC4_LATCHN(ParValue)  (pst_bitSC4() -> SC4_LATCHN=(ParValue))
N#define biGetSC4_SC4_PWDN() (pst_bitSC4() -> SC4_PWDN)
N#define vSetSC4_SC4_PWDN(ParValue)  (pst_bitSC4() -> SC4_PWDN=(ParValue))
N#define biGetSC4_SC4_C0_RIGHT_SEL() (pst_bitSC4() -> SC4_C0_RIGHT_SEL)
N#define vSetSC4_SC4_C0_RIGHT_SEL(ParValue)  (pst_bitSC4() -> SC4_C0_RIGHT_SEL=(ParValue))
N#define biGetSC4_SC4_C1_LEFT_SEL() (pst_bitSC4() -> SC4_C1_LEFT_SEL)
N#define vSetSC4_SC4_C1_LEFT_SEL(ParValue)  (pst_bitSC4() -> SC4_C1_LEFT_SEL=(ParValue))
N#define biGetSC4_SC4_C1_RIGHT_SEL() (pst_bitSC4() -> SC4_C1_RIGHT_SEL)
N#define vSetSC4_SC4_C1_RIGHT_SEL(ParValue)  (pst_bitSC4() -> SC4_C1_RIGHT_SEL=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetSC4LL(ParValue) (pst_u8SC4() -> u8LL = (ParValue))
N#define u8GetSC4LL() (pst_u8SC4() -> u8LL)
N/* LH-struct byte access */
N#define vSetSC4LH(ParValue) (pst_u8SC4() -> u8LH = (ParValue))
N#define u8GetSC4LH() (pst_u8SC4() -> u8LH)
N/* HL-struct byte access */
N#define vSetSC4HL(ParValue) (pst_u8SC4() -> u8HL = (ParValue))
N#define u8GetSC4HL() (pst_u8SC4() -> u8HL)
N/* HH-struct byte access */
N#define vSetSC4HH(ParValue) (pst_u8SC4() -> u8HH = (ParValue))
N#define u8GetSC4HH() (pst_u8SC4() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetSC4L(ParValue) (pst_u16SC4() -> u16L = (ParValue))
N#define u16GetSC4L() (pst_u16SC4() -> u16L)
N#define vSetSC4H(ParValue) (pst_u16SC4() -> u16H = (ParValue))
N#define u16GetSC4H() (pst_u16SC4() -> u16H)
N            
N/* Word access */
N#define vSetSC4(ParValue)  (*pu32SC4() = (ParValue))
N#define u32GetSC4()  (*pu32SC4() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: SDRAM_CFG                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302294                             
N*       ACCESS  : 8, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define SDRAM_CFG_REG__       0xC0302294U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint8_t   SDRAM_IF_SEL	:2; 	 /* 0..1  bit(s) R/W */ 
N  uint8_t   	:6; 	 /* 2..31  bit(s) R */                    
N} SDRAM_CFG_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef uint8_t u8SDRAM_CFG_byte_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitSDRAM_CFG()     ((volatile SDRAM_CFG_bit_view_st *)\
N(SDRAM_CFG_REG__ ))
X#define pst_bitSDRAM_CFG()     ((volatile SDRAM_CFG_bit_view_st *)(SDRAM_CFG_REG__ ))
N        
N/* Pointer to BYTE  */
N#define pu8SDRAM_CFG()     ((volatile u8SDRAM_CFG_byte_view *)\
N(SDRAM_CFG_REG__ ))
X#define pu8SDRAM_CFG()     ((volatile u8SDRAM_CFG_byte_view *)(SDRAM_CFG_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetSDRAM_CFG_SDRAM_IF_SEL() (pst_bitSDRAM_CFG() -> SDRAM_IF_SEL)
N#define vSetSDRAM_CFG_SDRAM_IF_SEL(ParValue)  (pst_bitSDRAM_CFG() -> SDRAM_IF_SEL=(ParValue))
N            
N/* byte access */
N#define vSetSDRAM_CFG(ParValue) (*pu8SDRAM_CFG() = (ParValue))
N#define u8GetSDRAM_CFG() (*pu8SDRAM_CFG() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: GPIO                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0302800                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define GPIO_REG__       0xC0302800U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   GPIO_WDATA	:8; 	 /* 0..7  bit(s) R/W */
N  uint32_t   GPIO_RDATA	:8; 	 /* 8..15  bit(s) R */
N  uint32_t   GPIO_DIR	:8; 	 /* 16..23  bit(s) R/W */ 
N  uint32_t   	:8; 	 /* 24..31  bit(s) R */                    
N} GPIO_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} GPIO_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} GPIO_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32GPIO_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitGPIO(ch)     ((volatile GPIO_bit_view_st *)\
N(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
X#define pst_bitGPIO(ch)     ((volatile GPIO_bit_view_st *)(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8GPIO(ch)     ((volatile GPIO_byte_view_st *)\
N(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
X#define pst_u8GPIO(ch)     ((volatile GPIO_byte_view_st *)(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16GPIO(ch)     ((volatile GPIO_halfword_view_st *)\
N(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
X#define pst_u16GPIO(ch)     ((volatile GPIO_halfword_view_st *)(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
N            
N/* Pointer to WORD  */ 
N#define pu32GPIO(ch)     ((volatile u32GPIO_word_view *)\
N(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
X#define pu32GPIO(ch)     ((volatile u32GPIO_word_view *)(GPIO_REG__  + ((uint16_t)(ch) * 0x004U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetGPIO_GPIO_WDATA(ch) (pst_bitGPIO(ch) -> GPIO_WDATA)
N#define vSetGPIO_GPIO_WDATA(ch,ParValue)  (pst_bitGPIO(ch) -> GPIO_WDATA=(ParValue))            
N#define biGetGPIO_GPIO_RDATA(ch) (pst_bitGPIO(ch) -> GPIO_RDATA)
N#define biGetGPIO_GPIO_DIR(ch) (pst_bitGPIO(ch) -> GPIO_DIR)
N#define vSetGPIO_GPIO_DIR(ch,ParValue)  (pst_bitGPIO(ch) -> GPIO_DIR=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetGPIOLL(ch,ParValue) (pst_u8GPIO(ch) -> u8LL = (ParValue))
N#define u8GetGPIOLL(ch) (pst_u8GPIO(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetGPIOLH(ch,ParValue) (pst_u8GPIO(ch) -> u8LH = (ParValue))
N#define u8GetGPIOLH(ch) (pst_u8GPIO(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetGPIOHL(ch,ParValue) (pst_u8GPIO(ch) -> u8HL = (ParValue))
N#define u8GetGPIOHL(ch) (pst_u8GPIO(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetGPIOHH(ch,ParValue) (pst_u8GPIO(ch) -> u8HH = (ParValue))
N#define u8GetGPIOHH(ch) (pst_u8GPIO(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetGPIOL(ch,ParValue) (pst_u16GPIO(ch) -> u16L = (ParValue))
N#define u16GetGPIOL(ch) (pst_u16GPIO(ch) -> u16L)
N#define vSetGPIOH(ch,ParValue) (pst_u16GPIO(ch) -> u16H = (ParValue))
N#define u16GetGPIOH(ch) (pst_u16GPIO(ch) -> u16H)
N            
N/* Word access */
N#define vSetGPIO(ch,ParValue)  (*pu32GPIO(ch) = (ParValue))
N#define u32GetGPIO(ch)  (*pu32GPIO(ch) )
N            
N/******************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */ 
N/******************************************************************************/
N    
N/*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   :   Deactivated:
N** |     Not requested Rules: 
N** |         Rule 5.7  [A] : disable No reuse of identifiers
N** |         Rule 19.7 [A] : Function used instead of function-like macro when possible
N** |
N** |     Requested Rules:
N** |         Rule	5.1  [R] : No more than 31 chars to determine an identifier
N** |         Rule 6.4  [R] : Bitfields can only have `unsigned int' or `signed int' types
N** |                         Used for bit definitons generated by converter tool
N** |         Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words and standard library names
N** |                         register names are generated by converter tool from HW specs
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************/
N/****************************************************************************/
N
N#endif /* PINMUXIO_H */ 
N    
N/************************** BEGIN of DISCLAIMER   ************************* 
N
N- TOSHIBA is continually working to improve the quality and reliability of 
N  its products. Nevertheless, semiconductor devices in general can 
N  malfunction or fail due to their inherent electrical sensitivity and  
N  vulnerability to physical stress. It is the responsibility of the buyer, 
N  when utilizing TOSHIBA products, to comply with the standards of safety 
N  in making a safe design for the entire system, and to avoid situations in 
N  which a malfunction or failure of such TOSHIBA products could cause loss of 
N  human life, bodily injury or damage to property. 
N  
N  In developing your designs, please ensure that TOSHIBA products are used 
N  within specified operating ranges as set forth in the most recent TOSHIBA 
N  products specifications. 
N  Also, please keep in mind the precautions and conditions set forth in the 
N  Handling Guide for Semiconductor Devices, or 
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in 
N  general electronics applications (computer, personal equipment, office 
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). 
N  These Toshiba products are neither intended nor warranted for usage in 
N  equipment that requires extraordinarily high quality and/or reliability or 
N  a malfunction or failure of which may cause loss of human life or bodily 
N  injury (Unintended Usage). Unintended Usage include atomic energy control 
N  instruments, airplane or spaceship instruments, transportation instruments, 
N  traffic signal instruments, combustion control instruments, medical 
N  instruments, all types of safety devices, etc.. 
N  Unintended Usage of Toshiba products listed in this document shall be 
N  made at the customers own risk. 
N
N- Toshiba assumes no liability for any damage or losses (including but not 
N  limited to, loss of business profit,business interruption, loss of business 
N  information,and other pecuniary losses) occurring 
N  from the use of, or inability to use, this product. 
N
N- The products described in this document are subject to the foreign exchange 
N  and foreign trade laws. 
N
N- The products described in this document contain components made in the 
N  United States and subject to export control of the U.S. authorities. 
N  Diversion contrary to the U.S. law is prohibited. 
N
N- The information contained herein is presented only as a guide for the 
N  applications of our products. 
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements 
N  of intellectual property or other rights of the third parties which may 
N  result from its use.  
N  No license is granted by implication or otherwise under any intellectual 
N  property or other rights of TOSHIBA CORPORATION or others. 
N
N- The information contained herein is subject to change without notice. 
N
N****************************  END of DISCLAIMER ****************************/ 
N
L 25 "..\..\..\..\lldd\src\dmc.c" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_C_REVISION     "$Revision: 1.20 $"
N#define LLDD_DMC_C_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1834  /* Rule 11.3 [A] : disable casting error */  
S  #pragma ghs nowarning 1849  /* Rule 8.1  [R] : bitwise ~ or << expression must be immediately cast back to  underlying type, "unsigned char" */
S  #pragma ghs nowarning 1864  /* Rule 10.1 [R] : Restrict implicit conversions for integer type expressions */
S  #pragma ghs nowarning 1865  /* Rule 10.1 [R] : conversion from underlying type, "int", to same width underlying type, "uint32_t", not allowed */
S  #pragma ghs nowarning 1866  /* Rule 10.1 [R] : implicit conversion from underlying type, "type", to underlying type, "type", not allowed */
S  #pragma ghs nowarning 1867  /* Rule 10.1 [R] : implicit conversion from underlying type, "type", to underlying type, "type", changes signedness */
S  #pragma ghs nowarning 1879  /* Rule 10.3 [R] : Restrict explicit casts for integer type expressions */
S  #pragma ghs nowarning 1880  /* Rule 10.3 [R] : Restrict explicit casts for integer type expressions */
N#endif  
N
N/**********************************************
N*  Static variables and forward declarations  *
N**********************************************/ 
N
Nstatic uint8_t au8LLDD_DMC_C_REVISION[]    = LLDD_DMC_C_REVISION;
Xstatic uint8_t au8LLDD_DMC_C_REVISION[]    = "$Revision: 1.20 $";
Nstatic uint8_t au8LLDD_DMC_C_TAG[]         = LLDD_DMC_C_TAG;
Xstatic uint8_t au8LLDD_DMC_C_TAG[]         = "$Name: LLDD_1_6 $";
Nstatic uint8_t au8LLDD_DMC_H_REVISION[]    = LLDD_DMC_H_REVISION;
Xstatic uint8_t au8LLDD_DMC_H_REVISION[]    = "$Revision: 1.14 $";
Nstatic uint8_t au8LLDD_DMC_H_TAG[]         = LLDD_DMC_H_TAG;
Xstatic uint8_t au8LLDD_DMC_H_TAG[]         = "$Name: LLDD_1_6 $";
Nstatic uint8_t au8LLDD_DMC_IO_H_REVISION[] = LLDD_DMC_IO_H_REVISION;
Xstatic uint8_t au8LLDD_DMC_IO_H_REVISION[] = "$Revision: 1.10 $";
Nstatic uint8_t au8LLDD_DMC_IO_H_TAG[]      = LLDD_DMC_IO_H_TAG;
Xstatic uint8_t au8LLDD_DMC_IO_H_TAG[]      = "$Name: LLDD_1_6 $";
N
N/*********************************************/
N
N/**********************************************
N*             Function definition             *
N**********************************************/
N
Nvoid vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag)
N{
N   *pau8ModuleRevision = &au8LLDD_DMC_C_REVISION[0];
N   *pau8ModuleTag      = &au8LLDD_DMC_C_TAG[0];
N   *pau8HeaderRevision = &au8LLDD_DMC_H_REVISION[0];
N   *pau8HeaderTag      = &au8LLDD_DMC_H_TAG[0];
N   *pau8IORevision     = &au8LLDD_DMC_IO_H_REVISION[0];
N   *pau8IOTag          = &au8LLDD_DMC_IO_H_TAG[0];
N}
N
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section text = ".init"
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#if defined(__KEIL__)
X#if 1L
N#pragma arm section code = "init"
N#else
S#pragma arm section code = ".init"
N#endif
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N/****************************************************************************/
N
Nvoid vDMC_Init(mem_device_st *pstDeviceParams)
N{
N    uint32_t         u32GearRatio;
N
N    *((volatile uint32_t *) 0xC0000000U) = 0xA5C0F17BU;      /* pds unlock */
N    *((volatile uint32_t *) 0xC0000024U) = 0x001D3FC8U;      /* enable LPDDR-clock */
N    
N    /* set clockspeed */
N    if (pstDeviceParams->eClock_rate == DMC_CLOCK_RATE_133MHz)
N    {
N        *((volatile uint32_t *) 0xC0000000U) = 0xA5C0F17BU;  /* pds unlock */
N        *((volatile uint32_t *) 0xC0000008U) = 0x041E1E1EU;  /* enable LPDDR-clock */
N     }
N
N    /* enable mux in dmc_wrapper */
N    if (pstDeviceParams->eType == DMC_TYPE_SDRAM )
N    {
N        *((volatile uint32_t *) 0xC0302294U) = 0x00000002U;  /* SDRAM 32 bit */
N    }
N    else if ( pstDeviceParams->eWidth == DMC_BUSWIDTH_32BIT )
N    {
N        *((volatile uint32_t *) 0xC0302294U) = 0x00000001U;  /* LPDDR 32 bit */
N    }
N    else
N    {
N        *((volatile uint32_t *) 0xC0302294U) = 0x00000003U;  /* LPDDR 16 bit */
N    }
N
N    /* DDR-pin configuration */
N    *((volatile uint32_t *) 0xC0302028U) = 0x28002800U;      /* pins DDR_CAS  and DDR_CS */
N    *((volatile uint32_t *) 0xC030202CU) = 0x28002800U;      /* pins DDR_CKE  and DDR_CK */
N    *((volatile uint32_t *) 0xC0302030U) = 0x28002800U;      /* pins DDR_CKN  and DDR_BA0 */
N    *((volatile uint32_t *) 0xC0302024U) = 0x28002800U;      /* pins DDR_WE   and DDR_RAS */
N
N    *((volatile uint32_t *) 0xC0302000U) = 0x28002800U;      /* pins DDR_DQ0  and DDR_DQ1 */
N    *((volatile uint32_t *) 0xC0302004U) = 0x28002800U;      /* pins DDR_DQ2  and DDR_DQ3 */
N    *((volatile uint32_t *) 0xC0302008U) = 0x28002800U;      /* pins DDR_DQ4  and DDR_DQ5 */
N    *((volatile uint32_t *) 0xC030200CU) = 0x28002800U;      /* pins DDR_DQ6  and DDR_DQ7 */
N    *((volatile uint32_t *) 0xC0302010U) = 0x28002800U;      /* pins DDR_DQ8  and DDR_DQ9 */
N    *((volatile uint32_t *) 0xC0302014U) = 0x28002800U;      /* pins DDR_DQ10 and DDR_DQ11 */
N    *((volatile uint32_t *) 0xC0302018U) = 0x28002800U;      /* pins DDR_DQ12 and DDR_DQ13 */
N    *((volatile uint32_t *) 0xC030201CU) = 0x28002800U;      /* pins DDR_DQ14 and DDR_DQ15 */
N    *((volatile uint32_t *) 0xC0302020U) = 0x28002800U;      /* pins DDR_DM0  and DDR_DM1 */
N    *((volatile uint32_t *) 0xC0302034U) = 0x28002800U;      /* pins DDR_BA1  and DDR_A0 */
N    *((volatile uint32_t *) 0xC0302038U) = 0x28002800U;      /* pins DDR_A1   and DDR_A2 */
N    *((volatile uint32_t *) 0xC030203CU) = 0x28002800U;      /* pins DDR_A3   and DDR_A4 */
N    *((volatile uint32_t *) 0xC0302040U) = 0x28002800U;      /* pins DDR_A5   and DDR_A6 */
N    *((volatile uint32_t *) 0xC0302044U) = 0x28002800U;      /* pins DDR_A7   and DDR_A8 */
N    *((volatile uint32_t *) 0xC0302048U) = 0x28002800U;      /* pins DDR_A9   and DDR_A10 */
N    *((volatile uint32_t *) 0xC030204CU) = 0x28002800U;      /* pins DDR_A11  and DDR_A12 */
N    *((volatile uint32_t *) 0xC0302050U) = 0x28002800U;      /* pins DDR_A13  and DDR_DQS0 */
N    *((volatile uint32_t *) 0xC0302054U) = 0x00002800U;      /* pins DDR_DQS1 */
N    *((volatile uint32_t *) 0xC0302060U) = 0x28002800U;      /* pins DDR_DQS2 and DDR_DQS3 */
N    *((volatile uint32_t *) 0xC0302064U) = 0x28002800U;      /* pins DDR_DM2  and DDR_DM3 */
N    *((volatile uint32_t *) 0xC0302068U) = 0x28002800U;      /* pins DDR_DQ16 and DDR_DQ17 */
N    *((volatile uint32_t *) 0xC030206CU) = 0x28002800U;      /* pins DDR_DQ18 and DDR_DQ19 */
N    *((volatile uint32_t *) 0xC0302070U) = 0x28002800U;      /* pins DDR_DQ20 and DDR_DQ21 */
N    *((volatile uint32_t *) 0xC0302074U) = 0x28002800U;      /* pins DDR_DQ22 and DDR_DQ23 */
N    *((volatile uint32_t *) 0xC0302078U) = 0x28002800U;      /* pins DDR_DQ24 and DDR_DQ25 */
N    *((volatile uint32_t *) 0xC030207CU) = 0x28002800U;      /* pins DDR_DQ26 and DDR_DQ27 */
N    *((volatile uint32_t *) 0xC0302080U) = 0x28002800U;      /* pins DDR_DQ28 and DDR_DQ29 */
N    *((volatile uint32_t *) 0xC0302084U) = 0x28002800U;      /* pins DDR_DQ30 and DDR_DQ31 */
N
N    /* Memory Controller Initialization*/
N    *((volatile uint32_t *) 0xC0D0104CU) = 0x000002D4U;      /* memory_cfg2 */
N
N    u32GearRatio = (pstDeviceParams->u32GearRatio_1 << (uint32_t)16U) + pstDeviceParams->u32GearRatio_0;
N    *((volatile uint32_t *) 0xC0D01304U) = u32GearRatio;    /* user_config */
N    u32GearRatio = (pstDeviceParams->u32GearRatio_3 << (uint32_t)16U) + pstDeviceParams->u32GearRatio_2;
N    if (pstDeviceParams->eType == DMC_TYPE_LPDDR )
N    {
N        u32GearRatio = u32GearRatio + (uint32_t)((uint32_t)0x7U << (uint32_t)12U);
N    }
N    *((volatile uint32_t *) 0xC0D01308U) = u32GearRatio;              /* user_config1 */
N    *((volatile uint32_t *) 0xC0D01014U) = pstDeviceParams->u32T_CAS; /* t_cas */
N    if (pstDeviceParams->eType == DMC_TYPE_LPDDR )
N    {
N        *((volatile uint32_t *) 0xC0D01018U) = 0x00000001U;  /* dqss */
N    }
N    else
N    {
N        *((volatile uint32_t *) 0xC0D01018U) = 0x00000000U;  /* dqss */
N    }
N    *((volatile uint32_t *) 0xC0D0101CU) = pstDeviceParams->u32T_MRD;    /* t_mrd */
N    *((volatile uint32_t *) 0xC0D01020U) = pstDeviceParams->u32T_RAS;    /* t_ras */
N    *((volatile uint32_t *) 0xC0D01024U) = pstDeviceParams->u32T_RC;     /* t_rc  */
N    *((volatile uint32_t *) 0xC0D01028U) = pstDeviceParams->u32T_RCD;    /* t_rcd */
N    *((volatile uint32_t *) 0xC0D0102CU) = pstDeviceParams->u32T_RFC;    /* t_rfc */
N    *((volatile uint32_t *) 0xC0D01030U) = pstDeviceParams->u32T_RP;     /* t_rp  */
N    *((volatile uint32_t *) 0xC0D01034U) = pstDeviceParams->u32T_RRD;    /* t_rrd */
N    *((volatile uint32_t *) 0xC0D01038U) = pstDeviceParams->u32T_WR;     /* t_wr  */
N    *((volatile uint32_t *) 0xC0D0103CU) = pstDeviceParams->u32T_WTR;    /* t_wtr */
N    *((volatile uint32_t *) 0xC0D01040U) = pstDeviceParams->u32T_XP;     /* t_xp  */
N    *((volatile uint32_t *) 0xC0D01044U) = pstDeviceParams->u32T_XSR;    /* t_xsr */
N    *((volatile uint32_t *) 0xC0D01048U) = pstDeviceParams->u32T_ESR;    /* t_esr */
N    *((volatile uint32_t *) 0xC0D01010U) = 0x000004B0U;       /* setrefresh_prd */
N    *((volatile uint32_t *) 0xC0D01200U) = 0x0001003EU;       /* setchip_cfg    */
N//#if (DMC_DEVICE_TYPE ==(DEV_MT46H16M32LFB5))
N //   *((volatile uint32_t *) 0xC0D0100CU) = 0x000C8011U;       /* setmemory_cfg  8012 */ 
N//#else
N    *((volatile uint32_t *) 0xC0D0100CU) = 0x000C8009U;       /* setmemory_cfg   */ 
N//#endif
N    
N    /* memory device initialisation */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x000C0000U;      /* NOP */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x00000000U;      /* PRECHARGEALL */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x00040000U;      /* AUTOREFRESH */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x00040000U;      /* AUTOREFRESH */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x00080031U;      /* Configure Mode Registers */
N    *((volatile uint32_t *) 0xC0D01008U) = 0x000A0020U;      /* Configure Extended Mode Registers */
N
N    *((volatile uint32_t *) 0xc0d01004U) = 0x00000000U;      /* go */
N}
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section text = default
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#pragma arm section code 
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N
N/****************************************************************************/
Nvoid vDMC_MemoryDeviceInit(void)
N{
N    vDMC_SetDirectCommand(0x000C0000U);      /* NOP */
N    vDMC_SetDirectCommand(0x00000000U);      /* PRECHARGEALL */
N    vDMC_SetDirectCommand(0x00040000U);      /* AUTOREFRESH */
N    vDMC_SetDirectCommand(0x00040000U);      /* AUTOREFRESH */
N    vDMC_SetDirectCommand(0x00080031U);      /* Configure Mode Registers */
N    vDMC_SetDirectCommand(0x000A0020U);      /* Configure Extended Mode Registers */
N
N    vDMC_SetDirectCommand(0x00000000U);      /* go */
N}
N
N
N/****************************************************************************/
Nint32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                               mem_device_st *pstDeviceParams)
N{
N    int32_t i32Ret = C_SUCCESS;
X    int32_t i32Ret = (0);
N    
N    if (pstDeviceParams->eType == DMC_TYPE_SDRAM)
N    {
N        switch(eOpMode)
N        {
N        case SYS_STATE_STANDBY_MODE:
N            /*Change to the Pause State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N
N            /*Check, that the Pause State is reached*/
N            while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N            /* Change to Low Power State */
N            vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N            /*Check, that the Low Power State is reached*/
N            while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N            break;
N        default:
N            break;
N        }
N    }
N    else if(pstDeviceParams->eType == DMC_TYPE_LPDDR)
N    {
N        switch(eOpMode)
N        {
N        case SYS_STATE_STANDBY_MODE:
N            /*Change to the Pause State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N            /*Check, that the Pause State is reached*/
N            while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N            /* Change to Low Power State */
N            vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N            /*Check, that the Low Power State is reached*/
N            while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N            break;
N
N        case SYS_STATE_STOP_MODE:
N            /*Change to the Pause State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N            /*Check, that the Pause State is reached*/
N            while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N            /*Change to the SLEEP State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N            /*Check, that the SLEEP State is reached*/
N            while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N
N            /* Set PRECHARGEALL */
N            vDMC_SetExternalMemCommand(DMC_PRECHARGEALL);
N            /* Set DPD */
N            vDMC_SetExternalMemCommand(DMC_DPD);
N            break;
N        
N        case SYS_STATE_SLEEP_MODE:
N            switch(eState)
N            {
N            case DMC_DEV_STATE_SELF_REFRESH:
N                /*Change to the Pause State*/
N                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N                /*Check, that the Pause State is reached*/
N                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N                /* Change to Low Power State */
N                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N                /*Check, that the Low Power State is reached*/
N                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N                break;
N            case DMC_DEV_STATE_DEEP_POWER_DOWN:
N                /*Change to the Pause State*/
N                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N                /*Check, that the Pause State is reached*/
N                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N                /*Change to the SLEEP State*/
N                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N                /*Check, that the SLEEP State is reached*/
N                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N
N                /* Set PRECHARGEALL */
N                vDMC_SetExternalMemCommand(DMC_PRECHARGEALL);
N                /* Set DPD */
N                vDMC_SetExternalMemCommand(DMC_DPD);
N                break;
N            default:
N                break;
N            }
N            break;
N        default:
N            break;
N        }
N    }
N    else
N    {
N        i32Ret = C_FAILED;
X        i32Ret = (-1);
N    }
N    return i32Ret;
N}
N
N
N/****************************************************************************/
Nint32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                              mem_device_st *pstDeviceParams)
N{
N    int32_t i32Ret = C_SUCCESS;
X    int32_t i32Ret = (0);
N    
N    if (pstDeviceParams->eType == DMC_TYPE_SDRAM)
N    {
N        switch(eOpMode)
N        {
N        case SYS_STATE_STANDBY_MODE:
N            /*Change to the Pause State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
N            /*Check, that the Pause State is reached*/
N            while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N            
N            /* Change to Ready State */
N            vDMC_SetMemCntrlCommand(DMC_CMD_GO);
N            /*Check, that the Ready State is reached*/
N            while(DMC_STATUS_READY != eDMC_GetStatus()){}
N            break;
N        default:
N            break;
N        }
N    }
N    else if(pstDeviceParams->eType == DMC_TYPE_LPDDR)
N    {
N        switch(eOpMode)
N        {
N        case SYS_STATE_STANDBY_MODE:
N            /*Change to the Pause State*/
N            vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
N            /*Check, that the Pause State is reached*/
N            while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N            
N            /* Change to Ready State */
N            vDMC_SetMemCntrlCommand(DMC_CMD_GO);
N            /*Check, that the Ready State is reached*/
N            while(DMC_STATUS_READY != eDMC_GetStatus()){}
N            break;
N
N        case SYS_STATE_STOP_MODE:
N            /* Set NOP */
N            vDMC_SetExternalMemCommand(DMC_NOP);
N            /* Initialize DMC */
N            vDMC_Init(pstDeviceParams);
N            break;
N        
N        case SYS_STATE_SLEEP_MODE:
N            switch(eState)
N            {
N            case DMC_DEV_STATE_SELF_REFRESH:
N                /* Change to the Pause State */
N                vDMC_SetMemCntrlCommand(DMC_CMD_PAUSE);
N                /*Check, that the Pause State is reached*/
N                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N                /* Change to Low Power State */
N                vDMC_SetMemCntrlCommand(DMC_CMD_SLEEP);
N                /*Check, that the Low Power State is reached*/
N                while(DMC_STATUS_LOW_POWER != eDMC_GetStatus()){}
N
N                /* Enable the CKE Pin */
N                vSetDDR_CKE_CK_DDR_CK_LATCHN(1);
X                (((volatile DDR_CKE_CK_bit_view_st *)(0xC030202CU )) -> DDR_CK_LATCHN=(1));
N
N                /* Change to the Pause State */
N                vDMC_SetMemCntrlCommand(DMC_CMD_WAKEUP);
N                /*Check, that the Pause State is reached*/
N                while(DMC_STATUS_PAUSED != eDMC_GetStatus()){}
N
N                /* Change to Ready State */
N                vDMC_SetMemCntrlCommand(DMC_CMD_GO);
N                /*Check, that the Ready State is reached*/
N                while(DMC_STATUS_READY != eDMC_GetStatus()){}
N                break;
N
N            case DMC_DEV_STATE_DEEP_POWER_DOWN:
N                /* Set NOP */
N                vDMC_SetExternalMemCommand(DMC_NOP);
N                /* Initialize DMC */
N                vDMC_Init(pstDeviceParams);
N                break;
N
N            default:
N                break;
N            }
N            break;
N            
N        default:
N            break;
N        }   
N    }
N    else
N    {
N        i32Ret = C_FAILED;
X        i32Ret = (-1);
N    }
N    return i32Ret;
N}
N
N
N/****************************************************************************/
Ndmc_status_e eDMC_GetStatus(void)
N{
N    dmc_status_e eStatus;
N
N    eStatus = (dmc_status_e)biGetmemc_status_memc_status();
X    eStatus = (dmc_status_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> memc_status);
N    return eStatus;
N}
N
N
N/****************************************************************************/
Nvoid vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus)
N{
N    /* Temp Variables added To Avoid MISRA warning */
N    uint32_t u32BanksBit0 = (uint32_t)biGetmemc_status_banks_bit0();
X    uint32_t u32BanksBit0 = (uint32_t)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> banks_bit0);
N    uint32_t u32BanksBit1 = (uint32_t)biGetmemc_status_banks_bit1();
X    uint32_t u32BanksBit1 = (uint32_t)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> banks_bit1);
N
N    pstMemcStatus->eMemcStatus  = (dmc_status_e)biGetmemc_status_memc_status(); 
X    pstMemcStatus->eMemcStatus  = (dmc_status_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> memc_status); 
N    pstMemcStatus->eMemoryWidth = (dmc_width_e)biGetmemc_status_max_memory_width();
X    pstMemcStatus->eMemoryWidth = (dmc_width_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> max_memory_width);
N    pstMemcStatus->eMemoryType  = (dmc_type_e)biGetmemc_status_memory_support(); 
X    pstMemcStatus->eMemoryType  = (dmc_type_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> memory_support); 
N    pstMemcStatus->eMemChips    = (dmc_mem_chips_e)biGetmemc_status_memory_chips();   
X    pstMemcStatus->eMemChips    = (dmc_mem_chips_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> memory_chips);   
N    pstMemcStatus->eMemBanks    = (dmc_mem_banks_e)(u32BanksBit0 | (u32BanksBit1 << 0x1U));   
N    pstMemcStatus->eMonitors    = (dmc_monitors_e)biGetmemc_status_exclusive_monitors();   
X    pstMemcStatus->eMonitors    = (dmc_monitors_e)(((volatile memc_status_bit_view_st *)(0xc0d01000U )) -> exclusive_monitors);   
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd)
N{
N    vSetmemc_cmd_memc_cmd(eCmd);
X    (((volatile memc_cmd_bit_view_st *)(0xc0d01004U )) -> memc_cmd=(eCmd));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetDirectCommand(uint32_t u32Value)
N{
N    vSetdirect_cmd(u32Value);
X    (*((volatile u32direct_cmd_word_view *)(0xc0d01008U )) = (u32Value));
N}
N
N/****************************************************************************/
Nvoid vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd)
N{
N    /* Temp Variable added To Avoid MISRA warning */
N    uint8_t u8DirCommand = (uint8_t)eDirCmd;
N
N    vSetdirect_cmd_ext_mem_cmd((u8DirCommand >> 0x02U));
X    (((volatile direct_cmd_bit_view_st *)(0xc0d01008U )) -> ext_mem_cmd=((u8DirCommand >> 0x02U)));
N    vSetdirect_cmd_memory_cmd((u8DirCommand & 0x03U));
X    (((volatile direct_cmd_bit_view_st *)(0xc0d01008U )) -> memory_cmd=((u8DirCommand & 0x03U)));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetChipNumber(uint8_t u8ChipNo)
N{
N    vSetdirect_cmd_chip_nmbr(u8ChipNo);
X    (((volatile direct_cmd_bit_view_st *)(0xc0d01008U )) -> chip_nmbr=(u8ChipNo));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetBankAddress(uint8_t u8BankAddr)
N{
N    vSetdirect_cmd_bank_addr(u8BankAddr);
X    (((volatile direct_cmd_bit_view_st *)(0xc0d01008U )) -> bank_addr=(u8BankAddr));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemoryAddress(uint16_t u16Address)
N{
N    vSetdirect_cmd_addr_13_to_0(u16Address);
X    (((volatile direct_cmd_bit_view_st *)(0xc0d01008U )) -> addr_13_to_0=(u16Address));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfig(uint32_t u32Config)
N{
N    vSetmemory_cfg(u32Config);
X    (*((volatile u32memory_cfg_word_view *)(0xc0d0100cU )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nuint32_t u32DMC_GetMemConfig(void)
N{
N    return (uint32_t)u32Getmemory_cfg();
X    return (uint32_t)(*((volatile u32memory_cfg_word_view *)(0xc0d0100cU )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips)
N{
N    vSetmemory_cfg_active_chips(eActChips);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> active_chips=(eActChips));
N}
N
N
N/****************************************************************************/
Ndmc_mem_chips_e eDMC_GetMemConfigActiveChips(void)
N{
N    return (dmc_mem_chips_e)biGetmemory_cfg_active_chips();
X    return (dmc_mem_chips_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> active_chips);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS)
N{
N    vSetmemory_cfg_qos_master_bits(eQoS);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> qos_master_bits=(eQoS));
N}
N
N
N/****************************************************************************/
Ndmc_mem_config_e eDMC_GetMemConfigQoS(void)
N{
N    return (dmc_mem_config_e)biGetmemory_cfg_qos_master_bits();
X    return (dmc_mem_config_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> qos_master_bits);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst)
N{
N    vSetmemory_cfg_memory_burst(eBurst);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> memory_burst=(eBurst));
N}
N
N
N/****************************************************************************/
Ndmc_mem_config_e eDMC_GetMemConfigBurst(void)
N{
N    return (dmc_mem_config_e)biGetmemory_cfg_memory_burst();
X    return (dmc_mem_config_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> memory_burst);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr)
N{
N    vSetmemory_cfg_row_bits(eRowAddr);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> row_bits=(eRowAddr));
N}
N
N
N/****************************************************************************/
Ndmc_mem_config_e eDMC_GetMemConfigRowAddr(void)
N{
N    return (dmc_mem_config_e)biGetmemory_cfg_row_bits();
X    return (dmc_mem_config_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> row_bits);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr)
N{
N    vSetmemory_cfg_column_bits(eColAddr);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> column_bits=(eColAddr));
N}
N
N
N/****************************************************************************/
Ndmc_mem_config_e eDMC_GetMemConfigColAddr(void)
N{
N    return (dmc_mem_config_e)biGetmemory_cfg_column_bits();
X    return (dmc_mem_config_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> column_bits);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk)
N{
N    vSetmemory_cfg_stop_mem_clock(eStopClk);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> stop_mem_clock=(eStopClk));
N}
N
N
N/****************************************************************************/
Ndmc_enable_e eDMC_GetMemConfigStopClk(void)
N{
N    return (dmc_enable_e)biGetmemory_cfg_stop_mem_clock();
X    return (dmc_enable_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> stop_mem_clock);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown)
N{
N    vSetmemory_cfg_auto_power_down(ePoweDown);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> auto_power_down=(ePoweDown));
N}
N
N
N/****************************************************************************/
Ndmc_enable_e eDMC_GetMemConfigAutoPowerDown(void)
N{
N    return (dmc_enable_e)biGetmemory_cfg_auto_power_down();
X    return (dmc_enable_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> auto_power_down);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge)
N{
N    vSetmemory_cfg_ap_bit(ePrecharge);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> ap_bit=(ePrecharge));
N}
N
N
N/****************************************************************************/
Ndmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void)
N{
N    return (dmc_auto_precharge_e)biGetmemory_cfg_ap_bit();
X    return (dmc_auto_precharge_e)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> ap_bit);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd)
N{
N    vSetmemory_cfg_power_dwn_prd(u8PwrDownPrd);
X    (((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> power_dwn_prd=(u8PwrDownPrd));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetMemConfigPwrDownPrd(void)
N{
N    return (uint8_t)biGetmemory_cfg_power_dwn_prd();
X    return (uint8_t)(((volatile memory_cfg_bit_view_st *)(0xc0d0100cU )) -> power_dwn_prd);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetRefreshPeriod(uint16_t u16RefPrd)
N{
N    vSetrefresh_prd_refresh_prd(u16RefPrd);
X    (((volatile refresh_prd_bit_view_st *)(0xc0d01010U )) -> refresh_prd=(u16RefPrd));
N}
N
N
N/****************************************************************************/
Nuint16_t u16DMC_GetRefreshPeriod(void)
N{
N    return (uint16_t)biGetrefresh_prd_refresh_prd();
X    return (uint16_t)(((volatile refresh_prd_bit_view_st *)(0xc0d01010U )) -> refresh_prd);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetCASLatency(uint8_t u8CASLatency)
N{
N    vSetcas_latency(u8CASLatency);
X    (*((volatile u32cas_latency_word_view *)(0xc0d01014U )) = (u8CASLatency));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetCASLatency(void)
N{
N    return (uint8_t)u32Getcas_latency();
X    return (uint8_t)(*((volatile u32cas_latency_word_view *)(0xc0d01014U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle)
N{
N    vSetcas_latency_cas_half_cycle(eHalfCycle);
X    (((volatile cas_latency_bit_view_st *)(0xc0d01014U )) -> cas_half_cycle=(eHalfCycle));
N}
N
N
N/****************************************************************************/
Ndmc_enable_e eDMC_GetCASHalfCycle(void)
N{
N    return (dmc_enable_e)biGetcas_latency_cas_half_cycle();
X    return (dmc_enable_e)(((volatile cas_latency_bit_view_st *)(0xc0d01014U )) -> cas_half_cycle);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetDQSTiming(uint8_t u8DQSTiming)
N{
N    vSett_dqss(u8DQSTiming);
X    (*((volatile u32t_dqss_word_view *)(0xc0d01018U )) = (u8DQSTiming));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetDQSTiming(void)
N{
N    return (uint8_t)u32Gett_dqss();
X    return (uint8_t)(*((volatile u32t_dqss_word_view *)(0xc0d01018U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetModeRegTiming(uint8_t u8Timing)
N{
N    vSett_mrd(u8Timing);
X    (*((volatile u32t_mrd_word_view *)(0xc0d0101cU )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetModeRegTiming(void)
N{
N    return (uint8_t)u32Gett_mrd();
X    return (uint8_t)(*((volatile u32t_mrd_word_view *)(0xc0d0101cU )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing)
N{
N    vSett_ras(u8Timing);
X    (*((volatile u32t_ras_word_view *)(0xc0d01020U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetActiveToPrechargeTiming(void)
N{
N    return (uint8_t)u32Gett_ras();
X    return (uint8_t)(*((volatile u32t_ras_word_view *)(0xc0d01020U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetActiveToActiveTiming(uint8_t u8Timing)
N{
N    vSett_rc(u8Timing);
X    (*((volatile u32t_rc_word_view *)(0xc0d01024U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetActiveToActiveTiming(void)
N{
N    return (uint8_t)u32Gett_rc();
X    return (uint8_t)(*((volatile u32t_rc_word_view *)(0xc0d01024U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetActiveToRWTiming(uint8_t u8Timing)
N{
N    vSett_rcd(u8Timing);
X    (*((volatile u32t_rcd_word_view *)(0xc0d01028U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetActiveToRWTiming(void)
N{
N    return (uint8_t)u32Gett_rcd();
X    return (uint8_t)(*((volatile u32t_rcd_word_view *)(0xc0d01028U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetScheduleRCD(uint8_t u8Timing)
N{
N    vSett_rcd_schedule_rcd(u8Timing);
X    (((volatile t_rcd_bit_view_st *)(0xc0d01028U )) -> schedule_rcd=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetScheduleRCD(void)
N{
N    return (uint8_t)biGett_rcd_schedule_rcd();
X    return (uint8_t)(((volatile t_rcd_bit_view_st *)(0xc0d01028U )) -> schedule_rcd);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_Set_T_RCD(uint8_t u8Timing)
N{
N    vSett_rcd_t_rcd(u8Timing);
X    (((volatile t_rcd_bit_view_st *)(0xc0d01028U )) -> t_rcd=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_Get_T_RCD(void)
N{
N    return (uint8_t)biGett_rcd_t_rcd();
X    return (uint8_t)(((volatile t_rcd_bit_view_st *)(0xc0d01028U )) -> t_rcd);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetAutoRefreshTiming(uint16_t u16Timing)
N{
N    vSett_rfc(u16Timing);
X    (*((volatile u32t_rfc_word_view *)(0xc0d0102cU )) = (u16Timing));
N}
N
N
N/****************************************************************************/
Nuint16_t u16DMC_GetAutoRefreshTiming(void)
N{
N    return (uint16_t)u32Gett_rfc();
X    return (uint16_t)(*((volatile u32t_rfc_word_view *)(0xc0d0102cU )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetScheduleRFC(uint8_t u8Timing)
N{
N    vSett_rfc_schedule_rfc(u8Timing);
X    (((volatile t_rfc_bit_view_st *)(0xc0d0102cU )) -> schedule_rfc=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetScheduleRFC(void)
N{
N    return (uint8_t)biGett_rfc_schedule_rfc();
X    return (uint8_t)(((volatile t_rfc_bit_view_st *)(0xc0d0102cU )) -> schedule_rfc);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_Set_T_RFC(uint8_t u8Timing)
N{
N    vSett_rfc_t_rfc(u8Timing);
X    (((volatile t_rfc_bit_view_st *)(0xc0d0102cU )) -> t_rfc=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_Get_T_RFC(void)
N{
N    return (uint8_t)biGett_rfc_t_rfc();
X    return (uint8_t)(((volatile t_rfc_bit_view_st *)(0xc0d0102cU )) -> t_rfc);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetPrechargeTiming(uint8_t u8Timing)
N{
N    vSett_rp(u8Timing);
X    (*((volatile u32t_rp_word_view *)(0xc0d01030U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetPrechargeTiming(void)
N{
N    return (uint8_t)u32Gett_rp();
X    return (uint8_t)(*((volatile u32t_rp_word_view *)(0xc0d01030U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetScheduleRP(uint8_t u8Timing)
N{
N    vSett_rp_schedule_rp(u8Timing);
X    (((volatile t_rp_bit_view_st *)(0xc0d01030U )) -> schedule_rp=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetScheduleRP(void)
N{
N    return (uint8_t)biGett_rp_schedule_rp();
X    return (uint8_t)(((volatile t_rp_bit_view_st *)(0xc0d01030U )) -> schedule_rp);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_Set_T_RP(uint8_t u8Timing)
N{
N    vSett_rp_t_rp(u8Timing);
X    (((volatile t_rp_bit_view_st *)(0xc0d01030U )) -> t_rp=(u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_Get_T_RP(void)
N{
N    return (uint8_t)biGett_rp_t_rp();
X    return (uint8_t)(((volatile t_rp_bit_view_st *)(0xc0d01030U )) -> t_rp);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetActiveDiffBankTiming(uint8_t u8Timing)
N{
N    vSett_rrd(u8Timing);
X    (*((volatile u32t_rrd_word_view *)(0xc0d01034U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetActiveDiffBankTiming(void)
N{
N    return (uint8_t)u32Gett_rrd();
X    return (uint8_t)(*((volatile u32t_rrd_word_view *)(0xc0d01034U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing)
N{
N    vSett_wr(u8Timing);
X    (*((volatile u32t_wr_word_view *)(0xc0d01038U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetWriteToPrechargeTiming(void)
N{
N    return (uint8_t)u32Gett_wr();
X    return (uint8_t)(*((volatile u32t_wr_word_view *)(0xc0d01038U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetWriteToReadTiming(uint8_t u8Timing)
N{
N    vSett_wtr(u8Timing);
X    (*((volatile u32t_wtr_word_view *)(0xc0d0103cU )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetWriteToReadTiming(void)
N{
N    return (uint8_t)u32Gett_wtr();
X    return (uint8_t)(*((volatile u32t_wtr_word_view *)(0xc0d0103cU )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetExitPowerDownTiming(uint8_t u8Timing)
N{
N    vSett_xp(u8Timing);
X    (*((volatile u32t_xp_word_view *)(0xc0d01040U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetExitPowerDownTiming(void)
N{
N    return (uint8_t)u32Gett_xp();
X    return (uint8_t)(*((volatile u32t_xp_word_view *)(0xc0d01040U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing)
N{
N    vSett_xsr(u8Timing);
X    (*((volatile u32t_xsr_word_view *)(0xc0d01044U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetExitSelfRefreshTiming(void)
N{
N    return (uint8_t)u32Gett_xsr();
X    return (uint8_t)(*((volatile u32t_xsr_word_view *)(0xc0d01044U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetSelfRefreshTiming(uint8_t u8Timing)
N{
N    vSett_esr(u8Timing);
X    (*((volatile u32t_esr_word_view *)(0xc0d01048U )) = (u8Timing));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetSelfRefreshTiming(void)
N{
N    return (uint8_t)u32Gett_esr();
X    return (uint8_t)(*((volatile u32t_esr_word_view *)(0xc0d01048U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfig2(uint32_t u32Config)
N{
N    vSetmemory_cfg2(u32Config);
X    (*((volatile u32memory_cfg2_word_view *)(0xc0d0104cU )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nuint32_t u32DMC_GetMemConfig2(void)
N{
N    return (uint32_t)u32Getmemory_cfg2();
X    return (uint32_t)(*((volatile u32memory_cfg2_word_view *)(0xc0d0104cU )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay)
N{
N    vSetmemory_cfg2_read_delay(u8Delay);
X    (((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> read_delay=(u8Delay));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetMemCfg2ReadDelay(void)
N{
N    return (uint8_t)biGetmemory_cfg2_read_delay();
X    return (uint8_t)(((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> read_delay);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol)
N{
N    vSetmemory_cfg2_memory_protocol(eProtocol);
X    (((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> memory_protocol=(eProtocol));
N}
N
N
N/****************************************************************************/
Ndmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void)
N{
N    return (dmc_mem_protocol_e)biGetmemory_cfg2_memory_protocol();
X    return (dmc_mem_protocol_e)(((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> memory_protocol);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth)
N{
N    vSetmemory_cfg2_memory_width(eMemWidth);
X    (((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> memory_width=(eMemWidth));
N}
N
N
N/****************************************************************************/
Ndmc_width_e eDMC_GetMemCfg2MemWidth(void)
N{
N    return (dmc_width_e)biGetmemory_cfg2_memory_width();
X    return (dmc_width_e)(((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> memory_width);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg2CkeInit(dmc_high_e eInit)
N{
N    vSetmemory_cfg2_cke_init(eInit);
X    (((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> cke_init=(eInit));
N}
N
N
N/****************************************************************************/
Ndmc_high_e eDMC_GetMemCfg2CkeInit(void)
N{
N    return (dmc_high_e)biGetmemory_cfg2_cke_init();
X    return (dmc_high_e)(((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> cke_init);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg2DqmInit(dmc_high_e eInit)
N{
N    vSetmemory_cfg2_dqm_init(eInit);
X    (((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> dqm_init=(eInit));
N}
N
N
N/****************************************************************************/
Ndmc_high_e eDMC_GetMemCfg2DqmInit(void)
N{
N    return (dmc_high_e)biGetmemory_cfg2_dqm_init();
X    return (dmc_high_e)(((volatile memory_cfg2_bit_view_st *)(0xc0d0104cU )) -> dqm_init);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemConfig3(uint32_t u32Config)
N{
N    vSetmemory_cfg3(u32Config);
X    (*((volatile u32memory_cfg3_word_view *)(0xc0d01050U )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nuint32_t u32DMC_GetMemConfig3(void)
N{
N    return (uint32_t)u32Getmemory_cfg3();
X    return (uint32_t)(*((volatile u32memory_cfg3_word_view *)(0xc0d01050U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg3PreScale(uint16_t u16Prescale)
N{
N    vSetmemory_cfg3_prescale(u16Prescale);
X    (((volatile memory_cfg3_bit_view_st *)(0xc0d01050U )) -> prescale=(u16Prescale));
N}
N
N
N/****************************************************************************/
Nuint16_t u16DMC_GetMemCfg3PreScale(void)
N{
N    return (uint16_t)biGetmemory_cfg3_prescale();
X    return (uint16_t)(((volatile memory_cfg3_bit_view_st *)(0xc0d01050U )) -> prescale);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds)
N{
N    vSetmemory_cfg3_max_outs_refs(u8MaxRefsCmds);
X    (((volatile memory_cfg3_bit_view_st *)(0xc0d01050U )) -> max_outs_refs=(u8MaxRefsCmds));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetMemCfg3MaxRefsCmds(void)
N{
N    return (uint8_t)biGetmemory_cfg3_max_outs_refs();
X    return (uint8_t)(((volatile memory_cfg3_bit_view_st *)(0xc0d01050U )) -> max_outs_refs);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay)
N{
N    vSetread_transfer_delay_read_transfer_delay(eDelay);
X    (((volatile read_transfer_delay_bit_view_st *)(0xc0d0107cU )) -> read_transfer_delay=(eDelay));
N}
N
N
N/****************************************************************************/
Ndmc_read_delay_e eDMC_GetReadTransferDelay(void)
N{
N    return (dmc_read_delay_e)biGetread_transfer_delay_read_transfer_delay();
X    return (dmc_read_delay_e)(((volatile read_transfer_delay_bit_view_st *)(0xc0d0107cU )) -> read_transfer_delay);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
N                      dmc_enable_e eQosMin, dmc_enable_e eQosEnable)
N{
N    switch(u8CfgID)
N    {
N        case 0 :
N                vSetid_0_cfg_qos_enable0(eQosEnable);
X                (((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_enable0=(eQosEnable));
N                vSetid_0_cfg_qos_min0(eQosMin);
X                (((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_min0=(eQosMin));
N                vSetid_0_cfg_qos_max0(u8QosMax);
X                (((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_max0=(u8QosMax));
N                break;
N        case 1 :
N                vSetid_1_cfg_qos_enable1(eQosEnable);
X                (((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_enable1=(eQosEnable));
N                vSetid_1_cfg_qos_min1(eQosMin);
X                (((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_min1=(eQosMin));
N                vSetid_1_cfg_qos_max1(u8QosMax);
X                (((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_max1=(u8QosMax));
N                break;
N        case 2 :
N                vSetid_2_cfg_qos_enable2(eQosEnable);
X                (((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_enable2=(eQosEnable));
N                vSetid_2_cfg_qos_min2(eQosMin);
X                (((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_min2=(eQosMin));
N                vSetid_2_cfg_qos_max2(u8QosMax);
X                (((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_max2=(u8QosMax));
N                break;
N        case 3 :
N                vSetid_3_cfg_qos_enable3(eQosEnable);
X                (((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_enable3=(eQosEnable));
N                vSetid_3_cfg_qos_min3(eQosMin);
X                (((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_min3=(eQosMin));
N                vSetid_3_cfg_qos_max3(u8QosMax);
X                (((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_max3=(u8QosMax));
N                break;
N        case 4 :
N                vSetid_4_cfg_qos_enable4(eQosEnable);
X                (((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_enable4=(eQosEnable));
N                vSetid_4_cfg_qos_min4(eQosMin);
X                (((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_min4=(eQosMin));
N                vSetid_4_cfg_qos_max4(u8QosMax);
X                (((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_max4=(u8QosMax));
N                break;
N        case 5 :
N                vSetid_5_cfg_qos_enable5(eQosEnable);
X                (((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_enable5=(eQosEnable));
N                vSetid_5_cfg_qos_min5(eQosMin);
X                (((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_min5=(eQosMin));
N                vSetid_5_cfg_qos_max5(u8QosMax);
X                (((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_max5=(u8QosMax));
N                break;
N        case 6 :
N                vSetid_6_cfg_qos_enable6(eQosEnable);
X                (((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_enable6=(eQosEnable));
N                vSetid_6_cfg_qos_min6(eQosMin);
X                (((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_min6=(eQosMin));
N                vSetid_6_cfg_qos_max6(u8QosMax);
X                (((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_max6=(u8QosMax));
N                break;
N        case 7 :
N                vSetid_7_cfg_qos_enable7(eQosEnable);
X                (((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_enable7=(eQosEnable));
N                vSetid_7_cfg_qos_min7(eQosMin);
X                (((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_min7=(eQosMin));
N                vSetid_7_cfg_qos_max7(u8QosMax);
X                (((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_max7=(u8QosMax));
N                break;
N        case 8 :
N                vSetid_8_cfg_qos_enable8(eQosEnable);
X                (((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_enable8=(eQosEnable));
N                vSetid_8_cfg_qos_min8(eQosMin);
X                (((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_min8=(eQosMin));
N                vSetid_8_cfg_qos_max8(u8QosMax);
X                (((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_max8=(u8QosMax));
N                break;
N        case 9 :
N                vSetid_9_cfg_qos_enable9(eQosEnable);
X                (((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_enable9=(eQosEnable));
N                vSetid_9_cfg_qos_min9(eQosMin);
X                (((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_min9=(eQosMin));
N                vSetid_9_cfg_qos_max9(u8QosMax);
X                (((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_max9=(u8QosMax));
N                break;
N        case 10 :
N                vSetid_10_cfg_qos_enable10(eQosEnable);
X                (((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_enable10=(eQosEnable));
N                vSetid_10_cfg_qos_min10(eQosMin);
X                (((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_min10=(eQosMin));
N                vSetid_10_cfg_qos_max10(u8QosMax);
X                (((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_max10=(u8QosMax));
N                break;
N        case 11 :
N                vSetid_11_cfg_qos_enable11(eQosEnable);
X                (((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_enable11=(eQosEnable));
N                vSetid_11_cfg_qos_min11(eQosMin);
X                (((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_min11=(eQosMin));
N                vSetid_11_cfg_qos_max11(u8QosMax);
X                (((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_max11=(u8QosMax));
N                break;
N        case 12 :
N                vSetid_12_cfg_qos_enable12(eQosEnable);
X                (((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_enable12=(eQosEnable));
N                vSetid_12_cfg_qos_min12(eQosMin);
X                (((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_min12=(eQosMin));
N                vSetid_12_cfg_qos_max12(u8QosMax);
X                (((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_max12=(u8QosMax));
N                break;
N        case 13 :
N                vSetid_13_cfg_qos_enable13(eQosEnable);
X                (((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_enable13=(eQosEnable));
N                vSetid_13_cfg_qos_min13(eQosMin);
X                (((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_min13=(eQosMin));
N                vSetid_13_cfg_qos_max13(u8QosMax);
X                (((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_max13=(u8QosMax));
N                break;
N        case 14 :
N                vSetid_14_cfg_qos_enable14(eQosEnable);
X                (((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_enable14=(eQosEnable));
N                vSetid_14_cfg_qos_min14(eQosMin);
X                (((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_min14=(eQosMin));
N                vSetid_14_cfg_qos_max14(u8QosMax);
X                (((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_max14=(u8QosMax));
N                break;
N        case 15 :
N                vSetid_15_cfg_qos_enable15(eQosEnable);
X                (((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_enable15=(eQosEnable));
N                vSetid_15_cfg_qos_min15(eQosMin);
X                (((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_min15=(eQosMin));
N                vSetid_15_cfg_qos_max15(u8QosMax);
X                (((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_max15=(u8QosMax));
N                break;                
N        default :
N                break;
N    }
N}
N
N
N/****************************************************************************/
Nvoid vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
N                        dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable)
N{
N    switch(u8CfgID)
N    {
N        case 0 :
N                *pQosEnable = (dmc_enable_e)biGetid_0_cfg_qos_enable0();
X                *pQosEnable = (dmc_enable_e)(((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_enable0);
N                *pQosMin    = (dmc_enable_e)biGetid_0_cfg_qos_min0();
X                *pQosMin    = (dmc_enable_e)(((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_min0);
N                *pu8QosMax  = biGetid_0_cfg_qos_max0();
X                *pu8QosMax  = (((volatile id_0_cfg_bit_view_st *)(0xc0d01100U )) -> qos_max0);
N                break;
N        case 1 :
N                *pQosEnable = (dmc_enable_e)biGetid_1_cfg_qos_enable1();
X                *pQosEnable = (dmc_enable_e)(((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_enable1);
N                *pQosMin    = (dmc_enable_e)biGetid_1_cfg_qos_min1();
X                *pQosMin    = (dmc_enable_e)(((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_min1);
N                *pu8QosMax  = biGetid_1_cfg_qos_max1();
X                *pu8QosMax  = (((volatile id_1_cfg_bit_view_st *)(0xc0d01104U )) -> qos_max1);
N                break;
N        case 2 :
N                *pQosEnable = (dmc_enable_e)biGetid_2_cfg_qos_enable2();
X                *pQosEnable = (dmc_enable_e)(((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_enable2);
N                *pQosMin    = (dmc_enable_e)biGetid_2_cfg_qos_min2();
X                *pQosMin    = (dmc_enable_e)(((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_min2);
N                *pu8QosMax  = biGetid_2_cfg_qos_max2();
X                *pu8QosMax  = (((volatile id_2_cfg_bit_view_st *)(0xc0d01108U )) -> qos_max2);
N                break;
N        case 3 :
N                *pQosEnable = (dmc_enable_e)biGetid_3_cfg_qos_enable3();
X                *pQosEnable = (dmc_enable_e)(((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_enable3);
N                *pQosMin    = (dmc_enable_e)biGetid_3_cfg_qos_min3();
X                *pQosMin    = (dmc_enable_e)(((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_min3);
N                *pu8QosMax  = biGetid_3_cfg_qos_max3();
X                *pu8QosMax  = (((volatile id_3_cfg_bit_view_st *)(0xc0d0110cU )) -> qos_max3);
N                break;
N        case 4 :
N                *pQosEnable = (dmc_enable_e)biGetid_4_cfg_qos_enable4();
X                *pQosEnable = (dmc_enable_e)(((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_enable4);
N                *pQosMin    = (dmc_enable_e)biGetid_4_cfg_qos_min4();
X                *pQosMin    = (dmc_enable_e)(((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_min4);
N                *pu8QosMax  = biGetid_4_cfg_qos_max4();
X                *pu8QosMax  = (((volatile id_4_cfg_bit_view_st *)(0xc0d01110U )) -> qos_max4);
N                break;
N        case 5 :
N                *pQosEnable = (dmc_enable_e)biGetid_5_cfg_qos_enable5();
X                *pQosEnable = (dmc_enable_e)(((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_enable5);
N                *pQosMin    = (dmc_enable_e)biGetid_5_cfg_qos_min5();
X                *pQosMin    = (dmc_enable_e)(((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_min5);
N                *pu8QosMax  = biGetid_5_cfg_qos_max5();
X                *pu8QosMax  = (((volatile id_5_cfg_bit_view_st *)(0xc0d01114U )) -> qos_max5);
N                break;
N        case 6 :
N                *pQosEnable = (dmc_enable_e)biGetid_6_cfg_qos_enable6();
X                *pQosEnable = (dmc_enable_e)(((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_enable6);
N                *pQosMin    = (dmc_enable_e)biGetid_6_cfg_qos_min6();
X                *pQosMin    = (dmc_enable_e)(((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_min6);
N                *pu8QosMax  = biGetid_6_cfg_qos_max6();
X                *pu8QosMax  = (((volatile id_6_cfg_bit_view_st *)(0xc0d01118U )) -> qos_max6);
N                break;
N        case 7 :
N                *pQosEnable = (dmc_enable_e)biGetid_7_cfg_qos_enable7();
X                *pQosEnable = (dmc_enable_e)(((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_enable7);
N                *pQosMin    = (dmc_enable_e)biGetid_7_cfg_qos_min7();
X                *pQosMin    = (dmc_enable_e)(((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_min7);
N                *pu8QosMax  = biGetid_7_cfg_qos_max7();
X                *pu8QosMax  = (((volatile id_7_cfg_bit_view_st *)(0xc0d0111cU )) -> qos_max7);
N                break;
N        case 8 :
N                *pQosEnable = (dmc_enable_e)biGetid_8_cfg_qos_enable8();
X                *pQosEnable = (dmc_enable_e)(((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_enable8);
N                *pQosMin    = (dmc_enable_e)biGetid_8_cfg_qos_min8();
X                *pQosMin    = (dmc_enable_e)(((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_min8);
N                *pu8QosMax  = biGetid_8_cfg_qos_max8();
X                *pu8QosMax  = (((volatile id_8_cfg_bit_view_st *)(0xc0d01120U )) -> qos_max8);
N                break;
N        case 9 :
N                *pQosEnable = (dmc_enable_e)biGetid_9_cfg_qos_enable9();
X                *pQosEnable = (dmc_enable_e)(((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_enable9);
N                *pQosMin    = (dmc_enable_e)biGetid_9_cfg_qos_min9();
X                *pQosMin    = (dmc_enable_e)(((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_min9);
N                *pu8QosMax  = biGetid_9_cfg_qos_max9();
X                *pu8QosMax  = (((volatile id_9_cfg_bit_view_st *)(0xc0d01124U )) -> qos_max9);
N                break;
N        case 10 :
N                *pQosEnable = (dmc_enable_e)biGetid_10_cfg_qos_enable10();
X                *pQosEnable = (dmc_enable_e)(((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_enable10);
N                *pQosMin    = (dmc_enable_e)biGetid_10_cfg_qos_min10();
X                *pQosMin    = (dmc_enable_e)(((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_min10);
N                *pu8QosMax  = biGetid_10_cfg_qos_max10();
X                *pu8QosMax  = (((volatile id_10_cfg_bit_view_st *)(0xc0d01128U )) -> qos_max10);
N                break;
N        case 11 :
N                *pQosEnable = (dmc_enable_e)biGetid_11_cfg_qos_enable11();
X                *pQosEnable = (dmc_enable_e)(((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_enable11);
N                *pQosMin    = (dmc_enable_e)biGetid_11_cfg_qos_min11();
X                *pQosMin    = (dmc_enable_e)(((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_min11);
N                *pu8QosMax  = biGetid_11_cfg_qos_max11();
X                *pu8QosMax  = (((volatile id_11_cfg_bit_view_st *)(0xc0d0112cU )) -> qos_max11);
N                break;
N        case 12 :
N                *pQosEnable = (dmc_enable_e)biGetid_12_cfg_qos_enable12();
X                *pQosEnable = (dmc_enable_e)(((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_enable12);
N                *pQosMin    = (dmc_enable_e)biGetid_12_cfg_qos_min12();
X                *pQosMin    = (dmc_enable_e)(((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_min12);
N                *pu8QosMax  = biGetid_12_cfg_qos_max12();
X                *pu8QosMax  = (((volatile id_12_cfg_bit_view_st *)(0xc0d01130U )) -> qos_max12);
N                break;
N        case 13 :
N                *pQosEnable = (dmc_enable_e)biGetid_13_cfg_qos_enable13();
X                *pQosEnable = (dmc_enable_e)(((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_enable13);
N                *pQosMin    = (dmc_enable_e)biGetid_13_cfg_qos_min13();
X                *pQosMin    = (dmc_enable_e)(((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_min13);
N                *pu8QosMax  = biGetid_13_cfg_qos_max13();
X                *pu8QosMax  = (((volatile id_13_cfg_bit_view_st *)(0xc0d01134U )) -> qos_max13);
N                break;
N        case 14 :
N                *pQosEnable = (dmc_enable_e)biGetid_14_cfg_qos_enable14();
X                *pQosEnable = (dmc_enable_e)(((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_enable14);
N                *pQosMin    = (dmc_enable_e)biGetid_14_cfg_qos_min14();
X                *pQosMin    = (dmc_enable_e)(((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_min14);
N                *pu8QosMax  = biGetid_14_cfg_qos_max14();
X                *pu8QosMax  = (((volatile id_14_cfg_bit_view_st *)(0xc0d01138U )) -> qos_max14);
N                break;
N        case 15 :
N                *pQosEnable = (dmc_enable_e)biGetid_15_cfg_qos_enable15();
X                *pQosEnable = (dmc_enable_e)(((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_enable15);
N                *pQosMin    = (dmc_enable_e)biGetid_15_cfg_qos_min15();
X                *pQosMin    = (dmc_enable_e)(((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_min15);
N                *pu8QosMax  = biGetid_15_cfg_qos_max15();
X                *pu8QosMax  = (((volatile id_15_cfg_bit_view_st *)(0xc0d0113cU )) -> qos_max15);
N                break;                
N            
N        default :
N                break;
N    }
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetChipConfig(uint32_t u32Config)
N{
N    vSetchip_cfg(u32Config);
X    (*((volatile u32chip_cfg_word_view *)(0xc0d01200U )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nuint32_t u32DMC_GetChipConfig(void)
N{
N    return (uint32_t)u32Getchip_cfg();
X    return (uint32_t)(*((volatile u32chip_cfg_word_view *)(0xc0d01200U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt)
N{
N    vSetchip_cfg_address_fmt(eAddrFmt);
X    (((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_fmt=(eAddrFmt));
N}
N
N
N/****************************************************************************/
Ndmc_addr_format_e eDMC_GetChipConfigAddrFmt(void)
N{
N    return (dmc_addr_format_e)biGetchip_cfg_address_fmt();
X    return (dmc_addr_format_e)(((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_fmt);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch)
N{
N    vSetchip_cfg_address_match(u8AddrMatch);
X    (((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_match=(u8AddrMatch));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetChipConfigAddrMatch(void)
N{
N    return (uint8_t)biGetchip_cfg_address_match();
X    return (uint8_t)(((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_match);
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask)
N{
N    vSetchip_cfg_address_mask(u8AddrMask);
X    (((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_mask=(u8AddrMask));
N}
N
N
N/****************************************************************************/
Nuint8_t u8DMC_GetChipConfigAddrMask(void)
N{
N    return (uint8_t)biGetchip_cfg_address_mask();
X    return (uint8_t)(((volatile chip_cfg_bit_view_st *)(0xc0d01200U )) -> address_mask);
N}
N
N
N/****************************************************************************/
Ndmc_enable_e eDMC_GetUserStatus(void)
N{
N    return (dmc_enable_e)u32Getuser_status();
X    return (dmc_enable_e)(*((volatile u32user_status_word_view *)(0xc0d01300U )) );
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig(uint32_t u32Config)
N{
N    vSetuser_config(u32Config);
X    (*((volatile u32user_config_word_view *)(0xc0d01304U )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio)
N{
N    vSetuser_config_gear_ratio0(u16GearRatio);
X    (((volatile user_config_bit_view_st *)(0xc0d01304U )) -> gear_ratio0=(u16GearRatio));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio)
N{
N    vSetuser_config_gear_ratio1(u16GearRatio);
X    (((volatile user_config_bit_view_st *)(0xc0d01304U )) -> gear_ratio1=(u16GearRatio));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1(uint32_t u32Config)
N{
N    vSetuser_config1(u32Config);
X    (*((volatile u32user_config1_word_view *)(0xc0d01308U )) = (u32Config));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio)
N{
N    vSetuser_config1_gear_ratio3(u16GearRatio);
X    (((volatile user_config1_bit_view_st *)(0xc0d01308U )) -> gear_ratio3=(u16GearRatio));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1UseMinDelay(bool_t boDelay)
N{
N    vSetuser_config1_Use_Min_Delay(boDelay);
X    (((volatile user_config1_bit_view_st *)(0xc0d01308U )) -> Use_Min_Delay=(boDelay));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange)
N{
N    vSetuser_config1_Clock_Mode_Change(eModeChange);
X    (((volatile user_config1_bit_view_st *)(0xc0d01308U )) -> Clock_Mode_Change=(eModeChange));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable)
N{
N    vSetuser_config1_Enable(eEnable);
X    (((volatile user_config1_bit_view_st *)(0xc0d01308U )) -> Enable=(eEnable));
N}
N
N
N/****************************************************************************/
Nvoid vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio)
N{
N    vSetuser_config1_gear_ratio2(u16GearRatio);
X    (((volatile user_config1_bit_view_st *)(0xc0d01308U )) -> gear_ratio2=(u16GearRatio));
N}
N
N
N/****************************************************************************/
Nvoid vSetEarlyWriteResponse(dmc_enable_e eEnable)
N{
N    if (eEnable == DMC_ENABLE)
N    {
N        vSetfeature_ctrl_stop_early_bresp((uint32_t)DMC_DISABLE);
X        (((volatile feature_ctrl_bit_view_st *)(0xc0d0130cU )) -> stop_early_bresp=((uint32_t)DMC_DISABLE));
N    }
N    else
N    {
N        vSetfeature_ctrl_stop_early_bresp((uint32_t)DMC_ENABLE);
X        (((volatile feature_ctrl_bit_view_st *)(0xc0d0130cU )) -> stop_early_bresp=((uint32_t)DMC_ENABLE));
N    }
N}
N
N
N/****************************************************************************/
N/*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1834 / 5.1 - casting error
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1849 / 8.1 - bitwise ~ or << expression must be immediately cast 
N** |                       back to  underlying type, "unsigned char" 
N** | CONS.  : allow
N** | REASON : necessary for shift operations, which we know it will not over run 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1864 /10.1  - implicit conversion from underlying type, "type", 
N** |                        to narrower underlying type, "type", not allowed
N** | CONS.  : allow
N** | REASON : to use macros from i/o header files 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1865 /10.1  -  implicit conversion from underlying type, "type", 
N** |                         to same width underlying type, "type", not allowed
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1866 /10.1  -  implicit conversion from underlying type, "type",  
N** |                         to underlying type, "type", changes signedness
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1867 /10.1  -  implicit conversion from underlying type, "type", 
N** |                         to underlying type, "type", changes signedness
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1879 /10.3  - 	 cast of complex integer expression with underlying
N** |                           type "type" to same width type "type" not allowed
N** | CONS.  : allow
N** | REASON : to assign parameters which may be defined as macros in io header file
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1880 /10.3  -    cast of complex integer expression with underlying
N** |                           type "type" to same width type "type" not allowed
N** | CONS.  : allow
N** | REASON : to assign parameters which may be defined as macros in io header file
N** |
N**  ------------------------------------------------------------------------
N
N*****************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
