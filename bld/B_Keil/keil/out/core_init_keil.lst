


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;*   This software is copyright protected. All rights re
                       served
    3 00000000         ;*   Toshiba Electronics Europe GmbH
    4 00000000         ;*   European LSI Design and Engineering Center (ELDEC)
    5 00000000         ;*******************************************************
                       ***********************
    6 00000000         ;*   DESCRIPTION : SRAM boot-up code sequence
    7 00000000         ;*******************************************************
                       ***********************
    8 00000000         ;*   PLATFORM    : TMPR46xXBG-300
    9 00000000         ;*   PROJECT     :
   10 00000000         ;*   MODULE      : System
   11 00000000         ;*   LIBRARIES   : None
   12 00000000         ;;******************************************************
                       ************************
   13 00000000         ;*   VERSION     : $Revision: 1.6 $
   14 00000000         ;*   DATE        : $Date: 2015/05/04 09:07:18 $
   15 00000000         ;*   TAG         : $Name:  $
   16 00000000         ;*   RELEASE     : Preliminary & Confidential
   17 00000000         ;*******************************************************
                       **********************/
   18 00000000         
   19 00000000         ;/**********************************************
   20 00000000         ;*              Imported Symbols               *
   21 00000000         ;**********************************************/
   22 00000000                 IMPORT           vASM_Init8WordsInBurst
   23 00000000                 IMPORT           vASM_Init_zi
   24 00000000                 IMPORT           vAppMain
   25 00000000                 IMPORT           |Image$$ARM_LIB_STACK$$ZI$$Limi
t|
   26 00000000         
   27 00000000         ;/**********************************************
   28 00000000         ;*                   Symbols                   *
   29 00000000         ;**********************************************/
   30 00000000         ; Initial value of all general purpose registers (r0-r14
                       )
   31 00000000 00000000 
                       GP_REG_INIT_VAL
                               EQU              0x00000000
   32 00000000         
   33 00000000         ;
   34 00000000         ; WARNING: STACK SIZE SHALL BE 64K !!!
   35 00000000         ;
   36 00000000 00008000 
                       SVC_STACK_SIZE
                               EQU              0x8000
   37 00000000 00000800 
                       ABT_STACK_SIZE
                               EQU              0x800
   38 00000000 00001000 
                       FIQ_STACK_SIZE
                               EQU              0x1000
   39 00000000 00000800 
                       UND_STACK_SIZE
                               EQU              0x800
   40 00000000 00002000 
                       IRQ_STACK_SIZE



ARM Macro Assembler    Page 2 


                               EQU              0x2000
   41 00000000 00004000 
                       USR_STACK_SIZE
                               EQU              0x4000
   42 00000000         
   43 00000000         ;
   44 00000000         ; WARNING: STACK OFFSETS ARE BASED On THE ABOVE SIZES !!
                       !
   45 00000000         ;
   46 00000000 00008000 
                       ABT_STACK_OFFSET
                               EQU              0x8000      ; (0+SVC_STACK_SIZE
                                                            )
   47 00000000 00008800 
                       FIQ_STACK_OFFSET
                               EQU              0x8800      ; (ABT_STACK_OFFSET
                                                            +ABT_STACK_SIZE) 
   48 00000000 00009800 
                       UND_STACK_OFFSET
                               EQU              0x9800      ; (FIQ_STACK_OFFSET
                                                            +FIQ_STACK_SIZE) 
   49 00000000 0000A000 
                       IRQ_STACK_OFFSET
                               EQU              0xA000      ; (USR_STACK_OFFSET
                                                            +UND_STACK_SIZE) 
   50 00000000 0000C000 
                       USR_STACK_OFFSET
                               EQU              0xC000      ; (IRQ_STACK_OFFSET
                                                            +IRQ_STACK_SIZE) 
   51 00000000         
   52 00000000         ;/*********************************************/
   53 00000000         
   54 00000000                 AREA             exc_table, CODE, READONLY, ALIG
N=8
   55 00000000         
   56 00000000                 INCLUDE          ..\inc\excp_hndlr_keil.h
    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;*   This software is copyright protected. All rights re
                       served
    3 00000000         ;*   Toshiba Electronics Europe GmbH
    4 00000000         ;*   European LSI Design and Engineering Center (ELDEC)
    5 00000000         ;*******************************************************
                       ***********************
    6 00000000         ;*   DESCRIPTION : Capricorn_Bt exception handlers
    7 00000000         ;*******************************************************
                       ***********************
    8 00000000         ;*   PLATFORM    : TMPR46xXBG-300
    9 00000000         ;*   PROJECT     :
   10 00000000         ;*   MODULE      : System
   11 00000000         ;*   LIBRARIES   : None
   12 00000000         ;;******************************************************
                       ************************
   13 00000000         ;*   VERSION     : $Revision: 1.5 $
   14 00000000         ;*   DATE        : $Date: 2015/05/04 09:07:16 $
   15 00000000         ;*   TAG         : $Name:  $
   16 00000000         ;*   RELEASE     : Preliminary & Confidential
   17 00000000         ;*******************************************************
                       **********************/



ARM Macro Assembler    Page 3 


   18 00000000         
   19 00000000         ;/**********************************************
   20 00000000         ;*                 Constants                   *
   21 00000000         ;**********************************************/
   22 00000000         
   23 00000000         
   24 00000000         ;/*********************************************/
   25 00000000         
   26 00000000         
   27 00000000         ;/**********************************************
   28 00000000         ;*                    Macros                   *
   29 00000000         ;**********************************************/
   30 00000000         
   31 00000000         
   32 00000000         ;/*********************************************/
   33 00000000         
   34 00000000         
   35 00000000         ;/**********************************************
   36 00000000         ;*        Exported function prototypes         *
   37 00000000         ;**********************************************/
   38 00000000         
   39 00000000         ;/******************************************************
                       **********************
   40 00000000         ; *
   41 00000000         ; * Function:       unhandled_exception
   42 00000000         ; *
   43 00000000         ; * Purpose:        Unhandled exception
   44 00000000         ; *
   45 00000000         ; * Inputs:         none
   46 00000000         ; *
   47 00000000         ; * Outputs:        none
   48 00000000         ; *
   49 00000000         ; * Return Values:  none
   50 00000000         ; *
   51 00000000         ; * Limitations:    none
   52 00000000         ; *
   53 00000000         ; ******************************************************
                       *********************/
   54 00000000                 IMPORT           unhandled_exception
   55 00000000         
   56 00000000         ;/******************************************************
                       **********************
   57 00000000         ; *
   58 00000000         ; * Function:       irq_exception
   59 00000000         ; *
   60 00000000         ; * Purpose:        IRQ exception
   61 00000000         ; *
   62 00000000         ; * Inputs:         none
   63 00000000         ; *
   64 00000000         ; * Outputs:        none
   65 00000000         ; *
   66 00000000         ; * Return Values:  none
   67 00000000         ; *
   68 00000000         ; * Limitations:    none
   69 00000000         ; *
   70 00000000         ; ******************************************************
                       *********************/
   71 00000000                 IMPORT           irq_exception
   72 00000000         



ARM Macro Assembler    Page 4 


   73 00000000         ;/******************************************************
                       **********************
   74 00000000         ; *
   75 00000000         ; * Function:       undef_exception
   76 00000000         ; *
   77 00000000         ; * Purpose:        Undefined instruction exception
   78 00000000         ; *
   79 00000000         ; * Inputs:         none
   80 00000000         ; *
   81 00000000         ; * Outputs:        none
   82 00000000         ; *
   83 00000000         ; * Return Values:  none
   84 00000000         ; *
   85 00000000         ; * Limitations:    none
   86 00000000         ; *
   87 00000000         ; ******************************************************
                       *********************/
   88 00000000                 IMPORT           undef_exception
   89 00000000         
   90 00000000         ;/******************************************************
                       **********************
   91 00000000         ; *
   92 00000000         ; * Function:       svccall_exception
   93 00000000         ; *
   94 00000000         ; * Purpose:        Supervisor call exception
   95 00000000         ; *
   96 00000000         ; * Inputs:         none
   97 00000000         ; *
   98 00000000         ; * Outputs:        none
   99 00000000         ; *
  100 00000000         ; * Return Values:  none
  101 00000000         ; *
  102 00000000         ; * Limitations:    none
  103 00000000         ; *
  104 00000000         ; ******************************************************
                       *********************/
  105 00000000                 IMPORT           svccall_exception
  106 00000000         
  107 00000000         ;/******************************************************
                       **********************
  108 00000000         ; *
  109 00000000         ; * Function:       pref_exception
  110 00000000         ; *
  111 00000000         ; * Purpose:        Prefetch exception
  112 00000000         ; *
  113 00000000         ; * Inputs:         none
  114 00000000         ; *
  115 00000000         ; * Outputs:        none
  116 00000000         ; *
  117 00000000         ; * Return Values:  none
  118 00000000         ; *
  119 00000000         ; * Limitations:    none
  120 00000000         ; *
  121 00000000         ; ******************************************************
                       *********************/
  122 00000000                 IMPORT           pref_exception
  123 00000000         
  124 00000000         ;/******************************************************
                       **********************



ARM Macro Assembler    Page 5 


  125 00000000         ; *
  126 00000000         ; * Function:       databort_exception
  127 00000000         ; *
  128 00000000         ; * Purpose:        Data abort exception
  129 00000000         ; *
  130 00000000         ; * Inputs:         none
  131 00000000         ; *
  132 00000000         ; * Outputs:        none
  133 00000000         ; *
  134 00000000         ; * Return Values:  none
  135 00000000         ; *
  136 00000000         ; * Limitations:    none
  137 00000000         ; *
  138 00000000         ; ******************************************************
                       *********************/
  139 00000000                 IMPORT           databort_exception
  140 00000000         
  141 00000000         ;/******************************************************
                       **********************
  142 00000000         ; *
  143 00000000         ; * Function:       fiq_exception
  144 00000000         ; *
  145 00000000         ; * Purpose:        Data abort exception
  146 00000000         ; *
  147 00000000         ; * Inputs:         none
  148 00000000         ; *
  149 00000000         ; * Outputs:        none
  150 00000000         ; *
  151 00000000         ; * Return Values:  none
  152 00000000         ; *
  153 00000000         ; * Limitations:    none
  154 00000000         ; *
  155 00000000         ; ******************************************************
                       *********************/
  156 00000000                 IMPORT           fiq_exception
  157 00000000         
  158 00000000         ;/******************************************************
                       **********************/
  159 00000000         
  160 00000000                 END
   57 00000000         
   58 00000000                 ENTRY
   59 00000000                 ARM
   60 00000000         
   61 00000000         ;/**********************************************
   62 00000000         ;*        EXCEPTION TABLE @  0x00000000        *
   63 00000000         ;*         ==========================          *
   64 00000000         ;*                 Description                 *
   65 00000000         ;***********************************************/
   66 00000000 EAFFFFFE        B                Reset_Hndlr ; reset - set up sy
                                                            stem (supervisor mo
                                                            de)
   67 00000004 EAFFFFFE        B                undef_exception ; undefined ins
                                                            truction (undefined
                                                             mode)
   68 00000008 EAFFFFFE        B                svccall_exception 
                                                            ; supervisor call
   69 0000000C EAFFFFFE        B                pref_exception ; prefetch abort
                                                             (abort mode) 



ARM Macro Assembler    Page 6 


   70 00000010 EAFFFFFE        B                databort_exception ; data abort
                                                             (abort mode) 
   71 00000014 EAFFFFFE        B                unhandled_exception ; reserved 
                                                            (no handling is req
                                                            uired)
   72 00000018 EAFFFFFE        B                irq_exception ; IRQ (IRQ mode)
   73 0000001C EAFFFFFE        B                fiq_exception ; FIQ (FIRQ mode)
                                                            
   74 00000020         
   75 00000020         ; Place here the Fast IRQ handler for immediate processi
                       ng
   76 00000020 E320F000        NOP
   77 00000024 E320F000        NOP
   78 00000028 E320F000        NOP
   79 0000002C E320F000        NOP
   80 00000030 E320F000        NOP
   81 00000034 E320F000        NOP
   82 00000038 E320F000        NOP
   83 0000003C         
   84 0000003C         ; Hold the application if we jumped for some dark reason
                        inhere
   85 0000003C         trap_sram
   86 0000003C EAFFFFFE        B                trap_sram
   87 00000040         
   88 00000040         ;*******************************************************
                       ***********************
   89 00000040         
   90 00000040         
   91 00000040         ;/**********************************************
   92 00000040         ;*        INIT_CORE_AREA @  0x00800000         *
   93 00000040         ;*         ==========================          *
   94 00000040         ;*                 Description                 *
   95 00000040         ;***********************************************/
   96 00000040         
   97 00000040                 AREA             init, CODE, READONLY, ALIGN=8
   98 00000000                 PRESERVE8                    ; We do preserve th
                                                            e eight-byte aligme
                                                            nt of the stack wit
                                                            hin the file
   99 00000000         
  100 00000000                 INCLUDE          ..\inc\cr4_s_keil.h
    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;*   This software is copyright protected. All rights re
                       served
    3 00000000         ;*   Toshiba Electronics Europe GmbH
    4 00000000         ;*   European LSI Design and Engineering Center (ELDEC)
    5 00000000         ;*******************************************************
                       ***********************
    6 00000000         ;*   DESCRIPTION : Assembly header file for Cortex A9 ge
                       neric definitions
    7 00000000         ;*******************************************************
                       ***********************
    8 00000000         ;*   PLATFORM    : TMPR46xXBG-300
    9 00000000         ;*   PROJECT     :
   10 00000000         ;*   MODULE      : Cortex R4 Core
   11 00000000         ;*   LIBRARIES   : None
   12 00000000         ;;******************************************************
                       ************************



ARM Macro Assembler    Page 7 


   13 00000000         ;*   VERSION     : $Revision: 1.5 $
   14 00000000         ;*   DATE        : $Date: 2015/05/04 09:07:16 $
   15 00000000         ;*   TAG         : $Name:  $
   16 00000000         ;*   RELEASE     : Preliminary & Confidential
   17 00000000         ;*******************************************************
                       **********************/
   18 00000000         
   19 00000000         
   20 00000000         ;/**********************************************
   21 00000000         ;*                 Constants                   *
   22 00000000         ;**********************************************/
   23 00000000         ; Interrupt controll bits in CPSR
   24 00000000 00000080 
                       CPSR_I  EQU              0x80        ; when I bit is set
                                                            , IRQ is disabled
   25 00000000 00000040 
                       CPSR_F  EQU              0x40        ; when F bit is set
                                                            , FIQ is disabled
   26 00000000 00000100 
                       CPSR_A  EQU              0x100       ; when A bit is set
                                                            , Abort is disabled
                                                            
   27 00000000         
   28 00000000         ; Modes definition used for fast CPS instruction change
   29 00000000 00000010 
                       USR_MODE
                               EQU              16
   30 00000000 00000011 
                       FIQ_MODE
                               EQU              17
   31 00000000 00000012 
                       IRQ_MODE
                               EQU              18
   32 00000000 00000013 
                       SVC_MODE
                               EQU              19
   33 00000000 00000017 
                       ABT_MODE
                               EQU              23
   34 00000000 0000001B 
                       UND_MODE
                               EQU              27
   35 00000000 0000001F 
                       SYS_MODE
                               EQU              31
   36 00000000         
   37 00000000         ; Cache Parity Error setting
   38 00000000 00000000 
                       CACHE_ERR_DIS
                               EQU              0x0         ; Disabled Cache Pa
                                                            rity checking
   39 00000000 00000020 
                       CACHE_ERR_ABORT
                               EQU              0x4 << 3    ; Generate Abort on
                                                             parity error, enab
                                                            le HW recovery
   40 00000000 00000028 
                       CACHE_ERR_NOABORT
                               EQU              0x5 << 3    ; No Abort generate



ARM Macro Assembler    Page 8 


                                                            d, enable HW recove
                                                            ry
   41 00000000 FFFFFFC7 
                       CACHE_ERR_MASK
                               EQU              0xFFFFFFC7  ; Mask for Auxilary
                                                             Control Register (
                                                            CR4 TRM r1p4 page 4
                                                            -40)
   42 00000000         
   43 00000000         ; TCM setting
   44 00000000 02000000 
                       TCM_ATCMPCEN
                               EQU              0x2000000   ; ATCM parity or EC
                                                            C check
   45 00000000 04000000 
                       TCM_B0TCMPCEN
                               EQU              0x4000000   ; B0TCM parity or E
                                                            CC check
   46 00000000 00000001 
                       TCM_ATCMECEN
                               EQU              0x1         ; ATCM External Err
                                                            or Enable
   47 00000000 00000002 
                       TCM_B0TCMECEN
                               EQU              0x2         ; B0TCM External Er
                                                            ror Enable
   48 00000000 FFFFFFFB 
                       TCM_ATCMECC
                               EQU              0xFFFFFFFB  ; Correction for in
                                                            ternal ECC logic on
                                                             ATCM port
   49 00000000 FFFFFFF7 
                       TCM_BTCMECC
                               EQU              0xFFFFFFF7  ; Correction for in
                                                            ternal ECC logic on
                                                             BTCM port
   50 00000000         
   51 00000000         ;A/BTCM Region Register
   52 00000000 00000001 
                       TCMRR_EN
                               EQU              0x1         ; TCM Enable
   53 00000000 0000000C 
                       TCMRR_BASE_ADDR_POS
                               EQU              12          ; TCM Base address 
                                                            position
   54 00000000 FFFFF000 
                       TCMRR_BASE_ADDR_MSK
                               EQU              0xFFFFF000  ; TCM Base address 
                                                            mask
   55 00000000         
   56 00000000         ;TCM Base Adresses
   57 00000000 00008000 
                       TCM_A_BASE
                               EQU              0x00008000  ; Cap-Bt TCMB0 base
                                                             address
   58 00000000 00000000 
                       TCM_B_BASE
                               EQU              0x00000000  ; Cap-Bt TCMA base 
                                                            address



ARM Macro Assembler    Page 9 


   59 00000000         
   60 00000000         ; EXCEPTION CODEs definitions
   61 00000000 00000400 
                       UNDEF_EXCP_CODE
                               EQU              0x04 << 8   ; UNDEFINED CODE
   62 00000000 00000800 
                       SVC_EXCP_CODE
                               EQU              0x08 << 8   ; SVC CALL CODE
   63 00000000 00000C00 
                       PREF_EXCP_CODE
                               EQU              0x0C << 8   ; PREFETCH ABORT CO
                                                            DE
   64 00000000 00001000 
                       DABRT_EXCP_CODE
                               EQU              0x10 << 8   ; DATA ABORT CODE
   65 00000000 00001400 
                       UNH_EXCP_CODE
                               EQU              0x14 << 8   ; RESERVED CODE
   66 00000000 00001800 
                       IRQ_EXCP_CODE
                               EQU              0x18 << 8   ; IRQ CODE
   67 00000000 00001C00 
                       FIQ_EXCP_CODE
                               EQU              0x1C << 8   ; FIQ CODE
   68 00000000         
   69 00000000         
   70 00000000         ;/*********************************************/
   71 00000000         
   72 00000000         
   73 00000000         ;/**********************************************
   74 00000000         ;*                    Macros                   *
   75 00000000         ;**********************************************/
   76 00000000         
   77 00000000         
   78 00000000         ;/******************************************************
                       **********************/
   79 00000000         
   80 00000000                 END
  101 00000000         
  102 00000000         Reset_Hndlr
  103 00000000         ;*******************************************************
                       ***********************
  104 00000000         ; Disable Imprecise Abort, IRQ and FIQ exceptions
  105 00000000         ;*******************************************************
                       ***********************
  106 00000000 E10F0000        MRS              r0, CPSR
  107 00000004 E3800D07        ORR              r0, r0, #(CPSR_I :or: CPSR_F :o
r: CPSR_A)
  108 00000008 E123F000        MSR              CPSR_cx, r0
  109 0000000C         
  110 0000000C         ;*******************************************************
                       ***********************
  111 0000000C         ; Disable Watchdog Timer (WDT)
  112 0000000C         ;*******************************************************
                       ***********************
  113 0000000C E59F1138        LDR              r1, =0xC000200C ; (CTL) WDT Con
                                                            trol Reg. Address
  114 00000010 E3A00001        LDR              r0, =0x1    ; Value to write to
                                                             CTL (Stops the WDT



ARM Macro Assembler    Page 10 


                                                            )
  115 00000014 E5810000        STR              r0, [r1]    ; Write value to CT
                                                            L (First step to st
                                                            op WDT)
  116 00000018 E59F1130        LDR              r1, =0xC0002010 ; (CMD) WDT Com
                                                            mand Reg. Address
  117 0000001C E3050354        LDR              r0, =0x00005354 ; Stop and Clea
                                                            r command 
  118 00000020 E5810000        STR              r0, [r1]    ; Write command to 
                                                            CMD (WDT stopped an
                                                            d cleared)
  119 00000024         
  120 00000024         ;*******************************************************
                       ***********************
  121 00000024         ; Initialize the CPU Core Registers in all Operating Mod
                       es
  122 00000024         ;*******************************************************
                       ***********************
  123 00000024         ;
  124 00000024         ;
  125 00000024         ;     - Initialized Registers per Op.Mode -
  126 00000024         ;  --------------------------------------------
  127 00000024         ; | USR/SYS | IRQ | FIQ | Undef | Abort | SVC  |
  128 00000024         ; |--------------------------------------------|  
  129 00000024         ; |   r0    |     |     |       |       |      |
  130 00000024         ; |   r1    |     |     |       |       |      |
  131 00000024         ; |   r2    |     |     |       |       |      |
  132 00000024         ; |   r3    |     |     |       |       |      |
  133 00000024         ; |   r4    |     |     |       |       |      |
  134 00000024         ; |   r5    |     |     |       |       |      |
  135 00000024         ; |   r6    |     |     |       |       |      |
  136 00000024         ; |   r7    |     |     |       |       |      |
  137 00000024         ; |   r8    |     | r8  |       |       |      |
  138 00000024         ; |   r9    |     | r9  |       |       |      |
  139 00000024         ; |   r10   |     | r10 |       |       |      |
  140 00000024         ; |   r11   |     | r11 |       |       |      |
  141 00000024         ; |   r12   |     | r12 |       |       |      |
  142 00000024         ; |   sp    | sp  | sp  |  sp   |  sp   | sp   |
  143 00000024         ; |   lr    | lr  | lr  |  lr   |  lr   | lr   |
  144 00000024         ; |--------------------------------------------|
  145 00000024         ; |  cpsr   | spsr| spsr| spsr  | spsr  | spsr |
  146 00000024         ;  --------------------------------------------
  147 00000024         ;
  148 00000024         ;*******************************************************
                       ***********************
  149 00000024         
  150 00000024         ; USER/SYSTEM MODE   
  151 00000024 F10E01DF        CPSID            aif, #SYS_MODE ; switch to SYS 
                                                            mode
  152 00000028 E3A00000        MOV              r0, #GP_REG_INIT_VAL
  153 0000002C E3A01000        MOV              r1, #GP_REG_INIT_VAL
  154 00000030 E3A02000        MOV              r2, #GP_REG_INIT_VAL
  155 00000034 E3A03000        MOV              r3, #GP_REG_INIT_VAL
  156 00000038 E3A04000        MOV              r4, #GP_REG_INIT_VAL
  157 0000003C E3A05000        MOV              r5, #GP_REG_INIT_VAL
  158 00000040 E3A06000        MOV              r6, #GP_REG_INIT_VAL
  159 00000044 E3A07000        MOV              r7, #GP_REG_INIT_VAL
  160 00000048 E3A08000        MOV              r8, #GP_REG_INIT_VAL
  161 0000004C E3A09000        MOV              r9, #GP_REG_INIT_VAL



ARM Macro Assembler    Page 11 


  162 00000050 E3A0A000        MOV              r10,#GP_REG_INIT_VAL
  163 00000054 E3A0B000        MOV              r11,#GP_REG_INIT_VAL
  164 00000058 E3A0C000        MOV              r12,#GP_REG_INIT_VAL
  165 0000005C E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  166 00000060 E59FD0EC        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|-USR_STACK_OFFSET
  167 00000064         
  168 00000064         ; IRQ MODE   
  169 00000064 F10E01D2        CPSID            aif, #IRQ_MODE ; switch to IRQ 
                                                            mode
  170 00000068 E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  171 0000006C E59FD0E4        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|-IRQ_STACK_OFFSET
  172 00000070         
  173 00000070         ; FIQ MODE
  174 00000070 F10E01D1        CPSID            aif, #FIQ_MODE ; switch to FIQ 
                                                            mode
  175 00000074 E3A08000        MOV              r8, #GP_REG_INIT_VAL
  176 00000078 E3A09000        MOV              r9, #GP_REG_INIT_VAL
  177 0000007C E3A0A000        MOV              r10,#GP_REG_INIT_VAL
  178 00000080 E3A0B000        MOV              r11,#GP_REG_INIT_VAL
  179 00000084 E3A0C000        MOV              r12,#GP_REG_INIT_VAL
  180 00000088 E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  181 0000008C E59FD0C8        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|-FIQ_STACK_OFFSET
  182 00000090         
  183 00000090         ; UNDEF MODE
  184 00000090 F10E01DB        CPSID            aif, #UND_MODE ; switch to UNDE
                                                            F mode
  185 00000094 E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  186 00000098 E59FD0C0        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|-UND_STACK_OFFSET
  187 0000009C         
  188 0000009C         ; ABORT MODE
  189 0000009C F10E01D7        CPSID            aif, #ABT_MODE ; switch to ABOR
                                                            T mode
  190 000000A0 E3A00000        MOV              r0, #GP_REG_INIT_VAL
  191 000000A4 E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  192 000000A8 E59FD0B4        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|-ABT_STACK_OFFSET
  193 000000AC         
  194 000000AC         ; SVC MODE
  195 000000AC F10E01D3        CPSID            aif, #SVC_MODE ; switch to SVC 
                                                            mode
  196 000000B0 E3A00000        MOV              r0, #GP_REG_INIT_VAL
  197 000000B4 E3A0E000        MOV              lr, #GP_REG_INIT_VAL
  198 000000B8 E59FD0A8        LDR              sp, =|Image$$ARM_LIB_STACK$$ZI$
$Limit|
  199 000000BC         
  200 000000BC         ;*******************************************************
                       ***********************
  201 000000BC         ; Disable D- and I-cache in case it was left enabled (TR
                       M: 8.5.5 Cache interaction with memory system)
  202 000000BC         ;*******************************************************
                       ***********************
  203 000000BC EE110F10        MRC              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR
  204 000000C0 E3C00004        BIC              r0, r0, #0x1 << 2 ; Disable dat
                                                            a cache bit



ARM Macro Assembler    Page 12 


  205 000000C4 E3C00A01        BIC              r0, r0, #0x1 << 12 ; Disable in
                                                            struction cache bit
                                                            
  206 000000C8 F57FF04F        DSB
  207 000000CC EE010F10        MCR              p15, 0, r0, c1, c0, 0 
                                                            ; Write SCTLR
  208 000000D0 F57FF06F        ISB                          ; Ensures following
                                                             instructions are 
  209 000000D4         ; not executed from cache
  210 000000D4         
  211 000000D4         ;*******************************************************
                       ***********************
  212 000000D4         ; Init I-cache by enabling error-checking (CR4-TRM r1p4 
                       Chapt.8.5.5 )
  213 000000D4         ;*******************************************************
                       ***********************
  214 000000D4 EE111F30        MRC              p15, 0, r1, c1, c0, 1 
                                                            ; Read ACTLR
  215 000000D8 E3C11038        AND              r1, r1, #0xFFFFFFC7 ; Reset Err
                                                            or control bits
  216 000000DC E3811028        ORR              r1, r1, #CACHE_ERR_NOABORT ; Do
                                                             not generate abort
                                                             on parity errors, 
                                                            force write-through
                                                            , enable hardware r
                                                            ecovery
  217 000000E0 EE011F30        MCR              p15, 0, r1, c1, c0, 1 
                                                            ; Write ACTLR
  218 000000E4 EE111F30        MRC              p15, 0, r1, c1, c0, 1 ;test
  219 000000E8 EE070F15        MCR              p15, 0, r0, c7, c5, 0 ; Invalid
                                                            ate entire instruct
                                                            ion cache
  220 000000EC EE110F10        MRC              p15, 0, r0, c1, c0, 0 
                                                            ; Read SCTLR
  221 000000F0 E3800A01        ORR              r0, r0, #0x1 << 12 ; Enable ins
                                                            truction cache bit
  222 000000F4 E3800004        ORR              r0, r0, #0x1 << 2 ; Enable data
                                                              cache bit
  223 000000F8 F57FF04F        DSB
  224 000000FC EE0F0F15        MCR              p15, 0, r0, c15, c5, 0 ; Invali
                                                            date entire data ca
                                                            che
  225 00000100 EE010F10        MCR              p15, 0, r0, c1, c0, 0 
                                                            ; Write SCTLR
  226 00000104 F57FF06F        ISB
  227 00000108         
  228 00000108         
  229 00000108         ;The following code is an example of enabling caches
  230 00000108         
  231 00000108         ; MRC p15, 0, r1, c1, c0, 0  ; Read SCTLR configuration 
                       data
  232 00000108         ; ORR r1, r1, #0x1 <<12      ; instruction cache enable
  233 00000108         ; ORR r1, r1, #0x1 <<2       ; data cache enable
  234 00000108         ; DSB 
  235 00000108         ; MCR p15, 0, r0, c15, c5, 0 ; Invalidate entire data ca
                       che
  236 00000108         ; MCR p15, 0, r0, c7, c5, 0  ; Invalidate entire instruc
                       tion cache
  237 00000108         ; MCR p15, 0, r1, c1, c0, 0  ; enabled cache RAMs



ARM Macro Assembler    Page 13 


  238 00000108         ; ISB
  239 00000108         
  240 00000108         
  241 00000108         ;*******************************************************
                       ***********************
  242 00000108         ; The following initialization sequence was commented ou
                       t, as it 
  243 00000108         ; reflects the default values of the corresponding bits 
                       after POR. 
  244 00000108         ; The only change is that the external ECC correction an
                       d exception
  245 00000108         ; handling will be disabled by default, as no other mast
                       er shall
  246 00000108         ; access the TSM during the IPL execution
  247 00000108         ;*******************************************************
                       ***********************
  248 00000108         ;    MRC    p15, 0, r1, c1, c0, 1                 ; Read
                        ACTLR
  249 00000108         ;    ORR    r1,r1, #TCM_ATCMECEN:OR:TCM_B0TCMECEN ; Exte
                       rnal Error Enable for ATCM & B0TCM and 
  250 00000108         ;    MOV    r0, #TCM_ATCMPCEN                     ; ATCM
                        Parity or ECC check enable
  251 00000108         ;    MOV    r2, #TCM_B0TCMPCEN                    ; B0TC
                       M Parity or ECC check enable 
  252 00000108         ;    ORR    r0, r0, r2
  253 00000108         ;    ORR    r1, r1, r0                              
  254 00000108         ;    MCR    p15, 0, r1, c1, c0, 1                 ; Writ
                       e ACTLR
  255 00000108         ;    ISB                                          ; Inst
                       ruction barrier
  256 00000108         ;    MRC    p15, 0, r1, c15, c0, 0                ; Read
                        Secondary ACTLR
  257 00000108         ;    AND    r1,r1, #TCM_ATCMECC:AND:TCM_BTCMECC   ; Enab
                       le Correction for internal ECC logic on ATCM & BTCM
  258 00000108         ;    MCR    p15, 0, r1, c15, c0, 0                ; Writ
                       e Secondary ACTLR
  259 00000108         ;    ISB                                          ; Inst
                       ruction barrier
  260 00000108         ;*******************************************************
                       ***********************
  261 00000108         
  262 00000108         ;*******************************************************
                       ***********************
  263 00000108         ; Initialize memory with a predefined pattern in 8 words
                        bursts
  264 00000108         ; R0-> Data
  265 00000108         ; R1-> Addr
  266 00000108         ; R2-> Transaction count (8 words per transaction)
  267 00000108         ;*******************************************************
                       ***********************
  268 00000108 E3A00000        LDR              r0, =0x0
  269 0000010C E3A01040        LDR              r1, =0x00000040 ; Load with the
                                                             start address of t
                                                            he TCMA [LOVECS exc
                                                            eption handlers mus
                                                            t be preserved]
  270 00000110 E30027FE        LDR              r2, =0x7FE  ; Number of transac
                                                            tions is 64KB divid
                                                            ed into



ARM Macro Assembler    Page 14 


  271 00000114 EBFFFFFE        BL               vASM_Init8WordsInBurst ; (8 wor
                                                            ds per transaction*
                                                            4 bytes in word) = 
                                                            2048 - 2
  272 00000118 F57FF04F        DSB
  273 0000011C         
  274 0000011C         ;*******************************************************
                       ***********************
  275 0000011C         ; initialize zi areas
  276 0000011C         ;*******************************************************
                       ***********************
  277 0000011C EBFFFFFE        BL               vASM_Init_zi ; init all areas
  278 00000120 E320F000        NOP
  279 00000124 E320F000        NOP
  280 00000128         
  281 00000128         ;*******************************************************
                       ***********************
  282 00000128         ; change from hivec to lowvec
  283 00000128         ;*******************************************************
                       ***********************
  284 00000128 EE110F10        MRC              p15, 0, r0, c1, c0, 0
  285 0000012C E3C00A02        AND              r0, r0, #0xFFFFDFFF 
                                                            ; clear V bit
  286 00000130 EE010F10        MCR              p15, 0, r0, c1, c0, 0
  287 00000134         
  288 00000134         ;*******************************************************
                       ***********************
  289 00000134         ; Clear argc, argv, envp
  290 00000134         ;*******************************************************
                       ***********************
  291 00000134 E3A00000        LDR              r0, =0x0
  292 00000138 E3A01000        LDR              r1, =0x0
  293 0000013C E3A02000        LDR              r2, =0x0
  294 00000140         
  295 00000140         ;*******************************************************
                       ***********************
  296 00000140         ; Jump to the main function
  297 00000140         ;*******************************************************
                       ***********************
  298 00000140 EAFFFFFE        B                vAppMain
  299 00000144 E320F000        NOP
  300 00000148 E320F000        NOP
  301 0000014C         
  302 0000014C         ;*******************************************************
                       ***********************
  303 0000014C                 END
              C000200C 
              C0002010 
              FFFF4000 
              FFFF6000 
              FFFF7800 
              FFFF6800 
              FFFF8000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-R4 --apcs=interw
ork --depend=..\out\core_init_keil.d -o..\out\core_init_keil.o -I..\..\..\..\co
rtex_r4_keil\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include --pre
define="__UVISION_VERSION SETA 516" --list=..\out\core_init_keil.lst ..\..\..\.
.\cortex_r4_keil\src\core_init_keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

exc_table 00000000

Symbol: exc_table
   Definitions
      At line 54 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: exc_table unused
trap_sram 0000003C

Symbol: trap_sram
   Definitions
      At line 85 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 86 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: trap_sram used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Reset_Hndlr 00000000

Symbol: Reset_Hndlr
   Definitions
      At line 102 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 66 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: Reset_Hndlr used once
init 00000000

Symbol: init
   Definitions
      At line 97 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: init unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABT_MODE 00000017

Symbol: ABT_MODE
   Definitions
      At line 33 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 189 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: ABT_MODE used once
ABT_STACK_OFFSET 00008000

Symbol: ABT_STACK_OFFSET
   Definitions
      At line 46 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 192 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: ABT_STACK_OFFSET used once
ABT_STACK_SIZE 00000800

Symbol: ABT_STACK_SIZE
   Definitions
      At line 37 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: ABT_STACK_SIZE unused
CACHE_ERR_ABORT 00000020

Symbol: CACHE_ERR_ABORT
   Definitions
      At line 39 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: CACHE_ERR_ABORT unused
CACHE_ERR_DIS 00000000

Symbol: CACHE_ERR_DIS
   Definitions
      At line 38 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: CACHE_ERR_DIS unused
CACHE_ERR_MASK FFFFFFC7

Symbol: CACHE_ERR_MASK
   Definitions
      At line 41 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: CACHE_ERR_MASK unused
CACHE_ERR_NOABORT 00000028

Symbol: CACHE_ERR_NOABORT
   Definitions
      At line 40 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 216 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: CACHE_ERR_NOABORT used once
CPSR_A 00000100

Symbol: CPSR_A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 26 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 107 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: CPSR_A used once
CPSR_F 00000040

Symbol: CPSR_F
   Definitions
      At line 25 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 107 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: CPSR_F used once
CPSR_I 00000080

Symbol: CPSR_I
   Definitions
      At line 24 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 107 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: CPSR_I used once
DABRT_EXCP_CODE 00001000

Symbol: DABRT_EXCP_CODE
   Definitions
      At line 64 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: DABRT_EXCP_CODE unused
FIQ_EXCP_CODE 00001C00

Symbol: FIQ_EXCP_CODE
   Definitions
      At line 67 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: FIQ_EXCP_CODE unused
FIQ_MODE 00000011

Symbol: FIQ_MODE
   Definitions
      At line 30 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 174 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: FIQ_MODE used once
FIQ_STACK_OFFSET 00008800

Symbol: FIQ_STACK_OFFSET
   Definitions
      At line 47 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 181 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: FIQ_STACK_OFFSET used once
FIQ_STACK_SIZE 00001000

Symbol: FIQ_STACK_SIZE
   Definitions
      At line 38 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

      None
Comment: FIQ_STACK_SIZE unused
GP_REG_INIT_VAL 00000000

Symbol: GP_REG_INIT_VAL
   Definitions
      At line 31 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 152 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 153 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 154 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 155 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 156 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 157 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 158 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 159 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 160 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 161 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 162 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 163 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 164 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 165 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 170 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 175 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 176 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 177 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 178 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 179 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 180 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 185 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 190 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 191 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 196 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 197 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s

IRQ_EXCP_CODE 00001800

Symbol: IRQ_EXCP_CODE
   Definitions
      At line 66 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: IRQ_EXCP_CODE unused
IRQ_MODE 00000012

Symbol: IRQ_MODE
   Definitions
      At line 31 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 169 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: IRQ_MODE used once
IRQ_STACK_OFFSET 0000A000

Symbol: IRQ_STACK_OFFSET
   Definitions
      At line 49 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 171 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: IRQ_STACK_OFFSET used once



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

IRQ_STACK_SIZE 00002000

Symbol: IRQ_STACK_SIZE
   Definitions
      At line 40 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: IRQ_STACK_SIZE unused
PREF_EXCP_CODE 00000C00

Symbol: PREF_EXCP_CODE
   Definitions
      At line 63 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: PREF_EXCP_CODE unused
SVC_EXCP_CODE 00000800

Symbol: SVC_EXCP_CODE
   Definitions
      At line 62 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: SVC_EXCP_CODE unused
SVC_MODE 00000013

Symbol: SVC_MODE
   Definitions
      At line 32 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 195 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: SVC_MODE used once
SVC_STACK_SIZE 00008000

Symbol: SVC_STACK_SIZE
   Definitions
      At line 36 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: SVC_STACK_SIZE unused
SYS_MODE 0000001F

Symbol: SYS_MODE
   Definitions
      At line 35 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 151 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: SYS_MODE used once
TCMRR_BASE_ADDR_MSK FFFFF000

Symbol: TCMRR_BASE_ADDR_MSK
   Definitions
      At line 54 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCMRR_BASE_ADDR_MSK unused
TCMRR_BASE_ADDR_POS 0000000C

Symbol: TCMRR_BASE_ADDR_POS



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 53 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCMRR_BASE_ADDR_POS unused
TCMRR_EN 00000001

Symbol: TCMRR_EN
   Definitions
      At line 52 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCMRR_EN unused
TCM_ATCMECC FFFFFFFB

Symbol: TCM_ATCMECC
   Definitions
      At line 48 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_ATCMECC unused
TCM_ATCMECEN 00000001

Symbol: TCM_ATCMECEN
   Definitions
      At line 46 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_ATCMECEN unused
TCM_ATCMPCEN 02000000

Symbol: TCM_ATCMPCEN
   Definitions
      At line 44 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_ATCMPCEN unused
TCM_A_BASE 00008000

Symbol: TCM_A_BASE
   Definitions
      At line 57 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_A_BASE unused
TCM_B0TCMECEN 00000002

Symbol: TCM_B0TCMECEN
   Definitions
      At line 47 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_B0TCMECEN unused
TCM_B0TCMPCEN 04000000

Symbol: TCM_B0TCMPCEN
   Definitions
      At line 45 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

      None
Comment: TCM_B0TCMPCEN unused
TCM_BTCMECC FFFFFFF7

Symbol: TCM_BTCMECC
   Definitions
      At line 49 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_BTCMECC unused
TCM_B_BASE 00000000

Symbol: TCM_B_BASE
   Definitions
      At line 58 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: TCM_B_BASE unused
UNDEF_EXCP_CODE 00000400

Symbol: UNDEF_EXCP_CODE
   Definitions
      At line 61 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: UNDEF_EXCP_CODE unused
UND_MODE 0000001B

Symbol: UND_MODE
   Definitions
      At line 34 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      At line 184 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: UND_MODE used once
UND_STACK_OFFSET 00009800

Symbol: UND_STACK_OFFSET
   Definitions
      At line 48 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 186 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: UND_STACK_OFFSET used once
UND_STACK_SIZE 00000800

Symbol: UND_STACK_SIZE
   Definitions
      At line 39 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: UND_STACK_SIZE unused
UNH_EXCP_CODE 00001400

Symbol: UNH_EXCP_CODE
   Definitions
      At line 65 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: UNH_EXCP_CODE unused
USR_MODE 00000010



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Absolute symbols


Symbol: USR_MODE
   Definitions
      At line 29 in file ..\..\..\..\cortex_r4_keil\src\..\inc\cr4_s_keil.h
   Uses
      None
Comment: USR_MODE unused
USR_STACK_OFFSET 0000C000

Symbol: USR_STACK_OFFSET
   Definitions
      At line 50 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 166 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: USR_STACK_OFFSET used once
USR_STACK_SIZE 00004000

Symbol: USR_STACK_SIZE
   Definitions
      At line 41 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      None
Comment: USR_STACK_SIZE unused
44 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

Image$$ARM_LIB_STACK$$ZI$$Limit 00000000

Symbol: Image$$ARM_LIB_STACK$$ZI$$Limit
   Definitions
      At line 25 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 166 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 171 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 181 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 186 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 192 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
      At line 198 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s

databort_exception 00000000

Symbol: databort_exception
   Definitions
      At line 139 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil
.h
   Uses
      At line 70 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: databort_exception used once
fiq_exception 00000000

Symbol: fiq_exception
   Definitions
      At line 156 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil
.h
   Uses
      At line 73 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: fiq_exception used once
irq_exception 00000000

Symbol: irq_exception
   Definitions
      At line 71 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil.
h
   Uses
      At line 72 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: irq_exception used once
pref_exception 00000000

Symbol: pref_exception
   Definitions
      At line 122 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil
.h
   Uses
      At line 69 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: pref_exception used once
svccall_exception 00000000

Symbol: svccall_exception
   Definitions
      At line 105 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil
.h
   Uses
      At line 68 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: svccall_exception used once
undef_exception 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: undef_exception
   Definitions
      At line 88 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil.
h
   Uses
      At line 67 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: undef_exception used once
unhandled_exception 00000000

Symbol: unhandled_exception
   Definitions
      At line 54 in file ..\..\..\..\cortex_r4_keil\src\..\inc\excp_hndlr_keil.
h
   Uses
      At line 71 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: unhandled_exception used once
vASM_Init8WordsInBurst 00000000

Symbol: vASM_Init8WordsInBurst
   Definitions
      At line 22 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 271 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: vASM_Init8WordsInBurst used once
vASM_Init_zi 00000000

Symbol: vASM_Init_zi
   Definitions
      At line 23 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 277 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: vASM_Init_zi used once
vAppMain 00000000

Symbol: vAppMain
   Definitions
      At line 24 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
   Uses
      At line 298 in file ..\..\..\..\cortex_r4_keil\src\core_init_keil.s
Comment: vAppMain used once
11 symbols
392 symbols in table
