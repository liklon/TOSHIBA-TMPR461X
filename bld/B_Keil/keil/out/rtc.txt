; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\rtc.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\rtc.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\rtc.crf ..\..\..\..\lldd\src\rtc.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vRTC_GetVersion PROC
;;;60     /****************************************************************************/
;;;61     void vRTC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;62                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;63                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;64     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;65         *pau8ModuleRevision = &au8LLDD_RTC_C_REVISION[0];
000008  e59f6380          LDR      r6,|L1.912|
00000c  e5806000          STR      r6,[r0,#0]
;;;66         *pau8ModuleTag      = &au8LLDD_RTC_C_TAG[0];
000010  e59f637c          LDR      r6,|L1.916|
000014  e5816000          STR      r6,[r1,#0]
;;;67         *pau8HeaderRevision = &au8LLDD_RTC_H_REVISION[0];
000018  e59f6378          LDR      r6,|L1.920|
00001c  e5826000          STR      r6,[r2,#0]
;;;68         *pau8HeaderTag      = &au8LLDD_RTC_H_TAG[0];
000020  e59f6374          LDR      r6,|L1.924|
000024  e5836000          STR      r6,[r3,#0]
;;;69         *pau8IORevision     = &au8LLDD_RTC_IO_H_REVISION[0];
000028  e59f6370          LDR      r6,|L1.928|
00002c  e5846000          STR      r6,[r4,#0]
;;;70         *pau8IOTag          = &au8LLDD_RTC_IO_H_TAG[0];    
000030  e59f636c          LDR      r6,|L1.932|
000034  e5856000          STR      r6,[r5,#0]
;;;71     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;72     
                          ENDP

                  vRTC_SelectPage PROC
;;;73     /****************************************************************************/
;;;74     void vRTC_SelectPage(rtc_page_e eSelectPage)
00003c  e59f1364          LDR      r1,|L1.936|
;;;75     {
;;;76         vSetRTCPAGER_PAGE((uint8_t)eSelectPage);
000040  e5d11008          LDRB     r1,[r1,#8]
000044  e7c01010          BFI      r1,r0,#0,#1
000048  e59f2358          LDR      r2,|L1.936|
00004c  e5c21008          STRB     r1,[r2,#8]
;;;77     }
000050  e12fff1e          BX       lr
;;;78     
                          ENDP

                  vRTC_EnableAlarm PROC
;;;79     /****************************************************************************/
;;;80     void vRTC_EnableAlarm(rtc_enable_e eEn)
000054  e59f134c          LDR      r1,|L1.936|
;;;81     {
;;;82         vSetRTCPAGER_ENAALM((uint8_t)eEn);
000058  e5d11008          LDRB     r1,[r1,#8]
00005c  e7c21110          BFI      r1,r0,#2,#1
000060  e59f2340          LDR      r2,|L1.936|
000064  e5c21008          STRB     r1,[r2,#8]
;;;83     }
000068  e12fff1e          BX       lr
;;;84     
                          ENDP

                  vRTC_EnableClock PROC
;;;85     /****************************************************************************/
;;;86     void vRTC_EnableClock(rtc_enable_e eEn)
00006c  e59f1334          LDR      r1,|L1.936|
;;;87     {
;;;88         vSetRTCPAGER_ENATMR((uint8_t)eEn);
000070  e5d11008          LDRB     r1,[r1,#8]
000074  e7c31190          BFI      r1,r0,#3,#1
000078  e59f2328          LDR      r2,|L1.936|
00007c  e5c21008          STRB     r1,[r2,#8]
;;;89     }
000080  e12fff1e          BX       lr
;;;90     
                          ENDP

                  vRTC_SetAdjust PROC
;;;91     /****************************************************************************/
;;;92     void vRTC_SetAdjust(rtc_adjust_set_e eAdj)
000084  e59f131c          LDR      r1,|L1.936|
;;;93     {
;;;94         vSetRTCPAGER_ADJUST((uint8_t)eAdj);
000088  e5d11008          LDRB     r1,[r1,#8]
00008c  e7c41210          BFI      r1,r0,#4,#1
000090  e59f2310          LDR      r2,|L1.936|
000094  e5c21008          STRB     r1,[r2,#8]
;;;95     }
000098  e12fff1e          BX       lr
;;;96     
                          ENDP

                  vRTC_EnableInterrupt PROC
;;;97     /****************************************************************************/
;;;98     void vRTC_EnableInterrupt(rtc_enable_e eEn)
00009c  e59f1304          LDR      r1,|L1.936|
;;;99     {
;;;100        vSetRTCPAGER_INTENA((uint8_t)eEn);
0000a0  e5d11008          LDRB     r1,[r1,#8]
0000a4  e7c71390          BFI      r1,r0,#7,#1
0000a8  e59f22f8          LDR      r2,|L1.936|
0000ac  e5c21008          STRB     r1,[r2,#8]
;;;101    }
0000b0  e12fff1e          BX       lr
;;;102    
                          ENDP

                  eRTC_GetAdjust PROC
;;;103    /****************************************************************************/
;;;104    rtc_adjust_status_e eRTC_GetAdjust(void)
0000b4  e59f12ec          LDR      r1,|L1.936|
;;;105    {
;;;106        rtc_adjust_status_e eResult;
;;;107        
;;;108        eResult = (rtc_adjust_status_e) biGetRTCPAGER_ADJUST();
0000b8  e5d11008          LDRB     r1,[r1,#8]
0000bc  e7e00251          UBFX     r0,r1,#4,#1
;;;109        return eResult;
;;;110    }
0000c0  e12fff1e          BX       lr
;;;111    
                          ENDP

                  boRTC_SetTimeAndDate PROC
;;;112    /****************************************************************************/
;;;113    bool_t boRTC_SetTimeAndDate(const rtc_time_date_st *pstTimeAndDate)
0000c4  e1a01000          MOV      r1,r0
;;;114    {
;;;115        bool_t boResult = C_TRUE;
0000c8  e3a00001          MOV      r0,#1
;;;116        
;;;117        if ( 0x00 != pstTimeAndDate)
0000cc  e3510000          CMP      r1,#0
0000d0  0a00002a          BEQ      |L1.384|
;;;118        {
;;;119            /* Set time: */
;;;120            vSetRTCSECR_SEC_DATA(pstTimeAndDate->u8Sec);
0000d4  e5d13000          LDRB     r3,[r1,#0]
0000d8  e59f22c8          LDR      r2,|L1.936|
0000dc  e5d22000          LDRB     r2,[r2,#0]
0000e0  e7c62013          BFI      r2,r3,#0,#7
0000e4  e59f32bc          LDR      r3,|L1.936|
0000e8  e5c32000          STRB     r2,[r3,#0]
;;;121            vSetRTCMINR_MIN_DATA(pstTimeAndDate->u8Min);
0000ec  e5d13001          LDRB     r3,[r1,#1]
0000f0  e59f22b0          LDR      r2,|L1.936|
0000f4  e5d22001          LDRB     r2,[r2,#1]
0000f8  e7c62013          BFI      r2,r3,#0,#7
0000fc  e59f32a4          LDR      r3,|L1.936|
000100  e5c32001          STRB     r2,[r3,#1]
;;;122            vSetRTCHOURR_HOUR_DATA(pstTimeAndDate->u8Hour);
000104  e5d13002          LDRB     r3,[r1,#2]
000108  e59f2298          LDR      r2,|L1.936|
00010c  e5d22002          LDRB     r2,[r2,#2]
000110  e7c52013          BFI      r2,r3,#0,#6
000114  e59f328c          LDR      r3,|L1.936|
000118  e5c32002          STRB     r2,[r3,#2]
;;;123    
;;;124            /* Set date: */
;;;125            vSetRTCDAYR_DAY_DATA(pstTimeAndDate->u8DayOfWeek);
00011c  e5d13003          LDRB     r3,[r1,#3]
000120  e59f2280          LDR      r2,|L1.936|
000124  e5d22004          LDRB     r2,[r2,#4]
000128  e7c22013          BFI      r2,r3,#0,#3
00012c  e59f3274          LDR      r3,|L1.936|
000130  e5c32004          STRB     r2,[r3,#4]
;;;126            vSetRTCDATER_DATE_DATA(pstTimeAndDate->u8DateOfMonth);
000134  e5d13004          LDRB     r3,[r1,#4]
000138  e59f2268          LDR      r2,|L1.936|
00013c  e5d22005          LDRB     r2,[r2,#5]
000140  e7c52013          BFI      r2,r3,#0,#6
000144  e59f325c          LDR      r3,|L1.936|
000148  e5c32005          STRB     r2,[r3,#5]
;;;127            vSetRTCMONTHR_MON_DATA(pstTimeAndDate->u8Month);
00014c  e5d13005          LDRB     r3,[r1,#5]
000150  e59f2250          LDR      r2,|L1.936|
000154  e5d22006          LDRB     r2,[r2,#6]
000158  e7c72013          BFI      r2,r3,#0,#8
00015c  e59f3244          LDR      r3,|L1.936|
000160  e5c32006          STRB     r2,[r3,#6]
;;;128            vSetRTCYEARR_YEAR_DATA(pstTimeAndDate->u8Year);
000164  e5d13006          LDRB     r3,[r1,#6]
000168  e59f2238          LDR      r2,|L1.936|
00016c  e5d22007          LDRB     r2,[r2,#7]
000170  e7c72013          BFI      r2,r3,#0,#8
000174  e59f322c          LDR      r3,|L1.936|
000178  e5c32007          STRB     r2,[r3,#7]
00017c  ea000000          B        |L1.388|
                  |L1.384|
;;;129        }
;;;130        else
;;;131        {
;;;132            boResult = C_FALSE;
000180  e3a00000          MOV      r0,#0
                  |L1.388|
;;;133        }
;;;134    
;;;135        return boResult;
;;;136    }
000184  e12fff1e          BX       lr
;;;137    /****************************************************************************/
                          ENDP

                  boRTC_GetTimeAndDate PROC
;;;138    bool_t boRTC_GetTimeAndDate(rtc_time_date_st *pstTimeAndDate)
000188  e1a01000          MOV      r1,r0
;;;139    {
;;;140        bool_t boResult = C_TRUE;
00018c  e3a00001          MOV      r0,#1
;;;141        
;;;142        if ( 0x00 != pstTimeAndDate)
000190  e3510000          CMP      r1,#0
000194  0a00001a          BEQ      |L1.516|
;;;143        {
;;;144            /* read time: */
;;;145            pstTimeAndDate->u8Sec  = biGetRTCSECR_SEC_DATA();
000198  e59f2208          LDR      r2,|L1.936|
00019c  e5d22000          LDRB     r2,[r2,#0]
0001a0  e202207f          AND      r2,r2,#0x7f
0001a4  e5c12000          STRB     r2,[r1,#0]
;;;146            pstTimeAndDate->u8Min  = biGetRTCMINR_MIN_DATA();
0001a8  e59f21f8          LDR      r2,|L1.936|
0001ac  e5d22001          LDRB     r2,[r2,#1]
0001b0  e202207f          AND      r2,r2,#0x7f
0001b4  e5c12001          STRB     r2,[r1,#1]
;;;147            pstTimeAndDate->u8Hour = biGetRTCHOURR_HOUR_DATA();
0001b8  e59f21e8          LDR      r2,|L1.936|
0001bc  e5d22002          LDRB     r2,[r2,#2]
0001c0  e202203f          AND      r2,r2,#0x3f
0001c4  e5c12002          STRB     r2,[r1,#2]
;;;148    
;;;149            /* read date: */
;;;150            pstTimeAndDate->u8DayOfWeek   = biGetRTCDAYR_DAY_DATA();
0001c8  e59f21d8          LDR      r2,|L1.936|
0001cc  e5d22004          LDRB     r2,[r2,#4]
0001d0  e2022007          AND      r2,r2,#7
0001d4  e5c12003          STRB     r2,[r1,#3]
;;;151            pstTimeAndDate->u8DateOfMonth = biGetRTCDATER_DATE_DATA();
0001d8  e59f21c8          LDR      r2,|L1.936|
0001dc  e5d22005          LDRB     r2,[r2,#5]
0001e0  e202203f          AND      r2,r2,#0x3f
0001e4  e5c12004          STRB     r2,[r1,#4]
;;;152            pstTimeAndDate->u8Month       = biGetRTCMONTHR_MON_DATA();
0001e8  e59f21b8          LDR      r2,|L1.936|
0001ec  e5d22006          LDRB     r2,[r2,#6]
0001f0  e5c12005          STRB     r2,[r1,#5]
;;;153            pstTimeAndDate->u8Year        = biGetRTCYEARR_YEAR_DATA();
0001f4  e59f21ac          LDR      r2,|L1.936|
0001f8  e5d22007          LDRB     r2,[r2,#7]
0001fc  e5c12006          STRB     r2,[r1,#6]
000200  ea000000          B        |L1.520|
                  |L1.516|
;;;154        }
;;;155        else
;;;156        {
;;;157            boResult = C_FALSE;
000204  e3a00000          MOV      r0,#0
                  |L1.520|
;;;158        }
;;;159    
;;;160        return boResult;
;;;161    }
000208  e12fff1e          BX       lr
;;;162    
                          ENDP

                  boRTC_SetConfigReset PROC
;;;163    /****************************************************************************/
;;;164    bool_t boRTC_SetConfigReset(const rtc_reset_cfg_st* const pResetCfg)
00020c  e1a01000          MOV      r1,r0
;;;165    {
;;;166        bool_t boResult = C_FALSE;
000210  e3a00000          MOV      r0,#0
;;;167    
;;;168        if (C_NULL != pResetCfg)
000214  e3510000          CMP      r1,#0
000218  0a00001e          BEQ      |L1.664|
;;;169        {
;;;170            vSetRTCRESTR_DIS1HZ ( (uint8_t)(pResetCfg->eEn_1HzOpEn) );
00021c  e5d13000          LDRB     r3,[r1,#0]
000220  e59f2180          LDR      r2,|L1.936|
000224  e5d2200c          LDRB     r2,[r2,#0xc]
000228  e7c72393          BFI      r2,r3,#7,#1
00022c  e59f3174          LDR      r3,|L1.936|
000230  e5c3200c          STRB     r2,[r3,#0xc]
;;;171            vSetRTCRESTR_DIS2HZ ( (uint8_t)(pResetCfg->eEn_2HzOpEn) );
000234  e5d13001          LDRB     r3,[r1,#1]
000238  e59f2168          LDR      r2,|L1.936|
00023c  e5d2200c          LDRB     r2,[r2,#0xc]
000240  e7c22113          BFI      r2,r3,#2,#1
000244  e59f315c          LDR      r3,|L1.936|
000248  e5c3200c          STRB     r2,[r3,#0xc]
;;;172            vSetRTCRESTR_DIS4HZ ( (uint8_t)(pResetCfg->eEn_4HzOpEn) );
00024c  e5d13002          LDRB     r3,[r1,#2]
000250  e59f2150          LDR      r2,|L1.936|
000254  e5d2200c          LDRB     r2,[r2,#0xc]
000258  e7c12093          BFI      r2,r3,#1,#1
00025c  e59f3144          LDR      r3,|L1.936|
000260  e5c3200c          STRB     r2,[r3,#0xc]
;;;173            vSetRTCRESTR_DIS8HZ ( (uint8_t)(pResetCfg->eEn_8HzOpEn) );
000264  e5d13003          LDRB     r3,[r1,#3]
000268  e59f2138          LDR      r2,|L1.936|
00026c  e5d2200c          LDRB     r2,[r2,#0xc]
000270  e7c02013          BFI      r2,r3,#0,#1
000274  e59f312c          LDR      r3,|L1.936|
000278  e5c3200c          STRB     r2,[r3,#0xc]
;;;174            vSetRTCRESTR_DIS16HZ( (uint8_t)(pResetCfg->eEn_16HzOpEn));
00027c  e5d13004          LDRB     r3,[r1,#4]
000280  e59f2120          LDR      r2,|L1.936|
000284  e5d2200c          LDRB     r2,[r2,#0xc]
000288  e7c62313          BFI      r2,r3,#6,#1
00028c  e59f3114          LDR      r3,|L1.936|
000290  e5c3200c          STRB     r2,[r3,#0xc]
;;;175            boResult = C_TRUE;
000294  e3a00001          MOV      r0,#1
                  |L1.664|
;;;176        }
;;;177        return boResult;
;;;178    }
000298  e12fff1e          BX       lr
;;;179    
                          ENDP

                  boRTC_GetConfigReset PROC
;;;180    /****************************************************************************/
;;;181    bool_t boRTC_GetConfigReset(rtc_reset_cfg_st* const pResetCfg)
00029c  e1a01000          MOV      r1,r0
;;;182    {
;;;183        bool_t boResult = C_FALSE;
0002a0  e3a00000          MOV      r0,#0
;;;184    
;;;185        if (C_NULL != pResetCfg)
0002a4  e3510000          CMP      r1,#0
0002a8  0a000014          BEQ      |L1.768|
;;;186        {
;;;187            pResetCfg->eEn_1HzOpEn  = (rtc_enable_e) biGetRTCRESTR_DIS1HZ();
0002ac  e59f20f4          LDR      r2,|L1.936|
0002b0  e5d2200c          LDRB     r2,[r2,#0xc]
0002b4  e1a023a2          LSR      r2,r2,#7
0002b8  e5c12000          STRB     r2,[r1,#0]
;;;188            pResetCfg->eEn_2HzOpEn  = (rtc_enable_e) biGetRTCRESTR_DIS2HZ();
0002bc  e59f20e4          LDR      r2,|L1.936|
0002c0  e5d2200c          LDRB     r2,[r2,#0xc]
0002c4  e7e02152          UBFX     r2,r2,#2,#1
0002c8  e5c12001          STRB     r2,[r1,#1]
;;;189            pResetCfg->eEn_4HzOpEn  = (rtc_enable_e) biGetRTCRESTR_DIS4HZ();
0002cc  e59f20d4          LDR      r2,|L1.936|
0002d0  e5d2200c          LDRB     r2,[r2,#0xc]
0002d4  e7e020d2          UBFX     r2,r2,#1,#1
0002d8  e5c12002          STRB     r2,[r1,#2]
;;;190            pResetCfg->eEn_8HzOpEn  = (rtc_enable_e) biGetRTCRESTR_DIS8HZ();
0002dc  e59f20c4          LDR      r2,|L1.936|
0002e0  e5d2200c          LDRB     r2,[r2,#0xc]
0002e4  e2022001          AND      r2,r2,#1
0002e8  e5c12003          STRB     r2,[r1,#3]
;;;191            pResetCfg->eEn_16HzOpEn = (rtc_enable_e) biGetRTCRESTR_DIS16HZ();
0002ec  e59f20b4          LDR      r2,|L1.936|
0002f0  e5d2200c          LDRB     r2,[r2,#0xc]
0002f4  e7e02352          UBFX     r2,r2,#6,#1
0002f8  e5c12004          STRB     r2,[r1,#4]
;;;192            boResult = C_TRUE;
0002fc  e3a00001          MOV      r0,#1
                  |L1.768|
;;;193        }
;;;194        return boResult;
;;;195    }
000300  e12fff1e          BX       lr
;;;196    
                          ENDP

                  vRTC_ResetTimer PROC
;;;198    /****************************************************************************/
;;;199    void vRTC_ResetTimer(void)
000304  e59f009c          LDR      r0,|L1.936|
;;;200    {
;;;201        vSetRTCRESTR_RSTTMR((uint8_t)RTC_ENABLE);
000308  e5d0000c          LDRB     r0,[r0,#0xc]
00030c  e3c00020          BIC      r0,r0,#0x20
000310  e2800020          ADD      r0,r0,#0x20
000314  e59f108c          LDR      r1,|L1.936|
000318  e5c1000c          STRB     r0,[r1,#0xc]
;;;202    }
00031c  e12fff1e          BX       lr
;;;203    
                          ENDP

                  vRTC_ResetAlarm PROC
;;;204    /****************************************************************************/
;;;205    void vRTC_ResetAlarm(void)
000320  e59f0080          LDR      r0,|L1.936|
;;;206    {
;;;207        vSetRTCRESTR_RSTALM((uint8_t)RTC_ENABLE);
000324  e5d0000c          LDRB     r0,[r0,#0xc]
000328  e3c00010          BIC      r0,r0,#0x10
00032c  e2800010          ADD      r0,r0,#0x10
000330  e59f1070          LDR      r1,|L1.936|
000334  e5c1000c          STRB     r0,[r1,#0xc]
;;;208    }
000338  e12fff1e          BX       lr
;;;209    
                          ENDP

                  vRTC_SetCalibIntvPeriod PROC
;;;210    /****************************************************************************/
;;;211    void vRTC_SetCalibIntvPeriod(uint8_t u8CalibIntvPeriod)
00033c  e59f1064          LDR      r1,|L1.936|
;;;212    {
;;;213        vSetRTCCALIBCTRL0(u8CalibIntvPeriod);
000340  e5c10010          STRB     r0,[r1,#0x10]
;;;214    }
000344  e12fff1e          BX       lr
;;;215    
                          ENDP

                  vRTC_SetCalibIntvValue PROC
;;;216    /****************************************************************************/
;;;217    void vRTC_SetCalibIntvValue(uint8_t u8CalibIntvValue)
000348  e59f1058          LDR      r1,|L1.936|
;;;218    {
;;;219        vSetRTCCALIBCTRL1_CAL_INTRVL(u8CalibIntvValue);
00034c  e5d11011          LDRB     r1,[r1,#0x11]
000350  e7c41010          BFI      r1,r0,#0,#5
000354  e59f204c          LDR      r2,|L1.936|
000358  e5c21011          STRB     r1,[r2,#0x11]
;;;220    }
00035c  e12fff1e          BX       lr
;;;221    
                          ENDP

                  vRTC_SetClockSource PROC
;;;222    /****************************************************************************/
;;;223    void vRTC_SetClockSource(rtc_clock_source_e eClkSrc)
000360  e59f1040          LDR      r1,|L1.936|
;;;224    {
;;;225        vSetRTCCALIBCTRL1_CLK_RTC_SEL((uint8_t)eClkSrc);
000364  e5d11011          LDRB     r1,[r1,#0x11]
000368  e7c61290          BFI      r1,r0,#5,#2
00036c  e59f2034          LDR      r2,|L1.936|
000370  e5c21011          STRB     r1,[r2,#0x11]
;;;226    }
000374  e12fff1e          BX       lr
;;;227    
                          ENDP

                  vRTC_EnableCalibration PROC
;;;228    /****************************************************************************/
;;;229    void vRTC_EnableCalibration(rtc_enable_e eEn)
000378  e59f1028          LDR      r1,|L1.936|
;;;230    {
;;;231        vSetRTCCALIBCTRL1_CAL_ENB((uint8_t)eEn);
00037c  e5d11011          LDRB     r1,[r1,#0x11]
000380  e7c71390          BFI      r1,r0,#7,#1
000384  e59f201c          LDR      r2,|L1.936|
000388  e5c21011          STRB     r1,[r2,#0x11]
;;;232    }
00038c  e12fff1e          BX       lr
;;;233    /****************************************************************************/
                          ENDP

                  |L1.912|
                          DCD      au8LLDD_RTC_C_REVISION
                  |L1.916|
                          DCD      au8LLDD_RTC_C_TAG
                  |L1.920|
                          DCD      au8LLDD_RTC_H_REVISION
                  |L1.924|
                          DCD      au8LLDD_RTC_H_TAG
                  |L1.928|
                          DCD      au8LLDD_RTC_IO_H_REVISION
                  |L1.932|
                          DCD      au8LLDD_RTC_IO_H_TAG
                  |L1.936|
                          DCD      0xc0001000

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_RTC_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313020          DCB      0x2e,0x31,0x30,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_RTC_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_RTC_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313120          DCB      0x2e,0x31,0x31,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_RTC_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_RTC_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e382024          DCB      0x2e,0x38,0x20,0x24
000058  00                DCB      0x00
                  au8LLDD_RTC_IO_H_TAG
000059  244e61            DCB      0x24,0x4e,0x61
00005c  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000060  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
000064  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000068  202400            DCB      0x20,0x24,0x00
