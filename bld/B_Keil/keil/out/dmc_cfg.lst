L 1 "..\..\..\..\hldd\src\dmc_cfg.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC functions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn Software
N*   LIBRARIES   :
N******************************************************************************
N*   VERSION     : $Revision: 1.3 $
N*   DATE        : $Date: 2015/05/27 09:48:09 $
N*   TAG         : $Name: HLDD_1_1 $
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "dmc_cfg.h"
L 1 "..\..\..\..\hldd\inc\dmc_cfg.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn Software
N*   LIBRARIES   :
N******************************************************************************
N*   VERSION     : $Revision: 1.3 $
N*   DATE        : $Date: 2015/05/27 09:48:09 $
N*   TAG         : $Name: HLDD_1_1 $
N*****************************************************************************/
N#ifndef DMC_CFG_H
N#define DMC_CFG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "config.h"
L 1 "..\..\inc\config.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: config.h,v $
N*   Description :
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : config
N*               : $Name:  $
N*   LIBRARIES   :
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/config.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef CONFIG_H
N#define CONFIG_H
N
N/*****************************************************************************************
N*                Include files
N*****************************************************************************************/
N#include "mw_definitions.h"
L 1 "..\..\..\..\mw\inc\mw_definitions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : MW specific definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.17 $
N*   DATE        : $Date: 2015/07/03 09:11:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef MW_DEFINITIONS_H
N#define MW_DEFINITIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_DEFINITIONS_H_REVISION     "$Revision: 1.17 $"
N#define MW_DEFINITIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/* general */
N#define ON      1
N#define OFF	    0
N
N/* Resolution Parameters  */
N#define QVGA_RES_50                   (0)
N#define QVGA_RES_60                   (1)
N#define HNTSC_RES_60                  (2)
N#define HVGA_RES_50                   (3)
N#define HVGA_RES_60                   (4)
N#define WIDE_RES_50                   (5)
N#define WIDE_RES_60                   (6)
N#define VGA_RES_50                    (7)
N#define VGA_RES_60                    (8)
N#define WVGA_RES_45                   (9)
N#define WVGA_RES_50                  (10)
N#define WVGA_RES_55                  (11)
N#define WVGA_RES_60                  (12)
N#define SVGA_RES_50                  (13)
N#define SVGA_RES_60                  (14)
N#define DVGA_RES_50                  (15)
N#define DVGA_RES_60                  (16)
N#define DVGA_1_RES_50                (17)
N#define DVGA_1_RES_60                (18)
N#define XGA_RES_50                   (19)
N#define XGA_RES_60                   (20)
N#define SXGA_RES_50                  (21)
N#define SXGA_RES_60                  (22)
N#define HD_RES                       (23)
N#define HITACHI_TX31D06VM2AAA_RES_50 (24)
N#define HITACHI_TX31D06VM2AAA_RES_60 (25)
N#define SHARP_1280_422_50            (26)
N#define SHARP_1280_422_60            (27)
N#define TX18D35VM0AAA_50             (28)
N#define TX18D35VM0AAA_60             (29)
N#define RES_960_720_50               (30) 
N#define AT070TN94_50             (31)
N#define AT070TN94_60             (32)
N#define  TC90195_60   (33)
N#define  CLAA121WB   (34) 
N#define	CLAA088WA	(35)
N/* definition if layer is not used */
N#define FMT_OFF         (0)
N
N/* Data Formats */
N#define FMT_RGBA32      (1)
N#define FMT_RGBA24      (2)
N#define FMT_RGB24       (3)
N#define FMT_RGB16       (4)
N
N#define FMT_GRAY8A     (10)
N#define FMT_GRAY8      (11)
N#define FMT_GRAY2      (12)
N#define FMT_GRAY1      (13)
N#define FMT_A          (14)
N
N#define FMT_RLERGBA32  (15)
N#define FMT_RLERGBA24  (16)
N#define FMT_RLERGB24   (17)
N#define FMT_RLERGB16   (18)
N#define FMT_RLECLUT8   (19)
N#define FMT_RLECLUT6   (20)
N#define FMT_RLECLUT4   (21)
N#define FMT_RLECLUT2   (22)
N#define FMT_RLECLUT1   (23)
N#define FMT_RLEGRAY8A  (24)
N#define FMT_RLEGRAY8   (25)
N#define FMT_RLEGRAY2   (26)
N#define FMT_RLEGRAY1   (27)
N#define FMT_RLEA       (28)
N
N#define FMT_PNGRGBA32  (29)
N#define FMT_PNGRGB24   (30)
N#define FMT_PNGCLUT8   (31)
N#define FMT_PNGCLUT4   (32)
N#define FMT_PNGCLUT2   (33)
N#define FMT_PNGCLUT1   (34)
N#define FMT_PNGGRAY8A  (35)
N#define FMT_PNGGRAY8   (36)
N#define FMT_PNGGRAY4   (37)
N#define FMT_PNGGRAY2   (38)
N#define FMT_PNGGRAY1   (39)
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/*********************************************/
N
N#endif /* MW_DEFINITIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\inc\config.h" 2
N#include "qspi.h"
L 1 "..\..\..\..\hldd\inc\qspi.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     : TSM-Driver
N*   MODULE      : General
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/06/24 15:14:52 $
N*   TAG         : $Name: HLDD_1_1 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _QSPI_H
N#define _QSPI_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 25 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "qspic.h"
L 1 "..\..\..\..\lldd\inc\qspic.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI controler low level register access
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : QSPI
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.35 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef QSPIC_H
N#define QSPIC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_QSPIC_H_REVISION     "$Revision: 1.35 $"
N#define LLDD_QSPIC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : disable No reuse of identifiers */
N#endif
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
Ntypedef enum tag_qspic_cntrl_e
N{
N#ifdef FPGA
S  QSPIC_CNTRL_0 = 0x0U,
S  QSPIC_CNTRL_1 = 0x800U,
S  QSPIC_CNTRL_2 = 0x1000
N#else
N  QSPIC_CNTRL_0 = 0,
N  QSPIC_CNTRL_1 = 0xAF8000,  
N  QSPIC_CNTRL_2 = 0x1000
N#endif   
N} qspic_cntrl_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
Nextern void    read_burst4(int32_t i32addr, uint32_t * pu32Data);
Nextern void    read_burst8(int32_t i32addr, uint32_t * pu32Data);
Nextern void    word_write(int32_t i32addr, int32_t data);
Nextern void    hword_write(int32_t i32addr, int32_t data);
Nextern void    byte_write(int32_t i32addr, int32_t data);
Nextern int32_t word_read(int32_t i32addr);
Nextern int32_t hword_read(int32_t i32addr);
Nextern int32_t byte_read(int32_t i32addr);
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* Command Operation Code */
Ntypedef enum tag_qspic_CmdOp_e
N{
N  QSPI_CMD_READ_SINGLE        = 0x03,
N  QSPI_CMD_FAST_READ_SINGLE   = 0x0B,
N  QSPI_CMD_FAST_READ_DUAL_OUT = 0x3B,
N  QSPI_CMD_FAST_READ_DUAL_IO  = 0xBB,
N  QSPI_CMD_FAST_READ_QUAD_OUT = 0x6B,
N  QSPI_CMD_FAST_READ_QUAD_IO  = 0xEB
N} qspi_CmdOp_e;
N
N/* SPI I/O Control */
Ntypedef enum tag_qspic_IOCtrl_e
N{
N  QSPI_SINGLE = 0,
N  QSPI_DUAL   = 1,
N  QSPI_QUAD   = 2
N} qspi_IOCtrl_e;
N
N/* Address byte count */
Ntypedef enum tag_qspic_AddrByte_e
N{
N  QSPI_ADDR_3BYTE = 0,
N  QSPI_ADDR_4BYTE = 1
N} qspi_AddrByte_e;
N
N/* QSPI flash device no. */
Ntypedef enum tag_qspic_dev_e
N{
N    QSPIC_DEV_0 = 0,                         /* QSPI flash on CS0 */
N    QSPIC_DEV_1 = 1                          /* QSPI flash on CS1 */
N} qspic_dev_e;
N
N/* SPI flash density */
Ntypedef enum tag_qspic_density_e
N{
N    /* dependant on SI_AddrByte */
N    /* SI_AddrByte = 0 */
N    QSPIC_64KB   = 0,                         /*  64 KB */
N    QSPIC_128KB  = 1,                         /* 128 KB */
N    QSPIC_256KB  = 2,                         /* 256 KB */
N    QSPIC_512KB  = 3,                         /* 512 KB */
N    QSPIC_1MB    = 4,                         /*   1 MB */
N    QSPIC_2MB    = 5,                         /*   2 MB */
N    QSPIC_4MB    = 6,                         /*   4 MB */
N    QSPIC_8MB    = 7,                         /*   8 MB */
N    QSPIC_16MB   = 8,                         /*  16 MB */
N    /* SI_AddrByte = 1 */
N    QSPIC_32MB   = 9,                         /*  32 MB */
N    QSPIC_64MB   = 10,                        /*  64 MB */
N    QSPIC_128MB  = 11,                        /* 128 MB */
N    QSPIC_256MB  = 12                         /* 256 MB */
N} qspic_density_e;
N
N/* SPI data capture edge */
Ntypedef enum tag_qspic_sdce_e
N{
N    QSPIC_1ST_POS_EDGE = 0x00,              /* data capture @ 1st positive edge */
N    QSPIC_1ST_NEG_EDGE = 0x01,              /* data capture @ 1st negative edge */ 
N    QSPIC_2ND_POS_EDGE = 0x02,              /* data capture @ 2nd positive edge */
N    QSPIC_2ND_NEG_EDGE = 0x03               /* data capture @ 2nd negative edge */ 
N} qspic_sdce_e;
N
N/* SPI program access opcode */
Ntypedef enum tag_qspic_opcode_e
N{
N    /* read */
N    QSPIC_OPCODE_FAST_READ   = 0x0B,            /* Fast READ opcode */
N    QSPIC_OPCODE_READ_ID     = 0x90,            /* Read ID */   
N    QSPIC_OPCODE_READ_EXTID  = 0x9F,            /* Read Extended ID */
N    /* write control */
N    QSPIC_OPCODE_WRITE_EN    = 0x06,            /* WRITE enable */
N    QSPIC_OPCODE_WRITE_DIS   = 0x04,            /* WRITE disable */
N    /* erase */
N    QSPIC_OPCODE_4KBS_ERASE  = 0x20,            /* 4kB sector ERASE */
N    QSPIC_OPCODE_8KBS_ERASE  = 0x40,            /* 8kB sector ERASE */
N    QSPIC_OPCODE_64KBS_ERASE = 0xD8,            /* 64kB sector ERASE */
N    QSPIC_OPCODE_CHIP_ERASE  = 0xC7,            /* full chip ERASE opcode */
N    /* program */
N    QSPIC_OPCODE_PAGE_PGRM   = 0x02,            /* Page PROGRAM opcode */
N    /* Status */
N    QSPIC_OPCODE_RFST_READ   = 0x70,            /* Read Flag status register */
N    QSPIC_OPCODE_STS_READ    = 0x05,            /* Status read opcode */
N    QSPIC_OPCODE_STS_CLEAR   = 0x30,            /* Status clear */
N    /* Configuration read */
N    QSPIC_OPCODE_CFG_READ    = 0x35,            /* Configuration register read */
N    QSPIC_OPCODE_CFGM_READ   = 0x15,            /* Configuration register read */
N    /* Register write */
N    QSPIC_OPCODE_WRITE_REG   = 0x01,            /* Write Configuration & Status register opcode */
N    /* Release deep power down */
N    QSPIC_OPCODE_RELEASE_DP  = 0xAB,            /* Release from deep power down mode */
N    /* set 3/4 byte mode */
N    QSPIC_OPCODE_3_BYTE_MODE  = 0xE9,           /* Enable 3-byte mode */
N    QSPIC_OPCODE_4_BYTE_MODE  = 0xB7            /* Enable 4-byte mode */
N} qspic_opcode_e;
N
N/* Enable/disable */
Ntypedef enum tag_qspic_en_e
N{
N    QSPIC_DISABLE = 0x0U,                       /* Disable */
N    QSPIC_ENABLE  = 0x1U                        /* Enable */
N} qspic_en_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/* SPI direct read control strucutre */
Ntypedef struct tag_qspic_direct_rd_ctrl_st
N{
N    qspi_CmdOp_e     eCmd;                  /* Quad-SPI command code   */
N    uint32_t         u32DummyByteCnt;       /* Number of dummy bytes   */
N    qspi_AddrByte_e  eAddrByteCnt;          /* Address mode 3-/4-Byte  */
N    qspi_IOCtrl_e    eSpiDatIOCtrl;         /* SPI Data I/O control    */
N    qspi_IOCtrl_e    eSpiDmyIOCtrl;         /* SPI Dummy I/O control   */
N    qspi_IOCtrl_e    eSpiAdrIOCtrl;         /* SPI Address I/O control */
N} qspic_direct_rd_ctrl_st;
N
Ntypedef struct tag_qspic_directconfig_st
N{
N    uint16_t                u16FlashBaseAddress;   /* physical base address (bits [31:16]), upper 4 bits are fixed and don't care */
N    qspic_density_e         eFlashDensity;         /* flash density */
N    qspic_en_e              eEnableMemMapRd;       /* enable memory map read */
N    qspic_direct_rd_ctrl_st stRdCtrl;              /* SPI mode read */
N    qspic_en_e              eWIPEnable;            /* WIP bit enable */
N    uint8_t                 u8CSTime;              /* deassertion time */
N    qspic_sdce_e            eEdge;                 /* capture edge */
N} qspic_directconfig_st;
N
Ntypedef struct tag_qspic_prgconfig_st
N{
N    uint8_t             u8CSTime;           /* deassertion time */
N    qspic_sdce_e        eEdge;              /* capture edge */
N    qspi_AddrByte_e     eAddrByteCnt;       /* Address mode 3-/4-Byte  */
N} qspic_prgconfig_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vQSPIC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigureDirectControl
N *
N * Purpose:       does complete configuration for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                pstDirConf     pointer to configuration for direct access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   The base address must be aligned on a boundary that is an integer
N *                 multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigureDirectControl(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_directconfig_st *pstDirConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigurePrgControl
N *
N * Purpose:       does complete configuration for program access
N *
N * Inputs:        eController     flash controller no.
N *                pstPrgConf      pointer to configuration for program access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigurePrgControl(qspic_cntrl_e eController, qspic_prgconfig_st *pstPrgConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashBaseAddress
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController           flash controller no.
N *                eDevice               device no.
N *                u16FlashBaseAddress   physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashBaseAddress 
N *
N * Purpose:       Reads memory base address of flash.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t * u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashDensity
N *
N * Purpose:       set flash size
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eFlashDensity    flash density (size)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashDensity 
N *
N * Purpose:       Reads flash density.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *
N * Outputs:       flash density (size)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e * eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableDirectMemMapRd 
N *
N * Purpose:       Enables and disables read access.
N *                If disabled, the SPI Flash device is not memory-mapped.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eEnableMemMap    enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableDirectMemMapRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectMemMapStatusRd 
N *
N * Purpose:       Reads status of direct memory map read.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectMemMapStatusRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashMemMap
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController            flash controller no.
N *                eDevice                device no.
N *                u16FlashBaseAddress    physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *                eFlashDensity          flash density (size)
N *                eEnableMemMapRd        enable/disable read
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashMemMap(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress,
N                                      qspic_density_e eFlashDensity, qspic_en_e eEnableMemMapRd);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetReadCtrl  
N *
N * Purpose:       specifies the configuration of the read command 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u32Ctrl        read control value 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   specifies the configuration of the read command
N *                that the hardware sequencer should issue to an
N *                SPI Flash device for direct read accesses.
N *                It affects Dual I/O and Quad I/O reads
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetReadCtrl 
N *
N * Purpose:       Reads the configuration of the read command.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       read control value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t * u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectEnableWIPPolling      
N *
N * Purpose:       Enables and disables the polling of the WIP bit of the
N *                status register in the SPI Flash (until the SPI Flash write
N *                is completed) before issuing a read command to it. 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectEnableWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetStatusWIPPolling 
N *
N * Purpose:       Reads Status of WIP polling bit.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetStatusWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetCSDeassertionTime
N *
N * Purpose:       Specifies the deassertion time of SPI_CS_N for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetCSDeassertionTime 
N *
N * Purpose:       Reads Direct Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetCSDeassertionTime
N *
N * Purpose:       specifies the deassertion time of SPI_CS_0/1 for program access
N *
N * Inputs:        eController    flash controller no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time) 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetCSDeassertionTime(qspic_cntrl_e eController, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetCSDeassertionTime 
N *
N * Purpose:       Reads Program Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetCSDeassertionTime(qspic_cntrl_e eController, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEdge          1st pos. edge / 1st neg. edge 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetDataCaptureEdge 
N *
N * Purpose:       Reads Direct Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for programm access
N *
N * Inputs:        eController    flash controller no.
N *                eEdge          capture edge: 1st pos. edge / 1st neg. edge
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetDataCaptureEdge 
N *
N * Purpose:       Reads Program Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Capture edge: 1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableInterrupt      
N *
N * Purpose:       Enables and disables SPI interrupts generated on completion
N *                of a program register access cycle 
N *
N * Inputs:        eController    flash controller no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   If enabled, generates an interrupt when the
N *                SPI Cycle Done bit is set to 1.
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableInterrupt(qspic_cntrl_e eController, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetInterruptStatus 
N *
N * Purpose:       Reads Interrupt status.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Interrupt Status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetInterruptStatus(qspic_cntrl_e eController, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       C_TRUE or C_FALSE
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_IsSpiCycleDone(qspic_cntrl_e eController, bool_t * bResult);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleInPgrs 
N *
N * Purpose:       checks if SPI cycle is in progress 
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleInPgrs(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: CC_TRUE or C_FALSE
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleDone(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WaitForCompletion 
N *
N * Purpose:       Wait for cycle completion of previous program access
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WaitForCompletion(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusFlagRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device for Micron
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusFlagRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmClearStatus 
N *
N * Purpose:       Clear the status register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmClearStatus(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmReleaseDP 
N *
N * Purpose:       Release from deep sleep power mode
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmReleaseDP(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationRead 
N *
N * Purpose:       Retrieve the current value of the configuration register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Configuration);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationWrite 
N *
N * Purpose:       Modify the value of the Status and Configuration registers
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8Status       Desired value of the Status register  
N *                u8Conf         Desired value of the Configuration register  
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationWrite(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Status,  uint8_t u8Conf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteEnable
N *
N * Purpose:       Enable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteEnable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteDisable
N *
N * Purpose:       Disable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteDisable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSectErase
N *
N * Purpose:       SPI Flash Sector Erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                eOpcode           Sector erase opcode
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSectErase(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_opcode_e eOpcode, uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmChipErase
N *
N * Purpose:       Full Chip Erase
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmChipErase(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmPagePgrm
N *
N * Purpose:       Programming 256 bytes of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer to be written into
N *                                  flash device
N *
N * Outputs:       
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmPagePgrm(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmFastRead 
N *
N * Purpose:       Perform fast reading of 256 byte of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *
N * Outputs:       pu8Data           pointer to data buffer 
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmFastRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetID 
N *
N * Purpose:       Retrieve device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8ManID          Manufacturer ID
N *                pu8DevID          Device ID
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8ManID, uint8_t* const pu8DevID);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetExtendedID 
N *
N * Purpose:       Retrieve extended device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetExtendedID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WriteByte 
N *
N * Purpose:       Write one Byte to the device
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Value           value to be send
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WriteByte(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetRegister 
N *
N * Purpose:       Retrieve content of register
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteRegister 
N *
N * Purpose:       Write data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *                pu8Information    Handle to the infromation buffer
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      u32QSPIC_DirectReadWord
N *
N * Purpose:       Perform reading of one word from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: read word
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32QSPIC_DirectReadWord(uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst4
N *
N * Purpose:       Perform reading 4 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst4(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst8
N *
N * Purpose:       Perform reading 8 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst8(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************/
N
N
N#endif /* QSPIC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "ccr.h"
L 1 "..\..\..\..\lldd\inc\ccr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : CCR Low-level register
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : CCR
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.22 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CCR_LLDD_H
N#define CCR_LLDD_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_CCR_H_REVISION     "$Revision: 1.22 $"
N#define LLDD_CCR_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N/* CCR unlock key value */
N#define CCR_KEY_VAL 0xA5C0F17BU
N
N/* CCR PDS unlock macro */
N#define vCCR_PDS_UNLOCK()(vSetCCR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/* CCR PDH unlock macro */
N#define vCCR_PDH_UNLOCK()(vSetPDHR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
Ntypedef enum tag_ccr_enable_e
N{
N  CCR_DISABLE = 0,  /* disable */
N  CCR_ENABLE  = 1   /* enable  */
N} ccr_enable_e;
N
Ntypedef enum tag_ccr_alarm_no_e
N{
N  CCR_ALARM_0  = 0,   /* Alarm 0 */
N  CCR_ALARM_1  = 1   /* Alarm 1  */
N} ccr_alarm_no_e;
N
N/* Controller selection */
Ntypedef enum tag_ccr_cntrl_e
N{
N    CCR_QSPI_0        =  0,   /* QSPI 0 */
N    CCR_QSPI_1        =  1,   /* QSPI 1 */
N    CCR_QSPI_INT      =  2,   /* QSPI Internal */
N    CCR_SDRAM         =  3,   /* SDRAM */
N    CCR_I2S           =  4,   /* I2S */
N    CCR_GDC_0         =  5,   /* GDC 0 */
N    CCR_GDC_1         =  6,   /* GDC 1 */
N    CCR_DMA           =  7,   /* DMA */
N    CCR_PARFLASH      =  8,   /* Parallel Flash */
N    CCR_DAP           =  9,   /*  */
N    CCR_GA            = 10,   /* GA Engine */
N    CCR_PNG           = 11,   /* PNG Decoder */
N    CCR_FG            = 12,   /* Framegrabber */
N    CCR_MLB           = 13,   /* MLB */
N    CCR_SMC           = 14,   /* Stepper Motor */
N    CCR_HSPWM         = 15,   /* HSPWM */
N    CCR_I2SM          = 16,   /* I2SM */
N    CCR_TSM           = 17,   /* TSM */
N    CCR_TRACE         = 18,   /* Trace */
N    CCR_320MHz        = 19    /* 320MHz */
N} ccr_cntrl_e;
N
N/* Modulation type */
Ntypedef enum tag_ccr_modulated_clk_e
N{
N    CCR_MODULATED     = 0,    /* modulated clock */
N    CCR_NON_MODULATED = 1     /* non modulated clock */
N} ccr_modulated_clk_e;
N
N/*  */
Ntypedef enum tag_ccr_clock_type_e
N{
N    CCR_MODULATED_GDC0       = 0,    /* Modulated clock for GDC0 */
N    CCR_MODULATED_GDC1       = 1,    /* Modulated clock for GDC1 */
N    CCR_NON_MODULATED_GDC0   = 2,    /* Non modulated clock for GDC0 */
N    CCR_NON_MODULATED_GDC1   = 3,    /* Non modulated clock for GDC1 */
N    CCR_DOTCLKIN             = 4,    /* DOTCLKIN for GDC0 or GDC1 */
N    CCR_MODULATED_I2S        = 5,    /* Modulated clock for I2S */
N    CCR_NON_MODULATED_I2S    = 6,    /* Non modulated clock for I2S */
N    CCR_I2SMCLKIN            = 7,    /* I2SMCLKIN for I2S */
N    CCR_MODULATED_320MHZ     = 8,    /* Modulated clock for 320MHz */
N    CCR_NON_MODULATED_320MHZ = 9     /* Non modulated clock for 320MHz */
N} ccr_clock_type_e;
N
N/* Clock divider values (input clock: 900MHz) */
Ntypedef enum tag_ccr_clk_freq_e
N{
N    CCR_CLKDIV_112_5MHz =  8,    /* 112,5 MHz output clk */
N    CCR_CLKDIV_100_0MHz =  9,    /* 100,0 MHz output clk */
N    CCR_CLKDIV_90_0MHz  = 10,    /*  90,0 MHz output clk */
N    CCR_CLKDIV_81_8MHz  = 11,    /*  81,8 MHz output clk */
N    CCR_CLKDIV_75_0MHz  = 12,    /*  75,0 MHz output clk */
N    CCR_CLKDIV_69_2MHz  = 13,    /*  69,2 MHz output clk */
N    CCR_CLKDIV_64_3MHz  = 14,    /*  64,3 MHz output clk */
N    CCR_CLKDIV_60_0MHz  = 15,    /*  60,0 MHz output clk */
N    CCR_CLKDIV_56_3MHz  = 16,    /*  56,3 MHz output clk */
N    CCR_CLKDIV_52_9MHz  = 17,    /*  52,9 MHz output clk */
N    CCR_CLKDIV_50_0MHz  = 18,    /*  50,0 MHz output clk */
N    CCR_CLKDIV_47_4MHz  = 19,    /*  47,4 MHz output clk */
N    CCR_CLKDIV_45_0MHz  = 20,    /*  45,0 MHz output clk */
N    CCR_CLKDIV_42_9MHz  = 21,    /*  42,9 MHz output clk */
N    CCR_CLKDIV_40_9MHz  = 22,    /*  40,9 MHz output clk */
N    CCR_CLKDIV_39_1MHz  = 23,    /*  39,1 MHz output clk */
N    CCR_CLKDIV_37_5MHz  = 24,    /*  37,5 MHz output clk */
N    CCR_CLKDIV_36_0MHz  = 25,    /*  36,0 MHz output clk */
N    CCR_CLKDIV_34_6MHz  = 26,    /*  34,6 MHz output clk */
N    CCR_CLKDIV_33_3MHz  = 27,    /*  33,3 MHz output clk */
N    CCR_CLKDIV_32_1MHz  = 28,    /*  32,1 MHz output clk */
N    CCR_CLKDIV_31_0MHz  = 29,    /*  31,0 MHz output clk */
N    CCR_CLKDIV_30_0MHz  = 30,    /*  30,0 MHz output clk */
N    CCR_CLKDIV_29_0MHz  = 31,    /*  29,0 MHz output clk */
N    CCR_CLKDIV_28_1MHz  = 32,    /*  28,1 MHz output clk */
N    CCR_CLKDIV_27_2MHz  = 33,    /*  27,2 MHz output clk */
N    CCR_CLKDIV_26_4MHz  = 34,    /*  26,4 MHz output clk */
N    CCR_CLKDIV_25_7MHz  = 35,    /*  25,7 MHz output clk */
N    CCR_CLKDIV_25_0MHz  = 36,    /*  25,0 MHz output clk */
N    CCR_CLKDIV_24_3MHz  = 37,    /*  24,3 MHz output clk */
N    CCR_CLKDIV_23_6MHz  = 38,    /*  23,6 MHz output clk */
N    CCR_CLKDIV_23_0MHz  = 39,    /*  23,0 MHz output clk */
N    CCR_CLKDIV_22_5MHz  = 40     /*  22,5 MHz output clk */
N} ccr_clk_freq_e;
N
N/* Clock stability */
Ntypedef enum tag_ccr_clock_stability_e
N{
N    CCR_CLOCK_NOT_STABLE     = 0,    /* Clock is not stable */
N    CCR_CLOCK_STABLE         = 1,    /* Clock is stable */
N    CCR_CLOCK_STABILITY_FAIL = 2     /* Clock stability faild */
N} ccr_clock_stability_e;
N
N/* Clocks */
Ntypedef enum tag_ccr_clocks_e
N{
N    CCR_OSC10M            = 0,    /* 10M clock */
N    CCR_OSC32K            = 1,    /* 32K clock */
N    CCR_RC100K            = 2,    /* RC100K clock */
N    CCR_MODULATED_PLL     = 3,    /* modulated PLL */
N    CCR_NON_MODULATED_PLL = 4     /* non-modulated PLL */
N} ccr_clocks_e;
N
N/* Reset types */
Ntypedef enum tag_reset_type_e
N{
N    CCR_FULL_RST    = 0,    /* Software full reset */
N    CCR_DBG_RST     = 1,    /* Debug reset */
N    CCR_SW_PART_RST = 2     /* Software part reset */
N} ccr_reset_type_e;
N
N/* target device mode */
Ntypedef enum tag_ccr_device_mode_e
N{
N    CCR_DEVICE_MODE_TRANSITION = 0x00000000,    /* M_PLL */
N    CCR_DEVICE_MODE_M_PLL      = 0x005C0001,    /* M_PLL */
N    CCR_DEVICE_MODE_M_OSC10    = 0x005C0002,    /* M_OSC10 */
N    CCR_DEVICE_MODE_STB_OSC10  = 0x005C0004,    /* STB_OSC10 */
N    CCR_DEVICE_MODE_SLP_OSC10  = 0x005C0008,    /* SLP_OSC10 */
N    CCR_DEVICE_MODE_SLP_RC10   = 0x005C0010,    /* SLP_RC10 */
N    CCR_DEVICE_MODE_STOP_R     = 0x005C0020,    /* STOP_R */
N    CCR_DEVICE_MODE_STOP       = 0x005C0040     /* STOP */
N} ccr_device_mode_e;
N
N/* Interupts */
Ntypedef enum tag_ccr_interrupts_e
N{
N    CCR_INTERRUPTS_STATE_CHANGE = 0,    /* state change interrupt*/
N    CCR_INTERRUPTS_ALARM_0      = 1,    /* alarm comparator 0 interrupt */
N    CCR_INTERRUPTS_ALARM_1      = 2,    /* alarm comparator 1 interrupt */
N    CCR_INTERRUPTS_BECC         = 3,    /* backup RAM ECC interrupt */
N    CCR_INTERRUPTS_MECC         = 4     /* main memory ECC interrupt */
N} ccr_interrupts_e;
N
N/* Interrupt occurred */
Ntypedef enum tag_ccr_int_occurred_e
N{
N  CCR_INT_NOT_OCCURRED = 0,  /* interrupt did not occur */
N  CCR_INT_OCCURRED     = 1   /* interrupt occurred */
N} ccr_int_occurred_e;
N
N/* Operation mode type */
Ntypedef enum tag_ccr_operation_mode_type_e
N{
N    CCR_SSCG_MODE_DECIMAL_FACTOR = 0,    /* Decimal factor mode */
N    CCR_SSCG_MODE_INTEGER_FACTOR = 1     /* Integer factor mode */
N} ccr_operation_mode_type_e;
N
N/* Modulation direction */
Ntypedef enum tag_ccr_modulation_direction
N{
N    CCR_SSCG_MD_DOWN_SPREAD   = 0,    /* modulation direction is down spread */
N    CCR_SSCG_MD_CENTER_SPREAD = 1     /* modulation direction is up spread */
N} ccr_modulation_direction;
N
N/* Feedback division ratio prescaler value */
Ntypedef enum tag_ccr_fdr_prescaler_e
N{
N    CCR_FDR_PRESCALER_1 = 0,    /* feedback division ratio not doubled */
N    CCR_FDR_PRESCALER_2 = 1     /* feedback division ratio doubled */
N} ccr_fdr_prescaler_e;
N
N/* Watchdof timer alarm output configuration */
Ntypedef enum tag_ccr_wdt_alarm_type_e
N{
N    CCR_WDT_ALARM_AS_NMI   = 0,    /* watchdog timer alarm as watchdog timer NMI */
N    CCR_WDT_ALARM_AS_RESET = 1     /* watchdog timer alarm as watchdog timer RESET */
N} ccr_wdt_alarm_type_e;
N
N/* CAN modes */
Ntypedef enum tag_ccr_can_mode_e
N{                                     /*             tranceiver , combined channels, sepatate channels, pin pairs, description */
N    CCR_CAN_MODE_T_1_1_1_1  = 0x0,    /* CAN mode  1:     yes   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_T_2_1_1    = 0x1,    /* CAN mode  2:     yes   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_T_2_2      = 0x2,    /* CAN mode  3:     yes   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_T_3_1      = 0x3,    /* CAN mode  4:     yes   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_T_ALL      = 0x4,    /* CAN mode  5:     yes   ,         4        ,         -        ,    1     , all to one  */
N    CCR_CAN_MODE_NT_1_1_1_1 = 0x8,    /* CAN mode  5:      no   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_NT_2_1_1   = 0x9,    /* CAN mode  6:      no   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_NT_2_2     = 0xA,    /* CAN mode  7:      no   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_NT_3_1     = 0xB,    /* CAN mode  8:      no   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_NT_ALL     = 0xC,    /* CAN mode  9:      no   ,         4        ,         -        ,    1     , all to all  */
N    CCR_CAN_MODE_NT_INTER   = 0xF     /* CAN mode 10:      no   ,         -        ,         4        ,    -     , internal    */
N} ccr_can_mode_e;
N
N/* ECC modes */
Ntypedef enum tag_ccr_ecc_mode_e
N{
N    CCR_ECC_MODE_256KB  = 0,    /* 256KB with ECC */
N    CCR_ECC_MODE_128KB  = 2,    /* 128KB with ECC */
N    CCR_ECC_MODE_NO_ECC = 3     /* without ECC */
N} ccr_ecc_mode_e;
N
N/* TBIO channel */
Ntypedef enum tag_ccr_tbio_channel_e
N{
N    CCR_TBIO_0 = 0,    /* TBIO channel 0 */
N    CCR_TBIO_1 = 1,    /* TBIO channel 1 */
N    CCR_TBIO_2 = 2,    /* TBIO channel 2 */
N    CCR_TBIO_3 = 3,    /* TBIO channel 3 */
N    CCR_TBIO_4 = 4,    /* TBIO channel 4 */
N    CCR_TBIO_5 = 5,    /* TBIO channel 5 */
N    CCR_TBIO_6 = 6,    /* TBIO channel 6 */
N    CCR_TBIO_7 = 7,    /* TBIO channel 7 */
N    CCR_TBIO_8 = 8,    /* TBIO channel 8 */
N    CCR_TBIO_9 = 9     /* TBIO channel 9 */
N} ccr_tbio_channel_e;
N
N/* TBIO port direction */
Ntypedef enum tag_ccr_tbio_direction_e
N{
N    CCR_TBIO_IN  = 0,    /* TBIO pin as input */
N    CCR_TBIO_OUT = 1     /* TBIO pin as output */
N} ccr_tbio_direction_e;
N
N/* TBIN0 signal select for Complex Timer 4 */
Ntypedef enum tag_ccr_tbin_source_ctimer4_e
N{
N    CCR_TBIN_CTIMER4_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER4_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER4_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER4_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER4_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER4_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER4_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER4_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER4_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER4_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER4_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER4_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER4_GDC_PWMOUT0    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is SIN_PLUS0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is SIN_MINUS0 */
N} ccr_tbin_source_ctimer4_e;
N
N/* TBIN0 signal select for Complex Timer 5 */
Ntypedef enum tag_ccr_tbin_source_ctimer5_e
N{
N    CCR_TBIN_CTIMER5_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER5_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER5_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER5_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER5_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER5_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER5_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER5_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER5_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER5_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER5_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER5_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER5_GDC_PWMOUT1    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT1 */
N    CCR_TBIN_CTIMER5_GDC_COS_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is COS_PLUS0 */
N    CCR_TBIN_CTIMER5_GDC_COS_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is COS_MINUS0 */
N} ccr_tbin_source_ctimer5_e;
N
N/* Synchronisation between GDC0 and GDC1 */
Ntypedef enum tag_ccr_gdc_sync_e
N{
N    CCR_GDC_SYNC_INDEPENDANT   = 0,    /* independant operation of GDC1 */
N    CCR_GDC_SYNC_GDC1_USE_GDC0 = 1     /* GDC1 uses GDC0 synchronisation signals */
N} ccr_gdc_sync_e;
N
N/* NOR channel */
Ntypedef enum tag_ccr_nor_channel_e
N{
N    CCR_NOR_CHANNEL_0 = 0,    /* NOR channel 0 */
N    CCR_NOR_CHANNEL_1 = 1     /* NOR channel 1 */
N} ccr_nor_channel_e;
N
N/* NAND channel */
Ntypedef enum tag_ccr_nand_channel_e
N{
N    CCR_NAND_CHANNEL_0 = 0,    /* NAND channel 0 */
N    CCR_NAND_CHANNEL_1 = 1     /* NAND channel 1 */
N} ccr_nand_channel_e;
N
N/* SRAM channel */
Ntypedef enum tag_ccr_sram_channel_e
N{
N    CCR_SRAM_CHANNEL_0 = 0,    /* SRAM channel 0 */
N    CCR_SRAM_CHANNEL_1 = 1,    /* SRAM channel 1 */
N    CCR_SRAM_CHANNEL_2 = 2,    /* SRAM channel 2 */
N    CCR_SRAM_CHANNEL_3 = 3     /* SRAM channel 3 */
N} ccr_sram_channel_e;
N
N/* Complex timer */
Ntypedef enum tag_ccr_complex_timer_e
N{
N    CCR_COMPLEX_TIMER_0_TO_5 = 0,    /* Complex timer 0 to 5 */
N    CCR_COMPLEX_TIMER_6_TO_9 = 1     /* Complex timer 6 to 9 */
N} ccr_complex_timer_e;
N
N/* Device version */
Ntypedef enum tag_ccr_device_version_e
N{
N    DEVICE_CAP_BT_1  = 0,    /* TMPR461XBG-300 (BGA-328, no SIP Flash)   */
N    DEVICE_CAP_C     = 1,    /* TMPR462XBG-300 (BGA-328, with SIP Flash) */
N    DEVICE_CAP_BT_0  = 2,    /* TMPR460XBG-300 (BGA-244, no SIP Flash)   */
N    DEVICE_INVALID   = 3     /* Reserved   */
N} ccr_device_version_e;
N
N/* SIP Flash size */
Ntypedef enum tag_ccr_SIPflash_size_e
N{
N    CCR_SIP_FLASH_SIZE_2MB  = 0,    /*  2MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_4MB  = 1,    /*  4MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_8MB  = 2,    /*  8MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_16MB = 3     /* 16MB SIP FLASH size */
N} ccr_SIPflash_size_e;
N
Ntypedef enum tag_processor_device_e
N{
N    CCR_CR4 = 0,    /* processor R4 */
N    CCR_M3  = 1     /* processor M3 */
N} ccr_processor_device_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_current_trim_e
N{
N    CCR_VREG_CURRENT_TRIM_M_40_PROZ = 4,    /* -40% */
N    CCR_VREG_CURRENT_TRIM_M_30_PROZ = 5,    /* -30% */
N    CCR_VREG_CURRENT_TRIM_M_20_PROZ = 6,    /* -20% */
N    CCR_VREG_CURRENT_TRIM_M_10_PROZ = 7,    /* -10% */
N    CCR_VREG_CURRENT_TRIM_0_PROZ    = 0,    /*   0% */
N    CCR_VREG_CURRENT_TRIM_P_10_PROZ = 1,    /*  10% */
N    CCR_VREG_CURRENT_TRIM_P_20_PROZ = 2,    /*  20% */
N    CCR_VREG_CURRENT_TRIM_P_30_PROZ = 3     /*  30% */
N} ccr_vreg_current_trim_e;
N
N/* Voltage regulator reference voltage trim */
Ntypedef enum tag_vreg_ref_voltage_trim_e
N{
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_5_PROZ = 15,    /* -7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_0_PROZ = 14,    /* -7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_5_PROZ = 13,    /* -6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_0_PROZ = 12,    /* -6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_5_PROZ = 11,    /* -5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_0_PROZ = 10,    /* -5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_5_PROZ =  9,    /* -4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_0_PROZ =  8,    /* -4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_5_PROZ =  7,    /* -3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_0_PROZ =  6,    /* -3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_5_PROZ =  5,    /* -2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_0_PROZ =  4,    /* -2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_5_PROZ =  3,    /* -1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_0_PROZ =  2,    /* -1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_0_5_PROZ =  1,    /* -0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_0_PROZ     =  0,    /*    0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_0_5_PROZ = 31,    /* 0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_0_PROZ = 30,    /* 1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_5_PROZ = 29,    /* 1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_0_PROZ = 28,    /* 2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_5_PROZ = 27,    /* 2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_0_PROZ = 26,    /* 3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_5_PROZ = 25,    /* 3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_0_PROZ = 24,    /* 4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_5_PROZ = 23,    /* 4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_0_PROZ = 22,    /* 5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_5_PROZ = 21,    /* 5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_0_PROZ = 20,    /* 6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_5_PROZ = 19,    /* 6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_0_PROZ = 18,    /* 7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_5_PROZ = 17,    /* 7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_8_0_PROZ = 16     /* 8.0% */
N} ccr_vreg_ref_voltage_trim_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_temperature_trim_e
N{
N    CCR_VREG_TEMPERATURE_TRIM_M_60_DEGC = 4,    /* -60degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_50_DEGC = 5,    /* -50degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_40_DEGC = 6,    /* -40degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_25_DEGC = 7,    /* -25degC */
N    CCR_VREG_TEMPERATURE_TRIM_0_DEGC    = 0,    /*   0degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_25_DEGC = 1,    /*  25degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_50_DEGC = 2,    /*  50degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_70_DEGC = 3     /*  70degC */
N} ccr_vreg_temperature_trim_e;
N
N/* Oscillator adjustment */
Ntypedef enum tag_osc_adjustment_e
N{
N    CCR_OSC_ADJUSTMENT_M_8 =  8,    /* -8 */
N    CCR_OSC_ADJUSTMENT_M_7 =  9,    /* -7 */
N    CCR_OSC_ADJUSTMENT_M_6 = 10,    /* -6 */
N    CCR_OSC_ADJUSTMENT_M_5 = 11,    /* -5 */
N    CCR_OSC_ADJUSTMENT_M_4 = 12,    /* -4 */
N    CCR_OSC_ADJUSTMENT_M_3 = 13,    /* -3 */
N    CCR_OSC_ADJUSTMENT_M_2 = 14,    /* -2 */
N    CCR_OSC_ADJUSTMENT_M_1 = 15,    /* -1 */
N    CCR_OSC_ADJUSTMENT_0   =  0,    /*  0 */
N    CCR_OSC_ADJUSTMENT_P_1 =  1,    /*  1 */
N    CCR_OSC_ADJUSTMENT_P_2 =  2,    /*  2 */
N    CCR_OSC_ADJUSTMENT_P_3 =  3,    /*  3 */
N    CCR_OSC_ADJUSTMENT_P_4 =  4,    /*  4 */
N    CCR_OSC_ADJUSTMENT_P_5 =  5,    /*  5 */
N    CCR_OSC_ADJUSTMENT_P_6 =  6,    /*  6 */
N    CCR_OSC_ADJUSTMENT_P_7 =  7     /*  7 */
N} ccr_osc_adjustment_e;
N
N/* Threshold for power-good sensing */
Ntypedef enum tag_threshold_power_good_sensing_e
N{
N    CCR_POWER_GOOD_SENSING_0 = 0,    /* threshold 0 */
N    CCR_POWER_GOOD_SENSING_1 = 1,    /* threshold 1 */
N    CCR_POWER_GOOD_SENSING_2 = 2,    /* threshold 2 */
N    CCR_POWER_GOOD_SENSING_3 = 3,    /* threshold 3 */
N    CCR_POWER_GOOD_SENSING_4 = 7,    /* threshold 4 */
N    CCR_POWER_GOOD_SENSING_5 = 6,    /* threshold 5 */
N    CCR_POWER_GOOD_SENSING_6 = 5,    /* threshold 6 */
N    CCR_POWER_GOOD_SENSING_7 = 4     /* threshold 7 */
N} ccr_threshold_power_good_sensing_e;
N
N/* SMC IO level */
Ntypedef enum tag_smc_io_level_e
N{
N    CCR_SMC_IO_LEVEL_5V0 = 0,    /* operate with 5V */
N    CCR_SMC_IO_LEVEL_3V3 = 1     /* operate with 3.3V */
N} ccr_smc_io_level_e;
N
N/* Interrupts */
Ntypedef enum tag_system_interrupt_e
N{
N    CCR_OSC10M_CLOCK_MISSING_INT = 0x00000001,    /* OSC10MHz */
N    CCR_OSC32K_CLOCK_MISSING_INT = 0x00000100,    /* OSC32KHz */
N    CCR_EROR_INT_0               = 0x00010000,    /* Error interrupt 0 */
N    CCR_EROR_INT_1               = 0x00020000,    /* Error interrupt 1 */
N    CCR_EROR_INT_2               = 0x00040000,    /* Error interrupt 2 */
N    CCR_BACKUP_ECC_RAM_INT       = 0x01000000,    /* Backup ECC-RAM */
N    CCR_MAIN_MEMORY_ECC_RAM_INT  = 0x02000000,    /* Main memory ECC-RAM */
N    CCR_STPU_INT                 = 0x04000000,    /* STPU */
N    CCR_WDT_INT                  = 0x08000000,    /* WDT */
N    CCR_IO_INT                   = 0x10000000     /* IO */
N} ccr_system_interrupt_e;
N
N/* ECC */
Ntypedef enum tag_ecc_e
N{
N    CCR_BACKUP_RAM_ECC  = 0,    /* Backup RAM ECC */
N    CCR_MAIN_MEMORY_ECC = 1     /* Main memory ECC */
N} ccr_ecc_e;
N
N/* ECC interrupt type */
Ntypedef enum tag_ecc_interrupt_type_e
N{
N    CCR_ECC_SYSC_INTR    = 0,    /* SYSC_INTR will be generated */
N    CCR_ECC_SYSC_NMI     = 1,    /* SYSC_NMI will be generated */
N    CCR_ECC_SW_FULL_RSTN = 2     /* SW_FULL_RSTN will be generated */
N} ccr_ecc_interrupt_type_e;
N
N/* Modes */
Ntypedef enum tag_modes_e
N{
N    CCR_STB_MODE      = 0,    /* mission state entered from STB_ISC10 */
N    CCR_SLPOSC10_MODE = 1,    /* mission state entered from SLP_OSC10 */
N    CCR_SLPRCOSC_MODE = 2,    /* mission state entered from SLP_RD100K */
N    CCR_STOPR_MODE    = 3,    /* mission state entered from STOP_R */
N    CCR_STOP_MODE     = 4     /* mission state entered from STOP */
N} ccr_modes_e;
N
N/* Wakeup attributes */
Ntypedef enum tag_wakeup_attribute_e
N{
N    CCR_LOW_LEVEL  = 0,    /* low level wakeup */
N    CCR_HIGH_LEVEL = 1,    /* high level wakeup */
N    CCR_FALL_EDGE  = 2,    /* falling edge wakeup */
N    CCR_RISE_EDGE  = 3     /* rising edge wakeup */
N} ccr_wakeup_attribute_e;
N
N/* Wakeup sources */
Ntypedef enum tag_wakeup_source_e
N{
N    CCR_WAKEUP_SOURCE_0     =  0,    /* wakeup source 0 */
N    CCR_WAKEUP_SOURCE_1     =  1,    /* wakeup source 1 */
N    CCR_WAKEUP_SOURCE_2     =  2,    /* wakeup source 2 */
N    CCR_WAKEUP_SOURCE_3     =  3,    /* wakeup source 3 */
N    CCR_WAKEUP_SOURCE_4     =  4,    /* wakeup source 4 */
N    CCR_WAKEUP_SOURCE_5     =  5,    /* wakeup source 5 */
N    CCR_WAKEUP_SOURCE_6     =  6,    /* wakeup source 6 */
N    CCR_WAKEUP_SOURCE_7     =  7,    /* wakeup source 7 */
N    CCR_WAKEUP_SOURCE_NMI   =  8,    /* wakeup source NMI */
N    CCR_WAKEUP_SOURCE_ALARM =  9,    /* wakeup source ALARM */
N    CCR_WAKEUP_SOURCE_RTC   = 10     /* wakeup source RTC */
N} ccr_wakeup_source_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* SSCG configuration structure */
Ntypedef struct tag_ccr_sscg_congig_st
N{
N    ccr_modulation_direction  eModulationDirection;
N    uint8_t                   u8ModulationCycleLengthFractionalN;
N    uint16_t                  u16ModulationDegree;
N} ccr_sscg_congig_st;
N
N/* SRAM bit error inspection configuration */
Ntypedef struct tag_ccr_sram_bit_error_insp_config_st
N{
N    uint8_t u8PosFirstError;     /* Position of first bit error to be injected in SRAM */
N    uint8_t u8PosSecondError;    /* Position of second bit error to be injected in SRAM */
N    uint8_t u8ByteSelect;        /* Byte select for bit error injection in SRAM */
N} ccr_sram_bit_error_insp_config_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vCCR_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IOPDHRevision  - pointer to PDH IO header revision string
N *                pau8IOPDHTag       - pointer to PDH IO header tag string
N *                pau8IOPDSRevision  - pointer to PDS IO header revision string
N *                pau8IOPDSTag       - pointer to PDS IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCCR_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IOPDHRevision, uint8_t** pau8IOPDHTag,
N                     uint8_t** pau8IOPDSRevision, uint8_t** pau8IOPDSTag);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eEn        CCR_Enable if clock should be enabled
N *                           CCR_Disable if clock should be disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetEnabledModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                peEn       status of module clock
N *                           CCR_Enable clock is enabled
N *                           CCR_Disable clock is disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetEnabledModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockFreq
N *
N * Purpose:       Configures clock frequency
N *                Clock frequency can be changed every time because no glitch
N *                should occur during switching. To be on the save side every
N *                action of the module should be finished.
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eFreq      Target frequency
N *                eModulated modulation type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockFreq(ccr_cntrl_e eCntrl, ccr_clk_freq_e eFreq, ccr_modulated_clk_e eModulated);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SelectClockType
N *
N * Purpose:       Select clock type
N *
N * Inputs:        eCntrl        Controller
N *                eClockType    Clock type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SelectClockType(ccr_cntrl_e eCntrl, ccr_clock_type_e eClockType);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPllClockStabilizationCompareValue
N *
N * Purpose:       Set Pll clock stabilization compare value
N *
N * Inputs:        u8Value    Stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPllClockStabilizationCompareValue(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      eCCR_ReadClockStability
N *
N * Purpose:       Read stability value of different oscillators and PLLs
N *
N * Inputs:        eClk        Clock or PLL
N *
N * Outputs:       none
N *
N * Return Values: clock stability value
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_clock_stability_e eCCR_ReadClockStability(ccr_clocks_e eClk);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GenerateReset
N *
N * Purpose:       Generate different types of reset
N *
N * Inputs:        eResetType     Reset type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GenerateReset(ccr_reset_type_e eResetType);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetDeviceMode
N *
N * Purpose:       Set device mode
N *
N * Inputs:        eMode     Device mode
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Transitions to STB_OSC10, SLP_OSC10, SLP_RC10, STOP_R
N *                and STOP are only possible in rom2ram-project without
N *                any probe connected.
N *
N ***************************************************************************/
Nint32_t i32CCR_SetDeviceMode(ccr_device_mode_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableInterrupt
N *
N * Purpose:       Enable interrupts
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableInterrupt(ccr_interrupts_e eInterrupt, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetInterruptStatusAll
N *
N * Purpose:       Read status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetInterruptStatus
N *
N * Purpose:       Read interrupt status
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       peIntOccurred  Status of interrupt
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetInterruptStatusSingle(ccr_interrupts_e eInterrupt, ccr_int_occurred_e * peIntOccurred);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearInterruptsAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearInterruptsAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearInterruptSingle(ccr_interrupts_e eInterrupt);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetCurrentDeviceMode
N *
N * Purpose:       Read current device mode
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Device mode
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_mode_e eCCR_GetCurrentDeviceMode(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSSCG
N *
N * Purpose:       Configure the SSCG and start it with new settings
N *
N * Inputs:        pstSSCGConfig    Pointer to SSCG-configuration
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSSCG(ccr_sscg_congig_st * pstSSCGConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetWDTAlarmType
N *
N * Purpose:       Configure WDT alarm type
N *
N * Inputs:        eAlarmType    WDT alarm type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetWDTAlarmType(ccr_wdt_alarm_type_e eAlarmType);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableBitErrorInjectionInRAM
N *
N * Purpose:       Enable or disable error injection in Back-up RAM
N *
N * Inputs:        eEn    Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableBitErrorInjectionInRAM(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPositionOfBitErrorInjectionInRAM
N *
N * Purpose:       Set bit positions to be injected in Back-up RAM
N *
N * Inputs:        u8FirstPosition     first position
N *                u8SecondPosition    second position
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPositionOfBitErrorInjectionInRAM(uint8_t u8FirstPosition, uint8_t u8SecondPosition);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetCANMode
N *
N * Purpose:       Set CAN mode
N *
N * Inputs:        eCANMode     CAN mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetCANMode(ccr_can_mode_e eCANMode);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetECCMode
N *
N * Purpose:       Set ECC mode
N *
N * Inputs:        eECCMode     ECC mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetECCMode(ccr_ecc_mode_e eECCMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetTBIODirection
N *
N * Purpose:       Set TBIO port direction
N *
N * Inputs:        eTBIOChannel     TBIO channel
N *                eDirection       Pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetTBIODirection(ccr_tbio_channel_e eTBIOChannel, ccr_tbio_direction_e eDirection);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer4
N *
N * Purpose:       Set signal for Complex Timer 4
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer4(ccr_tbin_source_ctimer4_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer5
N *
N * Purpose:       Set signal for Complex Timer 5
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer5(ccr_tbin_source_ctimer5_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC0Interface
N *
N * Purpose:       Enable/disable GDC0 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC0Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC1Interface
N *
N * Purpose:       Enable/disable GDC1 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC1Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDCPanelInterface
N *
N * Purpose:       Enable/disable GDC panel interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDCPanelInterface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetGDCSynchronisation
N *
N * Purpose:       Set synchronisation type between GDC0 and GDC1
N *
N * Inputs:        eGDCSync     GDC synchronisation type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetGDCSynchronisation(ccr_gdc_sync_e eGDCSync);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMask
N *
N * Purpose:       Set NOR-interface address mask
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMask(ccr_nor_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMatch
N *
N * Purpose:       Set NOR-interface address match
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMatch(ccr_nor_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMask
N *
N * Purpose:       Set NAND-interface address mask
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMask(ccr_nand_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMatch
N *
N * Purpose:       Set NAND-interface address match
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMatch(ccr_nand_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNORChipSelect
N *
N * Purpose:       Set NAND-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:   value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNORChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNANDChipSelect
N *
N * Purpose:       Set NOR-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:  value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNANDChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableSRAMBitErrorInspection
N *
N * Purpose:       Enable or disable SRAM bit error inspection
N *
N * Inputs:        eChannel    SRAM-channel
N *                eEn         Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableSRAMBitErrorInspection(ccr_sram_channel_e eChannel, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetSRAMBitErrorInspectionConfiguration
N *
N * Purpose:       Set SRAM bit error inspection configuration
N *
N * Inputs:        eChannel    SRAM-channel
N *                pstConfig   Pointer to configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetSRAMBitErrorInspectionConfiguration(ccr_sram_channel_e eChannel, ccr_sram_bit_error_insp_config_st * pstConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWDTAlarm
N *
N * Purpose:       Clear WDT alarm bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWDTAlarm(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearErrorIrgFlagOfBackupRAM
N *
N * Purpose:       Clear error IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearErrorIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWarningIrgFlagOfBackupRAM
N *
N * Purpose:       Clear warning IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWarningIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearErrorIrgFlagOfSRAM
N *
N * Purpose:       Clear error IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearErrorIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWarningIrgFlagOfSRAM
N *
N * Purpose:       Clear warning IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWarningIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_IssueSynchronPulseToCTimer
N *
N * Purpose:       Issue synchronous pulse to complex timer 0 to 5 or  to 9
N *
N * Inputs:        eComplexTimer    Complex timers
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_IssueSynchronPulseToCTimer(ccr_complex_timer_e eComplexTimer);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWDTAlarmStatusBit
N *
N * Purpose:       Get WDT alarm status bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWDTAlarmStatusBit(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQErrorFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for error condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQErrorFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQWarningFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for warning condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQWarningFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetPosOfBitErrorInBackupRAM
N *
N * Purpose:       Get position of bit error for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetPosOfBitErrorInBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetLastCheckResultForBackupRAM
N *
N * Purpose:       Get last check result for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetLastCheckResultForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDebuggerCR4PowerDownRequestStatus
N *
N * Purpose:       Get status of debugger CR4 power down request
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDebuggerCR4PowerDownRequestStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgErrorCondition
N *
N * Purpose:       Get IRQ flag error condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgErrorCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgWarningCondition
N *
N * Purpose:       Get IRQ flag warning condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgWarningCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMPositionOfBitError
N *
N * Purpose:       Get position of bit error for SRAM
N *
N * Inputs:        eChannel      SRAM-channel
N *                pu8Position   Pointer to position
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMPositionOfBitError(ccr_sram_channel_e eChannel, uint8_t * pu8Position);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMLastCheckResult
N *
N * Purpose:       Get last check result for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMLastCheckResult(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceVersion
N *
N * Purpose:       Read device version
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: device version
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_version_e eCCR_GetDeviceVersion(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSIPFlashSize
N *
N * Purpose:       Read size of SIP flash
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: SIP flash size
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_SIPflash_size_e eCCR_GetSIPFlashSize(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GeCR4DebugStatus
N *
N * Purpose:       Provides information about the availability of the debug port.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: CCR_DISABLE - Debug Port DISABLED
N *                CCR_ENABLE  - Debug Port ENABLED
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GeCR4DebugStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableR4DebugPort
N *
N * Purpose:       Enable or disable debug port of processors
N *
N * Inputs:        eProcessorType     Processor type
N *                eEn                Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableR4DebugPort(ccr_processor_device_e eProcessorType, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegCurrentTrim
N *
N * Purpose:       Set voltage regulator current trim value
N *
N * Inputs:        eValue     voltage regulator current trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegCurrentTrim(ccr_vreg_current_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegRefVoltageTrim
N *
N * Purpose:       Set voltage regulator reference voltage trim value
N *
N * Inputs:        eValue     voltage regulator reference voltage trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegRefVoltageTrim(ccr_vreg_ref_voltage_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegTemperatureTrim
N *
N * Purpose:       Set voltage regulator temperature trim value
N *
N * Inputs:        eValue     voltage regulator temperature trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegTemperatureTrim(ccr_vreg_temperature_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetOscAdjustment
N *
N * Purpose:       Set oscillator adjustment value
N *
N * Inputs:        eValue     oscillator adjustment value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetOscAdjustment(ccr_osc_adjustment_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetThresholdPowerGoodSensing
N *
N * Purpose:       Set threshold for power good sensing
N *
N * Inputs:        eValue     threshold for power good sensing
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetThresholdPowerGoodSensing(ccr_threshold_power_good_sensing_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetAlarmComparatorThreshold
N *
N * Purpose:       Set alarm comparator threshold for Alarm 0 or 1
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                u8Value     alarm comparator threshold setting (0..31)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetAlarmComparatorThreshold(ccr_alarm_no_e eAlarmNo, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableAlarm
N *
N * Purpose:       Enables/Disables CCR alarm comparator
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                eEn      :  enable/disbale alarm
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableAlarm(ccr_alarm_no_e eAlarmNo, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableClockSupervisor
N *
N * Purpose:       Enable/disable clock supervisor
N *
N * Inputs:        eClocks    clock type
N *                eEN        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableClockSupervisor(ccr_clocks_e eClocks, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC10MClockSupervisorOutputResetFunction
N *
N * Purpose:       Enable/disable OSC10M clock supervisor output reset function
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC10MClockSupervisorOutputResetFunction(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC32KHz
N *
N * Purpose:       Enable/disable OSC32KHz
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC32KHz(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSmcIOLevel
N *
N * Purpose:       Set SMC IO level
N *
N * Inputs:        eLevel     SMC IO level
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSmcIOLevel(ccr_smc_io_level_e eLevel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Set Clock Stabilization Compare Value
N *
N * Inputs:        eClocks    clock type
N *                u8Value    clock stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockStabilizationCompareValue(ccr_clocks_e eClocks, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      u16CCR_getBootOptions
N *
N * Purpose:       Read boot options
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Boot options
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetBootOptions(void);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetSystemIntStatusAll
N *
N * Purpose:       Read interrupt status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetSystemIntStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSystemIntStatusSingle
N *
N * Purpose:       Read interrupt status of a singe interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Clear interrupt status of a single interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableECCInterrupt
N *
N * Purpose:       Enable ECC interrupt
N *
N * Inputs:        eEccType      ECC type
N *                eEccIntType   ECC inte3rrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableECCInterrupt(ccr_ecc_e eEccType, ccr_ecc_interrupt_type_e eEccIntType);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetDeviceModesAll
N *
N * Purpose:       Read all device modes
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetDeviceModesAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceModesSingle
N *
N * Purpose:       read single device mode
N *
N * Inputs:        eMode      Device mode
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDeviceModesSingle(ccr_modes_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableWakeupSource
N *
N * Purpose:       Enable or disable wakeup source
N *
N * Inputs:        eSource    wakeup source
N *                eEn        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableWakeupSource(ccr_wakeup_source_e eSource, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetWakeupAttribute
N *
N * Purpose:       Set wakeup attribute
N *
N * Inputs:        eSource       wakeup source
N *                eAttribute    wakeup attribute
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetWakeupAttribute(ccr_wakeup_source_e eSource, ccr_wakeup_attribute_e eAttribute);
N
N/****************************************************************************
N *
N * Function:      u16CCR_GetWakeupSourceInterruptAll
N *
N * Purpose:       Read all wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: wakeup source interrupt status vector
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetWakeupSourceInterruptAll(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWakeupSourceInterruptSingle
N *
N * Purpose:       Read single wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWakeupSourceInterruptSingle(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWakeupInterruptSource
N *
N * Purpose:       Clear wakeup interrupt source
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWakeupInterruptSource(ccr_wakeup_source_e eSource);
N
N/****************************************************************************/
N
N
N#endif /* CCR_LLDD_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 27 "..\..\..\..\hldd\inc\qspi.h" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define QSPI_WIP      0x1
N#define QSPI_WE       0x80
N#define SIZE_64KB     0x10000
N#define SIZE_256B     0x100
N#define MASK_64KB     0xFFFF0000
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* qspi devices */
Ntypedef enum qspi_dev_type_e
N{
N    DEV_MX25L3235E            =  1,   /* QSPI Device Type Micronix  - MX25L3235E */
N    DEV_MX25L6435E            =  2,   /* QSPI Device Type Micronix  - MX25L6435E */
N    DEV_MX25L12835F           =  3,   /* QSPI Device Type Micronix  - MX25L12835F */
N    DEV_MX66L51239F_3BYTE_ADR =  4,   /* QSPI Device Type Micronix  - MX66L51239F 3 Byte Addressing */
N    DEV_MX66L51239F_4BYTE_ADR =  5,   /* QSPI Device Type Micronix  - MX66L51239F 4 Byte Addressing */
N    DEV_N25Q064A              =  6,   /* QSPI Device Type Micron    - DEV_N25Q064A new */
N    DEV_N25Q512A_3BYTE_ADR    =  7,   /* QSPI Device Type Micron    - DEV_N25Q512A 3 Byte Addressing */
N    DEV_N25Q512A_4BYTE_ADR    =  8,   /* QSPI Device Type Micron    - DEV_N25Q512A 4 Byte Addressing */
N    DEV_S25FL032P             =  9,   /* QSPI Device Type Spansion  - S25FL032P */
N    DEV_S25FL064P             = 10,   /* QSPI Device Type Spansion  - S25FL064P */
N    DEV_S25FL127P             = 11,   /* QSPI Device Type Spansion  - S25FL127P */
N    DEV_S25FL116KIF01         = 12,   /* QSPI Device Type Spansion  - DEV_S25FL116KIF01 */
N    DEV_S25FL132KIF01         = 13,   /* QSPI Device Type Spansion  - DEV_S25FL132KIF01 */
N    DEV_S25FL164KIF01         = 14,   /* QSPI Device Type Spansion  - DEV_S25FL164KIF01 */
N    DEV_W25Q32B               = 15,   /* QSPI Device Type Winbond   - W25Q32B */
N    DEV_W25Q64C               = 16,   /* QSPI Device Type Winbond   - W25Q64C */
N    DEV_W25Q256F_3BYTE_ADR    = 17,   /* QSPI Device Type Winbond   - W25Q256F 3 Byte Addressing */
N    DEV_W25Q256F_4BYTE_ADR    = 18,   /* QSPI Device Type Winbond   - W25Q256F 4 Byte Addressing */
N    DEV_INTERNAL_32MBIT       = 19,   /* Internal QSPI (MX25L3235E) - 32MBit */
N    DEV_INTERNAL_64MBIT       = 20,   /* Internal QSPI (MX25L6435E) - 64MBit */
N    DEV_TYPE_INVALID          = 21    /* Device Invalid */
N} qspi_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vAssignQSPISettings
N *
N * Purpose:       assign settings dependant on
N *
N * Inputs:        u32QSPI_DeviceType   QSPI device selection (0 uses config in qspi_settings.h)
N *                u16BaseAddress       physical base address
N *
N * Outputs:       peClocFreq           pointer to clock frequence
N *                peModulationType     pointer to clock modulation type
N *                pstDirectConfig      pointer to direct interface configuration
N *                pstProgConfig        pointer to program interface configuration
N *
N * Return Values: C_SUCCESS/C_FAILED (parameter error)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32AssignQSPISettings(qspi_dev_type_e eQSPI_DeviceType, uint16_t u16BaseAddress,
N                              ccr_clk_freq_e * peClocFreq, ccr_modulated_clk_e * peModulationType,
N                              qspic_directconfig_st * pstDirectConfig, qspic_prgconfig_st * pstProgConfig);
N
N/****************************************************************************
N *
N * Function:      i32ClearFlash
N *
N * Purpose:       clears flash sector by sector
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32SectorCount    number of sectors to be erased
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32ClearFlash(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32SectorCount);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWOE
N *
N * Purpose:       Perform program of Flash without erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWOE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWE
N *
N * Purpose:       Perform program of Flash with erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N
N#endif /* _QSPI_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 29 "..\..\inc\config.h" 2
N
N/*****************************************************************************************
N* select Drehbuch
N* 0: 600-450, 1: 440, 2: 325, 3: 225
N*****************************************************************************************/
N#define DREHBUCH    (2)
N/* select output device
N* 0: monitor
N* 1: displays
N*****************************************************************************************/
N#define OUTPUT_DEVICE    0
N
N/*****************************************************************************************
N* QSPI
N* 1: S25FL032P
N* 2: S25FL064P
N*****************************************************************************************/
N#define QSPI_DEVICE      (DEV_S25FL127P)
N
N/*****************************************************************************************
N* Parallel NOR
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NOR_DEVICE      1
N
N/*****************************************************************************************
N* NAND
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NAND_DEVICE      1
N
N/*****************************************************************************************
N* RAM
N*  1: MT46H8M32LFB5-6
N*  2: MT46H16M32LFB5-6
N*  3: IS42S32800D-6
N*****************************************************************************************/
N#define RAM_DEVICE    2
N
N/*****************************************************************************************
N*                 D I S P L A Y   -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* enable GDC0 and / or GDC1 */
N#define GDCx0		ON
N#define GDCx1		OFF
N
N/* TO DO: Set Resolution (QVGA_RES / HNTSC_RES / HVGA_RES / VGA_RES / WVGA_RES / WVGA_1_RES /
N                          SVGA_RES / DVGA_RES / DVGA_1_RES / DVGA_1_RES_60) */
N#define DISPLAY_RESOLUTION_0 CLAA121WB//WVGA_RES_50 //DAL 20151221
N#define DISPLAY_RESOLUTION_1 QVGA_RES_60
N
N/****************************************************************************************
N*                        G D C 0  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC0 */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A 	ON
N#define GDC0_LAYER_B 	OFF
N#define GDC0_LAYER_C 	OFF
N#define GDC0_LAYER_D 	OFF
N#define GDC0_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF (only possible for layer A) / FMT_RGB16 / FMT_RGBA32 */
N#define GDC0_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_D_DOUBLEFUFFERING		OFF
N#define GDC0_LAYER_E_DOUBLEFUFFERING		OFF
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC0_LAYERA_WIDTH     1280
N#define GDC0_LAYERA_HEIGHT    420
N#define GDC0_LAYERA_STARTX      0
N#define GDC0_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC0_LAYERB_WIDTH     400
N#define GDC0_LAYERB_HEIGHT    400
N#define GDC0_LAYERB_STARTX    550
N#define GDC0_LAYERB_STARTY    20
N
N/* Layer C */
N#define GDC0_LAYERC_WIDTH     800
N#define GDC0_LAYERC_HEIGHT    480
N#define GDC0_LAYERC_STARTX      0
N#define GDC0_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC0_LAYERD_WIDTH     800
N#define GDC0_LAYERD_HEIGHT    480
N#define GDC0_LAYERD_STARTX      0
N#define GDC0_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC0_LAYERE_WIDTH     800
N#define GDC0_LAYERE_HEIGHT    480
N#define GDC0_LAYERE_STARTX      0
N#define GDC0_LAYERE_STARTY      0
N
N
N/****************************************************************************************
N*                        G D C 1  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC1 */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A 	OFF
N#define GDC1_LAYER_B 	OFF
N#define GDC1_LAYER_C 	OFF
N#define GDC1_LAYER_D 	OFF
N#define GDC1_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF / FMT_RGB16 / FMT_RGBA32 */
N#define GDC1_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_D_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_E_DOUBLEFUFFERING		ON
N
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC1_LAYERA_WIDTH     320
N#define GDC1_LAYERA_HEIGHT    240
N#define GDC1_LAYERA_STARTX      0
N#define GDC1_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC1_LAYERB_WIDTH     640
N#define GDC1_LAYERB_HEIGHT    480
N#define GDC1_LAYERB_STARTX      0
N#define GDC1_LAYERB_STARTY      0
N
N/* Layer C */
N#define GDC1_LAYERC_WIDTH	    640
N#define GDC1_LAYERC_HEIGHT    480
N#define GDC1_LAYERC_STARTX      0
N#define GDC1_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC1_LAYERD_WIDTH     640
N#define GDC1_LAYERD_HEIGHT    480
N#define GDC1_LAYERD_STARTX      0
N#define GDC1_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC1_LAYERE_WIDTH     640
N#define GDC1_LAYERE_HEIGHT    480
N#define GDC1_LAYERE_STARTX      0
N#define GDC1_LAYERE_STARTY      0
N
N#endif /* CONFIG_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: config.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 24 "..\..\..\..\hldd\inc\dmc_cfg.h" 2
N#include "captypes.h"
N#include "dmc.h"
L 1 "..\..\..\..\lldd\inc\dmc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef DMC_H
N#define DMC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_DMC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1 : disable identifier too long */  
N#endif 
N/*********************************************/
N
N#define SDRAM_ADDRESS_BASE (0x40000000)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*!< enable/disable */
Ntypedef enum tag_dmc_enable_e
N{
N    DMC_DISABLE = 0U,   /*!< Disable */
N    DMC_ENABLE  = 1U    /*!< Enable */
N} dmc_enable_e;
N
N/*!< Low/High */
Ntypedef enum tag_dmc_high_e
N{
N    DMC_LOW     = 0U,   /*!< Low */
N    DMC_HIGH    = 1U    /*!< High */
N} dmc_high_e;
N
N/*!< Status definitions */
Ntypedef enum tag_dmc_status_e
N{
N    DMC_STATUS_CONFIG    = 0U,   /*!< STATUS_CONFIG */
N    DMC_STATUS_READY     = 1U,   /*!< STATUS_READY */
N    DMC_STATUS_PAUSED    = 2U,   /*!< STATUS_PAUSED */
N    DMC_STATUS_LOW_POWER = 3U    /*!< STATUS_LOW_POWER */
N} dmc_status_e;
N
N/*!< Commands */
Ntypedef enum tag_dmc_cmd_e
N{
N    DMC_CMD_GO           = 0U,   /*!< Command GO */
N    DMC_CMD_SLEEP        = 1U,   /*!< Command SLEEP */
N    DMC_CMD_WAKEUP       = 2U,   /*!< Command WAKEUP */
N    DMC_CMD_PAUSE        = 3U,   /*!< Command PAUSE */
N    DMC_CMD_CONFIGURE    = 4U,   /*!< Command CONFIGURE */
N    DMC_CMD_ACTIVE_PAUSE = 7U    /*!< Command ACTIVE_PAUSE */
N} dmc_cmd_e;
N
N/*!< Memory type */
Ntypedef enum tag_dmc_type_e
N{
N    DMC_TYPE_SDRAM       = 0U,   /*!< SDR SDRAM */
N    DMC_TYPE_LPDDR       = 3U,   /*!< LPDDR */
N    DMC_TYPE_LPDDR_SDRAM = 4U   /*!< Combined SDR-LPDDR SDRAM */
N} dmc_type_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_chips_e
N{
N    DMC_ONE_CHIP       = 0U,   /*!< 1 Chip  */
N    DMC_TWO_CHIPS      = 1U,   /*!< 2 Chips */
N    DMC_THREE_CHIPS    = 2U,   /*!< 3 Chips */
N    DMC_FOUR_CHIPS     = 3U    /*!< 4 Chips */
N} dmc_mem_chips_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_banks_e
N{
N    DMC_FOUR_BANKS     = 0U,   /*!< Four Banks */
N    DMC_TWO_BANKS      = 1U    /*!< Two Banks  */
N} dmc_mem_banks_e;
N
N/*!< Access Monitor resources */
Ntypedef enum tag_dmc_monitors_e
N{
N    DMC_ZERO_MONITOR   = 0U,   /*!< 0 Monitors */
N    DMC_ONE_MONITOR    = 1U,   /*!< 1 Monitor  */
N    DMC_TWO_MONITORS   = 2U,   /*!< 2 Monitors */
N    DMC_FOUR_MONITORS  = 3U    /*!< 4 Monitors */
N} dmc_monitors_e;
N
N/*!< DMC Device commands */
Ntypedef enum tag_dmc_direct_cmd_e
N{
N    DMC_PRECHARGEALL   = 0U,   /*!< PRECHARGEALL Command */
N    DMC_AUTO_REFRESH   = 1U,   /*!< AUTO REFRESH Command */
N    DMC_MODEREG        = 2U,   /*!< MODEREG/Extended MODEREG Command */
N    DMC_NOP            = 3U,   /*!< NOP Command */
N    DMC_DPD            = 4U    /*!< DPD Command */
N} dmc_direct_cmd_e;
N
N/*!< DMC Memory Configs */
Ntypedef enum tag_dmc_mem_config_e
N{
N    DMC_MEM_ZERO       = 0U,   /*!< Config value: Zero */
N    DMC_MEM_ONE        = 1U,   /*!< Config value: One */
N    DMC_MEM_TWO        = 2U,   /*!< Config value: Two */
N    DMC_MEM_THREE      = 3U,   /*!< Config value: Three */
N    DMC_MEM_FOUR       = 4U,   /*!< Config value: Four */
N    DMC_MEM_FIVE       = 5U   /*!< Config value: Five */
N} dmc_mem_config_e;
N
N/*!< Auto Precharge */
Ntypedef enum tag_dmc_auto_precharge_e
N{
N    DMC_ADDR_BIT_10    = 0U,   /*!< address bit 10 */
N    DMC_ADDR_BIT_8     = 1U   /*!< address bit 8  */
N} dmc_auto_precharge_e;
N
N/*!< Memory Protocol */
Ntypedef enum tag_dmc_mem_protocol_e
N{
N    DMC_SDR_PROTOCOL   = 0U,   /*!< SDR Protocol */
N    DMC_LPDDR_PROTOCOL = 3U   /*!< LPDDR Protocol */
N} dmc_mem_protocol_e;
N
N/*!< Read Delay Cycles */
Ntypedef enum tag_dmc_read_delay_e
N{
N    DMC_DELAY_ONE_CYCLE   = 1U,   /*!< One Idle Cycle */
N    DMC_DELAY_TWO_CYCLE   = 2U   /*!< Two Idle Cycle */
N} dmc_read_delay_e;
N
N/*!< AXI Address format */
Ntypedef enum tag_dmc_addr_format_e
N{
N    DMC_ADDR_RBC   = 0U,   /*!< One Idle Cycle */
N    DMC_ADDR_BRC   = 1U   /*!< Two Idle Cycle */
N} dmc_addr_format_e;
N
N/*!< Clock rate */
Ntypedef enum tag_dmc_clock_rate_e
N{
N    DMC_CLOCK_RATE_166MHz = 0U,   /*!< 166 MHz */
N    DMC_CLOCK_RATE_133MHz = 1U    /*!< 133 MHz */
N} dmc_clock_rate_e;
N
N/*!< Memory density */
Ntypedef enum tag_dmc_density_e
N{
N    DMC_DENSITY_128Mbit = 0U,   /*!< 128 Mbit */
N    DMC_DENSITY_256Mbit = 1U,   /*!< 256 Mbit */
N    DMC_DENSITY_1Gbit   = 2U,   /*!< 1 Gbit */
N    DMC_DENSITY_2Gbit   = 3U    /*!< 2 Gbit */
N} dmc_density_e;
N
N/*!< Bus width */
Ntypedef enum tag_dmc_width_e
N{
N    DMC_BUSWIDTH_16BIT = 0U,   /*!< 16 Bit */
N    DMC_BUSWIDTH_32BIT = 1U    /*!< 32 Bit */
N} dmc_width_e;
N
N/*!< SDRAM/LPDDR state */
Ntypedef enum tag_dmc_mem_device_state_e
N{
N    DMC_DEV_STATE_POWER_UP        = 0U,   /*!< State POWER_UP */
N    DMC_DEV_STATE_SELF_REFRESH    = 1U,   /*!< State SELF_REFRESH */
N    DMC_DEV_STATE_POWER_DOWN      = 2U,   /*!< State POWER_DOWN */
N    DMC_DEV_STATE_DEEP_POWER_DOWN = 3U    /*!< State DEEP_POWER_DOWN */
N} dmc_mem_device_state_e;
N
N/*!< System Controller Operating mode */
Ntypedef enum tag_sys_ctrl_op_mode_e
N{
N    SYS_STATE_FULL_MODE           = 0U,   /*!< State POWER_UP */
N    SYS_STATE_STOP_MODE           = 1U,   /*!< State POWER_DOWN */
N    SYS_STATE_SLEEP_MODE          = 2U,   /*!< State SLEEP */
N    SYS_STATE_STANDBY_MODE        = 3U   /*!< State STAND BY */
N} sys_ctrl_op_mode_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/*!< DMC status structure */
Ntypedef struct tag_dmc_memc_status_st
N{
N    dmc_status_e    eMemcStatus;        /*!< Status of DMC */
N    dmc_width_e     eMemoryWidth;       /*!< Memory data bus width */
N    dmc_type_e      eMemoryType;        /*!< Type of SDRAM that the DMC Supports */
N    dmc_mem_chips_e eMemChips;          /*!< Number of chip selects that the DMC supports */
N    dmc_mem_banks_e eMemBanks;          /*!< Number of banks that the DMC supports */
N    dmc_monitors_e  eMonitors;          /*!< Number of exclusive access monitor resources */
N} dmc_memc_status_st;
N
N/*!< register description for register user_config */
Ntypedef struct tag_dmc_user_config_bit_view_st
N{
N    uint32_t   gear_ratio0       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 5;   /*!< 11..15 bit(s) */
N    uint32_t   gear_ratio1       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config_bit_view_st;
N
N/*!< register description for register user_config1 */
Ntypedef struct tag_dmc_user_config1_bit_view_st
N{
N    uint32_t   gear_ratio2       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 1;   /*!< 11  bit(s)    */
N    uint32_t   enable            : 1;   /*!< 12  bit(s)    */
N    uint32_t   clock_mode_change : 1;   /*!< 13  bit(s)    */
N    uint32_t   use_min_delay     : 1;   /*!< 14  bit(s)    */
N    uint32_t                     : 1;   /*!< 15 bit(s)     */
N    uint32_t   gear_ratio3       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config1_bit_view_st;
N
N/* Memory device stucture */
Ntypedef struct tag_mem_device_st
N{
N    dmc_type_e        eType;  /* MEMORY_TYPE */
N    dmc_width_e       eWidth;   /* MEMORY_WIDTH */
N    dmc_clock_rate_e  eClock_rate;  /* MEMORY_CLOCK_RATE */
N    uint32_t          u32GearRatio_0;  /* GEAR_RATIO_0  */
N    uint32_t          u32GearRatio_1;  /* GEAR_RATIO_1  */
N    uint32_t          u32GearRatio_2;  /* GEAR_RATIO_2  */
N    uint32_t          u32GearRatio_3;  /* GEAR_RATIO_3  */
N    uint32_t          u32T_CAS;  /* MEMORY_T_CAS */
N    uint32_t          u32T_RAS;  /* MEMORY_T_RAS */
N    uint32_t          u32T_MRD;  /* MEMORY_T_MRD */
N    uint32_t          u32T_RC;   /* MEMORY_T_RC  */
N    uint32_t          u32T_RCD;  /* MEMORY_T_RCD */
N    uint32_t          u32T_RFC;  /* MEMORY_T_RFC */
N    uint32_t          u32T_RP;   /* MEMORY_T_RP  */
N    uint32_t          u32T_RRD;  /* MEMORY_T_RRD */
N    uint32_t          u32T_WR;   /* MEMORY_T_WR  */
N    uint32_t          u32T_WTR;  /* MEMORY_T_WTR */
N    uint32_t          u32T_XP;   /* MEMORY_T_XP  */
N    uint32_t          u32T_XSR;  /* MEMORY_T_XSR */
N    uint32_t          u32T_ESR;  /* MEMORY_T_ESR */
N} mem_device_st;
N
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vDMC_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vDMC_Init
N*
N* Initialisation of memory controller for LPDDR/SDRAM
N*
N* @note No Limitations
N*
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_Init(mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function vDMC_MemoryDeviceInit
N*
N* Initializes the memory device
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_MemoryDeviceInit(void);
N
N
N/**
N* @brief Implementation of function i32DMC_EnterDeviceMode
N*
N* Changes the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                               mem_device_st *pstDeviceParams)
N;
N
N
N/**
N* @brief Implementation of function i32DMC_ExitDeviceMode
N*
N* Exit from the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                              mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function eDMC_GetStatus
N*
N* Reads the status bits of the Memory Controller Status Register to 
N* determine the current state of the memory controller
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return dma status
N*/
Ndmc_status_e eDMC_GetStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_GetFixedConfig
N*
N* Reads the configuration and current state of the DMC
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pstMemcStatus - Pointer to DMC configuration and status
N*
N* @return void
N*/
Nvoid vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCntrlCommand
N*
N* Sets the operating state of the DMC
N*
N* @note Setting is not accessible in the Reset or Power-On Reset
N*
N* @param[in] eCmd - DMC Operating state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetDirectCommand
N*
N* Writes data to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u32Value    - Memory device command information
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDirectCommand(uint32_t u32Value);
N
N/**
N* @brief Implementation of function vDMC_SetExternalMemCommand
N*
N* Writes command to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] eDirCmd    - Memory device command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipNumber
N*
N* Sets the external memory chip select
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8ChipNo   - Chip Select
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipNumber(uint8_t u8ChipNo);
N
N
N/**
N* @brief Implementation of function vDMC_SetBankAddress
N*
N* Sets external memory bank address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8BankAddr - External memory bank address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetBankAddress(uint8_t u8BankAddr);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemoryAddress
N*
N* Sets external memory address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u16Address - Mapped external memory address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemoryAddress(uint16_t u16Address);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig
N*
N* Sets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config  - Memory configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig
N*
N* Gets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] void
N*
N* @param[in,out] void
N*
N* @return memory configuration
N*/
Nuint32_t u32DMC_GetMemConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigActiveChips
N*
N* Sets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eActChips  - active chip
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigActiveChips
N*
N* Gets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of active chips
N*/
Ndmc_mem_chips_e eDMC_GetMemConfigActiveChips(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigQoS
N*
N* Sets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eQoS  - qos value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigQoS
N*
N* Gets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return qos value
N*/
Ndmc_mem_config_e eDMC_GetMemConfigQoS(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigBurst
N*
N* Sets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eBurst  - number of data accesses
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigBurst
N*
N* Gets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of data accesses
N*/
Ndmc_mem_config_e eDMC_GetMemConfigBurst(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigRowAddr
N*
N* Sets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eRowAddr  - Row address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigRowAddr
N*
N* Gets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return row address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigRowAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigColAddr
N*
N* Sets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigColAddr
N*
N* Gets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Column address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigColAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigStopClk
N*
N* Enable/Disable the memory clock to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigStopClk
N*
N* Gets memory clock state whether its enabled/disabled to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock state
N*/
Ndmc_enable_e eDMC_GetMemConfigStopClk(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPowerDown
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePoweDown  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPowerDown
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Ndmc_enable_e eDMC_GetMemConfigAutoPowerDown(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPreCharge
N*
N* Sets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePrecharge  - auto-precharge bit position
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPreCharge
N*
N* Gets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the position of the auto-precharge bit
N*/
Ndmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigPwrDownPrd
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8PwrDownPrd  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemConfigPwrDownPrd
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Nuint8_t u8DMC_GetMemConfigPwrDownPrd(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetRefreshPeriod
N*
N* Sets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16RefPrd  - Refresh period
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetRefreshPeriod(uint16_t u16RefPrd);
N
N
N/**
N* @brief Implementation of function u16DMC_GetRefreshPeriod
N*
N* Gets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the refresh period
N*/
Nuint16_t u16DMC_GetRefreshPeriod(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASLatency
N*
N* Sets the CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASLatency(uint8_t u8CASLatency);
N
N
N/**
N* @brief Implementation of function u8DMC_GetCASLatency
N*
N* Gets CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency time
N*/
Nuint8_t u8DMC_GetCASLatency(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASHalfCycle
N*
N* Sets the CAS latency time as 2.5
N*
N* @note Only accessible when DMC is in Config/Low power state,
N* use only when DMC accesses DDR devices and cas_latency field=2.
N*
N* @param[in] eHalfCycle  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle);
N
N
N/**
N* @brief Implementation of function eDMC_GetCASHalfCycle
N*
N* Checks whether CAS latency half cycle is enabled/disabled or not
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency half cycle enable/disable status
N*/
Ndmc_enable_e eDMC_GetCASHalfCycle(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetDQSTiming
N*
N* Sets the DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDQSTiming(uint8_t u8DQSTiming);
N
N
N/**
N* @brief Implementation of function u8DMC_GetDQSTiming
N*
N* Gets DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the DQS delay
N*/
Nuint8_t u8DMC_GetDQSTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetModeRegTiming
N*
N* Sets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetModeRegTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetModeRegTiming
N*
N* Gets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the MODEREG to command delay
N*/
Nuint8_t u8DMC_GetModeRegTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToPrechargeTiming
N*
N* Sets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToPrechargeTiming
N*
N* Gets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetActiveToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToActiveTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank x delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToActiveTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToActiveTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank x delay
N*/
Nuint8_t u8DMC_GetActiveToActiveTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToRWTiming
N*
N* Sets delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - delay between an ACTIVE command 
N*                       and another memory command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToRWTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToRWTiming
N*
N* Gets the delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the delay between an ACTIVE command and another 
N*         memory command
N*/
Nuint8_t u8DMC_GetActiveToRWTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRCD
N*
N* Sets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRCD
N*
N* Gets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_GetScheduleRCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RCD
N*
N* Sets t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RCD
N*
N* Gets the t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_Get_T_RCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetAutoRefreshTiming
N*
N* Sets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetAutoRefreshTiming(uint16_t u16Timing);
N
N
N/**
N* @brief Implementation of function u16DMC_GetAutoRefreshTiming
N*
N* Gets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint16_t u16DMC_GetAutoRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRFC
N*
N* Sets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_GetScheduleRFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RFC
N*
N* Sets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_Get_T_RFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetPrechargeTiming
N*
N* Sets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetPrechargeTiming
N*
N* Gets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRP
N*
N* Sets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRP
N*
N* Gets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetScheduleRP(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RP
N*
N* Sets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - t_RP
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RP
N*
N* Gets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the t_RP delay
N*/
Nuint8_t u8DMC_Get_T_RP(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveDiffBankTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank y delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveDiffBankTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveDiffBankTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank y delay
N*/
Nuint8_t u8DMC_GetActiveDiffBankTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToPrechargeTiming
N*
N* Sets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToPrechargeTiming
N*
N* Gets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToReadTiming
N*
N* Sets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToReadTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToReadTiming
N*
N* Gets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToReadTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitPowerDownTiming
N*
N* Sets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit power-down to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitPowerDownTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitPowerDownTiming
N*
N* Gets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit power-down to command delay
N*/
Nuint8_t u8DMC_GetExitPowerDownTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitSelfRefreshTiming
N*
N* Sets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitSelfRefreshTiming
N*
N* Gets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit self-refresh to command delay
N*/
Nuint8_t u8DMC_GetExitSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetSelfRefreshTiming
N*
N* Sets self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetSelfRefreshTiming
N*
N* Gets the self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return self-refresh to command delay
N*/
Nuint8_t u8DMC_GetSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig2
N*
N* Sets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - DMC Configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig2(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig2
N*
N* Gets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return DMC Configuration
N*/
Nuint32_t u32DMC_GetMemConfig2(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2ReadDelay
N*
N* Sets the number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Delay - memory clock cycles between 0-2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg2ReadDelay
N*
N* Gets number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock cycles
N*/
Nuint8_t u8DMC_GetMemCfg2ReadDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemProtocol
N*
N* Sets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eProtocol - memory protocal
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemProtocol
N*
N* Gets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory protocal
N*/
Ndmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemWidth
N*
N* Sets memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eWidth - bus width
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemWidth
N*
N* Gets the memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory data bus width
N*/
Ndmc_width_e eDMC_GetMemCfg2MemWidth(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2CkeInit
N*
N* Sets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of cke(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2CkeInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2CkeInit
N*
N* Gets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of cke.
N*/
Ndmc_high_e eDMC_GetMemCfg2CkeInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2DqmInit
N*
N* Sets sets the state of the dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of dqm(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2DqmInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2DqmInit
N*
N* Gets the state of dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of dqm.
N*/
Ndmc_high_e eDMC_GetMemCfg2DqmInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig3
N*
N* Sets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - prescalar and number of 
N*                        outstanding AUTO REFRESH commands.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig3(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig3
N*
N* Gets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar and number of 
N*         outstanding AUTO REFRESH commands.
N*/
Nuint32_t u32DMC_GetMemConfig3(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3PreScale
N*
N* Sets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Prescale - prescalar value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3PreScale(uint16_t u16Prescale);
N
N
N/**
N* @brief Implementation of function u16DMC_GetMemCfg3PreScale
N*
N* Gets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar value
N*/
Nuint16_t u16DMC_GetMemCfg3PreScale(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3MaxRefsCmds
N*
N* Sets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8MaxRefsCmds - number of outstanding 
N*                            AUTO REFRESH commands
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg3MaxRefsCmds
N*
N* Gets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of outstanding AUTO REFRESH commands.
N*/
Nuint8_t u8DMC_GetMemCfg3MaxRefsCmds(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetReadTransferDelay
N*
N* Sets number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eDelay - number of idle cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay);
N
N
N/**
N* @brief Implementation of function eDMC_GetReadTransferDelay
N*
N* Gets the number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of idle cycles.
N*/
Ndmc_read_delay_e eDMC_GetReadTransferDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetIdConfig
N*
N* Sets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID    - Configuration ID, between 0 to 15
N* @param[in] u8QosMax   - maximum QoS value, between 0 to 255
N* @param[in] eQosMin    - minimum QoS value
N* @param[in] eQosEnable - enable/disable applying QoS to read transfer
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
N                      dmc_enable_e eQosMin, dmc_enable_e eQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_GetIdConfig
N*
N* Gets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID  - Configuration ID, between 0 to 15
N*
N* @param[in,out] u8QosMax   - pointer to maximum QoS value
N* @param[in,out] eQosMin    - pointer to minimum QoS value
N* @param[in,out] eQosEnable - pointer to QoS enable/disable state
N*
N* @return void
N*/
Nvoid vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
N                        dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfig
N*
N* Sets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - external memory device configuration 
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetChipConfig
N*
N* Gets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return external memory device configuration 
N*/
Nuint32_t u32DMC_GetChipConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrFmt
N*
N* Sets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eAddrFmt - memory organization format
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt);
N
N
N/**
N* @brief Implementation of function eDMC_GetChipConfigAddrFmt
N*
N* Gets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory organization format
N*/
Ndmc_addr_format_e eDMC_GetChipConfigAddrFmt(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMatch
N*
N* Sets the reference address field to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMatch - reference address field
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMatch
N*
N* Gets the reference address field used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return reference address field
N*/
Nuint8_t u8DMC_GetChipConfigAddrMatch(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMask
N*
N* Sets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMask - address mask
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMask
N*
N* Gets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return address mask
N*/
Nuint8_t u8DMC_GetChipConfigAddrMask(void);
N
N
N/**
N* @brief Implementation of function eDMC_GetUserStatus
N*
N* Gets the status of the user_status inputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return user status inputs
N*/
Ndmc_enable_e eDMC_GetUserStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig
N*
N* Sets the state of the user config outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config state(gear ratio)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio0
N*
N* Sets the user config's gear ratio0.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio0.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio1
N*
N* Sets the user config's gear ratio1.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio1.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1
N*
N* Sets the state of the user config1 outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config1 state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio3
N*
N* Sets the user config1's gear ratio3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio3.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1UseMinDelay
N*
N* Sets the delay to compensate the DLLs minimum Delay in LPDDR mode.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] boDelay - delay.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1UseMinDelay(bool_t boDelay);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1ClkModeChange
N*
N* Sets the Clock Mode Change of Leaf DLL cells.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eModeChange - Clock Mode Change
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1SignalEn
N*
N* Enable/Disable signal for Master DLL.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eEnable - Enable/Disable signal for Master DLL
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio2
N*
N* Sets the user config1's gear ratio2.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vSetEarlyWriteResponse
N*
N* Configure Early Write Response
N*
N* @note No Limitations
N*
N* @param[in] eEnable - enable or disable Early Write Response
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vSetEarlyWriteResponse(dmc_enable_e eEnable);
N
N
N/****************************************************************************/
N
N
N#endif /* DMC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 26 "..\..\..\..\hldd\inc\dmc_cfg.h" 2
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* !< LPDDR devices */
Ntypedef enum tag_dmc_dev_type_e
N{
N    DEV_MT46H8M32LFB5         =  1,   /* !< LPDDR Device Type Micronix  - MT46H8M32LFB5-6 */
N    DEV_MT46H16M32LFB5        =  2,   /* !< LPDDR Device Type Micronix  - MT46H16M32LFB5-6 */
N    DEV_IS42S32800D           =  3,   /* !< SDRAM Device Type Micronix  - IS42S32800D-6 */
N    DEV_INVALID_TYPE          =  4    /* !< Device Invalid */
N} dmc_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/**********************************************
N*   MT46H8M32LFB5-6                           *
N**********************************************/
N#if (RAM_DEVICE == 1)
X#if (2 == 1)
S#define DMC_DEVICE_TYPE (DEV_MT46H8M32LFB5)
S
S/**********************************************
S*   MT46H16M32LFB5-6                          *
S**********************************************/
N#elif (RAM_DEVICE == 2)
X#elif (2 == 2)
N#define DMC_DEVICE_TYPE (DEV_MT46H16M32LFB5)
N
N/**********************************************
N*   IS42S32800D-6                             *
N**********************************************/
N#elif (RAM_DEVICE == 3)
S#define DMC_DEVICE_TYPE (DEV_IS42S32800D)
S/*********************************************/
S#else
S		#error Memory configuration not supported !!!
N#endif
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vDMC_Cfg
N*
N* Configure Memory device 
N*
N* @note No Limitations
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_Cfg(void);
N
N/**
N* @brief Implementation of function boGetMemDeviceParams
N*
N* Assign settings of dmc device dependant on 
N*
N* @note No Limitations
N*
N* @param[in,out] pstDeviceParams - pointer to DMC device parameters
N*
N* @return void C_SUCCESS in case of success
N* @return void C_FAILED in case of parameter error
N*/
Nbool_t boGetMemDeviceParams(mem_device_st *pstDeviceParams);
N                         
N
N#endif /* DMC_CFG_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 22 "..\..\..\..\hldd\src\dmc_cfg.c" 2
N#include "dmc_io.h"
L 1 "..\..\..\..\lldd\hdr\dmc_io.h" 1
N/*##########################################################################    
N/  AUTOMATICALLY GENERATED FROM A REG_XML-FILE 
N/  Module                       : pl340_dmc_PL340r4p0_53e 
N/  Date of creation (y-m-d:time): 2015-02-10+01:00  :  10:13:21.822+01:00
N/  Excel2XML Tool ver.          : 
N/  Stylesheet  ver              : $Revision: 1.10 $ 
N/  Excel Sheet ver.             : vr4p0_v1.0
N/  Excel Sheet date             : 10.01.2015
N/  Excel Sheet author           : TEE_SPIRIT_CONVERTER_SCRIPT Ver.:v1.3
N/##########################################################################*/
N
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : DMC low level driver io-header file
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.10 $ 
N*   DATE        : $Date: 2015/05/27 12:19:07 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary and Confidential
N*****************************************************************************/
N#ifndef DMC_IO_H
N#define DMC_IO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N/* Following include file(s) needed for proper operation: */
N#include "captypes.h"                      /* Core specific primitive type definitions */ 
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_IO_H_REVISION     "$Revision: 1.10 $"
N#define LLDD_DMC_IO_H_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N/* disable following Misra errors for io files */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1  [R] : No more than 31 chars to determine an identifier */
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S  #pragma ghs nowarning 1861  /* Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words and standard library names */
S  #pragma ghs nowarning 1862  /* Rule 19.7 [A] : Disable function-like macro not allowed */
N#endif     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memc_status                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01000                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memc_status_REG__       0xc0d01000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   memc_status	:2; 	 /* 0..1  bit(s) R */
N  uint32_t   max_memory_width	:2; 	 /* 2..3  bit(s) R */
N  uint32_t   memory_support	:3; 	 /* 4..6  bit(s) R */
N  uint32_t   memory_chips	:2; 	 /* 7..8  bit(s) R */
N  uint32_t   banks_bit0	:1; 	 /* 9..9  bit(s) R */
N  uint32_t   exclusive_monitors	:2; 	 /* 10..11  bit(s) R */
N  uint32_t   banks_bit1	:1; 	 /* 12..12  bit(s) R */ 
N  uint32_t   Reserved0	:19; 	 /* 13..31  bit(s) R */                    
N} memc_status_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memc_status_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemc_status()     ((volatile memc_status_bit_view_st *)\
N(memc_status_REG__ ))
X#define pst_bitmemc_status()     ((volatile memc_status_bit_view_st *)(memc_status_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memc_status()     ((volatile u32memc_status_word_view *)\
N(memc_status_REG__ ))
X#define pu32memc_status()     ((volatile u32memc_status_word_view *)(memc_status_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetmemc_status_memc_status() (pst_bitmemc_status() -> memc_status)            
N#define biGetmemc_status_max_memory_width() (pst_bitmemc_status() -> max_memory_width)            
N#define biGetmemc_status_memory_support() (pst_bitmemc_status() -> memory_support)            
N#define biGetmemc_status_memory_chips() (pst_bitmemc_status() -> memory_chips)            
N#define biGetmemc_status_banks_bit0() (pst_bitmemc_status() -> banks_bit0)            
N#define biGetmemc_status_exclusive_monitors() (pst_bitmemc_status() -> exclusive_monitors)            
N#define biGetmemc_status_banks_bit1() (pst_bitmemc_status() -> banks_bit1)            
N            
N/* Word access */
N
N#define u32Getmemc_status()  (*pu32memc_status() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memc_cmd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01004                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memc_cmd_REG__       0xc0d01004U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   memc_cmd	:3; 	 /* 0..2  bit(s) W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) W */                    
N} memc_cmd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memc_cmd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemc_cmd()     ((volatile memc_cmd_bit_view_st *)\
N(memc_cmd_REG__ ))
X#define pst_bitmemc_cmd()     ((volatile memc_cmd_bit_view_st *)(memc_cmd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memc_cmd()     ((volatile u32memc_cmd_word_view *)\
N(memc_cmd_REG__ ))
X#define pu32memc_cmd()     ((volatile u32memc_cmd_word_view *)(memc_cmd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetmemc_cmd_memc_cmd(ParValue) (pst_bitmemc_cmd() -> memc_cmd=(ParValue)) 
N            
N/* Word access */
N#define vSetmemc_cmd(ParValue)  (*pu32memc_cmd() = (ParValue))
N#define u32Getmemc_cmd()  (*pu32memc_cmd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: direct_cmd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01008                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define direct_cmd_REG__       0xc0d01008U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   addr_13_to_0	:14; 	 /* 0..13  bit(s) W */
N  uint32_t   Reserved0	:2; 	 /* 14..15  bit(s) W */
N  uint32_t   bank_addr	:2; 	 /* 16..17  bit(s) W */
N  uint32_t   memory_cmd	:2; 	 /* 18..19  bit(s) W */
N  uint32_t   chip_nmbr	:2; 	 /* 20..21  bit(s) W */
N  uint32_t   ext_mem_cmd	:1; 	 /* 22..22  bit(s) W */ 
N  uint32_t   Reserved1	:9; 	 /* 23..31  bit(s) W */                    
N} direct_cmd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32direct_cmd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitdirect_cmd()     ((volatile direct_cmd_bit_view_st *)\
N(direct_cmd_REG__ ))
X#define pst_bitdirect_cmd()     ((volatile direct_cmd_bit_view_st *)(direct_cmd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32direct_cmd()     ((volatile u32direct_cmd_word_view *)\
N(direct_cmd_REG__ ))
X#define pu32direct_cmd()     ((volatile u32direct_cmd_word_view *)(direct_cmd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetdirect_cmd_addr_13_to_0(ParValue) (pst_bitdirect_cmd() -> addr_13_to_0=(ParValue)) 
N#define vSetdirect_cmd_bank_addr(ParValue) (pst_bitdirect_cmd() -> bank_addr=(ParValue)) 
N#define vSetdirect_cmd_memory_cmd(ParValue) (pst_bitdirect_cmd() -> memory_cmd=(ParValue)) 
N#define vSetdirect_cmd_chip_nmbr(ParValue) (pst_bitdirect_cmd() -> chip_nmbr=(ParValue)) 
N#define vSetdirect_cmd_ext_mem_cmd(ParValue) (pst_bitdirect_cmd() -> ext_mem_cmd=(ParValue)) 
N            
N/* Word access */
N#define vSetdirect_cmd(ParValue)  (*pu32direct_cmd() = (ParValue))
N#define u32Getdirect_cmd()  (*pu32direct_cmd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0100c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg_REG__       0xc0d0100cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   column_bits	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   row_bits	:3; 	 /* 3..5  bit(s) R/W */
N  uint32_t   ap_bit	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   power_dwn_prd	:6; 	 /* 7..12  bit(s) R/W */
N  uint32_t   auto_power_down	:1; 	 /* 13..13  bit(s) R/W */
N  uint32_t   stop_mem_clock	:1; 	 /* 14..14  bit(s) R/W */
N  uint32_t   memory_burst	:3; 	 /* 15..17  bit(s) R/W */
N  uint32_t   qos_master_bits	:3; 	 /* 18..20  bit(s) R/W */
N  uint32_t   active_chips	:2; 	 /* 21..22  bit(s) R/W */ 
N  uint32_t   Reserved0	:9; 	 /* 23..31  bit(s) R/W */                    
N} memory_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg()     ((volatile memory_cfg_bit_view_st *)\
N(memory_cfg_REG__ ))
X#define pst_bitmemory_cfg()     ((volatile memory_cfg_bit_view_st *)(memory_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg()     ((volatile u32memory_cfg_word_view *)\
N(memory_cfg_REG__ ))
X#define pu32memory_cfg()     ((volatile u32memory_cfg_word_view *)(memory_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg_column_bits() (pst_bitmemory_cfg() -> column_bits)
N#define vSetmemory_cfg_column_bits(ParValue)  (pst_bitmemory_cfg() -> column_bits=(ParValue))
N#define biGetmemory_cfg_row_bits() (pst_bitmemory_cfg() -> row_bits)
N#define vSetmemory_cfg_row_bits(ParValue)  (pst_bitmemory_cfg() -> row_bits=(ParValue))
N#define biGetmemory_cfg_ap_bit() (pst_bitmemory_cfg() -> ap_bit)
N#define vSetmemory_cfg_ap_bit(ParValue)  (pst_bitmemory_cfg() -> ap_bit=(ParValue))
N#define biGetmemory_cfg_power_dwn_prd() (pst_bitmemory_cfg() -> power_dwn_prd)
N#define vSetmemory_cfg_power_dwn_prd(ParValue)  (pst_bitmemory_cfg() -> power_dwn_prd=(ParValue))
N#define biGetmemory_cfg_auto_power_down() (pst_bitmemory_cfg() -> auto_power_down)
N#define vSetmemory_cfg_auto_power_down(ParValue)  (pst_bitmemory_cfg() -> auto_power_down=(ParValue))
N#define biGetmemory_cfg_stop_mem_clock() (pst_bitmemory_cfg() -> stop_mem_clock)
N#define vSetmemory_cfg_stop_mem_clock(ParValue)  (pst_bitmemory_cfg() -> stop_mem_clock=(ParValue))
N#define biGetmemory_cfg_memory_burst() (pst_bitmemory_cfg() -> memory_burst)
N#define vSetmemory_cfg_memory_burst(ParValue)  (pst_bitmemory_cfg() -> memory_burst=(ParValue))
N#define biGetmemory_cfg_qos_master_bits() (pst_bitmemory_cfg() -> qos_master_bits)
N#define vSetmemory_cfg_qos_master_bits(ParValue)  (pst_bitmemory_cfg() -> qos_master_bits=(ParValue))
N#define biGetmemory_cfg_active_chips() (pst_bitmemory_cfg() -> active_chips)
N#define vSetmemory_cfg_active_chips(ParValue)  (pst_bitmemory_cfg() -> active_chips=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg(ParValue)  (*pu32memory_cfg() = (ParValue))
N#define u32Getmemory_cfg()  (*pu32memory_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: refresh_prd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01010                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define refresh_prd_REG__       0xc0d01010U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   refresh_prd	:15; 	 /* 0..14  bit(s) R/W */ 
N  uint32_t   Reserved0	:17; 	 /* 15..31  bit(s) R/W */                    
N} refresh_prd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32refresh_prd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitrefresh_prd()     ((volatile refresh_prd_bit_view_st *)\
N(refresh_prd_REG__ ))
X#define pst_bitrefresh_prd()     ((volatile refresh_prd_bit_view_st *)(refresh_prd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32refresh_prd()     ((volatile u32refresh_prd_word_view *)\
N(refresh_prd_REG__ ))
X#define pu32refresh_prd()     ((volatile u32refresh_prd_word_view *)(refresh_prd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetrefresh_prd_refresh_prd() (pst_bitrefresh_prd() -> refresh_prd)
N#define vSetrefresh_prd_refresh_prd(ParValue)  (pst_bitrefresh_prd() -> refresh_prd=(ParValue))
N            
N/* Word access */
N#define vSetrefresh_prd(ParValue)  (*pu32refresh_prd() = (ParValue))
N#define u32Getrefresh_prd()  (*pu32refresh_prd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: cas_latency                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01014                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define cas_latency_REG__       0xc0d01014U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   cas_half_cycle	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   cas_latency	:3; 	 /* 1..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} cas_latency_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32cas_latency_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitcas_latency()     ((volatile cas_latency_bit_view_st *)\
N(cas_latency_REG__ ))
X#define pst_bitcas_latency()     ((volatile cas_latency_bit_view_st *)(cas_latency_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32cas_latency()     ((volatile u32cas_latency_word_view *)\
N(cas_latency_REG__ ))
X#define pu32cas_latency()     ((volatile u32cas_latency_word_view *)(cas_latency_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetcas_latency_cas_half_cycle() (pst_bitcas_latency() -> cas_half_cycle)
N#define vSetcas_latency_cas_half_cycle(ParValue)  (pst_bitcas_latency() -> cas_half_cycle=(ParValue))
N#define biGetcas_latency_cas_latency() (pst_bitcas_latency() -> cas_latency)
N#define vSetcas_latency_cas_latency(ParValue)  (pst_bitcas_latency() -> cas_latency=(ParValue))
N            
N/* Word access */
N#define vSetcas_latency(ParValue)  (*pu32cas_latency() = (ParValue))
N#define u32Getcas_latency()  (*pu32cas_latency() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_dqss                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01018                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_dqss_REG__       0xc0d01018U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_dqss	:2; 	 /* 0..1  bit(s) R/W */ 
N  uint32_t   Reserved0	:30; 	 /* 2..31  bit(s) R/W */                    
N} t_dqss_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_dqss_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_dqss()     ((volatile t_dqss_bit_view_st *)\
N(t_dqss_REG__ ))
X#define pst_bitt_dqss()     ((volatile t_dqss_bit_view_st *)(t_dqss_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_dqss()     ((volatile u32t_dqss_word_view *)\
N(t_dqss_REG__ ))
X#define pu32t_dqss()     ((volatile u32t_dqss_word_view *)(t_dqss_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_dqss_t_dqss() (pst_bitt_dqss() -> t_dqss)
N#define vSett_dqss_t_dqss(ParValue)  (pst_bitt_dqss() -> t_dqss=(ParValue))
N            
N/* Word access */
N#define vSett_dqss(ParValue)  (*pu32t_dqss() = (ParValue))
N#define u32Gett_dqss()  (*pu32t_dqss() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_mrd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0101c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_mrd_REG__       0xc0d0101cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_mrd	:7; 	 /* 0..6  bit(s) R/W */ 
N  uint32_t   Reserved0	:25; 	 /* 7..31  bit(s) R/W */                    
N} t_mrd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_mrd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_mrd()     ((volatile t_mrd_bit_view_st *)\
N(t_mrd_REG__ ))
X#define pst_bitt_mrd()     ((volatile t_mrd_bit_view_st *)(t_mrd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_mrd()     ((volatile u32t_mrd_word_view *)\
N(t_mrd_REG__ ))
X#define pu32t_mrd()     ((volatile u32t_mrd_word_view *)(t_mrd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_mrd_t_mrd() (pst_bitt_mrd() -> t_mrd)
N#define vSett_mrd_t_mrd(ParValue)  (pst_bitt_mrd() -> t_mrd=(ParValue))
N            
N/* Word access */
N#define vSett_mrd(ParValue)  (*pu32t_mrd() = (ParValue))
N#define u32Gett_mrd()  (*pu32t_mrd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_ras                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01020                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_ras_REG__       0xc0d01020U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_ras	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_ras_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_ras_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_ras()     ((volatile t_ras_bit_view_st *)\
N(t_ras_REG__ ))
X#define pst_bitt_ras()     ((volatile t_ras_bit_view_st *)(t_ras_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_ras()     ((volatile u32t_ras_word_view *)\
N(t_ras_REG__ ))
X#define pu32t_ras()     ((volatile u32t_ras_word_view *)(t_ras_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_ras_t_ras() (pst_bitt_ras() -> t_ras)
N#define vSett_ras_t_ras(ParValue)  (pst_bitt_ras() -> t_ras=(ParValue))
N            
N/* Word access */
N#define vSett_ras(ParValue)  (*pu32t_ras() = (ParValue))
N#define u32Gett_ras()  (*pu32t_ras() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rc                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01024                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rc_REG__       0xc0d01024U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rc	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_rc_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rc_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rc()     ((volatile t_rc_bit_view_st *)\
N(t_rc_REG__ ))
X#define pst_bitt_rc()     ((volatile t_rc_bit_view_st *)(t_rc_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rc()     ((volatile u32t_rc_word_view *)\
N(t_rc_REG__ ))
X#define pu32t_rc()     ((volatile u32t_rc_word_view *)(t_rc_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rc_t_rc() (pst_bitt_rc() -> t_rc)
N#define vSett_rc_t_rc(ParValue)  (pst_bitt_rc() -> t_rc=(ParValue))
N            
N/* Word access */
N#define vSett_rc(ParValue)  (*pu32t_rc() = (ParValue))
N#define u32Gett_rc()  (*pu32t_rc() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rcd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01028                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rcd_REG__       0xc0d01028U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rcd	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   schedule_rcd	:3; 	 /* 3..5  bit(s) R/W */ 
N  uint32_t   Reserved0	:26; 	 /* 6..31  bit(s) R/W */                    
N} t_rcd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rcd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rcd()     ((volatile t_rcd_bit_view_st *)\
N(t_rcd_REG__ ))
X#define pst_bitt_rcd()     ((volatile t_rcd_bit_view_st *)(t_rcd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rcd()     ((volatile u32t_rcd_word_view *)\
N(t_rcd_REG__ ))
X#define pu32t_rcd()     ((volatile u32t_rcd_word_view *)(t_rcd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rcd_t_rcd() (pst_bitt_rcd() -> t_rcd)
N#define vSett_rcd_t_rcd(ParValue)  (pst_bitt_rcd() -> t_rcd=(ParValue))
N#define biGett_rcd_schedule_rcd() (pst_bitt_rcd() -> schedule_rcd)
N#define vSett_rcd_schedule_rcd(ParValue)  (pst_bitt_rcd() -> schedule_rcd=(ParValue))
N            
N/* Word access */
N#define vSett_rcd(ParValue)  (*pu32t_rcd() = (ParValue))
N#define u32Gett_rcd()  (*pu32t_rcd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rfc                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0102c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rfc_REG__       0xc0d0102cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rfc	:5; 	 /* 0..4  bit(s) R/W */
N  uint32_t   schedule_rfc	:5; 	 /* 5..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} t_rfc_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rfc_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rfc()     ((volatile t_rfc_bit_view_st *)\
N(t_rfc_REG__ ))
X#define pst_bitt_rfc()     ((volatile t_rfc_bit_view_st *)(t_rfc_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rfc()     ((volatile u32t_rfc_word_view *)\
N(t_rfc_REG__ ))
X#define pu32t_rfc()     ((volatile u32t_rfc_word_view *)(t_rfc_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rfc_t_rfc() (pst_bitt_rfc() -> t_rfc)
N#define vSett_rfc_t_rfc(ParValue)  (pst_bitt_rfc() -> t_rfc=(ParValue))
N#define biGett_rfc_schedule_rfc() (pst_bitt_rfc() -> schedule_rfc)
N#define vSett_rfc_schedule_rfc(ParValue)  (pst_bitt_rfc() -> schedule_rfc=(ParValue))
N            
N/* Word access */
N#define vSett_rfc(ParValue)  (*pu32t_rfc() = (ParValue))
N#define u32Gett_rfc()  (*pu32t_rfc() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rp                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01030                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rp_REG__       0xc0d01030U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rp	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   schedule_rp	:3; 	 /* 3..5  bit(s) R/W */ 
N  uint32_t   Reserved0	:26; 	 /* 6..31  bit(s) R/W */                    
N} t_rp_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rp_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rp()     ((volatile t_rp_bit_view_st *)\
N(t_rp_REG__ ))
X#define pst_bitt_rp()     ((volatile t_rp_bit_view_st *)(t_rp_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rp()     ((volatile u32t_rp_word_view *)\
N(t_rp_REG__ ))
X#define pu32t_rp()     ((volatile u32t_rp_word_view *)(t_rp_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rp_t_rp() (pst_bitt_rp() -> t_rp)
N#define vSett_rp_t_rp(ParValue)  (pst_bitt_rp() -> t_rp=(ParValue))
N#define biGett_rp_schedule_rp() (pst_bitt_rp() -> schedule_rp)
N#define vSett_rp_schedule_rp(ParValue)  (pst_bitt_rp() -> schedule_rp=(ParValue))
N            
N/* Word access */
N#define vSett_rp(ParValue)  (*pu32t_rp() = (ParValue))
N#define u32Gett_rp()  (*pu32t_rp() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_rrd                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01034                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_rrd_REG__       0xc0d01034U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_rrd	:4; 	 /* 0..3  bit(s) R/W */ 
N  uint32_t   Reserved0	:28; 	 /* 4..31  bit(s) R/W */                    
N} t_rrd_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_rrd_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_rrd()     ((volatile t_rrd_bit_view_st *)\
N(t_rrd_REG__ ))
X#define pst_bitt_rrd()     ((volatile t_rrd_bit_view_st *)(t_rrd_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_rrd()     ((volatile u32t_rrd_word_view *)\
N(t_rrd_REG__ ))
X#define pu32t_rrd()     ((volatile u32t_rrd_word_view *)(t_rrd_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_rrd_t_rrd() (pst_bitt_rrd() -> t_rrd)
N#define vSett_rrd_t_rrd(ParValue)  (pst_bitt_rrd() -> t_rrd=(ParValue))
N            
N/* Word access */
N#define vSett_rrd(ParValue)  (*pu32t_rrd() = (ParValue))
N#define u32Gett_rrd()  (*pu32t_rrd() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_wr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01038                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_wr_REG__       0xc0d01038U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_wr	:3; 	 /* 0..2  bit(s) R/W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) R/W */                    
N} t_wr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_wr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_wr()     ((volatile t_wr_bit_view_st *)\
N(t_wr_REG__ ))
X#define pst_bitt_wr()     ((volatile t_wr_bit_view_st *)(t_wr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_wr()     ((volatile u32t_wr_word_view *)\
N(t_wr_REG__ ))
X#define pu32t_wr()     ((volatile u32t_wr_word_view *)(t_wr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_wr_t_wr() (pst_bitt_wr() -> t_wr)
N#define vSett_wr_t_wr(ParValue)  (pst_bitt_wr() -> t_wr=(ParValue))
N            
N/* Word access */
N#define vSett_wr(ParValue)  (*pu32t_wr() = (ParValue))
N#define u32Gett_wr()  (*pu32t_wr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_wtr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0103c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_wtr_REG__       0xc0d0103cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_wtr	:3; 	 /* 0..2  bit(s) R/W */ 
N  uint32_t   Reserved0	:29; 	 /* 3..31  bit(s) R/W */                    
N} t_wtr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_wtr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_wtr()     ((volatile t_wtr_bit_view_st *)\
N(t_wtr_REG__ ))
X#define pst_bitt_wtr()     ((volatile t_wtr_bit_view_st *)(t_wtr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_wtr()     ((volatile u32t_wtr_word_view *)\
N(t_wtr_REG__ ))
X#define pu32t_wtr()     ((volatile u32t_wtr_word_view *)(t_wtr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_wtr_t_wtr() (pst_bitt_wtr() -> t_wtr)
N#define vSett_wtr_t_wtr(ParValue)  (pst_bitt_wtr() -> t_wtr=(ParValue))
N            
N/* Word access */
N#define vSett_wtr(ParValue)  (*pu32t_wtr() = (ParValue))
N#define u32Gett_wtr()  (*pu32t_wtr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_xp                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01040                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_xp_REG__       0xc0d01040U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_xp	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_xp_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_xp_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_xp()     ((volatile t_xp_bit_view_st *)\
N(t_xp_REG__ ))
X#define pst_bitt_xp()     ((volatile t_xp_bit_view_st *)(t_xp_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_xp()     ((volatile u32t_xp_word_view *)\
N(t_xp_REG__ ))
X#define pu32t_xp()     ((volatile u32t_xp_word_view *)(t_xp_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_xp_t_xp() (pst_bitt_xp() -> t_xp)
N#define vSett_xp_t_xp(ParValue)  (pst_bitt_xp() -> t_xp=(ParValue))
N            
N/* Word access */
N#define vSett_xp(ParValue)  (*pu32t_xp() = (ParValue))
N#define u32Gett_xp()  (*pu32t_xp() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_xsr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01044                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_xsr_REG__       0xc0d01044U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_xsr	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_xsr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_xsr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_xsr()     ((volatile t_xsr_bit_view_st *)\
N(t_xsr_REG__ ))
X#define pst_bitt_xsr()     ((volatile t_xsr_bit_view_st *)(t_xsr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_xsr()     ((volatile u32t_xsr_word_view *)\
N(t_xsr_REG__ ))
X#define pu32t_xsr()     ((volatile u32t_xsr_word_view *)(t_xsr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_xsr_t_xsr() (pst_bitt_xsr() -> t_xsr)
N#define vSett_xsr_t_xsr(ParValue)  (pst_bitt_xsr() -> t_xsr=(ParValue))
N            
N/* Word access */
N#define vSett_xsr(ParValue)  (*pu32t_xsr() = (ParValue))
N#define u32Gett_xsr()  (*pu32t_xsr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: t_esr                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01048                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define t_esr_REG__       0xc0d01048U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   t_esr	:8; 	 /* 0..7  bit(s) R/W */ 
N  uint32_t   Reserved0	:24; 	 /* 8..31  bit(s) R/W */                    
N} t_esr_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32t_esr_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitt_esr()     ((volatile t_esr_bit_view_st *)\
N(t_esr_REG__ ))
X#define pst_bitt_esr()     ((volatile t_esr_bit_view_st *)(t_esr_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32t_esr()     ((volatile u32t_esr_word_view *)\
N(t_esr_REG__ ))
X#define pu32t_esr()     ((volatile u32t_esr_word_view *)(t_esr_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGett_esr_t_esr() (pst_bitt_esr() -> t_esr)
N#define vSett_esr_t_esr(ParValue)  (pst_bitt_esr() -> t_esr=(ParValue))
N            
N/* Word access */
N#define vSett_esr(ParValue)  (*pu32t_esr() = (ParValue))
N#define u32Gett_esr()  (*pu32t_esr() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg2                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0104c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg2_REG__       0xc0d0104cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   clock_cfg	:2; 	 /* 0..1  bit(s) R/W */
N  uint32_t   dqm_init	:1; 	 /* 2..2  bit(s) R/W */
N  uint32_t   cke_init	:1; 	 /* 3..3  bit(s) R/W */
N  uint32_t   memory_width	:2; 	 /* 4..5  bit(s) R/W */
N  uint32_t   memory_protocol	:3; 	 /* 6..8  bit(s) R/W */
N  uint32_t   read_delay	:2; 	 /* 9..10  bit(s) R/W */ 
N  uint32_t   Reserved0	:21; 	 /* 11..31  bit(s) R/W */                    
N} memory_cfg2_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg2_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg2()     ((volatile memory_cfg2_bit_view_st *)\
N(memory_cfg2_REG__ ))
X#define pst_bitmemory_cfg2()     ((volatile memory_cfg2_bit_view_st *)(memory_cfg2_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg2()     ((volatile u32memory_cfg2_word_view *)\
N(memory_cfg2_REG__ ))
X#define pu32memory_cfg2()     ((volatile u32memory_cfg2_word_view *)(memory_cfg2_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg2_clock_cfg() (pst_bitmemory_cfg2() -> clock_cfg)
N#define vSetmemory_cfg2_clock_cfg(ParValue)  (pst_bitmemory_cfg2() -> clock_cfg=(ParValue))
N#define biGetmemory_cfg2_dqm_init() (pst_bitmemory_cfg2() -> dqm_init)
N#define vSetmemory_cfg2_dqm_init(ParValue)  (pst_bitmemory_cfg2() -> dqm_init=(ParValue))
N#define biGetmemory_cfg2_cke_init() (pst_bitmemory_cfg2() -> cke_init)
N#define vSetmemory_cfg2_cke_init(ParValue)  (pst_bitmemory_cfg2() -> cke_init=(ParValue))
N#define biGetmemory_cfg2_memory_width() (pst_bitmemory_cfg2() -> memory_width)
N#define vSetmemory_cfg2_memory_width(ParValue)  (pst_bitmemory_cfg2() -> memory_width=(ParValue))
N#define biGetmemory_cfg2_memory_protocol() (pst_bitmemory_cfg2() -> memory_protocol)
N#define vSetmemory_cfg2_memory_protocol(ParValue)  (pst_bitmemory_cfg2() -> memory_protocol=(ParValue))
N#define biGetmemory_cfg2_read_delay() (pst_bitmemory_cfg2() -> read_delay)
N#define vSetmemory_cfg2_read_delay(ParValue)  (pst_bitmemory_cfg2() -> read_delay=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg2(ParValue)  (*pu32memory_cfg2() = (ParValue))
N#define u32Getmemory_cfg2()  (*pu32memory_cfg2() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: memory_cfg3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01050                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define memory_cfg3_REG__       0xc0d01050U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   max_outs_refs	:3; 	 /* 0..2  bit(s) R/W */
N  uint32_t   prescale	:10; 	 /* 3..12  bit(s) R/W */ 
N  uint32_t   Reserved0	:19; 	 /* 13..31  bit(s) R/W */                    
N} memory_cfg3_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32memory_cfg3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitmemory_cfg3()     ((volatile memory_cfg3_bit_view_st *)\
N(memory_cfg3_REG__ ))
X#define pst_bitmemory_cfg3()     ((volatile memory_cfg3_bit_view_st *)(memory_cfg3_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32memory_cfg3()     ((volatile u32memory_cfg3_word_view *)\
N(memory_cfg3_REG__ ))
X#define pu32memory_cfg3()     ((volatile u32memory_cfg3_word_view *)(memory_cfg3_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetmemory_cfg3_max_outs_refs() (pst_bitmemory_cfg3() -> max_outs_refs)
N#define vSetmemory_cfg3_max_outs_refs(ParValue)  (pst_bitmemory_cfg3() -> max_outs_refs=(ParValue))
N#define biGetmemory_cfg3_prescale() (pst_bitmemory_cfg3() -> prescale)
N#define vSetmemory_cfg3_prescale(ParValue)  (pst_bitmemory_cfg3() -> prescale=(ParValue))
N            
N/* Word access */
N#define vSetmemory_cfg3(ParValue)  (*pu32memory_cfg3() = (ParValue))
N#define u32Getmemory_cfg3()  (*pu32memory_cfg3() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: read_transfer_delay                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0107c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define read_transfer_delay_REG__       0xc0d0107cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   read_transfer_delay	:2; 	 /* 0..1  bit(s) R/W */ 
N  uint32_t   Reserved0	:30; 	 /* 2..31  bit(s) R/W */                    
N} read_transfer_delay_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32read_transfer_delay_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitread_transfer_delay()     ((volatile read_transfer_delay_bit_view_st *)\
N(read_transfer_delay_REG__ ))
X#define pst_bitread_transfer_delay()     ((volatile read_transfer_delay_bit_view_st *)(read_transfer_delay_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32read_transfer_delay()     ((volatile u32read_transfer_delay_word_view *)\
N(read_transfer_delay_REG__ ))
X#define pu32read_transfer_delay()     ((volatile u32read_transfer_delay_word_view *)(read_transfer_delay_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetread_transfer_delay_read_transfer_delay() (pst_bitread_transfer_delay() -> read_transfer_delay)
N#define vSetread_transfer_delay_read_transfer_delay(ParValue)  (pst_bitread_transfer_delay() -> read_transfer_delay=(ParValue))
N            
N/* Word access */
N#define vSetread_transfer_delay(ParValue)  (*pu32read_transfer_delay() = (ParValue))
N#define u32Getread_transfer_delay()  (*pu32read_transfer_delay() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_0_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01100                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_0_cfg_REG__       0xc0d01100U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable0	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min0	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max0	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_0_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_0_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_0_cfg()     ((volatile id_0_cfg_bit_view_st *)\
N(id_0_cfg_REG__ ))
X#define pst_bitid_0_cfg()     ((volatile id_0_cfg_bit_view_st *)(id_0_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_0_cfg()     ((volatile u32id_0_cfg_word_view *)\
N(id_0_cfg_REG__ ))
X#define pu32id_0_cfg()     ((volatile u32id_0_cfg_word_view *)(id_0_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_0_cfg_qos_enable0() (pst_bitid_0_cfg() -> qos_enable0)
N#define vSetid_0_cfg_qos_enable0(ParValue)  (pst_bitid_0_cfg() -> qos_enable0=(ParValue))
N#define biGetid_0_cfg_qos_min0() (pst_bitid_0_cfg() -> qos_min0)
N#define vSetid_0_cfg_qos_min0(ParValue)  (pst_bitid_0_cfg() -> qos_min0=(ParValue))
N#define biGetid_0_cfg_qos_max0() (pst_bitid_0_cfg() -> qos_max0)
N#define vSetid_0_cfg_qos_max0(ParValue)  (pst_bitid_0_cfg() -> qos_max0=(ParValue))
N            
N/* Word access */
N#define vSetid_0_cfg(ParValue)  (*pu32id_0_cfg() = (ParValue))
N#define u32Getid_0_cfg()  (*pu32id_0_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_1_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01104                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_1_cfg_REG__       0xc0d01104U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable1	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min1	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max1	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_1_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_1_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_1_cfg()     ((volatile id_1_cfg_bit_view_st *)\
N(id_1_cfg_REG__ ))
X#define pst_bitid_1_cfg()     ((volatile id_1_cfg_bit_view_st *)(id_1_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_1_cfg()     ((volatile u32id_1_cfg_word_view *)\
N(id_1_cfg_REG__ ))
X#define pu32id_1_cfg()     ((volatile u32id_1_cfg_word_view *)(id_1_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_1_cfg_qos_enable1() (pst_bitid_1_cfg() -> qos_enable1)
N#define vSetid_1_cfg_qos_enable1(ParValue)  (pst_bitid_1_cfg() -> qos_enable1=(ParValue))
N#define biGetid_1_cfg_qos_min1() (pst_bitid_1_cfg() -> qos_min1)
N#define vSetid_1_cfg_qos_min1(ParValue)  (pst_bitid_1_cfg() -> qos_min1=(ParValue))
N#define biGetid_1_cfg_qos_max1() (pst_bitid_1_cfg() -> qos_max1)
N#define vSetid_1_cfg_qos_max1(ParValue)  (pst_bitid_1_cfg() -> qos_max1=(ParValue))
N            
N/* Word access */
N#define vSetid_1_cfg(ParValue)  (*pu32id_1_cfg() = (ParValue))
N#define u32Getid_1_cfg()  (*pu32id_1_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_2_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01108                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_2_cfg_REG__       0xc0d01108U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable2	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min2	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max2	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_2_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_2_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_2_cfg()     ((volatile id_2_cfg_bit_view_st *)\
N(id_2_cfg_REG__ ))
X#define pst_bitid_2_cfg()     ((volatile id_2_cfg_bit_view_st *)(id_2_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_2_cfg()     ((volatile u32id_2_cfg_word_view *)\
N(id_2_cfg_REG__ ))
X#define pu32id_2_cfg()     ((volatile u32id_2_cfg_word_view *)(id_2_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_2_cfg_qos_enable2() (pst_bitid_2_cfg() -> qos_enable2)
N#define vSetid_2_cfg_qos_enable2(ParValue)  (pst_bitid_2_cfg() -> qos_enable2=(ParValue))
N#define biGetid_2_cfg_qos_min2() (pst_bitid_2_cfg() -> qos_min2)
N#define vSetid_2_cfg_qos_min2(ParValue)  (pst_bitid_2_cfg() -> qos_min2=(ParValue))
N#define biGetid_2_cfg_qos_max2() (pst_bitid_2_cfg() -> qos_max2)
N#define vSetid_2_cfg_qos_max2(ParValue)  (pst_bitid_2_cfg() -> qos_max2=(ParValue))
N            
N/* Word access */
N#define vSetid_2_cfg(ParValue)  (*pu32id_2_cfg() = (ParValue))
N#define u32Getid_2_cfg()  (*pu32id_2_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_3_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0110c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_3_cfg_REG__       0xc0d0110cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable3	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min3	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max3	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_3_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_3_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_3_cfg()     ((volatile id_3_cfg_bit_view_st *)\
N(id_3_cfg_REG__ ))
X#define pst_bitid_3_cfg()     ((volatile id_3_cfg_bit_view_st *)(id_3_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_3_cfg()     ((volatile u32id_3_cfg_word_view *)\
N(id_3_cfg_REG__ ))
X#define pu32id_3_cfg()     ((volatile u32id_3_cfg_word_view *)(id_3_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_3_cfg_qos_enable3() (pst_bitid_3_cfg() -> qos_enable3)
N#define vSetid_3_cfg_qos_enable3(ParValue)  (pst_bitid_3_cfg() -> qos_enable3=(ParValue))
N#define biGetid_3_cfg_qos_min3() (pst_bitid_3_cfg() -> qos_min3)
N#define vSetid_3_cfg_qos_min3(ParValue)  (pst_bitid_3_cfg() -> qos_min3=(ParValue))
N#define biGetid_3_cfg_qos_max3() (pst_bitid_3_cfg() -> qos_max3)
N#define vSetid_3_cfg_qos_max3(ParValue)  (pst_bitid_3_cfg() -> qos_max3=(ParValue))
N            
N/* Word access */
N#define vSetid_3_cfg(ParValue)  (*pu32id_3_cfg() = (ParValue))
N#define u32Getid_3_cfg()  (*pu32id_3_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_4_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01110                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_4_cfg_REG__       0xc0d01110U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable4	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min4	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max4	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_4_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_4_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_4_cfg()     ((volatile id_4_cfg_bit_view_st *)\
N(id_4_cfg_REG__ ))
X#define pst_bitid_4_cfg()     ((volatile id_4_cfg_bit_view_st *)(id_4_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_4_cfg()     ((volatile u32id_4_cfg_word_view *)\
N(id_4_cfg_REG__ ))
X#define pu32id_4_cfg()     ((volatile u32id_4_cfg_word_view *)(id_4_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_4_cfg_qos_enable4() (pst_bitid_4_cfg() -> qos_enable4)
N#define vSetid_4_cfg_qos_enable4(ParValue)  (pst_bitid_4_cfg() -> qos_enable4=(ParValue))
N#define biGetid_4_cfg_qos_min4() (pst_bitid_4_cfg() -> qos_min4)
N#define vSetid_4_cfg_qos_min4(ParValue)  (pst_bitid_4_cfg() -> qos_min4=(ParValue))
N#define biGetid_4_cfg_qos_max4() (pst_bitid_4_cfg() -> qos_max4)
N#define vSetid_4_cfg_qos_max4(ParValue)  (pst_bitid_4_cfg() -> qos_max4=(ParValue))
N            
N/* Word access */
N#define vSetid_4_cfg(ParValue)  (*pu32id_4_cfg() = (ParValue))
N#define u32Getid_4_cfg()  (*pu32id_4_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_5_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01114                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_5_cfg_REG__       0xc0d01114U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable5	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min5	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max5	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_5_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_5_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_5_cfg()     ((volatile id_5_cfg_bit_view_st *)\
N(id_5_cfg_REG__ ))
X#define pst_bitid_5_cfg()     ((volatile id_5_cfg_bit_view_st *)(id_5_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_5_cfg()     ((volatile u32id_5_cfg_word_view *)\
N(id_5_cfg_REG__ ))
X#define pu32id_5_cfg()     ((volatile u32id_5_cfg_word_view *)(id_5_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_5_cfg_qos_enable5() (pst_bitid_5_cfg() -> qos_enable5)
N#define vSetid_5_cfg_qos_enable5(ParValue)  (pst_bitid_5_cfg() -> qos_enable5=(ParValue))
N#define biGetid_5_cfg_qos_min5() (pst_bitid_5_cfg() -> qos_min5)
N#define vSetid_5_cfg_qos_min5(ParValue)  (pst_bitid_5_cfg() -> qos_min5=(ParValue))
N#define biGetid_5_cfg_qos_max5() (pst_bitid_5_cfg() -> qos_max5)
N#define vSetid_5_cfg_qos_max5(ParValue)  (pst_bitid_5_cfg() -> qos_max5=(ParValue))
N            
N/* Word access */
N#define vSetid_5_cfg(ParValue)  (*pu32id_5_cfg() = (ParValue))
N#define u32Getid_5_cfg()  (*pu32id_5_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_6_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01118                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_6_cfg_REG__       0xc0d01118U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable6	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min6	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max6	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_6_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_6_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_6_cfg()     ((volatile id_6_cfg_bit_view_st *)\
N(id_6_cfg_REG__ ))
X#define pst_bitid_6_cfg()     ((volatile id_6_cfg_bit_view_st *)(id_6_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_6_cfg()     ((volatile u32id_6_cfg_word_view *)\
N(id_6_cfg_REG__ ))
X#define pu32id_6_cfg()     ((volatile u32id_6_cfg_word_view *)(id_6_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_6_cfg_qos_enable6() (pst_bitid_6_cfg() -> qos_enable6)
N#define vSetid_6_cfg_qos_enable6(ParValue)  (pst_bitid_6_cfg() -> qos_enable6=(ParValue))
N#define biGetid_6_cfg_qos_min6() (pst_bitid_6_cfg() -> qos_min6)
N#define vSetid_6_cfg_qos_min6(ParValue)  (pst_bitid_6_cfg() -> qos_min6=(ParValue))
N#define biGetid_6_cfg_qos_max6() (pst_bitid_6_cfg() -> qos_max6)
N#define vSetid_6_cfg_qos_max6(ParValue)  (pst_bitid_6_cfg() -> qos_max6=(ParValue))
N            
N/* Word access */
N#define vSetid_6_cfg(ParValue)  (*pu32id_6_cfg() = (ParValue))
N#define u32Getid_6_cfg()  (*pu32id_6_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_7_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0111c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_7_cfg_REG__       0xc0d0111cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable7	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min7	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max7	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_7_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_7_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_7_cfg()     ((volatile id_7_cfg_bit_view_st *)\
N(id_7_cfg_REG__ ))
X#define pst_bitid_7_cfg()     ((volatile id_7_cfg_bit_view_st *)(id_7_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_7_cfg()     ((volatile u32id_7_cfg_word_view *)\
N(id_7_cfg_REG__ ))
X#define pu32id_7_cfg()     ((volatile u32id_7_cfg_word_view *)(id_7_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_7_cfg_qos_enable7() (pst_bitid_7_cfg() -> qos_enable7)
N#define vSetid_7_cfg_qos_enable7(ParValue)  (pst_bitid_7_cfg() -> qos_enable7=(ParValue))
N#define biGetid_7_cfg_qos_min7() (pst_bitid_7_cfg() -> qos_min7)
N#define vSetid_7_cfg_qos_min7(ParValue)  (pst_bitid_7_cfg() -> qos_min7=(ParValue))
N#define biGetid_7_cfg_qos_max7() (pst_bitid_7_cfg() -> qos_max7)
N#define vSetid_7_cfg_qos_max7(ParValue)  (pst_bitid_7_cfg() -> qos_max7=(ParValue))
N            
N/* Word access */
N#define vSetid_7_cfg(ParValue)  (*pu32id_7_cfg() = (ParValue))
N#define u32Getid_7_cfg()  (*pu32id_7_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_8_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01120                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_8_cfg_REG__       0xc0d01120U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable8	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min8	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max8	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_8_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_8_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_8_cfg()     ((volatile id_8_cfg_bit_view_st *)\
N(id_8_cfg_REG__ ))
X#define pst_bitid_8_cfg()     ((volatile id_8_cfg_bit_view_st *)(id_8_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_8_cfg()     ((volatile u32id_8_cfg_word_view *)\
N(id_8_cfg_REG__ ))
X#define pu32id_8_cfg()     ((volatile u32id_8_cfg_word_view *)(id_8_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_8_cfg_qos_enable8() (pst_bitid_8_cfg() -> qos_enable8)
N#define vSetid_8_cfg_qos_enable8(ParValue)  (pst_bitid_8_cfg() -> qos_enable8=(ParValue))
N#define biGetid_8_cfg_qos_min8() (pst_bitid_8_cfg() -> qos_min8)
N#define vSetid_8_cfg_qos_min8(ParValue)  (pst_bitid_8_cfg() -> qos_min8=(ParValue))
N#define biGetid_8_cfg_qos_max8() (pst_bitid_8_cfg() -> qos_max8)
N#define vSetid_8_cfg_qos_max8(ParValue)  (pst_bitid_8_cfg() -> qos_max8=(ParValue))
N            
N/* Word access */
N#define vSetid_8_cfg(ParValue)  (*pu32id_8_cfg() = (ParValue))
N#define u32Getid_8_cfg()  (*pu32id_8_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_9_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01124                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_9_cfg_REG__       0xc0d01124U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable9	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min9	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max9	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_9_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_9_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_9_cfg()     ((volatile id_9_cfg_bit_view_st *)\
N(id_9_cfg_REG__ ))
X#define pst_bitid_9_cfg()     ((volatile id_9_cfg_bit_view_st *)(id_9_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_9_cfg()     ((volatile u32id_9_cfg_word_view *)\
N(id_9_cfg_REG__ ))
X#define pu32id_9_cfg()     ((volatile u32id_9_cfg_word_view *)(id_9_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_9_cfg_qos_enable9() (pst_bitid_9_cfg() -> qos_enable9)
N#define vSetid_9_cfg_qos_enable9(ParValue)  (pst_bitid_9_cfg() -> qos_enable9=(ParValue))
N#define biGetid_9_cfg_qos_min9() (pst_bitid_9_cfg() -> qos_min9)
N#define vSetid_9_cfg_qos_min9(ParValue)  (pst_bitid_9_cfg() -> qos_min9=(ParValue))
N#define biGetid_9_cfg_qos_max9() (pst_bitid_9_cfg() -> qos_max9)
N#define vSetid_9_cfg_qos_max9(ParValue)  (pst_bitid_9_cfg() -> qos_max9=(ParValue))
N            
N/* Word access */
N#define vSetid_9_cfg(ParValue)  (*pu32id_9_cfg() = (ParValue))
N#define u32Getid_9_cfg()  (*pu32id_9_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_10_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01128                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_10_cfg_REG__       0xc0d01128U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable10	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min10	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max10	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_10_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_10_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_10_cfg()     ((volatile id_10_cfg_bit_view_st *)\
N(id_10_cfg_REG__ ))
X#define pst_bitid_10_cfg()     ((volatile id_10_cfg_bit_view_st *)(id_10_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_10_cfg()     ((volatile u32id_10_cfg_word_view *)\
N(id_10_cfg_REG__ ))
X#define pu32id_10_cfg()     ((volatile u32id_10_cfg_word_view *)(id_10_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_10_cfg_qos_enable10() (pst_bitid_10_cfg() -> qos_enable10)
N#define vSetid_10_cfg_qos_enable10(ParValue)  (pst_bitid_10_cfg() -> qos_enable10=(ParValue))
N#define biGetid_10_cfg_qos_min10() (pst_bitid_10_cfg() -> qos_min10)
N#define vSetid_10_cfg_qos_min10(ParValue)  (pst_bitid_10_cfg() -> qos_min10=(ParValue))
N#define biGetid_10_cfg_qos_max10() (pst_bitid_10_cfg() -> qos_max10)
N#define vSetid_10_cfg_qos_max10(ParValue)  (pst_bitid_10_cfg() -> qos_max10=(ParValue))
N            
N/* Word access */
N#define vSetid_10_cfg(ParValue)  (*pu32id_10_cfg() = (ParValue))
N#define u32Getid_10_cfg()  (*pu32id_10_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_11_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0112c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_11_cfg_REG__       0xc0d0112cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable11	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min11	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max11	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_11_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_11_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_11_cfg()     ((volatile id_11_cfg_bit_view_st *)\
N(id_11_cfg_REG__ ))
X#define pst_bitid_11_cfg()     ((volatile id_11_cfg_bit_view_st *)(id_11_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_11_cfg()     ((volatile u32id_11_cfg_word_view *)\
N(id_11_cfg_REG__ ))
X#define pu32id_11_cfg()     ((volatile u32id_11_cfg_word_view *)(id_11_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_11_cfg_qos_enable11() (pst_bitid_11_cfg() -> qos_enable11)
N#define vSetid_11_cfg_qos_enable11(ParValue)  (pst_bitid_11_cfg() -> qos_enable11=(ParValue))
N#define biGetid_11_cfg_qos_min11() (pst_bitid_11_cfg() -> qos_min11)
N#define vSetid_11_cfg_qos_min11(ParValue)  (pst_bitid_11_cfg() -> qos_min11=(ParValue))
N#define biGetid_11_cfg_qos_max11() (pst_bitid_11_cfg() -> qos_max11)
N#define vSetid_11_cfg_qos_max11(ParValue)  (pst_bitid_11_cfg() -> qos_max11=(ParValue))
N            
N/* Word access */
N#define vSetid_11_cfg(ParValue)  (*pu32id_11_cfg() = (ParValue))
N#define u32Getid_11_cfg()  (*pu32id_11_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_12_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01130                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_12_cfg_REG__       0xc0d01130U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable12	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min12	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max12	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_12_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_12_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_12_cfg()     ((volatile id_12_cfg_bit_view_st *)\
N(id_12_cfg_REG__ ))
X#define pst_bitid_12_cfg()     ((volatile id_12_cfg_bit_view_st *)(id_12_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_12_cfg()     ((volatile u32id_12_cfg_word_view *)\
N(id_12_cfg_REG__ ))
X#define pu32id_12_cfg()     ((volatile u32id_12_cfg_word_view *)(id_12_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_12_cfg_qos_enable12() (pst_bitid_12_cfg() -> qos_enable12)
N#define vSetid_12_cfg_qos_enable12(ParValue)  (pst_bitid_12_cfg() -> qos_enable12=(ParValue))
N#define biGetid_12_cfg_qos_min12() (pst_bitid_12_cfg() -> qos_min12)
N#define vSetid_12_cfg_qos_min12(ParValue)  (pst_bitid_12_cfg() -> qos_min12=(ParValue))
N#define biGetid_12_cfg_qos_max12() (pst_bitid_12_cfg() -> qos_max12)
N#define vSetid_12_cfg_qos_max12(ParValue)  (pst_bitid_12_cfg() -> qos_max12=(ParValue))
N            
N/* Word access */
N#define vSetid_12_cfg(ParValue)  (*pu32id_12_cfg() = (ParValue))
N#define u32Getid_12_cfg()  (*pu32id_12_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_13_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01134                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_13_cfg_REG__       0xc0d01134U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable13	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min13	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max13	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_13_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_13_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_13_cfg()     ((volatile id_13_cfg_bit_view_st *)\
N(id_13_cfg_REG__ ))
X#define pst_bitid_13_cfg()     ((volatile id_13_cfg_bit_view_st *)(id_13_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_13_cfg()     ((volatile u32id_13_cfg_word_view *)\
N(id_13_cfg_REG__ ))
X#define pu32id_13_cfg()     ((volatile u32id_13_cfg_word_view *)(id_13_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_13_cfg_qos_enable13() (pst_bitid_13_cfg() -> qos_enable13)
N#define vSetid_13_cfg_qos_enable13(ParValue)  (pst_bitid_13_cfg() -> qos_enable13=(ParValue))
N#define biGetid_13_cfg_qos_min13() (pst_bitid_13_cfg() -> qos_min13)
N#define vSetid_13_cfg_qos_min13(ParValue)  (pst_bitid_13_cfg() -> qos_min13=(ParValue))
N#define biGetid_13_cfg_qos_max13() (pst_bitid_13_cfg() -> qos_max13)
N#define vSetid_13_cfg_qos_max13(ParValue)  (pst_bitid_13_cfg() -> qos_max13=(ParValue))
N            
N/* Word access */
N#define vSetid_13_cfg(ParValue)  (*pu32id_13_cfg() = (ParValue))
N#define u32Getid_13_cfg()  (*pu32id_13_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_14_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01138                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_14_cfg_REG__       0xc0d01138U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable14	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min14	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max14	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_14_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_14_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_14_cfg()     ((volatile id_14_cfg_bit_view_st *)\
N(id_14_cfg_REG__ ))
X#define pst_bitid_14_cfg()     ((volatile id_14_cfg_bit_view_st *)(id_14_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_14_cfg()     ((volatile u32id_14_cfg_word_view *)\
N(id_14_cfg_REG__ ))
X#define pu32id_14_cfg()     ((volatile u32id_14_cfg_word_view *)(id_14_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_14_cfg_qos_enable14() (pst_bitid_14_cfg() -> qos_enable14)
N#define vSetid_14_cfg_qos_enable14(ParValue)  (pst_bitid_14_cfg() -> qos_enable14=(ParValue))
N#define biGetid_14_cfg_qos_min14() (pst_bitid_14_cfg() -> qos_min14)
N#define vSetid_14_cfg_qos_min14(ParValue)  (pst_bitid_14_cfg() -> qos_min14=(ParValue))
N#define biGetid_14_cfg_qos_max14() (pst_bitid_14_cfg() -> qos_max14)
N#define vSetid_14_cfg_qos_max14(ParValue)  (pst_bitid_14_cfg() -> qos_max14=(ParValue))
N            
N/* Word access */
N#define vSetid_14_cfg(ParValue)  (*pu32id_14_cfg() = (ParValue))
N#define u32Getid_14_cfg()  (*pu32id_14_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: id_15_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0113c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define id_15_cfg_REG__       0xc0d0113cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   qos_enable15	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   qos_min15	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   qos_max15	:8; 	 /* 2..9  bit(s) R/W */ 
N  uint32_t   Reserved0	:22; 	 /* 10..31  bit(s) R/W */                    
N} id_15_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32id_15_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitid_15_cfg()     ((volatile id_15_cfg_bit_view_st *)\
N(id_15_cfg_REG__ ))
X#define pst_bitid_15_cfg()     ((volatile id_15_cfg_bit_view_st *)(id_15_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32id_15_cfg()     ((volatile u32id_15_cfg_word_view *)\
N(id_15_cfg_REG__ ))
X#define pu32id_15_cfg()     ((volatile u32id_15_cfg_word_view *)(id_15_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetid_15_cfg_qos_enable15() (pst_bitid_15_cfg() -> qos_enable15)
N#define vSetid_15_cfg_qos_enable15(ParValue)  (pst_bitid_15_cfg() -> qos_enable15=(ParValue))
N#define biGetid_15_cfg_qos_min15() (pst_bitid_15_cfg() -> qos_min15)
N#define vSetid_15_cfg_qos_min15(ParValue)  (pst_bitid_15_cfg() -> qos_min15=(ParValue))
N#define biGetid_15_cfg_qos_max15() (pst_bitid_15_cfg() -> qos_max15)
N#define vSetid_15_cfg_qos_max15(ParValue)  (pst_bitid_15_cfg() -> qos_max15=(ParValue))
N            
N/* Word access */
N#define vSetid_15_cfg(ParValue)  (*pu32id_15_cfg() = (ParValue))
N#define u32Getid_15_cfg()  (*pu32id_15_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: chip_cfg                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01200                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define chip_cfg_REG__       0xc0d01200U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   address_mask	:8; 	 /* 0..7  bit(s) R/W */
N  uint32_t   address_match	:8; 	 /* 8..15  bit(s) R/W */
N  uint32_t   address_fmt	:1; 	 /* 16..16  bit(s) R/W */ 
N  uint32_t   Reserved0	:15; 	 /* 17..31  bit(s) R/W */                    
N} chip_cfg_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32chip_cfg_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitchip_cfg()     ((volatile chip_cfg_bit_view_st *)\
N(chip_cfg_REG__ ))
X#define pst_bitchip_cfg()     ((volatile chip_cfg_bit_view_st *)(chip_cfg_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32chip_cfg()     ((volatile u32chip_cfg_word_view *)\
N(chip_cfg_REG__ ))
X#define pu32chip_cfg()     ((volatile u32chip_cfg_word_view *)(chip_cfg_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetchip_cfg_address_mask() (pst_bitchip_cfg() -> address_mask)
N#define vSetchip_cfg_address_mask(ParValue)  (pst_bitchip_cfg() -> address_mask=(ParValue))
N#define biGetchip_cfg_address_match() (pst_bitchip_cfg() -> address_match)
N#define vSetchip_cfg_address_match(ParValue)  (pst_bitchip_cfg() -> address_match=(ParValue))
N#define biGetchip_cfg_address_fmt() (pst_bitchip_cfg() -> address_fmt)
N#define vSetchip_cfg_address_fmt(ParValue)  (pst_bitchip_cfg() -> address_fmt=(ParValue))
N            
N/* Word access */
N#define vSetchip_cfg(ParValue)  (*pu32chip_cfg() = (ParValue))
N#define u32Getchip_cfg()  (*pu32chip_cfg() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_status                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01300                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_status_REG__       0xc0d01300U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   Lock	:1; 	 /* 0..0  bit(s) R */ 
N  uint32_t   Reserved0	:31; 	 /* 1..31  bit(s) R */                    
N} user_status_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_status_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_status()     ((volatile user_status_bit_view_st *)\
N(user_status_REG__ ))
X#define pst_bituser_status()     ((volatile user_status_bit_view_st *)(user_status_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_status()     ((volatile u32user_status_word_view *)\
N(user_status_REG__ ))
X#define pu32user_status()     ((volatile u32user_status_word_view *)(user_status_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetuser_status_Lock() (pst_bituser_status() -> Lock)            
N            
N/* Word access */
N
N#define u32Getuser_status()  (*pu32user_status() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_config                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01304                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_config_REG__       0xc0d01304U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   gear_ratio0	:11; 	 /* 0..10  bit(s) W */
N  uint32_t   Reserved0	:5; 	 /* 11..15  bit(s) W */
N  uint32_t   gear_ratio1	:11; 	 /* 16..26  bit(s) W */ 
N  uint32_t   Reserved1	:5; 	 /* 27..31  bit(s) W */                    
N} user_config_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_config_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_config()     ((volatile user_config_bit_view_st *)\
N(user_config_REG__ ))
X#define pst_bituser_config()     ((volatile user_config_bit_view_st *)(user_config_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_config()     ((volatile u32user_config_word_view *)\
N(user_config_REG__ ))
X#define pu32user_config()     ((volatile u32user_config_word_view *)(user_config_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetuser_config_gear_ratio0(ParValue) (pst_bituser_config() -> gear_ratio0=(ParValue)) 
N#define vSetuser_config_gear_ratio1(ParValue) (pst_bituser_config() -> gear_ratio1=(ParValue)) 
N            
N/* Word access */
N#define vSetuser_config(ParValue)  (*pu32user_config() = (ParValue))
N#define u32Getuser_config()  (*pu32user_config() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: user_config1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d01308                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define user_config1_REG__       0xc0d01308U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   gear_ratio2	:11; 	 /* 0..10  bit(s) W */
N  uint32_t   Reserved0	:1; 	 /* 11..11  bit(s) W */
N  uint32_t   Enable	:1; 	 /* 12..12  bit(s) W */
N  uint32_t   Clock_Mode_Change	:1; 	 /* 13..13  bit(s) W */
N  uint32_t   Use_Min_Delay	:1; 	 /* 14..14  bit(s) W */
N  uint32_t   Reserved1	:1; 	 /* 15..15  bit(s) W */
N  uint32_t   gear_ratio3	:11; 	 /* 16..26  bit(s) W */ 
N  uint32_t   Reserved2	:5; 	 /* 27..31  bit(s) W */                    
N} user_config1_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32user_config1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bituser_config1()     ((volatile user_config1_bit_view_st *)\
N(user_config1_REG__ ))
X#define pst_bituser_config1()     ((volatile user_config1_bit_view_st *)(user_config1_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32user_config1()     ((volatile u32user_config1_word_view *)\
N(user_config1_REG__ ))
X#define pu32user_config1()     ((volatile u32user_config1_word_view *)(user_config1_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */ 
N#define vSetuser_config1_gear_ratio2(ParValue) (pst_bituser_config1() -> gear_ratio2=(ParValue)) 
N#define vSetuser_config1_Enable(ParValue) (pst_bituser_config1() -> Enable=(ParValue)) 
N#define vSetuser_config1_Clock_Mode_Change(ParValue) (pst_bituser_config1() -> Clock_Mode_Change=(ParValue)) 
N#define vSetuser_config1_Use_Min_Delay(ParValue) (pst_bituser_config1() -> Use_Min_Delay=(ParValue)) 
N#define vSetuser_config1_gear_ratio3(ParValue) (pst_bituser_config1() -> gear_ratio3=(ParValue)) 
N            
N/* Word access */
N#define vSetuser_config1(ParValue)  (*pu32user_config1() = (ParValue))
N#define u32Getuser_config1()  (*pu32user_config1() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: feature_ctrl                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xc0d0130c                             
N*       ACCESS  : 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define feature_ctrl_REG__       0xc0d0130cU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   stop_early_bresp	:1; 	 /* 0..0  bit(s) R/W */ 
N  uint32_t   Reserved0	:31; 	 /* 1..31  bit(s) R/W */                    
N} feature_ctrl_bit_view_st;
N        
N
N/* WORD View */
Ntypedef uint32_t u32feature_ctrl_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitfeature_ctrl()     ((volatile feature_ctrl_bit_view_st *)\
N(feature_ctrl_REG__ ))
X#define pst_bitfeature_ctrl()     ((volatile feature_ctrl_bit_view_st *)(feature_ctrl_REG__ ))
N        
N/* Pointer to WORD  */ 
N#define pu32feature_ctrl()     ((volatile u32feature_ctrl_word_view *)\
N(feature_ctrl_REG__ ))
X#define pu32feature_ctrl()     ((volatile u32feature_ctrl_word_view *)(feature_ctrl_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetfeature_ctrl_stop_early_bresp() (pst_bitfeature_ctrl() -> stop_early_bresp)
N#define vSetfeature_ctrl_stop_early_bresp(ParValue)  (pst_bitfeature_ctrl() -> stop_early_bresp=(ParValue))
N            
N/* Word access */
N#define vSetfeature_ctrl(ParValue)  (*pu32feature_ctrl() = (ParValue))
N#define u32Getfeature_ctrl()  (*pu32feature_ctrl() )
N            
N/****************************************************************************/	
N/******************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */ 
N/******************************************************************************/
N    
N/*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   :   Deactivated:
N** |     Not requested Rules: 
N** |         Rule 5.7  [A] : No reuse of identifiers
N** |         Rule 19.7 [A] : Function used instead of function-like macro when possible
N** |
N** |     Requested Rules:
N** |         Rule	5.1  [R] : No more than 31 chars to determine an identifier
N** |         Rule 20.1 [R] : No definition, redefinition, or undefinition of reserved words
N** |                         and standard library names register names are generated by 
N** |                         converter tool from HW specs
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************/
N
N#endif /* DMC_IO_H */ 
N
N/****************************************************************************/	
N
N
N/************************** BEGIN of DISCLAIMER   ************************* 
N
N- TOSHIBA is continually working to improve the quality and reliability of 
N  its products. Nevertheless, semiconductor devices in general can 
N  malfunction or fail due to their inherent electrical sensitivity and  
N  vulnerability to physical stress. It is the responsibility of the buyer, 
N  when utilizing TOSHIBA products, to comply with the standards of safety 
N  in making a safe design for the entire system, and to avoid situations in 
N  which a malfunction or failure of such TOSHIBA products could cause loss of 
N  human life, bodily injury or damage to property. 
N  
N  In developing your designs, please ensure that TOSHIBA products are used 
N  within specified operating ranges as set forth in the most recent TOSHIBA 
N  products specifications. 
N  Also, please keep in mind the precautions and conditions set forth in the 
N  Handling Guide for Semiconductor Devices, or 
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in 
N  general electronics applications (computer, personal equipment, office 
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). 
N  These Toshiba products are neither intended nor warranted for usage in 
N  equipment that requires extraordinarily high quality and/or reliability or 
N  a malfunction or failure of which may cause loss of human life or bodily 
N  injury (Unintended Usage). Unintended Usage include atomic energy control 
N  instruments, airplane or spaceship instruments, transportation instruments, 
N  traffic signal instruments, combustion control instruments, medical 
N  instruments, all types of safety devices, etc.. 
N  Unintended Usage of Toshiba products listed in this document shall be 
N  made at the customers own risk. 
N
N- Toshiba assumes no liability for any damage or losses (including but not 
N  limited to, loss of business profit,business interruption, loss of business 
N  information,and other pecuniary losses) occurring 
N  from the use of, or inability to use, this product. 
N
N- The products described in this document are subject to the foreign exchange 
N  and foreign trade laws. 
N
N- The products described in this document contain components made in the 
N  United States and subject to export control of the U.S. authorities. 
N  Diversion contrary to the U.S. law is prohibited. 
N
N- The information contained herein is presented only as a guide for the 
N  applications of our products. 
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements 
N  of intellectual property or other rights of the third parties which may 
N  result from its use.  
N  No license is granted by implication or otherwise under any intellectual 
N  property or other rights of TOSHIBA CORPORATION or others. 
N
N- The information contained herein is subject to change without notice. 
N
N****************************  END of DISCLAIMER ****************************/ 
N
L 23 "..\..\..\..\hldd\src\dmc_cfg.c" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*              Global Variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Functions                   *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section text = ".init"
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#if defined(__KEIL__)
X#if 1L
N#pragma arm section code = "init"
N#else
S#pragma arm section code = ".init"
N#endif
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N#define CR4DEBUG_ENABLE      // RYZ for CS/MP chip debug
Nvoid vDMC_Cfg(void)
N{
N    mem_device_st stDeviceParams;
N
N    /* get parameters for device: */
N    boGetMemDeviceParams(&stDeviceParams);
N
N    /* configure device */
N    vDMC_Init(&stDeviceParams);
N 
N#ifdef CR4DEBUG_ENABLE    
N    /* Cortex R4 Debug Port enable/disable 1: Debug Port disabled 0: Debug Port enabled */
N    *((volatile uint32_t *) 0xC0000410U) = 0x00;      /* enable CR4DEBUG  RYZ for CS/MP chip debug */
N#endif
N}
N
N
N/****************************************************************************/
N
Nbool_t boGetMemDeviceParams(mem_device_st *pstDeviceParams)
N{
N    bool_t boResult = C_TRUE;
X    bool_t boResult = (1);
N    dmc_dev_type_e  eDMC_DeviceType = DEV_INVALID_TYPE;    
N    
N    eDMC_DeviceType = DMC_DEVICE_TYPE;
X    eDMC_DeviceType = (DEV_MT46H16M32LFB5);
N    
N    switch(eDMC_DeviceType)
N    {
N        case DEV_MT46H8M32LFB5:                                            /* DEV_MT46H8M32LFB5-6 */
N            pstDeviceParams->eType            = DMC_TYPE_LPDDR;            /* MEMORY_TYPE */
N            pstDeviceParams->eWidth           = DMC_BUSWIDTH_32BIT;        /* MEMORY_WIDTH */
N            pstDeviceParams->eClock_rate      = DMC_CLOCK_RATE_166MHz;     /* MEMORY_CLOCK_RATE */
N            pstDeviceParams->u32GearRatio_0   = 0x3ffU;                    /* GEAR_RATIO_0  */
N            pstDeviceParams->u32GearRatio_1   = 0x3ffU;                    /* GEAR_RATIO_1  */
N            pstDeviceParams->u32GearRatio_2   = 0x3ffU;                    /* GEAR_RATIO_2  */
N            pstDeviceParams->u32GearRatio_3   = 0x3ffU;                    /* GEAR_RATIO_3  */
N            pstDeviceParams->u32T_CAS         = 0x00000006U;               /* MEMORY_T_CAS */
N            pstDeviceParams->u32T_RAS         = 0x00000007U;               /* MEMORY_T_RAS */
N            pstDeviceParams->u32T_MRD         = 0x00000002U;               /* MEMORY_T_MRD */
N            pstDeviceParams->u32T_RC          = 0x0000000BU;               /* MEMORY_T_RC  */
N            pstDeviceParams->u32T_RCD         = 0x00000003U;               /* MEMORY_T_RCD */
N            pstDeviceParams->u32T_RFC         = 0x00000212U;               /* MEMORY_T_RFC */
N            pstDeviceParams->u32T_RP          = 0x0000001DU;               /* MEMORY_T_RP  */
N            pstDeviceParams->u32T_RRD         = 0x00000002U;               /* MEMORY_T_RRD */
N            pstDeviceParams->u32T_WR          = 0x00000003U;               /* MEMORY_T_WR  */
N            pstDeviceParams->u32T_WTR         = 0x00000002U;               /* MEMORY_T_WTR */
N            pstDeviceParams->u32T_XP          = 0x00000001U;               /* MEMORY_T_XP  */
N            pstDeviceParams->u32T_XSR         = 0x0000000CU;               /* MEMORY_T_XSR */
N            pstDeviceParams->u32T_ESR         = 0x00000014U;               /* MEMORY_T_ESR */
N        break;
N        case DEV_MT46H16M32LFB5:                                           /* DEV_MT46H16M32LFB5-6 */
N            pstDeviceParams->eType            = DMC_TYPE_LPDDR;            /* MEMORY_TYPE */
N            pstDeviceParams->eWidth           = DMC_BUSWIDTH_32BIT;        /* MEMORY_WIDTH */
N            pstDeviceParams->eClock_rate      = DMC_CLOCK_RATE_166MHz;     /* MEMORY_CLOCK_RATE */
N            pstDeviceParams->u32GearRatio_0   = 0x3ffU;                    /* GEAR_RATIO_0  */
N            pstDeviceParams->u32GearRatio_1   = 0x3ffU;                    /* GEAR_RATIO_1  */
N            pstDeviceParams->u32GearRatio_2   = 0x3ffU;                    /* GEAR_RATIO_2  */
N            pstDeviceParams->u32GearRatio_3   = 0x3ffU;                    /* GEAR_RATIO_3  */
N            pstDeviceParams->u32T_CAS         = 0x00000006U;               /* MEMORY_T_CAS */
N            pstDeviceParams->u32T_RAS         = 0x00000007U;               /* MEMORY_T_RAS */
N            pstDeviceParams->u32T_MRD         = 0x00000002U;               /* MEMORY_T_MRD */
N            pstDeviceParams->u32T_RC          = 0x0000000BU;               /* MEMORY_T_RC  */
N            pstDeviceParams->u32T_RCD         = 0x00000003U;               /* MEMORY_T_RCD */
N            pstDeviceParams->u32T_RFC         = 0x00000212U;               /* MEMORY_T_RFC */
N            pstDeviceParams->u32T_RP          = 0x0000001DU;               /* MEMORY_T_RP  */
N            pstDeviceParams->u32T_RRD         = 0x00000002U;               /* MEMORY_T_RRD */
N            pstDeviceParams->u32T_WR          = 0x00000003U;               /* MEMORY_T_WR  */
N            pstDeviceParams->u32T_WTR         = 0x00000002U;               /* MEMORY_T_WTR */
N            pstDeviceParams->u32T_XP          = 0x00000001U;               /* MEMORY_T_XP  */
N            pstDeviceParams->u32T_XSR         = 0x0000000CU;               /* MEMORY_T_XSR */
N            pstDeviceParams->u32T_ESR         = 0x00000014U;               /* MEMORY_T_ESR */
N        break;
N        case DEV_IS42S32800D:                                              /* DEV_IS42S32800D-6 */
N            pstDeviceParams->eType            = DMC_TYPE_SDRAM;            /* MEMORY_TYPE */
N            pstDeviceParams->eWidth           = DMC_BUSWIDTH_32BIT;        /* MEMORY_WIDTH */
N            pstDeviceParams->eClock_rate      = DMC_CLOCK_RATE_166MHz;     /* MEMORY_CLOCK_RATE */
N            pstDeviceParams->u32GearRatio_0   = 0x3ffU;                    /* GEAR_RATIO_0  */
N            pstDeviceParams->u32GearRatio_1   = 0x3ffU;                    /* GEAR_RATIO_1  */
N            pstDeviceParams->u32GearRatio_2   = 0x3ffU;                    /* GEAR_RATIO_2  */
N            pstDeviceParams->u32GearRatio_3   = 0x3ffU;                    /* GEAR_RATIO_3  */
N            pstDeviceParams->u32T_CAS         = 0x00000006U;               /* MEMORY_T_CAS */
N            pstDeviceParams->u32T_RAS         = 0x00000007U;               /* MEMORY_T_RAS */
N            pstDeviceParams->u32T_MRD         = 0x00000002U;               /* MEMORY_T_MRD */
N            pstDeviceParams->u32T_RC          = 0x0000000BU;               /* MEMORY_T_RC  */
N            pstDeviceParams->u32T_RCD         = 0x00000003U;               /* MEMORY_T_RCD */
N            pstDeviceParams->u32T_RFC         = 0x00000212U;               /* MEMORY_T_RFC */
N            pstDeviceParams->u32T_RP          = 0x0000001DU;               /* MEMORY_T_RP  */
N            pstDeviceParams->u32T_RRD         = 0x00000002U;               /* MEMORY_T_RRD */
N            pstDeviceParams->u32T_WR          = 0x00000003U;               /* MEMORY_T_WR  */
N            pstDeviceParams->u32T_WTR         = 0x00000002U;               /* MEMORY_T_WTR */
N            pstDeviceParams->u32T_XP          = 0x00000001U;               /* MEMORY_T_XP  */
N            pstDeviceParams->u32T_XSR         = 0x0000000CU;               /* MEMORY_T_XSR */
N            pstDeviceParams->u32T_ESR         = 0x00000014U;               /* MEMORY_T_ESR */
N        break;
N        default:
N            boResult = C_TRUE;
X            boResult = (1);
N            break;
N    }
N    return boResult;
N}
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section text = default
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#pragma arm section code 
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N/***************************************************************************/
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
