; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\icons.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\icons.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\icons.crf ..\..\usecases\src\icons.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vBLControl PROC
;;;1020   */
;;;1021   void vBLControl(gpio_portpin_e ePin, uint8_t u8stat, uint8_t u8flagon)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1022   {
000004  e1a06000          MOV      r6,r0
000008  e1a04001          MOV      r4,r1
00000c  e1a05002          MOV      r5,r2
;;;1023   	if(ePin != (gpio_portpin_e)0)
000010  e3560000          CMP      r6,#0
000014  0a00000e          BEQ      |L1.84|
;;;1024   	{
;;;1025   		if(u8stat == 0x1)  //开
000018  e3540001          CMP      r4,#1
00001c  1a000003          BNE      |L1.48|
;;;1026   		{
;;;1027   			i32GPIO_SetPinState(ePin,(gpio_state_e)u8flagon);
000020  e1a01005          MOV      r1,r5
000024  e1a00006          MOV      r0,r6
000028  ebfffffe          BL       i32GPIO_SetPinState
00002c  ea000005          B        |L1.72|
                  |L1.48|
;;;1028   		}
;;;1029   		else if(u8stat == 0x0)
000030  e3540000          CMP      r4,#0
000034  1a000003          BNE      |L1.72|
;;;1030   		{
;;;1031   			i32GPIO_SetPinState(ePin, (gpio_state_e)(GPIO_HIGH - u8flagon));
000038  e2650001          RSB      r0,r5,#1
00003c  e20010ff          AND      r1,r0,#0xff
000040  e1a00006          MOV      r0,r6
000044  ebfffffe          BL       i32GPIO_SetPinState
                  |L1.72|
;;;1032   		}
;;;1033   		i32GPIO_SetPinDirection(ePin, GPIO_OUTPUT);
000048  e3a01000          MOV      r1,#0
00004c  e1a00006          MOV      r0,r6
000050  ebfffffe          BL       i32GPIO_SetPinDirection
                  |L1.84|
;;;1034   	}
;;;1035   }
000054  e8bd8070          POP      {r4-r6,pc}
;;;1036   
                          ENDP

                  vInitIcons PROC
;;;49     **********************************************/
;;;50     void vInitIcons(void)
000058  e92d401c          PUSH     {r2-r4,lr}
;;;51     {
;;;52     
;;;53     	gf_cliprect_st stPart;
;;;54     	uint32_t back_color = 0x000000ff;
00005c  e3a040ff          MOV      r4,#0xff
;;;55     	
;;;56     	stPart.u16SrcOffsX = 0;
000060  e3a00000          MOV      r0,#0
000064  e1cd00b0          STRH     r0,[sp,#0]
;;;57     	stPart.u16SrcOffsY = 0;
000068  e1cd00b2          STRH     r0,[sp,#2]
;;;58     	stPart.u16Width    = 1280;
00006c  e3000500          MOVW     r0,#0x500
000070  e1cd00b4          STRH     r0,[sp,#4]
;;;59     	stPart.u16Height   = 420;
000074  e30001a4          MOVW     r0,#0x1a4
000078  e1cd00b6          STRH     r0,[sp,#6]
;;;60     	
;;;61     
;;;62     	vGfLayerFillArea(&stGDC0LayerA, &stPart,back_color );
00007c  e1a02004          MOV      r2,r4
000080  e1a0100d          MOV      r1,sp
000084  e59f0edc          LDR      r0,|L1.3944|
000088  ebfffffe          BL       vGfLayerFillArea
;;;63     	vGfListExecute();
00008c  ebfffffe          BL       vGfListExecute
;;;64     
;;;65         // get image out of flash
;;;66         vGfSetStateFadeMode(BLT_FADE_ALPHA);
000090  e3a00002          MOV      r0,#2
000094  ebfffffe          BL       vGfSetStateFadeMode
;;;67         vGfSetStateFadingFactor(0xff);
000098  e3a000ff          MOV      r0,#0xff
00009c  ebfffffe          BL       vGfSetStateFadingFactor
;;;68         u32GfBuffBlitBitmapFull(&stImage_needle_1, &stImage_needle_final, 0, 0);
0000a0  e3a03000          MOV      r3,#0
0000a4  e1a02003          MOV      r2,r3
0000a8  e59f1ebc          LDR      r1,|L1.3948|
0000ac  e59f0ebc          LDR      r0,|L1.3952|
0000b0  ebfffffe          BL       u32GfBuffBlitBitmapFull
;;;69         vGfListExecute();
0000b4  ebfffffe          BL       vGfListExecute
;;;70         vGfSetStateFadingFactor(0xFF);
0000b8  e3a000ff          MOV      r0,#0xff
0000bc  ebfffffe          BL       vGfSetStateFadingFactor
;;;71         vGfSetStateFadeMode(BLT_NOFADING);	
0000c0  e3a00000          MOV      r0,#0
0000c4  ebfffffe          BL       vGfSetStateFadeMode
;;;72     
;;;73     	vInitIconTable();
0000c8  ebfffffe          BL       vInitIconTable
;;;74     	i32GDC_SetCommonAlpha(GDC0,GDC_SEG_LAYER_A,0xff);
0000cc  e3a020ff          MOV      r2,#0xff
0000d0  e3a01001          MOV      r1,#1
0000d4  e3a00000          MOV      r0,#0
0000d8  ebfffffe          BL       i32GDC_SetCommonAlpha
;;;75     	vGfShowLayer(GDC0, &stGDC0LayerA);	
0000dc  e59f1e84          LDR      r1,|L1.3944|
0000e0  e3a00000          MOV      r0,#0
0000e4  ebfffffe          BL       vGfShowLayer
;;;76     
;;;77     
;;;78     	vBLControl(BL_EN_PIN, 1, BL_ON_GP_STAT);
0000e8  e3a02001          MOV      r2,#1
0000ec  e1a01002          MOV      r1,r2
0000f0  e3a00090          MOV      r0,#0x90
0000f4  ebfffffe          BL       vBLControl
;;;79     	vBLControl(BL_ADJ_PIN, 1, BLADJ_ON_GP_STAT);
0000f8  e3a02001          MOV      r2,#1
0000fc  e1a01002          MOV      r1,r2
000100  e3a0008f          MOV      r0,#0x8f
000104  ebfffffe          BL       vBLControl
;;;80     
;;;81     }
000108  e8bd801c          POP      {r2-r4,pc}
;;;82     
                          ENDP

                  vShowPowerOnLogo PROC
;;;83     
;;;84     void vShowPowerOnLogo(void)
00010c  e92d4010          PUSH     {r4,lr}
;;;85     {
;;;86     	vGfLayerBlitBitmapFull(&stImage_FirstLogo, &stGDC0LayerA, 0, 0);
000110  e3a03000          MOV      r3,#0
000114  e1a02003          MOV      r2,r3
000118  e59f1e48          LDR      r1,|L1.3944|
00011c  e59f0e50          LDR      r0,|L1.3956|
000120  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;87     	vGfListExecute();
000124  ebfffffe          BL       vGfListExecute
;;;88     	vGfLayerSwitchBufferSync(GDC0, &stGDC0LayerA);	
000128  e59f1e38          LDR      r1,|L1.3944|
00012c  e3a00000          MOV      r0,#0
000130  ebfffffe          BL       vGfLayerSwitchBufferSync
;;;89     	
;;;90     }
000134  e8bd8010          POP      {r4,pc}
;;;91     
                          ENDP

                  vShowNumberAT PROC
;;;92     uint16_t chargex, chargey;
;;;93     void vShowNumberAT(model_index_et etmp,font_et efont,uint32_t num,uint8_t u8pt)
000138  e92d4fff          PUSH     {r0-r11,lr}
;;;94     {
00013c  e24dd014          SUB      sp,sp,#0x14
000140  e1a05000          MOV      r5,r0
000144  e1a0b001          MOV      r11,r1
000148  e1a07002          MOV      r7,r2
;;;95     	uint8_t u8table[8];  //u8table[7]记录有多少位数值
;;;96     	uint8_t u8dpnumber = 0;
00014c  e3a0a000          MOV      r10,#0
;;;97     	uint16_t tmpx,tmpy;
;;;98     	uint8_t u8iCount = 0;
000150  e3a09000          MOV      r9,#0
;;;99     	uint8_t u8tmp;
;;;100    	uint32_t u32tmp = 1;
000154  e3a08001          MOV      r8,#1
;;;101    	tmpx = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][0];
000158  e2450041          SUB      r0,r5,#0x41
00015c  e59f1e14          LDR      r1,|L1.3960|
000160  e0810100          ADD      r0,r1,r0,LSL #2
000164  e1d060b0          LDRH     r6,[r0,#0]
;;;102    	tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1];
000168  e2450041          SUB      r0,r5,#0x41
00016c  e0810100          ADD      r0,r1,r0,LSL #2
000170  e1d000b2          LDRH     r0,[r0,#2]
000174  e58d0008          STR      r0,[sp,#8]
;;;103    	if(1 == u8pt)    //如果带小数点
000178  e59d0020          LDR      r0,[sp,#0x20]
00017c  e3500001          CMP      r0,#1
000180  1a000139          BNE      |L1.1644|
;;;104    	{
;;;105    		u8dpnumber = num % 10;
000184  e3a0100a          MOV      r1,#0xa
000188  e1a00007          MOV      r0,r7
00018c  ebfffffe          BL       __aeabi_uidivmod
000190  e1a0a001          MOV      r10,r1
;;;106    		num = num / 10;
000194  e3a0100a          MOV      r1,#0xa
000198  e1a00007          MOV      r0,r7
00019c  ebfffffe          BL       __aeabi_uidiv
0001a0  e1a07000          MOV      r7,r0
;;;107    		if(num > 99999) num = 99999; 
0001a4  e59f0dd0          LDR      r0,|L1.3964|
0001a8  e1570000          CMP      r7,r0
0001ac  9a000000          BLS      |L1.436|
0001b0  e1a07000          MOV      r7,r0
                  |L1.436|
;;;108    		if(num >= 1000000) u8table[7] = 7;
0001b4  e59f0dc4          LDR      r0,|L1.3968|
0001b8  e1570000          CMP      r7,r0
0001bc  3a000002          BCC      |L1.460|
0001c0  e3a00007          MOV      r0,#7
0001c4  e5cd0013          STRB     r0,[sp,#0x13]
0001c8  ea00001c          B        |L1.576|
                  |L1.460|
;;;109    		else if(num >= 100000) u8table[7] = 6;
0001cc  e59f0db0          LDR      r0,|L1.3972|
0001d0  e1570000          CMP      r7,r0
0001d4  3a000002          BCC      |L1.484|
0001d8  e3a00006          MOV      r0,#6
0001dc  e5cd0013          STRB     r0,[sp,#0x13]
0001e0  ea000016          B        |L1.576|
                  |L1.484|
;;;110    		else if(num >= 10000) u8table[7] = 5;
0001e4  e3020710          MOV      r0,#0x2710
0001e8  e1570000          CMP      r7,r0
0001ec  3a000002          BCC      |L1.508|
0001f0  e3a00005          MOV      r0,#5
0001f4  e5cd0013          STRB     r0,[sp,#0x13]
0001f8  ea000010          B        |L1.576|
                  |L1.508|
;;;111    		else if(num >= 1000) u8table[7] = 4;
0001fc  e3570ffa          CMP      r7,#0x3e8
000200  3a000002          BCC      |L1.528|
000204  e3a00004          MOV      r0,#4
000208  e5cd0013          STRB     r0,[sp,#0x13]
00020c  ea00000b          B        |L1.576|
                  |L1.528|
;;;112    		else if(num >= 100) u8table[7] = 3;
000210  e3570064          CMP      r7,#0x64
000214  3a000002          BCC      |L1.548|
000218  e3a00003          MOV      r0,#3
00021c  e5cd0013          STRB     r0,[sp,#0x13]
000220  ea000006          B        |L1.576|
                  |L1.548|
;;;113    		else if(num >= 10) u8table[7] = 2;
000224  e357000a          CMP      r7,#0xa
000228  3a000002          BCC      |L1.568|
00022c  e3a00002          MOV      r0,#2
000230  e5cd0013          STRB     r0,[sp,#0x13]
000234  ea000001          B        |L1.576|
                  |L1.568|
;;;114    		else u8table[7] = 1;
000238  e3a00001          MOV      r0,#1
00023c  e5cd0013          STRB     r0,[sp,#0x13]
                  |L1.576|
;;;115    
;;;116    		if(efont == FONT1115_ee)
000240  e35b0001          CMP      r11,#1
000244  1a000056          BNE      |L1.932|
;;;117    		{
;;;118    			tmpx -= stImage_font[u8dpnumber].u16Width;
000248  e08a010a          ADD      r0,r10,r10,LSL #2
00024c  e59f1d34          LDR      r1,|L1.3976|
000250  e0810100          ADD      r0,r1,r0,LSL #2
000254  e1d000b4          LDRH     r0,[r0,#4]
000258  e0460000          SUB      r0,r6,r0
00025c  e6ff6070          UXTH     r6,r0
;;;119    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8dpnumber].u16Height;
000260  e2450041          SUB      r0,r5,#0x41
000264  e59f1d0c          LDR      r1,|L1.3960|
000268  e0810100          ADD      r0,r1,r0,LSL #2
00026c  e1d000b2          LDRH     r0,[r0,#2]
000270  e08a110a          ADD      r1,r10,r10,LSL #2
000274  e59f2d0c          LDR      r2,|L1.3976|
000278  e0821101          ADD      r1,r2,r1,LSL #2
00027c  e1d110b6          LDRH     r1,[r1,#6]
000280  e0400001          SUB      r0,r0,r1
000284  e6ff0070          UXTH     r0,r0
000288  e58d0008          STR      r0,[sp,#8]
;;;120    			u32GfLayerBlendBitmapFull(&stImage_font[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
00028c  e08a110a          ADD      r1,r10,r10,LSL #2
000290  e0820101          ADD      r0,r2,r1,LSL #2
000294  e1a02006          MOV      r2,r6
000298  e59f1cc8          LDR      r1,|L1.3944|
00029c  e59d3008          LDR      r3,[sp,#8]
0002a0  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;121    			vGfListExecute();
0002a4  ebfffffe          BL       vGfListExecute
;;;122    			tmpx -= stImage_font[10].u16Width;
0002a8  e59f0cd8          LDR      r0,|L1.3976|
0002ac  e1d00cbc          LDRH     r0,[r0,#0xcc]
0002b0  e0460000          SUB      r0,r6,r0
0002b4  e6ff6070          UXTH     r6,r0
;;;123    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[10].u16Height;
0002b8  e2450041          SUB      r0,r5,#0x41
0002bc  e59f1cb4          LDR      r1,|L1.3960|
0002c0  e0810100          ADD      r0,r1,r0,LSL #2
0002c4  e1d000b2          LDRH     r0,[r0,#2]
0002c8  e59f1cb8          LDR      r1,|L1.3976|
0002cc  e1d11cbe          LDRH     r1,[r1,#0xce]
0002d0  e0400001          SUB      r0,r0,r1
0002d4  e6ff0070          UXTH     r0,r0
0002d8  e58d0008          STR      r0,[sp,#8]
;;;124    			u32GfLayerBlendBitmapFull(&stImage_font[10], &stGDC0LayerA, tmpx, tmpy);
0002dc  e1a02006          MOV      r2,r6
0002e0  e59f1c80          LDR      r1,|L1.3944|
0002e4  e59f0ca0          LDR      r0,|L1.3980|
0002e8  e59d3008          LDR      r3,[sp,#8]
0002ec  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;125    			vGfListExecute();
0002f0  ebfffffe          BL       vGfListExecute
;;;126    			u32tmp = 1;
0002f4  e3a08001          MOV      r8,#1
;;;127    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
0002f8  e3a09001          MOV      r9,#1
0002fc  ea000024          B        |L1.916|
                  |L1.768|
;;;128    			{
;;;129    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000300  e0880108          ADD      r0,r8,r8,LSL #2
000304  e1a01080          LSL      r1,r0,#1
000308  e1a00007          MOV      r0,r7
00030c  ebfffffe          BL       __aeabi_uidivmod
000310  e58d1004          STR      r1,[sp,#4]
000314  e1a01008          MOV      r1,r8
000318  e59d0004          LDR      r0,[sp,#4]
00031c  ebfffffe          BL       __aeabi_uidiv
000320  e20040ff          AND      r4,r0,#0xff
;;;130    				u32tmp = 10 * u32tmp;
000324  e0880108          ADD      r0,r8,r8,LSL #2
000328  e1a08080          LSL      r8,r0,#1
;;;131    				tmpx -= stImage_font[u8tmp].u16Width;
00032c  e0840104          ADD      r0,r4,r4,LSL #2
000330  e59f1c50          LDR      r1,|L1.3976|
000334  e0810100          ADD      r0,r1,r0,LSL #2
000338  e1d000b4          LDRH     r0,[r0,#4]
00033c  e0460000          SUB      r0,r6,r0
000340  e6ff6070          UXTH     r6,r0
;;;132    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8tmp].u16Height;
000344  e2450041          SUB      r0,r5,#0x41
000348  e59f1c28          LDR      r1,|L1.3960|
00034c  e0810100          ADD      r0,r1,r0,LSL #2
000350  e1d000b2          LDRH     r0,[r0,#2]
000354  e0841104          ADD      r1,r4,r4,LSL #2
000358  e59f2c28          LDR      r2,|L1.3976|
00035c  e0821101          ADD      r1,r2,r1,LSL #2
000360  e1d110b6          LDRH     r1,[r1,#6]
000364  e0400001          SUB      r0,r0,r1
000368  e6ff0070          UXTH     r0,r0
00036c  e58d0008          STR      r0,[sp,#8]
;;;133    				u32GfLayerBlendBitmapFull(&stImage_font[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000370  e0841104          ADD      r1,r4,r4,LSL #2
000374  e0820101          ADD      r0,r2,r1,LSL #2
000378  e1a02006          MOV      r2,r6
00037c  e59f1be4          LDR      r1,|L1.3944|
000380  e59d3008          LDR      r3,[sp,#8]
000384  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;134    				vGfListExecute();
000388  ebfffffe          BL       vGfListExecute
00038c  e2890001          ADD      r0,r9,#1              ;127
000390  e20090ff          AND      r9,r0,#0xff           ;127
                  |L1.916|
000394  e5dd0013          LDRB     r0,[sp,#0x13]         ;127
000398  e1500009          CMP      r0,r9                 ;127
00039c  aaffffd7          BGE      |L1.768|
0003a0  ea0003d8          B        |L1.4872|
                  |L1.932|
;;;135    			}
;;;136    		}
;;;137    		else if(efont == FONT2418_ee)
0003a4  e35b0000          CMP      r11,#0
0003a8  1a000056          BNE      |L1.1288|
;;;138    		{
;;;139    			tmpx -= stImage_digifont[u8dpnumber].u16Width;
0003ac  e08a010a          ADD      r0,r10,r10,LSL #2
0003b0  e59f1bd8          LDR      r1,|L1.3984|
0003b4  e0810100          ADD      r0,r1,r0,LSL #2
0003b8  e1d000b4          LDRH     r0,[r0,#4]
0003bc  e0460000          SUB      r0,r6,r0
0003c0  e6ff6070          UXTH     r6,r0
;;;140    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8dpnumber].u16Height;
0003c4  e2450041          SUB      r0,r5,#0x41
0003c8  e59f1ba8          LDR      r1,|L1.3960|
0003cc  e0810100          ADD      r0,r1,r0,LSL #2
0003d0  e1d000b2          LDRH     r0,[r0,#2]
0003d4  e08a110a          ADD      r1,r10,r10,LSL #2
0003d8  e59f2bb0          LDR      r2,|L1.3984|
0003dc  e0821101          ADD      r1,r2,r1,LSL #2
0003e0  e1d110b6          LDRH     r1,[r1,#6]
0003e4  e0400001          SUB      r0,r0,r1
0003e8  e6ff0070          UXTH     r0,r0
0003ec  e58d0008          STR      r0,[sp,#8]
;;;141    			u32GfLayerBlendBitmapFull(&stImage_digifont[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
0003f0  e08a110a          ADD      r1,r10,r10,LSL #2
0003f4  e0820101          ADD      r0,r2,r1,LSL #2
0003f8  e1a02006          MOV      r2,r6
0003fc  e59f1b64          LDR      r1,|L1.3944|
000400  e59d3008          LDR      r3,[sp,#8]
000404  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;142    			vGfListExecute();
000408  ebfffffe          BL       vGfListExecute
;;;143    			tmpx -= stImage_font[10].u16Width;
00040c  e59f0b74          LDR      r0,|L1.3976|
000410  e1d00cbc          LDRH     r0,[r0,#0xcc]
000414  e0460000          SUB      r0,r6,r0
000418  e6ff6070          UXTH     r6,r0
;;;144    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[10].u16Height;
00041c  e2450041          SUB      r0,r5,#0x41
000420  e59f1b50          LDR      r1,|L1.3960|
000424  e0810100          ADD      r0,r1,r0,LSL #2
000428  e1d000b2          LDRH     r0,[r0,#2]
00042c  e59f1b54          LDR      r1,|L1.3976|
000430  e1d11cbe          LDRH     r1,[r1,#0xce]
000434  e0400001          SUB      r0,r0,r1
000438  e6ff0070          UXTH     r0,r0
00043c  e58d0008          STR      r0,[sp,#8]
;;;145    			u32GfLayerBlendBitmapFull(&stImage_font[10], &stGDC0LayerA, tmpx, tmpy);
000440  e1a02006          MOV      r2,r6
000444  e59f1b1c          LDR      r1,|L1.3944|
000448  e59f0b3c          LDR      r0,|L1.3980|
00044c  e59d3008          LDR      r3,[sp,#8]
000450  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;146    			vGfListExecute();
000454  ebfffffe          BL       vGfListExecute
;;;147    			u32tmp = 1;
000458  e3a08001          MOV      r8,#1
;;;148    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
00045c  e3a09001          MOV      r9,#1
000460  ea000024          B        |L1.1272|
                  |L1.1124|
;;;149    			{
;;;150    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000464  e0880108          ADD      r0,r8,r8,LSL #2
000468  e1a01080          LSL      r1,r0,#1
00046c  e1a00007          MOV      r0,r7
000470  ebfffffe          BL       __aeabi_uidivmod
000474  e58d1004          STR      r1,[sp,#4]
000478  e1a01008          MOV      r1,r8
00047c  e59d0004          LDR      r0,[sp,#4]
000480  ebfffffe          BL       __aeabi_uidiv
000484  e20040ff          AND      r4,r0,#0xff
;;;151    				u32tmp = 10 * u32tmp;
000488  e0880108          ADD      r0,r8,r8,LSL #2
00048c  e1a08080          LSL      r8,r0,#1
;;;152    				tmpx -= stImage_digifont[u8tmp].u16Width;
000490  e0840104          ADD      r0,r4,r4,LSL #2
000494  e59f1af4          LDR      r1,|L1.3984|
000498  e0810100          ADD      r0,r1,r0,LSL #2
00049c  e1d000b4          LDRH     r0,[r0,#4]
0004a0  e0460000          SUB      r0,r6,r0
0004a4  e6ff6070          UXTH     r6,r0
;;;153    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8tmp].u16Height;
0004a8  e2450041          SUB      r0,r5,#0x41
0004ac  e59f1ac4          LDR      r1,|L1.3960|
0004b0  e0810100          ADD      r0,r1,r0,LSL #2
0004b4  e1d000b2          LDRH     r0,[r0,#2]
0004b8  e0841104          ADD      r1,r4,r4,LSL #2
0004bc  e59f2acc          LDR      r2,|L1.3984|
0004c0  e0821101          ADD      r1,r2,r1,LSL #2
0004c4  e1d110b6          LDRH     r1,[r1,#6]
0004c8  e0400001          SUB      r0,r0,r1
0004cc  e6ff0070          UXTH     r0,r0
0004d0  e58d0008          STR      r0,[sp,#8]
;;;154    				u32GfLayerBlendBitmapFull(&stImage_digifont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
0004d4  e0841104          ADD      r1,r4,r4,LSL #2
0004d8  e0820101          ADD      r0,r2,r1,LSL #2
0004dc  e1a02006          MOV      r2,r6
0004e0  e59f1a80          LDR      r1,|L1.3944|
0004e4  e59d3008          LDR      r3,[sp,#8]
0004e8  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;155    				vGfListExecute();
0004ec  ebfffffe          BL       vGfListExecute
0004f0  e2890001          ADD      r0,r9,#1              ;148
0004f4  e20090ff          AND      r9,r0,#0xff           ;148
                  |L1.1272|
0004f8  e5dd0013          LDRB     r0,[sp,#0x13]         ;148
0004fc  e1500009          CMP      r0,r9                 ;148
000500  aaffffd7          BGE      |L1.1124|
000504  ea00037f          B        |L1.4872|
                  |L1.1288|
;;;156    			}
;;;157    
;;;158    		}
;;;159    		else if(efont == FONT0816_ee)
000508  e35b0002          CMP      r11,#2
00050c  1a00037d          BNE      |L1.4872|
;;;160    		{
;;;161    			tmpx -= stImage_wfont[u8dpnumber].u16Width;
000510  e08a010a          ADD      r0,r10,r10,LSL #2
000514  e59f1a78          LDR      r1,|L1.3988|
000518  e0810100          ADD      r0,r1,r0,LSL #2
00051c  e1d000b4          LDRH     r0,[r0,#4]
000520  e0460000          SUB      r0,r6,r0
000524  e6ff6070          UXTH     r6,r0
;;;162    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8dpnumber].u16Height;
000528  e2450041          SUB      r0,r5,#0x41
00052c  e59f1a44          LDR      r1,|L1.3960|
000530  e0810100          ADD      r0,r1,r0,LSL #2
000534  e1d000b2          LDRH     r0,[r0,#2]
000538  e08a110a          ADD      r1,r10,r10,LSL #2
00053c  e59f2a50          LDR      r2,|L1.3988|
000540  e0821101          ADD      r1,r2,r1,LSL #2
000544  e1d110b6          LDRH     r1,[r1,#6]
000548  e0400001          SUB      r0,r0,r1
00054c  e6ff0070          UXTH     r0,r0
000550  e58d0008          STR      r0,[sp,#8]
;;;163    			u32GfLayerBlendBitmapFull(&stImage_wfont[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
000554  e08a110a          ADD      r1,r10,r10,LSL #2
000558  e0820101          ADD      r0,r2,r1,LSL #2
00055c  e1a02006          MOV      r2,r6
000560  e59f1a00          LDR      r1,|L1.3944|
000564  e59d3008          LDR      r3,[sp,#8]
000568  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;164    			vGfListExecute();
00056c  ebfffffe          BL       vGfListExecute
;;;165    			tmpx -= stImage_wfont[10].u16Width;
000570  e59f0a1c          LDR      r0,|L1.3988|
000574  e1d00cbc          LDRH     r0,[r0,#0xcc]
000578  e0460000          SUB      r0,r6,r0
00057c  e6ff6070          UXTH     r6,r0
;;;166    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[10].u16Height;
000580  e2450041          SUB      r0,r5,#0x41
000584  e59f19ec          LDR      r1,|L1.3960|
000588  e0810100          ADD      r0,r1,r0,LSL #2
00058c  e1d000b2          LDRH     r0,[r0,#2]
000590  e59f19fc          LDR      r1,|L1.3988|
000594  e1d11cbe          LDRH     r1,[r1,#0xce]
000598  e0400001          SUB      r0,r0,r1
00059c  e6ff0070          UXTH     r0,r0
0005a0  e58d0008          STR      r0,[sp,#8]
;;;167    			u32GfLayerBlendBitmapFull(&stImage_wfont[10], &stGDC0LayerA, tmpx, tmpy);
0005a4  e1a02006          MOV      r2,r6
0005a8  e59f19b8          LDR      r1,|L1.3944|
0005ac  e59f09e4          LDR      r0,|L1.3992|
0005b0  e59d3008          LDR      r3,[sp,#8]
0005b4  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;168    			vGfListExecute();
0005b8  ebfffffe          BL       vGfListExecute
;;;169    			u32tmp = 1;
0005bc  e3a08001          MOV      r8,#1
;;;170    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
0005c0  e3a09001          MOV      r9,#1
0005c4  ea000024          B        |L1.1628|
                  |L1.1480|
;;;171    			{
;;;172    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
0005c8  e0880108          ADD      r0,r8,r8,LSL #2
0005cc  e1a01080          LSL      r1,r0,#1
0005d0  e1a00007          MOV      r0,r7
0005d4  ebfffffe          BL       __aeabi_uidivmod
0005d8  e58d1004          STR      r1,[sp,#4]
0005dc  e1a01008          MOV      r1,r8
0005e0  e59d0004          LDR      r0,[sp,#4]
0005e4  ebfffffe          BL       __aeabi_uidiv
0005e8  e20040ff          AND      r4,r0,#0xff
;;;173    				u32tmp = 10 * u32tmp;
0005ec  e0880108          ADD      r0,r8,r8,LSL #2
0005f0  e1a08080          LSL      r8,r0,#1
;;;174    				tmpx -= stImage_wfont[u8tmp].u16Width;
0005f4  e0840104          ADD      r0,r4,r4,LSL #2
0005f8  e59f1994          LDR      r1,|L1.3988|
0005fc  e0810100          ADD      r0,r1,r0,LSL #2
000600  e1d000b4          LDRH     r0,[r0,#4]
000604  e0460000          SUB      r0,r6,r0
000608  e6ff6070          UXTH     r6,r0
;;;175    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8tmp].u16Height;
00060c  e2450041          SUB      r0,r5,#0x41
000610  e59f1960          LDR      r1,|L1.3960|
000614  e0810100          ADD      r0,r1,r0,LSL #2
000618  e1d000b2          LDRH     r0,[r0,#2]
00061c  e0841104          ADD      r1,r4,r4,LSL #2
000620  e59f296c          LDR      r2,|L1.3988|
000624  e0821101          ADD      r1,r2,r1,LSL #2
000628  e1d110b6          LDRH     r1,[r1,#6]
00062c  e0400001          SUB      r0,r0,r1
000630  e6ff0070          UXTH     r0,r0
000634  e58d0008          STR      r0,[sp,#8]
;;;176    				u32GfLayerBlendBitmapFull(&stImage_wfont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000638  e0841104          ADD      r1,r4,r4,LSL #2
00063c  e0820101          ADD      r0,r2,r1,LSL #2
000640  e1a02006          MOV      r2,r6
000644  e59f191c          LDR      r1,|L1.3944|
000648  e59d3008          LDR      r3,[sp,#8]
00064c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;177    				vGfListExecute();
000650  ebfffffe          BL       vGfListExecute
000654  e2890001          ADD      r0,r9,#1              ;170
000658  e20090ff          AND      r9,r0,#0xff           ;170
                  |L1.1628|
00065c  e5dd0013          LDRB     r0,[sp,#0x13]         ;170
000660  e1500009          CMP      r0,r9                 ;170
000664  aaffffd7          BGE      |L1.1480|
000668  ea000326          B        |L1.4872|
                  |L1.1644|
;;;178    			}
;;;179    		}
;;;180    	}
;;;181    	else if(0 == u8pt)
00066c  e59d0020          LDR      r0,[sp,#0x20]
000670  e3500000          CMP      r0,#0
000674  1a0000b0          BNE      |L1.2364|
;;;182    	{
;;;183    		if(num > 9999999) num = 9999999; 
000678  e59f091c          LDR      r0,|L1.3996|
00067c  e1570000          CMP      r7,r0
000680  9a000000          BLS      |L1.1672|
000684  e1a07000          MOV      r7,r0
                  |L1.1672|
;;;184    		if(num >= 1000000) u8table[7] = 7;
000688  e59f08f0          LDR      r0,|L1.3968|
00068c  e1570000          CMP      r7,r0
000690  3a000002          BCC      |L1.1696|
000694  e3a00007          MOV      r0,#7
000698  e5cd0013          STRB     r0,[sp,#0x13]
00069c  ea00001c          B        |L1.1812|
                  |L1.1696|
;;;185    		else if(num >= 100000) u8table[7] = 6;
0006a0  e59f08dc          LDR      r0,|L1.3972|
0006a4  e1570000          CMP      r7,r0
0006a8  3a000002          BCC      |L1.1720|
0006ac  e3a00006          MOV      r0,#6
0006b0  e5cd0013          STRB     r0,[sp,#0x13]
0006b4  ea000016          B        |L1.1812|
                  |L1.1720|
;;;186    		else if(num >= 10000) u8table[7] = 5;
0006b8  e3020710          MOV      r0,#0x2710
0006bc  e1570000          CMP      r7,r0
0006c0  3a000002          BCC      |L1.1744|
0006c4  e3a00005          MOV      r0,#5
0006c8  e5cd0013          STRB     r0,[sp,#0x13]
0006cc  ea000010          B        |L1.1812|
                  |L1.1744|
;;;187    		else if(num >= 1000) u8table[7] = 4;
0006d0  e3570ffa          CMP      r7,#0x3e8
0006d4  3a000002          BCC      |L1.1764|
0006d8  e3a00004          MOV      r0,#4
0006dc  e5cd0013          STRB     r0,[sp,#0x13]
0006e0  ea00000b          B        |L1.1812|
                  |L1.1764|
;;;188    		else if(num >= 100) u8table[7] = 3;
0006e4  e3570064          CMP      r7,#0x64
0006e8  3a000002          BCC      |L1.1784|
0006ec  e3a00003          MOV      r0,#3
0006f0  e5cd0013          STRB     r0,[sp,#0x13]
0006f4  ea000006          B        |L1.1812|
                  |L1.1784|
;;;189    		else if(num >= 10) u8table[7] = 2;
0006f8  e357000a          CMP      r7,#0xa
0006fc  3a000002          BCC      |L1.1804|
000700  e3a00002          MOV      r0,#2
000704  e5cd0013          STRB     r0,[sp,#0x13]
000708  ea000001          B        |L1.1812|
                  |L1.1804|
;;;190    		else u8table[7] = 1;
00070c  e3a00001          MOV      r0,#1
000710  e5cd0013          STRB     r0,[sp,#0x13]
                  |L1.1812|
;;;191    		
;;;192    		if(efont == FONT1115_ee)
000714  e35b0001          CMP      r11,#1
000718  1a00002b          BNE      |L1.1996|
;;;193    		{
;;;194    			u32tmp = 1;
00071c  e3a08001          MOV      r8,#1
;;;195    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
000720  e3a09001          MOV      r9,#1
000724  ea000024          B        |L1.1980|
                  |L1.1832|
;;;196    			{
;;;197    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000728  e0880108          ADD      r0,r8,r8,LSL #2
00072c  e1a01080          LSL      r1,r0,#1
000730  e1a00007          MOV      r0,r7
000734  ebfffffe          BL       __aeabi_uidivmod
000738  e58d1004          STR      r1,[sp,#4]
00073c  e1a01008          MOV      r1,r8
000740  e59d0004          LDR      r0,[sp,#4]
000744  ebfffffe          BL       __aeabi_uidiv
000748  e20040ff          AND      r4,r0,#0xff
;;;198    				u32tmp = 10 * u32tmp;
00074c  e0880108          ADD      r0,r8,r8,LSL #2
000750  e1a08080          LSL      r8,r0,#1
;;;199    				tmpx -= stImage_font[u8tmp].u16Width;
000754  e0840104          ADD      r0,r4,r4,LSL #2
000758  e59f1828          LDR      r1,|L1.3976|
00075c  e0810100          ADD      r0,r1,r0,LSL #2
000760  e1d000b4          LDRH     r0,[r0,#4]
000764  e0460000          SUB      r0,r6,r0
000768  e6ff6070          UXTH     r6,r0
;;;200    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8tmp].u16Height;
00076c  e2450041          SUB      r0,r5,#0x41
000770  e59f1800          LDR      r1,|L1.3960|
000774  e0810100          ADD      r0,r1,r0,LSL #2
000778  e1d000b2          LDRH     r0,[r0,#2]
00077c  e0841104          ADD      r1,r4,r4,LSL #2
000780  e59f2800          LDR      r2,|L1.3976|
000784  e0821101          ADD      r1,r2,r1,LSL #2
000788  e1d110b6          LDRH     r1,[r1,#6]
00078c  e0400001          SUB      r0,r0,r1
000790  e6ff0070          UXTH     r0,r0
000794  e58d0008          STR      r0,[sp,#8]
;;;201    				u32GfLayerBlendBitmapFull(&stImage_font[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000798  e0841104          ADD      r1,r4,r4,LSL #2
00079c  e0820101          ADD      r0,r2,r1,LSL #2
0007a0  e1a02006          MOV      r2,r6
0007a4  e59f17bc          LDR      r1,|L1.3944|
0007a8  e59d3008          LDR      r3,[sp,#8]
0007ac  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;202    				vGfListExecute();
0007b0  ebfffffe          BL       vGfListExecute
0007b4  e2890001          ADD      r0,r9,#1              ;195
0007b8  e20090ff          AND      r9,r0,#0xff           ;195
                  |L1.1980|
0007bc  e5dd0013          LDRB     r0,[sp,#0x13]         ;195
0007c0  e1500009          CMP      r0,r9                 ;195
0007c4  aaffffd7          BGE      |L1.1832|
0007c8  ea0002ce          B        |L1.4872|
                  |L1.1996|
;;;203    			}
;;;204    		}
;;;205    		else if(efont == FONT2418_ee)
0007cc  e35b0000          CMP      r11,#0
0007d0  1a00002b          BNE      |L1.2180|
;;;206    		{
;;;207    			u32tmp = 1;
0007d4  e3a08001          MOV      r8,#1
;;;208    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
0007d8  e3a09001          MOV      r9,#1
0007dc  ea000024          B        |L1.2164|
                  |L1.2016|
;;;209    			{
;;;210    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
0007e0  e0880108          ADD      r0,r8,r8,LSL #2
0007e4  e1a01080          LSL      r1,r0,#1
0007e8  e1a00007          MOV      r0,r7
0007ec  ebfffffe          BL       __aeabi_uidivmod
0007f0  e58d1004          STR      r1,[sp,#4]
0007f4  e1a01008          MOV      r1,r8
0007f8  e59d0004          LDR      r0,[sp,#4]
0007fc  ebfffffe          BL       __aeabi_uidiv
000800  e20040ff          AND      r4,r0,#0xff
;;;211    				u32tmp = 10 * u32tmp;
000804  e0880108          ADD      r0,r8,r8,LSL #2
000808  e1a08080          LSL      r8,r0,#1
;;;212    				tmpx -= stImage_digifont[u8tmp].u16Width;
00080c  e0840104          ADD      r0,r4,r4,LSL #2
000810  e59f1778          LDR      r1,|L1.3984|
000814  e0810100          ADD      r0,r1,r0,LSL #2
000818  e1d000b4          LDRH     r0,[r0,#4]
00081c  e0460000          SUB      r0,r6,r0
000820  e6ff6070          UXTH     r6,r0
;;;213    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8tmp].u16Height;
000824  e2450041          SUB      r0,r5,#0x41
000828  e59f1748          LDR      r1,|L1.3960|
00082c  e0810100          ADD      r0,r1,r0,LSL #2
000830  e1d000b2          LDRH     r0,[r0,#2]
000834  e0841104          ADD      r1,r4,r4,LSL #2
000838  e59f2750          LDR      r2,|L1.3984|
00083c  e0821101          ADD      r1,r2,r1,LSL #2
000840  e1d110b6          LDRH     r1,[r1,#6]
000844  e0400001          SUB      r0,r0,r1
000848  e6ff0070          UXTH     r0,r0
00084c  e58d0008          STR      r0,[sp,#8]
;;;214    				u32GfLayerBlendBitmapFull(&stImage_digifont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000850  e0841104          ADD      r1,r4,r4,LSL #2
000854  e0820101          ADD      r0,r2,r1,LSL #2
000858  e1a02006          MOV      r2,r6
00085c  e59f1704          LDR      r1,|L1.3944|
000860  e59d3008          LDR      r3,[sp,#8]
000864  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;215    				vGfListExecute();
000868  ebfffffe          BL       vGfListExecute
00086c  e2890001          ADD      r0,r9,#1              ;208
000870  e20090ff          AND      r9,r0,#0xff           ;208
                  |L1.2164|
000874  e5dd0013          LDRB     r0,[sp,#0x13]         ;208
000878  e1500009          CMP      r0,r9                 ;208
00087c  aaffffd7          BGE      |L1.2016|
000880  ea0002a0          B        |L1.4872|
                  |L1.2180|
;;;216    			}
;;;217    		}
;;;218    		else if(efont == FONT0816_ee)
000884  e35b0002          CMP      r11,#2
000888  1a00029e          BNE      |L1.4872|
;;;219    		{
;;;220    			u32tmp = 1;
00088c  e3a08001          MOV      r8,#1
;;;221    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
000890  e3a09001          MOV      r9,#1
000894  ea000024          B        |L1.2348|
                  |L1.2200|
;;;222    			{
;;;223    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000898  e0880108          ADD      r0,r8,r8,LSL #2
00089c  e1a01080          LSL      r1,r0,#1
0008a0  e1a00007          MOV      r0,r7
0008a4  ebfffffe          BL       __aeabi_uidivmod
0008a8  e58d1004          STR      r1,[sp,#4]
0008ac  e1a01008          MOV      r1,r8
0008b0  e59d0004          LDR      r0,[sp,#4]
0008b4  ebfffffe          BL       __aeabi_uidiv
0008b8  e20040ff          AND      r4,r0,#0xff
;;;224    				u32tmp = 10 * u32tmp;
0008bc  e0880108          ADD      r0,r8,r8,LSL #2
0008c0  e1a08080          LSL      r8,r0,#1
;;;225    				tmpx -= stImage_wfont[u8tmp].u16Width;
0008c4  e0840104          ADD      r0,r4,r4,LSL #2
0008c8  e59f16c4          LDR      r1,|L1.3988|
0008cc  e0810100          ADD      r0,r1,r0,LSL #2
0008d0  e1d000b4          LDRH     r0,[r0,#4]
0008d4  e0460000          SUB      r0,r6,r0
0008d8  e6ff6070          UXTH     r6,r0
;;;226    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8tmp].u16Height;
0008dc  e2450041          SUB      r0,r5,#0x41
0008e0  e59f1690          LDR      r1,|L1.3960|
0008e4  e0810100          ADD      r0,r1,r0,LSL #2
0008e8  e1d000b2          LDRH     r0,[r0,#2]
0008ec  e0841104          ADD      r1,r4,r4,LSL #2
0008f0  e59f269c          LDR      r2,|L1.3988|
0008f4  e0821101          ADD      r1,r2,r1,LSL #2
0008f8  e1d110b6          LDRH     r1,[r1,#6]
0008fc  e0400001          SUB      r0,r0,r1
000900  e6ff0070          UXTH     r0,r0
000904  e58d0008          STR      r0,[sp,#8]
;;;227    				u32GfLayerBlendBitmapFull(&stImage_wfont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000908  e0841104          ADD      r1,r4,r4,LSL #2
00090c  e0820101          ADD      r0,r2,r1,LSL #2
000910  e1a02006          MOV      r2,r6
000914  e59f164c          LDR      r1,|L1.3944|
000918  e59d3008          LDR      r3,[sp,#8]
00091c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;228    				vGfListExecute();
000920  ebfffffe          BL       vGfListExecute
000924  e2890001          ADD      r0,r9,#1              ;221
000928  e20090ff          AND      r9,r0,#0xff           ;221
                  |L1.2348|
00092c  e5dd0013          LDRB     r0,[sp,#0x13]         ;221
000930  e1500009          CMP      r0,r9                 ;221
000934  aaffffd7          BGE      |L1.2200|
000938  ea000272          B        |L1.4872|
                  |L1.2364|
;;;229    			}
;;;230    		}		
;;;231    	}
;;;232    	else if(2 == u8pt)  //负数
00093c  e59d0020          LDR      r0,[sp,#0x20]
000940  e3500002          CMP      r0,#2
000944  1a0000e9          BNE      |L1.3312|
;;;233    	{
;;;234    		if(num > 999999) num = 999999; 
000948  e59f0650          LDR      r0,|L1.4000|
00094c  e1570000          CMP      r7,r0
000950  9a000000          BLS      |L1.2392|
000954  e1a07000          MOV      r7,r0
                  |L1.2392|
;;;235    		if(num >= 1000000) u8table[7] = 7;
000958  e59f0620          LDR      r0,|L1.3968|
00095c  e1570000          CMP      r7,r0
000960  3a000002          BCC      |L1.2416|
000964  e3a00007          MOV      r0,#7
000968  e5cd0013          STRB     r0,[sp,#0x13]
00096c  ea00001c          B        |L1.2532|
                  |L1.2416|
;;;236    		else if(num >= 100000) u8table[7] = 6;
000970  e59f060c          LDR      r0,|L1.3972|
000974  e1570000          CMP      r7,r0
000978  3a000002          BCC      |L1.2440|
00097c  e3a00006          MOV      r0,#6
000980  e5cd0013          STRB     r0,[sp,#0x13]
000984  ea000016          B        |L1.2532|
                  |L1.2440|
;;;237    		else if(num >= 10000) u8table[7] = 5;
000988  e3020710          MOV      r0,#0x2710
00098c  e1570000          CMP      r7,r0
000990  3a000002          BCC      |L1.2464|
000994  e3a00005          MOV      r0,#5
000998  e5cd0013          STRB     r0,[sp,#0x13]
00099c  ea000010          B        |L1.2532|
                  |L1.2464|
;;;238    		else if(num >= 1000) u8table[7] = 4;
0009a0  e3570ffa          CMP      r7,#0x3e8
0009a4  3a000002          BCC      |L1.2484|
0009a8  e3a00004          MOV      r0,#4
0009ac  e5cd0013          STRB     r0,[sp,#0x13]
0009b0  ea00000b          B        |L1.2532|
                  |L1.2484|
;;;239    		else if(num >= 100) u8table[7] = 3;
0009b4  e3570064          CMP      r7,#0x64
0009b8  3a000002          BCC      |L1.2504|
0009bc  e3a00003          MOV      r0,#3
0009c0  e5cd0013          STRB     r0,[sp,#0x13]
0009c4  ea000006          B        |L1.2532|
                  |L1.2504|
;;;240    		else if(num >= 10) u8table[7] = 2;
0009c8  e357000a          CMP      r7,#0xa
0009cc  3a000002          BCC      |L1.2524|
0009d0  e3a00002          MOV      r0,#2
0009d4  e5cd0013          STRB     r0,[sp,#0x13]
0009d8  ea000001          B        |L1.2532|
                  |L1.2524|
;;;241    		else u8table[7] = 1;
0009dc  e3a00001          MOV      r0,#1
0009e0  e5cd0013          STRB     r0,[sp,#0x13]
                  |L1.2532|
;;;242    		
;;;243    		if(efont == FONT1115_ee)
0009e4  e35b0001          CMP      r11,#1
0009e8  1a00003e          BNE      |L1.2792|
;;;244    		{
;;;245    			u32tmp = 1;
0009ec  e3a08001          MOV      r8,#1
;;;246    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
0009f0  e3a09001          MOV      r9,#1
0009f4  ea000024          B        |L1.2700|
                  |L1.2552|
;;;247    			{
;;;248    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
0009f8  e0880108          ADD      r0,r8,r8,LSL #2
0009fc  e1a01080          LSL      r1,r0,#1
000a00  e1a00007          MOV      r0,r7
000a04  ebfffffe          BL       __aeabi_uidivmod
000a08  e58d1004          STR      r1,[sp,#4]
000a0c  e1a01008          MOV      r1,r8
000a10  e59d0004          LDR      r0,[sp,#4]
000a14  ebfffffe          BL       __aeabi_uidiv
000a18  e20040ff          AND      r4,r0,#0xff
;;;249    				u32tmp = 10 * u32tmp;
000a1c  e0880108          ADD      r0,r8,r8,LSL #2
000a20  e1a08080          LSL      r8,r0,#1
;;;250    				tmpx -= stImage_font[u8tmp].u16Width;
000a24  e0840104          ADD      r0,r4,r4,LSL #2
000a28  e59f1558          LDR      r1,|L1.3976|
000a2c  e0810100          ADD      r0,r1,r0,LSL #2
000a30  e1d000b4          LDRH     r0,[r0,#4]
000a34  e0460000          SUB      r0,r6,r0
000a38  e6ff6070          UXTH     r6,r0
;;;251    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8tmp].u16Height;
000a3c  e2450041          SUB      r0,r5,#0x41
000a40  e59f1530          LDR      r1,|L1.3960|
000a44  e0810100          ADD      r0,r1,r0,LSL #2
000a48  e1d000b2          LDRH     r0,[r0,#2]
000a4c  e0841104          ADD      r1,r4,r4,LSL #2
000a50  e59f2530          LDR      r2,|L1.3976|
000a54  e0821101          ADD      r1,r2,r1,LSL #2
000a58  e1d110b6          LDRH     r1,[r1,#6]
000a5c  e0400001          SUB      r0,r0,r1
000a60  e6ff0070          UXTH     r0,r0
000a64  e58d0008          STR      r0,[sp,#8]
;;;252    				u32GfLayerBlendBitmapFull(&stImage_font[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000a68  e0841104          ADD      r1,r4,r4,LSL #2
000a6c  e0820101          ADD      r0,r2,r1,LSL #2
000a70  e1a02006          MOV      r2,r6
000a74  e59f14ec          LDR      r1,|L1.3944|
000a78  e59d3008          LDR      r3,[sp,#8]
000a7c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;253    				vGfListExecute();
000a80  ebfffffe          BL       vGfListExecute
000a84  e2890001          ADD      r0,r9,#1              ;246
000a88  e20090ff          AND      r9,r0,#0xff           ;246
                  |L1.2700|
000a8c  e5dd0013          LDRB     r0,[sp,#0x13]         ;246
000a90  e1500009          CMP      r0,r9                 ;246
000a94  aaffffd7          BGE      |L1.2552|
;;;254    			}
;;;255    			tmpx -= stImage_font[11].u16Width;
000a98  e59f04e8          LDR      r0,|L1.3976|
000a9c  e1d00eb0          LDRH     r0,[r0,#0xe0]
000aa0  e0460000          SUB      r0,r6,r0
000aa4  e6ff6070          UXTH     r6,r0
;;;256    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[11].u16Height;
000aa8  e2450041          SUB      r0,r5,#0x41
000aac  e59f14c4          LDR      r1,|L1.3960|
000ab0  e0810100          ADD      r0,r1,r0,LSL #2
000ab4  e1d000b2          LDRH     r0,[r0,#2]
000ab8  e59f14c8          LDR      r1,|L1.3976|
000abc  e1d11eb2          LDRH     r1,[r1,#0xe2]
000ac0  e0400001          SUB      r0,r0,r1
000ac4  e6ff0070          UXTH     r0,r0
000ac8  e58d0008          STR      r0,[sp,#8]
;;;257    			u32GfLayerBlendBitmapFull(&stImage_font[11], &stGDC0LayerA, tmpx, tmpy);
000acc  e1a02006          MOV      r2,r6
000ad0  e59f1490          LDR      r1,|L1.3944|
000ad4  e59f04c8          LDR      r0,|L1.4004|
000ad8  e59d3008          LDR      r3,[sp,#8]
000adc  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;258    			vGfListExecute();
000ae0  ebfffffe          BL       vGfListExecute
000ae4  ea000207          B        |L1.4872|
                  |L1.2792|
;;;259    		}
;;;260    		else if(efont == FONT2418_ee)
000ae8  e35b0000          CMP      r11,#0
000aec  1a00003e          BNE      |L1.3052|
;;;261    		{
;;;262    			u32tmp = 1;
000af0  e3a08001          MOV      r8,#1
;;;263    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
000af4  e3a09001          MOV      r9,#1
000af8  ea000024          B        |L1.2960|
                  |L1.2812|
;;;264    			{
;;;265    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000afc  e0880108          ADD      r0,r8,r8,LSL #2
000b00  e1a01080          LSL      r1,r0,#1
000b04  e1a00007          MOV      r0,r7
000b08  ebfffffe          BL       __aeabi_uidivmod
000b0c  e58d1004          STR      r1,[sp,#4]
000b10  e1a01008          MOV      r1,r8
000b14  e59d0004          LDR      r0,[sp,#4]
000b18  ebfffffe          BL       __aeabi_uidiv
000b1c  e20040ff          AND      r4,r0,#0xff
;;;266    				u32tmp = 10 * u32tmp;
000b20  e0880108          ADD      r0,r8,r8,LSL #2
000b24  e1a08080          LSL      r8,r0,#1
;;;267    				tmpx -= stImage_digifont[u8tmp].u16Width;
000b28  e0840104          ADD      r0,r4,r4,LSL #2
000b2c  e59f145c          LDR      r1,|L1.3984|
000b30  e0810100          ADD      r0,r1,r0,LSL #2
000b34  e1d000b4          LDRH     r0,[r0,#4]
000b38  e0460000          SUB      r0,r6,r0
000b3c  e6ff6070          UXTH     r6,r0
;;;268    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8tmp].u16Height;
000b40  e2450041          SUB      r0,r5,#0x41
000b44  e59f142c          LDR      r1,|L1.3960|
000b48  e0810100          ADD      r0,r1,r0,LSL #2
000b4c  e1d000b2          LDRH     r0,[r0,#2]
000b50  e0841104          ADD      r1,r4,r4,LSL #2
000b54  e59f2434          LDR      r2,|L1.3984|
000b58  e0821101          ADD      r1,r2,r1,LSL #2
000b5c  e1d110b6          LDRH     r1,[r1,#6]
000b60  e0400001          SUB      r0,r0,r1
000b64  e6ff0070          UXTH     r0,r0
000b68  e58d0008          STR      r0,[sp,#8]
;;;269    				u32GfLayerBlendBitmapFull(&stImage_digifont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000b6c  e0841104          ADD      r1,r4,r4,LSL #2
000b70  e0820101          ADD      r0,r2,r1,LSL #2
000b74  e1a02006          MOV      r2,r6
000b78  e59f13e8          LDR      r1,|L1.3944|
000b7c  e59d3008          LDR      r3,[sp,#8]
000b80  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;270    				vGfListExecute();
000b84  ebfffffe          BL       vGfListExecute
000b88  e2890001          ADD      r0,r9,#1              ;263
000b8c  e20090ff          AND      r9,r0,#0xff           ;263
                  |L1.2960|
000b90  e5dd0013          LDRB     r0,[sp,#0x13]         ;263
000b94  e1500009          CMP      r0,r9                 ;263
000b98  aaffffd7          BGE      |L1.2812|
;;;271    			}
;;;272    			tmpx -= stImage_font[11].u16Width;
000b9c  e59f03e4          LDR      r0,|L1.3976|
000ba0  e1d00eb0          LDRH     r0,[r0,#0xe0]
000ba4  e0460000          SUB      r0,r6,r0
000ba8  e6ff6070          UXTH     r6,r0
;;;273    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[11].u16Height;
000bac  e2450041          SUB      r0,r5,#0x41
000bb0  e59f13c0          LDR      r1,|L1.3960|
000bb4  e0810100          ADD      r0,r1,r0,LSL #2
000bb8  e1d000b2          LDRH     r0,[r0,#2]
000bbc  e59f13c4          LDR      r1,|L1.3976|
000bc0  e1d11eb2          LDRH     r1,[r1,#0xe2]
000bc4  e0400001          SUB      r0,r0,r1
000bc8  e6ff0070          UXTH     r0,r0
000bcc  e58d0008          STR      r0,[sp,#8]
;;;274    			u32GfLayerBlendBitmapFull(&stImage_font[11], &stGDC0LayerA, tmpx, tmpy);
000bd0  e1a02006          MOV      r2,r6
000bd4  e59f138c          LDR      r1,|L1.3944|
000bd8  e59f03c4          LDR      r0,|L1.4004|
000bdc  e59d3008          LDR      r3,[sp,#8]
000be0  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;275    			vGfListExecute();
000be4  ebfffffe          BL       vGfListExecute
000be8  ea0001c6          B        |L1.4872|
                  |L1.3052|
;;;276    		}
;;;277    		else if(efont == FONT0816_ee)
000bec  e35b0002          CMP      r11,#2
000bf0  1a0001c4          BNE      |L1.4872|
;;;278    		{
;;;279    			u32tmp = 1;
000bf4  e3a08001          MOV      r8,#1
;;;280    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
000bf8  e3a09001          MOV      r9,#1
000bfc  ea000024          B        |L1.3220|
                  |L1.3072|
;;;281    			{
;;;282    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000c00  e0880108          ADD      r0,r8,r8,LSL #2
000c04  e1a01080          LSL      r1,r0,#1
000c08  e1a00007          MOV      r0,r7
000c0c  ebfffffe          BL       __aeabi_uidivmod
000c10  e58d1004          STR      r1,[sp,#4]
000c14  e1a01008          MOV      r1,r8
000c18  e59d0004          LDR      r0,[sp,#4]
000c1c  ebfffffe          BL       __aeabi_uidiv
000c20  e20040ff          AND      r4,r0,#0xff
;;;283    				u32tmp = 10 * u32tmp;
000c24  e0880108          ADD      r0,r8,r8,LSL #2
000c28  e1a08080          LSL      r8,r0,#1
;;;284    				tmpx -= stImage_wfont[u8tmp].u16Width;
000c2c  e0840104          ADD      r0,r4,r4,LSL #2
000c30  e59f135c          LDR      r1,|L1.3988|
000c34  e0810100          ADD      r0,r1,r0,LSL #2
000c38  e1d000b4          LDRH     r0,[r0,#4]
000c3c  e0460000          SUB      r0,r6,r0
000c40  e6ff6070          UXTH     r6,r0
;;;285    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8tmp].u16Height;
000c44  e2450041          SUB      r0,r5,#0x41
000c48  e59f1328          LDR      r1,|L1.3960|
000c4c  e0810100          ADD      r0,r1,r0,LSL #2
000c50  e1d000b2          LDRH     r0,[r0,#2]
000c54  e0841104          ADD      r1,r4,r4,LSL #2
000c58  e59f2334          LDR      r2,|L1.3988|
000c5c  e0821101          ADD      r1,r2,r1,LSL #2
000c60  e1d110b6          LDRH     r1,[r1,#6]
000c64  e0400001          SUB      r0,r0,r1
000c68  e6ff0070          UXTH     r0,r0
000c6c  e58d0008          STR      r0,[sp,#8]
;;;286    				u32GfLayerBlendBitmapFull(&stImage_wfont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000c70  e0841104          ADD      r1,r4,r4,LSL #2
000c74  e0820101          ADD      r0,r2,r1,LSL #2
000c78  e1a02006          MOV      r2,r6
000c7c  e59f12e4          LDR      r1,|L1.3944|
000c80  e59d3008          LDR      r3,[sp,#8]
000c84  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;287    				vGfListExecute();
000c88  ebfffffe          BL       vGfListExecute
000c8c  e2890001          ADD      r0,r9,#1              ;280
000c90  e20090ff          AND      r9,r0,#0xff           ;280
                  |L1.3220|
000c94  e5dd0013          LDRB     r0,[sp,#0x13]         ;280
000c98  e1500009          CMP      r0,r9                 ;280
000c9c  aaffffd7          BGE      |L1.3072|
;;;288    			}
;;;289    			tmpx -= stImage_wfont[11].u16Width;
000ca0  e59f02ec          LDR      r0,|L1.3988|
000ca4  e1d00eb0          LDRH     r0,[r0,#0xe0]
000ca8  e0460000          SUB      r0,r6,r0
000cac  e6ff6070          UXTH     r6,r0
;;;290    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[11].u16Height;
000cb0  e2450041          SUB      r0,r5,#0x41
000cb4  e59f12bc          LDR      r1,|L1.3960|
000cb8  e0810100          ADD      r0,r1,r0,LSL #2
000cbc  e1d000b2          LDRH     r0,[r0,#2]
000cc0  e59f12cc          LDR      r1,|L1.3988|
000cc4  e1d11eb2          LDRH     r1,[r1,#0xe2]
000cc8  e0400001          SUB      r0,r0,r1
000ccc  e6ff0070          UXTH     r0,r0
000cd0  e58d0008          STR      r0,[sp,#8]
;;;291    			u32GfLayerBlendBitmapFull(&stImage_wfont[11], &stGDC0LayerA, tmpx, tmpy);
000cd4  e1a02006          MOV      r2,r6
000cd8  e59f1288          LDR      r1,|L1.3944|
000cdc  e59f02c4          LDR      r0,|L1.4008|
000ce0  e59d3008          LDR      r3,[sp,#8]
000ce4  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;292    			vGfListExecute();
000ce8  ebfffffe          BL       vGfListExecute
000cec  ea000185          B        |L1.4872|
                  |L1.3312|
;;;293    		}	
;;;294    	}
;;;295    	else if(3 == u8pt)   //小数+负数
000cf0  e59d0020          LDR      r0,[sp,#0x20]
000cf4  e3500003          CMP      r0,#3
000cf8  1a000182          BNE      |L1.4872|
;;;296    	{
;;;297    		u8dpnumber = num % 10;
000cfc  e3a0100a          MOV      r1,#0xa
000d00  e1a00007          MOV      r0,r7
000d04  ebfffffe          BL       __aeabi_uidivmod
000d08  e1a0a001          MOV      r10,r1
;;;298    		num = num / 10;
000d0c  e3a0100a          MOV      r1,#0xa
000d10  e1a00007          MOV      r0,r7
000d14  ebfffffe          BL       __aeabi_uidiv
000d18  e1a07000          MOV      r7,r0
;;;299    		if(num > 99999) num = 99999; 
000d1c  e59f0258          LDR      r0,|L1.3964|
000d20  e1570000          CMP      r7,r0
000d24  9a000000          BLS      |L1.3372|
000d28  e1a07000          MOV      r7,r0
                  |L1.3372|
;;;300    		if(num >= 1000000) u8table[7] = 7;
000d2c  e59f024c          LDR      r0,|L1.3968|
000d30  e1570000          CMP      r7,r0
000d34  3a000002          BCC      |L1.3396|
000d38  e3a00007          MOV      r0,#7
000d3c  e5cd0013          STRB     r0,[sp,#0x13]
000d40  ea00001c          B        |L1.3512|
                  |L1.3396|
;;;301    		else if(num >= 100000) u8table[7] = 6;
000d44  e59f0238          LDR      r0,|L1.3972|
000d48  e1570000          CMP      r7,r0
000d4c  3a000002          BCC      |L1.3420|
000d50  e3a00006          MOV      r0,#6
000d54  e5cd0013          STRB     r0,[sp,#0x13]
000d58  ea000016          B        |L1.3512|
                  |L1.3420|
;;;302    		else if(num >= 10000) u8table[7] = 5;
000d5c  e3020710          MOV      r0,#0x2710
000d60  e1570000          CMP      r7,r0
000d64  3a000002          BCC      |L1.3444|
000d68  e3a00005          MOV      r0,#5
000d6c  e5cd0013          STRB     r0,[sp,#0x13]
000d70  ea000010          B        |L1.3512|
                  |L1.3444|
;;;303    		else if(num >= 1000) u8table[7] = 4;
000d74  e3570ffa          CMP      r7,#0x3e8
000d78  3a000002          BCC      |L1.3464|
000d7c  e3a00004          MOV      r0,#4
000d80  e5cd0013          STRB     r0,[sp,#0x13]
000d84  ea00000b          B        |L1.3512|
                  |L1.3464|
;;;304    		else if(num >= 100) u8table[7] = 3;
000d88  e3570064          CMP      r7,#0x64
000d8c  3a000002          BCC      |L1.3484|
000d90  e3a00003          MOV      r0,#3
000d94  e5cd0013          STRB     r0,[sp,#0x13]
000d98  ea000006          B        |L1.3512|
                  |L1.3484|
;;;305    		else if(num >= 10) u8table[7] = 2;
000d9c  e357000a          CMP      r7,#0xa
000da0  3a000002          BCC      |L1.3504|
000da4  e3a00002          MOV      r0,#2
000da8  e5cd0013          STRB     r0,[sp,#0x13]
000dac  ea000001          B        |L1.3512|
                  |L1.3504|
;;;306    		else u8table[7] = 1;
000db0  e3a00001          MOV      r0,#1
000db4  e5cd0013          STRB     r0,[sp,#0x13]
                  |L1.3512|
;;;307    
;;;308    		if(efont == FONT1115_ee)
000db8  e35b0001          CMP      r11,#1
000dbc  1a00007a          BNE      |L1.4012|
;;;309    		{
;;;310    			tmpx -= stImage_font[u8dpnumber].u16Width;
000dc0  e08a010a          ADD      r0,r10,r10,LSL #2
000dc4  e59f11bc          LDR      r1,|L1.3976|
000dc8  e0810100          ADD      r0,r1,r0,LSL #2
000dcc  e1d000b4          LDRH     r0,[r0,#4]
000dd0  e0460000          SUB      r0,r6,r0
000dd4  e6ff6070          UXTH     r6,r0
;;;311    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8dpnumber].u16Height;
000dd8  e2450041          SUB      r0,r5,#0x41
000ddc  e59f1194          LDR      r1,|L1.3960|
000de0  e0810100          ADD      r0,r1,r0,LSL #2
000de4  e1d000b2          LDRH     r0,[r0,#2]
000de8  e08a110a          ADD      r1,r10,r10,LSL #2
000dec  e59f2194          LDR      r2,|L1.3976|
000df0  e0821101          ADD      r1,r2,r1,LSL #2
000df4  e1d110b6          LDRH     r1,[r1,#6]
000df8  e0400001          SUB      r0,r0,r1
000dfc  e6ff0070          UXTH     r0,r0
000e00  e58d0008          STR      r0,[sp,#8]
;;;312    			u32GfLayerBlendBitmapFull(&stImage_font[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
000e04  e08a110a          ADD      r1,r10,r10,LSL #2
000e08  e0820101          ADD      r0,r2,r1,LSL #2
000e0c  e1a02006          MOV      r2,r6
000e10  e59f1150          LDR      r1,|L1.3944|
000e14  e59d3008          LDR      r3,[sp,#8]
000e18  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;313    			vGfListExecute();
000e1c  ebfffffe          BL       vGfListExecute
;;;314    			tmpx -= stImage_font[10].u16Width;
000e20  e59f0160          LDR      r0,|L1.3976|
000e24  e1d00cbc          LDRH     r0,[r0,#0xcc]
000e28  e0460000          SUB      r0,r6,r0
000e2c  e6ff6070          UXTH     r6,r0
;;;315    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[10].u16Height;
000e30  e2450041          SUB      r0,r5,#0x41
000e34  e59f113c          LDR      r1,|L1.3960|
000e38  e0810100          ADD      r0,r1,r0,LSL #2
000e3c  e1d000b2          LDRH     r0,[r0,#2]
000e40  e59f1140          LDR      r1,|L1.3976|
000e44  e1d11cbe          LDRH     r1,[r1,#0xce]
000e48  e0400001          SUB      r0,r0,r1
000e4c  e6ff0070          UXTH     r0,r0
000e50  e58d0008          STR      r0,[sp,#8]
;;;316    			u32GfLayerBlendBitmapFull(&stImage_font[10], &stGDC0LayerA, tmpx, tmpy);
000e54  e1a02006          MOV      r2,r6
000e58  e59f1108          LDR      r1,|L1.3944|
000e5c  e59f0128          LDR      r0,|L1.3980|
000e60  e59d3008          LDR      r3,[sp,#8]
000e64  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;317    			vGfListExecute();
000e68  ebfffffe          BL       vGfListExecute
;;;318    			u32tmp = 1;
000e6c  e3a08001          MOV      r8,#1
;;;319    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
000e70  e3a09001          MOV      r9,#1
000e74  ea000024          B        |L1.3852|
                  |L1.3704|
;;;320    			{
;;;321    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
000e78  e0880108          ADD      r0,r8,r8,LSL #2
000e7c  e1a01080          LSL      r1,r0,#1
000e80  e1a00007          MOV      r0,r7
000e84  ebfffffe          BL       __aeabi_uidivmod
000e88  e58d1004          STR      r1,[sp,#4]
000e8c  e1a01008          MOV      r1,r8
000e90  e59d0004          LDR      r0,[sp,#4]
000e94  ebfffffe          BL       __aeabi_uidiv
000e98  e20040ff          AND      r4,r0,#0xff
;;;322    				u32tmp = 10 * u32tmp;
000e9c  e0880108          ADD      r0,r8,r8,LSL #2
000ea0  e1a08080          LSL      r8,r0,#1
;;;323    				tmpx -= stImage_font[u8tmp].u16Width;
000ea4  e0840104          ADD      r0,r4,r4,LSL #2
000ea8  e59f10d8          LDR      r1,|L1.3976|
000eac  e0810100          ADD      r0,r1,r0,LSL #2
000eb0  e1d000b4          LDRH     r0,[r0,#4]
000eb4  e0460000          SUB      r0,r6,r0
000eb8  e6ff6070          UXTH     r6,r0
;;;324    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[u8tmp].u16Height;
000ebc  e2450041          SUB      r0,r5,#0x41
000ec0  e59f10b0          LDR      r1,|L1.3960|
000ec4  e0810100          ADD      r0,r1,r0,LSL #2
000ec8  e1d000b2          LDRH     r0,[r0,#2]
000ecc  e0841104          ADD      r1,r4,r4,LSL #2
000ed0  e59f20b0          LDR      r2,|L1.3976|
000ed4  e0821101          ADD      r1,r2,r1,LSL #2
000ed8  e1d110b6          LDRH     r1,[r1,#6]
000edc  e0400001          SUB      r0,r0,r1
000ee0  e6ff0070          UXTH     r0,r0
000ee4  e58d0008          STR      r0,[sp,#8]
;;;325    				u32GfLayerBlendBitmapFull(&stImage_font[u8tmp], &stGDC0LayerA, tmpx, tmpy);
000ee8  e0841104          ADD      r1,r4,r4,LSL #2
000eec  e0820101          ADD      r0,r2,r1,LSL #2
000ef0  e1a02006          MOV      r2,r6
000ef4  e59f106c          LDR      r1,|L1.3944|
000ef8  e59d3008          LDR      r3,[sp,#8]
000efc  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;326    				vGfListExecute();
000f00  ebfffffe          BL       vGfListExecute
000f04  e2890001          ADD      r0,r9,#1              ;319
000f08  e20090ff          AND      r9,r0,#0xff           ;319
                  |L1.3852|
000f0c  e5dd0013          LDRB     r0,[sp,#0x13]         ;319
000f10  e1500009          CMP      r0,r9                 ;319
000f14  aaffffd7          BGE      |L1.3704|
;;;327    			}
;;;328    			tmpx -= stImage_font[11].u16Width;
000f18  e59f0068          LDR      r0,|L1.3976|
000f1c  e1d00eb0          LDRH     r0,[r0,#0xe0]
000f20  e0460000          SUB      r0,r6,r0
000f24  e6ff6070          UXTH     r6,r0
;;;329    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[11].u16Height;
000f28  e2450041          SUB      r0,r5,#0x41
000f2c  e59f1044          LDR      r1,|L1.3960|
000f30  e0810100          ADD      r0,r1,r0,LSL #2
000f34  e1d000b2          LDRH     r0,[r0,#2]
000f38  e59f1048          LDR      r1,|L1.3976|
000f3c  e1d11eb2          LDRH     r1,[r1,#0xe2]
000f40  e0400001          SUB      r0,r0,r1
000f44  e6ff0070          UXTH     r0,r0
000f48  e58d0008          STR      r0,[sp,#8]
;;;330    			u32GfLayerBlendBitmapFull(&stImage_font[11], &stGDC0LayerA, tmpx, tmpy);
000f4c  e1a02006          MOV      r2,r6
000f50  e59f1010          LDR      r1,|L1.3944|
000f54  e59f0048          LDR      r0,|L1.4004|
000f58  e59d3008          LDR      r3,[sp,#8]
000f5c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;331    			vGfListExecute();
000f60  ebfffffe          BL       vGfListExecute
000f64  ea0000e7          B        |L1.4872|
                  |L1.3944|
                          DCD      stGDC0LayerA
                  |L1.3948|
                          DCD      stImage_needle_final
                  |L1.3952|
                          DCD      stImage_needle_1
                  |L1.3956|
                          DCD      stImage_FirstLogo
                  |L1.3960|
                          DCD      u16Type3XYTable
                  |L1.3964|
                          DCD      0x0001869f
                  |L1.3968|
                          DCD      0x000f4240
                  |L1.3972|
                          DCD      0x000186a0
                  |L1.3976|
                          DCD      stImage_font
                  |L1.3980|
                          DCD      stImage_font+0xc8
                  |L1.3984|
                          DCD      stImage_digifont
                  |L1.3988|
                          DCD      stImage_wfont
                  |L1.3992|
                          DCD      stImage_wfont+0xc8
                  |L1.3996|
                          DCD      0x0098967f
                  |L1.4000|
                          DCD      0x000f423f
                  |L1.4004|
                          DCD      stImage_font+0xdc
                  |L1.4008|
                          DCD      stImage_wfont+0xdc
                  |L1.4012|
;;;332    		}
;;;333    		else if(efont == FONT2418_ee)
000fac  e35b0000          CMP      r11,#0
000fb0  1a000069          BNE      |L1.4444|
;;;334    		{
;;;335    			tmpx -= stImage_digifont[u8dpnumber].u16Width;
000fb4  e08a010a          ADD      r0,r10,r10,LSL #2
000fb8  e51f1030          LDR      r1,|L1.3984|
000fbc  e0810100          ADD      r0,r1,r0,LSL #2
000fc0  e1d000b4          LDRH     r0,[r0,#4]
000fc4  e0460000          SUB      r0,r6,r0
000fc8  e6ff6070          UXTH     r6,r0
;;;336    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8dpnumber].u16Height;
000fcc  e2450041          SUB      r0,r5,#0x41
000fd0  e51f1060          LDR      r1,|L1.3960|
000fd4  e0810100          ADD      r0,r1,r0,LSL #2
000fd8  e1d000b2          LDRH     r0,[r0,#2]
000fdc  e08a110a          ADD      r1,r10,r10,LSL #2
000fe0  e51f2058          LDR      r2,|L1.3984|
000fe4  e0821101          ADD      r1,r2,r1,LSL #2
000fe8  e1d110b6          LDRH     r1,[r1,#6]
000fec  e0400001          SUB      r0,r0,r1
000ff0  e6ff0070          UXTH     r0,r0
000ff4  e58d0008          STR      r0,[sp,#8]
;;;337    			u32GfLayerBlendBitmapFull(&stImage_digifont[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
000ff8  e08a110a          ADD      r1,r10,r10,LSL #2
000ffc  e0820101          ADD      r0,r2,r1,LSL #2
001000  e1a02006          MOV      r2,r6
001004  e51f10a4          LDR      r1,|L1.3944|
001008  e59d3008          LDR      r3,[sp,#8]
00100c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;338    			vGfListExecute();
001010  ebfffffe          BL       vGfListExecute
;;;339    			tmpx -= stImage_font[10].u16Width;
001014  e51f0094          LDR      r0,|L1.3976|
001018  e1d00cbc          LDRH     r0,[r0,#0xcc]
00101c  e0460000          SUB      r0,r6,r0
001020  e6ff6070          UXTH     r6,r0
;;;340    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[10].u16Height;
001024  e2450041          SUB      r0,r5,#0x41
001028  e51f10b8          LDR      r1,|L1.3960|
00102c  e0810100          ADD      r0,r1,r0,LSL #2
001030  e1d000b2          LDRH     r0,[r0,#2]
001034  e51f10b4          LDR      r1,|L1.3976|
001038  e1d11cbe          LDRH     r1,[r1,#0xce]
00103c  e0400001          SUB      r0,r0,r1
001040  e6ff0070          UXTH     r0,r0
001044  e58d0008          STR      r0,[sp,#8]
;;;341    			u32GfLayerBlendBitmapFull(&stImage_font[10], &stGDC0LayerA, tmpx, tmpy);
001048  e1a02006          MOV      r2,r6
00104c  e51f10ec          LDR      r1,|L1.3944|
001050  e51f00cc          LDR      r0,|L1.3980|
001054  e59d3008          LDR      r3,[sp,#8]
001058  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;342    			vGfListExecute();
00105c  ebfffffe          BL       vGfListExecute
;;;343    			u32tmp = 1;
001060  e3a08001          MOV      r8,#1
;;;344    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
001064  e3a09001          MOV      r9,#1
001068  ea000024          B        |L1.4352|
                  |L1.4204|
;;;345    			{
;;;346    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
00106c  e0880108          ADD      r0,r8,r8,LSL #2
001070  e1a01080          LSL      r1,r0,#1
001074  e1a00007          MOV      r0,r7
001078  ebfffffe          BL       __aeabi_uidivmod
00107c  e58d1004          STR      r1,[sp,#4]
001080  e1a01008          MOV      r1,r8
001084  e59d0004          LDR      r0,[sp,#4]
001088  ebfffffe          BL       __aeabi_uidiv
00108c  e20040ff          AND      r4,r0,#0xff
;;;347    				u32tmp = 10 * u32tmp;
001090  e0880108          ADD      r0,r8,r8,LSL #2
001094  e1a08080          LSL      r8,r0,#1
;;;348    				tmpx -= stImage_digifont[u8tmp].u16Width;
001098  e0840104          ADD      r0,r4,r4,LSL #2
00109c  e51f1114          LDR      r1,|L1.3984|
0010a0  e0810100          ADD      r0,r1,r0,LSL #2
0010a4  e1d000b4          LDRH     r0,[r0,#4]
0010a8  e0460000          SUB      r0,r6,r0
0010ac  e6ff6070          UXTH     r6,r0
;;;349    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_digifont[u8tmp].u16Height;
0010b0  e2450041          SUB      r0,r5,#0x41
0010b4  e51f1144          LDR      r1,|L1.3960|
0010b8  e0810100          ADD      r0,r1,r0,LSL #2
0010bc  e1d000b2          LDRH     r0,[r0,#2]
0010c0  e0841104          ADD      r1,r4,r4,LSL #2
0010c4  e51f213c          LDR      r2,|L1.3984|
0010c8  e0821101          ADD      r1,r2,r1,LSL #2
0010cc  e1d110b6          LDRH     r1,[r1,#6]
0010d0  e0400001          SUB      r0,r0,r1
0010d4  e6ff0070          UXTH     r0,r0
0010d8  e58d0008          STR      r0,[sp,#8]
;;;350    				u32GfLayerBlendBitmapFull(&stImage_digifont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
0010dc  e0841104          ADD      r1,r4,r4,LSL #2
0010e0  e0820101          ADD      r0,r2,r1,LSL #2
0010e4  e1a02006          MOV      r2,r6
0010e8  e51f1188          LDR      r1,|L1.3944|
0010ec  e59d3008          LDR      r3,[sp,#8]
0010f0  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;351    				vGfListExecute();
0010f4  ebfffffe          BL       vGfListExecute
0010f8  e2890001          ADD      r0,r9,#1              ;344
0010fc  e20090ff          AND      r9,r0,#0xff           ;344
                  |L1.4352|
001100  e5dd0013          LDRB     r0,[sp,#0x13]         ;344
001104  e1500009          CMP      r0,r9                 ;344
001108  aaffffd7          BGE      |L1.4204|
;;;352    			}
;;;353    			tmpx -= stImage_font[11].u16Width;
00110c  e51f018c          LDR      r0,|L1.3976|
001110  e1d00eb0          LDRH     r0,[r0,#0xe0]
001114  e0460000          SUB      r0,r6,r0
001118  e6ff6070          UXTH     r6,r0
;;;354    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_font[11].u16Height;
00111c  e2450041          SUB      r0,r5,#0x41
001120  e51f11b0          LDR      r1,|L1.3960|
001124  e0810100          ADD      r0,r1,r0,LSL #2
001128  e1d000b2          LDRH     r0,[r0,#2]
00112c  e51f11ac          LDR      r1,|L1.3976|
001130  e1d11eb2          LDRH     r1,[r1,#0xe2]
001134  e0400001          SUB      r0,r0,r1
001138  e6ff0070          UXTH     r0,r0
00113c  e58d0008          STR      r0,[sp,#8]
;;;355    			u32GfLayerBlendBitmapFull(&stImage_font[11], &stGDC0LayerA, tmpx, tmpy);
001140  e1a02006          MOV      r2,r6
001144  e51f11e4          LDR      r1,|L1.3944|
001148  e51f01ac          LDR      r0,|L1.4004|
00114c  e59d3008          LDR      r3,[sp,#8]
001150  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;356    			vGfListExecute();
001154  ebfffffe          BL       vGfListExecute
001158  ea00006a          B        |L1.4872|
                  |L1.4444|
;;;357    
;;;358    		}
;;;359    		else if(efont == FONT0816_ee)
00115c  e35b0002          CMP      r11,#2
001160  1a000068          BNE      |L1.4872|
;;;360    		{
;;;361    			tmpx -= stImage_wfont[u8dpnumber].u16Width;
001164  e08a010a          ADD      r0,r10,r10,LSL #2
001168  e51f11dc          LDR      r1,|L1.3988|
00116c  e0810100          ADD      r0,r1,r0,LSL #2
001170  e1d000b4          LDRH     r0,[r0,#4]
001174  e0460000          SUB      r0,r6,r0
001178  e6ff6070          UXTH     r6,r0
;;;362    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8dpnumber].u16Height;
00117c  e2450041          SUB      r0,r5,#0x41
001180  e51f1210          LDR      r1,|L1.3960|
001184  e0810100          ADD      r0,r1,r0,LSL #2
001188  e1d000b2          LDRH     r0,[r0,#2]
00118c  e08a110a          ADD      r1,r10,r10,LSL #2
001190  e51f2204          LDR      r2,|L1.3988|
001194  e0821101          ADD      r1,r2,r1,LSL #2
001198  e1d110b6          LDRH     r1,[r1,#6]
00119c  e0400001          SUB      r0,r0,r1
0011a0  e6ff0070          UXTH     r0,r0
0011a4  e58d0008          STR      r0,[sp,#8]
;;;363    			u32GfLayerBlendBitmapFull(&stImage_wfont[u8dpnumber], &stGDC0LayerA, tmpx, tmpy);
0011a8  e08a110a          ADD      r1,r10,r10,LSL #2
0011ac  e0820101          ADD      r0,r2,r1,LSL #2
0011b0  e1a02006          MOV      r2,r6
0011b4  e51f1254          LDR      r1,|L1.3944|
0011b8  e59d3008          LDR      r3,[sp,#8]
0011bc  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;364    			vGfListExecute();
0011c0  ebfffffe          BL       vGfListExecute
;;;365    			tmpx -= stImage_wfont[10].u16Width;
0011c4  e51f0238          LDR      r0,|L1.3988|
0011c8  e1d00cbc          LDRH     r0,[r0,#0xcc]
0011cc  e0460000          SUB      r0,r6,r0
0011d0  e6ff6070          UXTH     r6,r0
;;;366    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[10].u16Height;
0011d4  e2450041          SUB      r0,r5,#0x41
0011d8  e51f1268          LDR      r1,|L1.3960|
0011dc  e0810100          ADD      r0,r1,r0,LSL #2
0011e0  e1d000b2          LDRH     r0,[r0,#2]
0011e4  e51f1258          LDR      r1,|L1.3988|
0011e8  e1d11cbe          LDRH     r1,[r1,#0xce]
0011ec  e0400001          SUB      r0,r0,r1
0011f0  e6ff0070          UXTH     r0,r0
0011f4  e58d0008          STR      r0,[sp,#8]
;;;367    			u32GfLayerBlendBitmapFull(&stImage_wfont[10], &stGDC0LayerA, tmpx, tmpy);
0011f8  e1a02006          MOV      r2,r6
0011fc  e51f129c          LDR      r1,|L1.3944|
001200  e51f0270          LDR      r0,|L1.3992|
001204  e59d3008          LDR      r3,[sp,#8]
001208  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;368    			vGfListExecute();
00120c  ebfffffe          BL       vGfListExecute
;;;369    			u32tmp = 1;
001210  e3a08001          MOV      r8,#1
;;;370    			for(u8iCount = 1;u8iCount <= u8table[7];u8iCount++)
001214  e3a09001          MOV      r9,#1
001218  ea000024          B        |L1.4784|
                  |L1.4636|
;;;371    			{
;;;372    				u8tmp = (num % (u32tmp * 10)) / (u32tmp);
00121c  e0880108          ADD      r0,r8,r8,LSL #2
001220  e1a01080          LSL      r1,r0,#1
001224  e1a00007          MOV      r0,r7
001228  ebfffffe          BL       __aeabi_uidivmod
00122c  e58d1004          STR      r1,[sp,#4]
001230  e1a01008          MOV      r1,r8
001234  e59d0004          LDR      r0,[sp,#4]
001238  ebfffffe          BL       __aeabi_uidiv
00123c  e20040ff          AND      r4,r0,#0xff
;;;373    				u32tmp = 10 * u32tmp;
001240  e0880108          ADD      r0,r8,r8,LSL #2
001244  e1a08080          LSL      r8,r0,#1
;;;374    				tmpx -= stImage_wfont[u8tmp].u16Width;
001248  e0840104          ADD      r0,r4,r4,LSL #2
00124c  e51f12c0          LDR      r1,|L1.3988|
001250  e0810100          ADD      r0,r1,r0,LSL #2
001254  e1d000b4          LDRH     r0,[r0,#4]
001258  e0460000          SUB      r0,r6,r0
00125c  e6ff6070          UXTH     r6,r0
;;;375    				tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[u8tmp].u16Height;
001260  e2450041          SUB      r0,r5,#0x41
001264  e51f12f4          LDR      r1,|L1.3960|
001268  e0810100          ADD      r0,r1,r0,LSL #2
00126c  e1d000b2          LDRH     r0,[r0,#2]
001270  e0841104          ADD      r1,r4,r4,LSL #2
001274  e51f22e8          LDR      r2,|L1.3988|
001278  e0821101          ADD      r1,r2,r1,LSL #2
00127c  e1d110b6          LDRH     r1,[r1,#6]
001280  e0400001          SUB      r0,r0,r1
001284  e6ff0070          UXTH     r0,r0
001288  e58d0008          STR      r0,[sp,#8]
;;;376    				u32GfLayerBlendBitmapFull(&stImage_wfont[u8tmp], &stGDC0LayerA, tmpx, tmpy);
00128c  e0841104          ADD      r1,r4,r4,LSL #2
001290  e0820101          ADD      r0,r2,r1,LSL #2
001294  e1a02006          MOV      r2,r6
001298  e51f1338          LDR      r1,|L1.3944|
00129c  e59d3008          LDR      r3,[sp,#8]
0012a0  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;377    				vGfListExecute();
0012a4  ebfffffe          BL       vGfListExecute
0012a8  e2890001          ADD      r0,r9,#1              ;370
0012ac  e20090ff          AND      r9,r0,#0xff           ;370
                  |L1.4784|
0012b0  e5dd0013          LDRB     r0,[sp,#0x13]         ;370
0012b4  e1500009          CMP      r0,r9                 ;370
0012b8  aaffffd7          BGE      |L1.4636|
;;;378    			}
;;;379    			tmpx -= stImage_wfont[11].u16Width;
0012bc  e51f0330          LDR      r0,|L1.3988|
0012c0  e1d00eb0          LDRH     r0,[r0,#0xe0]
0012c4  e0460000          SUB      r0,r6,r0
0012c8  e6ff6070          UXTH     r6,r0
;;;380    			tmpy = u16Type3XYTable[etmp - TYPE3_NUMBER_BASE][1] - stImage_wfont[11].u16Height;
0012cc  e2450041          SUB      r0,r5,#0x41
0012d0  e51f1360          LDR      r1,|L1.3960|
0012d4  e0810100          ADD      r0,r1,r0,LSL #2
0012d8  e1d000b2          LDRH     r0,[r0,#2]
0012dc  e51f1350          LDR      r1,|L1.3988|
0012e0  e1d11eb2          LDRH     r1,[r1,#0xe2]
0012e4  e0400001          SUB      r0,r0,r1
0012e8  e6ff0070          UXTH     r0,r0
0012ec  e58d0008          STR      r0,[sp,#8]
;;;381    			u32GfLayerBlendBitmapFull(&stImage_wfont[11], &stGDC0LayerA, tmpx, tmpy);
0012f0  e1a02006          MOV      r2,r6
0012f4  e51f1394          LDR      r1,|L1.3944|
0012f8  e51f0358          LDR      r0,|L1.4008|
0012fc  e59d3008          LDR      r3,[sp,#8]
001300  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;382    			vGfListExecute();
001304  ebfffffe          BL       vGfListExecute
                  |L1.4872|
;;;383    		}
;;;384    	}
;;;385    }
001308  e28dd024          ADD      sp,sp,#0x24
00130c  e8bd8ff0          POP      {r4-r11,pc}
;;;386    
                          ENDP

                  vSetIcons PROC
;;;393    
;;;394    void vSetIcons(void)
001310  e92d4010          PUSH     {r4,lr}
;;;395    {
;;;396    	u32GfLayerBlendBitmapFull(&stImage_MainShow, &stGDC0LayerA, 0, 0);
001314  e3a03000          MOV      r3,#0
001318  e1a02003          MOV      r2,r3
00131c  e51f13bc          LDR      r1,|L1.3944|
001320  e59f0e10          LDR      r0,|L1.8504|
001324  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;397    	vGfListExecute();	
001328  ebfffffe          BL       vGfListExecute
;;;398    }
00132c  e8bd8010          POP      {r4,pc}
;;;399    
                          ENDP

                  vCreatBat PROC
;;;474    
;;;475    void vCreatBat(DiyBar_st* pstTmpBar,battery_show_st *stshowu,battery_show_st *stshowm,battery_show_st *stshowd,gf_image_st *pimg)
001330  e92d4fff          PUSH     {r0-r11,lr}
;;;476    {
001334  e24dd01c          SUB      sp,sp,#0x1c
001338  e1a04000          MOV      r4,r0
00133c  e59db050          LDR      r11,[sp,#0x50]
;;;477    	uint16_t xtmp = pstTmpBar->u16Startx;
001340  e1d400b0          LDRH     r0,[r4,#0]
001344  e58d0018          STR      r0,[sp,#0x18]
;;;478    	uint16_t ytmp = pstTmpBar->u16Starty;
001348  e1d480b2          LDRH     r8,[r4,#2]
;;;479    	uint8_t u8iCount = 0;
00134c  e3a05000          MOV      r5,#0
;;;480    	uint32_t u32tmp;
;;;481    	uint8_t u8tmp;
;;;482    	uint16_t tmpx, tmpy,tmpy2;
;;;483    	uint8_t u8jCount = 0;
001350  e3a07000          MOV      r7,#0
;;;484    	battery_show_st *pcurrent;
;;;485    	
;;;486    	u32GfLayerBlendBitmapFull(&stImage_BatDownVal, &stGDC0LayerA, xtmp, ytmp);
001354  e1a03008          MOV      r3,r8
001358  e51f13f8          LDR      r1,|L1.3944|
00135c  e59f0dd8          LDR      r0,|L1.8508|
001360  e59d2018          LDR      r2,[sp,#0x18]
001364  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;487    	vGfListExecute();
001368  ebfffffe          BL       vGfListExecute
;;;488    
;;;489    	for(u8iCount = 0;u8iCount < pstTmpBar->u8CurrentLevel;u8iCount++)
00136c  e320f000          NOP      
001370  ea00000b          B        |L1.5028|
                  |L1.4980|
;;;490    	{
;;;491    		ytmp -= stImage_BatVal.u16Height;
001374  e59f0dc4          LDR      r0,|L1.8512|
001378  e1d000b6          LDRH     r0,[r0,#6]  ; stImage_BatVal
00137c  e0480000          SUB      r0,r8,r0
001380  e6ff8070          UXTH     r8,r0
;;;492    		u32GfLayerBlendBitmapFull(&stImage_BatVal, &stGDC0LayerA, xtmp, ytmp);
001384  e1a03008          MOV      r3,r8
001388  e51f1428          LDR      r1,|L1.3944|
00138c  e59f0dac          LDR      r0,|L1.8512|
001390  e59d2018          LDR      r2,[sp,#0x18]
001394  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;493    		vGfListExecute();
001398  ebfffffe          BL       vGfListExecute
00139c  e2850001          ADD      r0,r5,#1              ;489
0013a0  e20050ff          AND      r5,r0,#0xff           ;489
                  |L1.5028|
0013a4  e5d40005          LDRB     r0,[r4,#5]            ;489
0013a8  e1500005          CMP      r0,r5                 ;489
0013ac  cafffff0          BGT      |L1.4980|
;;;494    	}
;;;495    
;;;496    	for(;u8iCount < pstTmpBar->u8MaxLevel;u8iCount++)
0013b0  ea00000b          B        |L1.5092|
                  |L1.5044|
;;;497    	{
;;;498    		ytmp -= stImage_BatInval.u16Height;
0013b4  e59f0d88          LDR      r0,|L1.8516|
0013b8  e1d000b6          LDRH     r0,[r0,#6]  ; stImage_BatInval
0013bc  e0480000          SUB      r0,r8,r0
0013c0  e6ff8070          UXTH     r8,r0
;;;499    		u32GfLayerBlendBitmapFull(&stImage_BatInval, &stGDC0LayerA, xtmp, ytmp);
0013c4  e1a03008          MOV      r3,r8
0013c8  e51f1468          LDR      r1,|L1.3944|
0013cc  e59f0d70          LDR      r0,|L1.8516|
0013d0  e59d2018          LDR      r2,[sp,#0x18]
0013d4  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;500    		vGfListExecute();
0013d8  ebfffffe          BL       vGfListExecute
0013dc  e2850001          ADD      r0,r5,#1              ;496
0013e0  e20050ff          AND      r5,r0,#0xff           ;496
                  |L1.5092|
0013e4  e5d40004          LDRB     r0,[r4,#4]            ;496
0013e8  e1500005          CMP      r0,r5                 ;496
0013ec  cafffff0          BGT      |L1.5044|
;;;501    	}
;;;502    	ytmp -= stImage_BatUp.u16Height;
0013f0  e59f0d50          LDR      r0,|L1.8520|
0013f4  e1d000b6          LDRH     r0,[r0,#6]  ; stImage_BatUp
0013f8  e0480000          SUB      r0,r8,r0
0013fc  e6ff8070          UXTH     r8,r0
;;;503    	u32GfLayerBlendBitmapFull(&stImage_BatUp, &stGDC0LayerA, xtmp, ytmp);
001400  e1a03008          MOV      r3,r8
001404  e51f14a4          LDR      r1,|L1.3944|
001408  e59f0d38          LDR      r0,|L1.8520|
00140c  e59d2018          LDR      r2,[sp,#0x18]
001410  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;504    	vGfListExecute();
001414  ebfffffe          BL       vGfListExecute
;;;505    
;;;506    	u32GfLayerBlendBitmapFull(pimg, &stGDC0LayerA, pstTmpBar->u16Startx + stImage_BatDownVal.u16Width / 2 - pimg->u16Width / 2, pstTmpBar->u16Starty + 5 + stImage_BatDownVal.u16Height);
001418  e59f0d1c          LDR      r0,|L1.8508|
00141c  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_BatDownVal
001420  e58d0004          STR      r0,[sp,#4]
001424  e0800fa0          ADD      r0,r0,r0,LSR #31
001428  e1d410b0          LDRH     r1,[r4,#0]
00142c  e08110c0          ADD      r1,r1,r0,ASR #1
001430  e1db00b4          LDRH     r0,[r11,#4]
001434  e58d0008          STR      r0,[sp,#8]
001438  e0800fa0          ADD      r0,r0,r0,LSR #31
00143c  e04120c0          SUB      r2,r1,r0,ASR #1
001440  e1d400b2          LDRH     r0,[r4,#2]
001444  e2800005          ADD      r0,r0,#5
001448  e59f1cec          LDR      r1,|L1.8508|
00144c  e1d110b6          LDRH     r1,[r1,#6]  ; stImage_BatDownVal
001450  e0803001          ADD      r3,r0,r1
001454  e51f14f4          LDR      r1,|L1.3944|
001458  e1a0000b          MOV      r0,r11
00145c  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;507    	vGfListExecute();
001460  ebfffffe          BL       vGfListExecute
;;;508    
;;;509    
;;;510    	for(u8jCount = 0;u8jCount < 3;u8jCount++)
001464  e3a07000          MOV      r7,#0
001468  ea00007c          B        |L1.5728|
                  |L1.5228|
;;;511    	{
;;;512    		if(u8jCount == 0)
00146c  e3570000          CMP      r7,#0
001470  1a00000a          BNE      |L1.5280|
;;;513    		{
;;;514    			pcurrent = stshowd;
001474  e59d6028          LDR      r6,[sp,#0x28]
;;;515    			tmpx = pstTmpBar->u16Startx + stImage_BatDownVal.u16Width + 4;
001478  e1d400b0          LDRH     r0,[r4,#0]
00147c  e59f1cb8          LDR      r1,|L1.8508|
001480  e1d110b4          LDRH     r1,[r1,#4]  ; stImage_BatDownVal
001484  e0800001          ADD      r0,r0,r1
001488  e2800004          ADD      r0,r0,#4
00148c  e6ff0070          UXTH     r0,r0
001490  e58d0014          STR      r0,[sp,#0x14]
;;;516    			tmpy =  pstTmpBar->u16Starty;
001494  e1d400b2          LDRH     r0,[r4,#2]
001498  e58d0010          STR      r0,[sp,#0x10]
00149c  ea000024          B        |L1.5428|
                  |L1.5280|
;;;517    		}
;;;518    		else if(u8jCount == 1)
0014a0  e3570001          CMP      r7,#1
0014a4  1a000011          BNE      |L1.5360|
;;;519    		{
;;;520    			pcurrent = stshowm;
0014a8  e59d6024          LDR      r6,[sp,#0x24]
;;;521    			tmpx = pstTmpBar->u16Startx + stImage_BatDownVal.u16Width + 4;
0014ac  e1d400b0          LDRH     r0,[r4,#0]
0014b0  e59f1c84          LDR      r1,|L1.8508|
0014b4  e1d110b4          LDRH     r1,[r1,#4]  ; stImage_BatDownVal
0014b8  e0800001          ADD      r0,r0,r1
0014bc  e2800004          ADD      r0,r0,#4
0014c0  e6ff0070          UXTH     r0,r0
0014c4  e58d0014          STR      r0,[sp,#0x14]
;;;522    			tmpy = pstTmpBar->u16Starty - (pstTmpBar->u8MaxLevel / 2) * stImage_BatVal.u16Height;
0014c8  e5d40004          LDRB     r0,[r4,#4]
0014cc  e0801fa0          ADD      r1,r0,r0,LSR #31
0014d0  e1a020c1          ASR      r2,r1,#1
0014d4  e59f1c64          LDR      r1,|L1.8512|
0014d8  e1d110b6          LDRH     r1,[r1,#6]  ; stImage_BatVal
0014dc  e1d430b2          LDRH     r3,[r4,#2]
0014e0  e0613192          MLS      r1,r2,r1,r3
0014e4  e6ff1071          UXTH     r1,r1
0014e8  e58d1010          STR      r1,[sp,#0x10]
0014ec  ea000010          B        |L1.5428|
                  |L1.5360|
;;;523    		}
;;;524    		else if(u8jCount == 2) 
0014f0  e3570002          CMP      r7,#2
0014f4  1a00000e          BNE      |L1.5428|
;;;525    		{
;;;526    			pcurrent = stshowu;
0014f8  e59d6020          LDR      r6,[sp,#0x20]
;;;527    			tmpx = pstTmpBar->u16Startx + stImage_BatDownVal.u16Width + 4;
0014fc  e1d400b0          LDRH     r0,[r4,#0]
001500  e59f1c34          LDR      r1,|L1.8508|
001504  e1d110b4          LDRH     r1,[r1,#4]  ; stImage_BatDownVal
001508  e0800001          ADD      r0,r0,r1
00150c  e2800004          ADD      r0,r0,#4
001510  e6ff0070          UXTH     r0,r0
001514  e58d0014          STR      r0,[sp,#0x14]
;;;528    			tmpy = pstTmpBar->u16Starty - pstTmpBar->u8MaxLevel * stImage_BatVal.u16Height;
001518  e1d400b2          LDRH     r0,[r4,#2]
00151c  e5d41004          LDRB     r1,[r4,#4]
001520  e59f2c18          LDR      r2,|L1.8512|
001524  e1d220b6          LDRH     r2,[r2,#6]  ; stImage_BatVal
001528  e0600291          MLS      r0,r1,r2,r0
00152c  e6ff0070          UXTH     r0,r0
001530  e58d0010          STR      r0,[sp,#0x10]
                  |L1.5428|
;;;529    		}
;;;530    		
;;;531    		if(pcurrent->u8flag == 1)
001534  e5d60004          LDRB     r0,[r6,#4]
001538  e3500001          CMP      r0,#1
00153c  1a00000c          BNE      |L1.5492|
;;;532    		{
;;;533    			u32GfLayerBlendBitmapFull(pcurrent->utdata.pstimage_char, &stGDC0LayerA, tmpx, tmpy - pcurrent->utdata.pstimage_char->u16Height / 2);
001540  e5961000          LDR      r1,[r6,#0]
001544  e1d110b6          LDRH     r1,[r1,#6]
001548  e58d1008          STR      r1,[sp,#8]
00154c  e0811fa1          ADD      r1,r1,r1,LSR #31
001550  e1a020c1          ASR      r2,r1,#1
001554  e59d1010          LDR      r1,[sp,#0x10]
001558  e0413002          SUB      r3,r1,r2
00155c  e5960000          LDR      r0,[r6,#0]
001560  e51f1600          LDR      r1,|L1.3944|
001564  e59d2014          LDR      r2,[sp,#0x14]
001568  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;534    			vGfListExecute();
00156c  ebfffffe          BL       vGfListExecute
001570  ea000038          B        |L1.5720|
                  |L1.5492|
;;;535    		}
;;;536    		else if(pcurrent->u8flag == 2)
001574  e5d60004          LDRB     r0,[r6,#4]
001578  e3500002          CMP      r0,#2
00157c  1a000035          BNE      |L1.5720|
;;;537    		{
;;;538    			u32tmp = 1;
001580  e3a09001          MOV      r9,#1
;;;539    			u8iCount = pcurrent->u8num;
001584  e5d65005          LDRB     r5,[r6,#5]
;;;540    			while(--u8iCount)
001588  ea000001          B        |L1.5524|
                  |L1.5516|
;;;541    				u32tmp = u32tmp * 10;
00158c  e0890109          ADD      r0,r9,r9,LSL #2
001590  e1a09080          LSL      r9,r0,#1
                  |L1.5524|
001594  e2450001          SUB      r0,r5,#1              ;540
001598  e20000ff          AND      r0,r0,#0xff           ;540
00159c  e1b05000          MOVS     r5,r0                 ;540
0015a0  1afffff9          BNE      |L1.5516|
;;;542    			for(u8iCount = pcurrent->u8num;u8iCount >= 1;u8iCount--)
0015a4  e5d65005          LDRB     r5,[r6,#5]
0015a8  ea000028          B        |L1.5712|
                  |L1.5548|
;;;543    			{
;;;544    				u8tmp = (pcurrent->utdata.u16data % (u32tmp * 10)) / (u32tmp);
0015ac  e0892109          ADD      r2,r9,r9,LSL #2
0015b0  e1a01082          LSL      r1,r2,#1
0015b4  e1d600b0          LDRH     r0,[r6,#0]
0015b8  ebfffffe          BL       __aeabi_uidivmod
0015bc  e58d1008          STR      r1,[sp,#8]
0015c0  e1a01009          MOV      r1,r9
0015c4  e59d0008          LDR      r0,[sp,#8]
0015c8  ebfffffe          BL       __aeabi_uidiv
0015cc  e200a0ff          AND      r10,r0,#0xff
;;;545    				u32tmp = u32tmp / 10;
0015d0  e3a0100a          MOV      r1,#0xa
0015d4  e1a00009          MOV      r0,r9
0015d8  ebfffffe          BL       __aeabi_uidiv
0015dc  e1a09000          MOV      r9,r0
;;;546    				tmpy2 = tmpy - stImage_wfont[u8tmp].u16Height / 2;
0015e0  e08a110a          ADD      r1,r10,r10,LSL #2
0015e4  e51f2658          LDR      r2,|L1.3988|
0015e8  e0821101          ADD      r1,r2,r1,LSL #2
0015ec  e1d100b6          LDRH     r0,[r1,#6]
0015f0  e0801fa0          ADD      r1,r0,r0,LSR #31
0015f4  e1a020c1          ASR      r2,r1,#1
0015f8  e59d1010          LDR      r1,[sp,#0x10]
0015fc  e0411002          SUB      r1,r1,r2
001600  e6ff1071          UXTH     r1,r1
001604  e58d100c          STR      r1,[sp,#0xc]
;;;547    				u32GfLayerBlendBitmapFull(&stImage_wfont[u8tmp], &stGDC0LayerA, tmpx, tmpy2);
001608  e08a110a          ADD      r1,r10,r10,LSL #2
00160c  e51f2680          LDR      r2,|L1.3988|
001610  e0820101          ADD      r0,r2,r1,LSL #2
001614  e51f16b4          LDR      r1,|L1.3944|
001618  e59d2014          LDR      r2,[sp,#0x14]
00161c  e59d300c          LDR      r3,[sp,#0xc]
001620  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;548    				tmpx += stImage_wfont[u8tmp].u16Width;
001624  e08a010a          ADD      r0,r10,r10,LSL #2
001628  e51f169c          LDR      r1,|L1.3988|
00162c  e0810100          ADD      r0,r1,r0,LSL #2
001630  e1d010b4          LDRH     r1,[r0,#4]
001634  e59d0014          LDR      r0,[sp,#0x14]
001638  e0800001          ADD      r0,r0,r1
00163c  e6ff0070          UXTH     r0,r0
001640  e58d0014          STR      r0,[sp,#0x14]
;;;549    				vGfListExecute();
001644  ebfffffe          BL       vGfListExecute
001648  e2450001          SUB      r0,r5,#1              ;542
00164c  e20050ff          AND      r5,r0,#0xff           ;542
                  |L1.5712|
001650  e3550001          CMP      r5,#1                 ;542
001654  aaffffd4          BGE      |L1.5548|
                  |L1.5720|
001658  e2870001          ADD      r0,r7,#1              ;510
00165c  e20070ff          AND      r7,r0,#0xff           ;510
                  |L1.5728|
001660  e3570003          CMP      r7,#3                 ;510
001664  baffff80          BLT      |L1.5228|
;;;550    			}
;;;551    		}		
;;;552    	}
;;;553    	
;;;554    }
001668  e28dd02c          ADD      sp,sp,#0x2c
00166c  e8bd8ff0          POP      {r4-r11,pc}
;;;555    
                          ENDP

                  vShowBatteryInit PROC
;;;400    
;;;401    void vShowBatteryInit(void)
001670  e52de004          PUSH     {lr}
;;;402    {
001674  e24dd01c          SUB      sp,sp,#0x1c
;;;403    	battery_show_st stbatshow[3];
;;;404    	
;;;405        stbatshow[0].u8flag = 2;
001678  e3a00002          MOV      r0,#2
00167c  e5cd0008          STRB     r0,[sp,#8]
;;;406    	stbatshow[0].u8num = 1;
001680  e3a00001          MOV      r0,#1
001684  e5cd0009          STRB     r0,[sp,#9]
;;;407    	stbatshow[0].utdata.u16data = 0;
001688  e3a00000          MOV      r0,#0
00168c  e1cd00b4          STRH     r0,[sp,#4]
;;;408        stbatshow[1].u8flag = 2;
001690  e3a00002          MOV      r0,#2
001694  e5cd0010          STRB     r0,[sp,#0x10]
;;;409    	stbatshow[1].u8num = 3;
001698  e3a00003          MOV      r0,#3
00169c  e5cd0011          STRB     r0,[sp,#0x11]
;;;410    	stbatshow[1].utdata.u16data = 200;
0016a0  e3a000c8          MOV      r0,#0xc8
0016a4  e1cd00bc          STRH     r0,[sp,#0xc]
;;;411        stbatshow[2].u8flag = 2;
0016a8  e3a00002          MOV      r0,#2
0016ac  e5cd0018          STRB     r0,[sp,#0x18]
;;;412    	stbatshow[2].u8num = 3;
0016b0  e3a00003          MOV      r0,#3
0016b4  e5cd0019          STRB     r0,[sp,#0x19]
;;;413    	stbatshow[2].utdata.u16data = 400;
0016b8  e3000190          MOVW     r0,#0x190
0016bc  e1cd01b4          STRH     r0,[sp,#0x14]
;;;414    	vCreatBat(&stBatTable[0],&stbatshow[2],&stbatshow[1],&stbatshow[0],&stImage_fontv);
0016c0  e59f0a84          LDR      r0,|L1.8524|
0016c4  e58d0000          STR      r0,[sp,#0]
0016c8  e28d3004          ADD      r3,sp,#4
0016cc  e28d200c          ADD      r2,sp,#0xc
0016d0  e28d1014          ADD      r1,sp,#0x14
0016d4  e59f0a74          LDR      r0,|L1.8528|
0016d8  ebfffffe          BL       vCreatBat
;;;415    	stbatshow[1].utdata.u16data = 150;
0016dc  e3a00096          MOV      r0,#0x96
0016e0  e1cd00bc          STRH     r0,[sp,#0xc]
;;;416    	stbatshow[2].utdata.u16data = 300;
0016e4  e300012c          MOVW     r0,#0x12c
0016e8  e1cd01b4          STRH     r0,[sp,#0x14]
;;;417    	vCreatBat(&stBatTable[1],&stbatshow[2],&stbatshow[1],&stbatshow[0],&stImage_fonta);
0016ec  e59f0a60          LDR      r0,|L1.8532|
0016f0  e58d0000          STR      r0,[sp,#0]
0016f4  e28d3004          ADD      r3,sp,#4
0016f8  e28d200c          ADD      r2,sp,#0xc
0016fc  e28d1014          ADD      r1,sp,#0x14
001700  e59f0a50          LDR      r0,|L1.8536|
001704  ebfffffe          BL       vCreatBat
;;;418    	stbatshow[0].utdata.u16data = 8;
001708  e3a00008          MOV      r0,#8
00170c  e1cd00b4          STRH     r0,[sp,#4]
;;;419    	stbatshow[1].u8num = 2;
001710  e3a00002          MOV      r0,#2
001714  e5cd0011          STRB     r0,[sp,#0x11]
;;;420    	stbatshow[1].utdata.u16data = 12;
001718  e3a0000c          MOV      r0,#0xc
00171c  e1cd00bc          STRH     r0,[sp,#0xc]
;;;421    	stbatshow[2].u8num = 2;
001720  e3a00002          MOV      r0,#2
001724  e5cd0019          STRB     r0,[sp,#0x19]
;;;422    	stbatshow[2].utdata.u16data = 16;
001728  e3a00010          MOV      r0,#0x10
00172c  e1cd01b4          STRH     r0,[sp,#0x14]
;;;423    	vCreatBat(&stBatTable[3],&stbatshow[2],&stbatshow[1],&stbatshow[0],&stImage_fontv);	
001730  e59f0a14          LDR      r0,|L1.8524|
001734  e58d0000          STR      r0,[sp,#0]
001738  e28d3004          ADD      r3,sp,#4
00173c  e28d200c          ADD      r2,sp,#0xc
001740  e28d1014          ADD      r1,sp,#0x14
001744  e59f0a10          LDR      r0,|L1.8540|
001748  ebfffffe          BL       vCreatBat
;;;424        stbatshow[0].u8flag = 1;
00174c  e3a00001          MOV      r0,#1
001750  e5cd0008          STRB     r0,[sp,#8]
;;;425    	stbatshow[0].utdata.pstimage_char = &stImage_fonte;
001754  e59f0a04          LDR      r0,|L1.8544|
001758  e58d0004          STR      r0,[sp,#4]
;;;426        stbatshow[1].u8flag = 0;
00175c  e3a00000          MOV      r0,#0
001760  e5cd0010          STRB     r0,[sp,#0x10]
;;;427        stbatshow[2].u8flag = 1;
001764  e3a00001          MOV      r0,#1
001768  e5cd0018          STRB     r0,[sp,#0x18]
;;;428    	stbatshow[2].utdata.pstimage_char = &stImage_fontf;
00176c  e59f09f0          LDR      r0,|L1.8548|
001770  e58d0014          STR      r0,[sp,#0x14]
;;;429    	vCreatBat(&stBatTable[2],&stbatshow[2],&stbatshow[1],&stbatshow[0],&stImage_fontsoc);
001774  e59f09ec          LDR      r0,|L1.8552|
001778  e58d0000          STR      r0,[sp,#0]
00177c  e28d3004          ADD      r3,sp,#4
001780  e28d200c          ADD      r2,sp,#0xc
001784  e28d1014          ADD      r1,sp,#0x14
001788  e59f09dc          LDR      r0,|L1.8556|
00178c  ebfffffe          BL       vCreatBat
;;;430    
;;;431    }
001790  e28dd01c          ADD      sp,sp,#0x1c
001794  e49df004          POP      {pc}
;;;432    
                          ENDP

                  vShowDistanceInit PROC
;;;433    void vShowDistanceInit(void)
001798  e92d4010          PUSH     {r4,lr}
;;;434    {
;;;435    	vGfLayerBlitBitmapFull(&stImage_totaldistance, &stGDC0LayerA, 745, 385);
00179c  e3003181          MOV      r3,#0x181
0017a0  e30022e9          MOV      r2,#0x2e9
0017a4  e51f1844          LDR      r1,|L1.3944|
0017a8  e59f09c0          LDR      r0,|L1.8560|
0017ac  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;436    	vGfListExecute();	
0017b0  ebfffffe          BL       vGfListExecute
;;;437    	
;;;438    	vGfLayerBlitBitmapFull(&stImage_tripdistance, &stGDC0LayerA, 385, 385);
0017b4  e3003181          MOV      r3,#0x181
0017b8  e1a02003          MOV      r2,r3
0017bc  e51f185c          LDR      r1,|L1.3944|
0017c0  e59f09ac          LDR      r0,|L1.8564|
0017c4  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;439    	vGfListExecute();
0017c8  ebfffffe          BL       vGfListExecute
;;;440    
;;;441        vGfLayerBlitBitmapFull(&stImage_km, &stGDC0LayerA, 385 + stImage_tripdistance.u16Width + 7*8, 385);
0017cc  e59f09a0          LDR      r0,|L1.8564|
0017d0  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_tripdistance
0017d4  e3001181          MOV      r1,#0x181
0017d8  e0800001          ADD      r0,r0,r1
0017dc  e2802038          ADD      r2,r0,#0x38
0017e0  e1a03001          MOV      r3,r1
0017e4  e51f1884          LDR      r1,|L1.3944|
0017e8  e59f0988          LDR      r0,|L1.8568|
0017ec  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;442    	vGfListExecute();	
0017f0  ebfffffe          BL       vGfListExecute
;;;443    
;;;444    	vGfLayerBlitBitmapFull(&stImage_km, &stGDC0LayerA, 745 + stImage_totaldistance.u16Width + 7*8, 385);
0017f4  e59f0974          LDR      r0,|L1.8560|
0017f8  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_totaldistance
0017fc  e30012e9          MOV      r1,#0x2e9
001800  e0800001          ADD      r0,r0,r1
001804  e2802038          ADD      r2,r0,#0x38
001808  e3003181          MOV      r3,#0x181
00180c  e51f18ac          LDR      r1,|L1.3944|
001810  e59f0960          LDR      r0,|L1.8568|
001814  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;445    	vGfListExecute();
001818  ebfffffe          BL       vGfListExecute
;;;446    
;;;447    	u16Type3XYTable[TOTAL_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE][0] = 745 + stImage_totaldistance.u16Width + 7*8;
00181c  e59f094c          LDR      r0,|L1.8560|
001820  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_totaldistance
001824  e30012e9          MOV      r1,#0x2e9
001828  e0800001          ADD      r0,r0,r1
00182c  e2800038          ADD      r0,r0,#0x38
001830  e51f18c0          LDR      r1,|L1.3960|
001834  e1c102b0          STRH     r0,[r1,#0x20]  ; u16Type3XYTable
;;;448    	u16Type3XYTable[TOTAL_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE][1] = 401;
001838  e3000191          MOV      r0,#0x191
00183c  e1c102b2          STRH     r0,[r1,#0x22]
;;;449    
;;;450    	u16Type3XYTable[TRIP_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE][0] = 385 + stImage_tripdistance.u16Width + 7*8;
001840  e59f092c          LDR      r0,|L1.8564|
001844  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_tripdistance
001848  e3001181          MOV      r1,#0x181
00184c  e0800001          ADD      r0,r0,r1
001850  e2800038          ADD      r0,r0,#0x38
001854  e51f18e4          LDR      r1,|L1.3960|
001858  e1c102b4          STRH     r0,[r1,#0x24]  ; u16Type3XYTable
;;;451    	u16Type3XYTable[TRIP_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE][1] = 401;
00185c  e3000191          MOV      r0,#0x191
001860  e1c102b6          STRH     r0,[r1,#0x26]
;;;452    	
;;;453    }
001864  e8bd8010          POP      {r4,pc}
;;;454    
                          ENDP

                  vShowChargeTimeInit PROC
;;;455    
;;;456    void vShowChargeTimeInit(void)
001868  e92d4010          PUSH     {r4,lr}
;;;457    {
;;;458    	vGfLayerBlitBitmapFull(&stImage_chargetime, &stGDC0LayerA, 959, 51);
00186c  e3a03033          MOV      r3,#0x33
001870  e30023bf          MOV      r2,#0x3bf
001874  e51f1914          LDR      r1,|L1.3944|
001878  e59f08fc          LDR      r0,|L1.8572|
00187c  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;459    	vGfListExecute();
001880  ebfffffe          BL       vGfListExecute
;;;460    	
;;;461    	vGfLayerBlitBitmapFull(&stImage_hour, &stGDC0LayerA, 959 + stImage_chargetime.u16Width + 2*18, 51);
001884  e59f08f0          LDR      r0,|L1.8572|
001888  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_chargetime
00188c  e30013bf          MOV      r1,#0x3bf
001890  e0800001          ADD      r0,r0,r1
001894  e2802024          ADD      r2,r0,#0x24
001898  e3a03033          MOV      r3,#0x33
00189c  e51f193c          LDR      r1,|L1.3944|
0018a0  e59f08d8          LDR      r0,|L1.8576|
0018a4  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;462    	vGfListExecute();	
0018a8  ebfffffe          BL       vGfListExecute
;;;463    	
;;;464    	vGfLayerBlitBitmapFull(&stImage_minute, &stGDC0LayerA, 959 + stImage_chargetime.u16Width + 4*18 + stImage_hour.u16Width, 51);
0018ac  e59f08c8          LDR      r0,|L1.8572|
0018b0  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_chargetime
0018b4  e30013bf          MOV      r1,#0x3bf
0018b8  e0800001          ADD      r0,r0,r1
0018bc  e2800048          ADD      r0,r0,#0x48
0018c0  e59f18b8          LDR      r1,|L1.8576|
0018c4  e1d110b4          LDRH     r1,[r1,#4]  ; stImage_hour
0018c8  e0802001          ADD      r2,r0,r1
0018cc  e3a03033          MOV      r3,#0x33
0018d0  e51f1970          LDR      r1,|L1.3944|
0018d4  e59f08a8          LDR      r0,|L1.8580|
0018d8  ebfffffe          BL       vGfLayerBlitBitmapFull
;;;465    	vGfListExecute();
0018dc  ebfffffe          BL       vGfListExecute
;;;466    	
;;;467    	u16Type3XYTable[CHARGE_TIME_INDEX_ee - TYPE3_NUMBER_BASE][0] = 959 + stImage_chargetime.u16Width + 2*18;
0018e0  e59f0894          LDR      r0,|L1.8572|
0018e4  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_chargetime
0018e8  e30013bf          MOV      r1,#0x3bf
0018ec  e0800001          ADD      r0,r0,r1
0018f0  e2800024          ADD      r0,r0,#0x24
0018f4  e51f1984          LDR      r1,|L1.3960|
0018f8  e1c104b4          STRH     r0,[r1,#0x44]  ; u16Type3XYTable
;;;468    	u16Type3XYTable[CHARGE_TIME_INDEX_ee - TYPE3_NUMBER_BASE][1] = 75;
0018fc  e3a0004b          MOV      r0,#0x4b
001900  e1c104b6          STRH     r0,[r1,#0x46]
;;;469    
;;;470    	u16Type3XYTable[CHARGE_TIME_M_INDEX_ee - TYPE3_NUMBER_BASE][0] = 959 + stImage_chargetime.u16Width + 4*18 + stImage_hour.u16Width;
001904  e59f0870          LDR      r0,|L1.8572|
001908  e1d000b4          LDRH     r0,[r0,#4]  ; stImage_chargetime
00190c  e30013bf          MOV      r1,#0x3bf
001910  e0800001          ADD      r0,r0,r1
001914  e2800048          ADD      r0,r0,#0x48
001918  e59f1860          LDR      r1,|L1.8576|
00191c  e1d110b4          LDRH     r1,[r1,#4]  ; stImage_hour
001920  e0800001          ADD      r0,r0,r1
001924  e51f19b4          LDR      r1,|L1.3960|
001928  e1c105b0          STRH     r0,[r1,#0x50]  ; u16Type3XYTable
;;;471    	u16Type3XYTable[CHARGE_TIME_M_INDEX_ee - TYPE3_NUMBER_BASE][1] = 75;
00192c  e3a0004b          MOV      r0,#0x4b
001930  e1c105b2          STRH     r0,[r1,#0x52]
;;;472    
;;;473    }
001934  e8bd8010          POP      {r4,pc}
;;;474    
                          ENDP

                  vGetNextAngle PROC
;;;556    
;;;557    void vGetNextAngle(needle_show_st* stneedle, int iInitAngle, int iSpeedLevel, int iMaxStep, float32_t f32param, uint8_t index, int flag)
001938  e92d5ffc          PUSH     {r2-r12,lr}
;;;558    {
00193c  e1a04000          MOV      r4,r0
001940  e1a06001          MOV      r6,r1
001944  e1a07002          MOV      r7,r2
001948  e1a08003          MOV      r8,r3
00194c  e59d9034          LDR      r9,[sp,#0x34]
;;;559        float32_t f32stepTmp = 0;
001950  e3a00000          MOV      r0,#0
001954  e58d0004          STR      r0,[sp,#4]
;;;560    	float32_t f32speed_angle;
;;;561    	if(flag == -1)
001958  e59d0038          LDR      r0,[sp,#0x38]
00195c  e3700001          CMN      r0,#1
001960  1a00000f          BNE      |L1.6564|
;;;562    		f32speed_angle = iInitAngle - (gModeData.sttype3DataTable[index - TYPE3_NUMBER_BASE].u32data & 0XFFFF) / f32param;
001964  e2491041          SUB      r1,r9,#0x41
001968  e59f2818          LDR      r2,|L1.8584|
00196c  e7921181          LDR      r1,[r2,r1,LSL #3]
001970  e6ff0071          UXTH     r0,r1
001974  ebfffffe          BL       __aeabi_ui2f
001978  e1a0b000          MOV      r11,r0
00197c  e59d1030          LDR      r1,[sp,#0x30]
001980  ebfffffe          BL       __aeabi_fdiv
001984  e1a0a000          MOV      r10,r0
001988  e1a00006          MOV      r0,r6
00198c  ebfffffe          BL       __aeabi_i2f
001990  e1a0100a          MOV      r1,r10
001994  e58d0000          STR      r0,[sp,#0]
001998  ebfffffe          BL       __aeabi_fsub
00199c  e1a05000          MOV      r5,r0
0019a0  ea00000e          B        |L1.6624|
                  |L1.6564|
;;;563    	else 
;;;564    		f32speed_angle = iInitAngle + (gModeData.sttype3DataTable[index - TYPE3_NUMBER_BASE].u32data & 0XFFFF) / f32param;
0019a4  e2491041          SUB      r1,r9,#0x41
0019a8  e59f27d8          LDR      r2,|L1.8584|
0019ac  e7921181          LDR      r1,[r2,r1,LSL #3]
0019b0  e6ff0071          UXTH     r0,r1
0019b4  ebfffffe          BL       __aeabi_ui2f
0019b8  e1a0b000          MOV      r11,r0
0019bc  e59d1030          LDR      r1,[sp,#0x30]
0019c0  ebfffffe          BL       __aeabi_fdiv
0019c4  e1a0a000          MOV      r10,r0
0019c8  e1a00006          MOV      r0,r6
0019cc  ebfffffe          BL       __aeabi_i2f
0019d0  e1a0100a          MOV      r1,r10
0019d4  e58d0000          STR      r0,[sp,#0]
0019d8  ebfffffe          BL       __aeabi_fadd
0019dc  e1a05000          MOV      r5,r0
                  |L1.6624|
;;;565    	
;;;566    	if(stneedle->f32CurrentDAngle != f32speed_angle)   
0019e0  e1a01005          MOV      r1,r5
0019e4  e5940004          LDR      r0,[r4,#4]
0019e8  ebfffffe          BL       __aeabi_cfcmpeq
0019ec  0a00003e          BEQ      |L1.6892|
;;;567    	{
;;;568    		f32stepTmp = stneedle->f32StepAngle;
0019f0  e5940008          LDR      r0,[r4,#8]
0019f4  e58d0004          STR      r0,[sp,#4]
;;;569    		if(stneedle->f32rota_angle < f32speed_angle)
0019f8  e1a01005          MOV      r1,r5
0019fc  e5940000          LDR      r0,[r4,#0]
001a00  ebfffffe          BL       __aeabi_cfcmple
001a04  2a00000c          BCS      |L1.6716|
;;;570    		{  
;;;571    			stneedle->f32StepAngle = ((uint32_t)(f32speed_angle - stneedle->f32rota_angle)) / iSpeedLevel + 1;
001a08  e1a00005          MOV      r0,r5
001a0c  e5941000          LDR      r1,[r4,#0]
001a10  ebfffffe          BL       __aeabi_fsub
001a14  e58d0000          STR      r0,[sp,#0]
001a18  ebfffffe          BL       __aeabi_f2uiz
001a1c  e1a0b000          MOV      r11,r0
001a20  e1a01007          MOV      r1,r7
001a24  ebfffffe          BL       __aeabi_uidiv
001a28  e280a001          ADD      r10,r0,#1
001a2c  e1a0000a          MOV      r0,r10
001a30  ebfffffe          BL       __aeabi_ui2f
001a34  e5840008          STR      r0,[r4,#8]
001a38  ea00000f          B        |L1.6780|
                  |L1.6716|
;;;572    		}
;;;573    		else if(stneedle->f32rota_angle > f32speed_angle)
001a3c  e1a01005          MOV      r1,r5
001a40  e5940000          LDR      r0,[r4,#0]
001a44  ebfffffe          BL       __aeabi_cfrcmple
001a48  2a00000b          BCS      |L1.6780|
;;;574    		{
;;;575    			stneedle->f32StepAngle = ((uint32_t)(stneedle->f32rota_angle - f32speed_angle)) / iSpeedLevel + 1;
001a4c  e1a01005          MOV      r1,r5
001a50  e5940000          LDR      r0,[r4,#0]
001a54  ebfffffe          BL       __aeabi_fsub
001a58  e58d0000          STR      r0,[sp,#0]
001a5c  ebfffffe          BL       __aeabi_f2uiz
001a60  e1a0b000          MOV      r11,r0
001a64  e1a01007          MOV      r1,r7
001a68  ebfffffe          BL       __aeabi_uidiv
001a6c  e280a001          ADD      r10,r0,#1
001a70  e1a0000a          MOV      r0,r10
001a74  ebfffffe          BL       __aeabi_ui2f
001a78  e5840008          STR      r0,[r4,#8]
                  |L1.6780|
;;;576    		}
;;;577    
;;;578    		if(stneedle->f32StepAngle > iMaxStep)  stneedle->f32StepAngle = iMaxStep;
001a7c  e1a00008          MOV      r0,r8
001a80  ebfffffe          BL       __aeabi_i2f
001a84  e1a0a000          MOV      r10,r0
001a88  e5941008          LDR      r1,[r4,#8]
001a8c  ebfffffe          BL       __aeabi_cfcmple
001a90  2a000002          BCS      |L1.6816|
001a94  e1a00008          MOV      r0,r8
001a98  ebfffffe          BL       __aeabi_i2f
001a9c  e5840008          STR      r0,[r4,#8]
                  |L1.6816|
;;;579    
;;;580    		if(stneedle->f32CurrentDAngle > stneedle->f32rota_angle) stneedle->f32rota_angle += f32stepTmp;
001aa0  e5940004          LDR      r0,[r4,#4]
001aa4  e5941000          LDR      r1,[r4,#0]
001aa8  ebfffffe          BL       __aeabi_cfrcmple
001aac  2a000004          BCS      |L1.6852|
001ab0  e5940000          LDR      r0,[r4,#0]
001ab4  e59d1004          LDR      r1,[sp,#4]
001ab8  ebfffffe          BL       __aeabi_fadd
001abc  e5840000          STR      r0,[r4,#0]
001ac0  ea000007          B        |L1.6884|
                  |L1.6852|
;;;581    		else if(stneedle->f32CurrentDAngle < stneedle->f32rota_angle) stneedle->f32rota_angle -= f32stepTmp;
001ac4  e5940004          LDR      r0,[r4,#4]
001ac8  e5941000          LDR      r1,[r4,#0]
001acc  ebfffffe          BL       __aeabi_cfcmple
001ad0  2a000003          BCS      |L1.6884|
001ad4  e5940000          LDR      r0,[r4,#0]
001ad8  e59d1004          LDR      r1,[sp,#4]
001adc  ebfffffe          BL       __aeabi_fsub
001ae0  e5840000          STR      r0,[r4,#0]
                  |L1.6884|
;;;582    		stneedle->f32CurrentDAngle = f32speed_angle;
001ae4  e5845004          STR      r5,[r4,#4]
001ae8  ea000026          B        |L1.7048|
                  |L1.6892|
;;;583    	}
;;;584    	else
;;;585    	{
;;;586    		if(stneedle->f32rota_angle < stneedle->f32CurrentDAngle)
001aec  e1c400d0          LDRD     r0,r1,[r4,#0]
001af0  ebfffffe          BL       __aeabi_cfcmple
001af4  2a000004          BCS      |L1.6924|
;;;587    		{  
;;;588    			stneedle->f32rota_angle += stneedle->f32StepAngle;
001af8  e5940000          LDR      r0,[r4,#0]
001afc  e5941008          LDR      r1,[r4,#8]
001b00  ebfffffe          BL       __aeabi_fadd
001b04  e5840000          STR      r0,[r4,#0]
001b08  ea000006          B        |L1.6952|
                  |L1.6924|
;;;589    		}
;;;590    		else if(stneedle->f32rota_angle > stneedle->f32CurrentDAngle)
001b0c  e1c400d0          LDRD     r0,r1,[r4,#0]
001b10  ebfffffe          BL       __aeabi_cfrcmple
001b14  2a000003          BCS      |L1.6952|
;;;591    		{
;;;592    			stneedle->f32rota_angle -= stneedle->f32StepAngle;
001b18  e5940000          LDR      r0,[r4,#0]
001b1c  e5941008          LDR      r1,[r4,#8]
001b20  ebfffffe          BL       __aeabi_fsub
001b24  e5840000          STR      r0,[r4,#0]
                  |L1.6952|
;;;593    		}
;;;594    
;;;595    		if(stneedle->f32rota_angle < stneedle->f32CurrentDAngle)
001b28  e1c400d0          LDRD     r0,r1,[r4,#0]
001b2c  ebfffffe          BL       __aeabi_cfcmple
001b30  2a000009          BCS      |L1.7004|
;;;596    		{  
;;;597    			if((stneedle->f32CurrentDAngle - stneedle->f32rota_angle) < stneedle->f32StepAngle)
001b34  e5940004          LDR      r0,[r4,#4]
001b38  e5941000          LDR      r1,[r4,#0]
001b3c  ebfffffe          BL       __aeabi_fsub
001b40  e1a0a000          MOV      r10,r0
001b44  e5941008          LDR      r1,[r4,#8]
001b48  ebfffffe          BL       __aeabi_cfcmple
001b4c  2a00000d          BCS      |L1.7048|
;;;598    			{
;;;599    				stneedle->f32rota_angle = stneedle->f32CurrentDAngle;
001b50  e5940004          LDR      r0,[r4,#4]
001b54  e5840000          STR      r0,[r4,#0]
001b58  ea00000a          B        |L1.7048|
                  |L1.7004|
;;;600    			}
;;;601    		}
;;;602    		else if(stneedle->f32rota_angle > stneedle->f32CurrentDAngle)
001b5c  e1c400d0          LDRD     r0,r1,[r4,#0]
001b60  ebfffffe          BL       __aeabi_cfrcmple
001b64  2a000007          BCS      |L1.7048|
;;;603    		{
;;;604    			if((stneedle->f32rota_angle - stneedle->f32CurrentDAngle) < stneedle->f32StepAngle)
001b68  e1c400d0          LDRD     r0,r1,[r4,#0]
001b6c  ebfffffe          BL       __aeabi_fsub
001b70  e1a0a000          MOV      r10,r0
001b74  e5941008          LDR      r1,[r4,#8]
001b78  ebfffffe          BL       __aeabi_cfcmple
001b7c  2a000001          BCS      |L1.7048|
;;;605    			{
;;;606    				stneedle->f32rota_angle = stneedle->f32CurrentDAngle;
001b80  e5940004          LDR      r0,[r4,#4]
001b84  e5840000          STR      r0,[r4,#0]
                  |L1.7048|
;;;607    			}
;;;608    		}	
;;;609    	}
;;;610    
;;;611    }
001b88  e8bd9ffc          POP      {r2-r12,pc}
;;;612    
                          ENDP

                  vSetSpeedNeedle PROC
;;;618    needle_show_st stSpeedNeedle = {INIT_ANGLE, INIT_ANGLE, 0};
;;;619    void vSetSpeedNeedle(void)
001b8c  e92d400e          PUSH     {r1-r3,lr}
;;;620    {
;;;621    #ifdef _NEEDLE_SPEED_ENABLE
;;;622    	
;;;623    	vGetNextAngle(&stSpeedNeedle, INIT_ANGLE, SPEED_LEVEL, MAX_STEP, SPEED_PARAM, NEEDLE_SPEED_INDEX_ee, 1);
001b90  e3a00001          MOV      r0,#1
001b94  e3a01041          MOV      r1,#0x41
001b98  e59f25ec          LDR      r2,|L1.8588|
001b9c  e3a03005          MOV      r3,#5
001ba0  e58d2000          STR      r2,[sp,#0]
001ba4  e3a0200a          MOV      r2,#0xa
001ba8  e58d1004          STR      r1,[sp,#4]
001bac  e3e01072          MVN      r1,#0x72
001bb0  e58d0008          STR      r0,[sp,#8]
001bb4  e59f05d4          LDR      r0,|L1.8592|
001bb8  ebfffffe          BL       vGetNextAngle
;;;624    	vGfLayerRotateBlendBitmapFull(&stImage_needleA,stSpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001bbc  e51f0c4c          LDR      r0,|L1.3960|
001bc0  e1d000b2          LDRH     r0,[r0,#2]  ; u16Type3XYTable
001bc4  e58d0000          STR      r0,[sp,#0]
001bc8  e51f0c58          LDR      r0,|L1.3960|
001bcc  e1d030b0          LDRH     r3,[r0,#0]  ; u16Type3XYTable
001bd0  e59f05b8          LDR      r0,|L1.8592|
001bd4  e51f2c74          LDR      r2,|L1.3944|
001bd8  e5901000          LDR      r1,[r0,#0]  ; stSpeedNeedle
001bdc  e59f05b0          LDR      r0,|L1.8596|
001be0  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;625    	vGfListExecute();
001be4  ebfffffe          BL       vGfListExecute
;;;626    
;;;627    /*	
;;;628        vGfSetSubRes(GA_PIXEL_RES, GA_HIGH_RES);
;;;629        vGfLayerRotateBlendBitmapFull(&stImage_needle_final,rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE][0] - NEEDLE_1_XCPOS, u16Type3XYTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE][1] - NEEDLE_1_YCPOS);
;;;630        vGfSetSubRes(GA_PIXEL_RES, GA_PIXEL_RES);
;;;631    	vGfListExecute();
;;;632    */
;;;633    #endif	
;;;634    }
001be8  e8bd800e          POP      {r1-r3,pc}
;;;635    
                          ENDP

                  vShowSpeedNumber PROC
;;;636    
;;;637    void vShowSpeedNumber(void)
001bec  e12fff1e          BX       lr
;;;638    {
;;;639    #ifdef _SPEED_NUMBER_ENABLE
;;;640    	uint8_t u8iCount = 0;
;;;641    	int32_t i32widthCount = 0;
;;;642    	u8iCount = (gModeData.sttype3DataTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFFFF) / 100;
;;;643    	i32widthCount += SPEED_NUMBER_X;
;;;644    	u32GfLayerBlendBitmapFull(&stImage_digifont[u8iCount],&stGDC0LayerA,i32widthCount,SPEED_NUMBER_Y);
;;;645    	vGfListExecute();
;;;646    	i32widthCount += stImage_digifont[u8iCount].u16Width;
;;;647    	u8iCount = (gModeData.sttype3DataTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFFFF) % 100 / 10;
;;;648    	u32GfLayerBlendBitmapFull(&stImage_digifont[u8iCount],&stGDC0LayerA,i32widthCount,SPEED_NUMBER_Y);
;;;649    	vGfListExecute();
;;;650    	i32widthCount += stImage_digifont[u8iCount].u16Width;
;;;651    	u8iCount = (gModeData.sttype3DataTable[NEEDLE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFFFF) % 10;
;;;652    	u32GfLayerBlendBitmapFull(&stImage_digifont[u8iCount],&stGDC0LayerA,i32widthCount,SPEED_NUMBER_Y);
;;;653    	vGfListExecute();	
;;;654    #endif
;;;655    }
;;;656    
                          ENDP

                  vShowRotateSpeed PROC
;;;659    needle_show_st stRorateSpeedNeedle = {INIT_ANGLE_ROTATE, INIT_ANGLE_ROTATE, 0};
;;;660    void vShowRotateSpeed(void)
001bf0  e92d400e          PUSH     {r1-r3,lr}
;;;661    {
;;;662    #ifdef _NEEDLE_ROTATE_ENABLE 
;;;663    	vGetNextAngle(&stRorateSpeedNeedle, INIT_ANGLE_ROTATE, SPEED_LEVEL_ROTATE, MAX_STEP_ROTATE, SPEED_PARAM_ROTATE, ROTATE_SPEED_INDEX_ee, 1);
001bf4  e3a00001          MOV      r0,#1
001bf8  e3a01042          MOV      r1,#0x42
001bfc  e59f2594          LDR      r2,|L1.8600|
001c00  e3a03005          MOV      r3,#5
001c04  e58d2000          STR      r2,[sp,#0]
001c08  e3a0200a          MOV      r2,#0xa
001c0c  e58d1004          STR      r1,[sp,#4]
001c10  e3e01072          MVN      r1,#0x72
001c14  e58d0008          STR      r0,[sp,#8]
001c18  e59f057c          LDR      r0,|L1.8604|
001c1c  ebfffffe          BL       vGetNextAngle
;;;664    	vGfLayerRotateBlendBitmapFull(&stImage_needleA,stRorateSpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_ROTATE_INDEX_ee- TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_ROTATE_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001c20  e51f0cb0          LDR      r0,|L1.3960|
001c24  e1d005b6          LDRH     r0,[r0,#0x56]
001c28  e58d0000          STR      r0,[sp,#0]
001c2c  e51f0cbc          LDR      r0,|L1.3960|
001c30  e1d035b4          LDRH     r3,[r0,#0x54]  ; u16Type3XYTable
001c34  e59f0560          LDR      r0,|L1.8604|
001c38  e51f2cd8          LDR      r2,|L1.3944|
001c3c  e5901000          LDR      r1,[r0,#0]  ; stRorateSpeedNeedle
001c40  e59f054c          LDR      r0,|L1.8596|
001c44  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;665    	vGfListExecute();	
001c48  ebfffffe          BL       vGfListExecute
;;;666    #endif
;;;667    #ifdef _ROTATE_SPEED_ENABLE
;;;668    	vShowNumberAT(ROTATE_SPEED_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[ROTATE_SPEED_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0xffff,0);
;;;669    #endif
;;;670    
;;;671    }
001c4c  e8bd800e          POP      {r1-r3,pc}
;;;672    
                          ENDP

                  vShowkpa PROC
;;;674    needle_show_st stKPASpeedNeedle = {INIT_ANGLE_KPA, INIT_ANGLE_KPA, 0};
;;;675    void vShowkpa(void)
001c50  e92d400e          PUSH     {r1-r3,lr}
;;;676    {
;;;677    #ifdef _NEEDLE_KPAA_ENABLE
;;;678    		vGetNextAngle(&stKPASpeedNeedle, INIT_ANGLE_KPA, SPEED_LEVEL_KPA, MAX_STEP_KPA, SPEED_PARAM_KPA, NEEDLE_KPAA_INDEX_ee, 1);
001c54  e3a00001          MOV      r0,#1
001c58  e3a01057          MOV      r1,#0x57
001c5c  e59f253c          LDR      r2,|L1.8608|
001c60  e3a03005          MOV      r3,#5
001c64  e58d2000          STR      r2,[sp,#0]
001c68  e3a0200a          MOV      r2,#0xa
001c6c  e58d1004          STR      r1,[sp,#4]
001c70  e3e0107c          MVN      r1,#0x7c
001c74  e58d0008          STR      r0,[sp,#8]
001c78  e59f0524          LDR      r0,|L1.8612|
001c7c  ebfffffe          BL       vGetNextAngle
;;;679    		vGfLayerRotateBlendBitmapFull(&stImage_needleB,stKPASpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_KPAA_INDEX_ee- TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_KPAA_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001c80  e51f0d10          LDR      r0,|L1.3960|
001c84  e1d005ba          LDRH     r0,[r0,#0x5a]
001c88  e58d0000          STR      r0,[sp,#0]
001c8c  e51f0d1c          LDR      r0,|L1.3960|
001c90  e1d035b8          LDRH     r3,[r0,#0x58]  ; u16Type3XYTable
001c94  e59f0508          LDR      r0,|L1.8612|
001c98  e51f2d38          LDR      r2,|L1.3944|
001c9c  e5901000          LDR      r1,[r0,#0]  ; stKPASpeedNeedle
001ca0  e59f0500          LDR      r0,|L1.8616|
001ca4  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;680    		vGfListExecute();	
001ca8  ebfffffe          BL       vGfListExecute
;;;681    #endif
;;;682    
;;;683    }
001cac  e8bd800e          POP      {r1-r3,pc}
;;;684    
                          ENDP

                  vShowkpb PROC
;;;686    needle_show_st stKPBSpeedNeedle = {INIT_ANGLE_KPB, INIT_ANGLE_KPB, 0};
;;;687    void vShowkpb(void)
001cb0  e92d400e          PUSH     {r1-r3,lr}
;;;688    {
;;;689    #ifdef _NEEDLE_KPAB_ENABLE
;;;690    		vGetNextAngle(&stKPBSpeedNeedle, INIT_ANGLE_KPB, SPEED_LEVEL_KPB, MAX_STEP_KPB, SPEED_PARAM_KPB, NEEDLE_KPAB_INDEX_ee, -1);
001cb4  e3e00000          MVN      r0,#0
001cb8  e3a01058          MOV      r1,#0x58
001cbc  e59f24dc          LDR      r2,|L1.8608|
001cc0  e3a03005          MOV      r3,#5
001cc4  e58d2000          STR      r2,[sp,#0]
001cc8  e3a0200a          MOV      r2,#0xa
001ccc  e58d1004          STR      r1,[sp,#4]
001cd0  e3a0107c          MOV      r1,#0x7c
001cd4  e58d0008          STR      r0,[sp,#8]
001cd8  e59f04cc          LDR      r0,|L1.8620|
001cdc  ebfffffe          BL       vGetNextAngle
;;;691    		vGfLayerRotateBlendBitmapFull(&stImage_needleB,stKPBSpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_KPAB_INDEX_ee - TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_KPAB_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001ce0  e51f0d70          LDR      r0,|L1.3960|
001ce4  e1d005be          LDRH     r0,[r0,#0x5e]
001ce8  e58d0000          STR      r0,[sp,#0]
001cec  e51f0d7c          LDR      r0,|L1.3960|
001cf0  e1d035bc          LDRH     r3,[r0,#0x5c]  ; u16Type3XYTable
001cf4  e59f04b0          LDR      r0,|L1.8620|
001cf8  e51f2d98          LDR      r2,|L1.3944|
001cfc  e5901000          LDR      r1,[r0,#0]  ; stKPBSpeedNeedle
001d00  e59f04a0          LDR      r0,|L1.8616|
001d04  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;692    		vGfListExecute();	
001d08  ebfffffe          BL       vGfListExecute
;;;693    #endif
;;;694    
;;;695    }
001d0c  e8bd800e          POP      {r1-r3,pc}
;;;696    
                          ENDP

                  vShowMotorPower PROC
;;;697    
;;;698    void vShowMotorPower(void)
001d10  e12fff1e          BX       lr
;;;699    {
;;;700    	//vShowNumberAT(MOTOR_POWER_ee,font_et efont,uint32_t num,uint8_t u8pt)
;;;701    }
;;;702    
                          ENDP

                  vShowTotalVoltage PROC
;;;703    void vShowTotalVoltage(void)
001d14  e12fff1e          BX       lr
;;;704    {
;;;705    #ifdef _TOTAL_VOLTAGE_ENABLE
;;;706    	vShowNumberAT(TOTAL_VOLTAGE_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[TOTAL_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0xffff,0);
;;;707    	/*stBatTable[0].u8CurrentLevel = (stBatTable[0].u8MaxLevel * (gModeData.sttype3DataTable[TOTAL_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0xffff) / 400);
;;;708    	if(stBatTable[0].u8CurrentLevel > stBatTable[0].u8MaxLevel)
;;;709    		stBatTable[0].u8CurrentLevel = stBatTable[0].u8MaxLevel;*/
;;;710    #endif
;;;711    }
;;;712    
                          ENDP

                  vShowTotalCurrent PROC
;;;713    void vShowTotalCurrent(void)
001d18  e12fff1e          BX       lr
;;;714    {
;;;715    #ifdef _TOTAL_CURRENT_ENABLE
;;;716    	vShowNumberAT(TOTAL_CURRENT_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[TOTAL_CURRENT_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[TOTAL_CURRENT_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;717    #endif
;;;718    }
;;;719    
                          ENDP

                  vShowSOCNumber PROC
;;;721    needle_show_st stSOCSpeedNeedle = {INIT_ANGLE_SOC, INIT_ANGLE_SOC, 0};
;;;722    void vShowSOCNumber(void)
001d1c  e92d400e          PUSH     {r1-r3,lr}
;;;723    {
;;;724    #ifdef _SOC_NUMBER_ENABLE
;;;725     	vShowNumberAT(SOC_NUMBER_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[SOC_NUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[SOC_NUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;726    /*	stBatTable[2].u8CurrentLevel = (stBatTable[2].u8MaxLevel * (gModeData.sttype3DataTable[SOC_NUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u32data / 10) / 100);
;;;727    	if(stBatTable[2].u8CurrentLevel > stBatTable[2].u8MaxLevel)
;;;728    		stBatTable[2].u8CurrentLevel = stBatTable[2].u8MaxLevel;*/
;;;729    #endif
;;;730    
;;;731    #ifdef _NEEDLE_SOC_ENABLE
;;;732    	vGetNextAngle(&stSOCSpeedNeedle, INIT_ANGLE_SOC, SPEED_LEVEL_SOC, MAX_STEP_SOC, SPEED_PARAM_SOC, SOC_NUMBER_INDEX_ee, 1);
001d20  e3a00001          MOV      r0,#1
001d24  e3a01046          MOV      r1,#0x46
001d28  e59f2480          LDR      r2,|L1.8624|
001d2c  e3a03005          MOV      r3,#5
001d30  e58d2000          STR      r2,[sp,#0]
001d34  e3a0200a          MOV      r2,#0xa
001d38  e58d1004          STR      r1,[sp,#4]
001d3c  e3e01081          MVN      r1,#0x81
001d40  e58d0008          STR      r0,[sp,#8]
001d44  e59f0468          LDR      r0,|L1.8628|
001d48  ebfffffe          BL       vGetNextAngle
;;;733    	vGfLayerRotateBlendBitmapFull(&stImage_needleB,stSOCSpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_SOC_INDEX_ee- TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_SOC_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001d4c  e51f0ddc          LDR      r0,|L1.3960|
001d50  e1d006b2          LDRH     r0,[r0,#0x62]
001d54  e58d0000          STR      r0,[sp,#0]
001d58  e51f0de8          LDR      r0,|L1.3960|
001d5c  e1d036b0          LDRH     r3,[r0,#0x60]  ; u16Type3XYTable
001d60  e59f044c          LDR      r0,|L1.8628|
001d64  e51f2e04          LDR      r2,|L1.3944|
001d68  e5901000          LDR      r1,[r0,#0]  ; stSOCSpeedNeedle
001d6c  e59f0434          LDR      r0,|L1.8616|
001d70  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;734    	vGfListExecute();	
001d74  ebfffffe          BL       vGfListExecute
;;;735    #endif
;;;736    }
001d78  e8bd800e          POP      {r1-r3,pc}
;;;737    
                          ENDP

                  vShowBatteryVoltage PROC
;;;738    needle_show_st stVSpeedNeedle = {INIT_ANGLE_V, INIT_ANGLE_V, 0};   
;;;739    void vShowBatteryVoltage(void)
001d7c  e92d400e          PUSH     {r1-r3,lr}
;;;740    {
;;;741    	//vShowNumberAT(BATTERY_VOLTAGE_ee,font_et efont,uint32_t num,uint8_t u8pt)
;;;742    #ifdef _NEEDLE_VOL_ENABLE
;;;743    		vGetNextAngle(&stVSpeedNeedle, INIT_ANGLE_V, SPEED_LEVEL_V, MAX_STEP_V, SPEED_PARAM_V, BATTERY_VOLTAGE_INDEX_ee, -1);
001d80  e3e00000          MVN      r0,#0
001d84  e3a01047          MOV      r1,#0x47
001d88  e59f2428          LDR      r2,|L1.8632|
001d8c  e3a03005          MOV      r3,#5
001d90  e58d2000          STR      r2,[sp,#0]
001d94  e3a0200a          MOV      r2,#0xa
001d98  e58d1004          STR      r1,[sp,#4]
001d9c  e3a01081          MOV      r1,#0x81
001da0  e58d0008          STR      r0,[sp,#8]
001da4  e59f0410          LDR      r0,|L1.8636|
001da8  ebfffffe          BL       vGetNextAngle
;;;744    		vGfLayerRotateBlendBitmapFull(&stImage_needleB,stVSpeedNeedle.f32rota_angle, &stGDC0LayerA,u16Type3XYTable[NEEDLE_VOL_INDEX_ee- TYPE3_NUMBER_BASE][0], u16Type3XYTable[NEEDLE_VOL_INDEX_ee - TYPE3_NUMBER_BASE][1]);
001dac  e51f0e3c          LDR      r0,|L1.3960|
001db0  e1d006b6          LDRH     r0,[r0,#0x66]
001db4  e58d0000          STR      r0,[sp,#0]
001db8  e51f0e48          LDR      r0,|L1.3960|
001dbc  e1d036b4          LDRH     r3,[r0,#0x64]  ; u16Type3XYTable
001dc0  e59f03f4          LDR      r0,|L1.8636|
001dc4  e51f2e64          LDR      r2,|L1.3944|
001dc8  e5901000          LDR      r1,[r0,#0]  ; stVSpeedNeedle
001dcc  e59f03d4          LDR      r0,|L1.8616|
001dd0  ebfffffe          BL       vGfLayerRotateBlendBitmapFull
;;;745    		vGfListExecute();	
001dd4  ebfffffe          BL       vGfListExecute
;;;746    #endif
;;;747    
;;;748    }
001dd8  e8bd800e          POP      {r1-r3,pc}
;;;749    
                          ENDP

                  vShowBatteryLife PROC
;;;750    void vShowBatteryLife(void)
001ddc  e12fff1e          BX       lr
;;;751    {
;;;752    #ifdef _BATTERY_LIFE_ENABLE
;;;753    	u16Type3XYTable[BATTERY_LIFE_INDEX_ee- TYPE3_NUMBER_BASE][0] = 670;
;;;754    	if((gModeData.sttype3DataTable[BATTERY_LIFE_INDEX_ee - TYPE3_NUMBER_BASE].u32data) > 9999)
;;;755    	{
;;;756    		u16Type3XYTable[BATTERY_LIFE_INDEX_ee- TYPE3_NUMBER_BASE][0] += 9;
;;;757    	}
;;;758    	else if((gModeData.sttype3DataTable[BATTERY_LIFE_INDEX_ee - TYPE3_NUMBER_BASE].u32data) > 999)
;;;759    	{
;;;760    
;;;761    	}
;;;762    	else if((gModeData.sttype3DataTable[BATTERY_LIFE_INDEX_ee - TYPE3_NUMBER_BASE].u32data) > 99)
;;;763    	{	
;;;764    		u16Type3XYTable[BATTERY_LIFE_INDEX_ee- TYPE3_NUMBER_BASE][0] -= 9;
;;;765    	}
;;;766    	else if((gModeData.sttype3DataTable[BATTERY_LIFE_INDEX_ee - TYPE3_NUMBER_BASE].u32data) > 9)
;;;767    	{
;;;768    		u16Type3XYTable[BATTERY_LIFE_INDEX_ee- TYPE3_NUMBER_BASE][0] -= 18;
;;;769    	}
;;;770    	else
;;;771    	{
;;;772    		u16Type3XYTable[BATTERY_LIFE_INDEX_ee- TYPE3_NUMBER_BASE][0] -= 27;
;;;773    	}
;;;774    	vShowNumberAT(BATTERY_LIFE_INDEX_ee,FONT2418_ee,gModeData.sttype3DataTable[BATTERY_LIFE_INDEX_ee - TYPE3_NUMBER_BASE].u32data,0);
;;;775    #endif
;;;776    }
;;;777    
                          ENDP

                  vShowTotalDistance PROC
;;;778    void vShowTotalDistance(void)
001de0  e12fff1e          BX       lr
;;;779    {
;;;780    #ifdef _TOTAL_DISTANCE_ENABLE
;;;781    	vShowNumberAT(TOTAL_DISTANCE_INDEX_ee,FONT0816_ee,gModeData.sttype3DataTable[TOTAL_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE].u32data,0);
;;;782    #endif
;;;783    }
;;;784    
                          ENDP

                  vShowTripDistance PROC
;;;785    void vShowTripDistance(void)
001de4  e12fff1e          BX       lr
;;;786    {
;;;787    #ifdef _TRIP_DISTANCE_ENABLE
;;;788    	vShowNumberAT(TRIP_DISTANCE_INDEX_ee,FONT0816_ee,gModeData.sttype3DataTable[TRIP_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[TRIP_DISTANCE_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;789    #endif
;;;790    }
;;;791    
                          ENDP

                  vShowTorque PROC
;;;792    void vShowTorque(void)
001de8  e12fff1e          BX       lr
;;;793    {
;;;794    #ifdef _TORQUE_NUMBER_ENABLE
;;;795    	vShowNumberAT(TORQUE_NUMBER_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[TORQUE_NUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u32data,0);
;;;796    #endif
;;;797    }
;;;798    
                          ENDP

                  vShowMotorT PROC
;;;799    void vShowMotorT(void)
001dec  e12fff1e          BX       lr
;;;800    {
;;;801    #ifdef _MOTOR_TNUMBER_ENABLE
;;;802    	vShowNumberAT(MOTOR_TNUMBER_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[MOTOR_TNUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[MOTOR_TNUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;803    #endif
;;;804    }
;;;805    
                          ENDP

                  vShowControlT PROC
;;;806    void vShowControlT(void)
001df0  e12fff1e          BX       lr
;;;807    {
;;;808    #ifdef _CONTROL_TNUMBER_ENABLE
;;;809    	vShowNumberAT(CONTROL_TNUMBER_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[CONTROL_TNUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[CONTROL_TNUMBER_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;810    #endif
;;;811    }
;;;812    
                          ENDP

                  vShowBatteryMaxV PROC
;;;813    
;;;814    void vShowBatteryMaxV(void)
001df4  e12fff1e          BX       lr
;;;815    {
;;;816    #ifdef _BATTERY_MAX_VOLTAGE_ENABLE
;;;817    	vShowNumberAT(BATTERY_MAX_VOLTAGE_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[BATTERY_MAX_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[BATTERY_MAX_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;818    #endif
;;;819    }
;;;820    
                          ENDP

                  vShowBatteryMinV PROC
;;;821    void vShowBatteryMinV(void)
001df8  e12fff1e          BX       lr
;;;822    {
;;;823    #ifdef _BATTERY_MIN_VOLTAGE_ENABLE
;;;824    	vShowNumberAT(BATTERY_MIN_VOLTAGE_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[BATTERY_MIN_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[BATTERY_MIN_VOLTAGE_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;825    #endif
;;;826    }
;;;827    
                          ENDP

                  vShowBatteryDropV PROC
;;;828    
;;;829    void vShowBatteryDropV(void)
001dfc  e12fff1e          BX       lr
;;;830    {
;;;831    	//
;;;832    }
;;;833    
                          ENDP

                  vShowBatteryDropT PROC
;;;834    void vShowBatteryDropT(void)
001e00  e12fff1e          BX       lr
;;;835    {
;;;836    #ifdef _BATTERY_DROPOUT_T_ENABLE
;;;837    	vShowNumberAT(BATTERY_DROPOUT_T_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[BATTERY_DROPOUT_T_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[BATTERY_DROPOUT_T_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;838    #endif
;;;839    }
;;;840    
                          ENDP

                  vShowChargeTime PROC
;;;841    void vShowChargeTime(void)
001e04  e12fff1e          BX       lr
;;;842    {
;;;843    #ifdef _CHARGE_TIME_ENABLE
;;;844    	vShowNumberAT(CHARGE_TIME_INDEX_ee,FONT2418_ee,(gModeData.sttype3DataTable[CHARGE_TIME_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0xffff) / 60,0);
;;;845    	vShowNumberAT(CHARGE_TIME_M_INDEX_ee,FONT2418_ee,(gModeData.sttype3DataTable[CHARGE_TIME_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0xffff) % 60,0);
;;;846    #endif
;;;847    }
;;;848    
                          ENDP

                  vShowBatteryMaxT PROC
;;;849    void vShowBatteryMaxT(void)
001e08  e12fff1e          BX       lr
;;;850    {
;;;851    #ifdef _BATTERY_MAX_T_ENABLE
;;;852    	vShowNumberAT(BATTERY_MAX_T_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[BATTERY_MAX_T_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[BATTERY_MAX_T_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;853    #endif
;;;854    }
;;;855    	
                          ENDP

                  vShowBatteryMinT PROC
;;;856    void vShowBatteryMinT(void)
001e0c  e12fff1e          BX       lr
;;;857    {
;;;858    #ifdef _BATTERY_MIN_T_ENABLE
;;;859    	vShowNumberAT(BATTERY_MIN_T_INDEX_ee,FONT1115_ee,gModeData.sttype3DataTable[BATTERY_MIN_T_INDEX_ee - TYPE3_NUMBER_BASE].u32data,gModeData.sttype3DataTable[BATTERY_MIN_T_INDEX_ee - TYPE3_NUMBER_BASE].u8dp);
;;;860    #endif
;;;861    }
;;;862    
                          ENDP

                  vShowAlphaChange PROC
;;;863    uint8_t u8alphaSave = 0xff;
;;;864    void vShowAlphaChange(void)
001e10  e92d4010          PUSH     {r4,lr}
;;;865    {
;;;866    	if((gModeData.sttype3DataTable[ALPHA_DATA_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFF) != u8alphaSave)
001e14  e59f03a4          LDR      r0,|L1.8640|
001e18  e5d000f4          LDRB     r0,[r0,#0xf4]
001e1c  e59f13a0          LDR      r1,|L1.8644|
001e20  e5d11000          LDRB     r1,[r1,#0]  ; u8alphaSave
001e24  e1500001          CMP      r0,r1
001e28  0a000008          BEQ      |L1.7760|
;;;867    	{
;;;868    		i32GDC_SetCommonAlpha(GDC0,GDC_SEG_LAYER_B,gModeData.sttype3DataTable[ALPHA_DATA_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFF);
001e2c  e59f038c          LDR      r0,|L1.8640|
001e30  e5d020f4          LDRB     r2,[r0,#0xf4]
001e34  e3a01002          MOV      r1,#2
001e38  e3a00000          MOV      r0,#0
001e3c  ebfffffe          BL       i32GDC_SetCommonAlpha
;;;869    		u8alphaSave = (gModeData.sttype3DataTable[ALPHA_DATA_INDEX_ee - TYPE3_NUMBER_BASE].u32data & 0XFF);
001e40  e59f0378          LDR      r0,|L1.8640|
001e44  e5d000f4          LDRB     r0,[r0,#0xf4]
001e48  e59f1374          LDR      r1,|L1.8644|
001e4c  e5c10000          STRB     r0,[r1,#0]  ; u8alphaSave
                  |L1.7760|
;;;870    	}
;;;871    }
001e50  e8bd8010          POP      {r4,pc}
;;;872    
                          ENDP

                  vShowPRNDS PROC
;;;876    
;;;877    void vShowPRNDS(void)
001e54  e92d4010          PUSH     {r4,lr}
;;;878    {
;;;879    	if((u8IconConfigTable[(PRNDS_INDEX_ee - TYPE2_NUMBER_BASE)]) != 0)
001e58  e59f0368          LDR      r0,|L1.8648|
001e5c  e5d00000          LDRB     r0,[r0,#0]  ; u8IconConfigTable
001e60  e3500000          CMP      r0,#0
001e64  0a00000f          BEQ      |L1.7848|
;;;880    	{
;;;881    		if(gModeData.u8type2DataTable[PRNDS_INDEX_ee - TYPE2_NUMBER_BASE] > 0)
001e68  e59f0350          LDR      r0,|L1.8640|
001e6c  e5d00001          LDRB     r0,[r0,#1]  ; gModeData
001e70  e3500000          CMP      r0,#0
001e74  da00000a          BLE      |L1.7844|
;;;882    			u32GfLayerBlendBitmapFull(&stImage_LEV[gModeData.u8type2DataTable[PRNDS_INDEX_ee - TYPE2_NUMBER_BASE] - 1], &stGDC0LayerA, u16Type2XYTable[PRNDS_INDEX_ee - TYPE2_NUMBER_BASE][0], u16Type2XYTable[PRNDS_INDEX_ee - TYPE2_NUMBER_BASE][1]);
001e78  e59f134c          LDR      r1,|L1.8652|
001e7c  e1d130b2          LDRH     r3,[r1,#2]  ; u16Type2XYTable
001e80  e1d120b0          LDRH     r2,[r1,#0]  ; u16Type2XYTable
001e84  e59f1334          LDR      r1,|L1.8640|
001e88  e5d11001          LDRB     r1,[r1,#1]  ; gModeData
001e8c  e2411001          SUB      r1,r1,#1
001e90  e0811101          ADD      r1,r1,r1,LSL #2
001e94  e59f4334          LDR      r4,|L1.8656|
001e98  e0840101          ADD      r0,r4,r1,LSL #2
001e9c  e51f1f3c          LDR      r1,|L1.3944|
001ea0  ebfffffe          BL       u32GfLayerBlendBitmapFull
                  |L1.7844|
;;;883    			
;;;884    			vGfListExecute();
001ea4  ebfffffe          BL       vGfListExecute
                  |L1.7848|
;;;885    	}
;;;886    }
001ea8  e8bd8010          POP      {r4,pc}
;;;887    
                          ENDP

                  vShowErrWord PROC
;;;888    void vShowErrWord(void)
001eac  e92d4010          PUSH     {r4,lr}
;;;889    {
;;;890    	if((u8IconConfigTable[(ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE)]) != 0)
001eb0  e59f0310          LDR      r0,|L1.8648|
001eb4  e5d0001c          LDRB     r0,[r0,#0x1c]  ; u8IconConfigTable
001eb8  e3500000          CMP      r0,#0
001ebc  0a000012          BEQ      |L1.7948|
;;;891    	{
;;;892    		if(gModeData.u8type2DataTable[ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE] != 0 && gModeData.u8type2DataTable[ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE] < 20)
001ec0  e59f02f8          LDR      r0,|L1.8640|
001ec4  e5d0001d          LDRB     r0,[r0,#0x1d]
001ec8  e3500000          CMP      r0,#0
001ecc  0a00000e          BEQ      |L1.7948|
001ed0  e59f02e8          LDR      r0,|L1.8640|
001ed4  e5d0001d          LDRB     r0,[r0,#0x1d]
001ed8  e3500014          CMP      r0,#0x14
001edc  aa00000a          BGE      |L1.7948|
;;;893    		{
;;;894    			u32GfLayerBlendBitmapFull(&stImage_ERR[gModeData.u8type2DataTable[ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE]],&stGDC0LayerA,u16Type2XYTable[ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE][0],u16Type2XYTable[ERR_WORD_INDEX_ee - TYPE2_NUMBER_BASE][1]);
001ee0  e59f12e4          LDR      r1,|L1.8652|
001ee4  e1d137b2          LDRH     r3,[r1,#0x72]
001ee8  e1d127b0          LDRH     r2,[r1,#0x70]  ; u16Type2XYTable
001eec  e59f12cc          LDR      r1,|L1.8640|
001ef0  e5d1101d          LDRB     r1,[r1,#0x1d]
001ef4  e0811101          ADD      r1,r1,r1,LSL #2
001ef8  e59f42d4          LDR      r4,|L1.8660|
001efc  e0840101          ADD      r0,r4,r1,LSL #2
001f00  e51f1fa0          LDR      r1,|L1.3944|
001f04  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;895    			vGfListExecute();
001f08  ebfffffe          BL       vGfListExecute
                  |L1.7948|
;;;896    		}
;;;897    	}
;;;898    }
001f0c  e8bd8010          POP      {r4,pc}
;;;899    
                          ENDP

                  vSetBlPwmFunc PROC
;;;900    uint16_t u16SavePwmDuty = 1;
;;;901    void vSetBlPwmFunc(void)
001f10  e92d4010          PUSH     {r4,lr}
;;;902    {
;;;903    	if((u8IconConfigTable[(BL_ADJ_LEVEL_INDEX_ee- TYPE2_NUMBER_BASE)]) != 0)
001f14  e59f02ac          LDR      r0,|L1.8648|
001f18  e5d00022          LDRB     r0,[r0,#0x22]  ; u8IconConfigTable
001f1c  e3500000          CMP      r0,#0
001f20  0a000019          BEQ      |L1.8076|
;;;904    	{
;;;905    		if(gModeData.u8type2DataTable[BL_ADJ_LEVEL_INDEX_ee - TYPE2_NUMBER_BASE] > 0 && gModeData.u8type2DataTable[BL_ADJ_LEVEL_INDEX_ee - TYPE2_NUMBER_BASE] < 10)
001f24  e59f0294          LDR      r0,|L1.8640|
001f28  e5d00023          LDRB     r0,[r0,#0x23]
001f2c  e3500000          CMP      r0,#0
001f30  da000015          BLE      |L1.8076|
001f34  e59f0284          LDR      r0,|L1.8640|
001f38  e5d00023          LDRB     r0,[r0,#0x23]
001f3c  e350000a          CMP      r0,#0xa
001f40  aa000011          BGE      |L1.8076|
;;;906    		{
;;;907    			if(u16SavePwmDuty != gModeData.u8type2DataTable[BL_ADJ_LEVEL_INDEX_ee - TYPE2_NUMBER_BASE])
001f44  e59f0274          LDR      r0,|L1.8640|
001f48  e5d00023          LDRB     r0,[r0,#0x23]
001f4c  e59f1284          LDR      r1,|L1.8664|
001f50  e1d110b0          LDRH     r1,[r1,#0]  ; u16SavePwmDuty
001f54  e1500001          CMP      r0,r1
001f58  0a00000b          BEQ      |L1.8076|
;;;908    			{
;;;909    				vTIMER_PWM_SetDuty(TIMER_PWM_CNTRL_19,BL_ADJ_PWM_LEVEL_PARAM * (10 - gModeData.u8type2DataTable[BL_ADJ_LEVEL_INDEX_ee - TYPE2_NUMBER_BASE]));
001f5c  e59f025c          LDR      r0,|L1.8640|
001f60  e5d00023          LDRB     r0,[r0,#0x23]
001f64  e260000a          RSB      r0,r0,#0xa
001f68  e3002493          MOV      r2,#0x493
001f6c  e1600280          SMULBB   r0,r0,r2
001f70  e6ff1070          UXTH     r1,r0
001f74  e3a00a13          MOV      r0,#0x13000
001f78  ebfffffe          BL       vTIMER_PWM_SetDuty
;;;910    				u16SavePwmDuty = gModeData.u8type2DataTable[BL_ADJ_LEVEL_INDEX_ee - TYPE2_NUMBER_BASE];
001f7c  e59f023c          LDR      r0,|L1.8640|
001f80  e5d00023          LDRB     r0,[r0,#0x23]
001f84  e59f124c          LDR      r1,|L1.8664|
001f88  e1c100b0          STRH     r0,[r1,#0]  ; u16SavePwmDuty
                  |L1.8076|
;;;911    			}
;;;912    		}
;;;913    	}	
;;;914    }
001f8c  e8bd8010          POP      {r4,pc}
;;;915    
                          ENDP

                  vRunIconFunction PROC
;;;916    
;;;917    void vRunIconFunction(void)
001f90  e92d4010          PUSH     {r4,lr}
;;;918    {
;;;919    	uint8_t i= 0;
001f94  e3a04000          MOV      r4,#0
;;;920    	for(i = 0;i < TYPE2_NUMBER;i++)
001f98  e320f000          NOP      
001f9c  ea000021          B        |L1.8232|
                  |L1.8096|
;;;921    	{
;;;922    		if(u8IconConfigTable[i] != 0)
001fa0  e59f0220          LDR      r0,|L1.8648|
001fa4  e7d00004          LDRB     r0,[r0,r4]
001fa8  e3500000          CMP      r0,#0
001fac  0a00001a          BEQ      |L1.8220|
;;;923    		{
;;;924    			if(gModeData.u8type2DataTable[i] == 0x01)
001fb0  e59f0224          LDR      r0,|L1.8668|
001fb4  e7d00004          LDRB     r0,[r0,r4]
001fb8  e3500001          CMP      r0,#1
001fbc  1a000011          BNE      |L1.8200|
;;;925    			{
;;;926    				if(stIconTable[i][1] != 0)
001fc0  e59f0218          LDR      r0,|L1.8672|
001fc4  e0800184          ADD      r0,r0,r4,LSL #3
001fc8  e5900004          LDR      r0,[r0,#4]
001fcc  e3500000          CMP      r0,#0
001fd0  0a000011          BEQ      |L1.8220|
;;;927    				{
;;;928    					u32GfLayerBlendBitmapFull(stIconTable[i][1],&stGDC0LayerA,u16Type2XYTable[i][0],u16Type2XYTable[i][1]);
001fd4  e59f11f0          LDR      r1,|L1.8652|
001fd8  e0811104          ADD      r1,r1,r4,LSL #2
001fdc  e1d130b2          LDRH     r3,[r1,#2]
001fe0  e59f11e4          LDR      r1,|L1.8652|
001fe4  e0811104          ADD      r1,r1,r4,LSL #2
001fe8  e1d120b0          LDRH     r2,[r1,#0]
001fec  e59f11ec          LDR      r1,|L1.8672|
001ff0  e0811184          ADD      r1,r1,r4,LSL #3
001ff4  e5910004          LDR      r0,[r1,#4]
001ff8  e59f11e4          LDR      r1,|L1.8676|
001ffc  ebfffffe          BL       u32GfLayerBlendBitmapFull
;;;929    					vGfListExecute();
002000  ebfffffe          BL       vGfListExecute
002004  ea000004          B        |L1.8220|
                  |L1.8200|
;;;930    				}
;;;931    			}
;;;932    			else if(gModeData.u8type2DataTable[i] == 0x00)
002008  e59f01cc          LDR      r0,|L1.8668|
00200c  e7d00004          LDRB     r0,[r0,r4]
002010  e3500000          CMP      r0,#0
002014  1a000000          BNE      |L1.8220|
;;;933    			{
;;;934    				if((ICON_OFF_SHOW == 1) && (stIconTable[i][0] != 0))
002018  e320f000          NOP      
                  |L1.8220|
;;;935    				{
;;;936    					u32GfLayerBlendBitmapFull(stIconTable[i][0],&stGDC0LayerA,u16Type2XYTable[i][0],u16Type2XYTable[i][1]);
;;;937    					vGfListExecute();
00201c  e320f000          NOP      
002020  e2840001          ADD      r0,r4,#1              ;920
002024  e20040ff          AND      r4,r0,#0xff           ;920
                  |L1.8232|
002028  e3540023          CMP      r4,#0x23              ;920
00202c  baffffdb          BLT      |L1.8096|
;;;938    				}
;;;939    			}
;;;940    		}
;;;941    		
;;;942    	}
;;;943    	vShowPRNDS();
002030  ebfffffe          BL       vShowPRNDS
;;;944    	vShowErrWord();
002034  ebfffffe          BL       vShowErrWord
;;;945    	vSetBlPwmFunc();
002038  ebfffffe          BL       vSetBlPwmFunc
;;;946    }
00203c  e8bd8010          POP      {r4,pc}
;;;947    
                          ENDP

                  vInitPanelPin PROC
;;;948    /************************************IO 操作*************************************/
;;;949    void vInitPanelPin(void)
002040  e92d401c          PUSH     {r2-r4,lr}
;;;950    {
;;;951    #ifdef BL_OFF_ADC0_PIN
;;;952    	adc_conversion_config adc_config;
;;;953    #endif
;;;954    
;;;955    #ifdef BL_ADJ_PIN
;;;956    	timer_pwm_Cfg_st stpwmCfg;
;;;957    #endif
;;;958    
;;;959    
;;;960    #ifdef BL_EN_PIN
;;;961        i32GPIO_SetPinFunction(BL_EN_PIN, 0);
002044  e3a01000          MOV      r1,#0
002048  e3a00090          MOV      r0,#0x90
00204c  ebfffffe          BL       i32GPIO_SetPinFunction
;;;962    	i32GPIO_SetPinDirection(BL_EN_PIN, GPIO_OUTPUT);
002050  e3a01000          MOV      r1,#0
002054  e3a00090          MOV      r0,#0x90
002058  ebfffffe          BL       i32GPIO_SetPinDirection
;;;963    	i32GPIO_EnablePullUp(BL_EN_PIN, GPIO_DISABLE);
00205c  e3a01000          MOV      r1,#0
002060  e3a00090          MOV      r0,#0x90
002064  ebfffffe          BL       i32GPIO_EnablePullUp
;;;964    	i32GPIO_EnableLatchFunction(BL_EN_PIN, GPIO_DISABLE);
002068  e3a01000          MOV      r1,#0
00206c  e3a00090          MOV      r0,#0x90
002070  ebfffffe          BL       i32GPIO_EnableLatchFunction
;;;965    #endif
;;;966    
;;;967    #ifdef BL_ADJ_PIN
;;;968        i32GPIO_SetPinFunction(BL_ADJ_PIN, 5);
002074  e3a01005          MOV      r1,#5
002078  e3a0008f          MOV      r0,#0x8f
00207c  ebfffffe          BL       i32GPIO_SetPinFunction
;;;969    	i32GPIO_EnablePullUp(BL_ADJ_PIN, GPIO_DISABLE);
002080  e3a01000          MOV      r1,#0
002084  e3a0008f          MOV      r0,#0x8f
002088  ebfffffe          BL       i32GPIO_EnablePullUp
;;;970    	i32GPIO_EnableLatchFunction(BL_ADJ_PIN, GPIO_DISABLE);
00208c  e3a01000          MOV      r1,#0
002090  e3a0008f          MOV      r0,#0x8f
002094  ebfffffe          BL       i32GPIO_EnableLatchFunction
;;;971    	i32GPIO_EnablePullDown(PORT_ADC_IN0,GPIO_DISABLE);
002098  e3a01000          MOV      r1,#0
00209c  e3000128          MOVW     r0,#0x128
0020a0  ebfffffe          BL       i32GPIO_EnablePullDown
;;;972    
;;;973    	stpwmCfg.eClkSrc = TIMER_PWM_PRESCAL;
0020a4  e3a00002          MOV      r0,#2
0020a8  e5cd0007          STRB     r0,[sp,#7]
;;;974    	stpwmCfg.eDblBuffEn = TIMER_PWM_ENABLE;
0020ac  e3a00001          MOV      r0,#1
0020b0  e5cd0005          STRB     r0,[sp,#5]
;;;975    	stpwmCfg.eIrqEn = TIMER_PWM_DISABLE;
0020b4  e3a00000          MOV      r0,#0
0020b8  e5cd0004          STRB     r0,[sp,#4]
;;;976    	stpwmCfg.eOutLevel = TIMER_PWM_LEVEL_HI;
0020bc  e3a00001          MOV      r0,#1
0020c0  e5cd0006          STRB     r0,[sp,#6]
;;;977    	stpwmCfg.ePrescalClk = TIMER_PWM_SCLK_DIV64;
0020c4  e3a00006          MOV      r0,#6
0020c8  e5cd0000          STRB     r0,[sp,#0]
;;;978    	stpwmCfg.eRst = TIMER_PWM_PDR_ONLY;
0020cc  e3a00000          MOV      r0,#0
0020d0  e5cd0001          STRB     r0,[sp,#1]
;;;979    	boTIMER_PWM_Config(TIMER_PWM_CNTRL_19,stpwmCfg);
0020d4  e3a00a13          MOV      r0,#0x13000
0020d8  e89d0006          LDM      sp,{r1,r2}
0020dc  ebfffffe          BL       boTIMER_PWM_Config
;;;980    
;;;981    	vTIMER_PWM_SetDuty(TIMER_PWM_CNTRL_19,BL_ADJ_PWM_LEVEL_PARAM * 9);
0020e0  e302192b          MOV      r1,#0x292b
0020e4  e3a00a13          MOV      r0,#0x13000
0020e8  ebfffffe          BL       vTIMER_PWM_SetDuty
;;;982    	vTIMER_PWM_SetPeriod(TIMER_PWM_CNTRL_19, 11710);
0020ec  e3021dbe          MOV      r1,#0x2dbe
0020f0  e3a00a13          MOV      r0,#0x13000
0020f4  ebfffffe          BL       vTIMER_PWM_SetPeriod
;;;983    	vTIMER_PWM_Enable(TIMER_PWM_CNTRL_19, TIMER_PWM_ENABLE);	
0020f8  e3a01001          MOV      r1,#1
0020fc  e3a00a13          MOV      r0,#0x13000
002100  ebfffffe          BL       vTIMER_PWM_Enable
;;;984    #endif
;;;985    
;;;986    #ifdef PANEL_PIN
;;;987    	i32GPIO_SetPinFunction(PANEL_PIN, 0);
002104  e3a01000          MOV      r1,#0
002108  e3a00091          MOV      r0,#0x91
00210c  ebfffffe          BL       i32GPIO_SetPinFunction
;;;988    	i32GPIO_SetPinDirection(PANEL_PIN, GPIO_OUTPUT);
002110  e3a01000          MOV      r1,#0
002114  e3a00091          MOV      r0,#0x91
002118  ebfffffe          BL       i32GPIO_SetPinDirection
;;;989    	i32GPIO_EnablePullUp(PANEL_PIN, GPIO_DISABLE);
00211c  e3a01000          MOV      r1,#0
002120  e3a00091          MOV      r0,#0x91
002124  ebfffffe          BL       i32GPIO_EnablePullUp
;;;990    	i32GPIO_EnableLatchFunction(PANEL_PIN, GPIO_DISABLE);
002128  e3a01000          MOV      r1,#0
00212c  e3a00091          MOV      r0,#0x91
002130  ebfffffe          BL       i32GPIO_EnableLatchFunction
;;;991    #endif
;;;992    
;;;993    #ifdef BL_OFF_ADC0_PIN
;;;994    	i32GPIO_SetPinFunction(PORT_ADC_IN0, PORT_ADC_IN0_AS_ADC_IN0);
;;;995    	i32GPIO_EnablePullUp(PORT_ADC_IN0, GPIO_DISABLE);
;;;996    	i32GPIO_EnablePullDown(PORT_ADC_IN0,GPIO_DISABLE);
;;;997    	i32GPIO_EnableLatchFunction(PORT_ADC_IN0, GPIO_DISABLE);
;;;998    
;;;999    	i32ADC_InputChannelSelection(ADC_CONVERSION_MODE, ADC0);
;;;1000   
;;;1001   	adc_config.eChannelScanMode = ADC_ONE_CHANNEL_MODE;
;;;1002   	adc_config.eDelayedMode = ADC_START_AFTER_READ;
;;;1003   	adc_config.eDevice = ADC0;
;;;1004   	adc_config.eInterruptGenerationMode = ADC_INTERRUPT_AFTER_EACH_CONVERSION;
;;;1005   	adc_config.eRepeatMode = ADC_REPEATED_CONVERSION;
;;;1006   	adc_config.eTriggerType = ADC_SOFTWARE_TRIGGER;
;;;1007   	vADC_AdcConversionConfig(adc_config);	
;;;1008   	vADC_StartConversion();
;;;1009   	
;;;1010   #endif
;;;1011   
;;;1012   
;;;1013   }
002134  e8bd801c          POP      {r2-r4,pc}
                  |L1.8504|
                          DCD      stImage_MainShow
                  |L1.8508|
                          DCD      stImage_BatDownVal
                  |L1.8512|
                          DCD      stImage_BatVal
                  |L1.8516|
                          DCD      stImage_BatInval
                  |L1.8520|
                          DCD      stImage_BatUp
                  |L1.8524|
                          DCD      stImage_fontv
                  |L1.8528|
                          DCD      stBatTable
                  |L1.8532|
                          DCD      stImage_fonta
                  |L1.8536|
                          DCD      stBatTable+0x6
                  |L1.8540|
                          DCD      stBatTable+0x12
                  |L1.8544|
                          DCD      stImage_fonte
                  |L1.8548|
                          DCD      stImage_fontf
                  |L1.8552|
                          DCD      stImage_fontsoc
                  |L1.8556|
                          DCD      stBatTable+0xc
                  |L1.8560|
                          DCD      stImage_totaldistance
                  |L1.8564|
                          DCD      stImage_tripdistance
                  |L1.8568|
                          DCD      stImage_km
                  |L1.8572|
                          DCD      stImage_chargetime
                  |L1.8576|
                          DCD      stImage_hour
                  |L1.8580|
                          DCD      stImage_minute
                  |L1.8584|
                          DCD      gModeData+0x24
                  |L1.8588|
                          DCD      0x3f1c28f6
                  |L1.8592|
                          DCD      stSpeedNeedle
                  |L1.8596|
                          DCD      stImage_needleA
                  |L1.8600|
                          DCD      0x420b1eb8
                  |L1.8604|
                          DCD      stRorateSpeedNeedle
                  |L1.8608|
                          DCD      0x3e0f5c29
                  |L1.8612|
                          DCD      stKPASpeedNeedle
                  |L1.8616|
                          DCD      stImage_needleB
                  |L1.8620|
                          DCD      stKPBSpeedNeedle
                  |L1.8624|
                          DCD      0x3f99999a
                  |L1.8628|
                          DCD      stSOCSpeedNeedle
                  |L1.8632|
                          DCD      0x3e4ccccd
                  |L1.8636|
                          DCD      stVSpeedNeedle
                  |L1.8640|
                          DCD      gModeData
                  |L1.8644|
                          DCD      u8alphaSave
                  |L1.8648|
                          DCD      u8IconConfigTable
                  |L1.8652|
                          DCD      u16Type2XYTable
                  |L1.8656|
                          DCD      stImage_LEV
                  |L1.8660|
                          DCD      stImage_ERR
                  |L1.8664|
                          DCD      u16SavePwmDuty
                  |L1.8668|
                          DCD      gModeData+0x1
                  |L1.8672|
                          DCD      stIconTable
                  |L1.8676|
                          DCD      stGDC0LayerA
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  chargex
000000  0000              DCB      0x00,0x00
                  chargey
000002  0000              DCB      0x00,0x00
                  stSpeedNeedle
000004  c2e60000          DCFS     0xc2e60000 ; -115
000008  c2e60000          DCFS     0xc2e60000 ; -115
00000c  00000000          DCFS     0x00000000 ; 0
                  stRorateSpeedNeedle
000010  c2e60000          DCFS     0xc2e60000 ; -115
000014  c2e60000          DCFS     0xc2e60000 ; -115
000018  00000000          DCFS     0x00000000 ; 0
                  stKPASpeedNeedle
00001c  c2fa0000          DCFS     0xc2fa0000 ; -125
000020  c2fa0000          DCFS     0xc2fa0000 ; -125
000024  00000000          DCFS     0x00000000 ; 0
                  stKPBSpeedNeedle
000028  42f80000          DCFS     0x42f80000 ; 124
00002c  42f80000          DCFS     0x42f80000 ; 124
000030  00000000          DCFS     0x00000000 ; 0
                  stSOCSpeedNeedle
000034  c3020000          DCFS     0xc3020000 ; -130
000038  c3020000          DCFS     0xc3020000 ; -130
00003c  00000000          DCFS     0x00000000 ; 0
                  stVSpeedNeedle
000040  43010000          DCFS     0x43010000 ; 129
000044  43010000          DCFS     0x43010000 ; 129
000048  00000000          DCFS     0x00000000 ; 0
                  u8alphaSave
00004c  ff00              DCB      0xff,0x00
                  u16SavePwmDuty
00004e  0001              DCW      0x0001
