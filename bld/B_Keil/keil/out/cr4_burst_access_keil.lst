


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       **********************
    2 00000000         ;*   This software is copyright protected. All rights re
                       served
    3 00000000         ;*   Toshiba Electronics Europe GmbH,
    4 00000000         ;*   European LSI Design and Engineering Centre (ELDEC)
    5 00000000         ;*******************************************************
                       **********************
    6 00000000         ;*   DESCRIPTION : Cortex R4 burst access utilities
    7 00000000         ;*******************************************************
                       **********************
    8 00000000         ;*   PLATFORM    : TMPR46xXBG-300
    9 00000000         ;*   PROJECT     :
   10 00000000         ;*   MODULE      : Cortex R4 Core
   11 00000000         ;*   LIBRARIES   : None
   12 00000000         ;;******************************************************
                       ***********************
   13 00000000         ;*   VERSION     : $Revision: 1.7 $ 
   14 00000000         ;*   DATE        : $Date: 2015/05/04 09:07:18 $
   15 00000000         ;*   TAG         : $Name:  $
   16 00000000         ;*   RELEASE     : Preliminary and Confidential
   17 00000000         ;*******************************************************
                       **********************/
   18 00000000         
   19 00000000         ;*******************************************************
                       **********************
   20 00000000         ; Exported function prototypes
   21 00000000         ;*******************************************************
                       **********************
   22 00000000                 EXPORT           vASM_Init8WordsInBurst
   23 00000000                 EXPORT           vASM_Copy8WordsInBurst
   24 00000000                 EXPORT           vASM_Copy4WordsInBurstMem2FiFo
   25 00000000                 EXPORT           vASM_Copy4WordsInBurstFiFo2Mem
   26 00000000                 EXPORT           vASM_Copy8WordsInBurstMem2FiFo
   27 00000000                 EXPORT           vASM_Copy8WordsInBurstFiFo2Mem
   28 00000000         
   29 00000000         
   30 00000000         ;*******************************************************
                       **********************
   31 00000000         ; Area definitions
   32 00000000         ;*******************************************************
                       **********************
   33 00000000                 AREA             init, CODE, READONLY, ALIGN=8
   34 00000000         
   35 00000000         ;*******************************************************
                       **********************
   36 00000000         ; R0-> Data
   37 00000000         ; R1-> Addr
   38 00000000         ; R2-> Transaction count (8 words per transaction)
   39 00000000         ;*******************************************************
                       **********************
   40 00000000         vASM_Init8WordsInBurst
   41 00000000 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack
   42 00000004 E1A0A001        MOV              r10, r1     ; Destination addre
                                                            ss
   43 00000008 E1A0B000        MOV              r11, r0     ; Data apttern to b



ARM Macro Assembler    Page 2 


                                                            e written
   44 0000000C E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
   45 00000010         
   46 00000010 E1A0000B        MOV              r0, r11     ; Populate the patt
                                                            ern
   47 00000014 E1A0100B        MOV              r1, r11
   48 00000018 E1A0200B        MOV              r2, r11
   49 0000001C E1A0300B        MOV              r3, r11
   50 00000020 E1A0400B        MOV              r4, r11
   51 00000024 E1A0500B        MOV              r5, r11
   52 00000028 E1A0600B        MOV              r6, r11
   53 0000002C E1A0700B        MOV              r7, r11
   54 00000030         
   55 00000030 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
   56 00000034         
   57 00000034         b8clear_loop
   58 00000034 E8AA00FF        STMIA            r10!, {r0-r7} ; Burst write of 
                                                            8 words
   59 00000038 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
   60 0000003C E158000C        CMP              r8, r12     ; Compare
   61 00000040 1AFFFFFB        BNE              b8clear_loop ; Bottom out
   62 00000044         
   63 00000044 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r
                                                            eturn 
   64 00000048         
   65 00000048         ;*******************************************************
                       **********************
   66 00000048         ; R0-> Source
   67 00000048         ; R1-> Destination
   68 00000048         ; R2-> Transaction count (8 words per transaction)
   69 00000048         ;*******************************************************
                       **********************
   70 00000048         vASM_Copy8WordsInBurst
   71 00000048 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack    
   72 0000004C E1A0A000        MOV              r10, r0     ; Source address
   73 00000050 E1A0B001        MOV              r11, r1     ; Destination addre
                                                            ss
   74 00000054 E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
   75 00000058         
   76 00000058 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
   77 0000005C         
   78 0000005C         b8copy_loop
   79 0000005C E8BA00FF        LDMIA            r10!, {r0-r7} ; Burst read of 8
                                                             words
   80 00000060 E8AB00FF        STMIA            r11!, {r0-r7} ; Burst write of 
                                                            8 words
   81 00000064 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
   82 00000068 E158000C        CMP              r8, r12     ; Compare
   83 0000006C 1AFFFFFA        BNE              b8copy_loop ; Bottom out
   84 00000070         



ARM Macro Assembler    Page 3 


   85 00000070 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r
                                                            eturn 
   86 00000074         
   87 00000074         
   88 00000074         ;*******************************************************
                       **********************
   89 00000074         ; R0-> Source
   90 00000074         ; R1-> Destination
   91 00000074         ; R2-> Transaction count (4 words per transaction)
   92 00000074         ;*******************************************************
                       **********************
   93 00000074         vASM_Copy4WordsInBurstMem2FiFo
   94 00000074 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack    
   95 00000078 E1A0A000        MOV              r10, r0     ; Source address
   96 0000007C E1A09001        MOV              r9,  r1     ; backup Destinatio
                                                            n address    
   97 00000080 E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
   98 00000084         
   99 00000084 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
  100 00000088         
  101 00000088         b4copy_Mem2FiFo_loop
  102 00000088 E1A0B009        MOV              r11, r9     ; restore destinati
                                                            on address from bac
                                                            k up
  103 0000008C E8BA000F        LDMIA            r10!, {r0-r3} ; Burst read of 4
                                                             words
  104 00000090 E8AB000F        STMIA            r11!, {r0-r3} ; Burst write of 
                                                            4 words
  105 00000094 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
  106 00000098 E158000C        CMP              r8, r12     ; Compare
  107 0000009C 1AFFFFF9        BNE              b4copy_Mem2FiFo_loop 
                                                            ; Bottom out
  108 000000A0         
  109 000000A0 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r
                                                            eturn 
  110 000000A4         
  111 000000A4         
  112 000000A4         ;*******************************************************
                       **********************
  113 000000A4         ; R0-> Source
  114 000000A4         ; R1-> Destination
  115 000000A4         ; R2-> Transaction count (4 words per transaction)
  116 000000A4         ;*******************************************************
                       **********************
  117 000000A4         vASM_Copy4WordsInBurstFiFo2Mem
  118 000000A4 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack    
  119 000000A8 E1A0B001        MOV              r11, r1     ; Destination addre
                                                            ss
  120 000000AC E1A09000        MOV              r9,  r0     ; backup source add
                                                            ress    



ARM Macro Assembler    Page 4 


  121 000000B0 E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
  122 000000B4         
  123 000000B4 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
  124 000000B8         
  125 000000B8         b4copy_FiFo2Mem_loop
  126 000000B8 E1A0A009        MOV              r10, r9     ; restore source ad
                                                            dress from back up
  127 000000BC E8BA000F        LDMIA            r10!, {r0-r3} ; Burst read of 4
                                                             words
  128 000000C0 E8AB000F        STMIA            r11!, {r0-r3} ; Burst write of 
                                                            4 words
  129 000000C4 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
  130 000000C8 E158000C        CMP              r8, r12     ; Compare
  131 000000CC 1AFFFFF9        BNE              b4copy_FiFo2Mem_loop 
                                                            ; Bottom out
  132 000000D0         
  133 000000D0 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r
                                                            eturn
  134 000000D4         
  135 000000D4         
  136 000000D4         ;*******************************************************
                       **********************
  137 000000D4         ; R0-> Source
  138 000000D4         ; R1-> Destination
  139 000000D4         ; R2-> Transaction count (8 words per transaction)
  140 000000D4         ;*******************************************************
                       **********************
  141 000000D4         vASM_Copy8WordsInBurstMem2FiFo
  142 000000D4 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack    
  143 000000D8 E1A0A000        MOV              r10, r0     ; Source address
  144 000000DC E1A09001        MOV              r9,  r1     ; backup Destinatio
                                                            n address    
  145 000000E0 E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
  146 000000E4         
  147 000000E4 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
  148 000000E8         
  149 000000E8         b8copy_Mem2FiFo_loop
  150 000000E8 E1A0B009        MOV              r11, r9     ; restore destinati
                                                            on address from bac
                                                            k up
  151 000000EC E8BA00FF        LDMIA            r10!, {r0-r7} ; Burst read of 4
                                                             words
  152 000000F0 E8AB00FF        STMIA            r11!, {r0-r7} ; Burst write of 
                                                            4 words
  153 000000F4 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
  154 000000F8 E158000C        CMP              r8, r12     ; Compare
  155 000000FC 1AFFFFF9        BNE              b8copy_Mem2FiFo_loop 
                                                            ; Bottom out
  156 00000100         
  157 00000100 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r



ARM Macro Assembler    Page 5 


                                                            eturn 
  158 00000104         
  159 00000104         
  160 00000104         ;*******************************************************
                       **********************
  161 00000104         ; R0-> Source
  162 00000104         ; R1-> Destination
  163 00000104         ; R2-> Transaction count (8 words per transaction)
  164 00000104         ;*******************************************************
                       **********************
  165 00000104         vASM_Copy8WordsInBurstFiFo2Mem
  166 00000104 E92D5FFE        STMFD            SP!,{r1-r12, lr} ; Save return 
                                                            address and all mod
                                                            ified registers to 
                                                            stack    
  167 00000108 E1A0B001        MOV              r11, r1     ; Destination addre
                                                            ss
  168 0000010C E1A09000        MOV              r9,  r0     ; backup source add
                                                            ress    
  169 00000110 E1A0C002        MOV              r12, r2     ; Transaction count
                                                                    
  170 00000114         
  171 00000114 E3A08000        LDR              r8, =0x0    ; Initialize the co
                                                            unter
  172 00000118         
  173 00000118         b8copy_FiFo2Mem_loop
  174 00000118 E1A0A009        MOV              r10, r9     ; restore source ad
                                                            dress from back up
  175 0000011C E8BA00FF        LDMIA            r10!, {r0-r7} ; Burst read of 4
                                                             words
  176 00000120 E8AB00FF        STMIA            r11!, {r0-r7} ; Burst write of 
                                                            4 words
  177 00000124 E2888001        ADD              r8, r8, #1  ; Decrement the cou
                                                            nter
  178 00000128 E158000C        CMP              r8, r12     ; Compare
  179 0000012C 1AFFFFF9        BNE              b8copy_FiFo2Mem_loop 
                                                            ; Bottom out
  180 00000130         
  181 00000130 E8BD9FFE        LDMFD            SP!,{r1-r12,pc} ; Restore and r
                                                            eturn
  182 00000134         
  183 00000134                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-R4 --apcs=interw
ork --depend=..\out\cr4_burst_access_keil.d -o..\out\cr4_burst_access_keil.o -I
..\..\..\..\cortex_r4_keil\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS
\Include --predefine="__UVISION_VERSION SETA 516" --list=..\out\cr4_burst_acces
s_keil.lst ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

b4copy_FiFo2Mem_loop 000000B8

Symbol: b4copy_FiFo2Mem_loop
   Definitions
      At line 125 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 131 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
Comment: b4copy_FiFo2Mem_loop used once
b4copy_Mem2FiFo_loop 00000088

Symbol: b4copy_Mem2FiFo_loop
   Definitions
      At line 101 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 107 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
Comment: b4copy_Mem2FiFo_loop used once
b8clear_loop 00000034

Symbol: b8clear_loop
   Definitions
      At line 57 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      At line 61 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: b8clear_loop used once
b8copy_FiFo2Mem_loop 00000118

Symbol: b8copy_FiFo2Mem_loop
   Definitions
      At line 173 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 179 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
Comment: b8copy_FiFo2Mem_loop used once
b8copy_Mem2FiFo_loop 000000E8

Symbol: b8copy_Mem2FiFo_loop
   Definitions
      At line 149 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 155 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
Comment: b8copy_Mem2FiFo_loop used once
b8copy_loop 0000005C

Symbol: b8copy_loop
   Definitions
      At line 78 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      At line 83 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: b8copy_loop used once
init 00000000

Symbol: init



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 33 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      None
Comment: init unused
vASM_Copy4WordsInBurstFiFo2Mem 000000A4

Symbol: vASM_Copy4WordsInBurstFiFo2Mem
   Definitions
      At line 117 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 25 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Copy4WordsInBurstFiFo2Mem used once
vASM_Copy4WordsInBurstMem2FiFo 00000074

Symbol: vASM_Copy4WordsInBurstMem2FiFo
   Definitions
      At line 93 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      At line 24 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Copy4WordsInBurstMem2FiFo used once
vASM_Copy8WordsInBurst 00000048

Symbol: vASM_Copy8WordsInBurst
   Definitions
      At line 70 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      At line 23 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Copy8WordsInBurst used once
vASM_Copy8WordsInBurstFiFo2Mem 00000104

Symbol: vASM_Copy8WordsInBurstFiFo2Mem
   Definitions
      At line 165 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 27 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Copy8WordsInBurstFiFo2Mem used once
vASM_Copy8WordsInBurstMem2FiFo 000000D4

Symbol: vASM_Copy8WordsInBurstMem2FiFo
   Definitions
      At line 141 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.
s
   Uses
      At line 26 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Copy8WordsInBurstMem2FiFo used once
vASM_Init8WordsInBurst 00000000

Symbol: vASM_Init8WordsInBurst
   Definitions
      At line 40 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
   Uses
      At line 22 in file ..\..\..\..\cortex_r4_keil\src\cr4_burst_access_keil.s
Comment: vASM_Init8WordsInBurst used once
13 symbols
344 symbols in table
