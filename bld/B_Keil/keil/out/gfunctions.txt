; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\gfunctions.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\gfunctions.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\gfunctions.crf ..\..\..\..\mw\src\gfunctions.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vGf_Gfunctions_GetVersion PROC
;;;170    
;;;171    void vGf_Gfunctions_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;172                                   uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;173                                   uint8_t** pau8GfHeaderRevision, uint8_t** pau8GfHeaderTag,
;;;174                                   uint8_t** pau8DefHeaderRevision, uint8_t** pau8DefHeaderTag)
;;;175    {
000004  e1cd41d4          LDRD     r4,r5,[sp,#0x14]
000008  e1cd61dc          LDRD     r6,r7,[sp,#0x1c]
;;;176       *pau8ModuleRevision    = &au8MW_GFUNCTIONS_C_REVISION[0];
00000c  e59fcef0          LDR      r12,|L1.3844|
000010  e580c000          STR      r12,[r0,#0]
;;;177       *pau8ModuleTag         = &au8MW_GFUNCTIONS_C_TAG[0];
000014  e59fceec          LDR      r12,|L1.3848|
000018  e581c000          STR      r12,[r1,#0]
;;;178       *pau8HeaderRevision    = &au8MW_GFUNCTIONS_H_REVISION[0];
00001c  e59fcee8          LDR      r12,|L1.3852|
000020  e582c000          STR      r12,[r2,#0]
;;;179       *pau8HeaderTag         = &au8MW_GFUNCTIONS_H_TAG[0];
000024  e59fcee4          LDR      r12,|L1.3856|
000028  e583c000          STR      r12,[r3,#0]
;;;180       *pau8GfHeaderRevision  = &au8MW_GF_H_REVISION[0];
00002c  e59fcee0          LDR      r12,|L1.3860|
000030  e584c000          STR      r12,[r4,#0]
;;;181       *pau8GfHeaderTag       = &au8MW_GF_H_TAG[0];
000034  e59fcedc          LDR      r12,|L1.3864|
000038  e585c000          STR      r12,[r5,#0]
;;;182       *pau8DefHeaderRevision = &au8MW_DEFINITIONS_H_REVISION[0];
00003c  e59fced8          LDR      r12,|L1.3868|
000040  e586c000          STR      r12,[r6,#0]
;;;183       *pau8DefHeaderTag      = &au8MW_DEFINITIONS_H_TAG[0];
000044  e59fced4          LDR      r12,|L1.3872|
000048  e587c000          STR      r12,[r7,#0]
;;;184    }
00004c  e8bd80f0          POP      {r4-r7,pc}
;;;185    
                          ENDP

                  boIsAntiClockwise PROC
;;;188    
;;;189    static bool_t boIsAntiClockwise(drw_Trngl_st *pstTrngl)
000050  e92d4030          PUSH     {r4,r5,lr}
;;;190    {
000054  e1a01000          MOV      r1,r0
;;;191        /* Cross product formula to determine if the points are in clockwise or anti clockwise direction */
;;;192        /* If i32Value is +ve/-ve  points are in Anti-Clockwise/Clockwise direction respectively */
;;;193        
;;;194        int32_t i32Value = (int32_t) ((((pstTrngl->stPt2.u16X - pstTrngl->stPt1.u16X) >> 4) * ((pstTrngl->stPt1.u16Y - pstTrngl->stPt3.u16Y) >> 4)) -
000058  e1d100b4          LDRH     r0,[r1,#4]
00005c  e1d130b0          LDRH     r3,[r1,#0]
000060  e0400003          SUB      r0,r0,r3
000064  e1a00240          ASR      r0,r0,#4
000068  e1d130b2          LDRH     r3,[r1,#2]
00006c  e1d140ba          LDRH     r4,[r1,#0xa]
000070  e0433004          SUB      r3,r3,r4
000074  e1a03243          ASR      r3,r3,#4
000078  e1600380          SMULBB   r0,r0,r3
00007c  e1d130b8          LDRH     r3,[r1,#8]
000080  e1d140b0          LDRH     r4,[r1,#0]
000084  e0433004          SUB      r3,r3,r4
000088  e1a03243          ASR      r3,r3,#4
00008c  e1d140b2          LDRH     r4,[r1,#2]
000090  e1d150b6          LDRH     r5,[r1,#6]
000094  e0444005          SUB      r4,r4,r5
000098  e1a04244          ASR      r4,r4,#4
00009c  e0620493          MLS      r2,r3,r4,r0
;;;195                                        (((pstTrngl->stPt3.u16X - pstTrngl->stPt1.u16X) >> 4) * ((pstTrngl->stPt1.u16Y - pstTrngl->stPt2.u16Y) >> 4)));
;;;196        if(i32Value < 0)
0000a0  e3520000          CMP      r2,#0
0000a4  aa000001          BGE      |L1.176|
;;;197        {
;;;198            return C_FALSE; /* Not in Anti clockwise direction */
0000a8  e3a00000          MOV      r0,#0
                  |L1.172|
;;;199        }
;;;200        else
;;;201        {
;;;202            return C_TRUE; /* In Anti clockwise direction */
;;;203        }
;;;204    }
0000ac  e8bd8030          POP      {r4,r5,pc}
                  |L1.176|
0000b0  e3a00001          MOV      r0,#1                 ;202
0000b4  eafffffc          B        |L1.172|
;;;205    
                          ENDP

                  vGfBuffDrawTriangle PROC
;;;4960   
;;;4961   void vGfBuffDrawTriangle(gf_image_st * pstDstImage, drw_OpCfg_st *pstOption, drw_Trngl_st *pstTrngl)
0000b8  e92d4070          PUSH     {r4-r6,lr}
;;;4962   
;;;4963   {
0000bc  e24dd028          SUB      sp,sp,#0x28
0000c0  e1a05000          MOV      r5,r0
0000c4  e1a06001          MOV      r6,r1
0000c8  e1a04002          MOV      r4,r2
;;;4964       drw_mem_st   stMem;
;;;4965       drw_Trngl_st stTrnglLocal;
;;;4966   
;;;4967       u8PreviousOperation = 0U;
0000cc  e3a00000          MOV      r0,#0
0000d0  e59f1e4c          LDR      r1,|L1.3876|
0000d4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4968   
;;;4969       stMem.u32DstAddr      = pstDstImage->u32Address;
0000d8  e5950000          LDR      r0,[r5,#0]
0000dc  e58d0020          STR      r0,[sp,#0x20]
;;;4970       stMem.u16DstImgWidth  = pstDstImage->u16Width;
0000e0  e1d500b4          LDRH     r0,[r5,#4]
0000e4  e1cd02b4          STRH     r0,[sp,#0x24]
;;;4971       stMem.u16DstImgHeight = pstDstImage->u16Height;
0000e8  e1d500b6          LDRH     r0,[r5,#6]
0000ec  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4972   
;;;4973       stTrnglLocal.stPt1.u16X = (17U-u32SubResPPos)*pstTrngl->stPt1.u16X;
0000f0  e59f0e30          LDR      r0,|L1.3880|
0000f4  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
0000f8  e2600011          RSB      r0,r0,#0x11
0000fc  e1d410b0          LDRH     r1,[r4,#0]
000100  e0000190          MUL      r0,r0,r1
000104  e6ff0070          UXTH     r0,r0
000108  e1cd00b4          STRH     r0,[sp,#4]
;;;4974       stTrnglLocal.stPt1.u16Y = (17U-u32SubResPPos)*pstTrngl->stPt1.u16Y;
00010c  e59f0e14          LDR      r0,|L1.3880|
000110  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000114  e2600011          RSB      r0,r0,#0x11
000118  e1d410b2          LDRH     r1,[r4,#2]
00011c  e0000190          MUL      r0,r0,r1
000120  e6ff0070          UXTH     r0,r0
000124  e1cd00b6          STRH     r0,[sp,#6]
;;;4975       stTrnglLocal.stPt2.u16X = (17U-u32SubResPPos)*pstTrngl->stPt2.u16X;
000128  e59f0df8          LDR      r0,|L1.3880|
00012c  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000130  e2600011          RSB      r0,r0,#0x11
000134  e1d410b4          LDRH     r1,[r4,#4]
000138  e0000190          MUL      r0,r0,r1
00013c  e6ff0070          UXTH     r0,r0
000140  e1cd00b8          STRH     r0,[sp,#8]
;;;4976       stTrnglLocal.stPt2.u16Y = (17U-u32SubResPPos)*pstTrngl->stPt2.u16Y;
000144  e59f0ddc          LDR      r0,|L1.3880|
000148  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
00014c  e2600011          RSB      r0,r0,#0x11
000150  e1d410b6          LDRH     r1,[r4,#6]
000154  e0000190          MUL      r0,r0,r1
000158  e1cd00ba          STRH     r0,[sp,#0xa]
;;;4977       stTrnglLocal.stPt3.u16X = (17U-u32SubResPPos)*pstTrngl->stPt3.u16X;
00015c  e59f0dc4          LDR      r0,|L1.3880|
000160  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000164  e2600011          RSB      r0,r0,#0x11
000168  e1d410b8          LDRH     r1,[r4,#8]
00016c  e0000190          MUL      r0,r0,r1
000170  e6ff0070          UXTH     r0,r0
000174  e1cd00bc          STRH     r0,[sp,#0xc]
;;;4978       stTrnglLocal.stPt3.u16Y = (17U-u32SubResPPos)*pstTrngl->stPt3.u16Y;
000178  e59f0da8          LDR      r0,|L1.3880|
00017c  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000180  e2600011          RSB      r0,r0,#0x11
000184  e1d410ba          LDRH     r1,[r4,#0xa]
000188  e0000190          MUL      r0,r0,r1
00018c  e1cd00be          STRH     r0,[sp,#0xe]
;;;4979       stTrnglLocal.eAntialEn1 = pstTrngl->eAntialEn1;
000190  e5d4000c          LDRB     r0,[r4,#0xc]
000194  e5cd0010          STRB     r0,[sp,#0x10]
;;;4980       stTrnglLocal.eAntialEn2 = pstTrngl->eAntialEn2;
000198  e5d4000d          LDRB     r0,[r4,#0xd]
00019c  e5cd0011          STRB     r0,[sp,#0x11]
;;;4981       stTrnglLocal.eAntialEn3 = pstTrngl->eAntialEn3;
0001a0  e5d4000e          LDRB     r0,[r4,#0xe]
0001a4  e5cd0012          STRB     r0,[sp,#0x12]
;;;4982       stTrnglLocal.stColor    = pstTrngl->stColor;
0001a8  e2842010          ADD      r2,r4,#0x10
0001ac  e8920007          LDM      r2,{r0-r2}
0001b0  e28d3014          ADD      r3,sp,#0x14
0001b4  e8830007          STM      r3,{r0-r2}
;;;4983   
;;;4984       vDrw_DrawTriangle(&stMem, pstOption, &stTrnglLocal, pstWriteList);
0001b8  e59f0d6c          LDR      r0,|L1.3884|
0001bc  e28d2004          ADD      r2,sp,#4
0001c0  e1a01006          MOV      r1,r6
0001c4  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
0001c8  e28d0020          ADD      r0,sp,#0x20
0001cc  ebfffffe          BL       vDrw_DrawTriangle
;;;4985   }
0001d0  e28dd028          ADD      sp,sp,#0x28
0001d4  e8bd8070          POP      {r4-r6,pc}
;;;4986   
                          ENDP

                  vGfDrawTriangleSort PROC
;;;208    
;;;209    static void vGfDrawTriangleSort(gf_image_st * pstDstImage, drw_OpCfg_st *pstOption, drw_Trngl_st *pstTrngl, uint8_t u8AAEdge)
0001d8  e92d47f0          PUSH     {r4-r10,lr}
;;;210    {
0001dc  e24dd020          SUB      sp,sp,#0x20
0001e0  e1a07000          MOV      r7,r0
0001e4  e1a08001          MOV      r8,r1
0001e8  e1a04002          MOV      r4,r2
0001ec  e1a05003          MOV      r5,r3
;;;211        drw_Trngl_st stTrnglSrt;
;;;212        uint16_t u16PosX, u16PosY;
;;;213        uint8_t u8AAFlag;
;;;214    
;;;215        u16PosX = 0U;
0001f0  e3a09000          MOV      r9,#0
;;;216        u16PosY = 0U;
0001f4  e3a0a000          MOV      r10,#0
;;;217        stTrnglSrt = (*pstTrngl);
0001f8  e3a0201c          MOV      r2,#0x1c
0001fc  e1a01004          MOV      r1,r4
000200  e28d0004          ADD      r0,sp,#4
000204  ebfffffe          BL       __aeabi_memcpy4
;;;218        u8AAFlag = u8AAEdge;
000208  e1a06005          MOV      r6,r5
;;;219        
;;;220        /* Of the three points, point with minimum Y is chosen the 1st point and points 2 and 3 are
;;;221           sorted based on the return value from boIsAntiClockwise() function such that the
;;;222           vGfDrawTriangleSort() function sorts the co-ordinates in Counter clockwise direction */
;;;223         
;;;224        /* When Point 1 has minimum Y */
;;;225        if((pstTrngl->stPt1.u16Y <= pstTrngl->stPt2.u16Y) && (pstTrngl->stPt1.u16Y <= pstTrngl->stPt3.u16Y))
00020c  e1d400b2          LDRH     r0,[r4,#2]
000210  e1d410b6          LDRH     r1,[r4,#6]
000214  e1500001          CMP      r0,r1
000218  ca000038          BGT      |L1.768|
00021c  e1d400b2          LDRH     r0,[r4,#2]
000220  e1d410ba          LDRH     r1,[r4,#0xa]
000224  e1500001          CMP      r0,r1
000228  ca000034          BGT      |L1.768|
;;;226        {   
;;;227            /* Condition to select point with maximum X as 1st point when Y co-ordinates are equal */
;;;228           if((pstTrngl->stPt1.u16Y == pstTrngl->stPt2.u16Y) && (pstTrngl->stPt1.u16X < pstTrngl->stPt2.u16X))
00022c  e1d400b2          LDRH     r0,[r4,#2]
000230  e1d410b6          LDRH     r1,[r4,#6]
000234  e1500001          CMP      r0,r1
000238  1a000015          BNE      |L1.660|
00023c  e1d400b0          LDRH     r0,[r4,#0]
000240  e1d410b4          LDRH     r1,[r4,#4]
000244  e1500001          CMP      r0,r1
000248  aa000011          BGE      |L1.660|
;;;229           {
;;;230               stTrnglSrt.stPt1.u16X = pstTrngl->stPt2.u16X;
00024c  e1d400b4          LDRH     r0,[r4,#4]
000250  e1cd00b4          STRH     r0,[sp,#4]
;;;231               stTrnglSrt.stPt1.u16Y = pstTrngl->stPt2.u16Y;
000254  e1d400b6          LDRH     r0,[r4,#6]
000258  e1cd00b6          STRH     r0,[sp,#6]
;;;232               
;;;233               stTrnglSrt.stPt2.u16X = pstTrngl->stPt3.u16X;
00025c  e1d400b8          LDRH     r0,[r4,#8]
000260  e1cd00b8          STRH     r0,[sp,#8]
;;;234               stTrnglSrt.stPt2.u16Y = pstTrngl->stPt3.u16Y;
000264  e1d400ba          LDRH     r0,[r4,#0xa]
000268  e1cd00ba          STRH     r0,[sp,#0xa]
;;;235               
;;;236               stTrnglSrt.stPt3.u16X = pstTrngl->stPt1.u16X;
00026c  e1d400b0          LDRH     r0,[r4,#0]
000270  e1cd00bc          STRH     r0,[sp,#0xc]
;;;237               stTrnglSrt.stPt3.u16Y = pstTrngl->stPt1.u16Y;
000274  e1d400b2          LDRH     r0,[r4,#2]
000278  e1cd00be          STRH     r0,[sp,#0xe]
;;;238               
;;;239               /* Arranging AA edges according to the sorted co-ordinates */
;;;240               u8AAFlag = 0U;
00027c  e3a06000          MOV      r6,#0
;;;241               u8AAFlag = (((u8AAEdge & 4U ) >> 1U) | ((u8AAEdge & 2U) >> 1U) | ((u8AAEdge & 1U) << 2U));
000280  e2050004          AND      r0,r5,#4
000284  e7e010d5          UBFX     r1,r5,#1,#1
000288  e18100a0          ORR      r0,r1,r0,LSR #1
00028c  e2051001          AND      r1,r5,#1
000290  e1806101          ORR      r6,r0,r1,LSL #2
                  |L1.660|
;;;242           }
;;;243           /* Condition to select point with maximum X as 1st point when Y co-ordinates are equal */
;;;244           if((pstTrngl->stPt1.u16Y == pstTrngl->stPt3.u16Y) && (pstTrngl->stPt1.u16X < pstTrngl->stPt3.u16X))
000294  e1d400b2          LDRH     r0,[r4,#2]
000298  e1d410ba          LDRH     r1,[r4,#0xa]
00029c  e1500001          CMP      r0,r1
0002a0  1a000073          BNE      |L1.1140|
0002a4  e1d400b0          LDRH     r0,[r4,#0]
0002a8  e1d410b8          LDRH     r1,[r4,#8]
0002ac  e1500001          CMP      r0,r1
0002b0  aa00006f          BGE      |L1.1140|
;;;245           {
;;;246              stTrnglSrt.stPt1.u16X = pstTrngl->stPt3.u16X;
0002b4  e1d400b8          LDRH     r0,[r4,#8]
0002b8  e1cd00b4          STRH     r0,[sp,#4]
;;;247              stTrnglSrt.stPt1.u16Y = pstTrngl->stPt3.u16Y;
0002bc  e1d400ba          LDRH     r0,[r4,#0xa]
0002c0  e1cd00b6          STRH     r0,[sp,#6]
;;;248              
;;;249              stTrnglSrt.stPt2.u16X = pstTrngl->stPt1.u16X;
0002c4  e1d400b0          LDRH     r0,[r4,#0]
0002c8  e1cd00b8          STRH     r0,[sp,#8]
;;;250              stTrnglSrt.stPt2.u16Y = pstTrngl->stPt1.u16Y;
0002cc  e1d400b2          LDRH     r0,[r4,#2]
0002d0  e1cd00ba          STRH     r0,[sp,#0xa]
;;;251               
;;;252              stTrnglSrt.stPt3.u16X = pstTrngl->stPt2.u16X;
0002d4  e1d400b4          LDRH     r0,[r4,#4]
0002d8  e1cd00bc          STRH     r0,[sp,#0xc]
;;;253              stTrnglSrt.stPt3.u16Y = pstTrngl->stPt2.u16Y;
0002dc  e1d400b6          LDRH     r0,[r4,#6]
0002e0  e1cd00be          STRH     r0,[sp,#0xe]
;;;254              
;;;255              /* Arranging AA edges according to the sorted co-ordinates */
;;;256              u8AAFlag = 0U;
0002e4  e3a06000          MOV      r6,#0
;;;257              u8AAFlag = (((u8AAEdge & 4U) >> 2U) | ((u8AAEdge & 2U) << 1U) | ((u8AAEdge & 1U) << 1U));
0002e8  e2050002          AND      r0,r5,#2
0002ec  e7e01155          UBFX     r1,r5,#2,#1
0002f0  e1810080          ORR      r0,r1,r0,LSL #1
0002f4  e2051001          AND      r1,r5,#1
0002f8  e1806081          ORR      r6,r0,r1,LSL #1
0002fc  ea00005c          B        |L1.1140|
                  |L1.768|
;;;258           }
;;;259        }
;;;260        else if((pstTrngl->stPt2.u16Y <= pstTrngl->stPt1.u16Y) 
000300  e1d400b6          LDRH     r0,[r4,#6]
000304  e1d410b2          LDRH     r1,[r4,#2]
000308  e1500001          CMP      r0,r1
00030c  ca000046          BGT      |L1.1068|
;;;261                        && (pstTrngl->stPt2.u16Y <= pstTrngl->stPt3.u16Y)) /* point 2 has minimum Y */
000310  e1d400b6          LDRH     r0,[r4,#6]
000314  e1d410ba          LDRH     r1,[r4,#0xa]
000318  e1500001          CMP      r0,r1
00031c  ca000042          BGT      |L1.1068|
;;;262        {
;;;263            stTrnglSrt.stPt1.u16X = pstTrngl->stPt2.u16X;
000320  e1d400b4          LDRH     r0,[r4,#4]
000324  e1cd00b4          STRH     r0,[sp,#4]
;;;264            stTrnglSrt.stPt1.u16Y = pstTrngl->stPt2.u16Y;
000328  e1d400b6          LDRH     r0,[r4,#6]
00032c  e1cd00b6          STRH     r0,[sp,#6]
;;;265    
;;;266            stTrnglSrt.stPt2.u16X = pstTrngl->stPt3.u16X;
000330  e1d400b8          LDRH     r0,[r4,#8]
000334  e1cd00b8          STRH     r0,[sp,#8]
;;;267            stTrnglSrt.stPt2.u16Y = pstTrngl->stPt3.u16Y;
000338  e1d400ba          LDRH     r0,[r4,#0xa]
00033c  e1cd00ba          STRH     r0,[sp,#0xa]
;;;268    
;;;269            stTrnglSrt.stPt3.u16X = pstTrngl->stPt1.u16X;
000340  e1d400b0          LDRH     r0,[r4,#0]
000344  e1cd00bc          STRH     r0,[sp,#0xc]
;;;270            stTrnglSrt.stPt3.u16Y = pstTrngl->stPt1.u16Y;
000348  e1d400b2          LDRH     r0,[r4,#2]
00034c  e1cd00be          STRH     r0,[sp,#0xe]
;;;271                
;;;272            /* Arranging AA edges according to the sorted co-ordinates */
;;;273            u8AAFlag = 0U;
000350  e3a06000          MOV      r6,#0
;;;274            u8AAFlag = (((u8AAEdge & 4U) >> 1U) | ((u8AAEdge & 2U) >> 1U) | ((u8AAEdge & 1U) << 2U));  
000354  e2050004          AND      r0,r5,#4
000358  e7e010d5          UBFX     r1,r5,#1,#1
00035c  e18100a0          ORR      r0,r1,r0,LSR #1
000360  e2051001          AND      r1,r5,#1
000364  e1806101          ORR      r6,r0,r1,LSL #2
;;;275            
;;;276            /* Condition to select point with maximum X as 1st point when Y co-ordinates are equal */
;;;277            if((pstTrngl->stPt2.u16Y == pstTrngl->stPt1.u16Y) && (pstTrngl->stPt2.u16X < pstTrngl->stPt1.u16X))
000368  e1d400b6          LDRH     r0,[r4,#6]
00036c  e1d410b2          LDRH     r1,[r4,#2]
000370  e1500001          CMP      r0,r1
000374  1a000011          BNE      |L1.960|
000378  e1d400b4          LDRH     r0,[r4,#4]
00037c  e1d410b0          LDRH     r1,[r4,#0]
000380  e1500001          CMP      r0,r1
000384  aa00000d          BGE      |L1.960|
;;;278            {
;;;279                stTrnglSrt.stPt1.u16X = pstTrngl->stPt1.u16X;
000388  e1d400b0          LDRH     r0,[r4,#0]
00038c  e1cd00b4          STRH     r0,[sp,#4]
;;;280                stTrnglSrt.stPt1.u16Y = pstTrngl->stPt1.u16Y;
000390  e1d400b2          LDRH     r0,[r4,#2]
000394  e1cd00b6          STRH     r0,[sp,#6]
;;;281                
;;;282                stTrnglSrt.stPt2.u16X = pstTrngl->stPt2.u16X;
000398  e1d400b4          LDRH     r0,[r4,#4]
00039c  e1cd00b8          STRH     r0,[sp,#8]
;;;283                stTrnglSrt.stPt2.u16Y = pstTrngl->stPt2.u16Y;
0003a0  e1d400b6          LDRH     r0,[r4,#6]
0003a4  e1cd00ba          STRH     r0,[sp,#0xa]
;;;284    
;;;285                stTrnglSrt.stPt3.u16X = pstTrngl->stPt3.u16X;
0003a8  e1d400b8          LDRH     r0,[r4,#8]
0003ac  e1cd00bc          STRH     r0,[sp,#0xc]
;;;286                stTrnglSrt.stPt3.u16Y = pstTrngl->stPt3.u16Y;
0003b0  e1d400ba          LDRH     r0,[r4,#0xa]
0003b4  e1cd00be          STRH     r0,[sp,#0xe]
;;;287                
;;;288                /* Arranging AA edges according to the sorted co-ordinates */
;;;289                u8AAFlag = 0U;
0003b8  e3a06000          MOV      r6,#0
;;;290                u8AAFlag = u8AAEdge;
0003bc  e1a06005          MOV      r6,r5
                  |L1.960|
;;;291            }
;;;292            /* Condition to select point with maximum X as 1st point when Y co-ordinates are equal */
;;;293            if((pstTrngl->stPt2.u16Y == pstTrngl->stPt3.u16Y) && (pstTrngl->stPt2.u16X < pstTrngl->stPt3.u16X))
0003c0  e1d400b6          LDRH     r0,[r4,#6]
0003c4  e1d410ba          LDRH     r1,[r4,#0xa]
0003c8  e1500001          CMP      r0,r1
0003cc  1a000028          BNE      |L1.1140|
0003d0  e1d400b4          LDRH     r0,[r4,#4]
0003d4  e1d410b8          LDRH     r1,[r4,#8]
0003d8  e1500001          CMP      r0,r1
0003dc  aa000024          BGE      |L1.1140|
;;;294            {
;;;295                stTrnglSrt.stPt1.u16X = pstTrngl->stPt3.u16X;
0003e0  e1d400b8          LDRH     r0,[r4,#8]
0003e4  e1cd00b4          STRH     r0,[sp,#4]
;;;296                stTrnglSrt.stPt1.u16Y = pstTrngl->stPt3.u16Y;
0003e8  e1d400ba          LDRH     r0,[r4,#0xa]
0003ec  e1cd00b6          STRH     r0,[sp,#6]
;;;297                
;;;298                stTrnglSrt.stPt2.u16X = pstTrngl->stPt1.u16X;
0003f0  e1d400b0          LDRH     r0,[r4,#0]
0003f4  e1cd00b8          STRH     r0,[sp,#8]
;;;299                stTrnglSrt.stPt2.u16Y = pstTrngl->stPt1.u16Y;
0003f8  e1d400b2          LDRH     r0,[r4,#2]
0003fc  e1cd00ba          STRH     r0,[sp,#0xa]
;;;300    
;;;301                stTrnglSrt.stPt3.u16X = pstTrngl->stPt2.u16X;
000400  e1d400b4          LDRH     r0,[r4,#4]
000404  e1cd00bc          STRH     r0,[sp,#0xc]
;;;302                stTrnglSrt.stPt3.u16Y = pstTrngl->stPt2.u16Y;
000408  e1d400b6          LDRH     r0,[r4,#6]
00040c  e1cd00be          STRH     r0,[sp,#0xe]
;;;303                
;;;304                /* Arranging AA edges according to the sorted co-ordinates */
;;;305                u8AAFlag = 0U;
000410  e3a06000          MOV      r6,#0
;;;306                u8AAFlag = (((u8AAEdge & 4U) >> 2U) | ((u8AAEdge & 2U) << 1U) | ((u8AAEdge & 1U) << 1U));
000414  e2050002          AND      r0,r5,#2
000418  e7e01155          UBFX     r1,r5,#2,#1
00041c  e1810080          ORR      r0,r1,r0,LSL #1
000420  e2051001          AND      r1,r5,#1
000424  e1806081          ORR      r6,r0,r1,LSL #1
000428  ea000011          B        |L1.1140|
                  |L1.1068|
;;;307            }
;;;308            
;;;309        }
;;;310        else /* Point 3 has minimum Y */
;;;311        {
;;;312            stTrnglSrt.stPt1.u16X = pstTrngl->stPt3.u16X;
00042c  e1d400b8          LDRH     r0,[r4,#8]
000430  e1cd00b4          STRH     r0,[sp,#4]
;;;313            stTrnglSrt.stPt1.u16Y = pstTrngl->stPt3.u16Y;//y3 is small;
000434  e1d400ba          LDRH     r0,[r4,#0xa]
000438  e1cd00b6          STRH     r0,[sp,#6]
;;;314            
;;;315            stTrnglSrt.stPt2.u16X = pstTrngl->stPt1.u16X;
00043c  e1d400b0          LDRH     r0,[r4,#0]
000440  e1cd00b8          STRH     r0,[sp,#8]
;;;316            stTrnglSrt.stPt2.u16Y = pstTrngl->stPt1.u16Y;
000444  e1d400b2          LDRH     r0,[r4,#2]
000448  e1cd00ba          STRH     r0,[sp,#0xa]
;;;317    
;;;318            stTrnglSrt.stPt3.u16X = pstTrngl->stPt2.u16X;
00044c  e1d400b4          LDRH     r0,[r4,#4]
000450  e1cd00bc          STRH     r0,[sp,#0xc]
;;;319            stTrnglSrt.stPt3.u16Y = pstTrngl->stPt2.u16Y;
000454  e1d400b6          LDRH     r0,[r4,#6]
000458  e1cd00be          STRH     r0,[sp,#0xe]
;;;320            
;;;321            /* Arranging AA edges according to the sorted co-ordinates */
;;;322            u8AAFlag = 0U;
00045c  e3a06000          MOV      r6,#0
;;;323            u8AAFlag = (((u8AAEdge & 4U) >> 2U) | ((u8AAEdge & 2U) << 1U) | ((u8AAEdge & 1U) << 1U));
000460  e2050002          AND      r0,r5,#2
000464  e7e01155          UBFX     r1,r5,#2,#1
000468  e1810080          ORR      r0,r1,r0,LSL #1
00046c  e2051001          AND      r1,r5,#1
000470  e1806081          ORR      r6,r0,r1,LSL #1
                  |L1.1140|
;;;324        }
;;;325        
;;;326        /* Check if point 2 and 3 are in anti clockwise direction and swap if in clockwise direction */    
;;;327        if(!(boIsAntiClockwise(&stTrnglSrt)))
000474  e28d0004          ADD      r0,sp,#4
000478  ebfffffe          BL       boIsAntiClockwise
00047c  e3500000          CMP      r0,#0
000480  1a00000c          BNE      |L1.1208|
;;;328        {
;;;329            /* swap points 2 and 3 */
;;;330            u16PosX = stTrnglSrt.stPt2.u16X;
000484  e1dd90b8          LDRH     r9,[sp,#8]
;;;331            u16PosY = stTrnglSrt.stPt2.u16Y;
000488  e1dda0ba          LDRH     r10,[sp,#0xa]
;;;332            
;;;333            stTrnglSrt.stPt2.u16X = stTrnglSrt.stPt3.u16X;
00048c  e1dd00bc          LDRH     r0,[sp,#0xc]
000490  e1cd00b8          STRH     r0,[sp,#8]
;;;334            stTrnglSrt.stPt2.u16Y = stTrnglSrt.stPt3.u16Y;
000494  e1dd00be          LDRH     r0,[sp,#0xe]
000498  e1cd00ba          STRH     r0,[sp,#0xa]
;;;335    
;;;336            stTrnglSrt.stPt3.u16X = u16PosX;
00049c  e1cd90bc          STRH     r9,[sp,#0xc]
;;;337            stTrnglSrt.stPt3.u16Y = u16PosY;
0004a0  e1cda0be          STRH     r10,[sp,#0xe]
;;;338            
;;;339            /* Arranging AA edges according to the sorted co-ordinates */
;;;340            u8AAFlag = (((u8AAFlag & 4U) >> 2U) | (u8AAFlag & 2U) | ((u8AAFlag & 1U) << 2U));
0004a4  e2060002          AND      r0,r6,#2
0004a8  e7e01156          UBFX     r1,r6,#2,#1
0004ac  e1800001          ORR      r0,r0,r1
0004b0  e2061001          AND      r1,r6,#1
0004b4  e1806101          ORR      r6,r0,r1,LSL #2
                  |L1.1208|
;;;341        }
;;;342        /* Enabling / Disabling AA effect for Edge 1 */
;;;343        stTrnglSrt.eAntialEn1 = (ga_en_e)(u8AAFlag & 1U);
0004b8  e2060001          AND      r0,r6,#1
0004bc  e5cd0010          STRB     r0,[sp,#0x10]
;;;344    
;;;345        /* Enabling / Disabling AA effect for Edge 2 */
;;;346        stTrnglSrt.eAntialEn2 = (ga_en_e)((u8AAFlag & 2U) >> 1U);
0004c0  e7e000d6          UBFX     r0,r6,#1,#1
0004c4  e5cd0011          STRB     r0,[sp,#0x11]
;;;347    
;;;348        /* Enabling / Disabling AA effect for Edge 3 */
;;;349        stTrnglSrt.eAntialEn3 = (ga_en_e)((u8AAFlag & 4U) >> 2U);
0004c8  e7e00156          UBFX     r0,r6,#2,#1
0004cc  e5cd0012          STRB     r0,[sp,#0x12]
;;;350    
;;;351         /* Call Draw triangle API to fill polygon */
;;;352        vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrnglSrt);
0004d0  e28d2004          ADD      r2,sp,#4
0004d4  e1a01008          MOV      r1,r8
0004d8  e1a00007          MOV      r0,r7
0004dc  ebfffffe          BL       vGfBuffDrawTriangle
;;;353    
;;;354    }
0004e0  e28dd020          ADD      sp,sp,#0x20
0004e4  e8bd87f0          POP      {r4-r10,pc}
;;;355    
                          ENDP

                  vGfBuffDrawLine PROC
;;;4934   
;;;4935   void vGfBuffDrawLine(gf_image_st * pstDstImage, drw_OpCfg_st *pstOption, drw_Line_st *pstLine)
0004e8  e92d4070          PUSH     {r4-r6,lr}
;;;4936   {
0004ec  e24dd028          SUB      sp,sp,#0x28
0004f0  e1a05000          MOV      r5,r0
0004f4  e1a06001          MOV      r6,r1
0004f8  e1a04002          MOV      r4,r2
;;;4937       drw_mem_st  stMem;
;;;4938       drw_Line_st stLineLocal;
;;;4939   
;;;4940       u8PreviousOperation = 0U;
0004fc  e3a00000          MOV      r0,#0
000500  e59f1a1c          LDR      r1,|L1.3876|
000504  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4941   
;;;4942       stMem.u32DstAddr      = pstDstImage->u32Address;
000508  e5950000          LDR      r0,[r5,#0]
00050c  e58d0020          STR      r0,[sp,#0x20]
;;;4943       stMem.u16DstImgWidth  = pstDstImage->u16Width;
000510  e1d500b4          LDRH     r0,[r5,#4]
000514  e1cd02b4          STRH     r0,[sp,#0x24]
;;;4944       stMem.u16DstImgHeight = pstDstImage->u16Height;
000518  e1d500b6          LDRH     r0,[r5,#6]
00051c  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4945   
;;;4946       stLineLocal.stPtStart.u16X = (17U-u32SubResPPos)*pstLine->stPtStart.u16X;
000520  e59f0a00          LDR      r0,|L1.3880|
000524  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000528  e2600011          RSB      r0,r0,#0x11
00052c  e1d410b0          LDRH     r1,[r4,#0]
000530  e0000190          MUL      r0,r0,r1
000534  e6ff0070          UXTH     r0,r0
000538  e1cd00b4          STRH     r0,[sp,#4]
;;;4947       stLineLocal.stPtStart.u16Y = (17U-u32SubResPPos)*pstLine->stPtStart.u16Y;
00053c  e59f09e4          LDR      r0,|L1.3880|
000540  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000544  e2600011          RSB      r0,r0,#0x11
000548  e1d410b2          LDRH     r1,[r4,#2]
00054c  e0000190          MUL      r0,r0,r1
000550  e6ff0070          UXTH     r0,r0
000554  e1cd00b6          STRH     r0,[sp,#6]
;;;4948       stLineLocal.stPtEnd.u16X   = (17U-u32SubResPPos)*pstLine->stPtEnd.u16X;
000558  e59f09c8          LDR      r0,|L1.3880|
00055c  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
000560  e2600011          RSB      r0,r0,#0x11
000564  e1d410b4          LDRH     r1,[r4,#4]
000568  e0000190          MUL      r0,r0,r1
00056c  e6ff0070          UXTH     r0,r0
000570  e1cd00b8          STRH     r0,[sp,#8]
;;;4949       stLineLocal.stPtEnd.u16Y   = (17U-u32SubResPPos)*pstLine->stPtEnd.u16Y;
000574  e59f09ac          LDR      r0,|L1.3880|
000578  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
00057c  e2600011          RSB      r0,r0,#0x11
000580  e1d410b6          LDRH     r1,[r4,#6]
000584  e0000190          MUL      r0,r0,r1
000588  e1cd00ba          STRH     r0,[sp,#0xa]
;;;4950       stLineLocal.eStartCap      = pstLine->eStartCap;
00058c  e5d40008          LDRB     r0,[r4,#8]
000590  e5cd000c          STRB     r0,[sp,#0xc]
;;;4951       stLineLocal.eEndCap        = pstLine->eEndCap;
000594  e5d40009          LDRB     r0,[r4,#9]
000598  e5cd000d          STRB     r0,[sp,#0xd]
;;;4952       stLineLocal.stColor        = pstLine->stColor;
00059c  e284200c          ADD      r2,r4,#0xc
0005a0  e8920007          LDM      r2,{r0-r2}
0005a4  e28d3010          ADD      r3,sp,#0x10
0005a8  e8830007          STM      r3,{r0-r2}
;;;4953       stLineLocal.u16Thickness   = pstLine->u16Thickness;
0005ac  e1d401b8          LDRH     r0,[r4,#0x18]
0005b0  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;4954   
;;;4955       vDrw_DrawLine(&stMem, pstOption, &stLineLocal, pstWriteList);
0005b4  e59f0970          LDR      r0,|L1.3884|
0005b8  e28d2004          ADD      r2,sp,#4
0005bc  e1a01006          MOV      r1,r6
0005c0  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
0005c4  e28d0020          ADD      r0,sp,#0x20
0005c8  ebfffffe          BL       vDrw_DrawLine
;;;4956   }
0005cc  e28dd028          ADD      sp,sp,#0x28
0005d0  e8bd8070          POP      {r4-r6,pc}
;;;4957   
                          ENDP

                  vGfDrawCircleWithEndCaps PROC
;;;358    
;;;359    static void vGfDrawCircleWithEndCaps(gf_image_st *pstDstImage, drw_OpCfg_st *pstOption, gf_circle_st *pstCircle)
0005d4  e92d4070          PUSH     {r4-r6,lr}
;;;360    {
0005d8  e24dd020          SUB      sp,sp,#0x20
0005dc  e1a05000          MOV      r5,r0
0005e0  e1a06001          MOV      r6,r1
0005e4  e1a04002          MOV      r4,r2
;;;361        drw_Line_st stLine;
;;;362        
;;;363        stLine.stPtStart.u16X = pstCircle->stCenter.u16X;
0005e8  e1d400bc          LDRH     r0,[r4,#0xc]
0005ec  e1cd00b4          STRH     r0,[sp,#4]
;;;364        stLine.stPtStart.u16Y = pstCircle->stCenter.u16Y;
0005f0  e1d400be          LDRH     r0,[r4,#0xe]
0005f4  e1cd00b6          STRH     r0,[sp,#6]
;;;365        
;;;366        /* a difference of 1/16 is added to the end X co-ordinate since a line with same start and end
;;;367           points cannot be drawn by draw engine */
;;;368        stLine.stPtEnd.u16X = pstCircle->stCenter.u16X + 1U;
0005f8  e1d400bc          LDRH     r0,[r4,#0xc]
0005fc  e2800001          ADD      r0,r0,#1
000600  e6ff0070          UXTH     r0,r0
000604  e1cd00b8          STRH     r0,[sp,#8]
;;;369        stLine.stPtEnd.u16Y = pstCircle->stCenter.u16Y;
000608  e1d400be          LDRH     r0,[r4,#0xe]
00060c  e1cd00ba          STRH     r0,[sp,#0xa]
;;;370        
;;;371        /* Circular end caps are used on both ends to get the circle */
;;;372        stLine.eStartCap = DRW_CIRCULAR;
000610  e3a00002          MOV      r0,#2
000614  e5cd000c          STRB     r0,[sp,#0xc]
;;;373        stLine.eEndCap   = DRW_CIRCULAR;
000618  e5cd000d          STRB     r0,[sp,#0xd]
;;;374        stLine.stColor   = pstCircle->stColor;
00061c  e8940007          LDM      r4,{r0-r2}
000620  e28d3010          ADD      r3,sp,#0x10
000624  e8830007          STM      r3,{r0-r2}
;;;375        
;;;376        /* Double the radius will give thickness for the line */
;;;377        stLine.u16Thickness = pstCircle->u16Radius * 2U;
000628  e1d401b2          LDRH     r0,[r4,#0x12]
00062c  e30f1fff          MOV      r1,#0xffff
000630  e0010080          AND      r0,r1,r0,LSL #1
000634  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;378        
;;;379        vGfBuffDrawLine(pstDstImage, pstOption, &stLine);
000638  e28d2004          ADD      r2,sp,#4
00063c  e1a01006          MOV      r1,r6
000640  e1a00005          MOV      r0,r5
000644  ebfffffe          BL       vGfBuffDrawLine
;;;380    }
000648  e28dd020          ADD      sp,sp,#0x20
00064c  e8bd8070          POP      {r4-r6,pc}
;;;381    
                          ENDP

                  u32GfGetMinXCoordinate PROC
;;;384    
;;;385    static uint32_t u32GfGetMinXCoordinate(void)
000650  e59f08d8          LDR      r0,|L1.3888|
;;;386    {
;;;387        uint32_t u32Cnt, u32Value;
;;;388        int16_t i16Value;
;;;389        u32Value = au32Coordinate[0][0];
000654  e5903000          LDR      r3,[r0,#0]  ; au32Coordinate
;;;390        i16Value = (int16_t)(au32Coordinate[0][0]);
000658  e1d000b0          LDRH     r0,[r0,#0]  ; au32Coordinate
00065c  e6bf2070          SXTH     r2,r0
;;;391    
;;;392        for (u32Cnt=1U; u32Cnt<4U; u32Cnt++)
000660  e3a01001          MOV      r1,#1
000664  ea000008          B        |L1.1676|
                  |L1.1640|
;;;393        {
;;;394            if ((int16_t)(au32Coordinate[u32Cnt][0])<(i16Value))
000668  e59f08c0          LDR      r0,|L1.3888|
00066c  e7900181          LDR      r0,[r0,r1,LSL #3]
000670  e6bf0070          SXTH     r0,r0
000674  e1500002          CMP      r0,r2
000678  aa000002          BGE      |L1.1672|
;;;395            {
;;;396                i16Value = (int16_t)(au32Coordinate[u32Cnt][0]);
00067c  e59f08ac          LDR      r0,|L1.3888|
000680  e7900181          LDR      r0,[r0,r1,LSL #3]
000684  e6bf2070          SXTH     r2,r0
                  |L1.1672|
000688  e2811001          ADD      r1,r1,#1              ;392
                  |L1.1676|
00068c  e3510004          CMP      r1,#4                 ;392
000690  3afffff4          BCC      |L1.1640|
;;;397            }
;;;398        }
;;;399        /* If negative coordinate  */
;;;400        if(i16Value < 0)
000694  e3520000          CMP      r2,#0
000698  aa000001          BGE      |L1.1700|
;;;401        {
;;;402            u32Value = 1<<4;
00069c  e3a03010          MOV      r3,#0x10
0006a0  ea000000          B        |L1.1704|
                  |L1.1700|
;;;403        }
;;;404        else 
;;;405        {
;;;406            u32Value = (uint32_t)(i16Value);
0006a4  e1a03002          MOV      r3,r2
                  |L1.1704|
;;;407        }
;;;408        return u32Value>>4;
0006a8  e1a00223          LSR      r0,r3,#4
;;;409    }
0006ac  e12fff1e          BX       lr
;;;410    
                          ENDP

                  u32GfGetMinYCoordinate PROC
;;;413    
;;;414    static uint32_t u32GfGetMinYCoordinate(void)
0006b0  e59f0878          LDR      r0,|L1.3888|
;;;415    {
;;;416        uint32_t u32Cnt, u32Value;
;;;417        int16_t i16Value;
;;;418        u32Value = au32Coordinate[0][1];
0006b4  e5903004          LDR      r3,[r0,#4]  ; au32Coordinate
;;;419        i16Value = (int16_t)(au32Coordinate[0][1]);
0006b8  e1d000b4          LDRH     r0,[r0,#4]  ; au32Coordinate
0006bc  e6bf2070          SXTH     r2,r0
;;;420        for (u32Cnt=1U; u32Cnt<4U; u32Cnt++)
0006c0  e3a01001          MOV      r1,#1
0006c4  ea00000a          B        |L1.1780|
                  |L1.1736|
;;;421        {
;;;422            if ((int16_t)(au32Coordinate[u32Cnt][1])<(i16Value))
0006c8  e59f0860          LDR      r0,|L1.3888|
0006cc  e0800181          ADD      r0,r0,r1,LSL #3
0006d0  e1d000b4          LDRH     r0,[r0,#4]
0006d4  e6bf0070          SXTH     r0,r0
0006d8  e1500002          CMP      r0,r2
0006dc  aa000003          BGE      |L1.1776|
;;;423            {
;;;424                i16Value = (int16_t)(au32Coordinate[u32Cnt][1]);
0006e0  e59f0848          LDR      r0,|L1.3888|
0006e4  e0800181          ADD      r0,r0,r1,LSL #3
0006e8  e1d000b4          LDRH     r0,[r0,#4]
0006ec  e6bf2070          SXTH     r2,r0
                  |L1.1776|
0006f0  e2811001          ADD      r1,r1,#1              ;420
                  |L1.1780|
0006f4  e3510004          CMP      r1,#4                 ;420
0006f8  3afffff2          BCC      |L1.1736|
;;;425            }
;;;426        }
;;;427        /* If negative coordinate  */
;;;428         if(i16Value < 0)
0006fc  e3520000          CMP      r2,#0
000700  aa000001          BGE      |L1.1804|
;;;429        {
;;;430            u32Value = 1<<4;
000704  e3a03010          MOV      r3,#0x10
000708  ea000000          B        |L1.1808|
                  |L1.1804|
;;;431        }
;;;432        else 
;;;433        {
;;;434            u32Value = (uint32_t)(i16Value);
00070c  e1a03002          MOV      r3,r2
                  |L1.1808|
;;;435        }
;;;436        return u32Value>>4;
000710  e1a00223          LSR      r0,r3,#4
;;;437    }
000714  e12fff1e          BX       lr
;;;438    
                          ENDP

                  u32GfGetMaxXCoordinate PROC
;;;441    
;;;442    static uint32_t u32GfGetMaxXCoordinate(void)
000718  e59f0810          LDR      r0,|L1.3888|
;;;443    {
;;;444        uint32_t u32Cnt, u32Value;
;;;445        int16_t i16Value;
;;;446        u32Value = au32Coordinate[0][0];
00071c  e5903000          LDR      r3,[r0,#0]  ; au32Coordinate
;;;447        i16Value = (int16_t)(au32Coordinate[0][0]);
000720  e1d000b0          LDRH     r0,[r0,#0]  ; au32Coordinate
000724  e6bf2070          SXTH     r2,r0
;;;448        for (u32Cnt=1U; u32Cnt<4U; u32Cnt++)
000728  e3a01001          MOV      r1,#1
00072c  ea000008          B        |L1.1876|
                  |L1.1840|
;;;449        {
;;;450            if (((int16_t)(au32Coordinate[u32Cnt][0]))>(i16Value))
000730  e59f07f8          LDR      r0,|L1.3888|
000734  e7900181          LDR      r0,[r0,r1,LSL #3]
000738  e6bf0070          SXTH     r0,r0
00073c  e1500002          CMP      r0,r2
000740  da000002          BLE      |L1.1872|
;;;451            {
;;;452                i16Value = (signed short int)(au32Coordinate[u32Cnt][0]);
000744  e59f07e4          LDR      r0,|L1.3888|
000748  e7900181          LDR      r0,[r0,r1,LSL #3]
00074c  e6bf2070          SXTH     r2,r0
                  |L1.1872|
000750  e2811001          ADD      r1,r1,#1              ;448
                  |L1.1876|
000754  e3510004          CMP      r1,#4                 ;448
000758  3afffff4          BCC      |L1.1840|
;;;453            }
;;;454        }
;;;455        
;;;456        /* If negative coordinate  */
;;;457        if(i16Value < 0)
00075c  e3520000          CMP      r2,#0
000760  aa000000          BGE      |L1.1896|
;;;458        {
;;;459            i16Value = (-1)<<4;
000764  e3e0200f          MVN      r2,#0xf
                  |L1.1896|
;;;460        }
;;;461        
;;;462        u32Value = (uint32_t)(i16Value);
000768  e1a03002          MOV      r3,r2
;;;463       
;;;464        return u32Value>>4;
00076c  e1a00223          LSR      r0,r3,#4
;;;465    }
000770  e12fff1e          BX       lr
;;;466    
                          ENDP

                  u32GfGetMaxYCoordinate PROC
;;;469    
;;;470    static uint32_t u32GfGetMaxYCoordinate(void)
000774  e59f07b4          LDR      r0,|L1.3888|
;;;471    {
;;;472        uint32_t u32Cnt, u32Value;
;;;473        int16_t i16Value;
;;;474        u32Value = au32Coordinate[0][1];
000778  e5903004          LDR      r3,[r0,#4]  ; au32Coordinate
;;;475        i16Value = (int16_t)(au32Coordinate[0][1]);
00077c  e1d000b4          LDRH     r0,[r0,#4]  ; au32Coordinate
000780  e6bf2070          SXTH     r2,r0
;;;476        for (u32Cnt=1U; u32Cnt<4U; u32Cnt++)
000784  e3a01001          MOV      r1,#1
000788  ea00000a          B        |L1.1976|
                  |L1.1932|
;;;477        {
;;;478            if (((int16_t)(au32Coordinate[u32Cnt][1]))>(i16Value))
00078c  e59f079c          LDR      r0,|L1.3888|
000790  e0800181          ADD      r0,r0,r1,LSL #3
000794  e1d000b4          LDRH     r0,[r0,#4]
000798  e6bf0070          SXTH     r0,r0
00079c  e1500002          CMP      r0,r2
0007a0  da000003          BLE      |L1.1972|
;;;479            {
;;;480                i16Value = (int16_t)(au32Coordinate[u32Cnt][1]);
0007a4  e59f0784          LDR      r0,|L1.3888|
0007a8  e0800181          ADD      r0,r0,r1,LSL #3
0007ac  e1d000b4          LDRH     r0,[r0,#4]
0007b0  e6bf2070          SXTH     r2,r0
                  |L1.1972|
0007b4  e2811001          ADD      r1,r1,#1              ;476
                  |L1.1976|
0007b8  e3510004          CMP      r1,#4                 ;476
0007bc  3afffff2          BCC      |L1.1932|
;;;481            }
;;;482        }
;;;483        
;;;484        /* If negative coordinate  */
;;;485        if(i16Value < 0)
0007c0  e3520000          CMP      r2,#0
0007c4  aa000000          BGE      |L1.1996|
;;;486        {
;;;487            i16Value = (-1)<<4;
0007c8  e3e0200f          MVN      r2,#0xf
                  |L1.1996|
;;;488        }
;;;489        
;;;490        u32Value = (uint32_t)(i16Value);
0007cc  e1a03002          MOV      r3,r2
;;;491        return u32Value>>4;
0007d0  e1a00223          LSR      r0,r3,#4
;;;492    }
0007d4  e12fff1e          BX       lr
;;;493    
                          ENDP

                  vGfWaitForVSync PROC
;;;496    
;;;497    void vGfWaitForVSync(gdc_ch_e eGDCNumber)
0007d8  e92d4070          PUSH     {r4-r6,lr}
;;;498    {
0007dc  e1a04000          MOV      r4,r0
;;;499    #ifdef MEASURE_TX
;;;500        uint32_t u32Measure;
;;;501    
;;;502        u32Measure = TIMER_GET();
0007e0  ebfffffe          BL       u32CR4_ReadCCNT
0007e4  e1a05000          MOV      r5,r0
;;;503    #endif
;;;504    
;;;505        if (0U == biGetGDCDCR_PVSYNC(eGDCNumber))
0007e8  e59f0744          LDR      r0,|L1.3892|
0007ec  e0800184          ADD      r0,r0,r4,LSL #3
0007f0  e1c000d0          LDRD     r0,r1,[r0,#0]
0007f4  e7e00150          UBFX     r0,r0,#2,#1
0007f8  e3500000          CMP      r0,#0
0007fc  1a000005          BNE      |L1.2072|
;;;506        {
;;;507            while(1U == u32GDC_GetStatVSync(eGDCNumber)){}
000800  e320f000          NOP      
                  |L1.2052|
000804  e1a00004          MOV      r0,r4
000808  ebfffffe          BL       u32GDC_GetStatVSync
00080c  e3500001          CMP      r0,#1
000810  0afffffb          BEQ      |L1.2052|
000814  ea000004          B        |L1.2092|
                  |L1.2072|
;;;508        }
;;;509        else
;;;510        {
;;;511            while(0U == u32GDC_GetStatVSync(eGDCNumber)){}
000818  e320f000          NOP      
                  |L1.2076|
00081c  e1a00004          MOV      r0,r4
000820  ebfffffe          BL       u32GDC_GetStatVSync
000824  e3500000          CMP      r0,#0
000828  0afffffb          BEQ      |L1.2076|
                  |L1.2092|
;;;512        }
;;;513    
;;;514    #ifdef MEASURE_TX
;;;515        u32Measure = TIMER_GET() - u32Measure;
00082c  ebfffffe          BL       u32CR4_ReadCCNT
000830  e0405005          SUB      r5,r0,r5
;;;516        u32TimeMeasure = u32TimeMeasure + u32Measure;
000834  e59f06fc          LDR      r0,|L1.3896|
000838  e5900000          LDR      r0,[r0,#0]  ; u32TimeMeasure
00083c  e0800005          ADD      r0,r0,r5
000840  e59f16f0          LDR      r1,|L1.3896|
000844  e5810000          STR      r0,[r1,#0]  ; u32TimeMeasure
;;;517    #endif
;;;518    }
000848  e8bd8070          POP      {r4-r6,pc}
;;;519    
                          ENDP

                  u32GfGetVSyncStatus PROC
;;;522    
;;;523    uint32_t u32GfGetVSyncStatus(gdc_ch_e eGDCNumber)
00084c  e92d4070          PUSH     {r4-r6,lr}
;;;524    {
000850  e1a04000          MOV      r4,r0
;;;525        uint32_t u32Status;
;;;526    
;;;527        u32Status = u32GDC_GetStatVSync(eGDCNumber);
000854  e1a00004          MOV      r0,r4
000858  ebfffffe          BL       u32GDC_GetStatVSync
00085c  e1a05000          MOV      r5,r0
;;;528    
;;;529        return u32Status;
000860  e1a00005          MOV      r0,r5
;;;530    }
000864  e8bd8070          POP      {r4-r6,pc}
;;;531    
                          ENDP

                  eGfGetGAStatus PROC
;;;534    
;;;535    gf_ga_status_e eGfGetGAStatus(void)
000868  e92d4010          PUSH     {r4,lr}
;;;536    {
;;;537        gf_ga_status_e eGAStatus;
;;;538    
;;;539        if ((u8GA_GetStatus() & 8U) == 0U)
00086c  ebfffffe          BL       u8GA_GetStatus
000870  e2000008          AND      r0,r0,#8
000874  e3500000          CMP      r0,#0
000878  1a000001          BNE      |L1.2180|
;;;540        {
;;;541            eGAStatus = GA_BUSY;
00087c  e3a04000          MOV      r4,#0
000880  ea000000          B        |L1.2184|
                  |L1.2180|
;;;542        }
;;;543        else
;;;544        {
;;;545            eGAStatus = GA_IDLE;
000884  e3a04001          MOV      r4,#1
                  |L1.2184|
;;;546        }
;;;547    
;;;548        return eGAStatus;
000888  e1a00004          MOV      r0,r4
;;;549    }
00088c  e8bd8010          POP      {r4,pc}
;;;550    
                          ENDP

                  vGfWaitForGA PROC
;;;553    
;;;554    void vGfWaitForGA(void)
000890  e92d4010          PUSH     {r4,lr}
;;;555    {
;;;556    #ifdef MEASURE_TX
;;;557        uint32_t u32Measure;
;;;558    
;;;559        u32Measure = TIMER_GET();
000894  ebfffffe          BL       u32CR4_ReadCCNT
000898  e1a04000          MOV      r4,r0
;;;560    #endif
;;;561    
;;;562        while((u8GA_GetStatus() & 8U) == 0U){}
00089c  e320f000          NOP      
                  |L1.2208|
0008a0  ebfffffe          BL       u8GA_GetStatus
0008a4  e2000008          AND      r0,r0,#8
0008a8  e3500000          CMP      r0,#0
0008ac  0afffffb          BEQ      |L1.2208|
;;;563    
;;;564    #ifdef MEASURE_TX
;;;565        u32Measure = TIMER_GET() - u32Measure;
0008b0  ebfffffe          BL       u32CR4_ReadCCNT
0008b4  e0404004          SUB      r4,r0,r4
;;;566        u32TimeMeasure = u32TimeMeasure + u32Measure;
0008b8  e59f0678          LDR      r0,|L1.3896|
0008bc  e5900000          LDR      r0,[r0,#0]  ; u32TimeMeasure
0008c0  e0800004          ADD      r0,r0,r4
0008c4  e59f166c          LDR      r1,|L1.3896|
0008c8  e5810000          STR      r0,[r1,#0]  ; u32TimeMeasure
;;;567        u32TimeMeasureGA = u32TimeMeasureGA + u32Measure;
0008cc  e59f0668          LDR      r0,|L1.3900|
0008d0  e5900000          LDR      r0,[r0,#0]  ; u32TimeMeasureGA
0008d4  e0800004          ADD      r0,r0,r4
0008d8  e59f165c          LDR      r1,|L1.3900|
0008dc  e5810000          STR      r0,[r1,#0]  ; u32TimeMeasureGA
;;;568    #endif
;;;569    }
0008e0  e8bd8010          POP      {r4,pc}
;;;570    
                          ENDP

                  vGfWaitForPNGDecode PROC
;;;573    
;;;574    void vGfWaitForPNGDecode(png_stream_e eStream)
0008e4  e92d4070          PUSH     {r4-r6,lr}
;;;575    {
0008e8  e1a05000          MOV      r5,r0
;;;576    #ifdef MEASURE_TX
;;;577        uint32_t u32Measure;
;;;578    
;;;579        u32Measure = TIMER_GET();
0008ec  ebfffffe          BL       u32CR4_ReadCCNT
0008f0  e1a04000          MOV      r4,r0
;;;580    #endif
;;;581    
;;;582        while (ePNG_GetStreamPhaseStatus(eStream) == PNG_DECODE_PHASE){}
0008f4  e320f000          NOP      
                  |L1.2296|
0008f8  e1a00005          MOV      r0,r5
0008fc  ebfffffe          BL       ePNG_GetStreamPhaseStatus
000900  e3500001          CMP      r0,#1
000904  0afffffb          BEQ      |L1.2296|
;;;583    
;;;584    #ifdef MEASURE_TX
;;;585        u32Measure = TIMER_GET() - u32Measure;
000908  ebfffffe          BL       u32CR4_ReadCCNT
00090c  e0404004          SUB      r4,r0,r4
;;;586        u32TimeMeasure = u32TimeMeasure + u32Measure;
000910  e59f0620          LDR      r0,|L1.3896|
000914  e5900000          LDR      r0,[r0,#0]  ; u32TimeMeasure
000918  e0800004          ADD      r0,r0,r4
00091c  e59f1614          LDR      r1,|L1.3896|
000920  e5810000          STR      r0,[r1,#0]  ; u32TimeMeasure
;;;587        u32TimeMeasureGA = u32TimeMeasureGA + u32Measure;
000924  e59f0610          LDR      r0,|L1.3900|
000928  e5900000          LDR      r0,[r0,#0]  ; u32TimeMeasureGA
00092c  e0800004          ADD      r0,r0,r4
000930  e59f1604          LDR      r1,|L1.3900|
000934  e5810000          STR      r0,[r1,#0]  ; u32TimeMeasureGA
;;;588    #endif
;;;589    }
000938  e8bd8070          POP      {r4-r6,pc}
;;;590    
                          ENDP

                  vGfInitMWStateVariable PROC
;;;593    
;;;594    void vGfInitMWStateVariable(void)
00093c  e3a00000          MOV      r0,#0
;;;595    {
;;;596        stGastate.eRedChPrtEn       = GA_DIS;              /* RED channel Protection enable */
000940  e59f15f8          LDR      r1,|L1.3904|
000944  e5c10000          STRB     r0,[r1,#0]  ; stGastate
;;;597        stGastate.eGreenChPrtEn     = GA_DIS;              /* GREEN channel Protection enable */
000948  e5c10001          STRB     r0,[r1,#1]  ; stGastate
;;;598        stGastate.eBlueChPrtEn      = GA_DIS;              /* BLUE channel Protection enable */
00094c  e5c10002          STRB     r0,[r1,#2]  ; stGastate
;;;599        stGastate.eAlphaChPrtEn     = GA_DIS;              /* ALPHA channel Protection enable */
000950  e5c10003          STRB     r0,[r1,#3]  ; stGastate
;;;600    
;;;601        stGastate.eSrcRedFad        = GA_DIS;              /* RED channel Fading enable */
000954  e5c10004          STRB     r0,[r1,#4]  ; stGastate
;;;602        stGastate.eSrcGreenFad      = GA_DIS;              /* GREEN channel Fading enable */
000958  e5c10005          STRB     r0,[r1,#5]  ; stGastate
;;;603        stGastate.eSrcBlueFad       = GA_DIS;              /* BLUE channel Fading enable */
00095c  e5c10006          STRB     r0,[r1,#6]  ; stGastate
;;;604        stGastate.eSrcAlphaFad      = GA_DIS;              /* ALPHA channel Fading enable */
000960  e5c10007          STRB     r0,[r1,#7]  ; stGastate
;;;605    
;;;606        stGastate.eFilterEn         = GA_EN;               /* Filter enable */
000964  e3a00001          MOV      r0,#1
000968  e5c10008          STRB     r0,[r1,#8]  ; stGastate
;;;607    
;;;608        stGastate.eBlndOrder        = GA_ONTO_DEST;        /* Blending Order */
00096c  e3a00000          MOV      r0,#0
000970  e5c10009          STRB     r0,[r1,#9]  ; stGastate
;;;609    
;;;610        stGastate.eFadeMode         = BLT_NOFADING;        /* Fading Option */
000974  e5c1000a          STRB     r0,[r1,#0xa]  ; stGastate
;;;611        stGastate.u8FadingFctr      = 0xFFU;               /* Fading factor */
000978  e3a000ff          MOV      r0,#0xff
00097c  e5c1000b          STRB     r0,[r1,#0xb]  ; stGastate
;;;612    
;;;613        stGastate.eTranspColEn      = GA_DIS;              /* Transp. Col. Opt. (only 16-bit src) */
000980  e3a00000          MOV      r0,#0
000984  e5c1000c          STRB     r0,[r1,#0xc]  ; stGastate
;;;614        stGastate.u32SrcTransVal    = 0xFFU;               /* Src. Transpar. Pattern (STPR reg.) */
000988  e3a000ff          MOV      r0,#0xff
00098c  e5810010          STR      r0,[r1,#0x10]  ; stGastate
;;;615        stGastate.u16DstTransVal    = 0xFFU;               /* Dest. Transp. Pattern (DTR reg.) */
000990  e1c101b4          STRH     r0,[r1,#0x14]  ; stGastate
;;;616    
;;;617        stGastate.u8SrcAlphaVal     = 0xFFU;               /* Source Alpha Value */
000994  e5c10016          STRB     r0,[r1,#0x16]  ; stGastate
;;;618        stGastate.u8DstAlphaVal     = 0xFFU;               /* Destination Alpha Value */
000998  e5c10017          STRB     r0,[r1,#0x17]  ; stGastate
;;;619    
;;;620        stGastate.eTsfMode          = TSF_MODE_PIXEL;      /* Transform. Mode (Pixel-/Color-Mode) */
00099c  e3a00000          MOV      r0,#0
0009a0  e5c10018          STRB     r0,[r1,#0x18]  ; stGastate
;;;621        stGastate.u32TsfPredefColor = 0x00000000U;         /* Predefined color for transformation */
0009a4  e581001c          STR      r0,[r1,#0x1c]  ; stGastate
;;;622    
;;;623        stGastate.eRastOpEn         = GA_DIS;              /* Enabling the Raster Operation */
0009a8  e5c10020          STRB     r0,[r1,#0x20]  ; stGastate
;;;624        stGastate.eRastOpMode       = BLT_RGBA_CH;         /* Raster Operation Mode */
0009ac  e5c10021          STRB     r0,[r1,#0x21]  ; stGastate
;;;625        stGastate.eRastOpValue      = BLT_RAST_S_AND_D;    /* Raster Operation Value */
0009b0  e3a00008          MOV      r0,#8
0009b4  e5c10022          STRB     r0,[r1,#0x22]  ; stGastate
;;;626    
;;;627        stGastate.eClipWndEn        = GA_DIS;              /* Clip window enable */
0009b8  e3a00000          MOV      r0,#0
0009bc  e5c10023          STRB     r0,[r1,#0x23]  ; stGastate
;;;628        stGastate.u16ClipC1_X       = 0U;                  /* point C1 x-position */
0009c0  e1c102b4          STRH     r0,[r1,#0x24]  ; stGastate
;;;629        stGastate.u16ClipC1_Y       = 0U;                  /* point C1 y-position */
0009c4  e1c102b6          STRH     r0,[r1,#0x26]  ; stGastate
;;;630        stGastate.u16ClipC2_X       = 1U;                  /* point C2 x-position */
0009c8  e3a00001          MOV      r0,#1
0009cc  e1c102b8          STRH     r0,[r1,#0x28]  ; stGastate
;;;631        stGastate.u16ClipC2_Y       = 1U;                  /* point C2 y-position */
0009d0  e1c102ba          STRH     r0,[r1,#0x2a]  ; stGastate
;;;632    
;;;633        u32NeedleNumber             = 0U;                  /* needle to be rotated */
0009d4  e3a00000          MOV      r0,#0
0009d8  e59f1564          LDR      r1,|L1.3908|
0009dc  e5810000          STR      r0,[r1,#0]  ; u32NeedleNumber
;;;634    }
0009e0  e12fff1e          BX       lr
;;;635    
                          ENDP

                  vGfSetNeedleNumber PROC
;;;638    
;;;639    void vGfSetNeedleNumber(uint32_t u32Number)
0009e4  e3500003          CMP      r0,#3
;;;640    {
;;;641        if (u32Number > 3U)
0009e8  9a000000          BLS      |L1.2544|
;;;642        {
;;;643            u32Number = 3U;
0009ec  e3a00003          MOV      r0,#3
                  |L1.2544|
;;;644        }
;;;645    
;;;646        u32NeedleNumber = 5U * u32Number;
0009f0  e0801100          ADD      r1,r0,r0,LSL #2
0009f4  e59f2548          LDR      r2,|L1.3908|
0009f8  e5821000          STR      r1,[r2,#0]  ; u32NeedleNumber
;;;647    }
0009fc  e12fff1e          BX       lr
;;;648    
                          ENDP

                  u32GfGetNeedleNumber PROC
;;;651    
;;;652    uint32_t u32GfGetNeedleNumber(void)
000a00  e92d4010          PUSH     {r4,lr}
;;;653    {
;;;654        return u32NeedleNumber / 5U;
000a04  e3a01005          MOV      r1,#5
000a08  e59f0534          LDR      r0,|L1.3908|
000a0c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
000a10  ebfffffe          BL       __aeabi_uidiv
;;;655    }
000a14  e8bd8010          POP      {r4,pc}
;;;656    
                          ENDP

                  vGfSetPaletteStream PROC
;;;659    
;;;660    void vGfSetPaletteStream(void)
000a18  e3a00001          MOV      r0,#1
;;;661    {
;;;662        u8PNG_PaletteStream6 = 1U;
000a1c  e59f1524          LDR      r1,|L1.3912|
000a20  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream6
;;;663        u8PNG_PaletteStream7 = 1U;
000a24  e59f1520          LDR      r1,|L1.3916|
000a28  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream7
;;;664    }
000a2c  e12fff1e          BX       lr
;;;665    
                          ENDP

                  vGfSetStateRedChanProtect PROC
;;;668    
;;;669    void vGfSetStateRedChanProtect(ga_en_e eEnable)
000a30  e3a01000          MOV      r1,#0
;;;670    {
;;;671        stGastate.eRedChPrtEn   = GA_DIS;
000a34  e59f2504          LDR      r2,|L1.3904|
000a38  e5c21000          STRB     r1,[r2,#0]  ; stGastate
;;;672        stGastate.eGreenChPrtEn = eEnable;
000a3c  e2821000          ADD      r1,r2,#0
000a40  e5c10001          STRB     r0,[r1,#1]  ; stGastate
;;;673        stGastate.eBlueChPrtEn  = eEnable;
000a44  e5c10002          STRB     r0,[r1,#2]  ; stGastate
;;;674    }
000a48  e12fff1e          BX       lr
;;;675    
                          ENDP

                  vGfSetStateGreenChanProtect PROC
;;;678    
;;;679    void vGfSetStateGreenChanProtect(ga_en_e eEnable)
000a4c  e59f14ec          LDR      r1,|L1.3904|
;;;680    {
;;;681        stGastate.eRedChPrtEn   = eEnable;
000a50  e5c10000          STRB     r0,[r1,#0]  ; stGastate
;;;682        stGastate.eGreenChPrtEn = GA_DIS;
000a54  e3a01000          MOV      r1,#0
000a58  e59f24e0          LDR      r2,|L1.3904|
000a5c  e5c21001          STRB     r1,[r2,#1]  ; stGastate
;;;683        stGastate.eBlueChPrtEn  = eEnable;
000a60  e2821000          ADD      r1,r2,#0
000a64  e5c10002          STRB     r0,[r1,#2]  ; stGastate
;;;684    }
000a68  e12fff1e          BX       lr
;;;685    
                          ENDP

                  vGfSetStateBlueChanProtect PROC
;;;688    
;;;689    void vGfSetStateBlueChanProtect(ga_en_e eEnable)
000a6c  e59f14cc          LDR      r1,|L1.3904|
;;;690    {
;;;691        stGastate.eRedChPrtEn   = eEnable;
000a70  e5c10000          STRB     r0,[r1,#0]  ; stGastate
;;;692        stGastate.eGreenChPrtEn = eEnable;
000a74  e5c10001          STRB     r0,[r1,#1]  ; stGastate
;;;693        stGastate.eBlueChPrtEn  = GA_DIS;
000a78  e3a01000          MOV      r1,#0
000a7c  e59f24bc          LDR      r2,|L1.3904|
000a80  e5c21002          STRB     r1,[r2,#2]  ; stGastate
;;;694    }
000a84  e12fff1e          BX       lr
;;;695    
                          ENDP

                  vGfSetStateColorChanProtect PROC
;;;698    
;;;699    void vGfSetStateColorChanProtect(gf_colorprt_st stColorPrt)
000a88  e92d4001          PUSH     {r0,lr}
;;;700    {
;;;701        stGastate.eRedChPrtEn   = stColorPrt.eRedChPrtEn;
000a8c  e5dd0000          LDRB     r0,[sp,#0]
000a90  e59f14a8          LDR      r1,|L1.3904|
000a94  e5c10000          STRB     r0,[r1,#0]  ; stGastate
;;;702        stGastate.eGreenChPrtEn = stColorPrt.eGreenChPrtEn;
000a98  e5dd0001          LDRB     r0,[sp,#1]
000a9c  e5c10001          STRB     r0,[r1,#1]  ; stGastate
;;;703        stGastate.eBlueChPrtEn  = stColorPrt.eBlueChPrtEn;
000aa0  e5dd0002          LDRB     r0,[sp,#2]
000aa4  e5c10002          STRB     r0,[r1,#2]  ; stGastate
;;;704    }
000aa8  e8bd8008          POP      {r3,pc}
;;;705    
                          ENDP

                  stGfGetStateColorChanProtect PROC
;;;708    
;;;709    gf_colorprt_st stGfGetStateColorChanProtect(void)
000aac  e92d4008          PUSH     {r3,lr}
;;;710    {
;;;711        gf_colorprt_st stColorPrt;
;;;712    
;;;713        stColorPrt.eRedChPrtEn   = stGastate.eRedChPrtEn;
000ab0  e59f0488          LDR      r0,|L1.3904|
000ab4  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
000ab8  e5cd0000          STRB     r0,[sp,#0]
;;;714        stColorPrt.eGreenChPrtEn = stGastate.eGreenChPrtEn;
000abc  e59f047c          LDR      r0,|L1.3904|
000ac0  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
000ac4  e5cd0001          STRB     r0,[sp,#1]
;;;715        stColorPrt.eBlueChPrtEn  = stGastate.eBlueChPrtEn;
000ac8  e59f0470          LDR      r0,|L1.3904|
000acc  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
000ad0  e5cd0002          STRB     r0,[sp,#2]
;;;716    
;;;717        return stColorPrt;
000ad4  e1dd10b0          LDRH     r1,[sp,#0]
000ad8  e1a00001          MOV      r0,r1
000adc  e5dd1002          LDRB     r1,[sp,#2]
000ae0  e1800801          ORR      r0,r0,r1,LSL #16
;;;718    }
000ae4  e8bd8008          POP      {r3,pc}
;;;719    
                          ENDP

                  vGfSetStateAlphaChanProtect PROC
;;;722    
;;;723    void vGfSetStateAlphaChanProtect(ga_en_e eEnable)
000ae8  e59f1450          LDR      r1,|L1.3904|
;;;724    {
;;;725        stGastate.eAlphaChPrtEn = eEnable;
000aec  e5c10003          STRB     r0,[r1,#3]  ; stGastate
;;;726    }
000af0  e12fff1e          BX       lr
;;;727    
                          ENDP

                  eGfGetStateAlphaChanProtect PROC
;;;730    
;;;731    ga_en_e eGfGetStateAlphaChanProtect(void)
000af4  e59f0444          LDR      r0,|L1.3904|
;;;732    {
;;;733        return stGastate.eAlphaChPrtEn;
000af8  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
;;;734    }
000afc  e12fff1e          BX       lr
;;;735    
                          ENDP

                  eGfSetStateRedChanFading PROC
;;;738    
;;;739    void eGfSetStateRedChanFading(ga_en_e eEnable)
000b00  e59f1438          LDR      r1,|L1.3904|
;;;740    {
;;;741        stGastate.eSrcRedFad = eEnable;
000b04  e5c10004          STRB     r0,[r1,#4]  ; stGastate
;;;742    }
000b08  e12fff1e          BX       lr
;;;743    
                          ENDP

                  eGfGetStateRedChanFading PROC
;;;746    
;;;747    ga_en_e eGfGetStateRedChanFading(void)
000b0c  e59f042c          LDR      r0,|L1.3904|
;;;748    {
;;;749        return stGastate.eSrcRedFad;
000b10  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
;;;750    }
000b14  e12fff1e          BX       lr
;;;751    
                          ENDP

                  eGfSetStateGreenChanFading PROC
;;;754    
;;;755    void eGfSetStateGreenChanFading(ga_en_e eEnable)
000b18  e59f1420          LDR      r1,|L1.3904|
;;;756    {
;;;757        stGastate.eSrcGreenFad = eEnable;
000b1c  e5c10005          STRB     r0,[r1,#5]  ; stGastate
;;;758    }
000b20  e12fff1e          BX       lr
;;;759    
                          ENDP

                  eGfGetStateGreenChanFading PROC
;;;762    
;;;763    ga_en_e eGfGetStateGreenChanFading(void)
000b24  e59f0414          LDR      r0,|L1.3904|
;;;764    {
;;;765        return stGastate.eSrcGreenFad;
000b28  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
;;;766    }
000b2c  e12fff1e          BX       lr
;;;767    
                          ENDP

                  eGfSetStateBlueChanFading PROC
;;;770    
;;;771    void eGfSetStateBlueChanFading(ga_en_e eEnable)
000b30  e59f1408          LDR      r1,|L1.3904|
;;;772    {
;;;773        stGastate.eSrcBlueFad = eEnable;
000b34  e5c10006          STRB     r0,[r1,#6]  ; stGastate
;;;774    }
000b38  e12fff1e          BX       lr
;;;775    
                          ENDP

                  eGfGetStateBlueChanFading PROC
;;;778    
;;;779    ga_en_e eGfGetStateBlueChanFading(void)
000b3c  e59f03fc          LDR      r0,|L1.3904|
;;;780    {
;;;781        return stGastate.eSrcBlueFad;
000b40  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
;;;782    }
000b44  e12fff1e          BX       lr
;;;783    
                          ENDP

                  eGfSetStateAlphaChanFading PROC
;;;786    
;;;787    void eGfSetStateAlphaChanFading(ga_en_e eEnable)
000b48  e59f13f0          LDR      r1,|L1.3904|
;;;788    {
;;;789        stGastate.eSrcAlphaFad = eEnable;
000b4c  e5c10007          STRB     r0,[r1,#7]  ; stGastate
;;;790    }
000b50  e12fff1e          BX       lr
;;;791    
                          ENDP

                  eGfGetStateAlphaChanFading PROC
;;;794    
;;;795    ga_en_e eGfGetStateAlphaChanFading(void)
000b54  e59f03e4          LDR      r0,|L1.3904|
;;;796    {
;;;797        return stGastate.eSrcAlphaFad;
000b58  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
;;;798    }
000b5c  e12fff1e          BX       lr
;;;799    
                          ENDP

                  vGfSetStateFilter PROC
;;;802    
;;;803    void vGfSetStateFilter(ga_en_e eEnable)
000b60  e59f13d8          LDR      r1,|L1.3904|
;;;804    {
;;;805        stGastate.eFilterEn = eEnable;
000b64  e5c10008          STRB     r0,[r1,#8]  ; stGastate
;;;806    }
000b68  e12fff1e          BX       lr
;;;807    
                          ENDP

                  eGfGetStateFilter PROC
;;;810    
;;;811    ga_en_e eGfGetStateFilter(void)
000b6c  e59f03cc          LDR      r0,|L1.3904|
;;;812    {
;;;813        return stGastate.eFilterEn;
000b70  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
;;;814    }
000b74  e12fff1e          BX       lr
;;;815    
                          ENDP

                  vGfSetStateBlendOrder PROC
;;;818    
;;;819    void vGfSetStateBlendOrder(ga_blendOrd_e eBlendOrder)
000b78  e59f13c0          LDR      r1,|L1.3904|
;;;820    {
;;;821        stGastate.eBlndOrder = eBlendOrder;
000b7c  e5c10009          STRB     r0,[r1,#9]  ; stGastate
;;;822    }
000b80  e12fff1e          BX       lr
;;;823    
                          ENDP

                  eGfGetStateBlendOrder PROC
;;;826    
;;;827    ga_blendOrd_e eGfGetStateBlendOrder(void)
000b84  e59f03b4          LDR      r0,|L1.3904|
;;;828    {
;;;829        return stGastate.eBlndOrder;
000b88  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
;;;830    }
000b8c  e12fff1e          BX       lr
;;;831    
                          ENDP

                  vGfSetStateFadeMode PROC
;;;834    
;;;835    void vGfSetStateFadeMode(blt_fadeMode_e eFadeMode)
000b90  e59f13a8          LDR      r1,|L1.3904|
;;;836    {
;;;837        stGastate.eFadeMode = eFadeMode;
000b94  e5c1000a          STRB     r0,[r1,#0xa]  ; stGastate
;;;838    }
000b98  e12fff1e          BX       lr
;;;839    
                          ENDP

                  eGfGetStateFadeMode PROC
;;;842    
;;;843    blt_fadeMode_e eGfGetStateFadeMode(void)
000b9c  e59f039c          LDR      r0,|L1.3904|
;;;844    {
;;;845        return stGastate.eFadeMode;
000ba0  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
;;;846    }
000ba4  e12fff1e          BX       lr
;;;847    
                          ENDP

                  vGfSetStateFadingFactor PROC
;;;850    
;;;851    void vGfSetStateFadingFactor(uint8_t u8FadeFactor)
000ba8  e59f1390          LDR      r1,|L1.3904|
;;;852    {
;;;853        stGastate.u8FadingFctr = u8FadeFactor;
000bac  e5c1000b          STRB     r0,[r1,#0xb]  ; stGastate
;;;854    }
000bb0  e12fff1e          BX       lr
;;;855    
                          ENDP

                  u8GfGetStateFadingFactor PROC
;;;858    
;;;859    uint8_t u8GfGetStateFadingFactor(void)
000bb4  e59f0384          LDR      r0,|L1.3904|
;;;860    {
;;;861        return stGastate.u8FadingFctr;
000bb8  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
;;;862    }
000bbc  e12fff1e          BX       lr
;;;863    
                          ENDP

                  vGfSetStateTransparentColor PROC
;;;866    
;;;867    void vGfSetStateTransparentColor(ga_en_e eEnable)
000bc0  e59f1378          LDR      r1,|L1.3904|
;;;868    {
;;;869        stGastate.eTranspColEn = eEnable;
000bc4  e5c1000c          STRB     r0,[r1,#0xc]  ; stGastate
;;;870    }
000bc8  e12fff1e          BX       lr
;;;871    
                          ENDP

                  eGfGetStateTransparentColor PROC
;;;874    
;;;875    ga_en_e eGfGetStateTransparentColor(void)
000bcc  e59f036c          LDR      r0,|L1.3904|
;;;876    {
;;;877        return stGastate.eTranspColEn;
000bd0  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
;;;878    }
000bd4  e12fff1e          BX       lr
;;;879    
                          ENDP

                  vGfSetStateTransparencyValues PROC
;;;882    
;;;883    void vGfSetStateTransparencyValues(gf_transval_st stTransVal)
000bd8  e92d4003          PUSH     {r0,r1,lr}
;;;884    {
;;;885        stGastate.u32SrcTransVal = stTransVal.u32SrcTransVal;
000bdc  e59f135c          LDR      r1,|L1.3904|
000be0  e59d0000          LDR      r0,[sp,#0]
000be4  e5810010          STR      r0,[r1,#0x10]  ; stGastate
;;;886        stGastate.u16DstTransVal = stTransVal.u16DstTransVal;
000be8  e1dd00b4          LDRH     r0,[sp,#4]
000bec  e1c101b4          STRH     r0,[r1,#0x14]  ; stGastate
;;;887    }
000bf0  e8bd800c          POP      {r2,r3,pc}
;;;888    
                          ENDP

                  stGfGetStateTransparencyValues PROC
;;;891    
;;;892    gf_transval_st stGfGetStateTransparencyValues(void)
000bf4  e92d400c          PUSH     {r2,r3,lr}
;;;893    {
;;;894        gf_transval_st stTransVal;
;;;895    
;;;896        stTransVal.u32SrcTransVal = stGastate.u32SrcTransVal;
000bf8  e59f1340          LDR      r1,|L1.3904|
000bfc  e5911010          LDR      r1,[r1,#0x10]  ; stGastate
000c00  e58d1000          STR      r1,[sp,#0]
;;;897        stTransVal.u16DstTransVal = stGastate.u16DstTransVal;
000c04  e59f1334          LDR      r1,|L1.3904|
000c08  e1d111b4          LDRH     r1,[r1,#0x14]  ; stGastate
000c0c  e1cd10b4          STRH     r1,[sp,#4]
;;;898    
;;;899        return stTransVal;
000c10  e89d0006          LDM      sp,{r1,r2}
000c14  e8800006          STM      r0,{r1,r2}
;;;900    }
000c18  e8bd800c          POP      {r2,r3,pc}
;;;901    
                          ENDP

                  vGfSetStateAlphaValues PROC
;;;904    
;;;905    void vGfSetStateAlphaValues(gf_alphaval_st stAlphaVal)
000c1c  e92d4001          PUSH     {r0,lr}
;;;906    {
;;;907        stGastate.u8SrcAlphaVal = stAlphaVal.u8SrcAlphaVal;
000c20  e5dd0000          LDRB     r0,[sp,#0]
000c24  e59f1314          LDR      r1,|L1.3904|
000c28  e5c10016          STRB     r0,[r1,#0x16]  ; stGastate
;;;908        stGastate.u8DstAlphaVal = stAlphaVal.u8DstAlphaVal;
000c2c  e5dd0001          LDRB     r0,[sp,#1]
000c30  e5c10017          STRB     r0,[r1,#0x17]  ; stGastate
;;;909    }
000c34  e8bd8008          POP      {r3,pc}
;;;910    
                          ENDP

                  stGfGetStateAlphaValues PROC
;;;913    
;;;914    gf_alphaval_st stGfGetStateAlphaValues(void)
000c38  e92d4008          PUSH     {r3,lr}
;;;915    {
;;;916        gf_alphaval_st stAlphaVal;
;;;917    
;;;918        stAlphaVal.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
000c3c  e59f02fc          LDR      r0,|L1.3904|
000c40  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
000c44  e5cd0000          STRB     r0,[sp,#0]
;;;919        stAlphaVal.u8DstAlphaVal = stGastate.u8DstAlphaVal;
000c48  e59f02f0          LDR      r0,|L1.3904|
000c4c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
000c50  e5cd0001          STRB     r0,[sp,#1]
;;;920    
;;;921        return stAlphaVal;
000c54  e1dd10b0          LDRH     r1,[sp,#0]
000c58  e1a00001          MOV      r0,r1
;;;922    }
000c5c  e8bd8008          POP      {r3,pc}
;;;923    
                          ENDP

                  vGfSetStateTransformationMode PROC
;;;926    
;;;927    void vGfSetStateTransformationMode(transf_Mode_e eTsfMode)
000c60  e59f12d8          LDR      r1,|L1.3904|
;;;928    {
;;;929        stGastate.eTsfMode = eTsfMode;
000c64  e5c10018          STRB     r0,[r1,#0x18]  ; stGastate
;;;930    }
000c68  e12fff1e          BX       lr
;;;931    
                          ENDP

                  eGfGetStateTransformationMode PROC
;;;934    
;;;935    transf_Mode_e eGfGetStateTransformationMode(void)
000c6c  e59f02cc          LDR      r0,|L1.3904|
;;;936    {
;;;937        return stGastate.eTsfMode;
000c70  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
;;;938    }
000c74  e12fff1e          BX       lr
;;;939    
                          ENDP

                  vGfSetStateTransformationPredefinedColor PROC
;;;942    
;;;943    void vGfSetStateTransformationPredefinedColor(uint32_t u32PredefColor)
000c78  e59f12c0          LDR      r1,|L1.3904|
;;;944    {
;;;945        stGastate.u32TsfPredefColor = u32PredefColor;
000c7c  e581001c          STR      r0,[r1,#0x1c]  ; stGastate
;;;946    }
000c80  e12fff1e          BX       lr
;;;947    
                          ENDP

                  eGfGetStateTransformationPredefinedColor PROC
;;;950    
;;;951    uint32_t eGfGetStateTransformationPredefinedColor(void)
000c84  e59f02b4          LDR      r0,|L1.3904|
;;;952    {
;;;953        return stGastate.u32TsfPredefColor;
000c88  e590001c          LDR      r0,[r0,#0x1c]  ; stGastate
;;;954    }
000c8c  e12fff1e          BX       lr
;;;955    
                          ENDP

                  vGfSetStateRasterOperationModeEnable PROC
;;;958    
;;;959    void vGfSetStateRasterOperationModeEnable(ga_en_e eEnable)
000c90  e59f12a8          LDR      r1,|L1.3904|
;;;960    {
;;;961        stGastate.eRastOpEn = eEnable;
000c94  e5c10020          STRB     r0,[r1,#0x20]  ; stGastate
;;;962    }
000c98  e12fff1e          BX       lr
;;;963    
                          ENDP

                  eGfGetStateRasterOperationModeEnable PROC
;;;966    
;;;967    ga_en_e eGfGetStateRasterOperationModeEnable(void)
000c9c  e59f029c          LDR      r0,|L1.3904|
;;;968    {
;;;969        return stGastate.eRastOpEn;
000ca0  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
;;;970    }
000ca4  e12fff1e          BX       lr
;;;971    
                          ENDP

                  vGfSetStateRasterOperationMode PROC
;;;974    
;;;975    void vGfSetStateRasterOperationMode(blt_rastChSel_e eRastOpMode)
000ca8  e59f1290          LDR      r1,|L1.3904|
;;;976    {
;;;977        stGastate.eRastOpMode = eRastOpMode;
000cac  e5c10021          STRB     r0,[r1,#0x21]  ; stGastate
;;;978    }
000cb0  e12fff1e          BX       lr
;;;979    
                          ENDP

                  eGfGetStateRasterOperationMode PROC
;;;982    
;;;983    blt_rastChSel_e eGfGetStateRasterOperationMode(void)
000cb4  e59f0284          LDR      r0,|L1.3904|
;;;984    {
;;;985        return stGastate.eRastOpMode;
000cb8  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
;;;986    }
000cbc  e12fff1e          BX       lr
;;;987    
                          ENDP

                  vGfSetStateRasterOperationValue PROC
;;;990    
;;;991    void vGfSetStateRasterOperationValue(blt_rastOpVal_e eRastOpValue)
000cc0  e59f1278          LDR      r1,|L1.3904|
;;;992    {
;;;993        stGastate.eRastOpValue = eRastOpValue;
000cc4  e5c10022          STRB     r0,[r1,#0x22]  ; stGastate
;;;994    }
000cc8  e12fff1e          BX       lr
;;;995    
                          ENDP

                  eGfGetStateRasterOperationValue PROC
;;;998    
;;;999    blt_rastOpVal_e eGfGetStateRasterOperationValue(void)
000ccc  e59f026c          LDR      r0,|L1.3904|
;;;1000   {
;;;1001       return stGastate.eRastOpValue;
000cd0  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
;;;1002   }
000cd4  e12fff1e          BX       lr
;;;1003   
                          ENDP

                  vGfSetStateClipWindow PROC
;;;1006   
;;;1007   void vGfSetStateClipWindow(ga_en_e eEnable)
000cd8  e59f1260          LDR      r1,|L1.3904|
;;;1008   {
;;;1009       stGastate.eClipWndEn = eEnable;
000cdc  e5c10023          STRB     r0,[r1,#0x23]  ; stGastate
;;;1010   }
000ce0  e12fff1e          BX       lr
;;;1011   
                          ENDP

                  eGfGetStateClipWindow PROC
;;;1014   
;;;1015   ga_en_e eGfGetStateClipWindow(void)
000ce4  e59f0254          LDR      r0,|L1.3904|
;;;1016   {
;;;1017       return stGastate.eClipWndEn;
000ce8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
;;;1018   }
000cec  e12fff1e          BX       lr
;;;1019   
                          ENDP

                  vGfSetStateClipWindowCoordinates PROC
;;;1022   
;;;1023   void vGfSetStateClipWindowCoordinates(uint16_t u16ClipC1_X, uint16_t u16ClipC1_Y, uint16_t u16ClipC2_X, uint16_t u16ClipC2_Y)
000cf0  e92d4010          PUSH     {r4,lr}
;;;1024   {
;;;1025       stGastate.u16ClipC1_X = u16ClipC1_X;
000cf4  e59f4244          LDR      r4,|L1.3904|
000cf8  e1c402b4          STRH     r0,[r4,#0x24]  ; stGastate
;;;1026       stGastate.u16ClipC1_Y = u16ClipC1_Y;
000cfc  e1c412b6          STRH     r1,[r4,#0x26]  ; stGastate
;;;1027       stGastate.u16ClipC2_X = u16ClipC2_X;
000d00  e1c422b8          STRH     r2,[r4,#0x28]  ; stGastate
;;;1028       stGastate.u16ClipC2_Y = u16ClipC2_Y;
000d04  e1c432ba          STRH     r3,[r4,#0x2a]  ; stGastate
;;;1029   }
000d08  e8bd8010          POP      {r4,pc}
;;;1030   
                          ENDP

                  vGfSetSubRes PROC
;;;1033   
;;;1034   void vGfSetSubRes(gf_subRes_e eResPPos, gf_subRes_e eResCPos)
000d0c  e3500000          CMP      r0,#0
;;;1035   {
;;;1036       if (eResPPos == GA_PIXEL_RES)
000d10  1a000006          BNE      |L1.3376|
;;;1037       {
;;;1038         f32SubResPPos = 16.0;
000d14  e59f2234          LDR      r2,|L1.3920|
000d18  e59f3234          LDR      r3,|L1.3924|
000d1c  e5832000          STR      r2,[r3,#0]  ; f32SubResPPos
;;;1039         u32SubResPPos = 16;
000d20  e3a02010          MOV      r2,#0x10
000d24  e59f31fc          LDR      r3,|L1.3880|
000d28  e5832000          STR      r2,[r3,#0]  ; u32SubResPPos
000d2c  ea000005          B        |L1.3400|
                  |L1.3376|
;;;1040       }
;;;1041       else
;;;1042       {
;;;1043         f32SubResPPos = 1.0;
000d30  e3a025fe          MOV      r2,#0x3f800000
000d34  e59f3218          LDR      r3,|L1.3924|
000d38  e5832000          STR      r2,[r3,#0]  ; f32SubResPPos
;;;1044         u32SubResPPos = 1;
000d3c  e3a02001          MOV      r2,#1
000d40  e59f31e0          LDR      r3,|L1.3880|
000d44  e5832000          STR      r2,[r3,#0]  ; u32SubResPPos
                  |L1.3400|
;;;1045       }
;;;1046   
;;;1047       if (eResCPos == GA_PIXEL_RES)
000d48  e3510000          CMP      r1,#0
000d4c  1a000006          BNE      |L1.3436|
;;;1048       {
;;;1049         f32SubResCPos = 16.0;
000d50  e59f21f8          LDR      r2,|L1.3920|
000d54  e59f31fc          LDR      r3,|L1.3928|
000d58  e5832000          STR      r2,[r3,#0]  ; f32SubResCPos
;;;1050         u32SubResCPos = 16;
000d5c  e3a02010          MOV      r2,#0x10
000d60  e59f31f4          LDR      r3,|L1.3932|
000d64  e5832000          STR      r2,[r3,#0]  ; u32SubResCPos
000d68  ea000005          B        |L1.3460|
                  |L1.3436|
;;;1051       }
;;;1052       else
;;;1053       {
;;;1054         f32SubResCPos = 1.0;
000d6c  e3a025fe          MOV      r2,#0x3f800000
000d70  e59f31e0          LDR      r3,|L1.3928|
000d74  e5832000          STR      r2,[r3,#0]  ; f32SubResCPos
;;;1055         u32SubResCPos = 1;
000d78  e3a02001          MOV      r2,#1
000d7c  e59f31d8          LDR      r3,|L1.3932|
000d80  e5832000          STR      r2,[r3,#0]  ; u32SubResCPos
                  |L1.3460|
;;;1056       }
;;;1057   }
000d84  e12fff1e          BX       lr
;;;1058   
                          ENDP

                  f32GfGetSubRes_Position PROC
;;;1061   
;;;1062   float32_t f32GfGetSubRes_Position(void)
000d88  e59f01c4          LDR      r0,|L1.3924|
;;;1063   {
;;;1064       return f32SubResPPos;
000d8c  e5900000          LDR      r0,[r0,#0]  ; f32SubResPPos
;;;1065   }
000d90  e12fff1e          BX       lr
;;;1066   
                          ENDP

                  u32GfGetSubRes_Position PROC
;;;1069   
;;;1070   uint32_t u32GfGetSubRes_Position(void)
000d94  e59f018c          LDR      r0,|L1.3880|
;;;1071   {
;;;1072       return u32SubResPPos;
000d98  e5900000          LDR      r0,[r0,#0]  ; u32SubResPPos
;;;1073   }
000d9c  e12fff1e          BX       lr
;;;1074   
                          ENDP

                  f32GfGetSubRes_CenterPosition PROC
;;;1077   
;;;1078   float32_t f32GfGetSubRes_CenterPosition(void)
000da0  e59f01b0          LDR      r0,|L1.3928|
;;;1079   {
;;;1080       return f32SubResCPos;
000da4  e5900000          LDR      r0,[r0,#0]  ; f32SubResCPos
;;;1081   }
000da8  e12fff1e          BX       lr
;;;1082   
                          ENDP

                  u32GfGetSubRes_CenterPosition PROC
;;;1085   
;;;1086   uint32_t u32GfGetSubRes_CenterPosition(void)
000dac  e59f01a8          LDR      r0,|L1.3932|
;;;1087   {
;;;1088       return u32SubResCPos;
000db0  e5900000          LDR      r0,[r0,#0]  ; u32SubResCPos
;;;1089   }
000db4  e12fff1e          BX       lr
;;;1090   
                          ENDP

                  eHandleClipWindowBlit PROC
;;;1093   
;;;1094   static ga_en_e eHandleClipWindowBlit(gf_image_st * pstDstImage, uint16_t u16SrcWidth, uint16_t u16SrcHeight, ga_en_e eClipWndEn, int32_t i32PosX, int32_t i32PosY)
000db8  e92d4fff          PUSH     {r0-r11,lr}
;;;1095   {
000dbc  e24dd02c          SUB      sp,sp,#0x2c
000dc0  e1a04000          MOV      r4,r0
000dc4  e59d5060          LDR      r5,[sp,#0x60]
000dc8  e59d6064          LDR      r6,[sp,#0x64]
;;;1096       uint32_t u32ClipStartAddr;
;;;1097       uint16_t u16C1_X, u16C1_Y, u16C2_X, u16C2_Y;
;;;1098       int32_t i32S1X, i32S1Y, i32S2X, i32S2Y;
;;;1099       uint16_t u16UlX, u16UlY, u16LrX, u16LrY;
;;;1100       ga_en_e  eCwEn = GA_DIS;
000dcc  e3a00000          MOV      r0,#0
000dd0  e58d0004          STR      r0,[sp,#4]
;;;1101       uint8_t  u8DstNoOfBytes;
;;;1102   
;;;1103       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
000dd4  e5d4000c          LDRB     r0,[r4,#0xc]
000dd8  e3500004          CMP      r0,#4
000ddc  1a000001          BNE      |L1.3560|
;;;1104       {
;;;1105           u8DstNoOfBytes = 2U;
000de0  e3a09002          MOV      r9,#2
000de4  ea000000          B        |L1.3564|
                  |L1.3560|
;;;1106       }
;;;1107       else
;;;1108       {
;;;1109           u8DstNoOfBytes = 4U;
000de8  e3a09004          MOV      r9,#4
                  |L1.3564|
;;;1110       }
;;;1111   
;;;1112       if(eClipWndEn == GA_EN)
000dec  e59d0038          LDR      r0,[sp,#0x38]
000df0  e3500001          CMP      r0,#1
000df4  1a000009          BNE      |L1.3616|
;;;1113       {
;;;1114           u16C1_X = stGastate.u16ClipC1_X;
000df8  e59f0140          LDR      r0,|L1.3904|
000dfc  e1d0a2b4          LDRH     r10,[r0,#0x24]  ; stGastate
;;;1115           u16C1_Y = stGastate.u16ClipC1_Y;
000e00  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
000e04  e58d0024          STR      r0,[sp,#0x24]
;;;1116           u16C2_X = stGastate.u16ClipC2_X;
000e08  e59f0130          LDR      r0,|L1.3904|
000e0c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
000e10  e58d0020          STR      r0,[sp,#0x20]
;;;1117           u16C2_Y = stGastate.u16ClipC2_Y;
000e14  e59f0124          LDR      r0,|L1.3904|
000e18  e1d0b2ba          LDRH     r11,[r0,#0x2a]  ; stGastate
000e1c  ea000004          B        |L1.3636|
                  |L1.3616|
;;;1118       }
;;;1119       else
;;;1120       {
;;;1121           u16C1_X = 0;
000e20  e3a0a000          MOV      r10,#0
;;;1122           u16C1_Y = 0;
000e24  e3a00000          MOV      r0,#0
000e28  e58d0024          STR      r0,[sp,#0x24]
;;;1123           u16C2_X = 0;
000e2c  e58d0020          STR      r0,[sp,#0x20]
;;;1124           u16C2_Y = 0;
000e30  e3a0b000          MOV      r11,#0
                  |L1.3636|
;;;1125       }
;;;1126       
;;;1127       i32S1X = i32PosX;
000e34  e58d501c          STR      r5,[sp,#0x1c]
;;;1128       i32S1Y = i32PosY;
000e38  e58d6018          STR      r6,[sp,#0x18]
;;;1129       i32S2X = i32PosX + (int32_t)u16SrcWidth;
000e3c  e59d0030          LDR      r0,[sp,#0x30]
000e40  e0800005          ADD      r0,r0,r5
000e44  e58d0014          STR      r0,[sp,#0x14]
;;;1130       i32S2Y = i32PosY + (int32_t)u16SrcHeight;
000e48  e59d0034          LDR      r0,[sp,#0x34]
000e4c  e0800006          ADD      r0,r0,r6
000e50  e58d0010          STR      r0,[sp,#0x10]
;;;1131       
;;;1132       if((eClipWndEn == GA_EN) && (i32PosX >= 0) && (i32PosY >= 0))
000e54  e59d0038          LDR      r0,[sp,#0x38]
000e58  e3500001          CMP      r0,#1
000e5c  1a000042          BNE      |L1.3948|
000e60  e3550000          CMP      r5,#0
000e64  ba000040          BLT      |L1.3948|
000e68  e3560000          CMP      r6,#0
000e6c  ba00003e          BLT      |L1.3948|
;;;1133       {
;;;1134           eCwEn = GA_EN;
000e70  e3a00001          MOV      r0,#1
000e74  e58d0004          STR      r0,[sp,#4]
;;;1135           /* check for overlapping region */
;;;1136           if(((((int32_t)u16C1_X - i32S2X) ^ ((int32_t)u16C2_X  - i32S1X)) & (((int32_t)u16C1_Y - i32S2Y) ^ ((int32_t)u16C2_Y  - i32S1Y))) < 0)
000e78  e59d0014          LDR      r0,[sp,#0x14]
000e7c  e04a2000          SUB      r2,r10,r0
000e80  e59d0020          LDR      r0,[sp,#0x20]
000e84  e59d101c          LDR      r1,[sp,#0x1c]
000e88  e0400001          SUB      r0,r0,r1
000e8c  e0222000          EOR      r2,r2,r0
000e90  e59d0024          LDR      r0,[sp,#0x24]
000e94  e59d1010          LDR      r1,[sp,#0x10]
000e98  e0401001          SUB      r1,r0,r1
000e9c  e59d0018          LDR      r0,[sp,#0x18]
000ea0  e04b0000          SUB      r0,r11,r0
000ea4  e0200001          EOR      r0,r0,r1
000ea8  e0000002          AND      r0,r0,r2
000eac  e3500000          CMP      r0,#0
000eb0  aa00002a          BGE      |L1.3936|
;;;1137           {
;;;1138               /* calculate general start address of clip window */
;;;1139               u32ClipStartAddr = pstDstImage->u32Address + u8DstNoOfBytes*(uint32_t)pstDstImage->u16Width*(uint32_t)u16C1_Y + u8DstNoOfBytes*(uint32_t)u16C1_X;
000eb4  e5941000          LDR      r1,[r4,#0]
000eb8  e1d400b4          LDRH     r0,[r4,#4]
000ebc  e0020990          MUL      r2,r0,r9
000ec0  e59d0024          LDR      r0,[sp,#0x24]
000ec4  e0201092          MLA      r0,r2,r0,r1
000ec8  e0200a99          MLA      r0,r9,r10,r0
000ecc  e58d0028          STR      r0,[sp,#0x28]
;;;1140               vBlit_SetClippWnd(u32ClipStartAddr, u16C2_X-u16C1_X+1U, u16C2_Y-u16C1_Y+1U, pstWriteList);
000ed0  e59d0024          LDR      r0,[sp,#0x24]
000ed4  e04b0000          SUB      r0,r11,r0
000ed8  e2800001          ADD      r0,r0,#1
000edc  e6ff2070          UXTH     r2,r0
000ee0  e59d0020          LDR      r0,[sp,#0x20]
000ee4  e040000a          SUB      r0,r0,r10
000ee8  e2800001          ADD      r0,r0,#1
000eec  e6ff1070          UXTH     r1,r0
000ef0  e59f0034          LDR      r0,|L1.3884|
000ef4  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
000ef8  e59d0028          LDR      r0,[sp,#0x28]
000efc  ebfffffe          BL       vBlit_SetClippWnd
000f00  ea0000f7          B        |L1.4836|
                  |L1.3844|
                          DCD      au8MW_GFUNCTIONS_C_REVISION
                  |L1.3848|
                          DCD      au8MW_GFUNCTIONS_C_TAG
                  |L1.3852|
                          DCD      au8MW_GFUNCTIONS_H_REVISION
                  |L1.3856|
                          DCD      au8MW_GFUNCTIONS_H_TAG
                  |L1.3860|
                          DCD      au8MW_GF_H_REVISION
                  |L1.3864|
                          DCD      au8MW_GF_H_TAG
                  |L1.3868|
                          DCD      au8MW_DEFINITIONS_H_REVISION
                  |L1.3872|
                          DCD      au8MW_DEFINITIONS_H_TAG
                  |L1.3876|
                          DCD      u8PreviousOperation
                  |L1.3880|
                          DCD      u32SubResPPos
                  |L1.3884|
                          DCD      pstWriteList
                  |L1.3888|
                          DCD      au32Coordinate
                  |L1.3892|
                          DCD      u64GDCDCR_REG__Var
                  |L1.3896|
                          DCD      u32TimeMeasure
                  |L1.3900|
                          DCD      u32TimeMeasureGA
                  |L1.3904|
                          DCD      stGastate
                  |L1.3908|
                          DCD      u32NeedleNumber
                  |L1.3912|
                          DCD      u8PNG_PaletteStream6
                  |L1.3916|
                          DCD      u8PNG_PaletteStream7
                  |L1.3920|
                          DCD      0x41800000
                  |L1.3924|
                          DCD      f32SubResPPos
                  |L1.3928|
                          DCD      f32SubResCPos
                  |L1.3932|
                          DCD      u32SubResCPos
                  |L1.3936|
;;;1141           }
;;;1142           else
;;;1143           {
;;;1144               /* no overlapping */
;;;1145               eCwEn = GA_DIS;
000f60  e3a00000          MOV      r0,#0
000f64  e58d0004          STR      r0,[sp,#4]
000f68  ea0000dd          B        |L1.4836|
                  |L1.3948|
;;;1146           }        
;;;1147       }
;;;1148       else if((eClipWndEn == GA_EN) && ((i32PosX < 0) || (i32PosY < 0)))
000f6c  e59d0038          LDR      r0,[sp,#0x38]
000f70  e3500001          CMP      r0,#1
000f74  1a000058          BNE      |L1.4316|
000f78  e3550000          CMP      r5,#0
000f7c  ba000001          BLT      |L1.3976|
000f80  e3560000          CMP      r6,#0
000f84  aa000054          BGE      |L1.4316|
                  |L1.3976|
;;;1149       {
;;;1150           eCwEn = GA_EN;
000f88  e3a00001          MOV      r0,#1
000f8c  e58d0004          STR      r0,[sp,#4]
;;;1151   
;;;1152           /* Condition to check for overlap */
;;;1153           if(((((int32_t)u16C1_X - i32S2X) ^ ((int32_t)u16C2_X  - i32S1X)) & (((int32_t)u16C1_Y - i32S2Y) ^ ( (int32_t)u16C2_Y  - i32S1Y))) < 0)
000f90  e59d0014          LDR      r0,[sp,#0x14]
000f94  e04a2000          SUB      r2,r10,r0
000f98  e59d0020          LDR      r0,[sp,#0x20]
000f9c  e59d101c          LDR      r1,[sp,#0x1c]
000fa0  e0400001          SUB      r0,r0,r1
000fa4  e0222000          EOR      r2,r2,r0
000fa8  e59d0024          LDR      r0,[sp,#0x24]
000fac  e59d1010          LDR      r1,[sp,#0x10]
000fb0  e0401001          SUB      r1,r0,r1
000fb4  e59d0018          LDR      r0,[sp,#0x18]
000fb8  e04b0000          SUB      r0,r11,r0
000fbc  e0200001          EOR      r0,r0,r1
000fc0  e0000002          AND      r0,r0,r2
000fc4  e3500000          CMP      r0,#0
000fc8  aa000040          BGE      |L1.4304|
;;;1154           {
;;;1155           
;;;1156               if (i32PosX <= 0)
000fcc  e3550000          CMP      r5,#0
000fd0  ca00000d          BGT      |L1.4108|
;;;1157               {
;;;1158                   u16UlX = u16C1_X;
000fd4  e1a0700a          MOV      r7,r10
;;;1159                   u16LrX = MIN_FLOAT(u16C2_X, (uint16_t)i32S2X - 1U);
000fd8  e59d0014          LDR      r0,[sp,#0x14]
000fdc  e6ff0070          UXTH     r0,r0
000fe0  e2401001          SUB      r1,r0,#1
000fe4  e59d0020          LDR      r0,[sp,#0x20]
000fe8  e1510000          CMP      r1,r0
000fec  9a000001          BLS      |L1.4088|
000ff0  e59d0020          LDR      r0,[sp,#0x20]
000ff4  ea000001          B        |L1.4096|
                  |L1.4088|
000ff8  e59d0014          LDR      r0,[sp,#0x14]
000ffc  e2400001          SUB      r0,r0,#1
                  |L1.4096|
001000  e6ff0070          UXTH     r0,r0
001004  e58d000c          STR      r0,[sp,#0xc]
001008  ea000007          B        |L1.4140|
                  |L1.4108|
;;;1160               }
;;;1161               else
;;;1162               {
;;;1163                   u16UlX = (uint16_t)(ABS_INT(i32PosX));
00100c  e3550000          CMP      r5,#0
001010  aa000001          BGE      |L1.4124|
001014  e2650000          RSB      r0,r5,#0
001018  ea000000          B        |L1.4128|
                  |L1.4124|
00101c  e1a00005          MOV      r0,r5
                  |L1.4128|
001020  e6ff7070          UXTH     r7,r0
;;;1164                   u16LrX = u16C2_X;
001024  e59d0020          LDR      r0,[sp,#0x20]
001028  e58d000c          STR      r0,[sp,#0xc]
                  |L1.4140|
;;;1165               }
;;;1166   
;;;1167               if (i32PosY <= 0)
00102c  e3560000          CMP      r6,#0
001030  ca00000c          BGT      |L1.4200|
;;;1168               {
;;;1169                   u16UlY = u16C1_Y;
001034  e59d8024          LDR      r8,[sp,#0x24]
;;;1170                   u16LrY = MIN_FLOAT(u16C2_Y, (uint16_t)i32S2Y - 1U);
001038  e59d0010          LDR      r0,[sp,#0x10]
00103c  e6ff0070          UXTH     r0,r0
001040  e2400001          SUB      r0,r0,#1
001044  e150000b          CMP      r0,r11
001048  9a000001          BLS      |L1.4180|
00104c  e1a0000b          MOV      r0,r11
001050  ea000001          B        |L1.4188|
                  |L1.4180|
001054  e59d0010          LDR      r0,[sp,#0x10]
001058  e2400001          SUB      r0,r0,#1
                  |L1.4188|
00105c  e6ff0070          UXTH     r0,r0
001060  e58d0008          STR      r0,[sp,#8]
001064  ea000006          B        |L1.4228|
                  |L1.4200|
;;;1171               }
;;;1172               else
;;;1173               {
;;;1174                   u16UlY = (uint16_t)(ABS_INT(i32PosY));
001068  e3560000          CMP      r6,#0
00106c  aa000001          BGE      |L1.4216|
001070  e2660000          RSB      r0,r6,#0
001074  ea000000          B        |L1.4220|
                  |L1.4216|
001078  e1a00006          MOV      r0,r6
                  |L1.4220|
00107c  e6ff8070          UXTH     r8,r0
;;;1175                   u16LrY = u16C2_Y;
001080  e58db008          STR      r11,[sp,#8]
                  |L1.4228|
;;;1176               }
;;;1177               
;;;1178               /* calculate general start address of clip window */
;;;1179               u32ClipStartAddr = pstDstImage->u32Address + u8DstNoOfBytes*(uint32_t)pstDstImage->u16Width*(uint32_t)u16UlY + u8DstNoOfBytes*(uint32_t)u16UlX;
001084  e5940000          LDR      r0,[r4,#0]
001088  e1d410b4          LDRH     r1,[r4,#4]
00108c  e0010991          MUL      r1,r1,r9
001090  e0200891          MLA      r0,r1,r8,r0
001094  e0200799          MLA      r0,r9,r7,r0
001098  e58d0028          STR      r0,[sp,#0x28]
;;;1180               vBlit_SetClippWnd(u32ClipStartAddr, u16LrX-u16UlX+1U, u16LrY-u16UlY+1U, pstWriteList);
00109c  e59d0008          LDR      r0,[sp,#8]
0010a0  e0400008          SUB      r0,r0,r8
0010a4  e2800001          ADD      r0,r0,#1
0010a8  e6ff2070          UXTH     r2,r0
0010ac  e59d000c          LDR      r0,[sp,#0xc]
0010b0  e0400007          SUB      r0,r0,r7
0010b4  e2800001          ADD      r0,r0,#1
0010b8  e6ff1070          UXTH     r1,r0
0010bc  e51f0198          LDR      r0,|L1.3884|
0010c0  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
0010c4  e59d0028          LDR      r0,[sp,#0x28]
0010c8  ebfffffe          BL       vBlit_SetClippWnd
0010cc  ea000084          B        |L1.4836|
                  |L1.4304|
;;;1181           }
;;;1182           else
;;;1183           {
;;;1184               /* There is no overlap between the clip window and the destination area */
;;;1185               eCwEn = GA_DIS;
0010d0  e3a00000          MOV      r0,#0
0010d4  e58d0004          STR      r0,[sp,#4]
0010d8  ea000081          B        |L1.4836|
                  |L1.4316|
;;;1186           }
;;;1187       }
;;;1188       else
;;;1189       {
;;;1190           /* Check for overlap with the */
;;;1191           if((((- i32S2X) ^ ((int32_t)(pstDstImage->u16Width - 1U)  - i32S1X)) & ((- i32S2Y) ^ ( (int32_t)(pstDstImage->u16Height - 1U)  - i32S1Y))) <= 0)
0010dc  e1d400b4          LDRH     r0,[r4,#4]
0010e0  e2401001          SUB      r1,r0,#1
0010e4  e59d001c          LDR      r0,[sp,#0x1c]
0010e8  e0411000          SUB      r1,r1,r0
0010ec  e59d0014          LDR      r0,[sp,#0x14]
0010f0  e2600000          RSB      r0,r0,#0
0010f4  e0211000          EOR      r1,r1,r0
0010f8  e1d400b6          LDRH     r0,[r4,#6]
0010fc  e2402001          SUB      r2,r0,#1
001100  e59d0018          LDR      r0,[sp,#0x18]
001104  e0422000          SUB      r2,r2,r0
001108  e59d0010          LDR      r0,[sp,#0x10]
00110c  e2600000          RSB      r0,r0,#0
001110  e0200002          EOR      r0,r0,r2
001114  e0000001          AND      r0,r0,r1
001118  e3500000          CMP      r0,#0
00111c  ca00006e          BGT      |L1.4828|
;;;1192           {
;;;1193               /* If clip window is disabled */
;;;1194               eCwEn = GA_EN;
001120  e3a00001          MOV      r0,#1
001124  e58d0004          STR      r0,[sp,#4]
;;;1195               /* Calculate the clip window coordiantes */
;;;1196               if (i32PosX < 0)
001128  e3550000          CMP      r5,#0
00112c  aa00001b          BGE      |L1.4512|
;;;1197               {
;;;1198                   u16UlX = 0;
001130  e3a07000          MOV      r7,#0
;;;1199                   u16LrX = MIN_FLOAT(u16SrcWidth - (uint16_t)(ABS_INT(i32PosX)) - 1U, (pstDstImage->u16Width - 1U));
001134  e3550000          CMP      r5,#0
001138  aa000001          BGE      |L1.4420|
00113c  e2650000          RSB      r0,r5,#0
001140  ea000000          B        |L1.4424|
                  |L1.4420|
001144  e1a00005          MOV      r0,r5
                  |L1.4424|
001148  e6ff1070          UXTH     r1,r0
00114c  e59d0030          LDR      r0,[sp,#0x30]
001150  e0400001          SUB      r0,r0,r1
001154  e2400001          SUB      r0,r0,#1
001158  e1d410b4          LDRH     r1,[r4,#4]
00115c  e2411001          SUB      r1,r1,#1
001160  e1500001          CMP      r0,r1
001164  2a000008          BCS      |L1.4492|
001168  e3550000          CMP      r5,#0
00116c  aa000001          BGE      |L1.4472|
001170  e2650000          RSB      r0,r5,#0
001174  ea000000          B        |L1.4476|
                  |L1.4472|
001178  e1a00005          MOV      r0,r5
                  |L1.4476|
00117c  e59d1030          LDR      r1,[sp,#0x30]
001180  e0410000          SUB      r0,r1,r0
001184  e2400001          SUB      r0,r0,#1
001188  ea000001          B        |L1.4500|
                  |L1.4492|
00118c  e1d400b4          LDRH     r0,[r4,#4]
001190  e2400001          SUB      r0,r0,#1
                  |L1.4500|
001194  e6ff0070          UXTH     r0,r0
001198  e58d000c          STR      r0,[sp,#0xc]
00119c  ea00000e          B        |L1.4572|
                  |L1.4512|
;;;1200               }
;;;1201               else
;;;1202               {
;;;1203                   u16UlX = (uint16_t)(i32PosX);
0011a0  e6ff7075          UXTH     r7,r5
;;;1204                   u16LrX = u16SrcWidth + u16UlX - 1U;
0011a4  e59d0030          LDR      r0,[sp,#0x30]
0011a8  e0800007          ADD      r0,r0,r7
0011ac  e2400001          SUB      r0,r0,#1
0011b0  e6ff0070          UXTH     r0,r0
0011b4  e58d000c          STR      r0,[sp,#0xc]
;;;1205                   if(u16LrX  > (pstDstImage->u16Width - 1U))
0011b8  e1d400b4          LDRH     r0,[r4,#4]
0011bc  e2401001          SUB      r1,r0,#1
0011c0  e59d000c          LDR      r0,[sp,#0xc]
0011c4  e1510000          CMP      r1,r0
0011c8  2a000003          BCS      |L1.4572|
;;;1206                   {
;;;1207                       u16LrX = pstDstImage->u16Width - 1U;
0011cc  e1d400b4          LDRH     r0,[r4,#4]
0011d0  e2400001          SUB      r0,r0,#1
0011d4  e6ff0070          UXTH     r0,r0
0011d8  e58d000c          STR      r0,[sp,#0xc]
                  |L1.4572|
;;;1208                   }
;;;1209               }
;;;1210   
;;;1211               if (i32PosY < 0)
0011dc  e3560000          CMP      r6,#0
0011e0  aa00001b          BGE      |L1.4692|
;;;1212               {
;;;1213                   u16UlY = 0;
0011e4  e3a08000          MOV      r8,#0
;;;1214                   u16LrY = MIN_FLOAT(u16SrcHeight - (uint16_t)(ABS_INT(i32PosY)) - 1U, (pstDstImage->u16Height - 1U) );
0011e8  e3560000          CMP      r6,#0
0011ec  aa000001          BGE      |L1.4600|
0011f0  e2660000          RSB      r0,r6,#0
0011f4  ea000000          B        |L1.4604|
                  |L1.4600|
0011f8  e1a00006          MOV      r0,r6
                  |L1.4604|
0011fc  e6ff1070          UXTH     r1,r0
001200  e59d0034          LDR      r0,[sp,#0x34]
001204  e0400001          SUB      r0,r0,r1
001208  e2400001          SUB      r0,r0,#1
00120c  e1d410b6          LDRH     r1,[r4,#6]
001210  e2411001          SUB      r1,r1,#1
001214  e1500001          CMP      r0,r1
001218  2a000008          BCS      |L1.4672|
00121c  e3560000          CMP      r6,#0
001220  aa000001          BGE      |L1.4652|
001224  e2660000          RSB      r0,r6,#0
001228  ea000000          B        |L1.4656|
                  |L1.4652|
00122c  e1a00006          MOV      r0,r6
                  |L1.4656|
001230  e59d1034          LDR      r1,[sp,#0x34]
001234  e0410000          SUB      r0,r1,r0
001238  e2400001          SUB      r0,r0,#1
00123c  ea000001          B        |L1.4680|
                  |L1.4672|
001240  e1d400b6          LDRH     r0,[r4,#6]
001244  e2400001          SUB      r0,r0,#1
                  |L1.4680|
001248  e6ff0070          UXTH     r0,r0
00124c  e58d0008          STR      r0,[sp,#8]
001250  ea00000e          B        |L1.4752|
                  |L1.4692|
;;;1215               }
;;;1216               else
;;;1217               {
;;;1218                   u16UlY = (uint16_t)(i32PosY);
001254  e6ff8076          UXTH     r8,r6
;;;1219                   u16LrY = u16SrcHeight + u16UlY - 1U;
001258  e59d0034          LDR      r0,[sp,#0x34]
00125c  e0800008          ADD      r0,r0,r8
001260  e2400001          SUB      r0,r0,#1
001264  e6ff0070          UXTH     r0,r0
001268  e58d0008          STR      r0,[sp,#8]
;;;1220                   if( u16LrY > (pstDstImage->u16Height - 1U) )
00126c  e1d400b6          LDRH     r0,[r4,#6]
001270  e2401001          SUB      r1,r0,#1
001274  e59d0008          LDR      r0,[sp,#8]
001278  e1510000          CMP      r1,r0
00127c  2a000003          BCS      |L1.4752|
;;;1221                   {
;;;1222                       u16LrY = pstDstImage->u16Height - 1U;
001280  e1d400b6          LDRH     r0,[r4,#6]
001284  e2400001          SUB      r0,r0,#1
001288  e6ff0070          UXTH     r0,r0
00128c  e58d0008          STR      r0,[sp,#8]
                  |L1.4752|
;;;1223                   }
;;;1224               }
;;;1225               u32ClipStartAddr = pstDstImage->u32Address + u8DstNoOfBytes*(uint32_t)pstDstImage->u16Width*(uint32_t)u16UlY + u8DstNoOfBytes*(uint32_t)u16UlX;
001290  e5940000          LDR      r0,[r4,#0]
001294  e1d410b4          LDRH     r1,[r4,#4]
001298  e0010991          MUL      r1,r1,r9
00129c  e0200891          MLA      r0,r1,r8,r0
0012a0  e0200799          MLA      r0,r9,r7,r0
0012a4  e58d0028          STR      r0,[sp,#0x28]
;;;1226               vBlit_SetClippWnd(u32ClipStartAddr, u16LrX-u16UlX+1U, u16LrY-u16UlY+1U, pstWriteList);
0012a8  e59d0008          LDR      r0,[sp,#8]
0012ac  e0400008          SUB      r0,r0,r8
0012b0  e2800001          ADD      r0,r0,#1
0012b4  e6ff2070          UXTH     r2,r0
0012b8  e59d000c          LDR      r0,[sp,#0xc]
0012bc  e0400007          SUB      r0,r0,r7
0012c0  e2800001          ADD      r0,r0,#1
0012c4  e6ff1070          UXTH     r1,r0
0012c8  e51f03a4          LDR      r0,|L1.3884|
0012cc  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
0012d0  e59d0028          LDR      r0,[sp,#0x28]
0012d4  ebfffffe          BL       vBlit_SetClippWnd
0012d8  ea000001          B        |L1.4836|
                  |L1.4828|
;;;1227           }
;;;1228           else
;;;1229           {
;;;1230               /* Image is outside the destination area. So no need to make a draw call */
;;;1231               eCwEn = GA_DIS;
0012dc  e3a00000          MOV      r0,#0
0012e0  e58d0004          STR      r0,[sp,#4]
                  |L1.4836|
;;;1232           }
;;;1233       }
;;;1234       return eCwEn;
0012e4  e59d0004          LDR      r0,[sp,#4]
0012e8  e28dd03c          ADD      sp,sp,#0x3c
;;;1235   }
0012ec  e8bd8ff0          POP      {r4-r11,pc}
;;;1236   
                          ENDP

                  vGfBuffFillArea PROC
;;;1239   
;;;1240   void vGfBuffFillArea(gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart, uint32_t u32Color)
0012f0  e92d40f0          PUSH     {r4-r7,lr}
;;;1241   {
0012f4  e24dd024          SUB      sp,sp,#0x24
0012f8  e1a05000          MOV      r5,r0
0012fc  e1a04001          MOV      r4,r1
001300  e1a06002          MOV      r6,r2
;;;1242       blit_mem_st      stMem;
;;;1243       blit_OvrRgbP_st  stParam;
;;;1244       ga_en_e eDraw;
;;;1245       u8PreviousOperation = 0U;
001304  e3a00000          MOV      r0,#0
001308  e51f13ec          LDR      r1,|L1.3876|
00130c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1246   
;;;1247       stMem.u16DstWidth = pstDstImage->u16Width;
001310  e1d500b4          LDRH     r0,[r5,#4]
001314  e1cd01b8          STRH     r0,[sp,#0x18]
;;;1248       stMem.u16DotCnt   = pstImgPart->u16Width;
001318  e1d400b4          LDRH     r0,[r4,#4]
00131c  e1cd02b0          STRH     r0,[sp,#0x20]
;;;1249       stMem.u16LineCnt  = pstImgPart->u16Height;
001320  e1d400b6          LDRH     r0,[r4,#6]
001324  e1cd02b2          STRH     r0,[sp,#0x22]
;;;1250   
;;;1251       /* handle clip window */
;;;1252       eDraw = eHandleClipWindowBlit(pstDstImage, pstImgPart->u16Width, pstImgPart->u16Height, stGastate.eClipWndEn, (int32_t)pstImgPart->u16SrcOffsX, (int32_t)pstImgPart->u16SrcOffsY);
001328  e1d400b2          LDRH     r0,[r4,#2]
00132c  e1d410b0          LDRH     r1,[r4,#0]
001330  e58d0004          STR      r0,[sp,#4]
001334  e51f03fc          LDR      r0,|L1.3904|
001338  e58d1000          STR      r1,[sp,#0]
00133c  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
001340  e1d420b6          LDRH     r2,[r4,#6]
001344  e1d410b4          LDRH     r1,[r4,#4]
001348  e1a00005          MOV      r0,r5
00134c  ebfffffe          BL       eHandleClipWindowBlit
001350  e1a07000          MOV      r7,r0
;;;1253   
;;;1254       /* Draw only if there is an overlapping clip window and destination area */
;;;1255       if(eDraw == GA_EN)
001354  e3570001          CMP      r7,#1
001358  1a000026          BNE      |L1.5112|
;;;1256       {
;;;1257           stParam.eClipWndEn = eDraw;
00135c  e5cd700e          STRB     r7,[sp,#0xe]
;;;1258           /* Dest. address calculation */
;;;1259           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
001360  e5d5000c          LDRB     r0,[r5,#0xc]
001364  e3500004          CMP      r0,#4
001368  1a00000b          BNE      |L1.5020|
;;;1260           {
;;;1261               stMem.u32DstAddr = pstDstImage->u32Address + 2U* (uint32_t)pstDstImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 2U*(uint32_t)pstImgPart->u16SrcOffsX;
00136c  e5950000          LDR      r0,[r5,#0]
001370  e1d510b4          LDRH     r1,[r5,#4]
001374  e1a01081          LSL      r1,r1,#1
001378  e1d420b2          LDRH     r2,[r4,#2]
00137c  e0200291          MLA      r0,r1,r2,r0
001380  e1d410b0          LDRH     r1,[r4,#0]
001384  e3a02002          MOV      r2,#2
001388  e0200192          MLA      r0,r2,r1,r0
00138c  e58d001c          STR      r0,[sp,#0x1c]
;;;1262               stParam.eSrcFmt  = GA_RGB16;
001390  e3a00000          MOV      r0,#0
001394  e5cd000c          STRB     r0,[sp,#0xc]
001398  ea00000a          B        |L1.5064|
                  |L1.5020|
;;;1263           }
;;;1264           else
;;;1265           {
;;;1266               stMem.u32DstAddr = pstDstImage->u32Address + 4U* (uint32_t)pstDstImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 4U*(uint32_t)pstImgPart->u16SrcOffsX;
00139c  e5950000          LDR      r0,[r5,#0]
0013a0  e1d510b4          LDRH     r1,[r5,#4]
0013a4  e1a01101          LSL      r1,r1,#2
0013a8  e1d420b2          LDRH     r2,[r4,#2]
0013ac  e0200291          MLA      r0,r1,r2,r0
0013b0  e1d410b0          LDRH     r1,[r4,#0]
0013b4  e3a02004          MOV      r2,#4
0013b8  e0200192          MLA      r0,r2,r1,r0
0013bc  e58d001c          STR      r0,[sp,#0x1c]
;;;1267               stParam.eSrcFmt  = GA_RGBA32;
0013c0  e3a00001          MOV      r0,#1
0013c4  e5cd000c          STRB     r0,[sp,#0xc]
                  |L1.5064|
;;;1268           }
;;;1269   
;;;1270           stParam.eFadeMode    = stGastate.eFadeMode;
0013c8  e51f0490          LDR      r0,|L1.3904|
0013cc  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0013d0  e5cd000d          STRB     r0,[sp,#0xd]
;;;1271           stParam.u8FadingFctr = stGastate.u8FadingFctr;
0013d4  e51f049c          LDR      r0,|L1.3904|
0013d8  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0013dc  e5cd000f          STRB     r0,[sp,#0xf]
;;;1272   
;;;1273           stParam.u32Color     = u32Color;
0013e0  e58d6008          STR      r6,[sp,#8]
;;;1274   
;;;1275           vBlit_OverwriteFillRGB(&stMem, &stParam, pstWriteList);
0013e4  e51f04c0          LDR      r0,|L1.3884|
0013e8  e28d1008          ADD      r1,sp,#8
0013ec  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0013f0  e28d0010          ADD      r0,sp,#0x10
0013f4  ebfffffe          BL       vBlit_OverwriteFillRGB
                  |L1.5112|
;;;1276       }
;;;1277   }
0013f8  e28dd024          ADD      sp,sp,#0x24
0013fc  e8bd80f0          POP      {r4-r7,pc}
;;;1278   
                          ENDP

                  vGfBuffBlitBitmapRLE16 PROC
;;;1582   
;;;1583   void vGfBuffBlitBitmapRLE16(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
001400  e92d41f0          PUSH     {r4-r8,lr}
;;;1584                               int32_t i32PosX, int32_t i32PosY)
;;;1585   {
001404  e24dd030          SUB      sp,sp,#0x30
001408  e1a05000          MOV      r5,r0
00140c  e1a04001          MOV      r4,r1
001410  e1a06002          MOV      r6,r2
001414  e1a07003          MOV      r7,r3
;;;1586       blit_mem_st       stMem;
;;;1587       blit_OvrRlei_st   stParam;
;;;1588       ga_en_e eDraw;
;;;1589       u8PreviousOperation = 0U;
001418  e3a00000          MOV      r0,#0
00141c  e51f1500          LDR      r1,|L1.3876|
001420  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1590   
;;;1591       stMem.u32SrcAddr  = pstSrcImage->u32Address;
001424  e5950000          LDR      r0,[r5,#0]
001428  e58d0020          STR      r0,[sp,#0x20]
;;;1592       stMem.u16SrcWidth = pstSrcImage->u16Width;
00142c  e1d500b4          LDRH     r0,[r5,#4]
001430  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;1593       stMem.u16DstWidth = pstDstImage->u16Width;
001434  e1d400b4          LDRH     r0,[r4,#4]
001438  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1594       stMem.u16DotCnt   = pstSrcImage->u16Width;
00143c  e1d500b4          LDRH     r0,[r5,#4]
001440  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;1595       stMem.u16LineCnt  = pstSrcImage->u16Height;
001444  e1d500b6          LDRH     r0,[r5,#6]
001448  e1cd02be          STRH     r0,[sp,#0x2e]
;;;1596   
;;;1597       /* handle clip window */
;;;1598       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
00144c  e51f0514          LDR      r0,|L1.3904|
001450  e1cd60f0          STRD     r6,r7,[sp,#0]
001454  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
001458  e1d520b6          LDRH     r2,[r5,#6]
00145c  e1d510b4          LDRH     r1,[r5,#4]
001460  e1a00004          MOV      r0,r4
001464  ebfffffe          BL       eHandleClipWindowBlit
001468  e1a08000          MOV      r8,r0
;;;1599       
;;;1600       /* Draw only if there is an overlapping clip window and destination area */
;;;1601       if(eDraw == GA_EN)
00146c  e3580001          CMP      r8,#1
001470  1a000032          BNE      |L1.5440|
;;;1602       {
;;;1603           stParam.eClipWndEn = eDraw;
001474  e5cd8010          STRB     r8,[sp,#0x10]
;;;1604           /* Dest. address calculation */
;;;1605           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
001478  e5d4000c          LDRB     r0,[r4,#0xc]
00147c  e3500004          CMP      r0,#4
001480  1a000009          BNE      |L1.5292|
;;;1606           {
;;;1607               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX; 
001484  e5940000          LDR      r0,[r4,#0]
001488  e1d410b4          LDRH     r1,[r4,#4]
00148c  e1a01081          LSL      r1,r1,#1
001490  e0200791          MLA      r0,r1,r7,r0
001494  e3a01002          MOV      r1,#2
001498  e0200691          MLA      r0,r1,r6,r0
00149c  e58d0028          STR      r0,[sp,#0x28]
;;;1608               stParam.eDestFmt = GA_RGB16;
0014a0  e3a00000          MOV      r0,#0
0014a4  e5cd000d          STRB     r0,[sp,#0xd]
0014a8  ea000008          B        |L1.5328|
                  |L1.5292|
;;;1609           }
;;;1610           else
;;;1611           {
;;;1612               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
0014ac  e5940000          LDR      r0,[r4,#0]
0014b0  e1d410b4          LDRH     r1,[r4,#4]
0014b4  e1a01101          LSL      r1,r1,#2
0014b8  e0200791          MLA      r0,r1,r7,r0
0014bc  e3a01004          MOV      r1,#4
0014c0  e0200691          MLA      r0,r1,r6,r0
0014c4  e58d0028          STR      r0,[sp,#0x28]
;;;1613               stParam.eDestFmt = GA_RGBA32;
0014c8  e3a00001          MOV      r0,#1
0014cc  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.5328|
;;;1614           }
;;;1615   
;;;1616           stParam.eFadeMode      = stGastate.eFadeMode;
0014d0  e51f0598          LDR      r0,|L1.3904|
0014d4  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0014d8  e5cd000f          STRB     r0,[sp,#0xf]
;;;1617           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
0014dc  e51f05a4          LDR      r0,|L1.3904|
0014e0  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0014e4  e5cd0011          STRB     r0,[sp,#0x11]
;;;1618   
;;;1619           stParam.eTranspColEn   = stGastate.eTranspColEn;
0014e8  e51f05b0          LDR      r0,|L1.3904|
0014ec  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
0014f0  e5cd000e          STRB     r0,[sp,#0xe]
;;;1620           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
0014f4  e51f05bc          LDR      r0,|L1.3904|
0014f8  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
0014fc  e58d0014          STR      r0,[sp,#0x14]
;;;1621           stParam.u16DstTransVal = stGastate.u16DstTransVal;
001500  e51f05c8          LDR      r0,|L1.3904|
001504  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
001508  e1cd01b8          STRH     r0,[sp,#0x18]
;;;1622   
;;;1623           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
00150c  e51f05d4          LDR      r0,|L1.3904|
001510  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
001514  e5cd001a          STRB     r0,[sp,#0x1a]
;;;1624           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
001518  e51f05e0          LDR      r0,|L1.3904|
00151c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
001520  e5cd001b          STRB     r0,[sp,#0x1b]
;;;1625   
;;;1626           stParam.eRleiFmt = RLEI_OVRFMT_RGB16;
001524  e3a00000          MOV      r0,#0
001528  e5cd000c          STRB     r0,[sp,#0xc]
;;;1627           vBlit_OverwriteRLEI_RGB(&stMem, &stParam, pstWriteList);
00152c  e51f0608          LDR      r0,|L1.3884|
001530  e28d100c          ADD      r1,sp,#0xc
001534  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
001538  e28d001c          ADD      r0,sp,#0x1c
00153c  ebfffffe          BL       vBlit_OverwriteRLEI_RGB
                  |L1.5440|
;;;1628       }
;;;1629   }
001540  e28dd030          ADD      sp,sp,#0x30
001544  e8bd81f0          POP      {r4-r8,pc}
;;;1630   
                          ENDP

                  vGfBuffBlitBitmapRLE24 PROC
;;;1633   
;;;1634   void vGfBuffBlitBitmapRLE24(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
001548  e92d41f0          PUSH     {r4-r8,lr}
;;;1635                               int32_t i32PosX, int32_t i32PosY)
;;;1636   {
00154c  e24dd030          SUB      sp,sp,#0x30
001550  e1a05000          MOV      r5,r0
001554  e1a04001          MOV      r4,r1
001558  e1a06002          MOV      r6,r2
00155c  e1a07003          MOV      r7,r3
;;;1637       blit_mem_st       stMem;
;;;1638       blit_OvrRlei_st   stParam;
;;;1639       ga_en_e eDraw;
;;;1640       u8PreviousOperation = 0U;
001560  e3a00000          MOV      r0,#0
001564  e51f1648          LDR      r1,|L1.3876|
001568  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1641   
;;;1642       stMem.u32SrcAddr  = pstSrcImage->u32Address;
00156c  e5950000          LDR      r0,[r5,#0]
001570  e58d0020          STR      r0,[sp,#0x20]
;;;1643       stMem.u16SrcWidth = pstSrcImage->u16Width;
001574  e1d500b4          LDRH     r0,[r5,#4]
001578  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;1644       stMem.u16DstWidth = pstDstImage->u16Width;
00157c  e1d400b4          LDRH     r0,[r4,#4]
001580  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1645       stMem.u16DotCnt   = pstSrcImage->u16Width;
001584  e1d500b4          LDRH     r0,[r5,#4]
001588  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;1646       stMem.u16LineCnt  = pstSrcImage->u16Height;
00158c  e1d500b6          LDRH     r0,[r5,#6]
001590  e1cd02be          STRH     r0,[sp,#0x2e]
;;;1647   
;;;1648       /* handle clip window */
;;;1649       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
001594  e51f065c          LDR      r0,|L1.3904|
001598  e1cd60f0          STRD     r6,r7,[sp,#0]
00159c  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0015a0  e1d520b6          LDRH     r2,[r5,#6]
0015a4  e1d510b4          LDRH     r1,[r5,#4]
0015a8  e1a00004          MOV      r0,r4
0015ac  ebfffffe          BL       eHandleClipWindowBlit
0015b0  e1a08000          MOV      r8,r0
;;;1650   
;;;1651       /* Draw only if there is an overlapping between clip window and destination area */
;;;1652       if(eDraw == GA_EN)
0015b4  e3580001          CMP      r8,#1
0015b8  1a000032          BNE      |L1.5768|
;;;1653       {
;;;1654           stParam.eClipWndEn = eDraw;
0015bc  e5cd8010          STRB     r8,[sp,#0x10]
;;;1655           /* Dest. address calculation */
;;;1656           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
0015c0  e5d4000c          LDRB     r0,[r4,#0xc]
0015c4  e3500004          CMP      r0,#4
0015c8  1a000009          BNE      |L1.5620|
;;;1657           {
;;;1658               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX;
0015cc  e5940000          LDR      r0,[r4,#0]
0015d0  e1d410b4          LDRH     r1,[r4,#4]
0015d4  e1a01081          LSL      r1,r1,#1
0015d8  e0200791          MLA      r0,r1,r7,r0
0015dc  e3a01002          MOV      r1,#2
0015e0  e0200691          MLA      r0,r1,r6,r0
0015e4  e58d0028          STR      r0,[sp,#0x28]
;;;1659               stParam.eDestFmt = GA_RGB16;
0015e8  e3a00000          MOV      r0,#0
0015ec  e5cd000d          STRB     r0,[sp,#0xd]
0015f0  ea000008          B        |L1.5656|
                  |L1.5620|
;;;1660           }
;;;1661           else
;;;1662           {
;;;1663               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
0015f4  e5940000          LDR      r0,[r4,#0]
0015f8  e1d410b4          LDRH     r1,[r4,#4]
0015fc  e1a01101          LSL      r1,r1,#2
001600  e0200791          MLA      r0,r1,r7,r0
001604  e3a01004          MOV      r1,#4
001608  e0200691          MLA      r0,r1,r6,r0
00160c  e58d0028          STR      r0,[sp,#0x28]
;;;1664               stParam.eDestFmt = GA_RGBA32;
001610  e3a00001          MOV      r0,#1
001614  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.5656|
;;;1665           }
;;;1666   
;;;1667           stParam.eFadeMode      = stGastate.eFadeMode;
001618  e51f06e0          LDR      r0,|L1.3904|
00161c  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
001620  e5cd000f          STRB     r0,[sp,#0xf]
;;;1668           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
001624  e51f06ec          LDR      r0,|L1.3904|
001628  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
00162c  e5cd0011          STRB     r0,[sp,#0x11]
;;;1669   
;;;1670           stParam.eTranspColEn   = stGastate.eTranspColEn;
001630  e51f06f8          LDR      r0,|L1.3904|
001634  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
001638  e5cd000e          STRB     r0,[sp,#0xe]
;;;1671           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
00163c  e51f0704          LDR      r0,|L1.3904|
001640  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
001644  e58d0014          STR      r0,[sp,#0x14]
;;;1672           stParam.u16DstTransVal = stGastate.u16DstTransVal;
001648  e51f0710          LDR      r0,|L1.3904|
00164c  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
001650  e1cd01b8          STRH     r0,[sp,#0x18]
;;;1673   
;;;1674           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
001654  e51f071c          LDR      r0,|L1.3904|
001658  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00165c  e5cd001a          STRB     r0,[sp,#0x1a]
;;;1675           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
001660  e51f0728          LDR      r0,|L1.3904|
001664  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
001668  e5cd001b          STRB     r0,[sp,#0x1b]
;;;1676   
;;;1677           stParam.eRleiFmt = RLEI_OVRFMT_RGB24;
00166c  e3a00001          MOV      r0,#1
001670  e5cd000c          STRB     r0,[sp,#0xc]
;;;1678           vBlit_OverwriteRLEI_RGB(&stMem, &stParam, pstWriteList);
001674  e51f0750          LDR      r0,|L1.3884|
001678  e28d100c          ADD      r1,sp,#0xc
00167c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
001680  e28d001c          ADD      r0,sp,#0x1c
001684  ebfffffe          BL       vBlit_OverwriteRLEI_RGB
                  |L1.5768|
;;;1679       }
;;;1680   }
001688  e28dd030          ADD      sp,sp,#0x30
00168c  e8bd81f0          POP      {r4-r8,pc}
;;;1681   
                          ENDP

                  vGfBuffBlitBitmapRLE24A PROC
;;;1684   
;;;1685   void vGfBuffBlitBitmapRLE24A(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
001690  e92d41f0          PUSH     {r4-r8,lr}
;;;1686                                int32_t i32PosX, int32_t i32PosY)
;;;1687   {
001694  e24dd028          SUB      sp,sp,#0x28
001698  e1a05000          MOV      r5,r0
00169c  e1a04001          MOV      r4,r1
0016a0  e1a06002          MOV      r6,r2
0016a4  e1a07003          MOV      r7,r3
;;;1688       blit_mem_st       stMem;
;;;1689       blit_OvrRleiA_st  stParam;
;;;1690       ga_en_e eDraw;
;;;1691       u8PreviousOperation = 0U;
0016a8  e3a00000          MOV      r0,#0
0016ac  e51f1790          LDR      r1,|L1.3876|
0016b0  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1692   
;;;1693       stMem.u32SrcAddr  = pstSrcImage->u32Address;
0016b4  e5950000          LDR      r0,[r5,#0]
0016b8  e58d0018          STR      r0,[sp,#0x18]
;;;1694       stMem.u16SrcWidth = pstSrcImage->u16Width;
0016bc  e1d500b4          LDRH     r0,[r5,#4]
0016c0  e1cd01b4          STRH     r0,[sp,#0x14]
;;;1695       stMem.u16DstWidth = pstDstImage->u16Width;
0016c4  e1d400b4          LDRH     r0,[r4,#4]
0016c8  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;1696       stMem.u16DotCnt   = pstSrcImage->u16Width;
0016cc  e1d500b4          LDRH     r0,[r5,#4]
0016d0  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1697       stMem.u16LineCnt  = pstSrcImage->u16Height;
0016d4  e1d500b6          LDRH     r0,[r5,#6]
0016d8  e1cd02b6          STRH     r0,[sp,#0x26]
;;;1698   
;;;1699       /* handle clip window */
;;;1700       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
0016dc  e51f07a4          LDR      r0,|L1.3904|
0016e0  e1cd60f0          STRD     r6,r7,[sp,#0]
0016e4  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0016e8  e1d520b6          LDRH     r2,[r5,#6]
0016ec  e1d510b4          LDRH     r1,[r5,#4]
0016f0  e1a00004          MOV      r0,r4
0016f4  ebfffffe          BL       eHandleClipWindowBlit
0016f8  e1a08000          MOV      r8,r0
;;;1701       
;;;1702       /* Draw only if there is an overlapping clip window and destinatio area */
;;;1703       if(eDraw == GA_EN)
0016fc  e3580001          CMP      r8,#1
001700  1a000029          BNE      |L1.6060|
;;;1704       {
;;;1705           stParam.eClipWndEn = eDraw;
001704  e5cd800f          STRB     r8,[sp,#0xf]
;;;1706           /* Dest. address calculation */
;;;1707           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
001708  e5d4000c          LDRB     r0,[r4,#0xc]
00170c  e3500004          CMP      r0,#4
001710  1a000009          BNE      |L1.5948|
;;;1708           {
;;;1709               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX;
001714  e5940000          LDR      r0,[r4,#0]
001718  e1d410b4          LDRH     r1,[r4,#4]
00171c  e1a01081          LSL      r1,r1,#1
001720  e0200791          MLA      r0,r1,r7,r0
001724  e3a01002          MOV      r1,#2
001728  e0200691          MLA      r0,r1,r6,r0
00172c  e58d0020          STR      r0,[sp,#0x20]
;;;1710               stParam.eDestFmt = GA_RGB16;
001730  e3a00000          MOV      r0,#0
001734  e5cd000d          STRB     r0,[sp,#0xd]
001738  ea000008          B        |L1.5984|
                  |L1.5948|
;;;1711           }
;;;1712           else
;;;1713           {
;;;1714               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
00173c  e5940000          LDR      r0,[r4,#0]
001740  e1d410b4          LDRH     r1,[r4,#4]
001744  e1a01101          LSL      r1,r1,#2
001748  e0200791          MLA      r0,r1,r7,r0
00174c  e3a01004          MOV      r1,#4
001750  e0200691          MLA      r0,r1,r6,r0
001754  e58d0020          STR      r0,[sp,#0x20]
;;;1715               stParam.eDestFmt = GA_RGBA32;
001758  e3a00001          MOV      r0,#1
00175c  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.5984|
;;;1716           }
;;;1717   
;;;1718           stParam.eFadeMode      = stGastate.eFadeMode;
001760  e51f0828          LDR      r0,|L1.3904|
001764  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
001768  e5cd000e          STRB     r0,[sp,#0xe]
;;;1719           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
00176c  e51f0834          LDR      r0,|L1.3904|
001770  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
001774  e5cd0010          STRB     r0,[sp,#0x10]
;;;1720   
;;;1721           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
001778  e51f0840          LDR      r0,|L1.3904|
00177c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
001780  e5cd0011          STRB     r0,[sp,#0x11]
;;;1722           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
001784  e51f084c          LDR      r0,|L1.3904|
001788  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00178c  e5cd0012          STRB     r0,[sp,#0x12]
;;;1723   
;;;1724           stParam.eRleiFmt = RLEI_OVRFMT_RGBA24;
001790  e3a00002          MOV      r0,#2
001794  e5cd000c          STRB     r0,[sp,#0xc]
;;;1725           vBlit_OverwriteRLEI_RGBA(&stMem, &stParam, pstWriteList);
001798  e51f0874          LDR      r0,|L1.3884|
00179c  e28d100c          ADD      r1,sp,#0xc
0017a0  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0017a4  e28d0014          ADD      r0,sp,#0x14
0017a8  ebfffffe          BL       vBlit_OverwriteRLEI_RGBA
                  |L1.6060|
;;;1726       }
;;;1727   }
0017ac  e28dd028          ADD      sp,sp,#0x28
0017b0  e8bd81f0          POP      {r4-r8,pc}
;;;1728   
                          ENDP

                  vGfBuffBlitBitmapRLE32 PROC
;;;1731   
;;;1732   void vGfBuffBlitBitmapRLE32(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
0017b4  e92d41f0          PUSH     {r4-r8,lr}
;;;1733                               int32_t i32PosX, int32_t i32PosY)
;;;1734   {
0017b8  e24dd028          SUB      sp,sp,#0x28
0017bc  e1a05000          MOV      r5,r0
0017c0  e1a04001          MOV      r4,r1
0017c4  e1a06002          MOV      r6,r2
0017c8  e1a07003          MOV      r7,r3
;;;1735       blit_mem_st       stMem;
;;;1736       blit_OvrRleiA_st  stParam;
;;;1737       ga_en_e eDraw;
;;;1738       u8PreviousOperation = 0U;
0017cc  e3a00000          MOV      r0,#0
0017d0  e51f18b4          LDR      r1,|L1.3876|
0017d4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1739   
;;;1740       stMem.u32SrcAddr  = pstSrcImage->u32Address;
0017d8  e5950000          LDR      r0,[r5,#0]
0017dc  e58d0018          STR      r0,[sp,#0x18]
;;;1741       stMem.u16SrcWidth = pstSrcImage->u16Width;
0017e0  e1d500b4          LDRH     r0,[r5,#4]
0017e4  e1cd01b4          STRH     r0,[sp,#0x14]
;;;1742       stMem.u16DstWidth = pstDstImage->u16Width;
0017e8  e1d400b4          LDRH     r0,[r4,#4]
0017ec  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;1743       stMem.u16DotCnt   = pstSrcImage->u16Width;
0017f0  e1d500b4          LDRH     r0,[r5,#4]
0017f4  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1744       stMem.u16LineCnt  = pstSrcImage->u16Height;
0017f8  e1d500b6          LDRH     r0,[r5,#6]
0017fc  e1cd02b6          STRH     r0,[sp,#0x26]
;;;1745   
;;;1746       /* handle clip window */
;;;1747       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
001800  e51f08c8          LDR      r0,|L1.3904|
001804  e1cd60f0          STRD     r6,r7,[sp,#0]
001808  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
00180c  e1d520b6          LDRH     r2,[r5,#6]
001810  e1d510b4          LDRH     r1,[r5,#4]
001814  e1a00004          MOV      r0,r4
001818  ebfffffe          BL       eHandleClipWindowBlit
00181c  e1a08000          MOV      r8,r0
;;;1748       
;;;1749       /* Draw only if there is an overlapping clip window and destination area */
;;;1750       if(eDraw == GA_EN)
001820  e3580001          CMP      r8,#1
001824  1a000029          BNE      |L1.6352|
;;;1751       {
;;;1752           stParam.eClipWndEn = eDraw;
001828  e5cd800f          STRB     r8,[sp,#0xf]
;;;1753           /* Dest. address calculation */
;;;1754           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00182c  e5d4000c          LDRB     r0,[r4,#0xc]
001830  e3500004          CMP      r0,#4
001834  1a000009          BNE      |L1.6240|
;;;1755           {
;;;1756               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX;
001838  e5940000          LDR      r0,[r4,#0]
00183c  e1d410b4          LDRH     r1,[r4,#4]
001840  e1a01081          LSL      r1,r1,#1
001844  e0200791          MLA      r0,r1,r7,r0
001848  e3a01002          MOV      r1,#2
00184c  e0200691          MLA      r0,r1,r6,r0
001850  e58d0020          STR      r0,[sp,#0x20]
;;;1757               stParam.eDestFmt = GA_RGB16;
001854  e3a00000          MOV      r0,#0
001858  e5cd000d          STRB     r0,[sp,#0xd]
00185c  ea000008          B        |L1.6276|
                  |L1.6240|
;;;1758           }
;;;1759           else
;;;1760           {
;;;1761               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
001860  e5940000          LDR      r0,[r4,#0]
001864  e1d410b4          LDRH     r1,[r4,#4]
001868  e1a01101          LSL      r1,r1,#2
00186c  e0200791          MLA      r0,r1,r7,r0
001870  e3a01004          MOV      r1,#4
001874  e0200691          MLA      r0,r1,r6,r0
001878  e58d0020          STR      r0,[sp,#0x20]
;;;1762               stParam.eDestFmt = GA_RGBA32;
00187c  e3a00001          MOV      r0,#1
001880  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.6276|
;;;1763           }
;;;1764   
;;;1765           stParam.eFadeMode      = stGastate.eFadeMode;
001884  e51f094c          LDR      r0,|L1.3904|
001888  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
00188c  e5cd000e          STRB     r0,[sp,#0xe]
;;;1766           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
001890  e51f0958          LDR      r0,|L1.3904|
001894  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
001898  e5cd0010          STRB     r0,[sp,#0x10]
;;;1767   
;;;1768           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
00189c  e51f0964          LDR      r0,|L1.3904|
0018a0  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0018a4  e5cd0011          STRB     r0,[sp,#0x11]
;;;1769           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0018a8  e51f0970          LDR      r0,|L1.3904|
0018ac  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0018b0  e5cd0012          STRB     r0,[sp,#0x12]
;;;1770   
;;;1771           stParam.eRleiFmt = RLEI_OVRFMT_RGBA32;
0018b4  e3a00003          MOV      r0,#3
0018b8  e5cd000c          STRB     r0,[sp,#0xc]
;;;1772           vBlit_OverwriteRLEI_RGBA(&stMem, &stParam, pstWriteList);
0018bc  e51f0998          LDR      r0,|L1.3884|
0018c0  e28d100c          ADD      r1,sp,#0xc
0018c4  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0018c8  e28d0014          ADD      r0,sp,#0x14
0018cc  ebfffffe          BL       vBlit_OverwriteRLEI_RGBA
                  |L1.6352|
;;;1773       }
;;;1774   }
0018d0  e28dd028          ADD      sp,sp,#0x28
0018d4  e8bd81f0          POP      {r4-r8,pc}
;;;1775   
                          ENDP

                  vGfBuffBlitBitmapFull PROC
;;;1341   
;;;1342   void vGfBuffBlitBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
0018d8  e92d41f0          PUSH     {r4-r8,lr}
;;;1343                              int32_t i32PosX, int32_t i32PosY)
;;;1344   {
0018dc  e24dd030          SUB      sp,sp,#0x30
0018e0  e1a04000          MOV      r4,r0
0018e4  e1a05001          MOV      r5,r1
0018e8  e1a06002          MOV      r6,r2
0018ec  e1a07003          MOV      r7,r3
;;;1345       blit_mem_st     stMem;
;;;1346       blit_OvrRgb_st  stParam;
;;;1347       ga_en_e eDraw;
;;;1348   
;;;1349       stMem.u16SrcWidth = pstSrcImage->u16Width;
0018f0  e1d400b4          LDRH     r0,[r4,#4]
0018f4  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;1350       stMem.u16DstWidth = pstDstImage->u16Width;
0018f8  e1d500b4          LDRH     r0,[r5,#4]
0018fc  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1351       stMem.u16DotCnt   = pstSrcImage->u16Width;
001900  e1d400b4          LDRH     r0,[r4,#4]
001904  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;1352       stMem.u16LineCnt  = pstSrcImage->u16Height;
001908  e1d400b6          LDRH     r0,[r4,#6]
00190c  e1cd02be          STRH     r0,[sp,#0x2e]
;;;1353   
;;;1354       if (pstSrcImage->eFormat < (uint8_t)FMT_PNGRGBA32)
001910  e5d4000c          LDRB     r0,[r4,#0xc]
001914  e350001d          CMP      r0,#0x1d
001918  aa00000d          BGE      |L1.6484|
;;;1355       {
;;;1356           u8PreviousOperation = 0U;
00191c  e3a00000          MOV      r0,#0
001920  e51f1a04          LDR      r1,|L1.3876|
001924  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1357   
;;;1358           stMem.u32SrcAddr = pstSrcImage->u32Address;
001928  e5940000          LDR      r0,[r4,#0]
00192c  e58d0020          STR      r0,[sp,#0x20]
;;;1359           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
001930  e5d4000c          LDRB     r0,[r4,#0xc]
001934  e3500004          CMP      r0,#4
001938  1a000002          BNE      |L1.6472|
;;;1360           {
;;;1361               stParam.eSrcFmt = GA_RGB16;
00193c  e3a00000          MOV      r0,#0
001940  e5cd000c          STRB     r0,[sp,#0xc]
001944  ea000057          B        |L1.6824|
                  |L1.6472|
;;;1362           }
;;;1363           else
;;;1364           {
;;;1365               stParam.eSrcFmt = GA_RGBA32;
001948  e3a00001          MOV      r0,#1
00194c  e5cd000c          STRB     r0,[sp,#0xc]
001950  ea000054          B        |L1.6824|
                  |L1.6484|
;;;1366           }
;;;1367       }
;;;1368       else
;;;1369       {
;;;1370           if (u8PreviousOperation == 0U)
001954  e51f0a38          LDR      r0,|L1.3876|
001958  e5d00000          LDRB     r0,[r0,#0]  ; u8PreviousOperation
00195c  e3500000          CMP      r0,#0
001960  1a000000          BNE      |L1.6504|
;;;1371           {
;;;1372               vGfWaitForGA();
001964  ebfffffe          BL       vGfWaitForGA
                  |L1.6504|
;;;1373           }
;;;1374           u8PreviousOperation = 1U;
001968  e3a00001          MOV      r0,#1
00196c  e51f1a50          LDR      r1,|L1.3876|
001970  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1375   
;;;1376           /* png */
;;;1377           if (u8PNG_Decoder == 0U)
001974  e59f0ed0          LDR      r0,|L1.10316|
001978  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_Decoder
00197c  e3500000          CMP      r0,#0
001980  1a000023          BNE      |L1.6676|
;;;1378           {
;;;1379               /* Palette Stream */
;;;1380               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream6)
001984  e5940010          LDR      r0,[r4,#0x10]
001988  e3500000          CMP      r0,#0
00198c  0a000011          BEQ      |L1.6616|
001990  e51f0a50          LDR      r0,|L1.3912|
001994  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream6
001998  e3500000          CMP      r0,#0
00199c  0a00000d          BEQ      |L1.6616|
;;;1381               {
;;;1382                   i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
0019a0  e1d400b6          LDRH     r0,[r4,#6]
0019a4  e1d410b4          LDRH     r1,[r4,#4]
0019a8  e58d0004          STR      r0,[sp,#4]
0019ac  e58d1000          STR      r1,[sp,#0]
0019b0  e3a03004          MOV      r3,#4
0019b4  e3a02000          MOV      r2,#0
0019b8  e3a00006          MOV      r0,#6
0019bc  e5941010          LDR      r1,[r4,#0x10]
0019c0  ebfffffe          BL       i32PNG_SetUpStream
;;;1383                   vGfWaitForPNGDecode(PNG_STREAM_6);
0019c4  e3a00006          MOV      r0,#6
0019c8  ebfffffe          BL       vGfWaitForPNGDecode
;;;1384                   u8PNG_PaletteStream6 = 0U;
0019cc  e3a00000          MOV      r0,#0
0019d0  e51f1a90          LDR      r1,|L1.3912|
0019d4  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream6
                  |L1.6616|
;;;1385               }
;;;1386               i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
0019d8  e1d400b6          LDRH     r0,[r4,#6]
0019dc  e1d410b4          LDRH     r1,[r4,#4]
0019e0  e58d0004          STR      r0,[sp,#4]
0019e4  e58d1000          STR      r1,[sp,#0]
0019e8  e3a03004          MOV      r3,#4
0019ec  e3a02000          MOV      r2,#0
0019f0  e3a00006          MOV      r0,#6
0019f4  e5941000          LDR      r1,[r4,#0]
0019f8  ebfffffe          BL       i32PNG_SetUpStream
;;;1387               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_6;
0019fc  e3a00473          MOV      r0,#0x73000000
001a00  e58d0020          STR      r0,[sp,#0x20]
;;;1388               u8PNG_Decoder = 1U;
001a04  e3a00001          MOV      r0,#1
001a08  e59f1e3c          LDR      r1,|L1.10316|
001a0c  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
001a10  ea000022          B        |L1.6816|
                  |L1.6676|
;;;1389           }
;;;1390           else
;;;1391           {
;;;1392               /* Palette Stream */
;;;1393               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream7)
001a14  e5940010          LDR      r0,[r4,#0x10]
001a18  e3500000          CMP      r0,#0
001a1c  0a000011          BEQ      |L1.6760|
001a20  e51f0adc          LDR      r0,|L1.3916|
001a24  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream7
001a28  e3500000          CMP      r0,#0
001a2c  0a00000d          BEQ      |L1.6760|
;;;1394               {
;;;1395                   i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001a30  e1d400b6          LDRH     r0,[r4,#6]
001a34  e1d410b4          LDRH     r1,[r4,#4]
001a38  e58d0004          STR      r0,[sp,#4]
001a3c  e58d1000          STR      r1,[sp,#0]
001a40  e3a03004          MOV      r3,#4
001a44  e3a02000          MOV      r2,#0
001a48  e3a00007          MOV      r0,#7
001a4c  e5941010          LDR      r1,[r4,#0x10]
001a50  ebfffffe          BL       i32PNG_SetUpStream
;;;1396                   vGfWaitForPNGDecode(PNG_STREAM_7);
001a54  e3a00007          MOV      r0,#7
001a58  ebfffffe          BL       vGfWaitForPNGDecode
;;;1397                   u8PNG_PaletteStream7 = 0U;
001a5c  e3a00000          MOV      r0,#0
001a60  e51f1b1c          LDR      r1,|L1.3916|
001a64  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream7
                  |L1.6760|
;;;1398               }
;;;1399               i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001a68  e1d400b6          LDRH     r0,[r4,#6]
001a6c  e1d410b4          LDRH     r1,[r4,#4]
001a70  e58d0004          STR      r0,[sp,#4]
001a74  e58d1000          STR      r1,[sp,#0]
001a78  e3a03004          MOV      r3,#4
001a7c  e3a02000          MOV      r2,#0
001a80  e3a00007          MOV      r0,#7
001a84  e5941000          LDR      r1,[r4,#0]
001a88  ebfffffe          BL       i32PNG_SetUpStream
;;;1400               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_7;
001a8c  e59f0dbc          LDR      r0,|L1.10320|
001a90  e58d0020          STR      r0,[sp,#0x20]
;;;1401               u8PNG_Decoder = 0U;
001a94  e3a00000          MOV      r0,#0
001a98  e59f1dac          LDR      r1,|L1.10316|
001a9c  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
                  |L1.6816|
;;;1402           }
;;;1403           stParam.eSrcFmt = GA_RGBA32;
001aa0  e3a00001          MOV      r0,#1
001aa4  e5cd000c          STRB     r0,[sp,#0xc]
                  |L1.6824|
;;;1404       }
;;;1405   
;;;1406       /* handle clip window */
;;;1407       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
001aa8  e51f0b70          LDR      r0,|L1.3904|
001aac  e1cd60f0          STRD     r6,r7,[sp,#0]
001ab0  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
001ab4  e1d420b6          LDRH     r2,[r4,#6]
001ab8  e1d410b4          LDRH     r1,[r4,#4]
001abc  e1a00005          MOV      r0,r5
001ac0  ebfffffe          BL       eHandleClipWindowBlit
001ac4  e1a08000          MOV      r8,r0
;;;1408       
;;;1409       /* Draw only if there is an overlapping clip window and destination area */
;;;1410       if(eDraw == GA_EN)
001ac8  e3580001          CMP      r8,#1
001acc  1a000030          BNE      |L1.7060|
;;;1411       {
;;;1412           stParam.eClipWndEn = eDraw;
001ad0  e5cd8010          STRB     r8,[sp,#0x10]
;;;1413           /* Dest. address calculation */
;;;1414           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
001ad4  e5d5000c          LDRB     r0,[r5,#0xc]
001ad8  e3500004          CMP      r0,#4
001adc  1a000009          BNE      |L1.6920|
;;;1415           {
;;;1416               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX;
001ae0  e5950000          LDR      r0,[r5,#0]
001ae4  e1d510b4          LDRH     r1,[r5,#4]
001ae8  e1a01081          LSL      r1,r1,#1
001aec  e0200791          MLA      r0,r1,r7,r0
001af0  e3a01002          MOV      r1,#2
001af4  e0200691          MLA      r0,r1,r6,r0
001af8  e58d0028          STR      r0,[sp,#0x28]
;;;1417               stParam.eDestFmt = GA_RGB16;
001afc  e3a00000          MOV      r0,#0
001b00  e5cd000d          STRB     r0,[sp,#0xd]
001b04  ea000008          B        |L1.6956|
                  |L1.6920|
;;;1418           }
;;;1419           else
;;;1420           {
;;;1421               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
001b08  e5950000          LDR      r0,[r5,#0]
001b0c  e1d510b4          LDRH     r1,[r5,#4]
001b10  e1a01101          LSL      r1,r1,#2
001b14  e0200791          MLA      r0,r1,r7,r0
001b18  e3a01004          MOV      r1,#4
001b1c  e0200691          MLA      r0,r1,r6,r0
001b20  e58d0028          STR      r0,[sp,#0x28]
;;;1422               stParam.eDestFmt = GA_RGBA32;
001b24  e3a00001          MOV      r0,#1
001b28  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.6956|
;;;1423           }   
;;;1424   
;;;1425           stParam.eFadeMode      = stGastate.eFadeMode;
001b2c  e51f0bf4          LDR      r0,|L1.3904|
001b30  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
001b34  e5cd000f          STRB     r0,[sp,#0xf]
;;;1426           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
001b38  e51f0c00          LDR      r0,|L1.3904|
001b3c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
001b40  e5cd0011          STRB     r0,[sp,#0x11]
;;;1427   
;;;1428           stParam.eTranspColEn   = stGastate.eTranspColEn;
001b44  e51f0c0c          LDR      r0,|L1.3904|
001b48  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
001b4c  e5cd000e          STRB     r0,[sp,#0xe]
;;;1429           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
001b50  e51f0c18          LDR      r0,|L1.3904|
001b54  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
001b58  e58d0014          STR      r0,[sp,#0x14]
;;;1430           stParam.u16DstTransVal = stGastate.u16DstTransVal;
001b5c  e51f0c24          LDR      r0,|L1.3904|
001b60  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
001b64  e1cd01b8          STRH     r0,[sp,#0x18]
;;;1431   
;;;1432           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
001b68  e51f0c30          LDR      r0,|L1.3904|
001b6c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
001b70  e5cd001a          STRB     r0,[sp,#0x1a]
;;;1433           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
001b74  e51f0c3c          LDR      r0,|L1.3904|
001b78  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
001b7c  e5cd001b          STRB     r0,[sp,#0x1b]
;;;1434   
;;;1435           vBlit_OverwriteRGB(&stMem, &stParam, pstWriteList);
001b80  e51f0c5c          LDR      r0,|L1.3884|
001b84  e28d100c          ADD      r1,sp,#0xc
001b88  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
001b8c  e28d001c          ADD      r0,sp,#0x1c
001b90  ebfffffe          BL       vBlit_OverwriteRGB
                  |L1.7060|
;;;1436       }
;;;1437   }
001b94  e28dd030          ADD      sp,sp,#0x30
001b98  e8bd81f0          POP      {r4-r8,pc}
;;;1438   
                          ENDP

                  u32GfBuffBlitBitmapFull PROC
;;;1281   
;;;1282   uint32_t u32GfBuffBlitBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
001b9c  e92d41f0          PUSH     {r4-r8,lr}
;;;1283                                    int32_t i32PosX, int32_t i32PosY)
;;;1284   {
001ba0  e1a05000          MOV      r5,r0
001ba4  e1a06001          MOV      r6,r1
001ba8  e1a07002          MOV      r7,r2
001bac  e1a08003          MOV      r8,r3
;;;1285       uint32_t u32Error;
;;;1286   
;;;1287       if (pstSrcImage->eFormat <= (uint8_t)FMT_RGB16)
001bb0  e5d5000c          LDRB     r0,[r5,#0xc]
001bb4  e3500004          CMP      r0,#4
001bb8  ca000019          BGT      |L1.7204|
;;;1288       {
;;;1289           switch (pstSrcImage->eFormat)
001bbc  e5d5000c          LDRB     r0,[r5,#0xc]
001bc0  e3500001          CMP      r0,#1
001bc4  0a000002          BEQ      |L1.7124|
001bc8  e3500004          CMP      r0,#4
001bcc  1a000010          BNE      |L1.7188|
001bd0  ea000007          B        |L1.7156|
                  |L1.7124|
;;;1290           {
;;;1291               case FMT_RGBA32:
001bd4  e320f000          NOP      
;;;1292                   vGfBuffBlitBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001bd8  e1a03008          MOV      r3,r8
001bdc  e1a02007          MOV      r2,r7
001be0  e1a01006          MOV      r1,r6
001be4  e1a00005          MOV      r0,r5
001be8  ebfffffe          BL       vGfBuffBlitBitmapFull
;;;1293                   u32Error = 0U;
001bec  e3a04000          MOV      r4,#0
;;;1294                   break;
001bf0  ea00000a          B        |L1.7200|
                  |L1.7156|
;;;1295               case FMT_RGB16:
001bf4  e320f000          NOP      
;;;1296                   vGfBuffBlitBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001bf8  e1a03008          MOV      r3,r8
001bfc  e1a02007          MOV      r2,r7
001c00  e1a01006          MOV      r1,r6
001c04  e1a00005          MOV      r0,r5
001c08  ebfffffe          BL       vGfBuffBlitBitmapFull
;;;1297                   u32Error = 0U;
001c0c  e3a04000          MOV      r4,#0
;;;1298                   break;
001c10  ea000002          B        |L1.7200|
                  |L1.7188|
;;;1299               default: u32Error = 1U;
001c14  e320f000          NOP      
001c18  e3a04001          MOV      r4,#1
;;;1300                   break;
001c1c  e320f000          NOP      
                  |L1.7200|
001c20  ea000037          B        |L1.7428|
                  |L1.7204|
;;;1301           }
;;;1302       }
;;;1303       else
;;;1304       {
;;;1305           if (pstSrcImage->eFormat >= (uint8_t)FMT_PNGRGBA32)
001c24  e5d5000c          LDRB     r0,[r5,#0xc]
001c28  e350001d          CMP      r0,#0x1d
001c2c  ba000006          BLT      |L1.7244|
;;;1306           {
;;;1307               vGfBuffBlitBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001c30  e1a03008          MOV      r3,r8
001c34  e1a02007          MOV      r2,r7
001c38  e1a01006          MOV      r1,r6
001c3c  e1a00005          MOV      r0,r5
001c40  ebfffffe          BL       vGfBuffBlitBitmapFull
;;;1308               u32Error = 0U;
001c44  e3a04000          MOV      r4,#0
001c48  ea00002d          B        |L1.7428|
                  |L1.7244|
;;;1309           }
;;;1310           else
;;;1311           {
;;;1312               switch (pstSrcImage->eFormat)
001c4c  e5d5000c          LDRB     r0,[r5,#0xc]
001c50  e350000f          CMP      r0,#0xf
001c54  0a000006          BEQ      |L1.7284|
001c58  e3500010          CMP      r0,#0x10
001c5c  0a00000c          BEQ      |L1.7316|
001c60  e3500011          CMP      r0,#0x11
001c64  0a000012          BEQ      |L1.7348|
001c68  e3500012          CMP      r0,#0x12
001c6c  1a000020          BNE      |L1.7412|
001c70  ea000017          B        |L1.7380|
                  |L1.7284|
;;;1313               {
;;;1314                   case FMT_RLERGBA32:
001c74  e320f000          NOP      
;;;1315                       vGfBuffBlitBitmapRLE32(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001c78  e1a03008          MOV      r3,r8
001c7c  e1a02007          MOV      r2,r7
001c80  e1a01006          MOV      r1,r6
001c84  e1a00005          MOV      r0,r5
001c88  ebfffffe          BL       vGfBuffBlitBitmapRLE32
;;;1316                       u32Error = 0U;
001c8c  e3a04000          MOV      r4,#0
;;;1317                       break;
001c90  ea00001a          B        |L1.7424|
                  |L1.7316|
;;;1318                   case FMT_RLERGBA24:
001c94  e320f000          NOP      
;;;1319                       vGfBuffBlitBitmapRLE24A(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001c98  e1a03008          MOV      r3,r8
001c9c  e1a02007          MOV      r2,r7
001ca0  e1a01006          MOV      r1,r6
001ca4  e1a00005          MOV      r0,r5
001ca8  ebfffffe          BL       vGfBuffBlitBitmapRLE24A
;;;1320                       u32Error = 0U;
001cac  e3a04000          MOV      r4,#0
;;;1321                       break;
001cb0  ea000012          B        |L1.7424|
                  |L1.7348|
;;;1322                   case FMT_RLERGB24:
001cb4  e320f000          NOP      
;;;1323                       vGfBuffBlitBitmapRLE24(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001cb8  e1a03008          MOV      r3,r8
001cbc  e1a02007          MOV      r2,r7
001cc0  e1a01006          MOV      r1,r6
001cc4  e1a00005          MOV      r0,r5
001cc8  ebfffffe          BL       vGfBuffBlitBitmapRLE24
;;;1324                       u32Error = 0U;
001ccc  e3a04000          MOV      r4,#0
;;;1325                       break;
001cd0  ea00000a          B        |L1.7424|
                  |L1.7380|
;;;1326                   case FMT_RLERGB16:
001cd4  e320f000          NOP      
;;;1327                       vGfBuffBlitBitmapRLE16(pstSrcImage, pstDstImage, i32PosX, i32PosY);
001cd8  e1a03008          MOV      r3,r8
001cdc  e1a02007          MOV      r2,r7
001ce0  e1a01006          MOV      r1,r6
001ce4  e1a00005          MOV      r0,r5
001ce8  ebfffffe          BL       vGfBuffBlitBitmapRLE16
;;;1328                       u32Error = 0U;
001cec  e3a04000          MOV      r4,#0
;;;1329                       break;
001cf0  ea000002          B        |L1.7424|
                  |L1.7412|
;;;1330                   default: u32Error = 1U;
001cf4  e320f000          NOP      
001cf8  e3a04001          MOV      r4,#1
;;;1331                       break;
001cfc  e320f000          NOP      
                  |L1.7424|
001d00  e320f000          NOP                            ;1317
                  |L1.7428|
;;;1332               }
;;;1333           }
;;;1334       }
;;;1335   
;;;1336       return u32Error;
001d04  e1a00004          MOV      r0,r4
;;;1337   }
001d08  e8bd81f0          POP      {r4-r8,pc}
;;;1338   
                          ENDP

                  vGfBuffBlitBitmapPart PROC
;;;1481   
;;;1482   void vGfBuffBlitBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
001d0c  e92d43f0          PUSH     {r4-r9,lr}
;;;1483                              uint32_t u32PosX, uint32_t u32PosY)
;;;1484   {
001d10  e24dd02c          SUB      sp,sp,#0x2c
001d14  e1a04000          MOV      r4,r0
001d18  e1a06001          MOV      r6,r1
001d1c  e1a05002          MOV      r5,r2
001d20  e1a07003          MOV      r7,r3
001d24  e59d9048          LDR      r9,[sp,#0x48]
;;;1485       blit_mem_st     stMem;
;;;1486       blit_OvrRgb_st  stParam;
;;;1487       ga_en_e eDraw;
;;;1488   
;;;1489       stMem.u16SrcWidth = pstSrcImage->u16Width;
001d28  e1d400b4          LDRH     r0,[r4,#4]
001d2c  e1cd01b8          STRH     r0,[sp,#0x18]
;;;1490       stMem.u16DstWidth = pstDstImage->u16Width;
001d30  e1d600b4          LDRH     r0,[r6,#4]
001d34  e1cd02b0          STRH     r0,[sp,#0x20]
;;;1491       stMem.u16DotCnt   = pstImgPart->u16Width;
001d38  e1d500b4          LDRH     r0,[r5,#4]
001d3c  e1cd02b8          STRH     r0,[sp,#0x28]
;;;1492       stMem.u16LineCnt  = pstImgPart->u16Height;
001d40  e1d500b6          LDRH     r0,[r5,#6]
001d44  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;1493       
;;;1494       if(pstSrcImage->eFormat < (uint8_t)FMT_PNGRGBA32)
001d48  e5d4000c          LDRB     r0,[r4,#0xc]
001d4c  e350001d          CMP      r0,#0x1d
001d50  aa00001d          BGE      |L1.7628|
;;;1495       {
;;;1496           u8PreviousOperation = 0U;
001d54  e3a00000          MOV      r0,#0
001d58  e51f1e3c          LDR      r1,|L1.3876|
001d5c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1497   
;;;1498           if (pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
001d60  e5d4000c          LDRB     r0,[r4,#0xc]
001d64  e3500004          CMP      r0,#4
001d68  1a00000b          BNE      |L1.7580|
;;;1499           {
;;;1500               stMem.u32SrcAddr = pstSrcImage->u32Address + 2U*(uint32_t)pstSrcImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 2U*(uint32_t)pstImgPart->u16SrcOffsX;
001d6c  e5940000          LDR      r0,[r4,#0]
001d70  e1d410b4          LDRH     r1,[r4,#4]
001d74  e1a01081          LSL      r1,r1,#1
001d78  e1d520b2          LDRH     r2,[r5,#2]
001d7c  e0200291          MLA      r0,r1,r2,r0
001d80  e1d510b0          LDRH     r1,[r5,#0]
001d84  e3a02002          MOV      r2,#2
001d88  e0200192          MLA      r0,r2,r1,r0
001d8c  e58d001c          STR      r0,[sp,#0x1c]
;;;1501               stParam.eSrcFmt  = GA_RGB16;
001d90  e3a00000          MOV      r0,#0
001d94  e5cd0008          STRB     r0,[sp,#8]
001d98  ea00006f          B        |L1.8028|
                  |L1.7580|
;;;1502           }
;;;1503           else
;;;1504           {
;;;1505               stMem.u32SrcAddr = pstSrcImage->u32Address + 4U*(uint32_t)pstSrcImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 4U*(uint32_t)pstImgPart->u16SrcOffsX;
001d9c  e5940000          LDR      r0,[r4,#0]
001da0  e1d410b4          LDRH     r1,[r4,#4]
001da4  e1a01101          LSL      r1,r1,#2
001da8  e1d520b2          LDRH     r2,[r5,#2]
001dac  e0200291          MLA      r0,r1,r2,r0
001db0  e1d510b0          LDRH     r1,[r5,#0]
001db4  e3a02004          MOV      r2,#4
001db8  e0200192          MLA      r0,r2,r1,r0
001dbc  e58d001c          STR      r0,[sp,#0x1c]
;;;1506               stParam.eSrcFmt  = GA_RGBA32;
001dc0  e3a00001          MOV      r0,#1
001dc4  e5cd0008          STRB     r0,[sp,#8]
001dc8  ea000063          B        |L1.8028|
                  |L1.7628|
;;;1507           }
;;;1508       }
;;;1509       else
;;;1510       {
;;;1511           if (u8PreviousOperation == 0U)
001dcc  e51f0eb0          LDR      r0,|L1.3876|
001dd0  e5d00000          LDRB     r0,[r0,#0]  ; u8PreviousOperation
001dd4  e3500000          CMP      r0,#0
001dd8  1a000000          BNE      |L1.7648|
;;;1512           {
;;;1513               vGfWaitForGA();
001ddc  ebfffffe          BL       vGfWaitForGA
                  |L1.7648|
;;;1514           }
;;;1515           u8PreviousOperation = 1U;
001de0  e3a00001          MOV      r0,#1
001de4  e51f1ec8          LDR      r1,|L1.3876|
001de8  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1516   
;;;1517           if (u8PNG_Decoder == 0U)
001dec  e59f0a58          LDR      r0,|L1.10316|
001df0  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_Decoder
001df4  e3500000          CMP      r0,#0
001df8  1a00002a          BNE      |L1.7848|
;;;1518           {
;;;1519               /* Palette Stream */
;;;1520               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream6)
001dfc  e5940010          LDR      r0,[r4,#0x10]
001e00  e3500000          CMP      r0,#0
001e04  0a000011          BEQ      |L1.7760|
001e08  e51f0ec8          LDR      r0,|L1.3912|
001e0c  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream6
001e10  e3500000          CMP      r0,#0
001e14  0a00000d          BEQ      |L1.7760|
;;;1521               {
;;;1522                   i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001e18  e1d400b6          LDRH     r0,[r4,#6]
001e1c  e1d410b4          LDRH     r1,[r4,#4]
001e20  e58d0004          STR      r0,[sp,#4]
001e24  e58d1000          STR      r1,[sp,#0]
001e28  e3a03004          MOV      r3,#4
001e2c  e3a02000          MOV      r2,#0
001e30  e3a00006          MOV      r0,#6
001e34  e5941010          LDR      r1,[r4,#0x10]
001e38  ebfffffe          BL       i32PNG_SetUpStream
;;;1523                   vGfWaitForPNGDecode(PNG_STREAM_6);
001e3c  e3a00006          MOV      r0,#6
001e40  ebfffffe          BL       vGfWaitForPNGDecode
;;;1524                   u8PNG_PaletteStream6 = 0U;
001e44  e3a00000          MOV      r0,#0
001e48  e51f1f08          LDR      r1,|L1.3912|
001e4c  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream6
                  |L1.7760|
;;;1525               }
;;;1526               i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001e50  e1d400b6          LDRH     r0,[r4,#6]
001e54  e1d410b4          LDRH     r1,[r4,#4]
001e58  e58d0004          STR      r0,[sp,#4]
001e5c  e58d1000          STR      r1,[sp,#0]
001e60  e3a03004          MOV      r3,#4
001e64  e3a02000          MOV      r2,#0
001e68  e3a00006          MOV      r0,#6
001e6c  e5941000          LDR      r1,[r4,#0]
001e70  ebfffffe          BL       i32PNG_SetUpStream
;;;1527               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_6 + 4U*(uint32_t)pstSrcImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 4U*(uint32_t)pstImgPart->u16SrcOffsX;
001e74  e1d400b4          LDRH     r0,[r4,#4]
001e78  e1a00100          LSL      r0,r0,#2
001e7c  e1d510b2          LDRH     r1,[r5,#2]
001e80  e0000190          MUL      r0,r0,r1
001e84  e2800473          ADD      r0,r0,#0x73000000
001e88  e1d510b0          LDRH     r1,[r5,#0]
001e8c  e3a02004          MOV      r2,#4
001e90  e0200192          MLA      r0,r2,r1,r0
001e94  e58d001c          STR      r0,[sp,#0x1c]
;;;1528               u8PNG_Decoder = 1U;
001e98  e3a00001          MOV      r0,#1
001e9c  e59f19a8          LDR      r1,|L1.10316|
001ea0  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
001ea4  ea00002a          B        |L1.8020|
                  |L1.7848|
;;;1529           }
;;;1530           else
;;;1531           {
;;;1532               /* Palette Stream */
;;;1533               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream7)
001ea8  e5940010          LDR      r0,[r4,#0x10]
001eac  e3500000          CMP      r0,#0
001eb0  0a000011          BEQ      |L1.7932|
001eb4  e51f0f70          LDR      r0,|L1.3916|
001eb8  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream7
001ebc  e3500000          CMP      r0,#0
001ec0  0a00000d          BEQ      |L1.7932|
;;;1534               {
;;;1535                   i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001ec4  e1d400b6          LDRH     r0,[r4,#6]
001ec8  e1d410b4          LDRH     r1,[r4,#4]
001ecc  e58d0004          STR      r0,[sp,#4]
001ed0  e58d1000          STR      r1,[sp,#0]
001ed4  e3a03004          MOV      r3,#4
001ed8  e3a02000          MOV      r2,#0
001edc  e3a00007          MOV      r0,#7
001ee0  e5941010          LDR      r1,[r4,#0x10]
001ee4  ebfffffe          BL       i32PNG_SetUpStream
;;;1536                   vGfWaitForPNGDecode(PNG_STREAM_7);
001ee8  e3a00007          MOV      r0,#7
001eec  ebfffffe          BL       vGfWaitForPNGDecode
;;;1537                   u8PNG_PaletteStream7 = 0U;
001ef0  e3a00000          MOV      r0,#0
001ef4  e51f1fb0          LDR      r1,|L1.3916|
001ef8  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream7
                  |L1.7932|
;;;1538               }
;;;1539               i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
001efc  e1d400b6          LDRH     r0,[r4,#6]
001f00  e1d410b4          LDRH     r1,[r4,#4]
001f04  e58d0004          STR      r0,[sp,#4]
001f08  e58d1000          STR      r1,[sp,#0]
001f0c  e3a03004          MOV      r3,#4
001f10  e3a02000          MOV      r2,#0
001f14  e3a00007          MOV      r0,#7
001f18  e5941000          LDR      r1,[r4,#0]
001f1c  ebfffffe          BL       i32PNG_SetUpStream
;;;1540               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_7 + 4U*(uint32_t)pstSrcImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 4U*(uint32_t)pstImgPart->u16SrcOffsX;
001f20  e1d400b4          LDRH     r0,[r4,#4]
001f24  e1a00100          LSL      r0,r0,#2
001f28  e1d510b2          LDRH     r1,[r5,#2]
001f2c  e0000190          MUL      r0,r0,r1
001f30  e2800101          ADD      r0,r0,#0x40000000
001f34  e28005ce          ADD      r0,r0,#0x33800000
001f38  e1d510b0          LDRH     r1,[r5,#0]
001f3c  e3a02004          MOV      r2,#4
001f40  e0200192          MLA      r0,r2,r1,r0
001f44  e58d001c          STR      r0,[sp,#0x1c]
;;;1541               u8PNG_Decoder = 0U;
001f48  e3a00000          MOV      r0,#0
001f4c  e59f18f8          LDR      r1,|L1.10316|
001f50  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
                  |L1.8020|
;;;1542           }
;;;1543           stParam.eSrcFmt = GA_RGBA32;
001f54  e3a00001          MOV      r0,#1
001f58  e5cd0008          STRB     r0,[sp,#8]
                  |L1.8028|
;;;1544       }
;;;1545   
;;;1546       /* handle clip window */
;;;1547       eDraw = eHandleClipWindowBlit(pstDstImage, pstImgPart->u16Width, pstImgPart->u16Height, stGastate.eClipWndEn, u32PosX, u32PosY);
001f5c  e59f08f0          LDR      r0,|L1.10324|
001f60  e88d0280          STM      sp,{r7,r9}
001f64  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
001f68  e1d520b6          LDRH     r2,[r5,#6]
001f6c  e1d510b4          LDRH     r1,[r5,#4]
001f70  e1a00006          MOV      r0,r6
001f74  ebfffffe          BL       eHandleClipWindowBlit
001f78  e1a08000          MOV      r8,r0
;;;1548   
;;;1549       /* Draw only if there is an overlapping clip window and destination area */
;;;1550       if(eDraw == GA_EN)
001f7c  e3580001          CMP      r8,#1
001f80  1a000030          BNE      |L1.8264|
;;;1551       {
;;;1552           stParam.eClipWndEn = eDraw;
001f84  e5cd800c          STRB     r8,[sp,#0xc]
;;;1553   
;;;1554           /* Dest. address calculation */
;;;1555           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
001f88  e5d6000c          LDRB     r0,[r6,#0xc]
001f8c  e3500004          CMP      r0,#4
001f90  1a000009          BNE      |L1.8124|
;;;1556           {
;;;1557               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * u32PosY + 2U*u32PosX;
001f94  e5960000          LDR      r0,[r6,#0]
001f98  e1d610b4          LDRH     r1,[r6,#4]
001f9c  e1a01081          LSL      r1,r1,#1
001fa0  e0200991          MLA      r0,r1,r9,r0
001fa4  e3a01002          MOV      r1,#2
001fa8  e0200791          MLA      r0,r1,r7,r0
001fac  e58d0024          STR      r0,[sp,#0x24]
;;;1558               stParam.eDestFmt = GA_RGB16;
001fb0  e3a00000          MOV      r0,#0
001fb4  e5cd0009          STRB     r0,[sp,#9]
001fb8  ea000008          B        |L1.8160|
                  |L1.8124|
;;;1559           }
;;;1560           else
;;;1561           {
;;;1562               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * u32PosY + 4U*u32PosX;
001fbc  e5960000          LDR      r0,[r6,#0]
001fc0  e1d610b4          LDRH     r1,[r6,#4]
001fc4  e1a01101          LSL      r1,r1,#2
001fc8  e0200991          MLA      r0,r1,r9,r0
001fcc  e3a01004          MOV      r1,#4
001fd0  e0200791          MLA      r0,r1,r7,r0
001fd4  e58d0024          STR      r0,[sp,#0x24]
;;;1563               stParam.eDestFmt = GA_RGBA32;
001fd8  e3a00001          MOV      r0,#1
001fdc  e5cd0009          STRB     r0,[sp,#9]
                  |L1.8160|
;;;1564           }
;;;1565   
;;;1566           stParam.eFadeMode      = stGastate.eFadeMode;
001fe0  e59f086c          LDR      r0,|L1.10324|
001fe4  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
001fe8  e5cd000b          STRB     r0,[sp,#0xb]
;;;1567           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
001fec  e59f0860          LDR      r0,|L1.10324|
001ff0  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
001ff4  e5cd000d          STRB     r0,[sp,#0xd]
;;;1568   
;;;1569           stParam.eTranspColEn   = stGastate.eTranspColEn;
001ff8  e59f0854          LDR      r0,|L1.10324|
001ffc  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
002000  e5cd000a          STRB     r0,[sp,#0xa]
;;;1570           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
002004  e59f0848          LDR      r0,|L1.10324|
002008  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
00200c  e58d0010          STR      r0,[sp,#0x10]
;;;1571           stParam.u16DstTransVal = stGastate.u16DstTransVal;
002010  e59f083c          LDR      r0,|L1.10324|
002014  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
002018  e1cd01b4          STRH     r0,[sp,#0x14]
;;;1572   
;;;1573           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
00201c  e59f0830          LDR      r0,|L1.10324|
002020  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
002024  e5cd0016          STRB     r0,[sp,#0x16]
;;;1574           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
002028  e59f0824          LDR      r0,|L1.10324|
00202c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
002030  e5cd0017          STRB     r0,[sp,#0x17]
;;;1575   
;;;1576           vBlit_OverwriteRGB(&stMem, &stParam, pstWriteList);
002034  e59f081c          LDR      r0,|L1.10328|
002038  e28d1008          ADD      r1,sp,#8
00203c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
002040  e28d0018          ADD      r0,sp,#0x18
002044  ebfffffe          BL       vBlit_OverwriteRGB
                  |L1.8264|
;;;1577       }
;;;1578   }
002048  e28dd02c          ADD      sp,sp,#0x2c
00204c  e8bd83f0          POP      {r4-r9,pc}
;;;1579   
                          ENDP

                  u32GfBuffBlitBitmapPart PROC
;;;1441   
;;;1442   uint32_t u32GfBuffBlitBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
002050  e92d43f8          PUSH     {r3-r9,lr}
;;;1443                                    uint32_t u32PosX, uint32_t u32PosY)
;;;1444   {
002054  e1a05000          MOV      r5,r0
002058  e1a07001          MOV      r7,r1
00205c  e1a08002          MOV      r8,r2
002060  e1a09003          MOV      r9,r3
002064  e59d6020          LDR      r6,[sp,#0x20]
;;;1445       uint32_t u32Error;
;;;1446   
;;;1447       if (pstSrcImage->eFormat <= (uint8_t)FMT_RGB16)
002068  e5d5000c          LDRB     r0,[r5,#0xc]
00206c  e3500004          CMP      r0,#4
002070  ca00001b          BGT      |L1.8420|
;;;1448       {
;;;1449           switch (pstSrcImage->eFormat)
002074  e5d5000c          LDRB     r0,[r5,#0xc]
002078  e3500001          CMP      r0,#1
00207c  0a000002          BEQ      |L1.8332|
002080  e3500004          CMP      r0,#4
002084  1a000012          BNE      |L1.8404|
002088  ea000008          B        |L1.8368|
                  |L1.8332|
;;;1450           {
;;;1451               case FMT_RGBA32:
00208c  e320f000          NOP      
;;;1452                   vGfBuffBlitBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
002090  e1a03009          MOV      r3,r9
002094  e1a02008          MOV      r2,r8
002098  e1a01007          MOV      r1,r7
00209c  e1a00005          MOV      r0,r5
0020a0  e58d6000          STR      r6,[sp,#0]
0020a4  ebfffffe          BL       vGfBuffBlitBitmapPart
;;;1453                   u32Error = 0U;
0020a8  e3a04000          MOV      r4,#0
;;;1454                   break;
0020ac  ea00000b          B        |L1.8416|
                  |L1.8368|
;;;1455               case FMT_RGB16:
0020b0  e320f000          NOP      
;;;1456                   vGfBuffBlitBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
0020b4  e1a03009          MOV      r3,r9
0020b8  e1a02008          MOV      r2,r8
0020bc  e1a01007          MOV      r1,r7
0020c0  e1a00005          MOV      r0,r5
0020c4  e58d6000          STR      r6,[sp,#0]
0020c8  ebfffffe          BL       vGfBuffBlitBitmapPart
;;;1457                   u32Error = 0U;
0020cc  e3a04000          MOV      r4,#0
;;;1458                   break;
0020d0  ea000002          B        |L1.8416|
                  |L1.8404|
;;;1459               default: u32Error = 1U;
0020d4  e320f000          NOP      
0020d8  e3a04001          MOV      r4,#1
;;;1460                   break;
0020dc  e320f000          NOP      
                  |L1.8416|
0020e0  ea00000b          B        |L1.8468|
                  |L1.8420|
;;;1461           }
;;;1462       }
;;;1463      else
;;;1464       {
;;;1465           if (pstSrcImage->eFormat >= (uint8_t)FMT_PNGRGBA32)
0020e4  e5d5000c          LDRB     r0,[r5,#0xc]
0020e8  e350001d          CMP      r0,#0x1d
0020ec  ba000007          BLT      |L1.8464|
;;;1466           {
;;;1467               vGfBuffBlitBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
0020f0  e1a03009          MOV      r3,r9
0020f4  e1a02008          MOV      r2,r8
0020f8  e1a01007          MOV      r1,r7
0020fc  e1a00005          MOV      r0,r5
002100  e58d6000          STR      r6,[sp,#0]
002104  ebfffffe          BL       vGfBuffBlitBitmapPart
;;;1468               u32Error = 0U;
002108  e3a04000          MOV      r4,#0
00210c  ea000000          B        |L1.8468|
                  |L1.8464|
;;;1469           }
;;;1470           else
;;;1471           {
;;;1472               u32Error = 1U;
002110  e3a04001          MOV      r4,#1
                  |L1.8468|
;;;1473           }
;;;1474       }
;;;1475   
;;;1476      return u32Error;
002114  e1a00004          MOV      r0,r4
;;;1477   }
002118  e8bd83f8          POP      {r3-r9,pc}
;;;1478   
                          ENDP

                  vGfBuffBlendFillArea PROC
;;;1778   
;;;1779   void vGfBuffBlendFillArea(gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart, uint32_t u32Color)
00211c  e92d40f0          PUSH     {r4-r7,lr}
;;;1780   {
002120  e24dd03c          SUB      sp,sp,#0x3c
002124  e1a05000          MOV      r5,r0
002128  e1a04001          MOV      r4,r1
00212c  e1a07002          MOV      r7,r2
;;;1781       blit_mem_st        stMem;
;;;1782       blit_BlndFill32_st stParam32;
;;;1783       blit_BlndFill16_st stParam16;
;;;1784       ga_en_e eDraw;
;;;1785       u8PreviousOperation = 0U;
002130  e3a00000          MOV      r0,#0
002134  e59f1720          LDR      r1,|L1.10332|
002138  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1786   
;;;1787       stMem.u16DstWidth = pstDstImage->u16Width;
00213c  e1d500b4          LDRH     r0,[r5,#4]
002140  e1cd03b0          STRH     r0,[sp,#0x30]
;;;1788       stMem.u16DotCnt   = pstImgPart->u16Width;
002144  e1d400b4          LDRH     r0,[r4,#4]
002148  e1cd03b8          STRH     r0,[sp,#0x38]
;;;1789       stMem.u16LineCnt  = pstImgPart->u16Height;
00214c  e1d400b6          LDRH     r0,[r4,#6]
002150  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;1790   
;;;1791       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
002154  e5d5000c          LDRB     r0,[r5,#0xc]
002158  e3500004          CMP      r0,#4
00215c  1a00003f          BNE      |L1.8800|
;;;1792       {
;;;1793           /* handle clip window */
;;;1794           eDraw = eHandleClipWindowBlit(pstDstImage, pstImgPart->u16Width, pstImgPart->u16Height, stGastate.eClipWndEn, (int32_t)pstImgPart->u16SrcOffsX, (uint32_t)pstImgPart->u16SrcOffsY);
002160  e1d400b2          LDRH     r0,[r4,#2]
002164  e1d410b0          LDRH     r1,[r4,#0]
002168  e58d0004          STR      r0,[sp,#4]
00216c  e59f06e0          LDR      r0,|L1.10324|
002170  e58d1000          STR      r1,[sp,#0]
002174  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
002178  e1d420b6          LDRH     r2,[r4,#6]
00217c  e1d410b4          LDRH     r1,[r4,#4]
002180  e1a00005          MOV      r0,r5
002184  ebfffffe          BL       eHandleClipWindowBlit
002188  e1a06000          MOV      r6,r0
;;;1795           
;;;1796           /* Draw only if there is an overlapping clip windw and destination area */
;;;1797           if(eDraw == GA_EN)
00218c  e3560001          CMP      r6,#1
002190  1a00006d          BNE      |L1.9036|
;;;1798           {
;;;1799               stParam16.eClipWndEn = eDraw;
002194  e5cd6010          STRB     r6,[sp,#0x10]
;;;1800               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 2U*(uint32_t)pstImgPart->u16SrcOffsX;
002198  e5950000          LDR      r0,[r5,#0]
00219c  e1d510b4          LDRH     r1,[r5,#4]
0021a0  e1a01081          LSL      r1,r1,#1
0021a4  e1d420b2          LDRH     r2,[r4,#2]
0021a8  e0200291          MLA      r0,r1,r2,r0
0021ac  e1d410b0          LDRH     r1,[r4,#0]
0021b0  e3a02002          MOV      r2,#2
0021b4  e0200192          MLA      r0,r2,r1,r0
0021b8  e58d0034          STR      r0,[sp,#0x34]
;;;1801   
;;;1802               stParam16.eRedChPrtEn   = stGastate.eRedChPrtEn;
0021bc  e59f0690          LDR      r0,|L1.10324|
0021c0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0021c4  e5cd000a          STRB     r0,[sp,#0xa]
;;;1803               stParam16.eGreenChPrtEn = stGastate.eGreenChPrtEn;
0021c8  e59f0684          LDR      r0,|L1.10324|
0021cc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
0021d0  e5cd000b          STRB     r0,[sp,#0xb]
;;;1804               stParam16.eBlueChPrtEn  = stGastate.eBlueChPrtEn;
0021d4  e59f0678          LDR      r0,|L1.10324|
0021d8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
0021dc  e5cd000c          STRB     r0,[sp,#0xc]
;;;1805   
;;;1806               stParam16.eFadeMode     = stGastate.eFadeMode;
0021e0  e59f066c          LDR      r0,|L1.10324|
0021e4  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0021e8  e5cd000f          STRB     r0,[sp,#0xf]
;;;1807               stParam16.u8FadingFctr  = stGastate.u8FadingFctr;
0021ec  e59f0660          LDR      r0,|L1.10324|
0021f0  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0021f4  e5cd0011          STRB     r0,[sp,#0x11]
;;;1808   
;;;1809               stParam16.eBlndOrder    = stGastate.eBlndOrder;
0021f8  e59f0654          LDR      r0,|L1.10324|
0021fc  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
002200  e5cd000e          STRB     r0,[sp,#0xe]
;;;1810   
;;;1811               stParam16.u16Color      = (uint16_t) u32Color;
002204  e6ff0077          UXTH     r0,r7
002208  e1cd00b8          STRH     r0,[sp,#8]
;;;1812   
;;;1813               stParam16.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00220c  e59f0640          LDR      r0,|L1.10324|
002210  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
002214  e5cd0012          STRB     r0,[sp,#0x12]
;;;1814               stParam16.u8DstAlphaVal = stGastate.u8DstAlphaVal;
002218  e59f0634          LDR      r0,|L1.10324|
00221c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
002220  e5cd0013          STRB     r0,[sp,#0x13]
;;;1815   
;;;1816               stParam16.eRastOpEn     = stGastate.eRastOpEn;
002224  e59f0628          LDR      r0,|L1.10324|
002228  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
00222c  e5cd000d          STRB     r0,[sp,#0xd]
;;;1817               stParam16.eRastOpMode   = stGastate.eRastOpMode;
002230  e59f061c          LDR      r0,|L1.10324|
002234  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
002238  e5cd0014          STRB     r0,[sp,#0x14]
;;;1818               stParam16.eRastOpValue  = stGastate.eRastOpValue;
00223c  e59f0610          LDR      r0,|L1.10324|
002240  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
002244  e5cd0015          STRB     r0,[sp,#0x15]
;;;1819   
;;;1820               vBlit_BlendFillRGB(&stMem, &stParam16, pstWriteList);
002248  e59f0608          LDR      r0,|L1.10328|
00224c  e28d1008          ADD      r1,sp,#8
002250  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
002254  e28d0028          ADD      r0,sp,#0x28
002258  ebfffffe          BL       vBlit_BlendFillRGB
00225c  ea00003a          B        |L1.9036|
                  |L1.8800|
;;;1821           }
;;;1822       }
;;;1823       else
;;;1824       {
;;;1825           /* handle clip window */
;;;1826           eDraw = eHandleClipWindowBlit(pstDstImage, pstImgPart->u16Width, pstImgPart->u16Height, stGastate.eClipWndEn, (uint32_t)pstImgPart->u16SrcOffsX, (uint32_t)pstImgPart->u16SrcOffsY);
002260  e1d400b2          LDRH     r0,[r4,#2]
002264  e1d410b0          LDRH     r1,[r4,#0]
002268  e58d0004          STR      r0,[sp,#4]
00226c  e59f05e0          LDR      r0,|L1.10324|
002270  e58d1000          STR      r1,[sp,#0]
002274  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
002278  e1d420b6          LDRH     r2,[r4,#6]
00227c  e1d410b4          LDRH     r1,[r4,#4]
002280  e1a00005          MOV      r0,r5
002284  ebfffffe          BL       eHandleClipWindowBlit
002288  e1a06000          MOV      r6,r0
;;;1827   
;;;1828           /* Draw only if there is an overlapping clip window and destination area */
;;;1829           if(eDraw == GA_EN)
00228c  e3560001          CMP      r6,#1
002290  1a00002d          BNE      |L1.9036|
;;;1830           {
;;;1831               stParam32.eClipWndEn = eDraw;
002294  e5cd6023          STRB     r6,[sp,#0x23]
;;;1832               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * (uint32_t)pstImgPart->u16SrcOffsY + 4U*(uint32_t)pstImgPart->u16SrcOffsX;
002298  e5950000          LDR      r0,[r5,#0]
00229c  e1d510b4          LDRH     r1,[r5,#4]
0022a0  e1a01101          LSL      r1,r1,#2
0022a4  e1d420b2          LDRH     r2,[r4,#2]
0022a8  e0200291          MLA      r0,r1,r2,r0
0022ac  e1d410b0          LDRH     r1,[r4,#0]
0022b0  e3a02004          MOV      r2,#4
0022b4  e0200192          MLA      r0,r2,r1,r0
0022b8  e58d0034          STR      r0,[sp,#0x34]
;;;1833   
;;;1834               stParam32.eRedChPrtEn   = stGastate.eRedChPrtEn;
0022bc  e59f0590          LDR      r0,|L1.10324|
0022c0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0022c4  e5cd001c          STRB     r0,[sp,#0x1c]
;;;1835               stParam32.eGreenChPrtEn = stGastate.eGreenChPrtEn;
0022c8  e59f0584          LDR      r0,|L1.10324|
0022cc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
0022d0  e5cd001d          STRB     r0,[sp,#0x1d]
;;;1836               stParam32.eBlueChPrtEn  = stGastate.eBlueChPrtEn;
0022d4  e59f0578          LDR      r0,|L1.10324|
0022d8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
0022dc  e5cd001e          STRB     r0,[sp,#0x1e]
;;;1837               stParam32.eAlphaChPrtEn = stGastate.eAlphaChPrtEn;
0022e0  e59f056c          LDR      r0,|L1.10324|
0022e4  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
0022e8  e5cd001f          STRB     r0,[sp,#0x1f]
;;;1838   
;;;1839               stParam32.eFadeMode     = stGastate.eFadeMode;
0022ec  e59f0560          LDR      r0,|L1.10324|
0022f0  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0022f4  e5cd0022          STRB     r0,[sp,#0x22]
;;;1840               stParam32.u8FadingFctr  = stGastate.u8FadingFctr;
0022f8  e59f0554          LDR      r0,|L1.10324|
0022fc  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
002300  e5cd0024          STRB     r0,[sp,#0x24]
;;;1841   
;;;1842               stParam32.eBlndOrder    = stGastate.eBlndOrder;
002304  e59f0548          LDR      r0,|L1.10324|
002308  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
00230c  e5cd0021          STRB     r0,[sp,#0x21]
;;;1843   
;;;1844               stParam32.u32Color      = u32Color;
002310  e58d7018          STR      r7,[sp,#0x18]
;;;1845   
;;;1846               stParam32.eRastOpEn     = stGastate.eRastOpEn;
002314  e59f0538          LDR      r0,|L1.10324|
002318  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
00231c  e5cd0020          STRB     r0,[sp,#0x20]
;;;1847               stParam32.eRastOpMode   = stGastate.eRastOpMode;
002320  e59f052c          LDR      r0,|L1.10324|
002324  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
002328  e5cd0025          STRB     r0,[sp,#0x25]
;;;1848               stParam32.eRastOpValue  = stGastate.eRastOpValue;
00232c  e59f0520          LDR      r0,|L1.10324|
002330  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
002334  e5cd0026          STRB     r0,[sp,#0x26]
;;;1849   
;;;1850               vBlit_BlendFillRGBA(&stMem, &stParam32, pstWriteList);
002338  e59f0518          LDR      r0,|L1.10328|
00233c  e28d1018          ADD      r1,sp,#0x18
002340  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
002344  e28d0028          ADD      r0,sp,#0x28
002348  ebfffffe          BL       vBlit_BlendFillRGBA
                  |L1.9036|
;;;1851           }
;;;1852       }
;;;1853   }
00234c  e28dd03c          ADD      sp,sp,#0x3c
002350  e8bd80f0          POP      {r4-r7,pc}
;;;1854   
                          ENDP

                  vGfBuffBlendBitmapRLE16 PROC
;;;2179   
;;;2180   void vGfBuffBlendBitmapRLE16(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
002354  e92d41f0          PUSH     {r4-r8,lr}
;;;2181                                int32_t i32PosX, int32_t i32PosY)
;;;2182   {
002358  e24dd038          SUB      sp,sp,#0x38
00235c  e1a05000          MOV      r5,r0
002360  e1a04001          MOV      r4,r1
002364  e1a06002          MOV      r6,r2
002368  e1a07003          MOV      r7,r3
;;;2183       blit_mem_st        stMem;
;;;2184       blit_BlndRlei_st   stParam;
;;;2185       ga_en_e eDraw;
;;;2186   
;;;2187       u8PreviousOperation = 0U;
00236c  e3a00000          MOV      r0,#0
002370  e59f14e4          LDR      r1,|L1.10332|
002374  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2188   
;;;2189       stMem.u32SrcAddr  = pstSrcImage->u32Address;
002378  e5950000          LDR      r0,[r5,#0]
00237c  e58d0028          STR      r0,[sp,#0x28]
;;;2190       stMem.u16SrcWidth = pstSrcImage->u16Width;
002380  e1d500b4          LDRH     r0,[r5,#4]
002384  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2191       stMem.u16DstWidth = pstDstImage->u16Width;
002388  e1d400b4          LDRH     r0,[r4,#4]
00238c  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2192       stMem.u16DotCnt   = pstSrcImage->u16Width;
002390  e1d500b4          LDRH     r0,[r5,#4]
002394  e1cd03b4          STRH     r0,[sp,#0x34]
;;;2193       stMem.u16LineCnt  = pstSrcImage->u16Height;
002398  e1d500b6          LDRH     r0,[r5,#6]
00239c  e1cd03b6          STRH     r0,[sp,#0x36]
;;;2194   
;;;2195       /* handle clip window */
;;;2196       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
0023a0  e59f04ac          LDR      r0,|L1.10324|
0023a4  e1cd60f0          STRD     r6,r7,[sp,#0]
0023a8  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0023ac  e1d520b6          LDRH     r2,[r5,#6]
0023b0  e1d510b4          LDRH     r1,[r5,#4]
0023b4  e1a00004          MOV      r0,r4
0023b8  ebfffffe          BL       eHandleClipWindowBlit
0023bc  e1a08000          MOV      r8,r0
;;;2197       
;;;2198       /* Draw only if there is an overlapping clip window and destination area */
;;;2199       if(eDraw == GA_EN)
0023c0  e3580001          CMP      r8,#1
0023c4  1a00004a          BNE      |L1.9460|
;;;2200       {
;;;2201           stParam.eClipWndEn = eDraw;
0023c8  e5cd8015          STRB     r8,[sp,#0x15]
;;;2202           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
0023cc  e5d4000c          LDRB     r0,[r4,#0xc]
0023d0  e3500004          CMP      r0,#4
0023d4  1a000009          BNE      |L1.9216|
;;;2203           {
;;;2204               stMem.u32DstAddr = pstDstImage->u32Address + 2U*pstDstImage->u16Width * i32PosY + 2U*i32PosX;
0023d8  e5940000          LDR      r0,[r4,#0]
0023dc  e1d410b4          LDRH     r1,[r4,#4]
0023e0  e1a01081          LSL      r1,r1,#1
0023e4  e0200791          MLA      r0,r1,r7,r0
0023e8  e3a01002          MOV      r1,#2
0023ec  e0200691          MLA      r0,r1,r6,r0
0023f0  e58d0030          STR      r0,[sp,#0x30]
;;;2205               stParam.eDestFmt = GA_RGB16;
0023f4  e3a00000          MOV      r0,#0
0023f8  e5cd000d          STRB     r0,[sp,#0xd]
0023fc  ea000008          B        |L1.9252|
                  |L1.9216|
;;;2206           }
;;;2207           else
;;;2208           {
;;;2209               stMem.u32DstAddr = pstDstImage->u32Address + 4U*pstDstImage->u16Width * i32PosY + 4U*i32PosX;
002400  e5940000          LDR      r0,[r4,#0]
002404  e1d410b4          LDRH     r1,[r4,#4]
002408  e1a01101          LSL      r1,r1,#2
00240c  e0200791          MLA      r0,r1,r7,r0
002410  e3a01004          MOV      r1,#4
002414  e0200691          MLA      r0,r1,r6,r0
002418  e58d0030          STR      r0,[sp,#0x30]
;;;2210               stParam.eDestFmt = GA_RGBA32;
00241c  e3a00001          MOV      r0,#1
002420  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.9252|
;;;2211           }
;;;2212   
;;;2213           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
002424  e59f0428          LDR      r0,|L1.10324|
002428  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
00242c  e5cd000e          STRB     r0,[sp,#0xe]
;;;2214           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
002430  e59f041c          LDR      r0,|L1.10324|
002434  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
002438  e5cd000f          STRB     r0,[sp,#0xf]
;;;2215           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
00243c  e59f0410          LDR      r0,|L1.10324|
002440  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
002444  e5cd0010          STRB     r0,[sp,#0x10]
;;;2216           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
002448  e59f0404          LDR      r0,|L1.10324|
00244c  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
002450  e5cd0011          STRB     r0,[sp,#0x11]
;;;2217   
;;;2218           stParam.eBlndOrder     = stGastate.eBlndOrder;
002454  e59f03f8          LDR      r0,|L1.10324|
002458  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
00245c  e5cd0016          STRB     r0,[sp,#0x16]
;;;2219   
;;;2220           stParam.eTranspColEn   = stGastate.eTranspColEn;
002460  e59f03ec          LDR      r0,|L1.10324|
002464  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
002468  e5cd0013          STRB     r0,[sp,#0x13]
;;;2221           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
00246c  e59f03e0          LDR      r0,|L1.10324|
002470  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
002474  e58d0018          STR      r0,[sp,#0x18]
;;;2222           stParam.u16DstTransVal = stGastate.u16DstTransVal;
002478  e59f03d4          LDR      r0,|L1.10324|
00247c  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
002480  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2223   
;;;2224           stParam.eFadeMode      = stGastate.eFadeMode;
002484  e59f03c8          LDR      r0,|L1.10324|
002488  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
00248c  e5cd0014          STRB     r0,[sp,#0x14]
;;;2225           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
002490  e59f03bc          LDR      r0,|L1.10324|
002494  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
002498  e5cd0017          STRB     r0,[sp,#0x17]
;;;2226   
;;;2227           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
00249c  e59f03b0          LDR      r0,|L1.10324|
0024a0  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0024a4  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2228           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0024a8  e59f03a4          LDR      r0,|L1.10324|
0024ac  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0024b0  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2229   
;;;2230           stParam.eRastOpEn      = stGastate.eRastOpEn;
0024b4  e59f0398          LDR      r0,|L1.10324|
0024b8  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
0024bc  e5cd0012          STRB     r0,[sp,#0x12]
;;;2231           stParam.eRastOpMode    = stGastate.eRastOpMode;
0024c0  e59f038c          LDR      r0,|L1.10324|
0024c4  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
0024c8  e5cd0020          STRB     r0,[sp,#0x20]
;;;2232           stParam.eRastOpValue   = stGastate.eRastOpValue;
0024cc  e59f0380          LDR      r0,|L1.10324|
0024d0  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
0024d4  e5cd0021          STRB     r0,[sp,#0x21]
;;;2233   
;;;2234           stParam.eRleiFmt = RLEI_BLNDFMT_RGB16;
0024d8  e3a00000          MOV      r0,#0
0024dc  e5cd000c          STRB     r0,[sp,#0xc]
;;;2235           vBlit_BlendRLEI(&stMem, &stParam, pstWriteList);
0024e0  e59f0370          LDR      r0,|L1.10328|
0024e4  e28d100c          ADD      r1,sp,#0xc
0024e8  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0024ec  e28d0024          ADD      r0,sp,#0x24
0024f0  ebfffffe          BL       vBlit_BlendRLEI
                  |L1.9460|
;;;2236       }
;;;2237   }
0024f4  e28dd038          ADD      sp,sp,#0x38
0024f8  e8bd81f0          POP      {r4-r8,pc}
;;;2238   
                          ENDP

                  vGfBuffBlendBitmapRLE24 PROC
;;;2241   
;;;2242   void vGfBuffBlendBitmapRLE24(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
0024fc  e92d41f0          PUSH     {r4-r8,lr}
;;;2243                                int32_t i32PosX, int32_t i32PosY)
;;;2244   {
002500  e24dd038          SUB      sp,sp,#0x38
002504  e1a05000          MOV      r5,r0
002508  e1a04001          MOV      r4,r1
00250c  e1a06002          MOV      r6,r2
002510  e1a07003          MOV      r7,r3
;;;2245       blit_mem_st        stMem;
;;;2246       blit_BlndRlei_st   stParam;
;;;2247       ga_en_e eDraw;
;;;2248   
;;;2249       u8PreviousOperation = 0U;
002514  e3a00000          MOV      r0,#0
002518  e59f133c          LDR      r1,|L1.10332|
00251c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2250   
;;;2251       stMem.u32SrcAddr  = pstSrcImage->u32Address;
002520  e5950000          LDR      r0,[r5,#0]
002524  e58d0028          STR      r0,[sp,#0x28]
;;;2252       stMem.u16SrcWidth = pstSrcImage->u16Width;
002528  e1d500b4          LDRH     r0,[r5,#4]
00252c  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2253       stMem.u16DstWidth = pstDstImage->u16Width;
002530  e1d400b4          LDRH     r0,[r4,#4]
002534  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2254       stMem.u16DotCnt   = pstSrcImage->u16Width;
002538  e1d500b4          LDRH     r0,[r5,#4]
00253c  e1cd03b4          STRH     r0,[sp,#0x34]
;;;2255       stMem.u16LineCnt  = pstSrcImage->u16Height;
002540  e1d500b6          LDRH     r0,[r5,#6]
002544  e1cd03b6          STRH     r0,[sp,#0x36]
;;;2256   
;;;2257       /* handle clip window */
;;;2258       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
002548  e59f0304          LDR      r0,|L1.10324|
00254c  e1cd60f0          STRD     r6,r7,[sp,#0]
002550  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
002554  e1d520b6          LDRH     r2,[r5,#6]
002558  e1d510b4          LDRH     r1,[r5,#4]
00255c  e1a00004          MOV      r0,r4
002560  ebfffffe          BL       eHandleClipWindowBlit
002564  e1a08000          MOV      r8,r0
;;;2259       
;;;2260       /* Draw only if there is an overlapping clip window and destination area */
;;;2261       if(eDraw == GA_EN)
002568  e3580001          CMP      r8,#1
00256c  1a00004a          BNE      |L1.9884|
;;;2262       {
;;;2263           stParam.eClipWndEn = eDraw;
002570  e5cd8015          STRB     r8,[sp,#0x15]
;;;2264           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
002574  e5d4000c          LDRB     r0,[r4,#0xc]
002578  e3500004          CMP      r0,#4
00257c  1a000009          BNE      |L1.9640|
;;;2265           {
;;;2266               stMem.u32DstAddr = pstDstImage->u32Address + 2U*pstDstImage->u16Width * i32PosY + 2U*i32PosX;
002580  e5940000          LDR      r0,[r4,#0]
002584  e1d410b4          LDRH     r1,[r4,#4]
002588  e1a01081          LSL      r1,r1,#1
00258c  e0200791          MLA      r0,r1,r7,r0
002590  e3a01002          MOV      r1,#2
002594  e0200691          MLA      r0,r1,r6,r0
002598  e58d0030          STR      r0,[sp,#0x30]
;;;2267               stParam.eDestFmt = GA_RGB16;
00259c  e3a00000          MOV      r0,#0
0025a0  e5cd000d          STRB     r0,[sp,#0xd]
0025a4  ea000008          B        |L1.9676|
                  |L1.9640|
;;;2268           }
;;;2269           else
;;;2270           {
;;;2271               stMem.u32DstAddr = pstDstImage->u32Address + 4U*pstDstImage->u16Width * i32PosY + 4U*i32PosX;
0025a8  e5940000          LDR      r0,[r4,#0]
0025ac  e1d410b4          LDRH     r1,[r4,#4]
0025b0  e1a01101          LSL      r1,r1,#2
0025b4  e0200791          MLA      r0,r1,r7,r0
0025b8  e3a01004          MOV      r1,#4
0025bc  e0200691          MLA      r0,r1,r6,r0
0025c0  e58d0030          STR      r0,[sp,#0x30]
;;;2272               stParam.eDestFmt = GA_RGBA32;
0025c4  e3a00001          MOV      r0,#1
0025c8  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.9676|
;;;2273           }
;;;2274   
;;;2275           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
0025cc  e59f0280          LDR      r0,|L1.10324|
0025d0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0025d4  e5cd000e          STRB     r0,[sp,#0xe]
;;;2276           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
0025d8  e59f0274          LDR      r0,|L1.10324|
0025dc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
0025e0  e5cd000f          STRB     r0,[sp,#0xf]
;;;2277           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
0025e4  e59f0268          LDR      r0,|L1.10324|
0025e8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
0025ec  e5cd0010          STRB     r0,[sp,#0x10]
;;;2278           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
0025f0  e59f025c          LDR      r0,|L1.10324|
0025f4  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
0025f8  e5cd0011          STRB     r0,[sp,#0x11]
;;;2279   
;;;2280           stParam.eBlndOrder     = stGastate.eBlndOrder;
0025fc  e59f0250          LDR      r0,|L1.10324|
002600  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
002604  e5cd0016          STRB     r0,[sp,#0x16]
;;;2281   
;;;2282           stParam.eTranspColEn   = stGastate.eTranspColEn;
002608  e59f0244          LDR      r0,|L1.10324|
00260c  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
002610  e5cd0013          STRB     r0,[sp,#0x13]
;;;2283           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
002614  e59f0238          LDR      r0,|L1.10324|
002618  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
00261c  e58d0018          STR      r0,[sp,#0x18]
;;;2284           stParam.u16DstTransVal = stGastate.u16DstTransVal;
002620  e59f022c          LDR      r0,|L1.10324|
002624  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
002628  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2285   
;;;2286           stParam.eFadeMode      = stGastate.eFadeMode;
00262c  e59f0220          LDR      r0,|L1.10324|
002630  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
002634  e5cd0014          STRB     r0,[sp,#0x14]
;;;2287           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
002638  e59f0214          LDR      r0,|L1.10324|
00263c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
002640  e5cd0017          STRB     r0,[sp,#0x17]
;;;2288   
;;;2289           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
002644  e59f0208          LDR      r0,|L1.10324|
002648  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00264c  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2290           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
002650  e59f01fc          LDR      r0,|L1.10324|
002654  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
002658  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2291   
;;;2292           stParam.eRastOpEn      = stGastate.eRastOpEn;
00265c  e59f01f0          LDR      r0,|L1.10324|
002660  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
002664  e5cd0012          STRB     r0,[sp,#0x12]
;;;2293           stParam.eRastOpMode    = stGastate.eRastOpMode;
002668  e59f01e4          LDR      r0,|L1.10324|
00266c  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
002670  e5cd0020          STRB     r0,[sp,#0x20]
;;;2294           stParam.eRastOpValue   = stGastate.eRastOpValue;
002674  e59f01d8          LDR      r0,|L1.10324|
002678  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
00267c  e5cd0021          STRB     r0,[sp,#0x21]
;;;2295   
;;;2296           stParam.eRleiFmt = RLEI_BLNDFMT_RGB24;
002680  e3a00001          MOV      r0,#1
002684  e5cd000c          STRB     r0,[sp,#0xc]
;;;2297           vBlit_BlendRLEI(&stMem, &stParam, pstWriteList);
002688  e59f01c8          LDR      r0,|L1.10328|
00268c  e28d100c          ADD      r1,sp,#0xc
002690  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
002694  e28d0024          ADD      r0,sp,#0x24
002698  ebfffffe          BL       vBlit_BlendRLEI
                  |L1.9884|
;;;2298       }
;;;2299   }
00269c  e28dd038          ADD      sp,sp,#0x38
0026a0  e8bd81f0          POP      {r4-r8,pc}
;;;2300   
                          ENDP

                  vGfBuffBlendBitmapRLE24A PROC
;;;2303   
;;;2304   void vGfBuffBlendBitmapRLE24A(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
0026a4  e92d41f0          PUSH     {r4-r8,lr}
;;;2305                                 int32_t i32PosX, int32_t i32PosY)
;;;2306   {
0026a8  e24dd038          SUB      sp,sp,#0x38
0026ac  e1a05000          MOV      r5,r0
0026b0  e1a04001          MOV      r4,r1
0026b4  e1a06002          MOV      r6,r2
0026b8  e1a07003          MOV      r7,r3
;;;2307       blit_mem_st        stMem;
;;;2308       blit_BlndRlei_st   stParam;
;;;2309       ga_en_e eDraw;
;;;2310   
;;;2311       u8PreviousOperation = 0U;
0026bc  e3a00000          MOV      r0,#0
0026c0  e59f1194          LDR      r1,|L1.10332|
0026c4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2312   
;;;2313       stMem.u32SrcAddr  = pstSrcImage->u32Address;
0026c8  e5950000          LDR      r0,[r5,#0]
0026cc  e58d0028          STR      r0,[sp,#0x28]
;;;2314       stMem.u16SrcWidth = pstSrcImage->u16Width;
0026d0  e1d500b4          LDRH     r0,[r5,#4]
0026d4  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2315       stMem.u16DstWidth = pstDstImage->u16Width;
0026d8  e1d400b4          LDRH     r0,[r4,#4]
0026dc  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2316       stMem.u16DotCnt   = pstSrcImage->u16Width;
0026e0  e1d500b4          LDRH     r0,[r5,#4]
0026e4  e1cd03b4          STRH     r0,[sp,#0x34]
;;;2317       stMem.u16LineCnt  = pstSrcImage->u16Height;
0026e8  e1d500b6          LDRH     r0,[r5,#6]
0026ec  e1cd03b6          STRH     r0,[sp,#0x36]
;;;2318   
;;;2319       /* handle clip window */
;;;2320       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
0026f0  e59f015c          LDR      r0,|L1.10324|
0026f4  e1cd60f0          STRD     r6,r7,[sp,#0]
0026f8  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0026fc  e1d520b6          LDRH     r2,[r5,#6]
002700  e1d510b4          LDRH     r1,[r5,#4]
002704  e1a00004          MOV      r0,r4
002708  ebfffffe          BL       eHandleClipWindowBlit
00270c  e1a08000          MOV      r8,r0
;;;2321       
;;;2322       /* Draw only if there is an overlapping clip window and destination area */
;;;2323       if(eDraw == GA_EN)
002710  e3580001          CMP      r8,#1
002714  1a00004a          BNE      |L1.10308|
;;;2324       {
;;;2325           stParam.eClipWndEn = eDraw;
002718  e5cd8015          STRB     r8,[sp,#0x15]
;;;2326           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00271c  e5d4000c          LDRB     r0,[r4,#0xc]
002720  e3500004          CMP      r0,#4
002724  1a000009          BNE      |L1.10064|
;;;2327           {
;;;2328               stMem.u32DstAddr = pstDstImage->u32Address + 2U*pstDstImage->u16Width * i32PosY + 2U*i32PosX;
002728  e5940000          LDR      r0,[r4,#0]
00272c  e1d410b4          LDRH     r1,[r4,#4]
002730  e1a01081          LSL      r1,r1,#1
002734  e0200791          MLA      r0,r1,r7,r0
002738  e3a01002          MOV      r1,#2
00273c  e0200691          MLA      r0,r1,r6,r0
002740  e58d0030          STR      r0,[sp,#0x30]
;;;2329               stParam.eDestFmt = GA_RGB16;
002744  e3a00000          MOV      r0,#0
002748  e5cd000d          STRB     r0,[sp,#0xd]
00274c  ea000008          B        |L1.10100|
                  |L1.10064|
;;;2330           }
;;;2331           else
;;;2332           {
;;;2333               stMem.u32DstAddr = pstDstImage->u32Address + 4U*pstDstImage->u16Width * i32PosY + 4U*i32PosX;
002750  e5940000          LDR      r0,[r4,#0]
002754  e1d410b4          LDRH     r1,[r4,#4]
002758  e1a01101          LSL      r1,r1,#2
00275c  e0200791          MLA      r0,r1,r7,r0
002760  e3a01004          MOV      r1,#4
002764  e0200691          MLA      r0,r1,r6,r0
002768  e58d0030          STR      r0,[sp,#0x30]
;;;2334               stParam.eDestFmt = GA_RGBA32;
00276c  e3a00001          MOV      r0,#1
002770  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.10100|
;;;2335           }
;;;2336   
;;;2337           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
002774  e59f00d8          LDR      r0,|L1.10324|
002778  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
00277c  e5cd000e          STRB     r0,[sp,#0xe]
;;;2338           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
002780  e59f00cc          LDR      r0,|L1.10324|
002784  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
002788  e5cd000f          STRB     r0,[sp,#0xf]
;;;2339           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
00278c  e59f00c0          LDR      r0,|L1.10324|
002790  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
002794  e5cd0010          STRB     r0,[sp,#0x10]
;;;2340           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
002798  e59f00b4          LDR      r0,|L1.10324|
00279c  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
0027a0  e5cd0011          STRB     r0,[sp,#0x11]
;;;2341   
;;;2342           stParam.eBlndOrder     = stGastate.eBlndOrder;
0027a4  e59f00a8          LDR      r0,|L1.10324|
0027a8  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
0027ac  e5cd0016          STRB     r0,[sp,#0x16]
;;;2343   
;;;2344           stParam.eTranspColEn   = stGastate.eTranspColEn;
0027b0  e59f009c          LDR      r0,|L1.10324|
0027b4  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
0027b8  e5cd0013          STRB     r0,[sp,#0x13]
;;;2345           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
0027bc  e59f0090          LDR      r0,|L1.10324|
0027c0  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
0027c4  e58d0018          STR      r0,[sp,#0x18]
;;;2346           stParam.u16DstTransVal = stGastate.u16DstTransVal;
0027c8  e59f0084          LDR      r0,|L1.10324|
0027cc  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
0027d0  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2347   
;;;2348           stParam.eFadeMode      = stGastate.eFadeMode;
0027d4  e59f0078          LDR      r0,|L1.10324|
0027d8  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0027dc  e5cd0014          STRB     r0,[sp,#0x14]
;;;2349           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
0027e0  e59f006c          LDR      r0,|L1.10324|
0027e4  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0027e8  e5cd0017          STRB     r0,[sp,#0x17]
;;;2350   
;;;2351           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
0027ec  e59f0060          LDR      r0,|L1.10324|
0027f0  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0027f4  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2352           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0027f8  e59f0054          LDR      r0,|L1.10324|
0027fc  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
002800  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2353   
;;;2354           stParam.eRastOpEn      = stGastate.eRastOpEn;
002804  e59f0048          LDR      r0,|L1.10324|
002808  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
00280c  e5cd0012          STRB     r0,[sp,#0x12]
;;;2355           stParam.eRastOpMode    = stGastate.eRastOpMode;
002810  e59f003c          LDR      r0,|L1.10324|
002814  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
002818  e5cd0020          STRB     r0,[sp,#0x20]
;;;2356           stParam.eRastOpValue   = stGastate.eRastOpValue;
00281c  e59f0030          LDR      r0,|L1.10324|
002820  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
002824  e5cd0021          STRB     r0,[sp,#0x21]
;;;2357   
;;;2358           stParam.eRleiFmt = RLEI_BLNDFMT_RGBA24;
002828  e3a00002          MOV      r0,#2
00282c  e5cd000c          STRB     r0,[sp,#0xc]
;;;2359           vBlit_BlendRLEI(&stMem, &stParam, pstWriteList);
002830  e59f0020          LDR      r0,|L1.10328|
002834  e28d100c          ADD      r1,sp,#0xc
002838  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00283c  e28d0024          ADD      r0,sp,#0x24
002840  ebfffffe          BL       vBlit_BlendRLEI
                  |L1.10308|
;;;2360       }
;;;2361   }
002844  e28dd038          ADD      sp,sp,#0x38
002848  e8bd81f0          POP      {r4-r8,pc}
                  |L1.10316|
                          DCD      u8PNG_Decoder
                  |L1.10320|
                          DCD      0x73800000
                  |L1.10324|
                          DCD      stGastate
                  |L1.10328|
                          DCD      pstWriteList
                  |L1.10332|
                          DCD      u8PreviousOperation
                          ENDP

                  vGfBuffBlendBitmapRLE32 PROC
;;;2365   
;;;2366   void vGfBuffBlendBitmapRLE32(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
002860  e92d41f0          PUSH     {r4-r8,lr}
;;;2367                                int32_t i32PosX, int32_t i32PosY)
;;;2368   {
002864  e24dd038          SUB      sp,sp,#0x38
002868  e1a05000          MOV      r5,r0
00286c  e1a04001          MOV      r4,r1
002870  e1a06002          MOV      r6,r2
002874  e1a07003          MOV      r7,r3
;;;2369       blit_mem_st       stMem;
;;;2370       blit_BlndRlei_st  stParam;
;;;2371       ga_en_e eDraw;
;;;2372   
;;;2373       u8PreviousOperation = 0U;
002878  e3a00000          MOV      r0,#0
00287c  e51f1028          LDR      r1,|L1.10332|
002880  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2374   
;;;2375       stMem.u32SrcAddr  = pstSrcImage->u32Address;
002884  e5950000          LDR      r0,[r5,#0]
002888  e58d0028          STR      r0,[sp,#0x28]
;;;2376       stMem.u16SrcWidth = pstSrcImage->u16Width;
00288c  e1d500b4          LDRH     r0,[r5,#4]
002890  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2377       stMem.u16DstWidth = pstDstImage->u16Width;
002894  e1d400b4          LDRH     r0,[r4,#4]
002898  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2378       stMem.u16DotCnt   = pstSrcImage->u16Width;
00289c  e1d500b4          LDRH     r0,[r5,#4]
0028a0  e1cd03b4          STRH     r0,[sp,#0x34]
;;;2379       stMem.u16LineCnt  = pstSrcImage->u16Height;
0028a4  e1d500b6          LDRH     r0,[r5,#6]
0028a8  e1cd03b6          STRH     r0,[sp,#0x36]
;;;2380   
;;;2381       /* handle clip window */
;;;2382       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
0028ac  e51f0060          LDR      r0,|L1.10324|
0028b0  e1cd60f0          STRD     r6,r7,[sp,#0]
0028b4  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0028b8  e1d520b6          LDRH     r2,[r5,#6]
0028bc  e1d510b4          LDRH     r1,[r5,#4]
0028c0  e1a00004          MOV      r0,r4
0028c4  ebfffffe          BL       eHandleClipWindowBlit
0028c8  e1a08000          MOV      r8,r0
;;;2383       
;;;2384       /* Draw only if there is an overlapping clip window and destination area */
;;;2385       if(eDraw == GA_EN)
0028cc  e3580001          CMP      r8,#1
0028d0  1a00004a          BNE      |L1.10752|
;;;2386       {
;;;2387           stParam.eClipWndEn = eDraw;
0028d4  e5cd8015          STRB     r8,[sp,#0x15]
;;;2388           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
0028d8  e5d4000c          LDRB     r0,[r4,#0xc]
0028dc  e3500004          CMP      r0,#4
0028e0  1a000009          BNE      |L1.10508|
;;;2389           {
;;;2390               stMem.u32DstAddr = pstDstImage->u32Address + 2U*pstDstImage->u16Width * i32PosY + 2U*i32PosX;
0028e4  e5940000          LDR      r0,[r4,#0]
0028e8  e1d410b4          LDRH     r1,[r4,#4]
0028ec  e1a01081          LSL      r1,r1,#1
0028f0  e0200791          MLA      r0,r1,r7,r0
0028f4  e3a01002          MOV      r1,#2
0028f8  e0200691          MLA      r0,r1,r6,r0
0028fc  e58d0030          STR      r0,[sp,#0x30]
;;;2391               stParam.eDestFmt = GA_RGB16;
002900  e3a00000          MOV      r0,#0
002904  e5cd000d          STRB     r0,[sp,#0xd]
002908  ea000008          B        |L1.10544|
                  |L1.10508|
;;;2392           }
;;;2393           else
;;;2394           {
;;;2395               stMem.u32DstAddr = pstDstImage->u32Address + 4U*pstDstImage->u16Width * i32PosY + 4U*i32PosX;
00290c  e5940000          LDR      r0,[r4,#0]
002910  e1d410b4          LDRH     r1,[r4,#4]
002914  e1a01101          LSL      r1,r1,#2
002918  e0200791          MLA      r0,r1,r7,r0
00291c  e3a01004          MOV      r1,#4
002920  e0200691          MLA      r0,r1,r6,r0
002924  e58d0030          STR      r0,[sp,#0x30]
;;;2396               stParam.eDestFmt = GA_RGBA32;
002928  e3a00001          MOV      r0,#1
00292c  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.10544|
;;;2397           }
;;;2398   
;;;2399           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
002930  e51f00e4          LDR      r0,|L1.10324|
002934  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
002938  e5cd000e          STRB     r0,[sp,#0xe]
;;;2400           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
00293c  e51f00f0          LDR      r0,|L1.10324|
002940  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
002944  e5cd000f          STRB     r0,[sp,#0xf]
;;;2401           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
002948  e51f00fc          LDR      r0,|L1.10324|
00294c  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
002950  e5cd0010          STRB     r0,[sp,#0x10]
;;;2402           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
002954  e51f0108          LDR      r0,|L1.10324|
002958  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00295c  e5cd0011          STRB     r0,[sp,#0x11]
;;;2403   
;;;2404           stParam.eBlndOrder     = stGastate.eBlndOrder;
002960  e51f0114          LDR      r0,|L1.10324|
002964  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
002968  e5cd0016          STRB     r0,[sp,#0x16]
;;;2405   
;;;2406           stParam.eTranspColEn   = stGastate.eTranspColEn;
00296c  e51f0120          LDR      r0,|L1.10324|
002970  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
002974  e5cd0013          STRB     r0,[sp,#0x13]
;;;2407           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
002978  e51f012c          LDR      r0,|L1.10324|
00297c  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
002980  e58d0018          STR      r0,[sp,#0x18]
;;;2408           stParam.u16DstTransVal = stGastate.u16DstTransVal;
002984  e51f0138          LDR      r0,|L1.10324|
002988  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
00298c  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2409   
;;;2410           stParam.eFadeMode      = stGastate.eFadeMode;
002990  e51f0144          LDR      r0,|L1.10324|
002994  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
002998  e5cd0014          STRB     r0,[sp,#0x14]
;;;2411           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
00299c  e51f0150          LDR      r0,|L1.10324|
0029a0  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0029a4  e5cd0017          STRB     r0,[sp,#0x17]
;;;2412   
;;;2413           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
0029a8  e51f015c          LDR      r0,|L1.10324|
0029ac  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0029b0  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2414           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0029b4  e51f0168          LDR      r0,|L1.10324|
0029b8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0029bc  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2415   
;;;2416           stParam.eRastOpEn      = stGastate.eRastOpEn;
0029c0  e51f0174          LDR      r0,|L1.10324|
0029c4  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
0029c8  e5cd0012          STRB     r0,[sp,#0x12]
;;;2417           stParam.eRastOpMode    = stGastate.eRastOpMode;
0029cc  e51f0180          LDR      r0,|L1.10324|
0029d0  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
0029d4  e5cd0020          STRB     r0,[sp,#0x20]
;;;2418           stParam.eRastOpValue   = stGastate.eRastOpValue;
0029d8  e51f018c          LDR      r0,|L1.10324|
0029dc  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
0029e0  e5cd0021          STRB     r0,[sp,#0x21]
;;;2419   
;;;2420           stParam.eRleiFmt       = RLEI_BLNDFMT_RGBA32;
0029e4  e3a00003          MOV      r0,#3
0029e8  e5cd000c          STRB     r0,[sp,#0xc]
;;;2421           vBlit_BlendRLEI(&stMem, &stParam, pstWriteList);
0029ec  e51f019c          LDR      r0,|L1.10328|
0029f0  e28d100c          ADD      r1,sp,#0xc
0029f4  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0029f8  e28d0024          ADD      r0,sp,#0x24
0029fc  ebfffffe          BL       vBlit_BlendRLEI
                  |L1.10752|
;;;2422       }
;;;2423   }
002a00  e28dd038          ADD      sp,sp,#0x38
002a04  e8bd81f0          POP      {r4-r8,pc}
;;;2424   
                          ENDP

                  vGfBuffBlendBitmapFull PROC
;;;1917   
;;;1918   void vGfBuffBlendBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
002a08  e92d41f0          PUSH     {r4-r8,lr}
;;;1919                               int32_t i32PosX, int32_t i32PosY)
;;;1920   {
002a0c  e24dd038          SUB      sp,sp,#0x38
002a10  e1a04000          MOV      r4,r0
002a14  e1a05001          MOV      r5,r1
002a18  e1a06002          MOV      r6,r2
002a1c  e1a07003          MOV      r7,r3
;;;1921       blit_mem_st     stMem;
;;;1922       blit_BlndRgb_st stParam;
;;;1923       ga_en_e eDraw;
;;;1924   
;;;1925       stMem.u16SrcWidth = pstSrcImage->u16Width;
002a20  e1d400b4          LDRH     r0,[r4,#4]
002a24  e1cd02b4          STRH     r0,[sp,#0x24]
;;;1926       stMem.u16DstWidth = pstDstImage->u16Width;
002a28  e1d500b4          LDRH     r0,[r5,#4]
002a2c  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;1927       stMem.u16DotCnt   = pstSrcImage->u16Width;
002a30  e1d400b4          LDRH     r0,[r4,#4]
002a34  e1cd03b4          STRH     r0,[sp,#0x34]
;;;1928       stMem.u16LineCnt  = pstSrcImage->u16Height;
002a38  e1d400b6          LDRH     r0,[r4,#6]
002a3c  e1cd03b6          STRH     r0,[sp,#0x36]
;;;1929   
;;;1930       if (pstSrcImage->eFormat < (uint8_t)FMT_PNGRGBA32)
002a40  e5d4000c          LDRB     r0,[r4,#0xc]
002a44  e350001d          CMP      r0,#0x1d
002a48  aa00000d          BGE      |L1.10884|
;;;1931       {
;;;1932           u8PreviousOperation = 0U;
002a4c  e3a00000          MOV      r0,#0
002a50  e51f11fc          LDR      r1,|L1.10332|
002a54  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1933   
;;;1934           stMem.u32SrcAddr = pstSrcImage->u32Address;
002a58  e5940000          LDR      r0,[r4,#0]
002a5c  e58d0028          STR      r0,[sp,#0x28]
;;;1935           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
002a60  e5d4000c          LDRB     r0,[r4,#0xc]
002a64  e3500004          CMP      r0,#4
002a68  1a000002          BNE      |L1.10872|
;;;1936           {
;;;1937               stParam.eSrcFmt = GA_RGB16;
002a6c  e3a00000          MOV      r0,#0
002a70  e5cd000c          STRB     r0,[sp,#0xc]
002a74  ea000057          B        |L1.11224|
                  |L1.10872|
;;;1938           }
;;;1939           else
;;;1940           {
;;;1941               stParam.eSrcFmt = GA_RGBA32;
002a78  e3a00001          MOV      r0,#1
002a7c  e5cd000c          STRB     r0,[sp,#0xc]
002a80  ea000054          B        |L1.11224|
                  |L1.10884|
;;;1942           }
;;;1943       }
;;;1944       else
;;;1945       {
;;;1946           if (u8PreviousOperation == 0U)
002a84  e51f0230          LDR      r0,|L1.10332|
002a88  e5d00000          LDRB     r0,[r0,#0]  ; u8PreviousOperation
002a8c  e3500000          CMP      r0,#0
002a90  1a000000          BNE      |L1.10904|
;;;1947           {
;;;1948               vGfWaitForGA();
002a94  ebfffffe          BL       vGfWaitForGA
                  |L1.10904|
;;;1949           }
;;;1950           u8PreviousOperation = 1U;
002a98  e3a00001          MOV      r0,#1
002a9c  e51f1248          LDR      r1,|L1.10332|
002aa0  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;1951   
;;;1952           if (u8PNG_Decoder == 0U)
002aa4  e51f0260          LDR      r0,|L1.10316|
002aa8  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_Decoder
002aac  e3500000          CMP      r0,#0
002ab0  1a000023          BNE      |L1.11076|
;;;1953           {
;;;1954               /* Palette Stream */
;;;1955               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream6)
002ab4  e5940010          LDR      r0,[r4,#0x10]
002ab8  e3500000          CMP      r0,#0
002abc  0a000011          BEQ      |L1.11016|
002ac0  e59f0dd4          LDR      r0,|L1.14492|
002ac4  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream6
002ac8  e3500000          CMP      r0,#0
002acc  0a00000d          BEQ      |L1.11016|
;;;1956               {
;;;1957                   i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
002ad0  e1d400b6          LDRH     r0,[r4,#6]
002ad4  e1d410b4          LDRH     r1,[r4,#4]
002ad8  e58d0004          STR      r0,[sp,#4]
002adc  e58d1000          STR      r1,[sp,#0]
002ae0  e3a03004          MOV      r3,#4
002ae4  e3a02000          MOV      r2,#0
002ae8  e3a00006          MOV      r0,#6
002aec  e5941010          LDR      r1,[r4,#0x10]
002af0  ebfffffe          BL       i32PNG_SetUpStream
;;;1958                   vGfWaitForPNGDecode(PNG_STREAM_6);
002af4  e3a00006          MOV      r0,#6
002af8  ebfffffe          BL       vGfWaitForPNGDecode
;;;1959                   u8PNG_PaletteStream6 = 0U;
002afc  e3a00000          MOV      r0,#0
002b00  e59f1d94          LDR      r1,|L1.14492|
002b04  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream6
                  |L1.11016|
;;;1960               }
;;;1961               i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
002b08  e1d400b6          LDRH     r0,[r4,#6]
002b0c  e1d410b4          LDRH     r1,[r4,#4]
002b10  e58d0004          STR      r0,[sp,#4]
002b14  e58d1000          STR      r1,[sp,#0]
002b18  e3a03004          MOV      r3,#4
002b1c  e3a02000          MOV      r2,#0
002b20  e3a00006          MOV      r0,#6
002b24  e5941000          LDR      r1,[r4,#0]
002b28  ebfffffe          BL       i32PNG_SetUpStream
;;;1962               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_6;
002b2c  e3a00473          MOV      r0,#0x73000000
002b30  e58d0028          STR      r0,[sp,#0x28]
;;;1963               u8PNG_Decoder = 1U;
002b34  e3a00001          MOV      r0,#1
002b38  e51f12f4          LDR      r1,|L1.10316|
002b3c  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
002b40  ea000022          B        |L1.11216|
                  |L1.11076|
;;;1964           }
;;;1965           else
;;;1966           {
;;;1967               /* Palette Stream */
;;;1968               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream7)
002b44  e5940010          LDR      r0,[r4,#0x10]
002b48  e3500000          CMP      r0,#0
002b4c  0a000011          BEQ      |L1.11160|
002b50  e59f0d48          LDR      r0,|L1.14496|
002b54  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream7
002b58  e3500000          CMP      r0,#0
002b5c  0a00000d          BEQ      |L1.11160|
;;;1969               {
;;;1970                   i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
002b60  e1d400b6          LDRH     r0,[r4,#6]
002b64  e1d410b4          LDRH     r1,[r4,#4]
002b68  e58d0004          STR      r0,[sp,#4]
002b6c  e58d1000          STR      r1,[sp,#0]
002b70  e3a03004          MOV      r3,#4
002b74  e3a02000          MOV      r2,#0
002b78  e3a00007          MOV      r0,#7
002b7c  e5941010          LDR      r1,[r4,#0x10]
002b80  ebfffffe          BL       i32PNG_SetUpStream
;;;1971                   vGfWaitForPNGDecode(PNG_STREAM_7);
002b84  e3a00007          MOV      r0,#7
002b88  ebfffffe          BL       vGfWaitForPNGDecode
;;;1972                   u8PNG_PaletteStream7 = 0U;
002b8c  e3a00000          MOV      r0,#0
002b90  e59f1d08          LDR      r1,|L1.14496|
002b94  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream7
                  |L1.11160|
;;;1973               }
;;;1974               i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
002b98  e1d400b6          LDRH     r0,[r4,#6]
002b9c  e1d410b4          LDRH     r1,[r4,#4]
002ba0  e58d0004          STR      r0,[sp,#4]
002ba4  e58d1000          STR      r1,[sp,#0]
002ba8  e3a03004          MOV      r3,#4
002bac  e3a02000          MOV      r2,#0
002bb0  e3a00007          MOV      r0,#7
002bb4  e5941000          LDR      r1,[r4,#0]
002bb8  ebfffffe          BL       i32PNG_SetUpStream
;;;1975               stMem.u32SrcAddr = (uint32_t)PNG_VIRTUAL_START_ADDRESS_STREAM_7;
002bbc  e51f0374          LDR      r0,|L1.10320|
002bc0  e58d0028          STR      r0,[sp,#0x28]
;;;1976               u8PNG_Decoder = 0U;
002bc4  e3a00000          MOV      r0,#0
002bc8  e51f1384          LDR      r1,|L1.10316|
002bcc  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
                  |L1.11216|
;;;1977           }
;;;1978           stParam.eSrcFmt = GA_RGBA32;
002bd0  e3a00001          MOV      r0,#1
002bd4  e5cd000c          STRB     r0,[sp,#0xc]
                  |L1.11224|
;;;1979       }
;;;1980   
;;;1981       /* handle clip window */
;;;1982       eDraw = eHandleClipWindowBlit(pstDstImage, pstSrcImage->u16Width, pstSrcImage->u16Height, stGastate.eClipWndEn, i32PosX, i32PosY);
002bd8  e51f038c          LDR      r0,|L1.10324|
002bdc  e1cd60f0          STRD     r6,r7,[sp,#0]
002be0  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
002be4  e1d420b6          LDRH     r2,[r4,#6]
002be8  e1d410b4          LDRH     r1,[r4,#4]
002bec  e1a00005          MOV      r0,r5
002bf0  ebfffffe          BL       eHandleClipWindowBlit
002bf4  e1a08000          MOV      r8,r0
;;;1983   
;;;1984       /* Draw only if there is an overlapping clip window and destination area */
;;;1985       if(eDraw == GA_EN)
002bf8  e3580001          CMP      r8,#1
002bfc  1a000048          BNE      |L1.11556|
;;;1986       {
;;;1987           stParam.eClipWndEn = eDraw;
002c00  e5cd8015          STRB     r8,[sp,#0x15]
;;;1988           /* Dest. address calculation */
;;;1989           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
002c04  e5d5000c          LDRB     r0,[r5,#0xc]
002c08  e3500004          CMP      r0,#4
002c0c  1a000009          BNE      |L1.11320|
;;;1990           {
;;;1991               stMem.u32DstAddr = pstDstImage->u32Address + 2U*(uint32_t)pstDstImage->u16Width * i32PosY + 2U*i32PosX;
002c10  e5950000          LDR      r0,[r5,#0]
002c14  e1d510b4          LDRH     r1,[r5,#4]
002c18  e1a01081          LSL      r1,r1,#1
002c1c  e0200791          MLA      r0,r1,r7,r0
002c20  e3a01002          MOV      r1,#2
002c24  e0200691          MLA      r0,r1,r6,r0
002c28  e58d0030          STR      r0,[sp,#0x30]
;;;1992               stParam.eDestFmt = GA_RGB16;
002c2c  e3a00000          MOV      r0,#0
002c30  e5cd000d          STRB     r0,[sp,#0xd]
002c34  ea000008          B        |L1.11356|
                  |L1.11320|
;;;1993           }
;;;1994           else
;;;1995           {
;;;1996               stMem.u32DstAddr = pstDstImage->u32Address + 4U*(uint32_t)pstDstImage->u16Width * i32PosY + 4U*i32PosX;
002c38  e5950000          LDR      r0,[r5,#0]
002c3c  e1d510b4          LDRH     r1,[r5,#4]
002c40  e1a01101          LSL      r1,r1,#2
002c44  e0200791          MLA      r0,r1,r7,r0
002c48  e3a01004          MOV      r1,#4
002c4c  e0200691          MLA      r0,r1,r6,r0
002c50  e58d0030          STR      r0,[sp,#0x30]
;;;1997               stParam.eDestFmt = GA_RGBA32;
002c54  e3a00001          MOV      r0,#1
002c58  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.11356|
;;;1998           }
;;;1999   
;;;2000           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
002c5c  e51f0410          LDR      r0,|L1.10324|
002c60  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
002c64  e5cd000e          STRB     r0,[sp,#0xe]
;;;2001           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
002c68  e51f041c          LDR      r0,|L1.10324|
002c6c  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
002c70  e5cd000f          STRB     r0,[sp,#0xf]
;;;2002           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
002c74  e51f0428          LDR      r0,|L1.10324|
002c78  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
002c7c  e5cd0010          STRB     r0,[sp,#0x10]
;;;2003           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
002c80  e51f0434          LDR      r0,|L1.10324|
002c84  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
002c88  e5cd0011          STRB     r0,[sp,#0x11]
;;;2004   
;;;2005           stParam.eFadeMode      = stGastate.eFadeMode;
002c8c  e51f0440          LDR      r0,|L1.10324|
002c90  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
002c94  e5cd0014          STRB     r0,[sp,#0x14]
;;;2006           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
002c98  e51f044c          LDR      r0,|L1.10324|
002c9c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
002ca0  e5cd0017          STRB     r0,[sp,#0x17]
;;;2007   
;;;2008           stParam.eBlndOrder     = stGastate.eBlndOrder;
002ca4  e51f0458          LDR      r0,|L1.10324|
002ca8  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
002cac  e5cd0016          STRB     r0,[sp,#0x16]
;;;2009   
;;;2010           stParam.eTranspColEn   = stGastate.eTranspColEn;
002cb0  e51f0464          LDR      r0,|L1.10324|
002cb4  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
002cb8  e5cd0013          STRB     r0,[sp,#0x13]
;;;2011   
;;;2012           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
002cbc  e51f0470          LDR      r0,|L1.10324|
002cc0  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
002cc4  e58d0018          STR      r0,[sp,#0x18]
;;;2013           stParam.u16DstTransVal = stGastate.u16DstTransVal;
002cc8  e51f047c          LDR      r0,|L1.10324|
002ccc  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
002cd0  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2014   
;;;2015           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
002cd4  e51f0488          LDR      r0,|L1.10324|
002cd8  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
002cdc  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2016           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
002ce0  e51f0494          LDR      r0,|L1.10324|
002ce4  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
002ce8  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2017   
;;;2018           stParam.eRastOpEn      = stGastate.eRastOpEn;
002cec  e51f04a0          LDR      r0,|L1.10324|
002cf0  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
002cf4  e5cd0012          STRB     r0,[sp,#0x12]
;;;2019           stParam.eRastOpMode    = stGastate.eRastOpMode;
002cf8  e51f04ac          LDR      r0,|L1.10324|
002cfc  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
002d00  e5cd0020          STRB     r0,[sp,#0x20]
;;;2020           stParam.eRastOpValue   = stGastate.eRastOpValue;
002d04  e51f04b8          LDR      r0,|L1.10324|
002d08  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
002d0c  e5cd0021          STRB     r0,[sp,#0x21]
;;;2021   
;;;2022           i32Blit_BlendRGB(&stMem, &stParam, pstWriteList);
002d10  e51f04c0          LDR      r0,|L1.10328|
002d14  e28d100c          ADD      r1,sp,#0xc
002d18  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
002d1c  e28d0024          ADD      r0,sp,#0x24
002d20  ebfffffe          BL       i32Blit_BlendRGB
                  |L1.11556|
;;;2023       }
;;;2024   }
002d24  e28dd038          ADD      sp,sp,#0x38
002d28  e8bd81f0          POP      {r4-r8,pc}
;;;2025   
                          ENDP

                  u32GfBuffBlendBitmapFull PROC
;;;1857   
;;;1858   uint32_t u32GfBuffBlendBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
002d2c  e92d41f0          PUSH     {r4-r8,lr}
;;;1859                                     int32_t i32PosX, int32_t i32PosY)
;;;1860   {
002d30  e1a05000          MOV      r5,r0
002d34  e1a06001          MOV      r6,r1
002d38  e1a07002          MOV      r7,r2
002d3c  e1a08003          MOV      r8,r3
;;;1861       uint32_t u32Error;
;;;1862   
;;;1863       if (pstSrcImage->eFormat <= (uint8_t)FMT_RGB16)
002d40  e5d5000c          LDRB     r0,[r5,#0xc]
002d44  e3500004          CMP      r0,#4
002d48  ca000019          BGT      |L1.11700|
;;;1864       {
;;;1865           switch (pstSrcImage->eFormat)
002d4c  e5d5000c          LDRB     r0,[r5,#0xc]
002d50  e3500001          CMP      r0,#1
002d54  0a000002          BEQ      |L1.11620|
002d58  e3500004          CMP      r0,#4
002d5c  1a000010          BNE      |L1.11684|
002d60  ea000007          B        |L1.11652|
                  |L1.11620|
;;;1866           {
;;;1867               case FMT_RGBA32:
002d64  e320f000          NOP      
;;;1868                   vGfBuffBlendBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002d68  e1a03008          MOV      r3,r8
002d6c  e1a02007          MOV      r2,r7
002d70  e1a01006          MOV      r1,r6
002d74  e1a00005          MOV      r0,r5
002d78  ebfffffe          BL       vGfBuffBlendBitmapFull
;;;1869                   u32Error = 0U;
002d7c  e3a04000          MOV      r4,#0
;;;1870                   break;
002d80  ea00000a          B        |L1.11696|
                  |L1.11652|
;;;1871               case FMT_RGB16:
002d84  e320f000          NOP      
;;;1872                   vGfBuffBlendBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002d88  e1a03008          MOV      r3,r8
002d8c  e1a02007          MOV      r2,r7
002d90  e1a01006          MOV      r1,r6
002d94  e1a00005          MOV      r0,r5
002d98  ebfffffe          BL       vGfBuffBlendBitmapFull
;;;1873                   u32Error = 0U;
002d9c  e3a04000          MOV      r4,#0
;;;1874                   break;
002da0  ea000002          B        |L1.11696|
                  |L1.11684|
;;;1875               default: u32Error = 1U;
002da4  e320f000          NOP      
002da8  e3a04001          MOV      r4,#1
;;;1876                   break;
002dac  e320f000          NOP      
                  |L1.11696|
002db0  ea000037          B        |L1.11924|
                  |L1.11700|
;;;1877           }
;;;1878       }
;;;1879       else
;;;1880       {
;;;1881           if (pstSrcImage->eFormat >= (uint8_t)FMT_PNGRGBA32)
002db4  e5d5000c          LDRB     r0,[r5,#0xc]
002db8  e350001d          CMP      r0,#0x1d
002dbc  ba000006          BLT      |L1.11740|
;;;1882           {
;;;1883               vGfBuffBlendBitmapFull(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002dc0  e1a03008          MOV      r3,r8
002dc4  e1a02007          MOV      r2,r7
002dc8  e1a01006          MOV      r1,r6
002dcc  e1a00005          MOV      r0,r5
002dd0  ebfffffe          BL       vGfBuffBlendBitmapFull
;;;1884               u32Error = 0U;
002dd4  e3a04000          MOV      r4,#0
002dd8  ea00002d          B        |L1.11924|
                  |L1.11740|
;;;1885           }
;;;1886           else
;;;1887           {
;;;1888               switch (pstSrcImage->eFormat)
002ddc  e5d5000c          LDRB     r0,[r5,#0xc]
002de0  e350000f          CMP      r0,#0xf
002de4  0a000006          BEQ      |L1.11780|
002de8  e3500010          CMP      r0,#0x10
002dec  0a00000c          BEQ      |L1.11812|
002df0  e3500011          CMP      r0,#0x11
002df4  0a000012          BEQ      |L1.11844|
002df8  e3500012          CMP      r0,#0x12
002dfc  1a000020          BNE      |L1.11908|
002e00  ea000017          B        |L1.11876|
                  |L1.11780|
;;;1889               {
;;;1890                   case FMT_RLERGBA32:
002e04  e320f000          NOP      
;;;1891                       vGfBuffBlendBitmapRLE32(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002e08  e1a03008          MOV      r3,r8
002e0c  e1a02007          MOV      r2,r7
002e10  e1a01006          MOV      r1,r6
002e14  e1a00005          MOV      r0,r5
002e18  ebfffffe          BL       vGfBuffBlendBitmapRLE32
;;;1892                       u32Error = 0U;
002e1c  e3a04000          MOV      r4,#0
;;;1893                       break;
002e20  ea00001a          B        |L1.11920|
                  |L1.11812|
;;;1894                   case FMT_RLERGBA24:
002e24  e320f000          NOP      
;;;1895                       vGfBuffBlendBitmapRLE24A(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002e28  e1a03008          MOV      r3,r8
002e2c  e1a02007          MOV      r2,r7
002e30  e1a01006          MOV      r1,r6
002e34  e1a00005          MOV      r0,r5
002e38  ebfffffe          BL       vGfBuffBlendBitmapRLE24A
;;;1896                       u32Error = 0U;
002e3c  e3a04000          MOV      r4,#0
;;;1897                       break;
002e40  ea000012          B        |L1.11920|
                  |L1.11844|
;;;1898                   case FMT_RLERGB24:
002e44  e320f000          NOP      
;;;1899                       vGfBuffBlendBitmapRLE24(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002e48  e1a03008          MOV      r3,r8
002e4c  e1a02007          MOV      r2,r7
002e50  e1a01006          MOV      r1,r6
002e54  e1a00005          MOV      r0,r5
002e58  ebfffffe          BL       vGfBuffBlendBitmapRLE24
;;;1900                       u32Error = 0U;
002e5c  e3a04000          MOV      r4,#0
;;;1901                       break;
002e60  ea00000a          B        |L1.11920|
                  |L1.11876|
;;;1902                   case FMT_RLERGB16:
002e64  e320f000          NOP      
;;;1903                       vGfBuffBlendBitmapRLE16(pstSrcImage, pstDstImage, i32PosX, i32PosY);
002e68  e1a03008          MOV      r3,r8
002e6c  e1a02007          MOV      r2,r7
002e70  e1a01006          MOV      r1,r6
002e74  e1a00005          MOV      r0,r5
002e78  ebfffffe          BL       vGfBuffBlendBitmapRLE16
;;;1904                       u32Error = 0U;
002e7c  e3a04000          MOV      r4,#0
;;;1905                       break;
002e80  ea000002          B        |L1.11920|
                  |L1.11908|
;;;1906                   default: u32Error = 1U;
002e84  e320f000          NOP      
002e88  e3a04001          MOV      r4,#1
;;;1907                       break;
002e8c  e320f000          NOP      
                  |L1.11920|
002e90  e320f000          NOP                            ;1893
                  |L1.11924|
;;;1908               }
;;;1909           }
;;;1910       }
;;;1911   
;;;1912       return u32Error;
002e94  e1a00004          MOV      r0,r4
;;;1913   }
002e98  e8bd81f0          POP      {r4-r8,pc}
;;;1914   
                          ENDP

                  vGfBuffBlendBitmapPart PROC
;;;2068   
;;;2069   void vGfBuffBlendBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
002e9c  e92d43f0          PUSH     {r4-r9,lr}
;;;2070                               uint32_t u32PosX, uint32_t u32PosY)
;;;2071   {
002ea0  e24dd034          SUB      sp,sp,#0x34
002ea4  e1a04000          MOV      r4,r0
002ea8  e1a06001          MOV      r6,r1
002eac  e1a05002          MOV      r5,r2
002eb0  e1a07003          MOV      r7,r3
002eb4  e59d9050          LDR      r9,[sp,#0x50]
;;;2072       blit_mem_st     stMem;
;;;2073       blit_BlndRgb_st stParam;
;;;2074       ga_en_e eDraw;
;;;2075   
;;;2076       stMem.u16SrcWidth = pstSrcImage->u16Width;
002eb8  e1d400b4          LDRH     r0,[r4,#4]
002ebc  e1cd02b0          STRH     r0,[sp,#0x20]
;;;2077       stMem.u16DstWidth = pstDstImage->u16Width;
002ec0  e1d600b4          LDRH     r0,[r6,#4]
002ec4  e1cd02b8          STRH     r0,[sp,#0x28]
;;;2078       stMem.u16DotCnt   = pstImgPart->u16Width;
002ec8  e1d500b4          LDRH     r0,[r5,#4]
002ecc  e1cd03b0          STRH     r0,[sp,#0x30]
;;;2079       stMem.u16LineCnt  = pstImgPart->u16Height;
002ed0  e1d500b6          LDRH     r0,[r5,#6]
002ed4  e1cd03b2          STRH     r0,[sp,#0x32]
;;;2080   
;;;2081       if(pstSrcImage->eFormat < FMT_PNGRGBA32)
002ed8  e5d4000c          LDRB     r0,[r4,#0xc]
002edc  e350001d          CMP      r0,#0x1d
002ee0  aa00001d          BGE      |L1.12124|
;;;2082       {
;;;2083           u8PreviousOperation = 0U;
002ee4  e3a00000          MOV      r0,#0
002ee8  e51f1694          LDR      r1,|L1.10332|
002eec  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2084   
;;;2085           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
002ef0  e5d4000c          LDRB     r0,[r4,#0xc]
002ef4  e3500004          CMP      r0,#4
002ef8  1a00000b          BNE      |L1.12076|
;;;2086           {
;;;2087               stMem.u32SrcAddr = pstSrcImage->u32Address + 2U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 2U*pstImgPart->u16SrcOffsX;
002efc  e5940000          LDR      r0,[r4,#0]
002f00  e1d410b4          LDRH     r1,[r4,#4]
002f04  e1a01081          LSL      r1,r1,#1
002f08  e1d520b2          LDRH     r2,[r5,#2]
002f0c  e0200291          MLA      r0,r1,r2,r0
002f10  e1d510b0          LDRH     r1,[r5,#0]
002f14  e3a02002          MOV      r2,#2
002f18  e0200192          MLA      r0,r2,r1,r0
002f1c  e58d0024          STR      r0,[sp,#0x24]
;;;2088               stParam.eSrcFmt  = GA_RGB16;
002f20  e3a00000          MOV      r0,#0
002f24  e5cd0008          STRB     r0,[sp,#8]
002f28  ea00006f          B        |L1.12524|
                  |L1.12076|
;;;2089           }
;;;2090           else
;;;2091           {
;;;2092               stMem.u32SrcAddr = pstSrcImage->u32Address + 4U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 4U*pstImgPart->u16SrcOffsX;
002f2c  e5940000          LDR      r0,[r4,#0]
002f30  e1d410b4          LDRH     r1,[r4,#4]
002f34  e1a01101          LSL      r1,r1,#2
002f38  e1d520b2          LDRH     r2,[r5,#2]
002f3c  e0200291          MLA      r0,r1,r2,r0
002f40  e1d510b0          LDRH     r1,[r5,#0]
002f44  e3a02004          MOV      r2,#4
002f48  e0200192          MLA      r0,r2,r1,r0
002f4c  e58d0024          STR      r0,[sp,#0x24]
;;;2093               stParam.eSrcFmt  = GA_RGBA32;
002f50  e3a00001          MOV      r0,#1
002f54  e5cd0008          STRB     r0,[sp,#8]
002f58  ea000063          B        |L1.12524|
                  |L1.12124|
;;;2094           }
;;;2095       }
;;;2096       else
;;;2097       {
;;;2098           if (u8PreviousOperation == 0U)
002f5c  e51f0708          LDR      r0,|L1.10332|
002f60  e5d00000          LDRB     r0,[r0,#0]  ; u8PreviousOperation
002f64  e3500000          CMP      r0,#0
002f68  1a000000          BNE      |L1.12144|
;;;2099           {
;;;2100               vGfWaitForGA();
002f6c  ebfffffe          BL       vGfWaitForGA
                  |L1.12144|
;;;2101           }
;;;2102           u8PreviousOperation = 1U;
002f70  e3a00001          MOV      r0,#1
002f74  e51f1720          LDR      r1,|L1.10332|
002f78  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2103   
;;;2104           if (u8PNG_Decoder == 0U)
002f7c  e51f0738          LDR      r0,|L1.10316|
002f80  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_Decoder
002f84  e3500000          CMP      r0,#0
002f88  1a00002a          BNE      |L1.12344|
;;;2105           {
;;;2106               /* Palette Stream */
;;;2107               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream6)
002f8c  e5940010          LDR      r0,[r4,#0x10]
002f90  e3500000          CMP      r0,#0
002f94  0a000011          BEQ      |L1.12256|
002f98  e59f08fc          LDR      r0,|L1.14492|
002f9c  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream6
002fa0  e3500000          CMP      r0,#0
002fa4  0a00000d          BEQ      |L1.12256|
;;;2108               {
;;;2109                   i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
002fa8  e1d400b6          LDRH     r0,[r4,#6]
002fac  e1d410b4          LDRH     r1,[r4,#4]
002fb0  e58d0004          STR      r0,[sp,#4]
002fb4  e58d1000          STR      r1,[sp,#0]
002fb8  e3a03004          MOV      r3,#4
002fbc  e3a02000          MOV      r2,#0
002fc0  e3a00006          MOV      r0,#6
002fc4  e5941010          LDR      r1,[r4,#0x10]
002fc8  ebfffffe          BL       i32PNG_SetUpStream
;;;2110                   vGfWaitForPNGDecode(PNG_STREAM_6);
002fcc  e3a00006          MOV      r0,#6
002fd0  ebfffffe          BL       vGfWaitForPNGDecode
;;;2111                   u8PNG_PaletteStream6 = 0U;
002fd4  e3a00000          MOV      r0,#0
002fd8  e59f18bc          LDR      r1,|L1.14492|
002fdc  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream6
                  |L1.12256|
;;;2112               }
;;;2113               i32PNG_SetUpStream(PNG_STREAM_6, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, pstSrcImage->u16Width, pstSrcImage->u16Height);
002fe0  e1d400b6          LDRH     r0,[r4,#6]
002fe4  e1d410b4          LDRH     r1,[r4,#4]
002fe8  e58d0004          STR      r0,[sp,#4]
002fec  e58d1000          STR      r1,[sp,#0]
002ff0  e3a03004          MOV      r3,#4
002ff4  e3a02000          MOV      r2,#0
002ff8  e3a00006          MOV      r0,#6
002ffc  e5941000          LDR      r1,[r4,#0]
003000  ebfffffe          BL       i32PNG_SetUpStream
;;;2114               stMem.u32SrcAddr = PNG_VIRTUAL_START_ADDRESS_STREAM_6 + 4U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 4U*pstImgPart->u16SrcOffsX;
003004  e1d400b4          LDRH     r0,[r4,#4]
003008  e1a00100          LSL      r0,r0,#2
00300c  e1d510b2          LDRH     r1,[r5,#2]
003010  e0000190          MUL      r0,r0,r1
003014  e2800473          ADD      r0,r0,#0x73000000
003018  e1d510b0          LDRH     r1,[r5,#0]
00301c  e3a02004          MOV      r2,#4
003020  e0200192          MLA      r0,r2,r1,r0
003024  e58d0024          STR      r0,[sp,#0x24]
;;;2115               u8PNG_Decoder = 1U;
003028  e3a00001          MOV      r0,#1
00302c  e51f17e8          LDR      r1,|L1.10316|
003030  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
003034  ea00002a          B        |L1.12516|
                  |L1.12344|
;;;2116           }
;;;2117           else
;;;2118           {
;;;2119               /* Palette Stream */
;;;2120               if(pstSrcImage->u32Paletteaddress && u8PNG_PaletteStream7)
003038  e5940010          LDR      r0,[r4,#0x10]
00303c  e3500000          CMP      r0,#0
003040  0a000011          BEQ      |L1.12428|
003044  e59f0854          LDR      r0,|L1.14496|
003048  e5d00000          LDRB     r0,[r0,#0]  ; u8PNG_PaletteStream7
00304c  e3500000          CMP      r0,#0
003050  0a00000d          BEQ      |L1.12428|
;;;2121               {
;;;2122                   i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Paletteaddress, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, (uint32_t)pstSrcImage->u16Width, (uint32_t)pstSrcImage->u16Height);
003054  e1d400b6          LDRH     r0,[r4,#6]
003058  e1d410b4          LDRH     r1,[r4,#4]
00305c  e58d0004          STR      r0,[sp,#4]
003060  e58d1000          STR      r1,[sp,#0]
003064  e3a03004          MOV      r3,#4
003068  e3a02000          MOV      r2,#0
00306c  e3a00007          MOV      r0,#7
003070  e5941010          LDR      r1,[r4,#0x10]
003074  ebfffffe          BL       i32PNG_SetUpStream
;;;2123                   vGfWaitForPNGDecode(PNG_STREAM_7);
003078  e3a00007          MOV      r0,#7
00307c  ebfffffe          BL       vGfWaitForPNGDecode
;;;2124                   u8PNG_PaletteStream7 = 0U;
003080  e3a00000          MOV      r0,#0
003084  e59f1814          LDR      r1,|L1.14496|
003088  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_PaletteStream7
                  |L1.12428|
;;;2125               }
;;;2126               i32PNG_SetUpStream(PNG_STREAM_7, pstSrcImage->u32Address, PNG_SINGLE_DECODE_MODE, PNG_OUTPUT_FORMAT_RGBA32, pstSrcImage->u16Width, pstSrcImage->u16Height);
00308c  e1d400b6          LDRH     r0,[r4,#6]
003090  e1d410b4          LDRH     r1,[r4,#4]
003094  e58d0004          STR      r0,[sp,#4]
003098  e58d1000          STR      r1,[sp,#0]
00309c  e3a03004          MOV      r3,#4
0030a0  e3a02000          MOV      r2,#0
0030a4  e3a00007          MOV      r0,#7
0030a8  e5941000          LDR      r1,[r4,#0]
0030ac  ebfffffe          BL       i32PNG_SetUpStream
;;;2127               stMem.u32SrcAddr = PNG_VIRTUAL_START_ADDRESS_STREAM_7 + 4U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 4U*pstImgPart->u16SrcOffsX;
0030b0  e1d400b4          LDRH     r0,[r4,#4]
0030b4  e1a00100          LSL      r0,r0,#2
0030b8  e1d510b2          LDRH     r1,[r5,#2]
0030bc  e0000190          MUL      r0,r0,r1
0030c0  e2800101          ADD      r0,r0,#0x40000000
0030c4  e28005ce          ADD      r0,r0,#0x33800000
0030c8  e1d510b0          LDRH     r1,[r5,#0]
0030cc  e3a02004          MOV      r2,#4
0030d0  e0200192          MLA      r0,r2,r1,r0
0030d4  e58d0024          STR      r0,[sp,#0x24]
;;;2128               u8PNG_Decoder = 0U;
0030d8  e3a00000          MOV      r0,#0
0030dc  e51f1898          LDR      r1,|L1.10316|
0030e0  e5c10000          STRB     r0,[r1,#0]  ; u8PNG_Decoder
                  |L1.12516|
;;;2129           }
;;;2130           stParam.eSrcFmt = GA_RGBA32;
0030e4  e3a00001          MOV      r0,#1
0030e8  e5cd0008          STRB     r0,[sp,#8]
                  |L1.12524|
;;;2131       }
;;;2132   
;;;2133       /* handle clip window */
;;;2134       eDraw = eHandleClipWindowBlit(pstDstImage, pstImgPart->u16Width, pstImgPart->u16Height, stGastate.eClipWndEn, u32PosX, u32PosY);
0030ec  e51f08a0          LDR      r0,|L1.10324|
0030f0  e88d0280          STM      sp,{r7,r9}
0030f4  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0030f8  e1d520b6          LDRH     r2,[r5,#6]
0030fc  e1d510b4          LDRH     r1,[r5,#4]
003100  e1a00006          MOV      r0,r6
003104  ebfffffe          BL       eHandleClipWindowBlit
003108  e1a08000          MOV      r8,r0
;;;2135   
;;;2136       /* Draw only if there is an overlapping clip window and destination area */
;;;2137       if(eDraw == GA_EN)
00310c  e3580001          CMP      r8,#1
003110  1a000048          BNE      |L1.12856|
;;;2138       {
;;;2139           stParam.eClipWndEn = eDraw;
003114  e5cd8011          STRB     r8,[sp,#0x11]
;;;2140           /* Dest. address calculation */
;;;2141           if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
003118  e5d6000c          LDRB     r0,[r6,#0xc]
00311c  e3500004          CMP      r0,#4
003120  1a000009          BNE      |L1.12620|
;;;2142           {
;;;2143               stMem.u32DstAddr = pstDstImage->u32Address + 2U*pstDstImage->u16Width * u32PosY + 2U*u32PosX;
003124  e5960000          LDR      r0,[r6,#0]
003128  e1d610b4          LDRH     r1,[r6,#4]
00312c  e1a01081          LSL      r1,r1,#1
003130  e0200991          MLA      r0,r1,r9,r0
003134  e3a01002          MOV      r1,#2
003138  e0200791          MLA      r0,r1,r7,r0
00313c  e58d002c          STR      r0,[sp,#0x2c]
;;;2144               stParam.eDestFmt = GA_RGB16;
003140  e3a00000          MOV      r0,#0
003144  e5cd0009          STRB     r0,[sp,#9]
003148  ea000008          B        |L1.12656|
                  |L1.12620|
;;;2145           }
;;;2146           else
;;;2147           {
;;;2148               stMem.u32DstAddr = pstDstImage->u32Address + 4U*pstDstImage->u16Width * u32PosY + 4U*u32PosX;
00314c  e5960000          LDR      r0,[r6,#0]
003150  e1d610b4          LDRH     r1,[r6,#4]
003154  e1a01101          LSL      r1,r1,#2
003158  e0200991          MLA      r0,r1,r9,r0
00315c  e3a01004          MOV      r1,#4
003160  e0200791          MLA      r0,r1,r7,r0
003164  e58d002c          STR      r0,[sp,#0x2c]
;;;2149               stParam.eDestFmt = GA_RGBA32;
003168  e3a00001          MOV      r0,#1
00316c  e5cd0009          STRB     r0,[sp,#9]
                  |L1.12656|
;;;2150           }
;;;2151   
;;;2152           stParam.eRedChPrtEn    = stGastate.eRedChPrtEn;
003170  e51f0924          LDR      r0,|L1.10324|
003174  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
003178  e5cd000a          STRB     r0,[sp,#0xa]
;;;2153           stParam.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
00317c  e51f0930          LDR      r0,|L1.10324|
003180  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
003184  e5cd000b          STRB     r0,[sp,#0xb]
;;;2154           stParam.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
003188  e51f093c          LDR      r0,|L1.10324|
00318c  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
003190  e5cd000c          STRB     r0,[sp,#0xc]
;;;2155           stParam.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
003194  e51f0948          LDR      r0,|L1.10324|
003198  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00319c  e5cd000d          STRB     r0,[sp,#0xd]
;;;2156   
;;;2157           stParam.eFadeMode      = stGastate.eFadeMode;
0031a0  e51f0954          LDR      r0,|L1.10324|
0031a4  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0031a8  e5cd0010          STRB     r0,[sp,#0x10]
;;;2158           stParam.u8FadingFctr   = stGastate.u8FadingFctr;
0031ac  e51f0960          LDR      r0,|L1.10324|
0031b0  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0031b4  e5cd0013          STRB     r0,[sp,#0x13]
;;;2159   
;;;2160           stParam.eBlndOrder     = stGastate.eBlndOrder;
0031b8  e51f096c          LDR      r0,|L1.10324|
0031bc  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
0031c0  e5cd0012          STRB     r0,[sp,#0x12]
;;;2161   
;;;2162           stParam.eTranspColEn   = stGastate.eTranspColEn;
0031c4  e51f0978          LDR      r0,|L1.10324|
0031c8  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
0031cc  e5cd000f          STRB     r0,[sp,#0xf]
;;;2163           stParam.u32SrcTransVal = stGastate.u32SrcTransVal;
0031d0  e51f0984          LDR      r0,|L1.10324|
0031d4  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
0031d8  e58d0014          STR      r0,[sp,#0x14]
;;;2164           stParam.u16DstTransVal = stGastate.u16DstTransVal;
0031dc  e51f0990          LDR      r0,|L1.10324|
0031e0  e1d001b4          LDRH     r0,[r0,#0x14]  ; stGastate
0031e4  e1cd01b8          STRH     r0,[sp,#0x18]
;;;2165   
;;;2166           stParam.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
0031e8  e51f099c          LDR      r0,|L1.10324|
0031ec  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0031f0  e5cd001a          STRB     r0,[sp,#0x1a]
;;;2167           stParam.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0031f4  e51f09a8          LDR      r0,|L1.10324|
0031f8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0031fc  e5cd001b          STRB     r0,[sp,#0x1b]
;;;2168   
;;;2169           stParam.eRastOpEn      = stGastate.eRastOpEn;
003200  e51f09b4          LDR      r0,|L1.10324|
003204  e5d00020          LDRB     r0,[r0,#0x20]  ; stGastate
003208  e5cd000e          STRB     r0,[sp,#0xe]
;;;2170           stParam.eRastOpMode    = stGastate.eRastOpMode;
00320c  e51f09c0          LDR      r0,|L1.10324|
003210  e5d00021          LDRB     r0,[r0,#0x21]  ; stGastate
003214  e5cd001c          STRB     r0,[sp,#0x1c]
;;;2171           stParam.eRastOpValue   = stGastate.eRastOpValue;
003218  e51f09cc          LDR      r0,|L1.10324|
00321c  e5d00022          LDRB     r0,[r0,#0x22]  ; stGastate
003220  e5cd001d          STRB     r0,[sp,#0x1d]
;;;2172   
;;;2173           i32Blit_BlendRGB(&stMem, &stParam, pstWriteList);
003224  e51f09d4          LDR      r0,|L1.10328|
003228  e28d1008          ADD      r1,sp,#8
00322c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
003230  e28d0020          ADD      r0,sp,#0x20
003234  ebfffffe          BL       i32Blit_BlendRGB
                  |L1.12856|
;;;2174       }
;;;2175   }
003238  e28dd034          ADD      sp,sp,#0x34
00323c  e8bd83f0          POP      {r4-r9,pc}
;;;2176   
                          ENDP

                  u32GfBuffBlendBitmapPart PROC
;;;2028   
;;;2029   uint32_t u32GfBuffBlendBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
003240  e92d43f8          PUSH     {r3-r9,lr}
;;;2030                                     uint32_t u32PosX, uint32_t u32PosY)
;;;2031   {
003244  e1a05000          MOV      r5,r0
003248  e1a07001          MOV      r7,r1
00324c  e1a08002          MOV      r8,r2
003250  e1a09003          MOV      r9,r3
003254  e59d6020          LDR      r6,[sp,#0x20]
;;;2032       uint32_t u32Error;
;;;2033   
;;;2034       if (pstSrcImage->eFormat <= (uint8_t)FMT_RGB16)
003258  e5d5000c          LDRB     r0,[r5,#0xc]
00325c  e3500004          CMP      r0,#4
003260  ca00001b          BGT      |L1.13012|
;;;2035       {
;;;2036           switch (pstSrcImage->eFormat)
003264  e5d5000c          LDRB     r0,[r5,#0xc]
003268  e3500001          CMP      r0,#1
00326c  0a000002          BEQ      |L1.12924|
003270  e3500004          CMP      r0,#4
003274  1a000012          BNE      |L1.12996|
003278  ea000008          B        |L1.12960|
                  |L1.12924|
;;;2037           {
;;;2038               case FMT_RGBA32:
00327c  e320f000          NOP      
;;;2039                   vGfBuffBlendBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
003280  e1a03009          MOV      r3,r9
003284  e1a02008          MOV      r2,r8
003288  e1a01007          MOV      r1,r7
00328c  e1a00005          MOV      r0,r5
003290  e58d6000          STR      r6,[sp,#0]
003294  ebfffffe          BL       vGfBuffBlendBitmapPart
;;;2040                   u32Error = 0U;
003298  e3a04000          MOV      r4,#0
;;;2041                   break;
00329c  ea00000b          B        |L1.13008|
                  |L1.12960|
;;;2042               case FMT_RGB16:
0032a0  e320f000          NOP      
;;;2043                   vGfBuffBlendBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
0032a4  e1a03009          MOV      r3,r9
0032a8  e1a02008          MOV      r2,r8
0032ac  e1a01007          MOV      r1,r7
0032b0  e1a00005          MOV      r0,r5
0032b4  e58d6000          STR      r6,[sp,#0]
0032b8  ebfffffe          BL       vGfBuffBlendBitmapPart
;;;2044                   u32Error = 0U;
0032bc  e3a04000          MOV      r4,#0
;;;2045                   break;
0032c0  ea000002          B        |L1.13008|
                  |L1.12996|
;;;2046               default: u32Error = 1U;
0032c4  e320f000          NOP      
0032c8  e3a04001          MOV      r4,#1
;;;2047                   break;
0032cc  e320f000          NOP      
                  |L1.13008|
0032d0  ea00000b          B        |L1.13060|
                  |L1.13012|
;;;2048           }
;;;2049       }
;;;2050       else
;;;2051       {
;;;2052           if (pstSrcImage->eFormat >= FMT_PNGRGBA32)
0032d4  e5d5000c          LDRB     r0,[r5,#0xc]
0032d8  e350001d          CMP      r0,#0x1d
0032dc  ba000007          BLT      |L1.13056|
;;;2053           {
;;;2054               vGfBuffBlendBitmapPart(pstSrcImage, pstDstImage, pstImgPart, u32PosX, u32PosY);
0032e0  e1a03009          MOV      r3,r9
0032e4  e1a02008          MOV      r2,r8
0032e8  e1a01007          MOV      r1,r7
0032ec  e1a00005          MOV      r0,r5
0032f0  e58d6000          STR      r6,[sp,#0]
0032f4  ebfffffe          BL       vGfBuffBlendBitmapPart
;;;2055               u32Error = 0U;
0032f8  e3a04000          MOV      r4,#0
0032fc  ea000000          B        |L1.13060|
                  |L1.13056|
;;;2056           }
;;;2057           else
;;;2058           {
;;;2059               u32Error = 1U;
003300  e3a04001          MOV      r4,#1
                  |L1.13060|
;;;2060           }
;;;2061       }
;;;2062   
;;;2063       return u32Error;
003304  e1a00004          MOV      r0,r4
;;;2064   }
003308  e8bd83f8          POP      {r3-r9,pc}
;;;2065   
                          ENDP

                  f32CheckAngle PROC
;;;2427   
;;;2428   static float32_t f32CheckAngle(float32_t f32Angle)
00330c  e92d4ff0          PUSH     {r4-r11,lr}
;;;2429   {
003310  e24dd01c          SUB      sp,sp,#0x1c
003314  e1a0a000          MOV      r10,r0
;;;2430       float32_t f32AngleLocal = f32Angle;
003318  e58da018          STR      r10,[sp,#0x18]
;;;2431   
;;;2432       if(f32AngleLocal < 0.0)
00331c  e59d0018          LDR      r0,[sp,#0x18]
003320  ebfffffe          BL       __aeabi_f2d
003324  e1a04000          MOV      r4,r0
003328  e3a02000          MOV      r2,#0
00332c  e1a03002          MOV      r3,r2
003330  ebfffffe          BL       __aeabi_cdcmple
003334  2a00001f          BCS      |L1.13240|
;;;2433       {
;;;2434           /* modulo operation for float */
;;;2435           f32AngleLocal = f32AngleLocal - ((int)(f32AngleLocal/360.0)) * 360.0;
003338  e59d0018          LDR      r0,[sp,#0x18]
00333c  ebfffffe          BL       __aeabi_f2d
003340  e1a08000          MOV      r8,r0
003344  e3a02000          MOV      r2,#0
003348  e59f3554          LDR      r3,|L1.14500|
00334c  ebfffffe          BL       __aeabi_ddiv
003350  e1a06000          MOV      r6,r0
003354  ebfffffe          BL       __aeabi_d2iz
003358  e1a0b000          MOV      r11,r0
00335c  ebfffffe          BL       __aeabi_i2d
003360  e1a04000          MOV      r4,r0
003364  e3a02000          MOV      r2,#0
003368  e59f3534          LDR      r3,|L1.14500|
00336c  ebfffffe          BL       __aeabi_dmul
003370  e1cd00f8          STRD     r0,r1,[sp,#8]
003374  e59d0018          LDR      r0,[sp,#0x18]
003378  ebfffffe          BL       __aeabi_f2d
00337c  e1cd00f0          STRD     r0,r1,[sp,#0]
003380  e1cd20d8          LDRD     r2,r3,[sp,#8]
003384  ebfffffe          BL       __aeabi_dsub
003388  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00338c  ebfffffe          BL       __aeabi_d2f
003390  e58d0018          STR      r0,[sp,#0x18]
;;;2436           f32AngleLocal = f32AngleLocal + 360.0;
003394  e59d0018          LDR      r0,[sp,#0x18]
003398  ebfffffe          BL       __aeabi_f2d
00339c  e1a04000          MOV      r4,r0
0033a0  e3a02000          MOV      r2,#0
0033a4  e59f34f8          LDR      r3,|L1.14500|
0033a8  ebfffffe          BL       __aeabi_dadd
0033ac  e1a06000          MOV      r6,r0
0033b0  ebfffffe          BL       __aeabi_d2f
0033b4  e58d0018          STR      r0,[sp,#0x18]
                  |L1.13240|
;;;2437       }
;;;2438   	
;;;2439       if(f32AngleLocal > 360.0)
0033b8  e59d0018          LDR      r0,[sp,#0x18]
0033bc  ebfffffe          BL       __aeabi_f2d
0033c0  e1a04000          MOV      r4,r0
0033c4  e3a02000          MOV      r2,#0
0033c8  e59f34d4          LDR      r3,|L1.14500|
0033cc  ebfffffe          BL       __aeabi_cdrcmple
0033d0  2a000016          BCS      |L1.13360|
;;;2440       {
;;;2441           /* modulo operation for float */
;;;2442           f32AngleLocal = f32AngleLocal - ((int)(f32AngleLocal/360.0)) * 360.0;
0033d4  e59d0018          LDR      r0,[sp,#0x18]
0033d8  ebfffffe          BL       __aeabi_f2d
0033dc  e1a06000          MOV      r6,r0
0033e0  e3a02000          MOV      r2,#0
0033e4  e59f34b8          LDR      r3,|L1.14500|
0033e8  ebfffffe          BL       __aeabi_ddiv
0033ec  e1cd00f0          STRD     r0,r1,[sp,#0]
0033f0  ebfffffe          BL       __aeabi_d2iz
0033f4  e1a0b000          MOV      r11,r0
0033f8  ebfffffe          BL       __aeabi_i2d
0033fc  e1a04000          MOV      r4,r0
003400  e3a02000          MOV      r2,#0
003404  e59f3498          LDR      r3,|L1.14500|
003408  ebfffffe          BL       __aeabi_dmul
00340c  e1cd00f8          STRD     r0,r1,[sp,#8]
003410  e59d0018          LDR      r0,[sp,#0x18]
003414  ebfffffe          BL       __aeabi_f2d
003418  e1a08000          MOV      r8,r0
00341c  e1cd20d8          LDRD     r2,r3,[sp,#8]
003420  ebfffffe          BL       __aeabi_dsub
003424  e1cd01f0          STRD     r0,r1,[sp,#0x10]
003428  ebfffffe          BL       __aeabi_d2f
00342c  e58d0018          STR      r0,[sp,#0x18]
                  |L1.13360|
;;;2443       }
;;;2444   
;;;2445       return f32AngleLocal;
003430  e59d0018          LDR      r0,[sp,#0x18]
003434  e28dd01c          ADD      sp,sp,#0x1c
;;;2446   }
003438  e8bd8ff0          POP      {r4-r11,pc}
;;;2447   
                          ENDP

                  vGfBuffRotateBitmapFull PROC
;;;2450   
;;;2451   void vGfBuffRotateBitmapFull(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
00343c  e92d4ff0          PUSH     {r4-r11,lr}
;;;2452                                int32_t i32PosX, int32_t i32PosY)
;;;2453   {
003440  e24dd034          SUB      sp,sp,#0x34
003444  e1a04000          MOV      r4,r0
003448  e1a06001          MOV      r6,r1
00344c  e1a05002          MOV      r5,r2
003450  e1a09003          MOV      r9,r3
003454  e59da058          LDR      r10,[sp,#0x58]
;;;2454       rot_mem_st  stMem;
;;;2455       rot_cfg_st  stParam;
;;;2456       float32_t   f32AngleLocal;
;;;2457   
;;;2458       u8PreviousOperation = 0U;
003458  e3a00000          MOV      r0,#0
00345c  e51f1c08          LDR      r1,|L1.10332|
003460  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2459   
;;;2460       f32AngleLocal = f32CheckAngle(f32Angle);
003464  e1a00006          MOV      r0,r6
003468  ebfffffe          BL       f32CheckAngle
00346c  e1a0b000          MOV      r11,r0
;;;2461   
;;;2462       stMem.u32SrcAddr      = pstSrcImage->u32Address;
003470  e5940000          LDR      r0,[r4,#0]
003474  e58d0028          STR      r0,[sp,#0x28]
;;;2463       stMem.u16SrcHeight    = pstSrcImage->u16Height;
003478  e1d400b6          LDRH     r0,[r4,#6]
00347c  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2464       stMem.u16SrcWidth     = pstSrcImage->u16Width;
003480  e1d400b4          LDRH     r0,[r4,#4]
003484  e1cd02b6          STRH     r0,[sp,#0x26]
;;;2465       stMem.u32DstAddr      = pstDstImage->u32Address;
003488  e5950000          LDR      r0,[r5,#0]
00348c  e58d002c          STR      r0,[sp,#0x2c]
;;;2466       stMem.u16DstImgWidth  = pstDstImage->u16Width;
003490  e1d500b4          LDRH     r0,[r5,#4]
003494  e1cd03b0          STRH     r0,[sp,#0x30]
;;;2467       stMem.u16DstImgHeight = pstDstImage->u16Height;
003498  e1d500b6          LDRH     r0,[r5,#6]
00349c  e1cd03b2          STRH     r0,[sp,#0x32]
;;;2468   
;;;2469       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
0034a0  e5d4000c          LDRB     r0,[r4,#0xc]
0034a4  e3500004          CMP      r0,#4
0034a8  1a000002          BNE      |L1.13496|
;;;2470       {
;;;2471           stParam.stRotCfg.eSrcColFmt = GA_RGB16;
0034ac  e3a00000          MOV      r0,#0
0034b0  e5cd000c          STRB     r0,[sp,#0xc]
0034b4  ea000001          B        |L1.13504|
                  |L1.13496|
;;;2472       }
;;;2473       else
;;;2474       {
;;;2475           stParam.stRotCfg.eSrcColFmt = GA_RGBA32;
0034b8  e3a00001          MOV      r0,#1
0034bc  e5cd000c          STRB     r0,[sp,#0xc]
                  |L1.13504|
;;;2476       }
;;;2477   
;;;2478       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
0034c0  e5d5000c          LDRB     r0,[r5,#0xc]
0034c4  e3500004          CMP      r0,#4
0034c8  1a000002          BNE      |L1.13528|
;;;2479       {
;;;2480           stParam.stRotCfg.eDstColFmt = GA_RGB16;
0034cc  e3a00000          MOV      r0,#0
0034d0  e5cd000d          STRB     r0,[sp,#0xd]
0034d4  ea000001          B        |L1.13536|
                  |L1.13528|
;;;2481       }
;;;2482       else
;;;2483       {
;;;2484           stParam.stRotCfg.eDstColFmt = GA_RGBA32;
0034d8  e3a00001          MOV      r0,#1
0034dc  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.13536|
;;;2485       }
;;;2486   
;;;2487       /* handle clip window */
;;;2488       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
0034e0  e51f0c94          LDR      r0,|L1.10324|
0034e4  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0034e8  e5cd000e          STRB     r0,[sp,#0xe]
;;;2489       if (stParam.stRotCfg.eClipWndEn == GA_EN)
0034ec  e5dd000e          LDRB     r0,[sp,#0xe]
0034f0  e3500001          CMP      r0,#1
0034f4  1a00000b          BNE      |L1.13608|
;;;2490       {
;;;2491           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0034f8  e51f0cac          LDR      r0,|L1.10324|
0034fc  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
003500  e1cd01b4          STRH     r0,[sp,#0x14]
;;;2492           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003504  e51f0cb8          LDR      r0,|L1.10324|
003508  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
00350c  e1cd01b6          STRH     r0,[sp,#0x16]
;;;2493           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003510  e51f0cc4          LDR      r0,|L1.10324|
003514  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003518  e1cd01b8          STRH     r0,[sp,#0x18]
;;;2494           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
00351c  e51f0cd0          LDR      r0,|L1.10324|
003520  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003524  e1cd01ba          STRH     r0,[sp,#0x1a]
                  |L1.13608|
;;;2495       }
;;;2496   
;;;2497       stParam.stRotCfg.eFilterEn     = stGastate.eFilterEn;
003528  e51f0cdc          LDR      r0,|L1.10324|
00352c  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
003530  e5cd000f          STRB     r0,[sp,#0xf]
;;;2498       stParam.i16RotCentX            = pstSrcImage->i16CenterX;
003534  e1d400b8          LDRH     r0,[r4,#8]
003538  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2499       stParam.i16RotCentY            = pstSrcImage->i16CenterY;
00353c  e1d400ba          LDRH     r0,[r4,#0xa]
003540  e1cd01be          STRH     r0,[sp,#0x1e]
;;;2500       stParam.i16OffsetX             = i32PosX + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
003544  e59f135c          LDR      r1,|L1.14504|
003548  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
00354c  e2610011          RSB      r0,r1,#0x11
003550  ebfffffe          BL       __aeabi_ui2f
003554  e58d0008          STR      r0,[sp,#8]
003558  e1d400f8          LDRSH    r0,[r4,#8]
00355c  ebfffffe          BL       __aeabi_i2f
003560  e59f1344          LDR      r1,|L1.14508|
003564  e58d0004          STR      r0,[sp,#4]
003568  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
00356c  e2610011          RSB      r0,r1,#0x11
003570  ebfffffe          BL       __aeabi_ui2f
003574  e58d0000          STR      r0,[sp,#0]
003578  e59d1004          LDR      r1,[sp,#4]
00357c  ebfffffe          BL       __aeabi_fmul
003580  e1a08000          MOV      r8,r0
003584  e59d1008          LDR      r1,[sp,#8]
003588  ebfffffe          BL       __aeabi_fdiv
00358c  e1a07000          MOV      r7,r0
003590  ebfffffe          BL       __aeabi_f2iz
003594  e0800009          ADD      r0,r0,r9
003598  e6bf0070          SXTH     r0,r0
00359c  e1cd02b0          STRH     r0,[sp,#0x20]
;;;2501       stParam.i16OffsetY             = i32PosY + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
0035a0  e59f1300          LDR      r1,|L1.14504|
0035a4  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0035a8  e2610011          RSB      r0,r1,#0x11
0035ac  ebfffffe          BL       __aeabi_ui2f
0035b0  e58d0008          STR      r0,[sp,#8]
0035b4  e1d400fa          LDRSH    r0,[r4,#0xa]
0035b8  ebfffffe          BL       __aeabi_i2f
0035bc  e59f12e8          LDR      r1,|L1.14508|
0035c0  e58d0004          STR      r0,[sp,#4]
0035c4  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0035c8  e2610011          RSB      r0,r1,#0x11
0035cc  ebfffffe          BL       __aeabi_ui2f
0035d0  e58d0000          STR      r0,[sp,#0]
0035d4  e59d1004          LDR      r1,[sp,#4]
0035d8  ebfffffe          BL       __aeabi_fmul
0035dc  e1a08000          MOV      r8,r0
0035e0  e59d1008          LDR      r1,[sp,#8]
0035e4  ebfffffe          BL       __aeabi_fdiv
0035e8  e1a07000          MOV      r7,r0
0035ec  ebfffffe          BL       __aeabi_f2iz
0035f0  e080000a          ADD      r0,r0,r10
0035f4  e6bf0070          SXTH     r0,r0
0035f8  e1cd02b2          STRH     r0,[sp,#0x22]
;;;2502       stParam.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
0035fc  e51f0db0          LDR      r0,|L1.10324|
003600  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
003604  e5cd0011          STRB     r0,[sp,#0x11]
;;;2503       stParam.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
003608  e51f0dbc          LDR      r0,|L1.10324|
00360c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
003610  e5cd0012          STRB     r0,[sp,#0x12]
;;;2504   
;;;2505   #ifdef GA_USE_MATH_LIB
;;;2506       vRotLib_Rotate(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003614  e1a0000b          MOV      r0,r11
003618  ebfffffe          BL       __aeabi_f2d
00361c  e1a07000          MOV      r7,r0
003620  e51f0dd0          LDR      r0,|L1.10328|
003624  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
003628  e1a02007          MOV      r2,r7
00362c  e1a03001          MOV      r3,r1
003630  e58d0000          STR      r0,[sp,#0]
003634  e28d100c          ADD      r1,sp,#0xc
003638  e28d0024          ADD      r0,sp,#0x24
00363c  ebfffffe          BL       vRotLib_Rotate
;;;2507   #else
;;;2508       vRotLib_Rotate(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;2509   #endif
;;;2510       
;;;2511   }
003640  e28dd034          ADD      sp,sp,#0x34
003644  e8bd8ff0          POP      {r4-r11,pc}
;;;2512   
                          ENDP

                  vGfBuffRotateBitmapPart PROC
;;;2515   
;;;2516   void vGfBuffRotateBitmapPart(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
003648  e92d4ff0          PUSH     {r4-r11,lr}
;;;2517                                int32_t i32PosX, int32_t i32PosY)
;;;2518   {
00364c  e24dd03c          SUB      sp,sp,#0x3c
003650  e1a04000          MOV      r4,r0
003654  e1a09001          MOV      r9,r1
003658  e1a06002          MOV      r6,r2
00365c  e1a05003          MOV      r5,r3
003660  e1cda6d0          LDRD     r10,r11,[sp,#0x60]
;;;2519       rot_mem_part_st stMem;
;;;2520       rot_cfg_st      stParam;
;;;2521       float32_t       f32AngleLocal;
;;;2522   
;;;2523       u8PreviousOperation = 0U;
003664  e3a00000          MOV      r0,#0
003668  e51f1e14          LDR      r1,|L1.10332|
00366c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2524   
;;;2525       f32AngleLocal = f32CheckAngle(f32Angle);
003670  e1a00009          MOV      r0,r9
003674  ebfffffe          BL       f32CheckAngle
003678  e58d000c          STR      r0,[sp,#0xc]
;;;2526   
;;;2527       stMem.u16SrcHeight    = pstImgPart->u16Height;
00367c  e1d500b6          LDRH     r0,[r5,#6]
003680  e1cd02b8          STRH     r0,[sp,#0x28]
;;;2528       stMem.u16SrcWidth     = pstSrcImage->u16Width;
003684  e1d400b4          LDRH     r0,[r4,#4]
003688  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2529       stMem.u16DotCnt       = pstImgPart->u16Width;
00368c  e1d500b4          LDRH     r0,[r5,#4]
003690  e1cd03b0          STRH     r0,[sp,#0x30]
;;;2530       stMem.u32DstAddr      = pstDstImage->u32Address;
003694  e5960000          LDR      r0,[r6,#0]
003698  e58d0034          STR      r0,[sp,#0x34]
;;;2531       stMem.u16DstImgWidth  = pstDstImage->u16Width;
00369c  e1d600b4          LDRH     r0,[r6,#4]
0036a0  e1cd03b8          STRH     r0,[sp,#0x38]
;;;2532       stMem.u16DstImgHeight = pstDstImage->u16Height;
0036a4  e1d600b6          LDRH     r0,[r6,#6]
0036a8  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;2533   
;;;2534       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
0036ac  e5d4000c          LDRB     r0,[r4,#0xc]
0036b0  e3500004          CMP      r0,#4
0036b4  1a00000b          BNE      |L1.14056|
;;;2535       {
;;;2536           stMem.u32SrcAddr            = pstSrcImage->u32Address + 2U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 2U*pstImgPart->u16SrcOffsX;
0036b8  e5940000          LDR      r0,[r4,#0]
0036bc  e1d410b4          LDRH     r1,[r4,#4]
0036c0  e1a01081          LSL      r1,r1,#1
0036c4  e1d520b2          LDRH     r2,[r5,#2]
0036c8  e0200291          MLA      r0,r1,r2,r0
0036cc  e1d510b0          LDRH     r1,[r5,#0]
0036d0  e3a02002          MOV      r2,#2
0036d4  e0200192          MLA      r0,r2,r1,r0
0036d8  e58d002c          STR      r0,[sp,#0x2c]
;;;2537           stParam.stRotCfg.eSrcColFmt = GA_RGB16;
0036dc  e3a00000          MOV      r0,#0
0036e0  e5cd0010          STRB     r0,[sp,#0x10]
0036e4  ea00000a          B        |L1.14100|
                  |L1.14056|
;;;2538       }
;;;2539       else
;;;2540       {
;;;2541           stMem.u32SrcAddr            = pstSrcImage->u32Address + 4U*pstSrcImage->u16Width * pstImgPart->u16SrcOffsY + 4U*pstImgPart->u16SrcOffsX;
0036e8  e5940000          LDR      r0,[r4,#0]
0036ec  e1d410b4          LDRH     r1,[r4,#4]
0036f0  e1a01101          LSL      r1,r1,#2
0036f4  e1d520b2          LDRH     r2,[r5,#2]
0036f8  e0200291          MLA      r0,r1,r2,r0
0036fc  e1d510b0          LDRH     r1,[r5,#0]
003700  e3a02004          MOV      r2,#4
003704  e0200192          MLA      r0,r2,r1,r0
003708  e58d002c          STR      r0,[sp,#0x2c]
;;;2542           stParam.stRotCfg.eSrcColFmt = GA_RGBA32;
00370c  e3a00001          MOV      r0,#1
003710  e5cd0010          STRB     r0,[sp,#0x10]
                  |L1.14100|
;;;2543       }
;;;2544   
;;;2545       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
003714  e5d6000c          LDRB     r0,[r6,#0xc]
003718  e3500004          CMP      r0,#4
00371c  1a000002          BNE      |L1.14124|
;;;2546       {
;;;2547           stParam.stRotCfg.eDstColFmt = GA_RGB16;
003720  e3a00000          MOV      r0,#0
003724  e5cd0011          STRB     r0,[sp,#0x11]
003728  ea000001          B        |L1.14132|
                  |L1.14124|
;;;2548       }
;;;2549       else
;;;2550       {
;;;2551           stParam.stRotCfg.eDstColFmt = GA_RGBA32;
00372c  e3a00001          MOV      r0,#1
003730  e5cd0011          STRB     r0,[sp,#0x11]
                  |L1.14132|
;;;2552       }
;;;2553   
;;;2554       /* handle clip window */
;;;2555       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
003734  e51f0ee8          LDR      r0,|L1.10324|
003738  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00373c  e5cd0012          STRB     r0,[sp,#0x12]
;;;2556       if (stParam.stRotCfg.eClipWndEn == GA_EN)
003740  e5dd0012          LDRB     r0,[sp,#0x12]
003744  e3500001          CMP      r0,#1
003748  1a00000b          BNE      |L1.14204|
;;;2557       {
;;;2558           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00374c  e51f0f00          LDR      r0,|L1.10324|
003750  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
003754  e1cd01b8          STRH     r0,[sp,#0x18]
;;;2559           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003758  e51f0f0c          LDR      r0,|L1.10324|
00375c  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003760  e1cd01ba          STRH     r0,[sp,#0x1a]
;;;2560           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003764  e51f0f18          LDR      r0,|L1.10324|
003768  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00376c  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2561           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003770  e51f0f24          LDR      r0,|L1.10324|
003774  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003778  e1cd01be          STRH     r0,[sp,#0x1e]
                  |L1.14204|
;;;2562       }
;;;2563   
;;;2564       stParam.stRotCfg.eFilterEn     = stGastate.eFilterEn;
00377c  e51f0f30          LDR      r0,|L1.10324|
003780  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
003784  e5cd0013          STRB     r0,[sp,#0x13]
;;;2565       stParam.i16RotCentX            = pstSrcImage->i16CenterX;
003788  e1d400b8          LDRH     r0,[r4,#8]
00378c  e1cd02b0          STRH     r0,[sp,#0x20]
;;;2566       stParam.i16RotCentY            = pstSrcImage->i16CenterY;
003790  e1d400ba          LDRH     r0,[r4,#0xa]
003794  e1cd02b2          STRH     r0,[sp,#0x22]
;;;2567       stParam.i16OffsetX             = i32PosX + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
003798  e59f1108          LDR      r1,|L1.14504|
00379c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0037a0  e2610011          RSB      r0,r1,#0x11
0037a4  ebfffffe          BL       __aeabi_ui2f
0037a8  e58d0008          STR      r0,[sp,#8]
0037ac  e1d400f8          LDRSH    r0,[r4,#8]
0037b0  ebfffffe          BL       __aeabi_i2f
0037b4  e59f10f0          LDR      r1,|L1.14508|
0037b8  e58d0004          STR      r0,[sp,#4]
0037bc  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0037c0  e2610011          RSB      r0,r1,#0x11
0037c4  ebfffffe          BL       __aeabi_ui2f
0037c8  e58d0000          STR      r0,[sp,#0]
0037cc  e59d1004          LDR      r1,[sp,#4]
0037d0  ebfffffe          BL       __aeabi_fmul
0037d4  e1a08000          MOV      r8,r0
0037d8  e59d1008          LDR      r1,[sp,#8]
0037dc  ebfffffe          BL       __aeabi_fdiv
0037e0  e1a07000          MOV      r7,r0
0037e4  ebfffffe          BL       __aeabi_f2iz
0037e8  e080000a          ADD      r0,r0,r10
0037ec  e6bf0070          SXTH     r0,r0
0037f0  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2568       stParam.i16OffsetY             = i32PosY + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
0037f4  e59f10ac          LDR      r1,|L1.14504|
0037f8  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0037fc  e2610011          RSB      r0,r1,#0x11
003800  ebfffffe          BL       __aeabi_ui2f
003804  e58d0008          STR      r0,[sp,#8]
003808  e1d400fa          LDRSH    r0,[r4,#0xa]
00380c  ebfffffe          BL       __aeabi_i2f
003810  e59f1094          LDR      r1,|L1.14508|
003814  e58d0004          STR      r0,[sp,#4]
003818  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
00381c  e2610011          RSB      r0,r1,#0x11
003820  ebfffffe          BL       __aeabi_ui2f
003824  e58d0000          STR      r0,[sp,#0]
003828  e59d1004          LDR      r1,[sp,#4]
00382c  ebfffffe          BL       __aeabi_fmul
003830  e1a08000          MOV      r8,r0
003834  e59d1008          LDR      r1,[sp,#8]
003838  ebfffffe          BL       __aeabi_fdiv
00383c  e1a07000          MOV      r7,r0
003840  ebfffffe          BL       __aeabi_f2iz
003844  e080000b          ADD      r0,r0,r11
003848  e6bf0070          SXTH     r0,r0
00384c  e1cd02b6          STRH     r0,[sp,#0x26]
;;;2569       stParam.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
003850  e59f0058          LDR      r0,|L1.14512|
003854  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
003858  e5cd0015          STRB     r0,[sp,#0x15]
;;;2570       stParam.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00385c  e59f004c          LDR      r0,|L1.14512|
003860  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
003864  e5cd0016          STRB     r0,[sp,#0x16]
;;;2571   
;;;2572   #ifdef GA_USE_MATH_LIB
;;;2573       vRotLib_Rotate_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003868  e59d000c          LDR      r0,[sp,#0xc]
00386c  ebfffffe          BL       __aeabi_f2d
003870  e1a07000          MOV      r7,r0
003874  e59f0038          LDR      r0,|L1.14516|
003878  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
00387c  e1a02007          MOV      r2,r7
003880  e1a03001          MOV      r3,r1
003884  e58d0000          STR      r0,[sp,#0]
003888  e28d1010          ADD      r1,sp,#0x10
00388c  e28d0028          ADD      r0,sp,#0x28
003890  ebfffffe          BL       vRotLib_Rotate_Part
;;;2574   #else
;;;2575       vRotLib_Rotate_Part(&stMem, &stParam, (int16_t)(10U* f32AngleLocal), pstWriteList);
;;;2576   #endif
;;;2577   
;;;2578   }
003894  e28dd03c          ADD      sp,sp,#0x3c
003898  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.14492|
                          DCD      u8PNG_PaletteStream6
                  |L1.14496|
                          DCD      u8PNG_PaletteStream7
                  |L1.14500|
                          DCD      0x40768000
                  |L1.14504|
                          DCD      u32SubResCPos
                  |L1.14508|
                          DCD      u32SubResPPos
                  |L1.14512|
                          DCD      stGastate
                  |L1.14516|
                          DCD      pstWriteList
                          ENDP

                  vGfBuffRotateBitmapOptimized PROC
;;;2582   
;;;2583   void vGfBuffRotateBitmapOptimized(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
0038b8  e92d4fff          PUSH     {r0-r11,lr}
;;;2584                                     uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight)
;;;2585   {
0038bc  e24dd054          SUB      sp,sp,#0x54
0038c0  e1a04000          MOV      r4,r0
0038c4  e59d508c          LDR      r5,[sp,#0x8c]
0038c8  e59d6090          LDR      r6,[sp,#0x90]
;;;2586       uint32_t        u32DivY, u32ModY, u32CountY;
;;;2587       uint32_t        u32DivX, u32ModX, u32CountX;
;;;2588       rot_mem_part_st stMem;
;;;2589       rot_cfg_st      stParam;
;;;2590       uint32_t        u32ByteCount;
;;;2591       float32_t       f32AngleLocal;
;;;2592       uint16_t        u16CorrectionX, u16CorrectionY;
;;;2593   
;;;2594       u8PreviousOperation = 0U;
0038cc  e3a00000          MOV      r0,#0
0038d0  e59f1fa4          LDR      r1,|L1.18556|
0038d4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2595   
;;;2596       f32AngleLocal = f32CheckAngle(f32Angle);
0038d8  e59d0058          LDR      r0,[sp,#0x58]
0038dc  ebfffffe          BL       f32CheckAngle
0038e0  e58d001c          STR      r0,[sp,#0x1c]
;;;2597   
;;;2598       /* rotation settings */
;;;2599       stMem.u16SrcWidth     = pstSrcImage->u16Width;
0038e4  e1d410b4          LDRH     r1,[r4,#4]
0038e8  e1cd13ba          STRH     r1,[sp,#0x3a]
;;;2600       stMem.u32DstAddr      = pstDstImage->u32Address;
0038ec  e59d005c          LDR      r0,[sp,#0x5c]
0038f0  e5900000          LDR      r0,[r0,#0]
0038f4  e58d0044          STR      r0,[sp,#0x44]
;;;2601       stMem.u16DstImgWidth  = pstDstImage->u16Width;
0038f8  e59d005c          LDR      r0,[sp,#0x5c]
0038fc  e1d010b4          LDRH     r1,[r0,#4]
003900  e1cd14b8          STRH     r1,[sp,#0x48]
;;;2602       stMem.u16DstImgHeight = pstDstImage->u16Height;
003904  e59d005c          LDR      r0,[sp,#0x5c]
003908  e1d010b6          LDRH     r1,[r0,#6]
00390c  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;2603   
;;;2604       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
003910  e5d4000c          LDRB     r0,[r4,#0xc]
003914  e3500004          CMP      r0,#4
003918  1a000003          BNE      |L1.14636|
;;;2605       {
;;;2606           stParam.stRotCfg.eSrcColFmt = GA_RGB16;
00391c  e3a00000          MOV      r0,#0
003920  e5cd0020          STRB     r0,[sp,#0x20]
;;;2607           u32ByteCount                = 2U;
003924  e3a0a002          MOV      r10,#2
003928  ea000002          B        |L1.14648|
                  |L1.14636|
;;;2608       }
;;;2609       else
;;;2610       {
;;;2611           stParam.stRotCfg.eSrcColFmt = GA_RGBA32;
00392c  e3a00001          MOV      r0,#1
003930  e5cd0020          STRB     r0,[sp,#0x20]
;;;2612           u32ByteCount                = 4U;
003934  e3a0a004          MOV      r10,#4
                  |L1.14648|
;;;2613       }
;;;2614   
;;;2615       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
003938  e59d005c          LDR      r0,[sp,#0x5c]
00393c  e5d0000c          LDRB     r0,[r0,#0xc]
003940  e3500004          CMP      r0,#4
003944  1a000002          BNE      |L1.14676|
;;;2616       {
;;;2617           stParam.stRotCfg.eDstColFmt = GA_RGB16;
003948  e3a00000          MOV      r0,#0
00394c  e5cd0021          STRB     r0,[sp,#0x21]
003950  ea000001          B        |L1.14684|
                  |L1.14676|
;;;2618       }
;;;2619       else
;;;2620       {
;;;2621           stParam.stRotCfg.eDstColFmt = GA_RGBA32;
003954  e3a00001          MOV      r0,#1
003958  e5cd0021          STRB     r0,[sp,#0x21]
                  |L1.14684|
;;;2622       }
;;;2623   
;;;2624       /* handle clip window rotate */
;;;2625       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
00395c  e51f00b4          LDR      r0,|L1.14512|
003960  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
003964  e5cd0022          STRB     r0,[sp,#0x22]
;;;2626       if (stParam.stRotCfg.eClipWndEn == GA_EN)
003968  e5dd0022          LDRB     r0,[sp,#0x22]
00396c  e3500001          CMP      r0,#1
003970  1a00000b          BNE      |L1.14756|
;;;2627       {
;;;2628           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
003974  e51f00cc          LDR      r0,|L1.14512|
003978  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00397c  e1cd02b8          STRH     r0,[sp,#0x28]
;;;2629           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003980  e51f00d8          LDR      r0,|L1.14512|
003984  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003988  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2630           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
00398c  e51f00e4          LDR      r0,|L1.14512|
003990  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003994  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2631           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003998  e51f00f0          LDR      r0,|L1.14512|
00399c  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0039a0  e1cd02be          STRH     r0,[sp,#0x2e]
                  |L1.14756|
;;;2632       }
;;;2633   
;;;2634       stParam.stRotCfg.eFilterEn     = stGastate.eFilterEn;
0039a4  e51f00fc          LDR      r0,|L1.14512|
0039a8  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
0039ac  e5cd0023          STRB     r0,[sp,#0x23]
;;;2635       stParam.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
0039b0  e51f0108          LDR      r0,|L1.14512|
0039b4  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0039b8  e5cd0025          STRB     r0,[sp,#0x25]
;;;2636       stParam.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
0039bc  e51f0114          LDR      r0,|L1.14512|
0039c0  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0039c4  e5cd0026          STRB     r0,[sp,#0x26]
;;;2637       stParam.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
0039c8  e51f1128          LDR      r1,|L1.14504|
0039cc  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0039d0  e2610011          RSB      r0,r1,#0x11
0039d4  ebfffffe          BL       __aeabi_ui2f
0039d8  e58d000c          STR      r0,[sp,#0xc]
0039dc  e1d400f8          LDRSH    r0,[r4,#8]
0039e0  ebfffffe          BL       __aeabi_i2f
0039e4  e51f1140          LDR      r1,|L1.14508|
0039e8  e58d0004          STR      r0,[sp,#4]
0039ec  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0039f0  e2610011          RSB      r0,r1,#0x11
0039f4  ebfffffe          BL       __aeabi_ui2f
0039f8  e58d0000          STR      r0,[sp,#0]
0039fc  e59d1004          LDR      r1,[sp,#4]
003a00  ebfffffe          BL       __aeabi_fmul
003a04  e58d0008          STR      r0,[sp,#8]
003a08  e59d100c          LDR      r1,[sp,#0xc]
003a0c  ebfffffe          BL       __aeabi_fdiv
003a10  e58d0010          STR      r0,[sp,#0x10]
003a14  ebfffffe          BL       __aeabi_f2uiz
003a18  e59d1060          LDR      r1,[sp,#0x60]
003a1c  e0800001          ADD      r0,r0,r1
003a20  e6bf1070          SXTH     r1,r0
003a24  e1cd13b4          STRH     r1,[sp,#0x34]
;;;2638       stParam.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
003a28  e51f1188          LDR      r1,|L1.14504|
003a2c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003a30  e2610011          RSB      r0,r1,#0x11
003a34  ebfffffe          BL       __aeabi_ui2f
003a38  e58d000c          STR      r0,[sp,#0xc]
003a3c  e1d400fa          LDRSH    r0,[r4,#0xa]
003a40  ebfffffe          BL       __aeabi_i2f
003a44  e51f11a0          LDR      r1,|L1.14508|
003a48  e58d0004          STR      r0,[sp,#4]
003a4c  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
003a50  e2610011          RSB      r0,r1,#0x11
003a54  ebfffffe          BL       __aeabi_ui2f
003a58  e58d0000          STR      r0,[sp,#0]
003a5c  e59d1004          LDR      r1,[sp,#4]
003a60  ebfffffe          BL       __aeabi_fmul
003a64  e58d0008          STR      r0,[sp,#8]
003a68  e59d100c          LDR      r1,[sp,#0xc]
003a6c  ebfffffe          BL       __aeabi_fdiv
003a70  e58d0010          STR      r0,[sp,#0x10]
003a74  ebfffffe          BL       __aeabi_f2uiz
003a78  e59d1088          LDR      r1,[sp,#0x88]
003a7c  e0800001          ADD      r0,r0,r1
003a80  e6bf1070          SXTH     r1,r0
003a84  e1cd13b6          STRH     r1,[sp,#0x36]
;;;2639   
;;;2640       u32DivX = pstSrcImage->u16Width/u32BlockWidth;
003a88  e1d400b4          LDRH     r0,[r4,#4]
003a8c  e1a01005          MOV      r1,r5
003a90  ebfffffe          BL       __aeabi_uidiv
003a94  e1a0b000          MOV      r11,r0
;;;2641       u32ModX = pstSrcImage->u16Width%u32BlockWidth;
003a98  e1d400b4          LDRH     r0,[r4,#4]
003a9c  e1a01005          MOV      r1,r5
003aa0  ebfffffe          BL       __aeabi_uidivmod
003aa4  e58d104c          STR      r1,[sp,#0x4c]
;;;2642       u32DivY = pstSrcImage->u16Height/u32BlockHeight;
003aa8  e1d400b6          LDRH     r0,[r4,#6]
003aac  e1a01006          MOV      r1,r6
003ab0  ebfffffe          BL       __aeabi_uidiv
003ab4  e1a07000          MOV      r7,r0
;;;2643       u32ModY = pstSrcImage->u16Height%u32BlockHeight;
003ab8  e1d400b6          LDRH     r0,[r4,#6]
003abc  e1a01006          MOV      r1,r6
003ac0  ebfffffe          BL       __aeabi_uidivmod
003ac4  e58d1050          STR      r1,[sp,#0x50]
;;;2644   
;;;2645       for (u32CountY=0U; u32CountY<=u32DivY; u32CountY++)
003ac8  e3a08000          MOV      r8,#0
003acc  ea00011f          B        |L1.16208|
                  |L1.15056|
;;;2646       {
;;;2647           for (u32CountX=0U; u32CountX<=u32DivX; u32CountX++)
003ad0  e3a09000          MOV      r9,#0
003ad4  ea00011a          B        |L1.16196|
                  |L1.15064|
;;;2648           {
;;;2649               if (u32CountX<u32DivX)
003ad8  e159000b          CMP      r9,r11
003adc  2a00009b          BCS      |L1.15696|
;;;2650               {
;;;2651                   if (u32CountY<u32DivY)
003ae0  e1580007          CMP      r8,r7
003ae4  2a000050          BCS      |L1.15404|
;;;2652                   {
;;;2653                       /* normal operation */
;;;2654                       /* Add the required pixel offset so that overlapping of blocks is possible */
;;;2655                       if( (u32ModY == 0) && (u32DivY - u32CountY == 1) )
003ae8  e59d0050          LDR      r0,[sp,#0x50]
003aec  e3500000          CMP      r0,#0
003af0  1a000005          BNE      |L1.15116|
003af4  e0470008          SUB      r0,r7,r8
003af8  e3500001          CMP      r0,#1
003afc  1a000002          BNE      |L1.15116|
;;;2656                       {
;;;2657                           u16CorrectionY = 0;
003b00  e3a00000          MOV      r0,#0
003b04  e58d0014          STR      r0,[sp,#0x14]
003b08  ea000001          B        |L1.15124|
                  |L1.15116|
;;;2658                       }
;;;2659                       else
;;;2660                       {
;;;2661                           u16CorrectionY = 1;
003b0c  e3a00001          MOV      r0,#1
003b10  e58d0014          STR      r0,[sp,#0x14]
                  |L1.15124|
;;;2662                       }
;;;2663                       
;;;2664                       if( (u32ModX == 0) && (u32DivX - u32CountX == 1) )
003b14  e59d004c          LDR      r0,[sp,#0x4c]
003b18  e3500000          CMP      r0,#0
003b1c  1a000005          BNE      |L1.15160|
003b20  e04b0009          SUB      r0,r11,r9
003b24  e3500001          CMP      r0,#1
003b28  1a000002          BNE      |L1.15160|
;;;2665                       {
;;;2666                           u16CorrectionX = 0;
003b2c  e3a00000          MOV      r0,#0
003b30  e58d0018          STR      r0,[sp,#0x18]
003b34  ea000001          B        |L1.15168|
                  |L1.15160|
;;;2667                       }
;;;2668                       else
;;;2669                       {
;;;2670                           u16CorrectionX = 1;
003b38  e3a00001          MOV      r0,#1
003b3c  e58d0018          STR      r0,[sp,#0x18]
                  |L1.15168|
;;;2671                       }
;;;2672                       stMem.u32SrcAddr    = pstSrcImage->u32Address + u32ByteCount*u32CountY*u32BlockHeight*pstSrcImage->u16Width + u32ByteCount*u32CountX*u32BlockWidth;
003b40  e001089a          MUL      r1,r10,r8
003b44  e0010691          MUL      r1,r1,r6
003b48  e5940000          LDR      r0,[r4,#0]
003b4c  e1d420b4          LDRH     r2,[r4,#4]
003b50  e0200291          MLA      r0,r1,r2,r0
003b54  e001099a          MUL      r1,r10,r9
003b58  e0200591          MLA      r0,r1,r5,r0
003b5c  e58d003c          STR      r0,[sp,#0x3c]
;;;2673                       stMem.u16SrcHeight  = u32BlockHeight + u16CorrectionY;
003b60  e59d0014          LDR      r0,[sp,#0x14]
003b64  e0800006          ADD      r0,r0,r6
003b68  e6ff1070          UXTH     r1,r0
003b6c  e1cd13b8          STRH     r1,[sp,#0x38]
;;;2674                       stParam.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32CountX*u32BlockWidth;
003b70  e1d400f8          LDRSH    r0,[r4,#8]
003b74  e51f12d4          LDR      r1,|L1.14504|
003b78  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003b7c  e2611011          RSB      r1,r1,#0x11
003b80  e0010991          MUL      r1,r1,r9
003b84  e0600591          MLS      r0,r1,r5,r0
003b88  e6bf1070          SXTH     r1,r0
003b8c  e1cd13b0          STRH     r1,[sp,#0x30]
;;;2675                       stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32CountY*u32BlockHeight;
003b90  e1d400fa          LDRSH    r0,[r4,#0xa]
003b94  e51f12f4          LDR      r1,|L1.14504|
003b98  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003b9c  e2611011          RSB      r1,r1,#0x11
003ba0  e0010891          MUL      r1,r1,r8
003ba4  e0600691          MLS      r0,r1,r6,r0
003ba8  e6bf1070          SXTH     r1,r0
003bac  e1cd13b2          STRH     r1,[sp,#0x32]
;;;2676                       stMem.u16DotCnt     = u32BlockWidth + u16CorrectionX;
003bb0  e59d0018          LDR      r0,[sp,#0x18]
003bb4  e0800005          ADD      r0,r0,r5
003bb8  e6ff1070          UXTH     r1,r0
003bbc  e1cd14b0          STRH     r1,[sp,#0x40]
;;;2677   
;;;2678                       /* Reinitialize clip parameters */
;;;2679                       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
003bc0  e51f0318          LDR      r0,|L1.14512|
003bc4  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
003bc8  e5cd0022          STRB     r0,[sp,#0x22]
;;;2680                       stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
003bcc  e51f0324          LDR      r0,|L1.14512|
003bd0  e1d012b4          LDRH     r1,[r0,#0x24]  ; stGastate
003bd4  e1cd12b8          STRH     r1,[sp,#0x28]
;;;2681                       stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003bd8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003bdc  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2682                       stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003be0  e51f0338          LDR      r0,|L1.14512|
003be4  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003be8  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2683                       stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003bec  e51f0344          LDR      r0,|L1.14512|
003bf0  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003bf4  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2684   
;;;2685   #ifdef GA_USE_MATH_LIB
;;;2686                       vRotLib_Rotate_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003bf8  e59d001c          LDR      r0,[sp,#0x1c]
003bfc  ebfffffe          BL       __aeabi_f2d
003c00  e1cd00f8          STRD     r0,r1,[sp,#8]
003c04  e51f0358          LDR      r0,|L1.14516|
003c08  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
003c0c  e58d0000          STR      r0,[sp,#0]
003c10  e1a03001          MOV      r3,r1
003c14  e59d2008          LDR      r2,[sp,#8]
003c18  e28d1020          ADD      r1,sp,#0x20
003c1c  e28d0038          ADD      r0,sp,#0x38
003c20  ebfffffe          BL       vRotLib_Rotate_Part
;;;2687   #else
;;;2688                       vRotLib_Rotate_Part(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;2689   #endif  
;;;2690                       vGfListExecute();
003c24  ebfffffe          BL       vGfListExecute
003c28  ea0000c4          B        |L1.16192|
                  |L1.15404|
;;;2691                   }
;;;2692                   else
;;;2693                   {
;;;2694                       if (u32ModY != 0U)
003c2c  e59d0050          LDR      r0,[sp,#0x50]
003c30  e3500000          CMP      r0,#0
003c34  0a0000c1          BEQ      |L1.16192|
;;;2695                       {
;;;2696                           /* lowest row */
;;;2697                           if( (u32ModY == 0) && (u32DivY - u32CountY == 1) )
003c38  e59d0050          LDR      r0,[sp,#0x50]
003c3c  e3500000          CMP      r0,#0
003c40  1a000005          BNE      |L1.15452|
003c44  e0470008          SUB      r0,r7,r8
003c48  e3500001          CMP      r0,#1
003c4c  1a000002          BNE      |L1.15452|
;;;2698                           {
;;;2699                               u16CorrectionY = 0;
003c50  e3a00000          MOV      r0,#0
003c54  e58d0014          STR      r0,[sp,#0x14]
003c58  ea000001          B        |L1.15460|
                  |L1.15452|
;;;2700                           }
;;;2701                           else
;;;2702                           {
;;;2703                               u16CorrectionY = 1;
003c5c  e3a00001          MOV      r0,#1
003c60  e58d0014          STR      r0,[sp,#0x14]
                  |L1.15460|
;;;2704                           }
;;;2705   
;;;2706                           stMem.u32SrcAddr    = pstSrcImage->u32Address + u32ByteCount*u32DivY*u32BlockHeight*pstSrcImage->u16Width + u32ByteCount*u32CountX*u32BlockWidth;
003c64  e001079a          MUL      r1,r10,r7
003c68  e0010691          MUL      r1,r1,r6
003c6c  e5940000          LDR      r0,[r4,#0]
003c70  e1d420b4          LDRH     r2,[r4,#4]
003c74  e0200291          MLA      r0,r1,r2,r0
003c78  e001099a          MUL      r1,r10,r9
003c7c  e0200591          MLA      r0,r1,r5,r0
003c80  e58d003c          STR      r0,[sp,#0x3c]
;;;2707                           stMem.u16SrcHeight  = pstSrcImage->u16Height  - u32DivY*u32BlockHeight;
003c84  e1d400b6          LDRH     r0,[r4,#6]
003c88  e0600697          MLS      r0,r7,r6,r0
003c8c  e6ff1070          UXTH     r1,r0
003c90  e1cd13b8          STRH     r1,[sp,#0x38]
;;;2708                           stParam.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32CountX*u32BlockWidth;
003c94  e1d400f8          LDRSH    r0,[r4,#8]
003c98  e51f13f8          LDR      r1,|L1.14504|
003c9c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003ca0  e2611011          RSB      r1,r1,#0x11
003ca4  e0010991          MUL      r1,r1,r9
003ca8  e0600591          MLS      r0,r1,r5,r0
003cac  e6bf1070          SXTH     r1,r0
003cb0  e1cd13b0          STRH     r1,[sp,#0x30]
;;;2709                           stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32DivY*u32BlockHeight;
003cb4  e1d400fa          LDRSH    r0,[r4,#0xa]
003cb8  e51f1418          LDR      r1,|L1.14504|
003cbc  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003cc0  e2611011          RSB      r1,r1,#0x11
003cc4  e0010791          MUL      r1,r1,r7
003cc8  e0600691          MLS      r0,r1,r6,r0
003ccc  e6bf1070          SXTH     r1,r0
003cd0  e1cd13b2          STRH     r1,[sp,#0x32]
;;;2710                           stMem.u16DotCnt     = u32BlockWidth + u16CorrectionY;
003cd4  e59d0014          LDR      r0,[sp,#0x14]
003cd8  e0800005          ADD      r0,r0,r5
003cdc  e6ff1070          UXTH     r1,r0
003ce0  e1cd14b0          STRH     r1,[sp,#0x40]
;;;2711   
;;;2712                           /* Reinitialize clip parameters */
;;;2713                           stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
003ce4  e51f043c          LDR      r0,|L1.14512|
003ce8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
003cec  e5cd0022          STRB     r0,[sp,#0x22]
;;;2714                           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
003cf0  e51f0448          LDR      r0,|L1.14512|
003cf4  e1d012b4          LDRH     r1,[r0,#0x24]  ; stGastate
003cf8  e1cd12b8          STRH     r1,[sp,#0x28]
;;;2715                           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003cfc  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003d00  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2716                           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003d04  e51f045c          LDR      r0,|L1.14512|
003d08  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003d0c  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2717                           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003d10  e51f0468          LDR      r0,|L1.14512|
003d14  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003d18  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2718   
;;;2719   #ifdef GA_USE_MATH_LIB
;;;2720                           vRotLib_Rotate_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003d1c  e59d001c          LDR      r0,[sp,#0x1c]
003d20  ebfffffe          BL       __aeabi_f2d
003d24  e1cd00f8          STRD     r0,r1,[sp,#8]
003d28  e51f047c          LDR      r0,|L1.14516|
003d2c  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
003d30  e58d0000          STR      r0,[sp,#0]
003d34  e1a03001          MOV      r3,r1
003d38  e59d2008          LDR      r2,[sp,#8]
003d3c  e28d1020          ADD      r1,sp,#0x20
003d40  e28d0038          ADD      r0,sp,#0x38
003d44  ebfffffe          BL       vRotLib_Rotate_Part
;;;2721   #else
;;;2722                           vRotLib_Rotate_Part(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;2723   #endif
;;;2724                           vGfListExecute();
003d48  ebfffffe          BL       vGfListExecute
003d4c  ea00007b          B        |L1.16192|
                  |L1.15696|
;;;2725                       }
;;;2726                   }
;;;2727               }
;;;2728               else
;;;2729               {
;;;2730                   if (u32ModX != 0U)
003d50  e59d004c          LDR      r0,[sp,#0x4c]
003d54  e3500000          CMP      r0,#0
003d58  0a000078          BEQ      |L1.16192|
;;;2731                   {
;;;2732                       if (u32CountY<u32DivY)
003d5c  e1580007          CMP      r8,r7
003d60  2a000039          BCS      |L1.15948|
;;;2733                       {
;;;2734                           /* most right part */
;;;2735                           stMem.u32SrcAddr    = pstSrcImage->u32Address + u32ByteCount*u32CountY*u32BlockHeight*pstSrcImage->u16Width + u32ByteCount*u32CountX*u32BlockWidth;
003d64  e001089a          MUL      r1,r10,r8
003d68  e0010691          MUL      r1,r1,r6
003d6c  e5940000          LDR      r0,[r4,#0]
003d70  e1d420b4          LDRH     r2,[r4,#4]
003d74  e0200291          MLA      r0,r1,r2,r0
003d78  e001099a          MUL      r1,r10,r9
003d7c  e0200591          MLA      r0,r1,r5,r0
003d80  e58d003c          STR      r0,[sp,#0x3c]
;;;2736                           stMem.u16SrcHeight  = u32BlockHeight+1;
003d84  e2860001          ADD      r0,r6,#1
003d88  e6ff1070          UXTH     r1,r0
003d8c  e1cd13b8          STRH     r1,[sp,#0x38]
;;;2737                           stParam.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32DivX*u32BlockWidth;
003d90  e1d400f8          LDRSH    r0,[r4,#8]
003d94  e51f14f4          LDR      r1,|L1.14504|
003d98  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003d9c  e2611011          RSB      r1,r1,#0x11
003da0  e0010b91          MUL      r1,r1,r11
003da4  e0600591          MLS      r0,r1,r5,r0
003da8  e6bf1070          SXTH     r1,r0
003dac  e1cd13b0          STRH     r1,[sp,#0x30]
;;;2738                           stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32CountY*u32BlockHeight;
003db0  e1d400fa          LDRSH    r0,[r4,#0xa]
003db4  e51f1514          LDR      r1,|L1.14504|
003db8  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003dbc  e2611011          RSB      r1,r1,#0x11
003dc0  e0010891          MUL      r1,r1,r8
003dc4  e0600691          MLS      r0,r1,r6,r0
003dc8  e6bf1070          SXTH     r1,r0
003dcc  e1cd13b2          STRH     r1,[sp,#0x32]
;;;2739                           stMem.u16DotCnt     = pstSrcImage->u16Width   - u32DivX*u32BlockWidth;
003dd0  e1d400b4          LDRH     r0,[r4,#4]
003dd4  e060059b          MLS      r0,r11,r5,r0
003dd8  e6ff1070          UXTH     r1,r0
003ddc  e1cd14b0          STRH     r1,[sp,#0x40]
;;;2740   
;;;2741                           /* Reinitialize clip parameters */
;;;2742                           stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
003de0  e51f0538          LDR      r0,|L1.14512|
003de4  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
003de8  e5cd0022          STRB     r0,[sp,#0x22]
;;;2743                           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
003dec  e51f0544          LDR      r0,|L1.14512|
003df0  e1d012b4          LDRH     r1,[r0,#0x24]  ; stGastate
003df4  e1cd12b8          STRH     r1,[sp,#0x28]
;;;2744                           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003df8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003dfc  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2745                           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003e00  e51f0558          LDR      r0,|L1.14512|
003e04  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003e08  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2746                           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003e0c  e51f0564          LDR      r0,|L1.14512|
003e10  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003e14  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2747   
;;;2748   #ifdef GA_USE_MATH_LIB
;;;2749                           vRotLib_Rotate_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003e18  e59d001c          LDR      r0,[sp,#0x1c]
003e1c  ebfffffe          BL       __aeabi_f2d
003e20  e1cd00f8          STRD     r0,r1,[sp,#8]
003e24  e51f0578          LDR      r0,|L1.14516|
003e28  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
003e2c  e58d0000          STR      r0,[sp,#0]
003e30  e1a03001          MOV      r3,r1
003e34  e59d2008          LDR      r2,[sp,#8]
003e38  e28d1020          ADD      r1,sp,#0x20
003e3c  e28d0038          ADD      r0,sp,#0x38
003e40  ebfffffe          BL       vRotLib_Rotate_Part
;;;2750   #else
;;;2751                           vRotLib_Rotate_Part(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;2752   #endif  
;;;2753                           vGfListExecute();
003e44  ebfffffe          BL       vGfListExecute
003e48  ea00003c          B        |L1.16192|
                  |L1.15948|
;;;2754                       }
;;;2755                       else
;;;2756                       {
;;;2757                           if (u32ModY != 0U)
003e4c  e59d0050          LDR      r0,[sp,#0x50]
003e50  e3500000          CMP      r0,#0
003e54  0a000039          BEQ      |L1.16192|
;;;2758                           {
;;;2759                               /* lower right part */
;;;2760                               stMem.u32SrcAddr    = pstSrcImage->u32Address + u32ByteCount*u32DivY*u32BlockHeight*pstSrcImage->u16Width + u32ByteCount*u32CountX*u32BlockWidth;
003e58  e001079a          MUL      r1,r10,r7
003e5c  e0010691          MUL      r1,r1,r6
003e60  e5940000          LDR      r0,[r4,#0]
003e64  e1d420b4          LDRH     r2,[r4,#4]
003e68  e0200291          MLA      r0,r1,r2,r0
003e6c  e001099a          MUL      r1,r10,r9
003e70  e0200591          MLA      r0,r1,r5,r0
003e74  e58d003c          STR      r0,[sp,#0x3c]
;;;2761                               stMem.u16SrcHeight  = pstSrcImage->u16Height  - u32DivY*u32BlockHeight;
003e78  e1d400b6          LDRH     r0,[r4,#6]
003e7c  e0600697          MLS      r0,r7,r6,r0
003e80  e6ff1070          UXTH     r1,r0
003e84  e1cd13b8          STRH     r1,[sp,#0x38]
;;;2762                               stParam.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32DivX*u32BlockWidth;
003e88  e1d400f8          LDRSH    r0,[r4,#8]
003e8c  e51f15ec          LDR      r1,|L1.14504|
003e90  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003e94  e2611011          RSB      r1,r1,#0x11
003e98  e0010b91          MUL      r1,r1,r11
003e9c  e0600591          MLS      r0,r1,r5,r0
003ea0  e6bf1070          SXTH     r1,r0
003ea4  e1cd13b0          STRH     r1,[sp,#0x30]
;;;2763                               stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32DivY*u32BlockHeight;
003ea8  e1d400fa          LDRSH    r0,[r4,#0xa]
003eac  e51f160c          LDR      r1,|L1.14504|
003eb0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
003eb4  e2611011          RSB      r1,r1,#0x11
003eb8  e0010791          MUL      r1,r1,r7
003ebc  e0600691          MLS      r0,r1,r6,r0
003ec0  e6bf1070          SXTH     r1,r0
003ec4  e1cd13b2          STRH     r1,[sp,#0x32]
;;;2764                               stMem.u16DotCnt     = pstSrcImage->u16Width   - u32DivX*u32BlockWidth;
003ec8  e1d400b4          LDRH     r0,[r4,#4]
003ecc  e060059b          MLS      r0,r11,r5,r0
003ed0  e6ff1070          UXTH     r1,r0
003ed4  e1cd14b0          STRH     r1,[sp,#0x40]
;;;2765   
;;;2766                               /* Reinitialize clip parameters */
;;;2767                               stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
003ed8  e51f0630          LDR      r0,|L1.14512|
003edc  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
003ee0  e5cd0022          STRB     r0,[sp,#0x22]
;;;2768                               stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
003ee4  e51f063c          LDR      r0,|L1.14512|
003ee8  e1d012b4          LDRH     r1,[r0,#0x24]  ; stGastate
003eec  e1cd12b8          STRH     r1,[sp,#0x28]
;;;2769                               stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
003ef0  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
003ef4  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2770                               stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
003ef8  e51f0650          LDR      r0,|L1.14512|
003efc  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
003f00  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2771                               stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
003f04  e51f065c          LDR      r0,|L1.14512|
003f08  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
003f0c  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2772   
;;;2773   #ifdef GA_USE_MATH_LIB
;;;2774                               vRotLib_Rotate_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
003f10  e59d001c          LDR      r0,[sp,#0x1c]
003f14  ebfffffe          BL       __aeabi_f2d
003f18  e1cd00f8          STRD     r0,r1,[sp,#8]
003f1c  e51f0670          LDR      r0,|L1.14516|
003f20  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
003f24  e58d0000          STR      r0,[sp,#0]
003f28  e1a03001          MOV      r3,r1
003f2c  e59d2008          LDR      r2,[sp,#8]
003f30  e28d1020          ADD      r1,sp,#0x20
003f34  e28d0038          ADD      r0,sp,#0x38
003f38  ebfffffe          BL       vRotLib_Rotate_Part
;;;2775   #else
;;;2776                               vRotLib_Rotate_Part(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;2777   #endif
;;;2778                               vGfListExecute();
003f3c  ebfffffe          BL       vGfListExecute
                  |L1.16192|
003f40  e2899001          ADD      r9,r9,#1              ;2647
                  |L1.16196|
003f44  e159000b          CMP      r9,r11                ;2647
003f48  9afffee2          BLS      |L1.15064|
003f4c  e2888001          ADD      r8,r8,#1              ;2645
                  |L1.16208|
003f50  e1580007          CMP      r8,r7                 ;2645
003f54  9afffedd          BLS      |L1.15056|
;;;2779                           }
;;;2780                       }
;;;2781                   }
;;;2782               }
;;;2783           }
;;;2784       }
;;;2785   }
003f58  e28dd064          ADD      sp,sp,#0x64
003f5c  e8bd8ff0          POP      {r4-r11,pc}
;;;2786   
                          ENDP

                  vGfBuffRotateBlendBitmapFull PROC
;;;2789   
;;;2790   void vGfBuffRotateBlendBitmapFull(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
003f60  e92d4ff0          PUSH     {r4-r11,lr}
;;;2791                                     int32_t i32PosX, int32_t i32PosY)
;;;2792   {
003f64  e24dd03c          SUB      sp,sp,#0x3c
003f68  e1a04000          MOV      r4,r0
003f6c  e1a06001          MOV      r6,r1
003f70  e1a05002          MOV      r5,r2
003f74  e1a09003          MOV      r9,r3
003f78  e59da060          LDR      r10,[sp,#0x60]
;;;2793       rot_mem_st       stMem;
;;;2794       rot_blendcfg_st  stParam;
;;;2795       float32_t        f32AngleLocal;
;;;2796   
;;;2797       u8PreviousOperation = 0U;
003f7c  e3a00000          MOV      r0,#0
003f80  e59f18f4          LDR      r1,|L1.18556|
003f84  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2798   
;;;2799       f32AngleLocal = f32CheckAngle(f32Angle);
003f88  e1a00006          MOV      r0,r6
003f8c  ebfffffe          BL       f32CheckAngle
003f90  e1a0b000          MOV      r11,r0
;;;2800   
;;;2801       stMem.u32SrcAddr      = pstSrcImage->u32Address;
003f94  e5940000          LDR      r0,[r4,#0]
003f98  e58d0030          STR      r0,[sp,#0x30]
;;;2802       stMem.u16SrcHeight    = pstSrcImage->u16Height;
003f9c  e1d400b6          LDRH     r0,[r4,#6]
003fa0  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2803       stMem.u16SrcWidth     = pstSrcImage->u16Width;
003fa4  e1d400b4          LDRH     r0,[r4,#4]
003fa8  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2804       stMem.u32DstAddr      = pstDstImage->u32Address;
003fac  e5950000          LDR      r0,[r5,#0]
003fb0  e58d0034          STR      r0,[sp,#0x34]
;;;2805       stMem.u16DstImgWidth  = pstDstImage->u16Width;
003fb4  e1d500b4          LDRH     r0,[r5,#4]
003fb8  e1cd03b8          STRH     r0,[sp,#0x38]
;;;2806       stMem.u16DstImgHeight = pstDstImage->u16Height;
003fbc  e1d500b6          LDRH     r0,[r5,#6]
003fc0  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;2807   
;;;2808       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
003fc4  e5d4000c          LDRB     r0,[r4,#0xc]
003fc8  e3500004          CMP      r0,#4
003fcc  1a000002          BNE      |L1.16348|
;;;2809       {
;;;2810           stParam.stRotBlendCfg.eSrcColFmt = GA_RGB16;
003fd0  e3a00000          MOV      r0,#0
003fd4  e5cd000c          STRB     r0,[sp,#0xc]
003fd8  ea000001          B        |L1.16356|
                  |L1.16348|
;;;2811       }
;;;2812       else
;;;2813       {
;;;2814           stParam.stRotBlendCfg.eSrcColFmt = GA_RGBA32;
003fdc  e3a00001          MOV      r0,#1
003fe0  e5cd000c          STRB     r0,[sp,#0xc]
                  |L1.16356|
;;;2815       }
;;;2816   
;;;2817       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
003fe4  e5d5000c          LDRB     r0,[r5,#0xc]
003fe8  e3500004          CMP      r0,#4
003fec  1a000002          BNE      |L1.16380|
;;;2818       {
;;;2819           stParam.stRotBlendCfg.eDstColFmt = GA_RGB16;
003ff0  e3a00000          MOV      r0,#0
003ff4  e5cd000d          STRB     r0,[sp,#0xd]
003ff8  ea000001          B        |L1.16388|
                  |L1.16380|
;;;2820       }
;;;2821       else
;;;2822       {
;;;2823           stParam.stRotBlendCfg.eDstColFmt = GA_RGBA32;
003ffc  e3a00001          MOV      r0,#1
004000  e5cd000d          STRB     r0,[sp,#0xd]
                  |L1.16388|
;;;2824       }
;;;2825   
;;;2826       /* handle clip window */
;;;2827       stParam.stRotBlendCfg.eClipWndEn = stGastate.eClipWndEn;
004004  e51f075c          LDR      r0,|L1.14512|
004008  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00400c  e5cd000e          STRB     r0,[sp,#0xe]
;;;2828       if (stParam.stRotBlendCfg.eClipWndEn == GA_EN)
004010  e5dd000e          LDRB     r0,[sp,#0xe]
004014  e3500001          CMP      r0,#1
004018  1a00000b          BNE      |L1.16460|
;;;2829       {
;;;2830           stParam.stRotBlendCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00401c  e51f0774          LDR      r0,|L1.14512|
004020  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
004024  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;2831           stParam.stRotBlendCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
004028  e51f0780          LDR      r0,|L1.14512|
00402c  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
004030  e1cd01be          STRH     r0,[sp,#0x1e]
;;;2832           stParam.stRotBlendCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
004034  e51f078c          LDR      r0,|L1.14512|
004038  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00403c  e1cd02b0          STRH     r0,[sp,#0x20]
;;;2833           stParam.stRotBlendCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
004040  e51f0798          LDR      r0,|L1.14512|
004044  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
004048  e1cd02b2          STRH     r0,[sp,#0x22]
                  |L1.16460|
;;;2834       }
;;;2835   
;;;2836       stParam.stRotBlendCfg.eFilterEn     = stGastate.eFilterEn;
00404c  e51f07a4          LDR      r0,|L1.14512|
004050  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
004054  e5cd000f          STRB     r0,[sp,#0xf]
;;;2837   
;;;2838       stParam.i16RotCentX                 = pstSrcImage->i16CenterX;
004058  e1d400b8          LDRH     r0,[r4,#8]
00405c  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2839       stParam.i16RotCentY                 = pstSrcImage->i16CenterY;
004060  e1d400ba          LDRH     r0,[r4,#0xa]
004064  e1cd02b6          STRH     r0,[sp,#0x26]
;;;2840       stParam.i16OffsetX                  = i32PosX + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
004068  e51f17c8          LDR      r1,|L1.14504|
00406c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
004070  e2610011          RSB      r0,r1,#0x11
004074  ebfffffe          BL       __aeabi_ui2f
004078  e58d0008          STR      r0,[sp,#8]
00407c  e1d400f8          LDRSH    r0,[r4,#8]
004080  ebfffffe          BL       __aeabi_i2f
004084  e51f17e0          LDR      r1,|L1.14508|
004088  e58d0004          STR      r0,[sp,#4]
00408c  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
004090  e2610011          RSB      r0,r1,#0x11
004094  ebfffffe          BL       __aeabi_ui2f
004098  e58d0000          STR      r0,[sp,#0]
00409c  e59d1004          LDR      r1,[sp,#4]
0040a0  ebfffffe          BL       __aeabi_fmul
0040a4  e1a08000          MOV      r8,r0
0040a8  e59d1008          LDR      r1,[sp,#8]
0040ac  ebfffffe          BL       __aeabi_fdiv
0040b0  e1a07000          MOV      r7,r0
0040b4  ebfffffe          BL       __aeabi_f2iz
0040b8  e0800009          ADD      r0,r0,r9
0040bc  e6bf0070          SXTH     r0,r0
0040c0  e1cd02b8          STRH     r0,[sp,#0x28]
;;;2841       stParam.i16OffsetY                  = i32PosY + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
0040c4  e51f1824          LDR      r1,|L1.14504|
0040c8  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0040cc  e2610011          RSB      r0,r1,#0x11
0040d0  ebfffffe          BL       __aeabi_ui2f
0040d4  e58d0008          STR      r0,[sp,#8]
0040d8  e1d400fa          LDRSH    r0,[r4,#0xa]
0040dc  ebfffffe          BL       __aeabi_i2f
0040e0  e51f183c          LDR      r1,|L1.14508|
0040e4  e58d0004          STR      r0,[sp,#4]
0040e8  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0040ec  e2610011          RSB      r0,r1,#0x11
0040f0  ebfffffe          BL       __aeabi_ui2f
0040f4  e58d0000          STR      r0,[sp,#0]
0040f8  e59d1004          LDR      r1,[sp,#4]
0040fc  ebfffffe          BL       __aeabi_fmul
004100  e1a08000          MOV      r8,r0
004104  e59d1008          LDR      r1,[sp,#8]
004108  ebfffffe          BL       __aeabi_fdiv
00410c  e1a07000          MOV      r7,r0
004110  ebfffffe          BL       __aeabi_f2iz
004114  e080000a          ADD      r0,r0,r10
004118  e6bf0070          SXTH     r0,r0
00411c  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2842   
;;;2843       stParam.stRotBlendCfg.eDstRedProt   = stGastate.eRedChPrtEn;
004120  e51f0878          LDR      r0,|L1.14512|
004124  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
004128  e5cd0010          STRB     r0,[sp,#0x10]
;;;2844       stParam.stRotBlendCfg.eDstGreenProt = stGastate.eGreenChPrtEn;
00412c  e51f0884          LDR      r0,|L1.14512|
004130  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
004134  e5cd0011          STRB     r0,[sp,#0x11]
;;;2845       stParam.stRotBlendCfg.eDstBlueProt  = stGastate.eBlueChPrtEn;
004138  e51f0890          LDR      r0,|L1.14512|
00413c  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
004140  e5cd0012          STRB     r0,[sp,#0x12]
;;;2846       stParam.stRotBlendCfg.eDstAlphaProt = stGastate.eAlphaChPrtEn;
004144  e51f089c          LDR      r0,|L1.14512|
004148  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00414c  e5cd0013          STRB     r0,[sp,#0x13]
;;;2847   
;;;2848       stParam.stRotBlendCfg.eSrcRedFad    = stGastate.eSrcRedFad;
004150  e51f08a8          LDR      r0,|L1.14512|
004154  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
004158  e5cd0014          STRB     r0,[sp,#0x14]
;;;2849       stParam.stRotBlendCfg.eSrcGreenFad  = stGastate.eSrcGreenFad;
00415c  e51f08b4          LDR      r0,|L1.14512|
004160  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
004164  e5cd0015          STRB     r0,[sp,#0x15]
;;;2850       stParam.stRotBlendCfg.eSrcBlueFad   = stGastate.eSrcBlueFad;
004168  e51f08c0          LDR      r0,|L1.14512|
00416c  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
004170  e5cd0016          STRB     r0,[sp,#0x16]
;;;2851       stParam.stRotBlendCfg.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
004174  e51f08cc          LDR      r0,|L1.14512|
004178  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
00417c  e5cd0017          STRB     r0,[sp,#0x17]
;;;2852   
;;;2853       stParam.stRotBlendCfg.u8FadingFctr  = stGastate.u8FadingFctr;
004180  e51f08d8          LDR      r0,|L1.14512|
004184  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
004188  e5cd0018          STRB     r0,[sp,#0x18]
;;;2854       stParam.stRotBlendCfg.eBldOrd       = stGastate.eBlndOrder;
00418c  e51f08e4          LDR      r0,|L1.14512|
004190  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
004194  e5cd0019          STRB     r0,[sp,#0x19]
;;;2855   
;;;2856       stParam.stRotBlendCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
004198  e51f08f0          LDR      r0,|L1.14512|
00419c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0041a0  e5cd001a          STRB     r0,[sp,#0x1a]
;;;2857       stParam.stRotBlendCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
0041a4  e51f08fc          LDR      r0,|L1.14512|
0041a8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0041ac  e5cd001b          STRB     r0,[sp,#0x1b]
;;;2858   
;;;2859   #ifdef GA_USE_MATH_LIB 
;;;2860       vRotLib_RotateBlend(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
0041b0  e1a0000b          MOV      r0,r11
0041b4  ebfffffe          BL       __aeabi_f2d
0041b8  e1a07000          MOV      r7,r0
0041bc  e51f0910          LDR      r0,|L1.14516|
0041c0  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
0041c4  e1a02007          MOV      r2,r7
0041c8  e1a03001          MOV      r3,r1
0041cc  e58d0000          STR      r0,[sp,#0]
0041d0  e28d100c          ADD      r1,sp,#0xc
0041d4  e28d002c          ADD      r0,sp,#0x2c
0041d8  ebfffffe          BL       vRotLib_RotateBlend
;;;2861   #else
;;;2862       vRotLib_RotateBlend(&stMem, &stParam, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;2863   #endif    
;;;2864   }
0041dc  e28dd03c          ADD      sp,sp,#0x3c
0041e0  e8bd8ff0          POP      {r4-r11,pc}
;;;2865   
                          ENDP

                  vGfBuffRotateBlendBitmapPart PROC
;;;2868   
;;;2869   void vGfBuffRotateBlendBitmapPart(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
0041e4  e92d4ff0          PUSH     {r4-r11,lr}
;;;2870                                     int32_t i32PosX, int32_t i32PosY)
;;;2871   {
0041e8  e24dd044          SUB      sp,sp,#0x44
0041ec  e1a04000          MOV      r4,r0
0041f0  e1a09001          MOV      r9,r1
0041f4  e1a06002          MOV      r6,r2
0041f8  e1a05003          MOV      r5,r3
0041fc  e1cda6d8          LDRD     r10,r11,[sp,#0x68]
;;;2872       rot_mem_part_st  stMem;
;;;2873       rot_blendcfg_st  stParam;
;;;2874       float32_t        f32AngleLocal;
;;;2875   
;;;2876       u8PreviousOperation = 0U;
004200  e3a00000          MOV      r0,#0
004204  e59f1670          LDR      r1,|L1.18556|
004208  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2877   
;;;2878       f32AngleLocal = f32CheckAngle(f32Angle);
00420c  e1a00009          MOV      r0,r9
004210  ebfffffe          BL       f32CheckAngle
004214  e58d000c          STR      r0,[sp,#0xc]
;;;2879   
;;;2880       stMem.u16SrcHeight    = pstImgPart->u16Height;
004218  e1d500b6          LDRH     r0,[r5,#6]
00421c  e1cd03b0          STRH     r0,[sp,#0x30]
;;;2881       stMem.u16SrcWidth     = pstSrcImage->u16Width;
004220  e1d400b4          LDRH     r0,[r4,#4]
004224  e1cd03b2          STRH     r0,[sp,#0x32]
;;;2882       stMem.u16DotCnt       = pstImgPart->u16Width;
004228  e1d500b4          LDRH     r0,[r5,#4]
00422c  e1cd03b8          STRH     r0,[sp,#0x38]
;;;2883       stMem.u32DstAddr      = pstDstImage->u32Address;
004230  e5960000          LDR      r0,[r6,#0]
004234  e58d003c          STR      r0,[sp,#0x3c]
;;;2884       stMem.u16DstImgWidth  = pstDstImage->u16Width;
004238  e1d600b4          LDRH     r0,[r6,#4]
00423c  e1cd04b0          STRH     r0,[sp,#0x40]
;;;2885       stMem.u16DstImgHeight = pstDstImage->u16Height;
004240  e1d600b6          LDRH     r0,[r6,#6]
004244  e1cd04b2          STRH     r0,[sp,#0x42]
;;;2886   
;;;2887       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
004248  e5d4000c          LDRB     r0,[r4,#0xc]
00424c  e3500004          CMP      r0,#4
004250  1a00000b          BNE      |L1.17028|
;;;2888       {
;;;2889           stMem.u32SrcAddr                 = pstSrcImage->u32Address + 2U*pstImgPart->u16SrcOffsY*pstSrcImage->u16Width + 2U*pstImgPart->u16SrcOffsX;
004254  e5940000          LDR      r0,[r4,#0]
004258  e1d510b2          LDRH     r1,[r5,#2]
00425c  e1a01081          LSL      r1,r1,#1
004260  e1d420b4          LDRH     r2,[r4,#4]
004264  e0200291          MLA      r0,r1,r2,r0
004268  e1d510b0          LDRH     r1,[r5,#0]
00426c  e3a02002          MOV      r2,#2
004270  e0200192          MLA      r0,r2,r1,r0
004274  e58d0034          STR      r0,[sp,#0x34]
;;;2890           stParam.stRotBlendCfg.eSrcColFmt = GA_RGB16;
004278  e3a00000          MOV      r0,#0
00427c  e5cd0010          STRB     r0,[sp,#0x10]
004280  ea00000a          B        |L1.17072|
                  |L1.17028|
;;;2891       }
;;;2892       else
;;;2893       {
;;;2894           stMem.u32SrcAddr                 = pstSrcImage->u32Address + 4U*pstImgPart->u16SrcOffsY*pstSrcImage->u16Width + 4U*pstImgPart->u16SrcOffsX;
004284  e5940000          LDR      r0,[r4,#0]
004288  e1d510b2          LDRH     r1,[r5,#2]
00428c  e1a01101          LSL      r1,r1,#2
004290  e1d420b4          LDRH     r2,[r4,#4]
004294  e0200291          MLA      r0,r1,r2,r0
004298  e1d510b0          LDRH     r1,[r5,#0]
00429c  e3a02004          MOV      r2,#4
0042a0  e0200192          MLA      r0,r2,r1,r0
0042a4  e58d0034          STR      r0,[sp,#0x34]
;;;2895           stParam.stRotBlendCfg.eSrcColFmt = GA_RGBA32;
0042a8  e3a00001          MOV      r0,#1
0042ac  e5cd0010          STRB     r0,[sp,#0x10]
                  |L1.17072|
;;;2896       }
;;;2897   
;;;2898       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
0042b0  e5d6000c          LDRB     r0,[r6,#0xc]
0042b4  e3500004          CMP      r0,#4
0042b8  1a000002          BNE      |L1.17096|
;;;2899       {
;;;2900           stParam.stRotBlendCfg.eDstColFmt = GA_RGB16;
0042bc  e3a00000          MOV      r0,#0
0042c0  e5cd0011          STRB     r0,[sp,#0x11]
0042c4  ea000001          B        |L1.17104|
                  |L1.17096|
;;;2901       }
;;;2902       else
;;;2903       {
;;;2904           stParam.stRotBlendCfg.eDstColFmt = GA_RGBA32;
0042c8  e3a00001          MOV      r0,#1
0042cc  e5cd0011          STRB     r0,[sp,#0x11]
                  |L1.17104|
;;;2905       }
;;;2906   
;;;2907       /* handle clip window */
;;;2908       stParam.stRotBlendCfg.eClipWndEn = stGastate.eClipWndEn;
0042d0  e51f0a28          LDR      r0,|L1.14512|
0042d4  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0042d8  e5cd0012          STRB     r0,[sp,#0x12]
;;;2909       if (stParam.stRotBlendCfg.eClipWndEn == GA_EN)
0042dc  e5dd0012          LDRB     r0,[sp,#0x12]
0042e0  e3500001          CMP      r0,#1
0042e4  1a00000b          BNE      |L1.17176|
;;;2910       {
;;;2911           stParam.stRotBlendCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0042e8  e51f0a40          LDR      r0,|L1.14512|
0042ec  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0042f0  e1cd02b0          STRH     r0,[sp,#0x20]
;;;2912           stParam.stRotBlendCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0042f4  e51f0a4c          LDR      r0,|L1.14512|
0042f8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0042fc  e1cd02b2          STRH     r0,[sp,#0x22]
;;;2913           stParam.stRotBlendCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
004300  e51f0a58          LDR      r0,|L1.14512|
004304  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
004308  e1cd02b4          STRH     r0,[sp,#0x24]
;;;2914           stParam.stRotBlendCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
00430c  e51f0a64          LDR      r0,|L1.14512|
004310  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
004314  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.17176|
;;;2915       }
;;;2916   
;;;2917       stParam.stRotBlendCfg.eFilterEn     = stGastate.eFilterEn;
004318  e51f0a70          LDR      r0,|L1.14512|
00431c  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
004320  e5cd0013          STRB     r0,[sp,#0x13]
;;;2918   
;;;2919       stParam.i16RotCentX                 = pstSrcImage->i16CenterX;
004324  e1d400b8          LDRH     r0,[r4,#8]
004328  e1cd02b8          STRH     r0,[sp,#0x28]
;;;2920       stParam.i16RotCentY                 = pstSrcImage->i16CenterY;
00432c  e1d400ba          LDRH     r0,[r4,#0xa]
004330  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;2921       stParam.i16OffsetX                  = i32PosX + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
004334  e51f1a94          LDR      r1,|L1.14504|
004338  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
00433c  e2610011          RSB      r0,r1,#0x11
004340  ebfffffe          BL       __aeabi_ui2f
004344  e58d0008          STR      r0,[sp,#8]
004348  e1d400f8          LDRSH    r0,[r4,#8]
00434c  ebfffffe          BL       __aeabi_i2f
004350  e51f1aac          LDR      r1,|L1.14508|
004354  e58d0004          STR      r0,[sp,#4]
004358  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
00435c  e2610011          RSB      r0,r1,#0x11
004360  ebfffffe          BL       __aeabi_ui2f
004364  e58d0000          STR      r0,[sp,#0]
004368  e59d1004          LDR      r1,[sp,#4]
00436c  ebfffffe          BL       __aeabi_fmul
004370  e1a08000          MOV      r8,r0
004374  e59d1008          LDR      r1,[sp,#8]
004378  ebfffffe          BL       __aeabi_fdiv
00437c  e1a07000          MOV      r7,r0
004380  ebfffffe          BL       __aeabi_f2iz
004384  e080000a          ADD      r0,r0,r10
004388  e6bf0070          SXTH     r0,r0
00438c  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;2922       stParam.i16OffsetY                  = i32PosY + (int32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
004390  e51f1af0          LDR      r1,|L1.14504|
004394  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
004398  e2610011          RSB      r0,r1,#0x11
00439c  ebfffffe          BL       __aeabi_ui2f
0043a0  e58d0008          STR      r0,[sp,#8]
0043a4  e1d400fa          LDRSH    r0,[r4,#0xa]
0043a8  ebfffffe          BL       __aeabi_i2f
0043ac  e51f1b08          LDR      r1,|L1.14508|
0043b0  e58d0004          STR      r0,[sp,#4]
0043b4  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0043b8  e2610011          RSB      r0,r1,#0x11
0043bc  ebfffffe          BL       __aeabi_ui2f
0043c0  e58d0000          STR      r0,[sp,#0]
0043c4  e59d1004          LDR      r1,[sp,#4]
0043c8  ebfffffe          BL       __aeabi_fmul
0043cc  e1a08000          MOV      r8,r0
0043d0  e59d1008          LDR      r1,[sp,#8]
0043d4  ebfffffe          BL       __aeabi_fdiv
0043d8  e1a07000          MOV      r7,r0
0043dc  ebfffffe          BL       __aeabi_f2iz
0043e0  e080000b          ADD      r0,r0,r11
0043e4  e6bf0070          SXTH     r0,r0
0043e8  e1cd02be          STRH     r0,[sp,#0x2e]
;;;2923   
;;;2924       stParam.stRotBlendCfg.eDstRedProt   = stGastate.eRedChPrtEn;
0043ec  e51f0b44          LDR      r0,|L1.14512|
0043f0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0043f4  e5cd0014          STRB     r0,[sp,#0x14]
;;;2925       stParam.stRotBlendCfg.eDstGreenProt = stGastate.eGreenChPrtEn;
0043f8  e51f0b50          LDR      r0,|L1.14512|
0043fc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
004400  e5cd0015          STRB     r0,[sp,#0x15]
;;;2926       stParam.stRotBlendCfg.eDstBlueProt  = stGastate.eBlueChPrtEn;
004404  e51f0b5c          LDR      r0,|L1.14512|
004408  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
00440c  e5cd0016          STRB     r0,[sp,#0x16]
;;;2927       stParam.stRotBlendCfg.eDstAlphaProt = stGastate.eAlphaChPrtEn;
004410  e51f0b68          LDR      r0,|L1.14512|
004414  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
004418  e5cd0017          STRB     r0,[sp,#0x17]
;;;2928   
;;;2929       stParam.stRotBlendCfg.eSrcRedFad    = stGastate.eSrcRedFad;
00441c  e51f0b74          LDR      r0,|L1.14512|
004420  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
004424  e5cd0018          STRB     r0,[sp,#0x18]
;;;2930       stParam.stRotBlendCfg.eSrcGreenFad  = stGastate.eSrcGreenFad;
004428  e51f0b80          LDR      r0,|L1.14512|
00442c  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
004430  e5cd0019          STRB     r0,[sp,#0x19]
;;;2931       stParam.stRotBlendCfg.eSrcBlueFad   = stGastate.eSrcBlueFad;
004434  e51f0b8c          LDR      r0,|L1.14512|
004438  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
00443c  e5cd001a          STRB     r0,[sp,#0x1a]
;;;2932       stParam.stRotBlendCfg.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
004440  e51f0b98          LDR      r0,|L1.14512|
004444  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
004448  e5cd001b          STRB     r0,[sp,#0x1b]
;;;2933   
;;;2934       stParam.stRotBlendCfg.u8FadingFctr  = stGastate.u8FadingFctr;
00444c  e51f0ba4          LDR      r0,|L1.14512|
004450  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
004454  e5cd001c          STRB     r0,[sp,#0x1c]
;;;2935       stParam.stRotBlendCfg.eBldOrd       = stGastate.eBlndOrder;
004458  e51f0bb0          LDR      r0,|L1.14512|
00445c  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
004460  e5cd001d          STRB     r0,[sp,#0x1d]
;;;2936   
;;;2937       stParam.stRotBlendCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
004464  e51f0bbc          LDR      r0,|L1.14512|
004468  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00446c  e5cd001e          STRB     r0,[sp,#0x1e]
;;;2938       stParam.stRotBlendCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
004470  e51f0bc8          LDR      r0,|L1.14512|
004474  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
004478  e5cd001f          STRB     r0,[sp,#0x1f]
;;;2939   
;;;2940   #ifdef GA_USE_MATH_LIB 
;;;2941       vRotLib_RotateBlend_Part(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
00447c  e59d000c          LDR      r0,[sp,#0xc]
004480  ebfffffe          BL       __aeabi_f2d
004484  e1a07000          MOV      r7,r0
004488  e51f0bdc          LDR      r0,|L1.14516|
00448c  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
004490  e1a02007          MOV      r2,r7
004494  e1a03001          MOV      r3,r1
004498  e58d0000          STR      r0,[sp,#0]
00449c  e28d1010          ADD      r1,sp,#0x10
0044a0  e28d0030          ADD      r0,sp,#0x30
0044a4  ebfffffe          BL       vRotLib_RotateBlend_Part
;;;2942   #else
;;;2943       vRotLib_RotateBlend_Part(&stMem, &stParam, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;2944   #endif    
;;;2945      
;;;2946   }
0044a8  e28dd044          ADD      sp,sp,#0x44
0044ac  e8bd8ff0          POP      {r4-r11,pc}
;;;2947   
                          ENDP

                  vGfBuffRotateNeedleFill PROC
;;;2950   
;;;2951   void vGfBuffRotateNeedleFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
0044b0  e92d4fff          PUSH     {r0-r11,lr}
;;;2952                                uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight)
;;;2953   {
0044b4  e24dd05c          SUB      sp,sp,#0x5c
0044b8  e1a05000          MOV      r5,r0
0044bc  e1a06002          MOV      r6,r2
0044c0  e59d7094          LDR      r7,[sp,#0x94]
;;;2954       uint32_t        u32Div, u32Count;
;;;2955       blit_mem_st     stMemFill;
;;;2956       blit_OvrRgbP_st stParamFill;
;;;2957       rot_mem_st      stMem;
;;;2958       rot_cfg_st      stParam;
;;;2959       uint8_t         u8SrcNoOfBytes, u8DstNoOfBytes;
;;;2960       float32_t       f32AngleLocal;
;;;2961       ga_en_e         eDraw;
;;;2962       
;;;2963       u8PreviousOperation = 0U;
0044c4  e3a00000          MOV      r0,#0
0044c8  e59f13ac          LDR      r1,|L1.18556|
0044cc  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;2964   
;;;2965       f32AngleLocal = f32CheckAngle(f32Angle);
0044d0  e59d0060          LDR      r0,[sp,#0x60]
0044d4  ebfffffe          BL       f32CheckAngle
0044d8  e58d0014          STR      r0,[sp,#0x14]
;;;2966   
;;;2967       stParamFill.eSrcFmt      = GA_RGBA32;
0044dc  e3a00001          MOV      r0,#1
0044e0  e5cd0044          STRB     r0,[sp,#0x44]
;;;2968       stParamFill.eFadeMode    = stGastate.eFadeMode;
0044e4  e51f0c3c          LDR      r0,|L1.14512|
0044e8  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0044ec  e5cd0045          STRB     r0,[sp,#0x45]
;;;2969       stParamFill.u8FadingFctr = stGastate.u8FadingFctr;
0044f0  e51f0c48          LDR      r0,|L1.14512|
0044f4  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0044f8  e5cd0047          STRB     r0,[sp,#0x47]
;;;2970       stParamFill.u32Color     = 0x0U;
0044fc  e3a00000          MOV      r0,#0
004500  e58d0040          STR      r0,[sp,#0x40]
;;;2971   
;;;2972       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
004504  e5d5000c          LDRB     r0,[r5,#0xc]
004508  e3500004          CMP      r0,#4
00450c  1a000003          BNE      |L1.17696|
;;;2973       {
;;;2974           stParam.stRotCfg.eSrcColFmt = GA_RGB16;
004510  e3a00000          MOV      r0,#0
004514  e5cd0018          STRB     r0,[sp,#0x18]
;;;2975           u8SrcNoOfBytes              = 2U;
004518  e3a0b002          MOV      r11,#2
00451c  ea000002          B        |L1.17708|
                  |L1.17696|
;;;2976       }
;;;2977       else
;;;2978       {
;;;2979           stParam.stRotCfg.eSrcColFmt = GA_RGBA32;
004520  e3a00001          MOV      r0,#1
004524  e5cd0018          STRB     r0,[sp,#0x18]
;;;2980           u8SrcNoOfBytes              = 4U;
004528  e3a0b004          MOV      r11,#4
                  |L1.17708|
;;;2981       }
;;;2982   
;;;2983       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00452c  e5d6000c          LDRB     r0,[r6,#0xc]
004530  e3500004          CMP      r0,#4
004534  1a000004          BNE      |L1.17740|
;;;2984       {
;;;2985           stParam.stRotCfg.eDstColFmt = GA_RGB16;
004538  e3a00000          MOV      r0,#0
00453c  e5cd0019          STRB     r0,[sp,#0x19]
;;;2986           u8DstNoOfBytes              = 2U;
004540  e3a09002          MOV      r9,#2
;;;2987           stParamFill.eSrcFmt         = GA_RGB16;
004544  e5cd0044          STRB     r0,[sp,#0x44]
004548  ea000003          B        |L1.17756|
                  |L1.17740|
;;;2988       }
;;;2989       else
;;;2990       {
;;;2991           stParam.stRotCfg.eDstColFmt = GA_RGBA32;
00454c  e3a00001          MOV      r0,#1
004550  e5cd0019          STRB     r0,[sp,#0x19]
;;;2992           u8DstNoOfBytes              = 4U;
004554  e3a09004          MOV      r9,#4
;;;2993           stParamFill.eSrcFmt         = GA_RGBA32;
004558  e5cd0044          STRB     r0,[sp,#0x44]
                  |L1.17756|
;;;2994       }
;;;2995   
;;;2996       /* handle clip window fill */
;;;2997       stParamFill.eClipWndEn = stGastate.eClipWndEn;
00455c  e51f0cb4          LDR      r0,|L1.14512|
004560  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
004564  e5cd0046          STRB     r0,[sp,#0x46]
;;;2998   
;;;2999       /* rotation settings */
;;;3000       stMem.u16SrcWidth     = pstSrcImage->u16Width;
004568  e1d510b4          LDRH     r1,[r5,#4]
00456c  e1cd13b2          STRH     r1,[sp,#0x32]
;;;3001       stMem.u32DstAddr      = pstDstImage->u32Address;
004570  e5960000          LDR      r0,[r6,#0]
004574  e58d0038          STR      r0,[sp,#0x38]
;;;3002       stMem.u16DstImgWidth  = pstDstImage->u16Width;
004578  e1d610b4          LDRH     r1,[r6,#4]
00457c  e1cd13bc          STRH     r1,[sp,#0x3c]
;;;3003       stMem.u16DstImgHeight = pstDstImage->u16Height;
004580  e1d610b6          LDRH     r1,[r6,#6]
004584  e1cd13be          STRH     r1,[sp,#0x3e]
;;;3004   
;;;3005       /* handle clip window rotate */
;;;3006       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
004588  e51f0ce0          LDR      r0,|L1.14512|
00458c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
004590  e5cd001a          STRB     r0,[sp,#0x1a]
;;;3007       if (stParam.stRotCfg.eClipWndEn == GA_EN)
004594  e5dd001a          LDRB     r0,[sp,#0x1a]
004598  e3500001          CMP      r0,#1
00459c  1a00000b          BNE      |L1.17872|
;;;3008       {
;;;3009           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0045a0  e51f0cf8          LDR      r0,|L1.14512|
0045a4  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0045a8  e1cd02b0          STRH     r0,[sp,#0x20]
;;;3010           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0045ac  e51f0d04          LDR      r0,|L1.14512|
0045b0  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0045b4  e1cd02b2          STRH     r0,[sp,#0x22]
;;;3011           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0045b8  e51f0d10          LDR      r0,|L1.14512|
0045bc  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0045c0  e1cd02b4          STRH     r0,[sp,#0x24]
;;;3012           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0045c4  e51f0d1c          LDR      r0,|L1.14512|
0045c8  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0045cc  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.17872|
;;;3013       }
;;;3014   
;;;3015       stParam.stRotCfg.eFilterEn     = stGastate.eFilterEn;
0045d0  e51f0d28          LDR      r0,|L1.14512|
0045d4  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
0045d8  e5cd001b          STRB     r0,[sp,#0x1b]
;;;3016       stParam.i16RotCentX            = pstSrcImage->i16CenterX;
0045dc  e1d510b8          LDRH     r1,[r5,#8]
0045e0  e1cd12b8          STRH     r1,[sp,#0x28]
;;;3017       stParam.i16RotCentY            = pstSrcImage->i16CenterY;
0045e4  e1d510ba          LDRH     r1,[r5,#0xa]
0045e8  e1cd12ba          STRH     r1,[sp,#0x2a]
;;;3018       stParam.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
0045ec  e51f1d4c          LDR      r1,|L1.14504|
0045f0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0045f4  e2610011          RSB      r0,r1,#0x11
0045f8  ebfffffe          BL       __aeabi_ui2f
0045fc  e58d000c          STR      r0,[sp,#0xc]
004600  e1d500f8          LDRSH    r0,[r5,#8]
004604  ebfffffe          BL       __aeabi_i2f
004608  e51f1d64          LDR      r1,|L1.14508|
00460c  e58d0004          STR      r0,[sp,#4]
004610  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
004614  e2610011          RSB      r0,r1,#0x11
004618  ebfffffe          BL       __aeabi_ui2f
00461c  e58d0000          STR      r0,[sp,#0]
004620  e59d1004          LDR      r1,[sp,#4]
004624  ebfffffe          BL       __aeabi_fmul
004628  e58d0008          STR      r0,[sp,#8]
00462c  e59d100c          LDR      r1,[sp,#0xc]
004630  ebfffffe          BL       __aeabi_fdiv
004634  e58d0010          STR      r0,[sp,#0x10]
004638  ebfffffe          BL       __aeabi_f2uiz
00463c  e59d1068          LDR      r1,[sp,#0x68]
004640  e0800001          ADD      r0,r0,r1
004644  e6bf1070          SXTH     r1,r0
004648  e1cd12bc          STRH     r1,[sp,#0x2c]
;;;3019       stParam.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
00464c  e51f1dac          LDR      r1,|L1.14504|
004650  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
004654  e2610011          RSB      r0,r1,#0x11
004658  ebfffffe          BL       __aeabi_ui2f
00465c  e58d000c          STR      r0,[sp,#0xc]
004660  e1d500fa          LDRSH    r0,[r5,#0xa]
004664  ebfffffe          BL       __aeabi_i2f
004668  e51f1dc4          LDR      r1,|L1.14508|
00466c  e58d0004          STR      r0,[sp,#4]
004670  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
004674  e2610011          RSB      r0,r1,#0x11
004678  ebfffffe          BL       __aeabi_ui2f
00467c  e58d0000          STR      r0,[sp,#0]
004680  e59d1004          LDR      r1,[sp,#4]
004684  ebfffffe          BL       __aeabi_fmul
004688  e58d0008          STR      r0,[sp,#8]
00468c  e59d100c          LDR      r1,[sp,#0xc]
004690  ebfffffe          BL       __aeabi_fdiv
004694  e58d0010          STR      r0,[sp,#0x10]
004698  ebfffffe          BL       __aeabi_f2uiz
00469c  e59d1090          LDR      r1,[sp,#0x90]
0046a0  e0800001          ADD      r0,r0,r1
0046a4  e6bf1070          SXTH     r1,r0
0046a8  e1cd12be          STRH     r1,[sp,#0x2e]
;;;3020       stParam.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
0046ac  e51f0e04          LDR      r0,|L1.14512|
0046b0  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0046b4  e5cd001d          STRB     r0,[sp,#0x1d]
;;;3021       stParam.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
0046b8  e51f0e10          LDR      r0,|L1.14512|
0046bc  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0046c0  e5cd001e          STRB     r0,[sp,#0x1e]
;;;3022   
;;;3023       u32Div = pstSrcImage->u16Height/u32BlockHeight;
0046c4  e1d500b6          LDRH     r0,[r5,#6]
0046c8  e1a01007          MOV      r1,r7
0046cc  ebfffffe          BL       __aeabi_uidiv
0046d0  e1a08000          MOV      r8,r0
;;;3024   
;;;3025       for (u32Count=0; u32Count<u32Div; u32Count++)
0046d4  e3a04000          MOV      r4,#0
0046d8  ea00004e          B        |L1.18456|
                  |L1.18140|
;;;3026       {
;;;3027           stMemFill.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
0046dc  e59f019c          LDR      r0,|L1.18560|
0046e0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0046e4  e0800004          ADD      r0,r0,r4
0046e8  e59f1194          LDR      r1,|L1.18564|
0046ec  e0810200          ADD      r0,r1,r0,LSL #4
0046f0  e1d000b8          LDRH     r0,[r0,#8]
0046f4  e59f1184          LDR      r1,|L1.18560|
0046f8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0046fc  e0811004          ADD      r1,r1,r4
004700  e59f217c          LDR      r2,|L1.18564|
004704  e7921201          LDR      r1,[r2,r1,LSL #4]
004708  e0400001          SUB      r0,r0,r1
00470c  e6ff1070          UXTH     r1,r0
004710  e1cd15b8          STRH     r1,[sp,#0x58]
;;;3028           stMemFill.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1];
004714  e59f0164          LDR      r0,|L1.18560|
004718  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00471c  e0800004          ADD      r0,r0,r4
004720  e2821000          ADD      r1,r2,#0
004724  e0810200          ADD      r0,r1,r0,LSL #4
004728  e1d000bc          LDRH     r0,[r0,#0xc]
00472c  e59f114c          LDR      r1,|L1.18560|
004730  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004734  e0811004          ADD      r1,r1,r4
004738  e0821201          ADD      r1,r2,r1,LSL #4
00473c  e1d110b4          LDRH     r1,[r1,#4]
004740  e0400001          SUB      r0,r0,r1
004744  e6ff1070          UXTH     r1,r0
004748  e1cd15ba          STRH     r1,[sp,#0x5a]
;;;3029           /* handle clip window fill */
;;;3030           eDraw = eHandleClipWindowBlit(pstDstImage, stMemFill.u16DotCnt, stMemFill.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]);
00474c  e59f012c          LDR      r0,|L1.18560|
004750  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004754  e0800004          ADD      r0,r0,r4
004758  e2821000          ADD      r1,r2,#0
00475c  e0810200          ADD      r0,r1,r0,LSL #4
004760  e5900004          LDR      r0,[r0,#4]
004764  e59f1114          LDR      r1,|L1.18560|
004768  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00476c  e0811004          ADD      r1,r1,r4
004770  e7921201          LDR      r1,[r2,r1,LSL #4]
004774  e58d0004          STR      r0,[sp,#4]
004778  e51f0ed0          LDR      r0,|L1.14512|
00477c  e58d1000          STR      r1,[sp,#0]
004780  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
004784  e1dd25ba          LDRH     r2,[sp,#0x5a]
004788  e1dd15b8          LDRH     r1,[sp,#0x58]
00478c  e1a00006          MOV      r0,r6
004790  ebfffffe          BL       eHandleClipWindowBlit
004794  e1a0a000          MOV      r10,r0
;;;3031           if(eDraw == GA_EN)
004798  e35a0001          CMP      r10,#1
00479c  1a00001c          BNE      |L1.18452|
;;;3032           {
;;;3033               stParamFill.eClipWndEn = eDraw;
0047a0  e5cda046          STRB     r10,[sp,#0x46]
;;;3034               stMemFill.u16DstWidth = pstDstImage->u16Width;
0047a4  e1d600b4          LDRH     r0,[r6,#4]
0047a8  e1cd05b0          STRH     r0,[sp,#0x50]
;;;3035               stMemFill.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
0047ac  e5960000          LDR      r0,[r6,#0]
0047b0  e1d610b4          LDRH     r1,[r6,#4]
0047b4  e0010991          MUL      r1,r1,r9
0047b8  e59f20c0          LDR      r2,|L1.18560|
0047bc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0047c0  e0822004          ADD      r2,r2,r4
0047c4  e59f30b8          LDR      r3,|L1.18564|
0047c8  e0832202          ADD      r2,r3,r2,LSL #4
0047cc  e5922004          LDR      r2,[r2,#4]
0047d0  e0200291          MLA      r0,r1,r2,r0
0047d4  e59f10a4          LDR      r1,|L1.18560|
0047d8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0047dc  e0811004          ADD      r1,r1,r4
0047e0  e2832000          ADD      r2,r3,#0
0047e4  e7921201          LDR      r1,[r2,r1,LSL #4]
0047e8  e0200199          MLA      r0,r9,r1,r0
0047ec  e58d0054          STR      r0,[sp,#0x54]
;;;3036               vBlit_OverwriteFillRGB(&stMemFill, &stParamFill, pstWriteList);
0047f0  e51f0f44          LDR      r0,|L1.14516|
0047f4  e28d1040          ADD      r1,sp,#0x40
0047f8  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0047fc  e28d0048          ADD      r0,sp,#0x48
004800  ebfffffe          BL       vBlit_OverwriteFillRGB
;;;3037               vGfListExecute();
004804  ebfffffe          BL       vGfListExecute
;;;3038               stParamFill.eClipWndEn = stGastate.eClipWndEn;
004808  e51f0f60          LDR      r0,|L1.14512|
00480c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
004810  e5cd0046          STRB     r0,[sp,#0x46]
                  |L1.18452|
004814  e2844001          ADD      r4,r4,#1              ;3025
                  |L1.18456|
004818  e1540008          CMP      r4,r8                 ;3025
00481c  3affffae          BCC      |L1.18140|
;;;3039           }
;;;3040       }
;;;3041   
;;;3042       
;;;3043   
;;;3044       stMemFill.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+3][2] - u32MinMaxValues_old_old[u32NeedleNumber+3][0];
004820  e59f005c          LDR      r0,|L1.18564|
004824  e59f1054          LDR      r1,|L1.18560|
004828  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00482c  e2811003          ADD      r1,r1,#3
004830  e0800201          ADD      r0,r0,r1,LSL #4
004834  e1d000b8          LDRH     r0,[r0,#8]
004838  e59f1044          LDR      r1,|L1.18564|
00483c  e59f203c          LDR      r2,|L1.18560|
004840  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004844  e2822003          ADD      r2,r2,#3
004848  e7911202          LDR      r1,[r1,r2,LSL #4]
00484c  e0400001          SUB      r0,r0,r1
004850  e6ff1070          UXTH     r1,r0
004854  e1cd15b8          STRH     r1,[sp,#0x58]
;;;3045       stMemFill.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+3][3] - u32MinMaxValues_old_old[u32NeedleNumber+3][1];
004858  e59f0024          LDR      r0,|L1.18564|
00485c  e59f101c          LDR      r1,|L1.18560|
004860  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004864  e2811003          ADD      r1,r1,#3
004868  e0800201          ADD      r0,r0,r1,LSL #4
00486c  e1d000bc          LDRH     r0,[r0,#0xc]
004870  e59f100c          LDR      r1,|L1.18564|
004874  e59f2004          LDR      r2,|L1.18560|
004878  ea000002          B        |L1.18568|
                  |L1.18556|
                          DCD      u8PreviousOperation
                  |L1.18560|
                          DCD      u32NeedleNumber
                  |L1.18564|
                          DCD      u32MinMaxValues_old_old
                  |L1.18568|
004888  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00488c  e2822003          ADD      r2,r2,#3
004890  e0811202          ADD      r1,r1,r2,LSL #4
004894  e1d110b4          LDRH     r1,[r1,#4]
004898  e0400001          SUB      r0,r0,r1
00489c  e6ff1070          UXTH     r1,r0
0048a0  e1cd15ba          STRH     r1,[sp,#0x5a]
;;;3046       /* handle clip window fill */
;;;3047       eDraw = eHandleClipWindowBlit(pstDstImage, stMemFill.u16DotCnt, stMemFill.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+3][0], u32MinMaxValues_old_old[u32NeedleNumber+3][1]);
0048a4  e51f0028          LDR      r0,|L1.18564|
0048a8  e51f1030          LDR      r1,|L1.18560|
0048ac  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0048b0  e2811003          ADD      r1,r1,#3
0048b4  e0800201          ADD      r0,r0,r1,LSL #4
0048b8  e5900004          LDR      r0,[r0,#4]
0048bc  e51f1040          LDR      r1,|L1.18564|
0048c0  e51f2048          LDR      r2,|L1.18560|
0048c4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0048c8  e2822003          ADD      r2,r2,#3
0048cc  e7911202          LDR      r1,[r1,r2,LSL #4]
0048d0  e58d0004          STR      r0,[sp,#4]
0048d4  e59f0f94          LDR      r0,|L1.22640|
0048d8  e58d1000          STR      r1,[sp,#0]
0048dc  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0048e0  e1dd25ba          LDRH     r2,[sp,#0x5a]
0048e4  e1dd15b8          LDRH     r1,[sp,#0x58]
0048e8  e1a00006          MOV      r0,r6
0048ec  ebfffffe          BL       eHandleClipWindowBlit
0048f0  e1a0a000          MOV      r10,r0
;;;3048       if(eDraw == GA_EN)
0048f4  e35a0001          CMP      r10,#1
0048f8  1a00001c          BNE      |L1.18800|
;;;3049       {
;;;3050           stParamFill.eClipWndEn = eDraw;
0048fc  e5cda046          STRB     r10,[sp,#0x46]
;;;3051           stMemFill.u16DstWidth = pstDstImage->u16Width;
004900  e1d600b4          LDRH     r0,[r6,#4]
004904  e1cd05b0          STRH     r0,[sp,#0x50]
;;;3052           stMemFill.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+3][0];
004908  e5961000          LDR      r1,[r6,#0]
00490c  e1d600b4          LDRH     r0,[r6,#4]
004910  e0000990          MUL      r0,r0,r9
004914  e51f2098          LDR      r2,|L1.18564|
004918  e51f30a0          LDR      r3,|L1.18560|
00491c  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
004920  e2833003          ADD      r3,r3,#3
004924  e0822203          ADD      r2,r2,r3,LSL #4
004928  e5922004          LDR      r2,[r2,#4]
00492c  e0201290          MLA      r0,r0,r2,r1
004930  e51f10b4          LDR      r1,|L1.18564|
004934  e51f20bc          LDR      r2,|L1.18560|
004938  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00493c  e2822003          ADD      r2,r2,#3
004940  e7911202          LDR      r1,[r1,r2,LSL #4]
004944  e0200199          MLA      r0,r9,r1,r0
004948  e58d0054          STR      r0,[sp,#0x54]
;;;3053           vBlit_OverwriteFillRGB(&stMemFill, &stParamFill, pstWriteList);
00494c  e59f0f20          LDR      r0,|L1.22644|
004950  e28d1040          ADD      r1,sp,#0x40
004954  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
004958  e28d0048          ADD      r0,sp,#0x48
00495c  ebfffffe          BL       vBlit_OverwriteFillRGB
;;;3054           vGfListExecute();
004960  ebfffffe          BL       vGfListExecute
;;;3055           stParamFill.eClipWndEn = stGastate.eClipWndEn;
004964  e59f0f04          LDR      r0,|L1.22640|
004968  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00496c  e5cd0046          STRB     r0,[sp,#0x46]
                  |L1.18800|
;;;3056       }
;;;3057       
;;;3058       for (u32Count=0; u32Count<u32Div; u32Count++)
004970  e3a04000          MOV      r4,#0
004974  ea00004f          B        |L1.19128|
                  |L1.18808|
;;;3059       {
;;;3060           stMem.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*u32Count*u32BlockHeight*pstSrcImage->u16Width;
004978  e001049b          MUL      r1,r11,r4
00497c  e0010791          MUL      r1,r1,r7
004980  e5950000          LDR      r0,[r5,#0]
004984  e1d520b4          LDRH     r2,[r5,#4]
004988  e0200291          MLA      r0,r1,r2,r0
00498c  e58d0034          STR      r0,[sp,#0x34]
;;;3061           stMem.u16SrcHeight  = u32BlockHeight;
004990  e6ff1077          UXTH     r1,r7
004994  e1cd13b0          STRH     r1,[sp,#0x30]
;;;3062           stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Count*u32BlockHeight;
004998  e1d500fa          LDRSH    r0,[r5,#0xa]
00499c  e59f1ed4          LDR      r1,|L1.22648|
0049a0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0049a4  e2611011          RSB      r1,r1,#0x11
0049a8  e0010491          MUL      r1,r1,r4
0049ac  e0600791          MLS      r0,r1,r7,r0
0049b0  e6bf1070          SXTH     r1,r0
0049b4  e1cd12ba          STRH     r1,[sp,#0x2a]
;;;3063           /* Reinitializing Clip window and Destination Address */
;;;3064           stMem.u32DstAddr      = pstDstImage->u32Address;
0049b8  e5960000          LDR      r0,[r6,#0]
0049bc  e58d0038          STR      r0,[sp,#0x38]
;;;3065           stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
0049c0  e59f0ea8          LDR      r0,|L1.22640|
0049c4  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0049c8  e5cd001a          STRB     r0,[sp,#0x1a]
;;;3066           if(stParam.stRotCfg.eClipWndEn == GA_EN)
0049cc  e5dd001a          LDRB     r0,[sp,#0x1a]
0049d0  e3500001          CMP      r0,#1
0049d4  1a00000b          BNE      |L1.18952|
;;;3067           {
;;;3068               stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0049d8  e59f0e90          LDR      r0,|L1.22640|
0049dc  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0049e0  e1cd02b0          STRH     r0,[sp,#0x20]
;;;3069               stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0049e4  e59f0e84          LDR      r0,|L1.22640|
0049e8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0049ec  e1cd02b2          STRH     r0,[sp,#0x22]
;;;3070               stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0049f0  e59f0e78          LDR      r0,|L1.22640|
0049f4  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0049f8  e1cd02b4          STRH     r0,[sp,#0x24]
;;;3071               stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0049fc  e59f0e6c          LDR      r0,|L1.22640|
004a00  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
004a04  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.18952|
;;;3072           }
;;;3073   #ifdef GA_USE_MATH_LIB
;;;3074           vRotLib_Rotate(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
004a08  e59d0014          LDR      r0,[sp,#0x14]
004a0c  ebfffffe          BL       __aeabi_f2d
004a10  e1cd00f8          STRD     r0,r1,[sp,#8]
004a14  e59f0e58          LDR      r0,|L1.22644|
004a18  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
004a1c  e58d0000          STR      r0,[sp,#0]
004a20  e1a03001          MOV      r3,r1
004a24  e59d2008          LDR      r2,[sp,#8]
004a28  e28d1018          ADD      r1,sp,#0x18
004a2c  e28d0030          ADD      r0,sp,#0x30
004a30  ebfffffe          BL       vRotLib_Rotate
;;;3075   #else
;;;3076           vRotLib_Rotate(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;3077   #endif  
;;;3078           vGfListExecute();
004a34  ebfffffe          BL       vGfListExecute
;;;3079     
;;;3080           u32MinMaxValues[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
004a38  ebfffffe          BL       u32GfGetMinXCoordinate
004a3c  e2400001          SUB      r0,r0,#1
004a40  e51f11c8          LDR      r1,|L1.18560|
004a44  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004a48  e0811004          ADD      r1,r1,r4
004a4c  e59f2e28          LDR      r2,|L1.22652|
004a50  e7820201          STR      r0,[r2,r1,LSL #4]
;;;3081           u32MinMaxValues[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
004a54  ebfffffe          BL       u32GfGetMinYCoordinate
004a58  e2400001          SUB      r0,r0,#1
004a5c  e51f11e4          LDR      r1,|L1.18560|
004a60  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004a64  e0811004          ADD      r1,r1,r4
004a68  e59f2e0c          LDR      r2,|L1.22652|
004a6c  e0821201          ADD      r1,r2,r1,LSL #4
004a70  e5810004          STR      r0,[r1,#4]
;;;3082           u32MinMaxValues[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
004a74  ebfffffe          BL       u32GfGetMaxXCoordinate
004a78  e2800001          ADD      r0,r0,#1
004a7c  e51f1204          LDR      r1,|L1.18560|
004a80  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004a84  e0811004          ADD      r1,r1,r4
004a88  e59f2dec          LDR      r2,|L1.22652|
004a8c  e0821201          ADD      r1,r2,r1,LSL #4
004a90  e5810008          STR      r0,[r1,#8]
;;;3083           u32MinMaxValues[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
004a94  ebfffffe          BL       u32GfGetMaxYCoordinate
004a98  e2800001          ADD      r0,r0,#1
004a9c  e51f1224          LDR      r1,|L1.18560|
004aa0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004aa4  e0811004          ADD      r1,r1,r4
004aa8  e59f2dcc          LDR      r2,|L1.22652|
004aac  e0821201          ADD      r1,r2,r1,LSL #4
004ab0  e581000c          STR      r0,[r1,#0xc]
004ab4  e2844001          ADD      r4,r4,#1              ;3058
                  |L1.19128|
004ab8  e1540008          CMP      r4,r8                 ;3058
004abc  3affffad          BCC      |L1.18808|
;;;3084       }
;;;3085   
;;;3086       stMem.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*u32Div*u32BlockHeight*pstSrcImage->u16Width;
004ac0  e001089b          MUL      r1,r11,r8
004ac4  e0010791          MUL      r1,r1,r7
004ac8  e5950000          LDR      r0,[r5,#0]
004acc  e1d520b4          LDRH     r2,[r5,#4]
004ad0  e0200291          MLA      r0,r1,r2,r0
004ad4  e58d0034          STR      r0,[sp,#0x34]
;;;3087       stMem.u16SrcHeight  = pstSrcImage->u16Height - u32Div*u32BlockHeight;
004ad8  e1d500b6          LDRH     r0,[r5,#6]
004adc  e0600798          MLS      r0,r8,r7,r0
004ae0  e6ff1070          UXTH     r1,r0
004ae4  e1cd13b0          STRH     r1,[sp,#0x30]
;;;3088       stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Div*u32BlockHeight;
004ae8  e1d500fa          LDRSH    r0,[r5,#0xa]
004aec  e59f1d84          LDR      r1,|L1.22648|
004af0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
004af4  e2611011          RSB      r1,r1,#0x11
004af8  e0010891          MUL      r1,r1,r8
004afc  e0600791          MLS      r0,r1,r7,r0
004b00  e6bf1070          SXTH     r1,r0
004b04  e1cd12ba          STRH     r1,[sp,#0x2a]
;;;3089       /* Reinitializing Clip window and Destination Address */
;;;3090       stMem.u32DstAddr      = pstDstImage->u32Address;
004b08  e5960000          LDR      r0,[r6,#0]
004b0c  e58d0038          STR      r0,[sp,#0x38]
;;;3091       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
004b10  e59f0d58          LDR      r0,|L1.22640|
004b14  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
004b18  e5cd001a          STRB     r0,[sp,#0x1a]
;;;3092       if(stParam.stRotCfg.eClipWndEn == GA_EN)
004b1c  e5dd001a          LDRB     r0,[sp,#0x1a]
004b20  e3500001          CMP      r0,#1
004b24  1a00000b          BNE      |L1.19288|
;;;3093       {
;;;3094           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
004b28  e59f0d40          LDR      r0,|L1.22640|
004b2c  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
004b30  e1cd02b0          STRH     r0,[sp,#0x20]
;;;3095           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
004b34  e59f0d34          LDR      r0,|L1.22640|
004b38  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
004b3c  e1cd02b2          STRH     r0,[sp,#0x22]
;;;3096           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
004b40  e59f0d28          LDR      r0,|L1.22640|
004b44  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
004b48  e1cd02b4          STRH     r0,[sp,#0x24]
;;;3097           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
004b4c  e59f0d1c          LDR      r0,|L1.22640|
004b50  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
004b54  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.19288|
;;;3098       }
;;;3099       if(stMem.u16SrcHeight > 0)
004b58  e1dd03b0          LDRH     r0,[sp,#0x30]
004b5c  e3500000          CMP      r0,#0
004b60  da00000b          BLE      |L1.19348|
;;;3100       {
;;;3101   #ifdef GA_USE_MATH_LIB
;;;3102           vRotLib_Rotate(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
004b64  e59d0014          LDR      r0,[sp,#0x14]
004b68  ebfffffe          BL       __aeabi_f2d
004b6c  e1cd00f8          STRD     r0,r1,[sp,#8]
004b70  e59f0cfc          LDR      r0,|L1.22644|
004b74  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
004b78  e58d0000          STR      r0,[sp,#0]
004b7c  e1a03001          MOV      r3,r1
004b80  e59d2008          LDR      r2,[sp,#8]
004b84  e28d1018          ADD      r1,sp,#0x18
004b88  e28d0030          ADD      r0,sp,#0x30
004b8c  ebfffffe          BL       vRotLib_Rotate
;;;3103   #else
;;;3104           vRotLib_Rotate(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;3105   #endif
;;;3106           vGfListExecute();
004b90  ebfffffe          BL       vGfListExecute
                  |L1.19348|
;;;3107       }
;;;3108   
;;;3109       u32MinMaxValues[u32NeedleNumber+3][0] = u32GfGetMinXCoordinate()-1U;
004b94  ebfffffe          BL       u32GfGetMinXCoordinate
004b98  e2400001          SUB      r0,r0,#1
004b9c  e59f1cd8          LDR      r1,|L1.22652|
004ba0  e51f2328          LDR      r2,|L1.18560|
004ba4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004ba8  e2822003          ADD      r2,r2,#3
004bac  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3110       u32MinMaxValues[u32NeedleNumber+3][1] = u32GfGetMinYCoordinate()-1U;
004bb0  ebfffffe          BL       u32GfGetMinYCoordinate
004bb4  e2400001          SUB      r0,r0,#1
004bb8  e59f1cbc          LDR      r1,|L1.22652|
004bbc  e51f2344          LDR      r2,|L1.18560|
004bc0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004bc4  e2822003          ADD      r2,r2,#3
004bc8  e0811202          ADD      r1,r1,r2,LSL #4
004bcc  e5810004          STR      r0,[r1,#4]
;;;3111       u32MinMaxValues[u32NeedleNumber+3][2] = u32GfGetMaxXCoordinate()+1U;
004bd0  ebfffffe          BL       u32GfGetMaxXCoordinate
004bd4  e2800001          ADD      r0,r0,#1
004bd8  e59f1c9c          LDR      r1,|L1.22652|
004bdc  e51f2364          LDR      r2,|L1.18560|
004be0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004be4  e2822003          ADD      r2,r2,#3
004be8  e0811202          ADD      r1,r1,r2,LSL #4
004bec  e5810008          STR      r0,[r1,#8]
;;;3112       u32MinMaxValues[u32NeedleNumber+3][3] = u32GfGetMaxYCoordinate()+1U;
004bf0  ebfffffe          BL       u32GfGetMaxYCoordinate
004bf4  e2801001          ADD      r1,r0,#1
004bf8  e59f0c7c          LDR      r0,|L1.22652|
004bfc  e51f2384          LDR      r2,|L1.18560|
004c00  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004c04  e2822003          ADD      r2,r2,#3
004c08  e0800202          ADD      r0,r0,r2,LSL #4
004c0c  e580100c          STR      r1,[r0,#0xc]
;;;3113   
;;;3114       u32MinMaxValues_old_old[u32NeedleNumber+0][0] = u32MinMaxValues_old[u32NeedleNumber+0][0];
004c10  e59f1c68          LDR      r1,|L1.22656|
004c14  e51f039c          LDR      r0,|L1.18560|
004c18  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c1c  e7911200          LDR      r1,[r1,r0,LSL #4]
004c20  e51f23a4          LDR      r2,|L1.18564|
004c24  e51f03ac          LDR      r0,|L1.18560|
004c28  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c2c  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3115       u32MinMaxValues_old_old[u32NeedleNumber+0][1] = u32MinMaxValues_old[u32NeedleNumber+0][1];
004c30  e59f1c48          LDR      r1,|L1.22656|
004c34  e51f03bc          LDR      r0,|L1.18560|
004c38  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c3c  e0810200          ADD      r0,r1,r0,LSL #4
004c40  e5901004          LDR      r1,[r0,#4]
004c44  e51f03cc          LDR      r0,|L1.18560|
004c48  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c4c  e0820200          ADD      r0,r2,r0,LSL #4
004c50  e5801004          STR      r1,[r0,#4]
;;;3116       u32MinMaxValues_old_old[u32NeedleNumber+0][2] = u32MinMaxValues_old[u32NeedleNumber+0][2];
004c54  e59f1c24          LDR      r1,|L1.22656|
004c58  e51f03e0          LDR      r0,|L1.18560|
004c5c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c60  e0810200          ADD      r0,r1,r0,LSL #4
004c64  e5901008          LDR      r1,[r0,#8]
004c68  e51f03f0          LDR      r0,|L1.18560|
004c6c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c70  e0820200          ADD      r0,r2,r0,LSL #4
004c74  e5801008          STR      r1,[r0,#8]
;;;3117       u32MinMaxValues_old_old[u32NeedleNumber+0][3] = u32MinMaxValues_old[u32NeedleNumber+0][3];
004c78  e59f1c00          LDR      r1,|L1.22656|
004c7c  e51f0404          LDR      r0,|L1.18560|
004c80  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c84  e0810200          ADD      r0,r1,r0,LSL #4
004c88  e590100c          LDR      r1,[r0,#0xc]
004c8c  e51f0414          LDR      r0,|L1.18560|
004c90  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004c94  e0820200          ADD      r0,r2,r0,LSL #4
004c98  e580100c          STR      r1,[r0,#0xc]
;;;3118       u32MinMaxValues_old_old[u32NeedleNumber+1][0] = u32MinMaxValues_old[u32NeedleNumber+1][0];
004c9c  e59f0bdc          LDR      r0,|L1.22656|
004ca0  e51f1428          LDR      r1,|L1.18560|
004ca4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004ca8  e2811001          ADD      r1,r1,#1
004cac  e7900201          LDR      r0,[r0,r1,LSL #4]
004cb0  e2821000          ADD      r1,r2,#0
004cb4  e51f243c          LDR      r2,|L1.18560|
004cb8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004cbc  e2822001          ADD      r2,r2,#1
004cc0  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3119       u32MinMaxValues_old_old[u32NeedleNumber+1][1] = u32MinMaxValues_old[u32NeedleNumber+1][1];
004cc4  e59f0bb4          LDR      r0,|L1.22656|
004cc8  e51f1450          LDR      r1,|L1.18560|
004ccc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004cd0  e2811001          ADD      r1,r1,#1
004cd4  e0800201          ADD      r0,r0,r1,LSL #4
004cd8  e5900004          LDR      r0,[r0,#4]
004cdc  e51f1460          LDR      r1,|L1.18564|
004ce0  e51f2468          LDR      r2,|L1.18560|
004ce4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004ce8  e2822001          ADD      r2,r2,#1
004cec  e0811202          ADD      r1,r1,r2,LSL #4
004cf0  e5810004          STR      r0,[r1,#4]
;;;3120       u32MinMaxValues_old_old[u32NeedleNumber+1][2] = u32MinMaxValues_old[u32NeedleNumber+1][2];
004cf4  e59f0b84          LDR      r0,|L1.22656|
004cf8  e51f1480          LDR      r1,|L1.18560|
004cfc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004d00  e2811001          ADD      r1,r1,#1
004d04  e0800201          ADD      r0,r0,r1,LSL #4
004d08  e5900008          LDR      r0,[r0,#8]
004d0c  e51f1490          LDR      r1,|L1.18564|
004d10  e51f2498          LDR      r2,|L1.18560|
004d14  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004d18  e2822001          ADD      r2,r2,#1
004d1c  e0811202          ADD      r1,r1,r2,LSL #4
004d20  e5810008          STR      r0,[r1,#8]
;;;3121       u32MinMaxValues_old_old[u32NeedleNumber+1][3] = u32MinMaxValues_old[u32NeedleNumber+1][3];
004d24  e59f0b54          LDR      r0,|L1.22656|
004d28  e51f14b0          LDR      r1,|L1.18560|
004d2c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004d30  e2811001          ADD      r1,r1,#1
004d34  e0800201          ADD      r0,r0,r1,LSL #4
004d38  e590000c          LDR      r0,[r0,#0xc]
004d3c  e51f14c0          LDR      r1,|L1.18564|
004d40  e51f24c8          LDR      r2,|L1.18560|
004d44  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004d48  e2822001          ADD      r2,r2,#1
004d4c  e0811202          ADD      r1,r1,r2,LSL #4
004d50  e581000c          STR      r0,[r1,#0xc]
;;;3122       u32MinMaxValues_old_old[u32NeedleNumber+2][0] = u32MinMaxValues_old[u32NeedleNumber+2][0];
004d54  e59f0b24          LDR      r0,|L1.22656|
004d58  e51f14e0          LDR      r1,|L1.18560|
004d5c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004d60  e2811002          ADD      r1,r1,#2
004d64  e7900201          LDR      r0,[r0,r1,LSL #4]
004d68  e51f14ec          LDR      r1,|L1.18564|
004d6c  e51f24f4          LDR      r2,|L1.18560|
004d70  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004d74  e2822002          ADD      r2,r2,#2
004d78  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3123       u32MinMaxValues_old_old[u32NeedleNumber+2][1] = u32MinMaxValues_old[u32NeedleNumber+2][1];
004d7c  e59f0afc          LDR      r0,|L1.22656|
004d80  e51f1508          LDR      r1,|L1.18560|
004d84  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004d88  e2811002          ADD      r1,r1,#2
004d8c  e0800201          ADD      r0,r0,r1,LSL #4
004d90  e5900004          LDR      r0,[r0,#4]
004d94  e51f1518          LDR      r1,|L1.18564|
004d98  e51f2520          LDR      r2,|L1.18560|
004d9c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004da0  e2822002          ADD      r2,r2,#2
004da4  e0811202          ADD      r1,r1,r2,LSL #4
004da8  e5810004          STR      r0,[r1,#4]
;;;3124       u32MinMaxValues_old_old[u32NeedleNumber+2][2] = u32MinMaxValues_old[u32NeedleNumber+2][2];
004dac  e59f0acc          LDR      r0,|L1.22656|
004db0  e51f1538          LDR      r1,|L1.18560|
004db4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004db8  e2811002          ADD      r1,r1,#2
004dbc  e0800201          ADD      r0,r0,r1,LSL #4
004dc0  e5900008          LDR      r0,[r0,#8]
004dc4  e51f1548          LDR      r1,|L1.18564|
004dc8  e51f2550          LDR      r2,|L1.18560|
004dcc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004dd0  e2822002          ADD      r2,r2,#2
004dd4  e0811202          ADD      r1,r1,r2,LSL #4
004dd8  e5810008          STR      r0,[r1,#8]
;;;3125       u32MinMaxValues_old_old[u32NeedleNumber+2][3] = u32MinMaxValues_old[u32NeedleNumber+2][3];
004ddc  e59f0a9c          LDR      r0,|L1.22656|
004de0  e51f1568          LDR      r1,|L1.18560|
004de4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004de8  e2811002          ADD      r1,r1,#2
004dec  e0800201          ADD      r0,r0,r1,LSL #4
004df0  e590000c          LDR      r0,[r0,#0xc]
004df4  e51f1578          LDR      r1,|L1.18564|
004df8  e51f2580          LDR      r2,|L1.18560|
004dfc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004e00  e2822002          ADD      r2,r2,#2
004e04  e0811202          ADD      r1,r1,r2,LSL #4
004e08  e581000c          STR      r0,[r1,#0xc]
;;;3126       u32MinMaxValues_old_old[u32NeedleNumber+3][0] = u32MinMaxValues_old[u32NeedleNumber+3][0];
004e0c  e59f0a6c          LDR      r0,|L1.22656|
004e10  e51f1598          LDR      r1,|L1.18560|
004e14  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004e18  e2811003          ADD      r1,r1,#3
004e1c  e7900201          LDR      r0,[r0,r1,LSL #4]
004e20  e51f15a4          LDR      r1,|L1.18564|
004e24  e51f25ac          LDR      r2,|L1.18560|
004e28  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004e2c  e2822003          ADD      r2,r2,#3
004e30  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3127       u32MinMaxValues_old_old[u32NeedleNumber+3][1] = u32MinMaxValues_old[u32NeedleNumber+3][1];
004e34  e59f0a44          LDR      r0,|L1.22656|
004e38  e51f15c0          LDR      r1,|L1.18560|
004e3c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004e40  e2811003          ADD      r1,r1,#3
004e44  e0800201          ADD      r0,r0,r1,LSL #4
004e48  e5901004          LDR      r1,[r0,#4]
004e4c  e51f05d0          LDR      r0,|L1.18564|
004e50  e51f25d8          LDR      r2,|L1.18560|
004e54  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004e58  e2822003          ADD      r2,r2,#3
004e5c  e0800202          ADD      r0,r0,r2,LSL #4
004e60  e5801004          STR      r1,[r0,#4]
;;;3128       u32MinMaxValues_old_old[u32NeedleNumber+3][2] = u32MinMaxValues_old[u32NeedleNumber+3][2];
004e64  e59f0a14          LDR      r0,|L1.22656|
004e68  e51f15f0          LDR      r1,|L1.18560|
004e6c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004e70  e2811003          ADD      r1,r1,#3
004e74  e0800201          ADD      r0,r0,r1,LSL #4
004e78  e5900008          LDR      r0,[r0,#8]
004e7c  e51f1600          LDR      r1,|L1.18564|
004e80  e51f2608          LDR      r2,|L1.18560|
004e84  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004e88  e2822003          ADD      r2,r2,#3
004e8c  e0811202          ADD      r1,r1,r2,LSL #4
004e90  e5810008          STR      r0,[r1,#8]
;;;3129       u32MinMaxValues_old_old[u32NeedleNumber+3][3] = u32MinMaxValues_old[u32NeedleNumber+3][3];
004e94  e59f09e4          LDR      r0,|L1.22656|
004e98  e51f1620          LDR      r1,|L1.18560|
004e9c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004ea0  e2811003          ADD      r1,r1,#3
004ea4  e0800201          ADD      r0,r0,r1,LSL #4
004ea8  e590100c          LDR      r1,[r0,#0xc]
004eac  e51f0630          LDR      r0,|L1.18564|
004eb0  e51f2638          LDR      r2,|L1.18560|
004eb4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004eb8  e2822003          ADD      r2,r2,#3
004ebc  e0800202          ADD      r0,r0,r2,LSL #4
004ec0  e580100c          STR      r1,[r0,#0xc]
;;;3130       u32MinMaxValues_old_old[u32NeedleNumber+4][0] = u32MinMaxValues_old[u32NeedleNumber+4][0];
004ec4  e59f09b4          LDR      r0,|L1.22656|
004ec8  e51f1650          LDR      r1,|L1.18560|
004ecc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004ed0  e2811004          ADD      r1,r1,#4
004ed4  e7901201          LDR      r1,[r0,r1,LSL #4]
004ed8  e51f065c          LDR      r0,|L1.18564|
004edc  e51f2664          LDR      r2,|L1.18560|
004ee0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004ee4  e2822004          ADD      r2,r2,#4
004ee8  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3131       u32MinMaxValues_old_old[u32NeedleNumber+4][1] = u32MinMaxValues_old[u32NeedleNumber+4][1];
004eec  e59f098c          LDR      r0,|L1.22656|
004ef0  e51f1678          LDR      r1,|L1.18560|
004ef4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004ef8  e2811004          ADD      r1,r1,#4
004efc  e0800201          ADD      r0,r0,r1,LSL #4
004f00  e5900004          LDR      r0,[r0,#4]
004f04  e51f1688          LDR      r1,|L1.18564|
004f08  e51f2690          LDR      r2,|L1.18560|
004f0c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004f10  e2822004          ADD      r2,r2,#4
004f14  e0811202          ADD      r1,r1,r2,LSL #4
004f18  e5810004          STR      r0,[r1,#4]
;;;3132       u32MinMaxValues_old_old[u32NeedleNumber+4][2] = u32MinMaxValues_old[u32NeedleNumber+4][2];
004f1c  e59f095c          LDR      r0,|L1.22656|
004f20  e51f16a8          LDR      r1,|L1.18560|
004f24  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004f28  e2811004          ADD      r1,r1,#4
004f2c  e0800201          ADD      r0,r0,r1,LSL #4
004f30  e5900008          LDR      r0,[r0,#8]
004f34  e51f16b8          LDR      r1,|L1.18564|
004f38  e51f26c0          LDR      r2,|L1.18560|
004f3c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004f40  e2822004          ADD      r2,r2,#4
004f44  e0811202          ADD      r1,r1,r2,LSL #4
004f48  e5810008          STR      r0,[r1,#8]
;;;3133       u32MinMaxValues_old_old[u32NeedleNumber+4][3] = u32MinMaxValues_old[u32NeedleNumber+4][3];
004f4c  e59f092c          LDR      r0,|L1.22656|
004f50  e51f16d8          LDR      r1,|L1.18560|
004f54  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
004f58  e2811004          ADD      r1,r1,#4
004f5c  e0800201          ADD      r0,r0,r1,LSL #4
004f60  e590000c          LDR      r0,[r0,#0xc]
004f64  e51f16e8          LDR      r1,|L1.18564|
004f68  e51f26f0          LDR      r2,|L1.18560|
004f6c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
004f70  e2822004          ADD      r2,r2,#4
004f74  e0811202          ADD      r1,r1,r2,LSL #4
004f78  e581000c          STR      r0,[r1,#0xc]
;;;3134   
;;;3135       u32MinMaxValues_old[u32NeedleNumber+0][0] = u32MinMaxValues[u32NeedleNumber+0][0];
004f7c  e59f18f8          LDR      r1,|L1.22652|
004f80  e51f0708          LDR      r0,|L1.18560|
004f84  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004f88  e7911200          LDR      r1,[r1,r0,LSL #4]
004f8c  e59f28ec          LDR      r2,|L1.22656|
004f90  e51f0718          LDR      r0,|L1.18560|
004f94  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004f98  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3136       u32MinMaxValues_old[u32NeedleNumber+0][1] = u32MinMaxValues[u32NeedleNumber+0][1];
004f9c  e59f18d8          LDR      r1,|L1.22652|
004fa0  e51f0728          LDR      r0,|L1.18560|
004fa4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004fa8  e0810200          ADD      r0,r1,r0,LSL #4
004fac  e2821000          ADD      r1,r2,#0
004fb0  e5902004          LDR      r2,[r0,#4]
004fb4  e51f073c          LDR      r0,|L1.18560|
004fb8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004fbc  e0810200          ADD      r0,r1,r0,LSL #4
004fc0  e5802004          STR      r2,[r0,#4]
;;;3137       u32MinMaxValues_old[u32NeedleNumber+0][2] = u32MinMaxValues[u32NeedleNumber+0][2];
004fc4  e59f18b0          LDR      r1,|L1.22652|
004fc8  e51f0750          LDR      r0,|L1.18560|
004fcc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004fd0  e0810200          ADD      r0,r1,r0,LSL #4
004fd4  e59f28a4          LDR      r2,|L1.22656|
004fd8  e5901008          LDR      r1,[r0,#8]
004fdc  e51f0764          LDR      r0,|L1.18560|
004fe0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004fe4  e0820200          ADD      r0,r2,r0,LSL #4
004fe8  e5801008          STR      r1,[r0,#8]
;;;3138       u32MinMaxValues_old[u32NeedleNumber+0][3] = u32MinMaxValues[u32NeedleNumber+0][3];
004fec  e59f1888          LDR      r1,|L1.22652|
004ff0  e51f0778          LDR      r0,|L1.18560|
004ff4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
004ff8  e0810200          ADD      r0,r1,r0,LSL #4
004ffc  e590100c          LDR      r1,[r0,#0xc]
005000  e51f0788          LDR      r0,|L1.18560|
005004  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005008  e0820200          ADD      r0,r2,r0,LSL #4
00500c  e580100c          STR      r1,[r0,#0xc]
;;;3139       u32MinMaxValues_old[u32NeedleNumber+1][0] = u32MinMaxValues[u32NeedleNumber+1][0];
005010  e59f0864          LDR      r0,|L1.22652|
005014  e51f179c          LDR      r1,|L1.18560|
005018  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00501c  e2811001          ADD      r1,r1,#1
005020  e7900201          LDR      r0,[r0,r1,LSL #4]
005024  e2821000          ADD      r1,r2,#0
005028  e51f27b0          LDR      r2,|L1.18560|
00502c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005030  e2822001          ADD      r2,r2,#1
005034  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3140       u32MinMaxValues_old[u32NeedleNumber+1][1] = u32MinMaxValues[u32NeedleNumber+1][1];
005038  e59f083c          LDR      r0,|L1.22652|
00503c  e51f17c4          LDR      r1,|L1.18560|
005040  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005044  e2811001          ADD      r1,r1,#1
005048  e0800201          ADD      r0,r0,r1,LSL #4
00504c  e5900004          LDR      r0,[r0,#4]
005050  e59f1828          LDR      r1,|L1.22656|
005054  e51f27dc          LDR      r2,|L1.18560|
005058  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00505c  e2822001          ADD      r2,r2,#1
005060  e0811202          ADD      r1,r1,r2,LSL #4
005064  e5810004          STR      r0,[r1,#4]
;;;3141       u32MinMaxValues_old[u32NeedleNumber+1][2] = u32MinMaxValues[u32NeedleNumber+1][2];
005068  e59f080c          LDR      r0,|L1.22652|
00506c  e51f17f4          LDR      r1,|L1.18560|
005070  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005074  e2811001          ADD      r1,r1,#1
005078  e0800201          ADD      r0,r0,r1,LSL #4
00507c  e5900008          LDR      r0,[r0,#8]
005080  e59f17f8          LDR      r1,|L1.22656|
005084  e51f280c          LDR      r2,|L1.18560|
005088  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00508c  e2822001          ADD      r2,r2,#1
005090  e0811202          ADD      r1,r1,r2,LSL #4
005094  e5810008          STR      r0,[r1,#8]
;;;3142       u32MinMaxValues_old[u32NeedleNumber+1][3] = u32MinMaxValues[u32NeedleNumber+1][3];
005098  e59f07dc          LDR      r0,|L1.22652|
00509c  e51f1824          LDR      r1,|L1.18560|
0050a0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0050a4  e2811001          ADD      r1,r1,#1
0050a8  e0800201          ADD      r0,r0,r1,LSL #4
0050ac  e590000c          LDR      r0,[r0,#0xc]
0050b0  e59f17c8          LDR      r1,|L1.22656|
0050b4  e51f283c          LDR      r2,|L1.18560|
0050b8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0050bc  e2822001          ADD      r2,r2,#1
0050c0  e0811202          ADD      r1,r1,r2,LSL #4
0050c4  e581000c          STR      r0,[r1,#0xc]
;;;3143       u32MinMaxValues_old[u32NeedleNumber+2][0] = u32MinMaxValues[u32NeedleNumber+2][0];
0050c8  e59f07ac          LDR      r0,|L1.22652|
0050cc  e51f1854          LDR      r1,|L1.18560|
0050d0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0050d4  e2811002          ADD      r1,r1,#2
0050d8  e7901201          LDR      r1,[r0,r1,LSL #4]
0050dc  e59f079c          LDR      r0,|L1.22656|
0050e0  e51f2868          LDR      r2,|L1.18560|
0050e4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0050e8  e2822002          ADD      r2,r2,#2
0050ec  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3144       u32MinMaxValues_old[u32NeedleNumber+2][1] = u32MinMaxValues[u32NeedleNumber+2][1];
0050f0  e59f0784          LDR      r0,|L1.22652|
0050f4  e51f187c          LDR      r1,|L1.18560|
0050f8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0050fc  e2811002          ADD      r1,r1,#2
005100  e0800201          ADD      r0,r0,r1,LSL #4
005104  e5901004          LDR      r1,[r0,#4]
005108  e59f0770          LDR      r0,|L1.22656|
00510c  e51f2894          LDR      r2,|L1.18560|
005110  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005114  e2822002          ADD      r2,r2,#2
005118  e0800202          ADD      r0,r0,r2,LSL #4
00511c  e5801004          STR      r1,[r0,#4]
;;;3145       u32MinMaxValues_old[u32NeedleNumber+2][2] = u32MinMaxValues[u32NeedleNumber+2][2];
005120  e59f0754          LDR      r0,|L1.22652|
005124  e51f18ac          LDR      r1,|L1.18560|
005128  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00512c  e2811002          ADD      r1,r1,#2
005130  e0800201          ADD      r0,r0,r1,LSL #4
005134  e5901008          LDR      r1,[r0,#8]
005138  e59f0740          LDR      r0,|L1.22656|
00513c  e51f28c4          LDR      r2,|L1.18560|
005140  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005144  e2822002          ADD      r2,r2,#2
005148  e0800202          ADD      r0,r0,r2,LSL #4
00514c  e5801008          STR      r1,[r0,#8]
;;;3146       u32MinMaxValues_old[u32NeedleNumber+2][3] = u32MinMaxValues[u32NeedleNumber+2][3];
005150  e59f0724          LDR      r0,|L1.22652|
005154  e51f18dc          LDR      r1,|L1.18560|
005158  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00515c  e2811002          ADD      r1,r1,#2
005160  e0800201          ADD      r0,r0,r1,LSL #4
005164  e590000c          LDR      r0,[r0,#0xc]
005168  e59f1710          LDR      r1,|L1.22656|
00516c  e51f28f4          LDR      r2,|L1.18560|
005170  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005174  e2822002          ADD      r2,r2,#2
005178  e0811202          ADD      r1,r1,r2,LSL #4
00517c  e581000c          STR      r0,[r1,#0xc]
;;;3147       u32MinMaxValues_old[u32NeedleNumber+3][0] = u32MinMaxValues[u32NeedleNumber+3][0];
005180  e59f06f4          LDR      r0,|L1.22652|
005184  e51f190c          LDR      r1,|L1.18560|
005188  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00518c  e2811003          ADD      r1,r1,#3
005190  e7900201          LDR      r0,[r0,r1,LSL #4]
005194  e59f16e4          LDR      r1,|L1.22656|
005198  e51f2920          LDR      r2,|L1.18560|
00519c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0051a0  e2822003          ADD      r2,r2,#3
0051a4  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3148       u32MinMaxValues_old[u32NeedleNumber+3][1] = u32MinMaxValues[u32NeedleNumber+3][1];
0051a8  e59f06cc          LDR      r0,|L1.22652|
0051ac  e51f1934          LDR      r1,|L1.18560|
0051b0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0051b4  e2811003          ADD      r1,r1,#3
0051b8  e0800201          ADD      r0,r0,r1,LSL #4
0051bc  e5901004          LDR      r1,[r0,#4]
0051c0  e59f06b8          LDR      r0,|L1.22656|
0051c4  e51f294c          LDR      r2,|L1.18560|
0051c8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0051cc  e2822003          ADD      r2,r2,#3
0051d0  e0800202          ADD      r0,r0,r2,LSL #4
0051d4  e5801004          STR      r1,[r0,#4]
;;;3149       u32MinMaxValues_old[u32NeedleNumber+3][2] = u32MinMaxValues[u32NeedleNumber+3][2];
0051d8  e59f069c          LDR      r0,|L1.22652|
0051dc  e51f1964          LDR      r1,|L1.18560|
0051e0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0051e4  e2811003          ADD      r1,r1,#3
0051e8  e0800201          ADD      r0,r0,r1,LSL #4
0051ec  e5901008          LDR      r1,[r0,#8]
0051f0  e59f0688          LDR      r0,|L1.22656|
0051f4  e51f297c          LDR      r2,|L1.18560|
0051f8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0051fc  e2822003          ADD      r2,r2,#3
005200  e0800202          ADD      r0,r0,r2,LSL #4
005204  e5801008          STR      r1,[r0,#8]
;;;3150       u32MinMaxValues_old[u32NeedleNumber+3][3] = u32MinMaxValues[u32NeedleNumber+3][3];
005208  e59f066c          LDR      r0,|L1.22652|
00520c  e51f1994          LDR      r1,|L1.18560|
005210  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005214  e2811003          ADD      r1,r1,#3
005218  e0800201          ADD      r0,r0,r1,LSL #4
00521c  e590000c          LDR      r0,[r0,#0xc]
005220  e59f1658          LDR      r1,|L1.22656|
005224  e51f29ac          LDR      r2,|L1.18560|
005228  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00522c  e2822003          ADD      r2,r2,#3
005230  e0811202          ADD      r1,r1,r2,LSL #4
005234  e581000c          STR      r0,[r1,#0xc]
;;;3151       u32MinMaxValues_old[u32NeedleNumber+4][0] = u32MinMaxValues[u32NeedleNumber+4][0];
005238  e59f063c          LDR      r0,|L1.22652|
00523c  e51f19c4          LDR      r1,|L1.18560|
005240  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005244  e2811004          ADD      r1,r1,#4
005248  e7900201          LDR      r0,[r0,r1,LSL #4]
00524c  e59f162c          LDR      r1,|L1.22656|
005250  e51f29d8          LDR      r2,|L1.18560|
005254  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005258  e2822004          ADD      r2,r2,#4
00525c  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3152       u32MinMaxValues_old[u32NeedleNumber+4][1] = u32MinMaxValues[u32NeedleNumber+4][1];
005260  e59f0614          LDR      r0,|L1.22652|
005264  e51f19ec          LDR      r1,|L1.18560|
005268  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00526c  e2811004          ADD      r1,r1,#4
005270  e0800201          ADD      r0,r0,r1,LSL #4
005274  e5900004          LDR      r0,[r0,#4]
005278  e59f1600          LDR      r1,|L1.22656|
00527c  e51f2a04          LDR      r2,|L1.18560|
005280  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005284  e2822004          ADD      r2,r2,#4
005288  e0811202          ADD      r1,r1,r2,LSL #4
00528c  e5810004          STR      r0,[r1,#4]
;;;3153       u32MinMaxValues_old[u32NeedleNumber+4][2] = u32MinMaxValues[u32NeedleNumber+4][2];
005290  e59f05e4          LDR      r0,|L1.22652|
005294  e51f1a1c          LDR      r1,|L1.18560|
005298  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00529c  e2811004          ADD      r1,r1,#4
0052a0  e0800201          ADD      r0,r0,r1,LSL #4
0052a4  e5901008          LDR      r1,[r0,#8]
0052a8  e59f05d0          LDR      r0,|L1.22656|
0052ac  e51f2a34          LDR      r2,|L1.18560|
0052b0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0052b4  e2822004          ADD      r2,r2,#4
0052b8  e0800202          ADD      r0,r0,r2,LSL #4
0052bc  e5801008          STR      r1,[r0,#8]
;;;3154       u32MinMaxValues_old[u32NeedleNumber+4][3] = u32MinMaxValues[u32NeedleNumber+4][3];
0052c0  e59f05b4          LDR      r0,|L1.22652|
0052c4  e51f1a4c          LDR      r1,|L1.18560|
0052c8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0052cc  e2811004          ADD      r1,r1,#4
0052d0  e0800201          ADD      r0,r0,r1,LSL #4
0052d4  e590100c          LDR      r1,[r0,#0xc]
0052d8  e59f05a0          LDR      r0,|L1.22656|
0052dc  e51f2a64          LDR      r2,|L1.18560|
0052e0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0052e4  e2822004          ADD      r2,r2,#4
0052e8  e0800202          ADD      r0,r0,r2,LSL #4
0052ec  e580100c          STR      r1,[r0,#0xc]
;;;3155   }
0052f0  e28dd06c          ADD      sp,sp,#0x6c
0052f4  e8bd8ff0          POP      {r4-r11,pc}
;;;3156   
                          ENDP

                  vGfBuffRotateNeedle PROC
;;;3159   
;;;3160   void vGfBuffRotateNeedle(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
0052f8  e92d4fff          PUSH     {r0-r11,lr}
;;;3161                            uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight)
;;;3162   {
0052fc  e24dd09c          SUB      sp,sp,#0x9c
005300  e1a05000          MOV      r5,r0
005304  e1a07001          MOV      r7,r1
005308  e1a06003          MOV      r6,r3
00530c  e59db0d8          LDR      r11,[sp,#0xd8]
;;;3163       uint32_t        u32Div, u32Count;
;;;3164       blit_mem_st     stMemBlit;
;;;3165       blit_OvrRgb_st  stParamBlit;
;;;3166       rot_mem_st      stMem;
;;;3167       rot_cfg_st      stParam;
;;;3168       blit_mem_st     stMemBlend;
;;;3169       blit_BlndRgb_st stParamBlend;
;;;3170       uint8_t         u8SrcNoOfBytes, u8SrcNoOfBytesBg, u8DstNoOfBytes;
;;;3171       float32_t       f32AngleLocal;
;;;3172       ga_en_e         eDraw;
;;;3173       
;;;3174       u8PreviousOperation = 0U;
005310  e3a00000          MOV      r0,#0
005314  e51f1aa0          LDR      r1,|L1.18556|
005318  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;3175   
;;;3176       f32AngleLocal = f32CheckAngle(f32Angle);
00531c  e59d00a4          LDR      r0,[sp,#0xa4]
005320  ebfffffe          BL       f32CheckAngle
005324  e58d0018          STR      r0,[sp,#0x18]
;;;3177   
;;;3178       /* restore blit */
;;;3179       stMemBlit.u16SrcWidth = pstSrcImageBg->u16Width;
005328  e1d510b4          LDRH     r1,[r5,#4]
00532c  e1cd18b4          STRH     r1,[sp,#0x84]
;;;3180       stMemBlit.u16DstWidth = pstDstImage->u16Width;
005330  e1d610b4          LDRH     r1,[r6,#4]
005334  e1cd18bc          STRH     r1,[sp,#0x8c]
;;;3181   
;;;3182       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
005338  e5d7000c          LDRB     r0,[r7,#0xc]
00533c  e3500004          CMP      r0,#4
005340  1a000004          BNE      |L1.21336|
;;;3183       {
;;;3184           stParam.stRotCfg.eSrcColFmt = GA_RGB16;
005344  e3a00000          MOV      r0,#0
005348  e5cd004c          STRB     r0,[sp,#0x4c]
;;;3185           u8SrcNoOfBytes              = 2U;
00534c  e3a00002          MOV      r0,#2
005350  e58d001c          STR      r0,[sp,#0x1c]
005354  ea000003          B        |L1.21352|
                  |L1.21336|
;;;3186       }
;;;3187       else
;;;3188       {
;;;3189           stParam.stRotCfg.eSrcColFmt = GA_RGBA32;
005358  e3a00001          MOV      r0,#1
00535c  e5cd004c          STRB     r0,[sp,#0x4c]
;;;3190           u8SrcNoOfBytes              = 4U;
005360  e3a00004          MOV      r0,#4
005364  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.21352|
;;;3191       }
;;;3192   
;;;3193       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
005368  e5d6000c          LDRB     r0,[r6,#0xc]
00536c  e3500004          CMP      r0,#4
005370  1a000007          BNE      |L1.21396|
;;;3194       {
;;;3195           stParam.stRotCfg.eDstColFmt = GA_RGB16;
005374  e3a00000          MOV      r0,#0
005378  e5cd004d          STRB     r0,[sp,#0x4d]
;;;3196           stParamBlit.eDestFmt        = GA_RGB16;
00537c  e5cd0075          STRB     r0,[sp,#0x75]
;;;3197           stParamBlend.eDestFmt       = GA_RGB16;
005380  e5cd0021          STRB     r0,[sp,#0x21]
;;;3198           u8DstNoOfBytes              = 2U;
005384  e3a09002          MOV      r9,#2
;;;3199           
;;;3200           /* Source format should be same as the destination format for blitting */
;;;3201           stParamBlit.eSrcFmt         = GA_RGB16; 
005388  e5cd0074          STRB     r0,[sp,#0x74]
;;;3202           stParamBlend.eSrcFmt        = GA_RGB16;
00538c  e5cd0020          STRB     r0,[sp,#0x20]
005390  ea000006          B        |L1.21424|
                  |L1.21396|
;;;3203       }
;;;3204       else
;;;3205       {
;;;3206           stParam.stRotCfg.eDstColFmt = GA_RGBA32;
005394  e3a00001          MOV      r0,#1
005398  e5cd004d          STRB     r0,[sp,#0x4d]
;;;3207           stParamBlit.eDestFmt        = GA_RGBA32;
00539c  e5cd0075          STRB     r0,[sp,#0x75]
;;;3208           stParamBlend.eDestFmt       = GA_RGBA32;
0053a0  e5cd0021          STRB     r0,[sp,#0x21]
;;;3209           u8DstNoOfBytes              = 4U;
0053a4  e3a09004          MOV      r9,#4
;;;3210           
;;;3211           /* Source format should be same as the destination format for blitting */   
;;;3212           stParamBlit.eSrcFmt         = GA_RGBA32;
0053a8  e5cd0074          STRB     r0,[sp,#0x74]
;;;3213           stParamBlend.eSrcFmt        = GA_RGBA32;
0053ac  e5cd0020          STRB     r0,[sp,#0x20]
                  |L1.21424|
;;;3214       }
;;;3215   
;;;3216       if(pstSrcImageBg->eFormat == (uint8_t)FMT_RGB16)
0053b0  e5d5000c          LDRB     r0,[r5,#0xc]
0053b4  e3500004          CMP      r0,#4
0053b8  1a000001          BNE      |L1.21444|
;;;3217       {
;;;3218           u8SrcNoOfBytesBg     = 2U;
0053bc  e3a08002          MOV      r8,#2
0053c0  ea000000          B        |L1.21448|
                  |L1.21444|
;;;3219       }
;;;3220       else
;;;3221       {
;;;3222           u8SrcNoOfBytesBg     = 4U;
0053c4  e3a08004          MOV      r8,#4
                  |L1.21448|
;;;3223       }
;;;3224   
;;;3225       stParamBlit.eFadeMode      = stGastate.eFadeMode;
0053c8  e59f04a0          LDR      r0,|L1.22640|
0053cc  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0053d0  e5cd0077          STRB     r0,[sp,#0x77]
;;;3226       stParamBlit.u8FadingFctr   = stGastate.u8FadingFctr;
0053d4  e59f0494          LDR      r0,|L1.22640|
0053d8  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0053dc  e5cd0079          STRB     r0,[sp,#0x79]
;;;3227       stParamBlit.eTranspColEn   = stGastate.eTranspColEn;
0053e0  e59f0488          LDR      r0,|L1.22640|
0053e4  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
0053e8  e5cd0076          STRB     r0,[sp,#0x76]
;;;3228       stParamBlit.u32SrcTransVal = stGastate.u32SrcTransVal;
0053ec  e59f047c          LDR      r0,|L1.22640|
0053f0  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
0053f4  e58d007c          STR      r0,[sp,#0x7c]
;;;3229       stParamBlit.u16DstTransVal = stGastate.u16DstTransVal;
0053f8  e59f0470          LDR      r0,|L1.22640|
0053fc  e1d011b4          LDRH     r1,[r0,#0x14]  ; stGastate
005400  e1cd18b0          STRH     r1,[sp,#0x80]
;;;3230       stParamBlit.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
005404  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
005408  e5cd0082          STRB     r0,[sp,#0x82]
;;;3231       stParamBlit.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
00540c  e59f045c          LDR      r0,|L1.22640|
005410  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
005414  e5cd0083          STRB     r0,[sp,#0x83]
;;;3232   
;;;3233       /* handle clip window blit */
;;;3234       stParamBlit.eClipWndEn = stGastate.eClipWndEn;
005418  e59f0450          LDR      r0,|L1.22640|
00541c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
005420  e5cd0078          STRB     r0,[sp,#0x78]
;;;3235   
;;;3236       /* rotation settings */
;;;3237       stMem.u16SrcWidth     = pstSrcImage->u16Width;
005424  e1d710b4          LDRH     r1,[r7,#4]
005428  e1cd16b6          STRH     r1,[sp,#0x66]
;;;3238       stMem.u32DstAddr      = pstDstImage->u32Address;
00542c  e5960000          LDR      r0,[r6,#0]
005430  e58d006c          STR      r0,[sp,#0x6c]
;;;3239       stMem.u16DstImgWidth  = pstDstImage->u16Width;
005434  e1d610b4          LDRH     r1,[r6,#4]
005438  e1cd17b0          STRH     r1,[sp,#0x70]
;;;3240       stMem.u16DstImgHeight = pstDstImage->u16Height;
00543c  e1d610b6          LDRH     r1,[r6,#6]
005440  e1cd17b2          STRH     r1,[sp,#0x72]
;;;3241   
;;;3242       /* handle clip window rotate */
;;;3243       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
005444  e59f0424          LDR      r0,|L1.22640|
005448  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00544c  e5cd004e          STRB     r0,[sp,#0x4e]
;;;3244       if (stParam.stRotCfg.eClipWndEn == GA_EN)
005450  e5dd004e          LDRB     r0,[sp,#0x4e]
005454  e3500001          CMP      r0,#1
005458  1a00000b          BNE      |L1.21644|
;;;3245       {
;;;3246           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00545c  e59f040c          LDR      r0,|L1.22640|
005460  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
005464  e1cd05b4          STRH     r0,[sp,#0x54]
;;;3247           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
005468  e59f0400          LDR      r0,|L1.22640|
00546c  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
005470  e1cd05b6          STRH     r0,[sp,#0x56]
;;;3248           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
005474  e59f03f4          LDR      r0,|L1.22640|
005478  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00547c  e1cd05b8          STRH     r0,[sp,#0x58]
;;;3249           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
005480  e59f03e8          LDR      r0,|L1.22640|
005484  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
005488  e1cd05ba          STRH     r0,[sp,#0x5a]
                  |L1.21644|
;;;3250       }
;;;3251   
;;;3252       stParam.stRotCfg.eFilterEn     = stGastate.eFilterEn;
00548c  e59f03dc          LDR      r0,|L1.22640|
005490  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
005494  e5cd004f          STRB     r0,[sp,#0x4f]
;;;3253       stParam.i16RotCentX            = pstSrcImage->i16CenterX;
005498  e1d710b8          LDRH     r1,[r7,#8]
00549c  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;3254       stParam.i16RotCentY            = pstSrcImage->i16CenterY;
0054a0  e1d710ba          LDRH     r1,[r7,#0xa]
0054a4  e1cd15be          STRH     r1,[sp,#0x5e]
;;;3255       stParam.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
0054a8  e59f13c8          LDR      r1,|L1.22648|
0054ac  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0054b0  e2610011          RSB      r0,r1,#0x11
0054b4  ebfffffe          BL       __aeabi_ui2f
0054b8  e58d0010          STR      r0,[sp,#0x10]
0054bc  e1d700f8          LDRSH    r0,[r7,#8]
0054c0  ebfffffe          BL       __aeabi_i2f
0054c4  e59f13b8          LDR      r1,|L1.22660|
0054c8  e58d0008          STR      r0,[sp,#8]
0054cc  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0054d0  e2610011          RSB      r0,r1,#0x11
0054d4  ebfffffe          BL       __aeabi_ui2f
0054d8  e58d0004          STR      r0,[sp,#4]
0054dc  e59d1008          LDR      r1,[sp,#8]
0054e0  ebfffffe          BL       __aeabi_fmul
0054e4  e58d000c          STR      r0,[sp,#0xc]
0054e8  e59d1010          LDR      r1,[sp,#0x10]
0054ec  ebfffffe          BL       __aeabi_fdiv
0054f0  e58d0014          STR      r0,[sp,#0x14]
0054f4  ebfffffe          BL       __aeabi_f2uiz
0054f8  e59d10d0          LDR      r1,[sp,#0xd0]
0054fc  e0800001          ADD      r0,r0,r1
005500  e6bf1070          SXTH     r1,r0
005504  e1cd16b0          STRH     r1,[sp,#0x60]
;;;3256       stParam.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
005508  e59f1368          LDR      r1,|L1.22648|
00550c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
005510  e2610011          RSB      r0,r1,#0x11
005514  ebfffffe          BL       __aeabi_ui2f
005518  e58d0010          STR      r0,[sp,#0x10]
00551c  e1d700fa          LDRSH    r0,[r7,#0xa]
005520  ebfffffe          BL       __aeabi_i2f
005524  e59f1358          LDR      r1,|L1.22660|
005528  e58d0008          STR      r0,[sp,#8]
00552c  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
005530  e2610011          RSB      r0,r1,#0x11
005534  ebfffffe          BL       __aeabi_ui2f
005538  e58d0004          STR      r0,[sp,#4]
00553c  e59d1008          LDR      r1,[sp,#8]
005540  ebfffffe          BL       __aeabi_fmul
005544  e58d000c          STR      r0,[sp,#0xc]
005548  e59d1010          LDR      r1,[sp,#0x10]
00554c  ebfffffe          BL       __aeabi_fdiv
005550  e58d0014          STR      r0,[sp,#0x14]
005554  ebfffffe          BL       __aeabi_f2uiz
005558  e59d10d4          LDR      r1,[sp,#0xd4]
00555c  e0800001          ADD      r0,r0,r1
005560  e6bf1070          SXTH     r1,r0
005564  e1cd16b2          STRH     r1,[sp,#0x62]
;;;3257       stParam.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
005568  e59f0300          LDR      r0,|L1.22640|
00556c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
005570  e5cd0051          STRB     r0,[sp,#0x51]
;;;3258       stParam.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
005574  e59f02f4          LDR      r0,|L1.22640|
005578  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00557c  e5cd0052          STRB     r0,[sp,#0x52]
;;;3259   
;;;3260       /* restore blend rotation */
;;;3261       stMemBlend.u16SrcWidth = pstSrcImageBg->u16Width;
005580  e1d510b4          LDRH     r1,[r5,#4]
005584  e1cd13b8          STRH     r1,[sp,#0x38]
;;;3262       stMemBlend.u16DstWidth = pstDstImage->u16Width;
005588  e1d610b4          LDRH     r1,[r6,#4]
00558c  e1cd14b0          STRH     r1,[sp,#0x40]
;;;3263   
;;;3264       stParamBlend.eClipWndEn     = stGastate.eClipWndEn;
005590  e59f02d8          LDR      r0,|L1.22640|
005594  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
005598  e5cd0029          STRB     r0,[sp,#0x29]
;;;3265       stParamBlend.eFadeMode      = stGastate.eFadeMode;
00559c  e59f02cc          LDR      r0,|L1.22640|
0055a0  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0055a4  e5cd0028          STRB     r0,[sp,#0x28]
;;;3266       stParamBlend.u8FadingFctr   = stGastate.u8FadingFctr;
0055a8  e59f02c0          LDR      r0,|L1.22640|
0055ac  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0055b0  e5cd002b          STRB     r0,[sp,#0x2b]
;;;3267       stParamBlend.eTranspColEn   = stGastate.eTranspColEn;
0055b4  e59f02b4          LDR      r0,|L1.22640|
0055b8  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
0055bc  e5cd0027          STRB     r0,[sp,#0x27]
;;;3268       stParamBlend.u32SrcTransVal = stGastate.u32SrcTransVal;
0055c0  e59f02a8          LDR      r0,|L1.22640|
0055c4  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
0055c8  e58d002c          STR      r0,[sp,#0x2c]
;;;3269       stParamBlend.u16DstTransVal = stGastate.u16DstTransVal;
0055cc  e59f029c          LDR      r0,|L1.22640|
0055d0  e1d011b4          LDRH     r1,[r0,#0x14]  ; stGastate
0055d4  e1cd13b0          STRH     r1,[sp,#0x30]
;;;3270       stParamBlend.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
0055d8  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0055dc  e5cd0032          STRB     r0,[sp,#0x32]
;;;3271       stParamBlend.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0055e0  e59f0288          LDR      r0,|L1.22640|
0055e4  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0055e8  e5cd0033          STRB     r0,[sp,#0x33]
;;;3272   
;;;3273       stParamBlend.eRedChPrtEn    = stGastate.eRedChPrtEn;
0055ec  e59f027c          LDR      r0,|L1.22640|
0055f0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0055f4  e5cd0022          STRB     r0,[sp,#0x22]
;;;3274       stParamBlend.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
0055f8  e59f0270          LDR      r0,|L1.22640|
0055fc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
005600  e5cd0023          STRB     r0,[sp,#0x23]
;;;3275       stParamBlend.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
005604  e59f0264          LDR      r0,|L1.22640|
005608  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
00560c  e5cd0024          STRB     r0,[sp,#0x24]
;;;3276       stParamBlend.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
005610  e59f0258          LDR      r0,|L1.22640|
005614  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
005618  e5cd0025          STRB     r0,[sp,#0x25]
;;;3277       stParamBlend.eRastOpEn      = GA_DIS;
00561c  e3a00000          MOV      r0,#0
005620  e5cd0026          STRB     r0,[sp,#0x26]
;;;3278       stParamBlend.eBlndOrder     = GA_BEHIND_DEST;
005624  e3a00001          MOV      r0,#1
005628  e5cd002a          STRB     r0,[sp,#0x2a]
;;;3279   
;;;3280       u32Div = pstSrcImage->u16Height/u32BlockHeight;
00562c  e1d700b6          LDRH     r0,[r7,#6]
005630  e1a0100b          MOV      r1,r11
005634  ebfffffe          BL       __aeabi_uidiv
005638  e58d0098          STR      r0,[sp,#0x98]
;;;3281   
;;;3282       for (u32Count=0U; u32Count<u32Div; u32Count++)
00563c  e3a04000          MOV      r4,#0
005640  ea000061          B        |L1.22476|
                  |L1.22084|
;;;3283       {
;;;3284           stMemBlit.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
005644  e51f0dcc          LDR      r0,|L1.18560|
005648  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00564c  e0800004          ADD      r0,r0,r4
005650  e51f1dd4          LDR      r1,|L1.18564|
005654  e0810200          ADD      r0,r1,r0,LSL #4
005658  e1d000b8          LDRH     r0,[r0,#8]
00565c  e51f1de4          LDR      r1,|L1.18560|
005660  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005664  e0811004          ADD      r1,r1,r4
005668  e51f2dec          LDR      r2,|L1.18564|
00566c  e7921201          LDR      r1,[r2,r1,LSL #4]
005670  e0400001          SUB      r0,r0,r1
005674  e6ff1070          UXTH     r1,r0
005678  e1cd19b4          STRH     r1,[sp,#0x94]
;;;3285           stMemBlit.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1];
00567c  e51f0e04          LDR      r0,|L1.18560|
005680  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005684  e0800004          ADD      r0,r0,r4
005688  e2821000          ADD      r1,r2,#0
00568c  e0810200          ADD      r0,r1,r0,LSL #4
005690  e1d000bc          LDRH     r0,[r0,#0xc]
005694  e51f1e1c          LDR      r1,|L1.18560|
005698  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00569c  e0811004          ADD      r1,r1,r4
0056a0  e0821201          ADD      r1,r2,r1,LSL #4
0056a4  e1d110b4          LDRH     r1,[r1,#4]
0056a8  e0400001          SUB      r0,r0,r1
0056ac  e6ff1070          UXTH     r1,r0
0056b0  e1cd19b6          STRH     r1,[sp,#0x96]
;;;3286           /* handle clip window blit */
;;;3287           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlit.u16DotCnt, stMemBlit.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]);
0056b4  e51f0e3c          LDR      r0,|L1.18560|
0056b8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0056bc  e0800004          ADD      r0,r0,r4
0056c0  e2821000          ADD      r1,r2,#0
0056c4  e0810200          ADD      r0,r1,r0,LSL #4
0056c8  e5900004          LDR      r0,[r0,#4]
0056cc  e51f1e54          LDR      r1,|L1.18560|
0056d0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0056d4  e0811004          ADD      r1,r1,r4
0056d8  e7921201          LDR      r1,[r2,r1,LSL #4]
0056dc  e58d0004          STR      r0,[sp,#4]
0056e0  e59f0188          LDR      r0,|L1.22640|
0056e4  e58d1000          STR      r1,[sp,#0]
0056e8  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0056ec  e1dd29b6          LDRH     r2,[sp,#0x96]
0056f0  e1dd19b4          LDRH     r1,[sp,#0x94]
0056f4  e1a00006          MOV      r0,r6
0056f8  ebfffffe          BL       eHandleClipWindowBlit
0056fc  e1a0a000          MOV      r10,r0
;;;3288           if(eDraw == GA_EN)
005700  e35a0001          CMP      r10,#1
005704  1a00002f          BNE      |L1.22472|
;;;3289           {
;;;3290               stParamBlit.eClipWndEn = eDraw;
005708  e5cda078          STRB     r10,[sp,#0x78]
;;;3291               stMemBlit.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
00570c  e51f0e94          LDR      r0,|L1.18560|
005710  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005714  e0800004          ADD      r0,r0,r4
005718  e51f1e9c          LDR      r1,|L1.18564|
00571c  e0810200          ADD      r0,r1,r0,LSL #4
005720  e5900004          LDR      r0,[r0,#4]
005724  e1d510fa          LDRSH    r1,[r5,#0xa]
005728  e0400001          SUB      r0,r0,r1
00572c  e5951000          LDR      r1,[r5,#0]
005730  e1d520b4          LDRH     r2,[r5,#4]
005734  e0020892          MUL      r2,r2,r8
005738  e0201092          MLA      r0,r2,r0,r1
00573c  e51f1ec4          LDR      r1,|L1.18560|
005740  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005744  e0811004          ADD      r1,r1,r4
005748  e51f2ecc          LDR      r2,|L1.18564|
00574c  e7921201          LDR      r1,[r2,r1,LSL #4]
005750  e1d520f8          LDRSH    r2,[r5,#8]
005754  e0411002          SUB      r1,r1,r2
005758  e0200198          MLA      r0,r8,r1,r0
00575c  e58d0088          STR      r0,[sp,#0x88]
;;;3292                                      + u8SrcNoOfBytesBg*(u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;3293               stMemBlit.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
005760  e5960000          LDR      r0,[r6,#0]
005764  e1d610b4          LDRH     r1,[r6,#4]
005768  e0010991          MUL      r1,r1,r9
00576c  e51f2ef4          LDR      r2,|L1.18560|
005770  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005774  e0822004          ADD      r2,r2,r4
005778  e51f3efc          LDR      r3,|L1.18564|
00577c  e0832202          ADD      r2,r3,r2,LSL #4
005780  e5922004          LDR      r2,[r2,#4]
005784  e0200291          MLA      r0,r1,r2,r0
005788  e51f1f10          LDR      r1,|L1.18560|
00578c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005790  e0811004          ADD      r1,r1,r4
005794  e2832000          ADD      r2,r3,#0
005798  e7921201          LDR      r1,[r2,r1,LSL #4]
00579c  e0200199          MLA      r0,r9,r1,r0
0057a0  e58d0090          STR      r0,[sp,#0x90]
;;;3294               vBlit_OverwriteRGB(&stMemBlit, &stParamBlit, pstWriteList);
0057a4  e59f00c8          LDR      r0,|L1.22644|
0057a8  e28d1074          ADD      r1,sp,#0x74
0057ac  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0057b0  e28d0084          ADD      r0,sp,#0x84
0057b4  ebfffffe          BL       vBlit_OverwriteRGB
;;;3295               vGfListExecute();
0057b8  ebfffffe          BL       vGfListExecute
;;;3296               stParamBlit.eClipWndEn = stGastate.eClipWndEn;
0057bc  e59f00ac          LDR      r0,|L1.22640|
0057c0  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0057c4  e5cd0078          STRB     r0,[sp,#0x78]
                  |L1.22472|
0057c8  e2844001          ADD      r4,r4,#1              ;3282
                  |L1.22476|
0057cc  e59d0098          LDR      r0,[sp,#0x98]         ;3282
0057d0  e1540000          CMP      r4,r0                 ;3282
0057d4  3affff9a          BCC      |L1.22084|
;;;3297           }
;;;3298       }
;;;3299   
;;;3300       stMemBlit.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+3][2] - u32MinMaxValues_old_old[u32NeedleNumber+3][0];
0057d8  e51f0f5c          LDR      r0,|L1.18564|
0057dc  e51f1f64          LDR      r1,|L1.18560|
0057e0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0057e4  e2811003          ADD      r1,r1,#3
0057e8  e0800201          ADD      r0,r0,r1,LSL #4
0057ec  e1d010b8          LDRH     r1,[r0,#8]
0057f0  e51f0f74          LDR      r0,|L1.18564|
0057f4  e51f2f7c          LDR      r2,|L1.18560|
0057f8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0057fc  e2822003          ADD      r2,r2,#3
005800  e7900202          LDR      r0,[r0,r2,LSL #4]
005804  e0410000          SUB      r0,r1,r0
005808  e6ff1070          UXTH     r1,r0
00580c  e1cd19b4          STRH     r1,[sp,#0x94]
;;;3301       stMemBlit.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+3][3] - u32MinMaxValues_old_old[u32NeedleNumber+3][1];
005810  e51f0f94          LDR      r0,|L1.18564|
005814  e51f1f9c          LDR      r1,|L1.18560|
005818  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00581c  e2811003          ADD      r1,r1,#3
005820  e0800201          ADD      r0,r0,r1,LSL #4
005824  e1d010bc          LDRH     r1,[r0,#0xc]
005828  e51f0fac          LDR      r0,|L1.18564|
00582c  e51f2fb4          LDR      r2,|L1.18560|
005830  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005834  e2822003          ADD      r2,r2,#3
005838  e0800202          ADD      r0,r0,r2,LSL #4
00583c  e1d000b4          LDRH     r0,[r0,#4]
005840  e0410000          SUB      r0,r1,r0
005844  e6ff1070          UXTH     r1,r0
005848  e1cd19b6          STRH     r1,[sp,#0x96]
;;;3302       /* handle clip window blit */
;;;3303       eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlit.u16DotCnt, stMemBlit.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+3][0], u32MinMaxValues_old_old[u32NeedleNumber+3][1]);
00584c  e51f0fd0          LDR      r0,|L1.18564|
005850  e51f1fd8          LDR      r1,|L1.18560|
005854  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005858  e2811003          ADD      r1,r1,#3
00585c  e0800201          ADD      r0,r0,r1,LSL #4
005860  e5900004          LDR      r0,[r0,#4]
005864  e51f1fe8          LDR      r1,|L1.18564|
005868  e51f2ff0          LDR      r2,|L1.18560|
00586c  ea000005          B        |L1.22664|
                  |L1.22640|
                          DCD      stGastate
                  |L1.22644|
                          DCD      pstWriteList
                  |L1.22648|
                          DCD      u32SubResCPos
                  |L1.22652|
                          DCD      u32MinMaxValues
                  |L1.22656|
                          DCD      u32MinMaxValues_old
                  |L1.22660|
                          DCD      u32SubResPPos
                  |L1.22664|
005888  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00588c  e2822003          ADD      r2,r2,#3
005890  e7911202          LDR      r1,[r1,r2,LSL #4]
005894  e58d0004          STR      r0,[sp,#4]
005898  e51f0030          LDR      r0,|L1.22640|
00589c  e58d1000          STR      r1,[sp,#0]
0058a0  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0058a4  e1dd29b6          LDRH     r2,[sp,#0x96]
0058a8  e1dd19b4          LDRH     r1,[sp,#0x94]
0058ac  e1a00006          MOV      r0,r6
0058b0  ebfffffe          BL       eHandleClipWindowBlit
0058b4  e1a0a000          MOV      r10,r0
;;;3304       if(eDraw == GA_EN)
0058b8  e35a0001          CMP      r10,#1
0058bc  1a00002f          BNE      |L1.22912|
;;;3305       {
;;;3306           stParamBlit.eClipWndEn = eDraw;
0058c0  e5cda078          STRB     r10,[sp,#0x78]
;;;3307           stMemBlit.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues_old_old[u32NeedleNumber+3][1]-pstSrcImageBg->i16CenterY)
0058c4  e59f0fb4          LDR      r0,|L1.26752|
0058c8  e59f1fb4          LDR      r1,|L1.26756|
0058cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0058d0  e2811003          ADD      r1,r1,#3
0058d4  e0800201          ADD      r0,r0,r1,LSL #4
0058d8  e5900004          LDR      r0,[r0,#4]
0058dc  e1d510fa          LDRSH    r1,[r5,#0xa]
0058e0  e0400001          SUB      r0,r0,r1
0058e4  e5951000          LDR      r1,[r5,#0]
0058e8  e1d520b4          LDRH     r2,[r5,#4]
0058ec  e0020892          MUL      r2,r2,r8
0058f0  e0201092          MLA      r0,r2,r0,r1
0058f4  e59f1f84          LDR      r1,|L1.26752|
0058f8  e59f2f84          LDR      r2,|L1.26756|
0058fc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005900  e2822003          ADD      r2,r2,#3
005904  e7911202          LDR      r1,[r1,r2,LSL #4]
005908  e1d520f8          LDRSH    r2,[r5,#8]
00590c  e0411002          SUB      r1,r1,r2
005910  e0200198          MLA      r0,r8,r1,r0
005914  e58d0088          STR      r0,[sp,#0x88]
;;;3308                                  + u8SrcNoOfBytesBg*(u32MinMaxValues_old_old[u32NeedleNumber+3][0]-pstSrcImageBg->i16CenterX);
;;;3309           stMemBlit.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+3][0];
005918  e5960000          LDR      r0,[r6,#0]
00591c  e1d610b4          LDRH     r1,[r6,#4]
005920  e0010991          MUL      r1,r1,r9
005924  e59f2f54          LDR      r2,|L1.26752|
005928  e59f3f54          LDR      r3,|L1.26756|
00592c  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
005930  e2833003          ADD      r3,r3,#3
005934  e0822203          ADD      r2,r2,r3,LSL #4
005938  e5922004          LDR      r2,[r2,#4]
00593c  e0200291          MLA      r0,r1,r2,r0
005940  e59f1f38          LDR      r1,|L1.26752|
005944  e59f2f38          LDR      r2,|L1.26756|
005948  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00594c  e2822003          ADD      r2,r2,#3
005950  e7911202          LDR      r1,[r1,r2,LSL #4]
005954  e0200199          MLA      r0,r9,r1,r0
005958  e58d0090          STR      r0,[sp,#0x90]
;;;3310           vBlit_OverwriteRGB(&stMemBlit, &stParamBlit, pstWriteList);
00595c  e51f00f0          LDR      r0,|L1.22644|
005960  e28d1074          ADD      r1,sp,#0x74
005964  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
005968  e28d0084          ADD      r0,sp,#0x84
00596c  ebfffffe          BL       vBlit_OverwriteRGB
;;;3311           vGfListExecute();
005970  ebfffffe          BL       vGfListExecute
;;;3312           stParamBlit.eClipWndEn = stGastate.eClipWndEn;
005974  e51f010c          LDR      r0,|L1.22640|
005978  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00597c  e5cd0078          STRB     r0,[sp,#0x78]
                  |L1.22912|
;;;3313       }
;;;3314       
;;;3315       for (u32Count=0U; u32Count<u32Div; u32Count++)
005980  e3a04000          MOV      r4,#0
005984  ea0000b0          B        |L1.23628|
                  |L1.22920|
;;;3316       {
;;;3317           stMem.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*u32Count*u32BlockHeight*pstSrcImage->u16Width;
005988  e5971000          LDR      r1,[r7,#0]
00598c  e59d001c          LDR      r0,[sp,#0x1c]
005990  e0000490          MUL      r0,r0,r4
005994  e0000b90          MUL      r0,r0,r11
005998  e1d720b4          LDRH     r2,[r7,#4]
00599c  e0201290          MLA      r0,r0,r2,r1
0059a0  e58d0068          STR      r0,[sp,#0x68]
;;;3318           stMem.u16SrcHeight  = u32BlockHeight;
0059a4  e6ff107b          UXTH     r1,r11
0059a8  e1cd16b4          STRH     r1,[sp,#0x64]
;;;3319           stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Count*u32BlockHeight;
0059ac  e1d700fa          LDRSH    r0,[r7,#0xa]
0059b0  e51f1140          LDR      r1,|L1.22648|
0059b4  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0059b8  e2611011          RSB      r1,r1,#0x11
0059bc  e0010491          MUL      r1,r1,r4
0059c0  e0600b91          MLS      r0,r1,r11,r0
0059c4  e6bf1070          SXTH     r1,r0
0059c8  e1cd15be          STRH     r1,[sp,#0x5e]
;;;3320           /* Reinitializing Clip window and Destination Address */
;;;3321           stMem.u32DstAddr    = pstDstImage->u32Address;
0059cc  e5960000          LDR      r0,[r6,#0]
0059d0  e58d006c          STR      r0,[sp,#0x6c]
;;;3322           stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
0059d4  e51f016c          LDR      r0,|L1.22640|
0059d8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0059dc  e5cd004e          STRB     r0,[sp,#0x4e]
;;;3323           if (stParam.stRotCfg.eClipWndEn == GA_EN)
0059e0  e5dd004e          LDRB     r0,[sp,#0x4e]
0059e4  e3500001          CMP      r0,#1
0059e8  1a00000b          BNE      |L1.23068|
;;;3324           {
;;;3325               stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0059ec  e51f0184          LDR      r0,|L1.22640|
0059f0  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0059f4  e1cd05b4          STRH     r0,[sp,#0x54]
;;;3326               stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0059f8  e51f0190          LDR      r0,|L1.22640|
0059fc  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
005a00  e1cd05b6          STRH     r0,[sp,#0x56]
;;;3327               stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
005a04  e51f019c          LDR      r0,|L1.22640|
005a08  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
005a0c  e1cd05b8          STRH     r0,[sp,#0x58]
;;;3328               stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
005a10  e51f01a8          LDR      r0,|L1.22640|
005a14  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
005a18  e1cd05ba          STRH     r0,[sp,#0x5a]
                  |L1.23068|
;;;3329           }
;;;3330   #ifdef GA_USE_MATH_LIB
;;;3331           vRotLib_Rotate(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
005a1c  e59d0018          LDR      r0,[sp,#0x18]
005a20  ebfffffe          BL       __aeabi_f2d
005a24  e1cd01f0          STRD     r0,r1,[sp,#0x10]
005a28  e51f01bc          LDR      r0,|L1.22644|
005a2c  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
005a30  e58d0000          STR      r0,[sp,#0]
005a34  e1a03001          MOV      r3,r1
005a38  e59d2010          LDR      r2,[sp,#0x10]
005a3c  e28d104c          ADD      r1,sp,#0x4c
005a40  e28d0064          ADD      r0,sp,#0x64
005a44  ebfffffe          BL       vRotLib_Rotate
;;;3332   #else
;;;3333           vRotLib_Rotate(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;3334   #endif  
;;;3335           vGfListExecute();
005a48  ebfffffe          BL       vGfListExecute
;;;3336   
;;;3337           u32MinMaxValues[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
005a4c  ebfffffe          BL       u32GfGetMinXCoordinate
005a50  e2400001          SUB      r0,r0,#1
005a54  e59f1e28          LDR      r1,|L1.26756|
005a58  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005a5c  e0811004          ADD      r1,r1,r4
005a60  e51f21ec          LDR      r2,|L1.22652|
005a64  e7820201          STR      r0,[r2,r1,LSL #4]
;;;3338           u32MinMaxValues[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
005a68  ebfffffe          BL       u32GfGetMinYCoordinate
005a6c  e2400001          SUB      r0,r0,#1
005a70  e59f1e0c          LDR      r1,|L1.26756|
005a74  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005a78  e0811004          ADD      r1,r1,r4
005a7c  e51f2208          LDR      r2,|L1.22652|
005a80  e0821201          ADD      r1,r2,r1,LSL #4
005a84  e5810004          STR      r0,[r1,#4]
;;;3339           u32MinMaxValues[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
005a88  ebfffffe          BL       u32GfGetMaxXCoordinate
005a8c  e2800001          ADD      r0,r0,#1
005a90  e59f1dec          LDR      r1,|L1.26756|
005a94  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005a98  e0811004          ADD      r1,r1,r4
005a9c  e51f2228          LDR      r2,|L1.22652|
005aa0  e0821201          ADD      r1,r2,r1,LSL #4
005aa4  e5810008          STR      r0,[r1,#8]
;;;3340           u32MinMaxValues[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
005aa8  ebfffffe          BL       u32GfGetMaxYCoordinate
005aac  e2800001          ADD      r0,r0,#1
005ab0  e59f1dcc          LDR      r1,|L1.26756|
005ab4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005ab8  e0811004          ADD      r1,r1,r4
005abc  e51f2248          LDR      r2,|L1.22652|
005ac0  e0821201          ADD      r1,r2,r1,LSL #4
005ac4  e581000c          STR      r0,[r1,#0xc]
;;;3341   
;;;3342           
;;;3343           stMemBlend.u16DotCnt  = u32MinMaxValues[u32NeedleNumber+u32Count][2] - u32MinMaxValues[u32NeedleNumber+u32Count][0];
005ac8  e59f0db4          LDR      r0,|L1.26756|
005acc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005ad0  e0800004          ADD      r0,r0,r4
005ad4  e2821000          ADD      r1,r2,#0
005ad8  e0810200          ADD      r0,r1,r0,LSL #4
005adc  e1d000b8          LDRH     r0,[r0,#8]
005ae0  e59f1d9c          LDR      r1,|L1.26756|
005ae4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005ae8  e0811004          ADD      r1,r1,r4
005aec  e7921201          LDR      r1,[r2,r1,LSL #4]
005af0  e0400001          SUB      r0,r0,r1
005af4  e6ff1070          UXTH     r1,r0
005af8  e1cd14b8          STRH     r1,[sp,#0x48]
;;;3344           stMemBlend.u16LineCnt = u32MinMaxValues[u32NeedleNumber+u32Count][3] - u32MinMaxValues[u32NeedleNumber+u32Count][1];
005afc  e59f0d80          LDR      r0,|L1.26756|
005b00  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005b04  e0800004          ADD      r0,r0,r4
005b08  e2821000          ADD      r1,r2,#0
005b0c  e0810200          ADD      r0,r1,r0,LSL #4
005b10  e1d000bc          LDRH     r0,[r0,#0xc]
005b14  e59f1d68          LDR      r1,|L1.26756|
005b18  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005b1c  e0811004          ADD      r1,r1,r4
005b20  e0821201          ADD      r1,r2,r1,LSL #4
005b24  e1d110b4          LDRH     r1,[r1,#4]
005b28  e0400001          SUB      r0,r0,r1
005b2c  e6ff1070          UXTH     r1,r0
005b30  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;3345           /* handle clip window blend */
;;;3346           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlend.u16DotCnt, stMemBlend.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues[u32NeedleNumber+u32Count][0], u32MinMaxValues[u32NeedleNumber+u32Count][1]);
005b34  e59f0d48          LDR      r0,|L1.26756|
005b38  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005b3c  e0800004          ADD      r0,r0,r4
005b40  e2821000          ADD      r1,r2,#0
005b44  e0810200          ADD      r0,r1,r0,LSL #4
005b48  e5900004          LDR      r0,[r0,#4]
005b4c  e59f1d30          LDR      r1,|L1.26756|
005b50  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005b54  e0811004          ADD      r1,r1,r4
005b58  e7921201          LDR      r1,[r2,r1,LSL #4]
005b5c  e58d0004          STR      r0,[sp,#4]
005b60  e51f02f8          LDR      r0,|L1.22640|
005b64  e58d1000          STR      r1,[sp,#0]
005b68  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
005b6c  e1dd24ba          LDRH     r2,[sp,#0x4a]
005b70  e1dd14b8          LDRH     r1,[sp,#0x48]
005b74  e1a00006          MOV      r0,r6
005b78  ebfffffe          BL       eHandleClipWindowBlit
005b7c  e1a0a000          MOV      r10,r0
;;;3347           if(eDraw == GA_EN)
005b80  e35a0001          CMP      r10,#1
005b84  1a00002f          BNE      |L1.23624|
;;;3348           {
;;;3349               stParamBlend.eClipWndEn = eDraw;
005b88  e5cda029          STRB     r10,[sp,#0x29]
;;;3350               stMemBlend.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
005b8c  e59f0cf0          LDR      r0,|L1.26756|
005b90  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005b94  e0800004          ADD      r0,r0,r4
005b98  e51f1324          LDR      r1,|L1.22652|
005b9c  e0810200          ADD      r0,r1,r0,LSL #4
005ba0  e5900004          LDR      r0,[r0,#4]
005ba4  e1d510fa          LDRSH    r1,[r5,#0xa]
005ba8  e0400001          SUB      r0,r0,r1
005bac  e5951000          LDR      r1,[r5,#0]
005bb0  e1d520b4          LDRH     r2,[r5,#4]
005bb4  e0020892          MUL      r2,r2,r8
005bb8  e0201092          MLA      r0,r2,r0,r1
005bbc  e59f1cc0          LDR      r1,|L1.26756|
005bc0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005bc4  e0811004          ADD      r1,r1,r4
005bc8  e51f2354          LDR      r2,|L1.22652|
005bcc  e7921201          LDR      r1,[r2,r1,LSL #4]
005bd0  e1d520f8          LDRSH    r2,[r5,#8]
005bd4  e0411002          SUB      r1,r1,r2
005bd8  e0200198          MLA      r0,r8,r1,r0
005bdc  e58d003c          STR      r0,[sp,#0x3c]
;;;3351                                       + u8SrcNoOfBytesBg*(u32MinMaxValues[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;3352               stMemBlend.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues[u32NeedleNumber+u32Count][0];
005be0  e5960000          LDR      r0,[r6,#0]
005be4  e1d610b4          LDRH     r1,[r6,#4]
005be8  e0010991          MUL      r1,r1,r9
005bec  e59f2c90          LDR      r2,|L1.26756|
005bf0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005bf4  e0822004          ADD      r2,r2,r4
005bf8  e51f3384          LDR      r3,|L1.22652|
005bfc  e0832202          ADD      r2,r3,r2,LSL #4
005c00  e5922004          LDR      r2,[r2,#4]
005c04  e0200291          MLA      r0,r1,r2,r0
005c08  e59f1c74          LDR      r1,|L1.26756|
005c0c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005c10  e0811004          ADD      r1,r1,r4
005c14  e2832000          ADD      r2,r3,#0
005c18  e7921201          LDR      r1,[r2,r1,LSL #4]
005c1c  e0200199          MLA      r0,r9,r1,r0
005c20  e58d0044          STR      r0,[sp,#0x44]
;;;3353               i32Blit_BlendRGB(&stMemBlend, &stParamBlend, pstWriteList);
005c24  e51f03b8          LDR      r0,|L1.22644|
005c28  e28d1020          ADD      r1,sp,#0x20
005c2c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
005c30  e28d0038          ADD      r0,sp,#0x38
005c34  ebfffffe          BL       i32Blit_BlendRGB
;;;3354               vGfListExecute();
005c38  ebfffffe          BL       vGfListExecute
;;;3355               stParamBlend.eClipWndEn = stGastate.eClipWndEn;
005c3c  e51f03d4          LDR      r0,|L1.22640|
005c40  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
005c44  e5cd0029          STRB     r0,[sp,#0x29]
                  |L1.23624|
005c48  e2844001          ADD      r4,r4,#1              ;3315
                  |L1.23628|
005c4c  e59d0098          LDR      r0,[sp,#0x98]         ;3315
005c50  e1540000          CMP      r4,r0                 ;3315
005c54  3affff4b          BCC      |L1.22920|
;;;3356               
;;;3357           }
;;;3358       }
;;;3359   
;;;3360       stMem.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*u32Div*u32BlockHeight*pstSrcImage->u16Width;
005c58  e5972000          LDR      r2,[r7,#0]
005c5c  e59d001c          LDR      r0,[sp,#0x1c]
005c60  e59d1098          LDR      r1,[sp,#0x98]
005c64  e0000190          MUL      r0,r0,r1
005c68  e0000b90          MUL      r0,r0,r11
005c6c  e1d710b4          LDRH     r1,[r7,#4]
005c70  e0202190          MLA      r0,r0,r1,r2
005c74  e58d0068          STR      r0,[sp,#0x68]
;;;3361       stMem.u16SrcHeight  = pstSrcImage->u16Height - u32Div*u32BlockHeight;
005c78  e1d710b6          LDRH     r1,[r7,#6]
005c7c  e59d0098          LDR      r0,[sp,#0x98]
005c80  e0601b90          MLS      r0,r0,r11,r1
005c84  e6ff1070          UXTH     r1,r0
005c88  e1cd16b4          STRH     r1,[sp,#0x64]
;;;3362       stParam.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Div*u32BlockHeight;
005c8c  e1d710fa          LDRSH    r1,[r7,#0xa]
005c90  e51f0420          LDR      r0,|L1.22648|
005c94  e5900000          LDR      r0,[r0,#0]  ; u32SubResCPos
005c98  e2602011          RSB      r2,r0,#0x11
005c9c  e59d0098          LDR      r0,[sp,#0x98]
005ca0  e0000092          MUL      r0,r2,r0
005ca4  e0601b90          MLS      r0,r0,r11,r1
005ca8  e6bf1070          SXTH     r1,r0
005cac  e1cd15be          STRH     r1,[sp,#0x5e]
;;;3363       /* Reinitializing Clip window and Destination Address */
;;;3364       stMem.u32DstAddr    = pstDstImage->u32Address;
005cb0  e5960000          LDR      r0,[r6,#0]
005cb4  e58d006c          STR      r0,[sp,#0x6c]
;;;3365       stParam.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
005cb8  e51f0450          LDR      r0,|L1.22640|
005cbc  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
005cc0  e5cd004e          STRB     r0,[sp,#0x4e]
;;;3366       if (stParam.stRotCfg.eClipWndEn == GA_EN)
005cc4  e5dd004e          LDRB     r0,[sp,#0x4e]
005cc8  e3500001          CMP      r0,#1
005ccc  1a00000b          BNE      |L1.23808|
;;;3367       {
;;;3368           stParam.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
005cd0  e51f0468          LDR      r0,|L1.22640|
005cd4  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
005cd8  e1cd05b4          STRH     r0,[sp,#0x54]
;;;3369           stParam.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
005cdc  e51f0474          LDR      r0,|L1.22640|
005ce0  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
005ce4  e1cd05b6          STRH     r0,[sp,#0x56]
;;;3370           stParam.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
005ce8  e51f0480          LDR      r0,|L1.22640|
005cec  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
005cf0  e1cd05b8          STRH     r0,[sp,#0x58]
;;;3371           stParam.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
005cf4  e51f048c          LDR      r0,|L1.22640|
005cf8  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
005cfc  e1cd05ba          STRH     r0,[sp,#0x5a]
                  |L1.23808|
;;;3372       }
;;;3373       if(stMem.u16SrcHeight > 0)
005d00  e1dd06b4          LDRH     r0,[sp,#0x64]
005d04  e3500000          CMP      r0,#0
005d08  da00000b          BLE      |L1.23868|
;;;3374       {
;;;3375   #ifdef GA_USE_MATH_LIB
;;;3376           vRotLib_Rotate(&stMem, &stParam, (float64_t)f32AngleLocal, pstWriteList);
005d0c  e59d0018          LDR      r0,[sp,#0x18]
005d10  ebfffffe          BL       __aeabi_f2d
005d14  e1cd01f0          STRD     r0,r1,[sp,#0x10]
005d18  e51f04ac          LDR      r0,|L1.22644|
005d1c  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
005d20  e58d0000          STR      r0,[sp,#0]
005d24  e1a03001          MOV      r3,r1
005d28  e59d2010          LDR      r2,[sp,#0x10]
005d2c  e28d104c          ADD      r1,sp,#0x4c
005d30  e28d0064          ADD      r0,sp,#0x64
005d34  ebfffffe          BL       vRotLib_Rotate
;;;3377   #else
;;;3378           vRotLib_Rotate(&stMem, &stParam, (int16_t)(f32AngleLocal*10U), pstWriteList);
;;;3379   #endif
;;;3380           vGfListExecute();
005d38  ebfffffe          BL       vGfListExecute
                  |L1.23868|
;;;3381       }
;;;3382   
;;;3383       u32MinMaxValues[u32NeedleNumber+3][0] = u32GfGetMinXCoordinate()-1U;
005d3c  ebfffffe          BL       u32GfGetMinXCoordinate
005d40  e2400001          SUB      r0,r0,#1
005d44  e51f14d0          LDR      r1,|L1.22652|
005d48  e59f2b34          LDR      r2,|L1.26756|
005d4c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005d50  e2822003          ADD      r2,r2,#3
005d54  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3384       u32MinMaxValues[u32NeedleNumber+3][1] = u32GfGetMinYCoordinate()-1U;
005d58  ebfffffe          BL       u32GfGetMinYCoordinate
005d5c  e2401001          SUB      r1,r0,#1
005d60  e51f04ec          LDR      r0,|L1.22652|
005d64  e59f2b18          LDR      r2,|L1.26756|
005d68  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005d6c  e2822003          ADD      r2,r2,#3
005d70  e0800202          ADD      r0,r0,r2,LSL #4
005d74  e5801004          STR      r1,[r0,#4]
;;;3385       u32MinMaxValues[u32NeedleNumber+3][2] = u32GfGetMaxXCoordinate()+1U;
005d78  ebfffffe          BL       u32GfGetMaxXCoordinate
005d7c  e2800001          ADD      r0,r0,#1
005d80  e51f150c          LDR      r1,|L1.22652|
005d84  e59f2af8          LDR      r2,|L1.26756|
005d88  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005d8c  e2822003          ADD      r2,r2,#3
005d90  e0811202          ADD      r1,r1,r2,LSL #4
005d94  e5810008          STR      r0,[r1,#8]
;;;3386       u32MinMaxValues[u32NeedleNumber+3][3] = u32GfGetMaxYCoordinate()+1U;
005d98  ebfffffe          BL       u32GfGetMaxYCoordinate
005d9c  e2801001          ADD      r1,r0,#1
005da0  e51f052c          LDR      r0,|L1.22652|
005da4  e59f2ad8          LDR      r2,|L1.26756|
005da8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005dac  e2822003          ADD      r2,r2,#3
005db0  e0800202          ADD      r0,r0,r2,LSL #4
005db4  e580100c          STR      r1,[r0,#0xc]
;;;3387   
;;;3388       
;;;3389       stMemBlend.u16DotCnt  = u32MinMaxValues[u32NeedleNumber+3][2] - u32MinMaxValues[u32NeedleNumber+3][0];
005db8  e51f0544          LDR      r0,|L1.22652|
005dbc  e59f1ac0          LDR      r1,|L1.26756|
005dc0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005dc4  e2811003          ADD      r1,r1,#3
005dc8  e0800201          ADD      r0,r0,r1,LSL #4
005dcc  e1d000b8          LDRH     r0,[r0,#8]
005dd0  e51f155c          LDR      r1,|L1.22652|
005dd4  e59f2aa8          LDR      r2,|L1.26756|
005dd8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005ddc  e2822003          ADD      r2,r2,#3
005de0  e7911202          LDR      r1,[r1,r2,LSL #4]
005de4  e0400001          SUB      r0,r0,r1
005de8  e6ff1070          UXTH     r1,r0
005dec  e1cd14b8          STRH     r1,[sp,#0x48]
;;;3390       stMemBlend.u16LineCnt = u32MinMaxValues[u32NeedleNumber+3][3] - u32MinMaxValues[u32NeedleNumber+3][1];
005df0  e51f057c          LDR      r0,|L1.22652|
005df4  e59f1a88          LDR      r1,|L1.26756|
005df8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005dfc  e2811003          ADD      r1,r1,#3
005e00  e0800201          ADD      r0,r0,r1,LSL #4
005e04  e1d000bc          LDRH     r0,[r0,#0xc]
005e08  e51f1594          LDR      r1,|L1.22652|
005e0c  e59f2a70          LDR      r2,|L1.26756|
005e10  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005e14  e2822003          ADD      r2,r2,#3
005e18  e0811202          ADD      r1,r1,r2,LSL #4
005e1c  e1d110b4          LDRH     r1,[r1,#4]
005e20  e0400001          SUB      r0,r0,r1
005e24  e6ff1070          UXTH     r1,r0
005e28  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;3391       /* handle clip window blend */
;;;3392       eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlend.u16DotCnt, stMemBlend.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues[u32NeedleNumber+3][0], u32MinMaxValues[u32NeedleNumber+3][1]);
005e2c  e51f05b8          LDR      r0,|L1.22652|
005e30  e59f1a4c          LDR      r1,|L1.26756|
005e34  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005e38  e2811003          ADD      r1,r1,#3
005e3c  e0800201          ADD      r0,r0,r1,LSL #4
005e40  e5900004          LDR      r0,[r0,#4]
005e44  e51f15d0          LDR      r1,|L1.22652|
005e48  e59f2a34          LDR      r2,|L1.26756|
005e4c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005e50  e2822003          ADD      r2,r2,#3
005e54  e7911202          LDR      r1,[r1,r2,LSL #4]
005e58  e58d0004          STR      r0,[sp,#4]
005e5c  e51f05f4          LDR      r0,|L1.22640|
005e60  e58d1000          STR      r1,[sp,#0]
005e64  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
005e68  e1dd24ba          LDRH     r2,[sp,#0x4a]
005e6c  e1dd14b8          LDRH     r1,[sp,#0x48]
005e70  e1a00006          MOV      r0,r6
005e74  ebfffffe          BL       eHandleClipWindowBlit
005e78  e1a0a000          MOV      r10,r0
;;;3393       if(eDraw == GA_EN)
005e7c  e35a0001          CMP      r10,#1
005e80  1a000030          BNE      |L1.24392|
;;;3394       {
;;;3395           stParamBlend.eClipWndEn = GA_EN;
005e84  e3a00001          MOV      r0,#1
005e88  e5cd0029          STRB     r0,[sp,#0x29]
;;;3396           stMemBlend.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues[u32NeedleNumber+3][1]-pstSrcImageBg->i16CenterY)
005e8c  e51f0618          LDR      r0,|L1.22652|
005e90  e59f19ec          LDR      r1,|L1.26756|
005e94  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005e98  e2811003          ADD      r1,r1,#3
005e9c  e0800201          ADD      r0,r0,r1,LSL #4
005ea0  e5900004          LDR      r0,[r0,#4]
005ea4  e1d510fa          LDRSH    r1,[r5,#0xa]
005ea8  e0400001          SUB      r0,r0,r1
005eac  e5951000          LDR      r1,[r5,#0]
005eb0  e1d520b4          LDRH     r2,[r5,#4]
005eb4  e0020892          MUL      r2,r2,r8
005eb8  e0201092          MLA      r0,r2,r0,r1
005ebc  e51f1648          LDR      r1,|L1.22652|
005ec0  e59f29bc          LDR      r2,|L1.26756|
005ec4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005ec8  e2822003          ADD      r2,r2,#3
005ecc  e7911202          LDR      r1,[r1,r2,LSL #4]
005ed0  e1d520f8          LDRSH    r2,[r5,#8]
005ed4  e0411002          SUB      r1,r1,r2
005ed8  e0200198          MLA      r0,r8,r1,r0
005edc  e58d003c          STR      r0,[sp,#0x3c]
;;;3397                                   + u8SrcNoOfBytesBg*(u32MinMaxValues[u32NeedleNumber+3][0]-pstSrcImageBg->i16CenterX);
;;;3398           stMemBlend.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues[u32NeedleNumber+3][0];
005ee0  e5960000          LDR      r0,[r6,#0]
005ee4  e1d610b4          LDRH     r1,[r6,#4]
005ee8  e0020991          MUL      r2,r1,r9
005eec  e51f1678          LDR      r1,|L1.22652|
005ef0  e59f398c          LDR      r3,|L1.26756|
005ef4  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
005ef8  e2833003          ADD      r3,r3,#3
005efc  e0811203          ADD      r1,r1,r3,LSL #4
005f00  e5911004          LDR      r1,[r1,#4]
005f04  e0200192          MLA      r0,r2,r1,r0
005f08  e51f1694          LDR      r1,|L1.22652|
005f0c  e59f2970          LDR      r2,|L1.26756|
005f10  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005f14  e2822003          ADD      r2,r2,#3
005f18  e7911202          LDR      r1,[r1,r2,LSL #4]
005f1c  e0200199          MLA      r0,r9,r1,r0
005f20  e58d0044          STR      r0,[sp,#0x44]
;;;3399           i32Blit_BlendRGB(&stMemBlend, &stParamBlend, pstWriteList);
005f24  e51f06b8          LDR      r0,|L1.22644|
005f28  e28d1020          ADD      r1,sp,#0x20
005f2c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
005f30  e28d0038          ADD      r0,sp,#0x38
005f34  ebfffffe          BL       i32Blit_BlendRGB
;;;3400           vGfListExecute();
005f38  ebfffffe          BL       vGfListExecute
;;;3401           stParamBlend.eClipWndEn = stGastate.eClipWndEn;
005f3c  e51f06d4          LDR      r0,|L1.22640|
005f40  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
005f44  e5cd0029          STRB     r0,[sp,#0x29]
                  |L1.24392|
;;;3402       }
;;;3403   
;;;3404       u32MinMaxValues_old_old[u32NeedleNumber+0][0] = u32MinMaxValues_old[u32NeedleNumber+0][0];
005f48  e51f16d0          LDR      r1,|L1.22656|
005f4c  e59f0930          LDR      r0,|L1.26756|
005f50  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005f54  e7911200          LDR      r1,[r1,r0,LSL #4]
005f58  e59f2920          LDR      r2,|L1.26752|
005f5c  e59f0920          LDR      r0,|L1.26756|
005f60  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005f64  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3405       u32MinMaxValues_old_old[u32NeedleNumber+0][1] = u32MinMaxValues_old[u32NeedleNumber+0][1];
005f68  e51f16f0          LDR      r1,|L1.22656|
005f6c  e59f0910          LDR      r0,|L1.26756|
005f70  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005f74  e0810200          ADD      r0,r1,r0,LSL #4
005f78  e5901004          LDR      r1,[r0,#4]
005f7c  e59f0900          LDR      r0,|L1.26756|
005f80  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005f84  e0820200          ADD      r0,r2,r0,LSL #4
005f88  e5801004          STR      r1,[r0,#4]
;;;3406       u32MinMaxValues_old_old[u32NeedleNumber+0][2] = u32MinMaxValues_old[u32NeedleNumber+0][2];
005f8c  e51f1714          LDR      r1,|L1.22656|
005f90  e59f08ec          LDR      r0,|L1.26756|
005f94  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005f98  e0810200          ADD      r0,r1,r0,LSL #4
005f9c  e5901008          LDR      r1,[r0,#8]
005fa0  e59f08dc          LDR      r0,|L1.26756|
005fa4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005fa8  e0820200          ADD      r0,r2,r0,LSL #4
005fac  e5801008          STR      r1,[r0,#8]
;;;3407       u32MinMaxValues_old_old[u32NeedleNumber+0][3] = u32MinMaxValues_old[u32NeedleNumber+0][3];
005fb0  e51f1738          LDR      r1,|L1.22656|
005fb4  e59f08c8          LDR      r0,|L1.26756|
005fb8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005fbc  e0810200          ADD      r0,r1,r0,LSL #4
005fc0  e590100c          LDR      r1,[r0,#0xc]
005fc4  e59f08b8          LDR      r0,|L1.26756|
005fc8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
005fcc  e0820200          ADD      r0,r2,r0,LSL #4
005fd0  e580100c          STR      r1,[r0,#0xc]
;;;3408       u32MinMaxValues_old_old[u32NeedleNumber+1][0] = u32MinMaxValues_old[u32NeedleNumber+1][0];
005fd4  e51f075c          LDR      r0,|L1.22656|
005fd8  e59f18a4          LDR      r1,|L1.26756|
005fdc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
005fe0  e2811001          ADD      r1,r1,#1
005fe4  e7901201          LDR      r1,[r0,r1,LSL #4]
005fe8  e2820000          ADD      r0,r2,#0
005fec  e59f2890          LDR      r2,|L1.26756|
005ff0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
005ff4  e2822001          ADD      r2,r2,#1
005ff8  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3409       u32MinMaxValues_old_old[u32NeedleNumber+1][1] = u32MinMaxValues_old[u32NeedleNumber+1][1];
005ffc  e51f0784          LDR      r0,|L1.22656|
006000  e59f187c          LDR      r1,|L1.26756|
006004  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006008  e2811001          ADD      r1,r1,#1
00600c  e0800201          ADD      r0,r0,r1,LSL #4
006010  e5900004          LDR      r0,[r0,#4]
006014  e59f1864          LDR      r1,|L1.26752|
006018  e59f2864          LDR      r2,|L1.26756|
00601c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006020  e2822001          ADD      r2,r2,#1
006024  e0811202          ADD      r1,r1,r2,LSL #4
006028  e5810004          STR      r0,[r1,#4]
;;;3410       u32MinMaxValues_old_old[u32NeedleNumber+1][2] = u32MinMaxValues_old[u32NeedleNumber+1][2];
00602c  e51f07b4          LDR      r0,|L1.22656|
006030  e59f184c          LDR      r1,|L1.26756|
006034  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006038  e2811001          ADD      r1,r1,#1
00603c  e0800201          ADD      r0,r0,r1,LSL #4
006040  e5900008          LDR      r0,[r0,#8]
006044  e59f1834          LDR      r1,|L1.26752|
006048  e59f2834          LDR      r2,|L1.26756|
00604c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006050  e2822001          ADD      r2,r2,#1
006054  e0811202          ADD      r1,r1,r2,LSL #4
006058  e5810008          STR      r0,[r1,#8]
;;;3411       u32MinMaxValues_old_old[u32NeedleNumber+1][3] = u32MinMaxValues_old[u32NeedleNumber+1][3];
00605c  e51f07e4          LDR      r0,|L1.22656|
006060  e59f181c          LDR      r1,|L1.26756|
006064  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006068  e2811001          ADD      r1,r1,#1
00606c  e0800201          ADD      r0,r0,r1,LSL #4
006070  e590000c          LDR      r0,[r0,#0xc]
006074  e59f1804          LDR      r1,|L1.26752|
006078  e59f2804          LDR      r2,|L1.26756|
00607c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006080  e2822001          ADD      r2,r2,#1
006084  e0811202          ADD      r1,r1,r2,LSL #4
006088  e581000c          STR      r0,[r1,#0xc]
;;;3412       u32MinMaxValues_old_old[u32NeedleNumber+2][0] = u32MinMaxValues_old[u32NeedleNumber+2][0];
00608c  e51f0814          LDR      r0,|L1.22656|
006090  e59f17ec          LDR      r1,|L1.26756|
006094  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006098  e2811002          ADD      r1,r1,#2
00609c  e7901201          LDR      r1,[r0,r1,LSL #4]
0060a0  e59f07d8          LDR      r0,|L1.26752|
0060a4  e59f27d8          LDR      r2,|L1.26756|
0060a8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0060ac  e2822002          ADD      r2,r2,#2
0060b0  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3413       u32MinMaxValues_old_old[u32NeedleNumber+2][1] = u32MinMaxValues_old[u32NeedleNumber+2][1];
0060b4  e51f083c          LDR      r0,|L1.22656|
0060b8  e59f17c4          LDR      r1,|L1.26756|
0060bc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0060c0  e2811002          ADD      r1,r1,#2
0060c4  e0800201          ADD      r0,r0,r1,LSL #4
0060c8  e5901004          LDR      r1,[r0,#4]
0060cc  e59f07ac          LDR      r0,|L1.26752|
0060d0  e59f27ac          LDR      r2,|L1.26756|
0060d4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0060d8  e2822002          ADD      r2,r2,#2
0060dc  e0800202          ADD      r0,r0,r2,LSL #4
0060e0  e5801004          STR      r1,[r0,#4]
;;;3414       u32MinMaxValues_old_old[u32NeedleNumber+2][2] = u32MinMaxValues_old[u32NeedleNumber+2][2];
0060e4  e51f086c          LDR      r0,|L1.22656|
0060e8  e59f1794          LDR      r1,|L1.26756|
0060ec  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0060f0  e2811002          ADD      r1,r1,#2
0060f4  e0800201          ADD      r0,r0,r1,LSL #4
0060f8  e5900008          LDR      r0,[r0,#8]
0060fc  e59f177c          LDR      r1,|L1.26752|
006100  e59f277c          LDR      r2,|L1.26756|
006104  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006108  e2822002          ADD      r2,r2,#2
00610c  e0811202          ADD      r1,r1,r2,LSL #4
006110  e5810008          STR      r0,[r1,#8]
;;;3415       u32MinMaxValues_old_old[u32NeedleNumber+2][3] = u32MinMaxValues_old[u32NeedleNumber+2][3];
006114  e51f089c          LDR      r0,|L1.22656|
006118  e59f1764          LDR      r1,|L1.26756|
00611c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006120  e2811002          ADD      r1,r1,#2
006124  e0800201          ADD      r0,r0,r1,LSL #4
006128  e590100c          LDR      r1,[r0,#0xc]
00612c  e59f074c          LDR      r0,|L1.26752|
006130  e59f274c          LDR      r2,|L1.26756|
006134  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006138  e2822002          ADD      r2,r2,#2
00613c  e0800202          ADD      r0,r0,r2,LSL #4
006140  e580100c          STR      r1,[r0,#0xc]
;;;3416       u32MinMaxValues_old_old[u32NeedleNumber+3][0] = u32MinMaxValues_old[u32NeedleNumber+3][0];
006144  e51f08cc          LDR      r0,|L1.22656|
006148  e59f1734          LDR      r1,|L1.26756|
00614c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006150  e2811003          ADD      r1,r1,#3
006154  e7900201          LDR      r0,[r0,r1,LSL #4]
006158  e59f1720          LDR      r1,|L1.26752|
00615c  e59f2720          LDR      r2,|L1.26756|
006160  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006164  e2822003          ADD      r2,r2,#3
006168  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3417       u32MinMaxValues_old_old[u32NeedleNumber+3][1] = u32MinMaxValues_old[u32NeedleNumber+3][1];
00616c  e51f08f4          LDR      r0,|L1.22656|
006170  e59f170c          LDR      r1,|L1.26756|
006174  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006178  e2811003          ADD      r1,r1,#3
00617c  e0800201          ADD      r0,r0,r1,LSL #4
006180  e5900004          LDR      r0,[r0,#4]
006184  e59f16f4          LDR      r1,|L1.26752|
006188  e59f26f4          LDR      r2,|L1.26756|
00618c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006190  e2822003          ADD      r2,r2,#3
006194  e0811202          ADD      r1,r1,r2,LSL #4
006198  e5810004          STR      r0,[r1,#4]
;;;3418       u32MinMaxValues_old_old[u32NeedleNumber+3][2] = u32MinMaxValues_old[u32NeedleNumber+3][2];
00619c  e51f0924          LDR      r0,|L1.22656|
0061a0  e59f16dc          LDR      r1,|L1.26756|
0061a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0061a8  e2811003          ADD      r1,r1,#3
0061ac  e0800201          ADD      r0,r0,r1,LSL #4
0061b0  e5900008          LDR      r0,[r0,#8]
0061b4  e59f16c4          LDR      r1,|L1.26752|
0061b8  e59f26c4          LDR      r2,|L1.26756|
0061bc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0061c0  e2822003          ADD      r2,r2,#3
0061c4  e0811202          ADD      r1,r1,r2,LSL #4
0061c8  e5810008          STR      r0,[r1,#8]
;;;3419       u32MinMaxValues_old_old[u32NeedleNumber+3][3] = u32MinMaxValues_old[u32NeedleNumber+3][3];
0061cc  e51f0954          LDR      r0,|L1.22656|
0061d0  e59f16ac          LDR      r1,|L1.26756|
0061d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0061d8  e2811003          ADD      r1,r1,#3
0061dc  e0800201          ADD      r0,r0,r1,LSL #4
0061e0  e590000c          LDR      r0,[r0,#0xc]
0061e4  e59f1694          LDR      r1,|L1.26752|
0061e8  e59f2694          LDR      r2,|L1.26756|
0061ec  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0061f0  e2822003          ADD      r2,r2,#3
0061f4  e0811202          ADD      r1,r1,r2,LSL #4
0061f8  e581000c          STR      r0,[r1,#0xc]
;;;3420       u32MinMaxValues_old_old[u32NeedleNumber+4][0] = u32MinMaxValues_old[u32NeedleNumber+4][0];
0061fc  e51f0984          LDR      r0,|L1.22656|
006200  e59f167c          LDR      r1,|L1.26756|
006204  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006208  e2811004          ADD      r1,r1,#4
00620c  e7900201          LDR      r0,[r0,r1,LSL #4]
006210  e59f1668          LDR      r1,|L1.26752|
006214  e59f2668          LDR      r2,|L1.26756|
006218  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00621c  e2822004          ADD      r2,r2,#4
006220  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3421       u32MinMaxValues_old_old[u32NeedleNumber+4][1] = u32MinMaxValues_old[u32NeedleNumber+4][1];
006224  e51f09ac          LDR      r0,|L1.22656|
006228  e59f1654          LDR      r1,|L1.26756|
00622c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006230  e2811004          ADD      r1,r1,#4
006234  e0800201          ADD      r0,r0,r1,LSL #4
006238  e5901004          LDR      r1,[r0,#4]
00623c  e59f063c          LDR      r0,|L1.26752|
006240  e59f263c          LDR      r2,|L1.26756|
006244  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006248  e2822004          ADD      r2,r2,#4
00624c  e0800202          ADD      r0,r0,r2,LSL #4
006250  e5801004          STR      r1,[r0,#4]
;;;3422       u32MinMaxValues_old_old[u32NeedleNumber+4][2] = u32MinMaxValues_old[u32NeedleNumber+4][2];
006254  e51f09dc          LDR      r0,|L1.22656|
006258  e59f1624          LDR      r1,|L1.26756|
00625c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006260  e2811004          ADD      r1,r1,#4
006264  e0800201          ADD      r0,r0,r1,LSL #4
006268  e5900008          LDR      r0,[r0,#8]
00626c  e59f160c          LDR      r1,|L1.26752|
006270  e59f260c          LDR      r2,|L1.26756|
006274  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006278  e2822004          ADD      r2,r2,#4
00627c  e0811202          ADD      r1,r1,r2,LSL #4
006280  e5810008          STR      r0,[r1,#8]
;;;3423       u32MinMaxValues_old_old[u32NeedleNumber+4][3] = u32MinMaxValues_old[u32NeedleNumber+4][3];
006284  e51f0a0c          LDR      r0,|L1.22656|
006288  e59f15f4          LDR      r1,|L1.26756|
00628c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006290  e2811004          ADD      r1,r1,#4
006294  e0800201          ADD      r0,r0,r1,LSL #4
006298  e590100c          LDR      r1,[r0,#0xc]
00629c  e59f05dc          LDR      r0,|L1.26752|
0062a0  e59f25dc          LDR      r2,|L1.26756|
0062a4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0062a8  e2822004          ADD      r2,r2,#4
0062ac  e0800202          ADD      r0,r0,r2,LSL #4
0062b0  e580100c          STR      r1,[r0,#0xc]
;;;3424   
;;;3425       u32MinMaxValues_old[u32NeedleNumber+0][0] = u32MinMaxValues[u32NeedleNumber+0][0];
0062b4  e51f1a40          LDR      r1,|L1.22652|
0062b8  e59f05c4          LDR      r0,|L1.26756|
0062bc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0062c0  e7911200          LDR      r1,[r1,r0,LSL #4]
0062c4  e51f2a4c          LDR      r2,|L1.22656|
0062c8  e59f05b4          LDR      r0,|L1.26756|
0062cc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0062d0  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3426       u32MinMaxValues_old[u32NeedleNumber+0][1] = u32MinMaxValues[u32NeedleNumber+0][1];
0062d4  e51f1a60          LDR      r1,|L1.22652|
0062d8  e59f05a4          LDR      r0,|L1.26756|
0062dc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0062e0  e0810200          ADD      r0,r1,r0,LSL #4
0062e4  e5901004          LDR      r1,[r0,#4]
0062e8  e59f0594          LDR      r0,|L1.26756|
0062ec  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0062f0  e0820200          ADD      r0,r2,r0,LSL #4
0062f4  e5801004          STR      r1,[r0,#4]
;;;3427       u32MinMaxValues_old[u32NeedleNumber+0][2] = u32MinMaxValues[u32NeedleNumber+0][2];
0062f8  e51f1a84          LDR      r1,|L1.22652|
0062fc  e59f0580          LDR      r0,|L1.26756|
006300  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006304  e0810200          ADD      r0,r1,r0,LSL #4
006308  e5901008          LDR      r1,[r0,#8]
00630c  e59f0570          LDR      r0,|L1.26756|
006310  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006314  e0820200          ADD      r0,r2,r0,LSL #4
006318  e5801008          STR      r1,[r0,#8]
;;;3428       u32MinMaxValues_old[u32NeedleNumber+0][3] = u32MinMaxValues[u32NeedleNumber+0][3];
00631c  e51f1aa8          LDR      r1,|L1.22652|
006320  e59f055c          LDR      r0,|L1.26756|
006324  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006328  e0810200          ADD      r0,r1,r0,LSL #4
00632c  e2821000          ADD      r1,r2,#0
006330  e590200c          LDR      r2,[r0,#0xc]
006334  e59f0548          LDR      r0,|L1.26756|
006338  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00633c  e0810200          ADD      r0,r1,r0,LSL #4
006340  e580200c          STR      r2,[r0,#0xc]
;;;3429       u32MinMaxValues_old[u32NeedleNumber+1][0] = u32MinMaxValues[u32NeedleNumber+1][0];
006344  e51f0ad0          LDR      r0,|L1.22652|
006348  e59f1534          LDR      r1,|L1.26756|
00634c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006350  e2811001          ADD      r1,r1,#1
006354  e7900201          LDR      r0,[r0,r1,LSL #4]
006358  e51f1ae0          LDR      r1,|L1.22656|
00635c  e59f2520          LDR      r2,|L1.26756|
006360  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006364  e2822001          ADD      r2,r2,#1
006368  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3430       u32MinMaxValues_old[u32NeedleNumber+1][1] = u32MinMaxValues[u32NeedleNumber+1][1];
00636c  e51f0af8          LDR      r0,|L1.22652|
006370  e59f150c          LDR      r1,|L1.26756|
006374  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006378  e2811001          ADD      r1,r1,#1
00637c  e0800201          ADD      r0,r0,r1,LSL #4
006380  e5901004          LDR      r1,[r0,#4]
006384  e51f0b0c          LDR      r0,|L1.22656|
006388  e59f24f4          LDR      r2,|L1.26756|
00638c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006390  e2822001          ADD      r2,r2,#1
006394  e0800202          ADD      r0,r0,r2,LSL #4
006398  e5801004          STR      r1,[r0,#4]
;;;3431       u32MinMaxValues_old[u32NeedleNumber+1][2] = u32MinMaxValues[u32NeedleNumber+1][2];
00639c  e51f0b28          LDR      r0,|L1.22652|
0063a0  e59f14dc          LDR      r1,|L1.26756|
0063a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0063a8  e2811001          ADD      r1,r1,#1
0063ac  e0800201          ADD      r0,r0,r1,LSL #4
0063b0  e5900008          LDR      r0,[r0,#8]
0063b4  e51f1b3c          LDR      r1,|L1.22656|
0063b8  e59f24c4          LDR      r2,|L1.26756|
0063bc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0063c0  e2822001          ADD      r2,r2,#1
0063c4  e0811202          ADD      r1,r1,r2,LSL #4
0063c8  e5810008          STR      r0,[r1,#8]
;;;3432       u32MinMaxValues_old[u32NeedleNumber+1][3] = u32MinMaxValues[u32NeedleNumber+1][3];
0063cc  e51f0b58          LDR      r0,|L1.22652|
0063d0  e59f14ac          LDR      r1,|L1.26756|
0063d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0063d8  e2811001          ADD      r1,r1,#1
0063dc  e0800201          ADD      r0,r0,r1,LSL #4
0063e0  e590000c          LDR      r0,[r0,#0xc]
0063e4  e51f1b6c          LDR      r1,|L1.22656|
0063e8  e59f2494          LDR      r2,|L1.26756|
0063ec  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0063f0  e2822001          ADD      r2,r2,#1
0063f4  e0811202          ADD      r1,r1,r2,LSL #4
0063f8  e581000c          STR      r0,[r1,#0xc]
;;;3433       u32MinMaxValues_old[u32NeedleNumber+2][0] = u32MinMaxValues[u32NeedleNumber+2][0];
0063fc  e51f0b88          LDR      r0,|L1.22652|
006400  e59f147c          LDR      r1,|L1.26756|
006404  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006408  e2811002          ADD      r1,r1,#2
00640c  e7900201          LDR      r0,[r0,r1,LSL #4]
006410  e51f1b98          LDR      r1,|L1.22656|
006414  e59f2468          LDR      r2,|L1.26756|
006418  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00641c  e2822002          ADD      r2,r2,#2
006420  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3434       u32MinMaxValues_old[u32NeedleNumber+2][1] = u32MinMaxValues[u32NeedleNumber+2][1];
006424  e51f0bb0          LDR      r0,|L1.22652|
006428  e59f1454          LDR      r1,|L1.26756|
00642c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006430  e2811002          ADD      r1,r1,#2
006434  e0800201          ADD      r0,r0,r1,LSL #4
006438  e5900004          LDR      r0,[r0,#4]
00643c  e51f1bc4          LDR      r1,|L1.22656|
006440  e59f243c          LDR      r2,|L1.26756|
006444  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006448  e2822002          ADD      r2,r2,#2
00644c  e0811202          ADD      r1,r1,r2,LSL #4
006450  e5810004          STR      r0,[r1,#4]
;;;3435       u32MinMaxValues_old[u32NeedleNumber+2][2] = u32MinMaxValues[u32NeedleNumber+2][2];
006454  e51f0be0          LDR      r0,|L1.22652|
006458  e59f1424          LDR      r1,|L1.26756|
00645c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006460  e2811002          ADD      r1,r1,#2
006464  e0800201          ADD      r0,r0,r1,LSL #4
006468  e5900008          LDR      r0,[r0,#8]
00646c  e51f1bf4          LDR      r1,|L1.22656|
006470  e59f240c          LDR      r2,|L1.26756|
006474  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006478  e2822002          ADD      r2,r2,#2
00647c  e0811202          ADD      r1,r1,r2,LSL #4
006480  e5810008          STR      r0,[r1,#8]
;;;3436       u32MinMaxValues_old[u32NeedleNumber+2][3] = u32MinMaxValues[u32NeedleNumber+2][3];
006484  e51f0c10          LDR      r0,|L1.22652|
006488  e59f13f4          LDR      r1,|L1.26756|
00648c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006490  e2811002          ADD      r1,r1,#2
006494  e0800201          ADD      r0,r0,r1,LSL #4
006498  e590000c          LDR      r0,[r0,#0xc]
00649c  e51f1c24          LDR      r1,|L1.22656|
0064a0  e59f23dc          LDR      r2,|L1.26756|
0064a4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0064a8  e2822002          ADD      r2,r2,#2
0064ac  e0811202          ADD      r1,r1,r2,LSL #4
0064b0  e581000c          STR      r0,[r1,#0xc]
;;;3437       u32MinMaxValues_old[u32NeedleNumber+3][0] = u32MinMaxValues[u32NeedleNumber+3][0];
0064b4  e51f0c40          LDR      r0,|L1.22652|
0064b8  e59f13c4          LDR      r1,|L1.26756|
0064bc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0064c0  e2811003          ADD      r1,r1,#3
0064c4  e7901201          LDR      r1,[r0,r1,LSL #4]
0064c8  e51f0c50          LDR      r0,|L1.22656|
0064cc  e59f23b0          LDR      r2,|L1.26756|
0064d0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0064d4  e2822003          ADD      r2,r2,#3
0064d8  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3438       u32MinMaxValues_old[u32NeedleNumber+3][1] = u32MinMaxValues[u32NeedleNumber+3][1];
0064dc  e51f0c68          LDR      r0,|L1.22652|
0064e0  e59f139c          LDR      r1,|L1.26756|
0064e4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0064e8  e2811003          ADD      r1,r1,#3
0064ec  e0800201          ADD      r0,r0,r1,LSL #4
0064f0  e5901004          LDR      r1,[r0,#4]
0064f4  e51f0c7c          LDR      r0,|L1.22656|
0064f8  e59f2384          LDR      r2,|L1.26756|
0064fc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006500  e2822003          ADD      r2,r2,#3
006504  e0800202          ADD      r0,r0,r2,LSL #4
006508  e5801004          STR      r1,[r0,#4]
;;;3439       u32MinMaxValues_old[u32NeedleNumber+3][2] = u32MinMaxValues[u32NeedleNumber+3][2];
00650c  e51f0c98          LDR      r0,|L1.22652|
006510  e59f136c          LDR      r1,|L1.26756|
006514  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006518  e2811003          ADD      r1,r1,#3
00651c  e0800201          ADD      r0,r0,r1,LSL #4
006520  e5901008          LDR      r1,[r0,#8]
006524  e51f0cac          LDR      r0,|L1.22656|
006528  e59f2354          LDR      r2,|L1.26756|
00652c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006530  e2822003          ADD      r2,r2,#3
006534  e0800202          ADD      r0,r0,r2,LSL #4
006538  e5801008          STR      r1,[r0,#8]
;;;3440       u32MinMaxValues_old[u32NeedleNumber+3][3] = u32MinMaxValues[u32NeedleNumber+3][3];
00653c  e51f0cc8          LDR      r0,|L1.22652|
006540  e59f133c          LDR      r1,|L1.26756|
006544  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006548  e2811003          ADD      r1,r1,#3
00654c  e0800201          ADD      r0,r0,r1,LSL #4
006550  e590100c          LDR      r1,[r0,#0xc]
006554  e51f0cdc          LDR      r0,|L1.22656|
006558  e59f2324          LDR      r2,|L1.26756|
00655c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006560  e2822003          ADD      r2,r2,#3
006564  e0800202          ADD      r0,r0,r2,LSL #4
006568  e580100c          STR      r1,[r0,#0xc]
;;;3441       u32MinMaxValues_old[u32NeedleNumber+4][0] = u32MinMaxValues[u32NeedleNumber+4][0];
00656c  e51f0cf8          LDR      r0,|L1.22652|
006570  e59f130c          LDR      r1,|L1.26756|
006574  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006578  e2811004          ADD      r1,r1,#4
00657c  e7900201          LDR      r0,[r0,r1,LSL #4]
006580  e51f1d08          LDR      r1,|L1.22656|
006584  e59f22f8          LDR      r2,|L1.26756|
006588  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00658c  e2822004          ADD      r2,r2,#4
006590  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3442       u32MinMaxValues_old[u32NeedleNumber+4][1] = u32MinMaxValues[u32NeedleNumber+4][1];
006594  e51f0d20          LDR      r0,|L1.22652|
006598  e59f12e4          LDR      r1,|L1.26756|
00659c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0065a0  e2811004          ADD      r1,r1,#4
0065a4  e0800201          ADD      r0,r0,r1,LSL #4
0065a8  e5900004          LDR      r0,[r0,#4]
0065ac  e51f1d34          LDR      r1,|L1.22656|
0065b0  e59f22cc          LDR      r2,|L1.26756|
0065b4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0065b8  e2822004          ADD      r2,r2,#4
0065bc  e0811202          ADD      r1,r1,r2,LSL #4
0065c0  e5810004          STR      r0,[r1,#4]
;;;3443       u32MinMaxValues_old[u32NeedleNumber+4][2] = u32MinMaxValues[u32NeedleNumber+4][2];
0065c4  e51f0d50          LDR      r0,|L1.22652|
0065c8  e59f12b4          LDR      r1,|L1.26756|
0065cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0065d0  e2811004          ADD      r1,r1,#4
0065d4  e0800201          ADD      r0,r0,r1,LSL #4
0065d8  e5900008          LDR      r0,[r0,#8]
0065dc  e51f1d64          LDR      r1,|L1.22656|
0065e0  e59f229c          LDR      r2,|L1.26756|
0065e4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0065e8  e2822004          ADD      r2,r2,#4
0065ec  e0811202          ADD      r1,r1,r2,LSL #4
0065f0  e5810008          STR      r0,[r1,#8]
;;;3444       u32MinMaxValues_old[u32NeedleNumber+4][3] = u32MinMaxValues[u32NeedleNumber+4][3];
0065f4  e51f0d80          LDR      r0,|L1.22652|
0065f8  e59f1284          LDR      r1,|L1.26756|
0065fc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006600  e2811004          ADD      r1,r1,#4
006604  e0800201          ADD      r0,r0,r1,LSL #4
006608  e590000c          LDR      r0,[r0,#0xc]
00660c  e51f1d94          LDR      r1,|L1.22656|
006610  e59f226c          LDR      r2,|L1.26756|
006614  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006618  e2822004          ADD      r2,r2,#4
00661c  e0811202          ADD      r1,r1,r2,LSL #4
006620  e581000c          STR      r0,[r1,#0xc]
;;;3445   }
006624  e28dd0ac          ADD      sp,sp,#0xac
006628  e8bd8ff0          POP      {r4-r11,pc}
;;;3446   
                          ENDP

                  vGfBuffRotateNeedleTipandBaseFill PROC
;;;3449   
;;;3450   void vGfBuffRotateNeedleTipandBaseFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
00662c  e92d4fff          PUSH     {r0-r11,lr}
;;;3451                                          uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef)
;;;3452   {
006630  e24dd08c          SUB      sp,sp,#0x8c
006634  e1a05000          MOV      r5,r0
006638  e1a07002          MOV      r7,r2
00663c  e59d60c4          LDR      r6,[sp,#0xc4]
;;;3453       uint32_t        u32Div, u32Count;
;;;3454       blit_mem_st     stMemFill;
;;;3455       blit_OvrRgbP_st stParamFill;
;;;3456       rot_mem_part_st stMemTip;
;;;3457       rot_cfg_st      stParamTip;
;;;3458       rot_mem_part_st stMemBase;
;;;3459       rot_cfg_st      stParamBase;
;;;3460       uint8_t         u8SrcNoOfBytes, u8DstNoOfBytes;
;;;3461       float32_t       f32AngleLocal;
;;;3462       ga_en_e         eDraw;
;;;3463       
;;;3464       u8PreviousOperation = 0U;
006640  e3a00000          MOV      r0,#0
006644  e59f123c          LDR      r1,|L1.26760|
006648  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;3465   
;;;3466       f32AngleLocal = f32CheckAngle(f32Angle);
00664c  e59d0090          LDR      r0,[sp,#0x90]
006650  ebfffffe          BL       f32CheckAngle
006654  e58d0014          STR      r0,[sp,#0x14]
;;;3467   
;;;3468       /* fill settings */
;;;3469       stMemFill.u16DstWidth = pstDstImage->u16Width;
006658  e1d700b4          LDRH     r0,[r7,#4]
00665c  e1cd08b0          STRH     r0,[sp,#0x80]
;;;3470   
;;;3471       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
006660  e5d5000c          LDRB     r0,[r5,#0xc]
006664  e3500004          CMP      r0,#4
006668  1a000004          BNE      |L1.26240|
;;;3472       {
;;;3473           stParamTip.stRotCfg.eSrcColFmt  = GA_RGB16;
00666c  e3a00000          MOV      r0,#0
006670  e5cd0044          STRB     r0,[sp,#0x44]
;;;3474           stParamBase.stRotCfg.eSrcColFmt = GA_RGB16;
006674  e5cd0018          STRB     r0,[sp,#0x18]
;;;3475           u8SrcNoOfBytes                  = 2U;
006678  e3a09002          MOV      r9,#2
00667c  ea000003          B        |L1.26256|
                  |L1.26240|
;;;3476       }
;;;3477       else
;;;3478       {
;;;3479           stParamTip.stRotCfg.eSrcColFmt  = GA_RGBA32;
006680  e3a00001          MOV      r0,#1
006684  e5cd0044          STRB     r0,[sp,#0x44]
;;;3480           stParamBase.stRotCfg.eSrcColFmt = GA_RGBA32;
006688  e5cd0018          STRB     r0,[sp,#0x18]
;;;3481           u8SrcNoOfBytes                  = 4U;
00668c  e3a09004          MOV      r9,#4
                  |L1.26256|
;;;3482       }
;;;3483   
;;;3484       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
006690  e5d7000c          LDRB     r0,[r7,#0xc]
006694  e3500004          CMP      r0,#4
006698  1a000005          BNE      |L1.26292|
;;;3485       {
;;;3486           stParamTip.stRotCfg.eDstColFmt  = GA_RGB16;
00669c  e3a00000          MOV      r0,#0
0066a0  e5cd0045          STRB     r0,[sp,#0x45]
;;;3487           stParamBase.stRotCfg.eDstColFmt = GA_RGB16;
0066a4  e5cd0019          STRB     r0,[sp,#0x19]
;;;3488           u8DstNoOfBytes                  = 2U;
0066a8  e3a0a002          MOV      r10,#2
;;;3489           
;;;3490           stParamFill.eSrcFmt             = GA_RGB16;
0066ac  e5cd0074          STRB     r0,[sp,#0x74]
0066b0  ea000004          B        |L1.26312|
                  |L1.26292|
;;;3491       }
;;;3492       else
;;;3493       {
;;;3494           stParamTip.stRotCfg.eDstColFmt  = GA_RGBA32;
0066b4  e3a00001          MOV      r0,#1
0066b8  e5cd0045          STRB     r0,[sp,#0x45]
;;;3495           stParamBase.stRotCfg.eDstColFmt = GA_RGBA32;
0066bc  e5cd0019          STRB     r0,[sp,#0x19]
;;;3496           u8DstNoOfBytes                  = 4U;
0066c0  e3a0a004          MOV      r10,#4
;;;3497           
;;;3498           stParamFill.eSrcFmt             = GA_RGBA32;
0066c4  e5cd0074          STRB     r0,[sp,#0x74]
                  |L1.26312|
;;;3499       }
;;;3500   
;;;3501       stParamFill.eFadeMode    = stGastate.eFadeMode;
0066c8  e51f0e60          LDR      r0,|L1.22640|
0066cc  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
0066d0  e5cd0075          STRB     r0,[sp,#0x75]
;;;3502       stParamFill.u8FadingFctr = stGastate.u8FadingFctr;
0066d4  e51f0e6c          LDR      r0,|L1.22640|
0066d8  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0066dc  e5cd0077          STRB     r0,[sp,#0x77]
;;;3503       stParamFill.u32Color     = 0x0U;
0066e0  e3a00000          MOV      r0,#0
0066e4  e58d0070          STR      r0,[sp,#0x70]
;;;3504   
;;;3505       /* handle clip window fill */
;;;3506       stParamFill.eClipWndEn = stGastate.eClipWndEn;
0066e8  e51f0e80          LDR      r0,|L1.22640|
0066ec  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0066f0  e5cd0076          STRB     r0,[sp,#0x76]
;;;3507   
;;;3508       /* rotation settings tip */
;;;3509       stMemTip.u16SrcWidth     = pstSrcImage->u16Width;
0066f4  e1d510b4          LDRH     r1,[r5,#4]
0066f8  e1cd15be          STRH     r1,[sp,#0x5e]
;;;3510       stMemTip.u32DstAddr      = pstDstImage->u32Address;
0066fc  e5970000          LDR      r0,[r7,#0]
006700  e58d0068          STR      r0,[sp,#0x68]
;;;3511       stMemTip.u16DstImgWidth  = pstDstImage->u16Width;
006704  e1d710b4          LDRH     r1,[r7,#4]
006708  e1cd16bc          STRH     r1,[sp,#0x6c]
;;;3512       stMemTip.u16DstImgHeight = pstDstImage->u16Height;
00670c  e1d710b6          LDRH     r1,[r7,#6]
006710  e1cd16be          STRH     r1,[sp,#0x6e]
;;;3513       stMemTip.u16DotCnt       = pstDef->u16TipWidth;
006714  e1d610b4          LDRH     r1,[r6,#4]
006718  e1cd16b4          STRH     r1,[sp,#0x64]
;;;3514   
;;;3515       /* handle clip window rotate */
;;;3516       stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
00671c  e51f0eb4          LDR      r0,|L1.22640|
006720  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
006724  e5cd0046          STRB     r0,[sp,#0x46]
;;;3517       if (stParamTip.stRotCfg.eClipWndEn == GA_EN)
006728  e5dd0046          LDRB     r0,[sp,#0x46]
00672c  e3500001          CMP      r0,#1
006730  1a00000b          BNE      |L1.26468|
;;;3518       {
;;;3519           stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
006734  e51f0ecc          LDR      r0,|L1.22640|
006738  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00673c  e1cd04bc          STRH     r0,[sp,#0x4c]
;;;3520           stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
006740  e51f0ed8          LDR      r0,|L1.22640|
006744  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
006748  e1cd04be          STRH     r0,[sp,#0x4e]
;;;3521           stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
00674c  e51f0ee4          LDR      r0,|L1.22640|
006750  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
006754  e1cd05b0          STRH     r0,[sp,#0x50]
;;;3522           stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
006758  e51f0ef0          LDR      r0,|L1.22640|
00675c  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
006760  e1cd05b2          STRH     r0,[sp,#0x52]
                  |L1.26468|
;;;3523       }
;;;3524   
;;;3525       stParamTip.stRotCfg.eFilterEn     = stGastate.eFilterEn;
006764  e51f0efc          LDR      r0,|L1.22640|
006768  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00676c  e5cd0047          STRB     r0,[sp,#0x47]
;;;3526       stParamTip.i16RotCentX            = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*((pstSrcImage->u16Width >> 1U) - (pstDef->u16TipWidth >> 1U));
006770  e1d500b4          LDRH     r0,[r5,#4]
006774  e1a000c0          ASR      r0,r0,#1
006778  e1d610b4          LDRH     r1,[r6,#4]
00677c  e04000c1          SUB      r0,r0,r1,ASR #1
006780  e1d510f8          LDRSH    r1,[r5,#8]
006784  e51f2f14          LDR      r2,|L1.22648|
006788  e5922000          LDR      r2,[r2,#0]  ; u32SubResCPos
00678c  e2622011          RSB      r2,r2,#0x11
006790  e0601092          MLS      r0,r2,r0,r1
006794  e6bf1070          SXTH     r1,r0
006798  e1cd15b4          STRH     r1,[sp,#0x54]
;;;3527       stParamTip.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
00679c  e51f1f2c          LDR      r1,|L1.22648|
0067a0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
0067a4  e2610011          RSB      r0,r1,#0x11
0067a8  ebfffffe          BL       __aeabi_ui2f
0067ac  e58d000c          STR      r0,[sp,#0xc]
0067b0  e1d500f8          LDRSH    r0,[r5,#8]
0067b4  ebfffffe          BL       __aeabi_i2f
0067b8  e51f1f3c          LDR      r1,|L1.22660|
0067bc  e58d0004          STR      r0,[sp,#4]
0067c0  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0067c4  e2610011          RSB      r0,r1,#0x11
0067c8  ebfffffe          BL       __aeabi_ui2f
0067cc  e58d0000          STR      r0,[sp,#0]
0067d0  e59d1004          LDR      r1,[sp,#4]
0067d4  ebfffffe          BL       __aeabi_fmul
0067d8  e58d0008          STR      r0,[sp,#8]
0067dc  e59d100c          LDR      r1,[sp,#0xc]
0067e0  ebfffffe          BL       __aeabi_fdiv
0067e4  e58d0010          STR      r0,[sp,#0x10]
0067e8  ebfffffe          BL       __aeabi_f2uiz
0067ec  e59d1098          LDR      r1,[sp,#0x98]
0067f0  e0800001          ADD      r0,r0,r1
0067f4  e6bf1070          SXTH     r1,r0
0067f8  e1cd15b8          STRH     r1,[sp,#0x58]
;;;3528       stParamTip.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
0067fc  e51f1f8c          LDR      r1,|L1.22648|
006800  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
006804  e2610011          RSB      r0,r1,#0x11
006808  ebfffffe          BL       __aeabi_ui2f
00680c  e58d000c          STR      r0,[sp,#0xc]
006810  e1d500fa          LDRSH    r0,[r5,#0xa]
006814  ebfffffe          BL       __aeabi_i2f
006818  e51f1f9c          LDR      r1,|L1.22660|
00681c  e58d0004          STR      r0,[sp,#4]
006820  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
006824  e2610011          RSB      r0,r1,#0x11
006828  ebfffffe          BL       __aeabi_ui2f
00682c  e58d0000          STR      r0,[sp,#0]
006830  e59d1004          LDR      r1,[sp,#4]
006834  ebfffffe          BL       __aeabi_fmul
006838  e58d0008          STR      r0,[sp,#8]
00683c  e59d100c          LDR      r1,[sp,#0xc]
006840  ebfffffe          BL       __aeabi_fdiv
006844  e58d0010          STR      r0,[sp,#0x10]
006848  ebfffffe          BL       __aeabi_f2uiz
00684c  e59d10c0          LDR      r1,[sp,#0xc0]
006850  e0800001          ADD      r0,r0,r1
006854  e6bf1070          SXTH     r1,r0
006858  e1cd15ba          STRH     r1,[sp,#0x5a]
;;;3529       stParamTip.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00685c  e51f0ff4          LDR      r0,|L1.22640|
006860  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
006864  e5cd0049          STRB     r0,[sp,#0x49]
;;;3530       stParamTip.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
006868  e59f001c          LDR      r0,|L1.26764|
00686c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
006870  e5cd004a          STRB     r0,[sp,#0x4a]
;;;3531   
;;;3532       /* rotation settings base */
;;;3533       stMemBase.u16SrcWidth     = pstSrcImage->u16Width;
006874  e1d510b4          LDRH     r1,[r5,#4]
006878  e1cd13b2          STRH     r1,[sp,#0x32]
;;;3534       stMemBase.u32DstAddr      = pstDstImage->u32Address;
00687c  ea000003          B        |L1.26768|
                  |L1.26752|
                          DCD      u32MinMaxValues_old_old
                  |L1.26756|
                          DCD      u32NeedleNumber
                  |L1.26760|
                          DCD      u8PreviousOperation
                  |L1.26764|
                          DCD      stGastate
                  |L1.26768|
006890  e5970000          LDR      r0,[r7,#0]
006894  e58d003c          STR      r0,[sp,#0x3c]
;;;3535       stMemBase.u16DstImgWidth  = pstDstImage->u16Width;
006898  e1d710b4          LDRH     r1,[r7,#4]
00689c  e1cd14b0          STRH     r1,[sp,#0x40]
;;;3536   
;;;3537       stMemBase.u16DstImgHeight = pstDstImage->u16Height;
0068a0  e1d710b6          LDRH     r1,[r7,#6]
0068a4  e1cd14b2          STRH     r1,[sp,#0x42]
;;;3538       stMemBase.u16DotCnt       = pstSrcImage->u16Width >> 1U;
0068a8  e1d500b4          LDRH     r0,[r5,#4]
0068ac  e1a010c0          ASR      r1,r0,#1
0068b0  e1cd13b8          STRH     r1,[sp,#0x38]
;;;3539   
;;;3540       /* handle clip window rotate */
;;;3541       stParamBase.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
0068b4  e51f0030          LDR      r0,|L1.26764|
0068b8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0068bc  e5cd001a          STRB     r0,[sp,#0x1a]
;;;3542       if (stParamBase.stRotCfg.eClipWndEn == GA_EN)
0068c0  e5dd001a          LDRB     r0,[sp,#0x1a]
0068c4  e3500001          CMP      r0,#1
0068c8  1a00000b          BNE      |L1.26876|
;;;3543       {
;;;3544           stParamBase.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0068cc  e51f0048          LDR      r0,|L1.26764|
0068d0  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0068d4  e1cd02b0          STRH     r0,[sp,#0x20]
;;;3545           stParamBase.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0068d8  e51f0054          LDR      r0,|L1.26764|
0068dc  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0068e0  e1cd02b2          STRH     r0,[sp,#0x22]
;;;3546           stParamBase.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0068e4  e51f0060          LDR      r0,|L1.26764|
0068e8  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0068ec  e1cd02b4          STRH     r0,[sp,#0x24]
;;;3547           stParamBase.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0068f0  e51f006c          LDR      r0,|L1.26764|
0068f4  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0068f8  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.26876|
;;;3548       }
;;;3549   
;;;3550       stParamBase.stRotCfg.eFilterEn     = stGastate.eFilterEn;
0068fc  e51f0078          LDR      r0,|L1.26764|
006900  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
006904  e5cd001b          STRB     r0,[sp,#0x1b]
;;;3551       stParamBase.i16RotCentY            = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*pstDef->u16TipHeight;
006908  e1d510fa          LDRSH    r1,[r5,#0xa]
00690c  e59f0f9c          LDR      r0,|L1.30896|
006910  e5900000          LDR      r0,[r0,#0]  ; u32SubResCPos
006914  e2600011          RSB      r0,r0,#0x11
006918  e1d620b2          LDRH     r2,[r6,#2]
00691c  e0601290          MLS      r0,r0,r2,r1
006920  e6bf1070          SXTH     r1,r0
006924  e1cd12ba          STRH     r1,[sp,#0x2a]
;;;3552       stParamBase.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
006928  e59f1f80          LDR      r1,|L1.30896|
00692c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
006930  e2610011          RSB      r0,r1,#0x11
006934  ebfffffe          BL       __aeabi_ui2f
006938  e58d000c          STR      r0,[sp,#0xc]
00693c  e1d500f8          LDRSH    r0,[r5,#8]
006940  ebfffffe          BL       __aeabi_i2f
006944  e59f1f68          LDR      r1,|L1.30900|
006948  e58d0004          STR      r0,[sp,#4]
00694c  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
006950  e2610011          RSB      r0,r1,#0x11
006954  ebfffffe          BL       __aeabi_ui2f
006958  e58d0000          STR      r0,[sp,#0]
00695c  e59d1004          LDR      r1,[sp,#4]
006960  ebfffffe          BL       __aeabi_fmul
006964  e58d0008          STR      r0,[sp,#8]
006968  e59d100c          LDR      r1,[sp,#0xc]
00696c  ebfffffe          BL       __aeabi_fdiv
006970  e58d0010          STR      r0,[sp,#0x10]
006974  ebfffffe          BL       __aeabi_f2uiz
006978  e59d1098          LDR      r1,[sp,#0x98]
00697c  e0800001          ADD      r0,r0,r1
006980  e6bf1070          SXTH     r1,r0
006984  e1cd12bc          STRH     r1,[sp,#0x2c]
;;;3553       stParamBase.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
006988  e59f1f20          LDR      r1,|L1.30896|
00698c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
006990  e2610011          RSB      r0,r1,#0x11
006994  ebfffffe          BL       __aeabi_ui2f
006998  e58d000c          STR      r0,[sp,#0xc]
00699c  e1d500fa          LDRSH    r0,[r5,#0xa]
0069a0  ebfffffe          BL       __aeabi_i2f
0069a4  e59f1f08          LDR      r1,|L1.30900|
0069a8  e58d0004          STR      r0,[sp,#4]
0069ac  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
0069b0  e2610011          RSB      r0,r1,#0x11
0069b4  ebfffffe          BL       __aeabi_ui2f
0069b8  e58d0000          STR      r0,[sp,#0]
0069bc  e59d1004          LDR      r1,[sp,#4]
0069c0  ebfffffe          BL       __aeabi_fmul
0069c4  e58d0008          STR      r0,[sp,#8]
0069c8  e59d100c          LDR      r1,[sp,#0xc]
0069cc  ebfffffe          BL       __aeabi_fdiv
0069d0  e58d0010          STR      r0,[sp,#0x10]
0069d4  ebfffffe          BL       __aeabi_f2uiz
0069d8  e59d10c0          LDR      r1,[sp,#0xc0]
0069dc  e0800001          ADD      r0,r0,r1
0069e0  e6bf1070          SXTH     r1,r0
0069e4  e1cd12be          STRH     r1,[sp,#0x2e]
;;;3554       stParamBase.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
0069e8  e51f0164          LDR      r0,|L1.26764|
0069ec  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0069f0  e5cd001d          STRB     r0,[sp,#0x1d]
;;;3555       stParamBase.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
0069f4  e51f0170          LDR      r0,|L1.26764|
0069f8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0069fc  e5cd001e          STRB     r0,[sp,#0x1e]
;;;3556                     
;;;3557       u32Div = pstDef->u16TipHeight/pstDef->u16BlockHeight;
006a00  e1d610b0          LDRH     r1,[r6,#0]
006a04  e1d600b2          LDRH     r0,[r6,#2]
006a08  ebfffffe          BL       __aeabi_idiv
006a0c  e1a08000          MOV      r8,r0
;;;3558   
;;;3559       /* restore old background of tip */
;;;3560       for (u32Count=0; u32Count<u32Div; u32Count++)
006a10  e3a04000          MOV      r4,#0
006a14  ea00004c          B        |L1.27468|
                  |L1.27160|
;;;3561       {
;;;3562           stMemFill.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
006a18  e51f019c          LDR      r0,|L1.26756|
006a1c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006a20  e0800004          ADD      r0,r0,r4
006a24  e51f11ac          LDR      r1,|L1.26752|
006a28  e0810200          ADD      r0,r1,r0,LSL #4
006a2c  e1d000b8          LDRH     r0,[r0,#8]
006a30  e51f11b4          LDR      r1,|L1.26756|
006a34  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006a38  e0811004          ADD      r1,r1,r4
006a3c  e51f21c4          LDR      r2,|L1.26752|
006a40  e7921201          LDR      r1,[r2,r1,LSL #4]
006a44  e0400001          SUB      r0,r0,r1
006a48  e6ff1070          UXTH     r1,r0
006a4c  e1cd18b8          STRH     r1,[sp,#0x88]
;;;3563           stMemFill.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1];
006a50  e51f01d4          LDR      r0,|L1.26756|
006a54  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006a58  e0800004          ADD      r0,r0,r4
006a5c  e2821000          ADD      r1,r2,#0
006a60  e0810200          ADD      r0,r1,r0,LSL #4
006a64  e1d000bc          LDRH     r0,[r0,#0xc]
006a68  e51f11ec          LDR      r1,|L1.26756|
006a6c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006a70  e0811004          ADD      r1,r1,r4
006a74  e0821201          ADD      r1,r2,r1,LSL #4
006a78  e1d110b4          LDRH     r1,[r1,#4]
006a7c  e0400001          SUB      r0,r0,r1
006a80  e6ff1070          UXTH     r1,r0
006a84  e1cd18ba          STRH     r1,[sp,#0x8a]
;;;3564           /* handle clip window fill */
;;;3565           eDraw = eHandleClipWindowBlit(pstDstImage, stMemFill.u16DotCnt, stMemFill.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]);
006a88  e51f020c          LDR      r0,|L1.26756|
006a8c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006a90  e0800004          ADD      r0,r0,r4
006a94  e2821000          ADD      r1,r2,#0
006a98  e0810200          ADD      r0,r1,r0,LSL #4
006a9c  e5900004          LDR      r0,[r0,#4]
006aa0  e51f1224          LDR      r1,|L1.26756|
006aa4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006aa8  e0811004          ADD      r1,r1,r4
006aac  e7921201          LDR      r1,[r2,r1,LSL #4]
006ab0  e58d0004          STR      r0,[sp,#4]
006ab4  e51f0230          LDR      r0,|L1.26764|
006ab8  e58d1000          STR      r1,[sp,#0]
006abc  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
006ac0  e1dd28ba          LDRH     r2,[sp,#0x8a]
006ac4  e1dd18b8          LDRH     r1,[sp,#0x88]
006ac8  e1a00007          MOV      r0,r7
006acc  ebfffffe          BL       eHandleClipWindowBlit
006ad0  e1a0b000          MOV      r11,r0
;;;3566           if(eDraw == GA_EN)
006ad4  e35b0001          CMP      r11,#1
006ad8  1a00001a          BNE      |L1.27464|
;;;3567           {
;;;3568               stParamFill.eClipWndEn = eDraw;
006adc  e5cdb076          STRB     r11,[sp,#0x76]
;;;3569               stMemFill.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
006ae0  e5970000          LDR      r0,[r7,#0]
006ae4  e1d710b4          LDRH     r1,[r7,#4]
006ae8  e0010a91          MUL      r1,r1,r10
006aec  e51f2270          LDR      r2,|L1.26756|
006af0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006af4  e0822004          ADD      r2,r2,r4
006af8  e51f3280          LDR      r3,|L1.26752|
006afc  e0832202          ADD      r2,r3,r2,LSL #4
006b00  e5922004          LDR      r2,[r2,#4]
006b04  e0200291          MLA      r0,r1,r2,r0
006b08  e51f128c          LDR      r1,|L1.26756|
006b0c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006b10  e0811004          ADD      r1,r1,r4
006b14  e2832000          ADD      r2,r3,#0
006b18  e7921201          LDR      r1,[r2,r1,LSL #4]
006b1c  e020019a          MLA      r0,r10,r1,r0
006b20  e58d0084          STR      r0,[sp,#0x84]
;;;3570               vBlit_OverwriteFillRGB(&stMemFill, &stParamFill, pstWriteList);
006b24  e59f0d8c          LDR      r0,|L1.30904|
006b28  e28d1070          ADD      r1,sp,#0x70
006b2c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
006b30  e28d0078          ADD      r0,sp,#0x78
006b34  ebfffffe          BL       vBlit_OverwriteFillRGB
;;;3571               vGfListExecute();
006b38  ebfffffe          BL       vGfListExecute
;;;3572               stParamFill.eClipWndEn = stGastate.eClipWndEn;
006b3c  e51f02b8          LDR      r0,|L1.26764|
006b40  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
006b44  e5cd0076          STRB     r0,[sp,#0x76]
                  |L1.27464|
006b48  e2844001          ADD      r4,r4,#1              ;3560
                  |L1.27468|
006b4c  e1540008          CMP      r4,r8                 ;3560
006b50  3affffb0          BCC      |L1.27160|
;;;3573           }
;;;3574       }
;;;3575   
;;;3576       if ((u32Div*pstDef->u16BlockHeight) != pstDef->u16TipHeight)
006b54  e1d600b0          LDRH     r0,[r6,#0]
006b58  e0000890          MUL      r0,r0,r8
006b5c  e1d610b2          LDRH     r1,[r6,#2]
006b60  e1500001          CMP      r0,r1
006b64  0a00004d          BEQ      |L1.27808|
;;;3577       {
;;;3578           
;;;3579           stMemFill.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+3][2] - u32MinMaxValues_old_old[u32NeedleNumber+3][0];
006b68  e51f02f0          LDR      r0,|L1.26752|
006b6c  e51f12f0          LDR      r1,|L1.26756|
006b70  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006b74  e2811003          ADD      r1,r1,#3
006b78  e0800201          ADD      r0,r0,r1,LSL #4
006b7c  e1d010b8          LDRH     r1,[r0,#8]
006b80  e51f0308          LDR      r0,|L1.26752|
006b84  e51f2308          LDR      r2,|L1.26756|
006b88  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006b8c  e2822003          ADD      r2,r2,#3
006b90  e7900202          LDR      r0,[r0,r2,LSL #4]
006b94  e0410000          SUB      r0,r1,r0
006b98  e6ff1070          UXTH     r1,r0
006b9c  e1cd18b8          STRH     r1,[sp,#0x88]
;;;3580           stMemFill.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+3][3] - u32MinMaxValues_old_old[u32NeedleNumber+3][1];
006ba0  e51f0328          LDR      r0,|L1.26752|
006ba4  e51f1328          LDR      r1,|L1.26756|
006ba8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006bac  e2811003          ADD      r1,r1,#3
006bb0  e0800201          ADD      r0,r0,r1,LSL #4
006bb4  e1d000bc          LDRH     r0,[r0,#0xc]
006bb8  e51f1340          LDR      r1,|L1.26752|
006bbc  e51f2340          LDR      r2,|L1.26756|
006bc0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006bc4  e2822003          ADD      r2,r2,#3
006bc8  e0811202          ADD      r1,r1,r2,LSL #4
006bcc  e1d110b4          LDRH     r1,[r1,#4]
006bd0  e0400001          SUB      r0,r0,r1
006bd4  e6ff1070          UXTH     r1,r0
006bd8  e1cd18ba          STRH     r1,[sp,#0x8a]
;;;3581           /* handle clip window fill */
;;;3582           eDraw = eHandleClipWindowBlit(pstDstImage, stMemFill.u16DotCnt, stMemFill.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+3][0], u32MinMaxValues_old_old[u32NeedleNumber+3][1]);
006bdc  e51f0364          LDR      r0,|L1.26752|
006be0  e51f1364          LDR      r1,|L1.26756|
006be4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006be8  e2811003          ADD      r1,r1,#3
006bec  e0800201          ADD      r0,r0,r1,LSL #4
006bf0  e5900004          LDR      r0,[r0,#4]
006bf4  e51f137c          LDR      r1,|L1.26752|
006bf8  e51f237c          LDR      r2,|L1.26756|
006bfc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006c00  e2822003          ADD      r2,r2,#3
006c04  e7911202          LDR      r1,[r1,r2,LSL #4]
006c08  e58d0004          STR      r0,[sp,#4]
006c0c  e51f0388          LDR      r0,|L1.26764|
006c10  e58d1000          STR      r1,[sp,#0]
006c14  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
006c18  e1dd28ba          LDRH     r2,[sp,#0x8a]
006c1c  e1dd18b8          LDRH     r1,[sp,#0x88]
006c20  e1a00007          MOV      r0,r7
006c24  ebfffffe          BL       eHandleClipWindowBlit
006c28  e1a0b000          MOV      r11,r0
;;;3583           if(eDraw == GA_EN)
006c2c  e35b0001          CMP      r11,#1
006c30  1a00001a          BNE      |L1.27808|
;;;3584           {
;;;3585               stParamFill.eClipWndEn = eDraw;
006c34  e5cdb076          STRB     r11,[sp,#0x76]
;;;3586               stMemFill.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+3][0];
006c38  e5971000          LDR      r1,[r7,#0]
006c3c  e1d700b4          LDRH     r0,[r7,#4]
006c40  e0000a90          MUL      r0,r0,r10
006c44  e51f23cc          LDR      r2,|L1.26752|
006c48  e51f33cc          LDR      r3,|L1.26756|
006c4c  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
006c50  e2833003          ADD      r3,r3,#3
006c54  e0822203          ADD      r2,r2,r3,LSL #4
006c58  e5922004          LDR      r2,[r2,#4]
006c5c  e0201290          MLA      r0,r0,r2,r1
006c60  e51f13e8          LDR      r1,|L1.26752|
006c64  e51f23e8          LDR      r2,|L1.26756|
006c68  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006c6c  e2822003          ADD      r2,r2,#3
006c70  e7911202          LDR      r1,[r1,r2,LSL #4]
006c74  e020019a          MLA      r0,r10,r1,r0
006c78  e58d0084          STR      r0,[sp,#0x84]
;;;3587               vBlit_OverwriteFillRGB(&stMemFill, &stParamFill, pstWriteList);
006c7c  e59f0c34          LDR      r0,|L1.30904|
006c80  e28d1070          ADD      r1,sp,#0x70
006c84  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
006c88  e28d0078          ADD      r0,sp,#0x78
006c8c  ebfffffe          BL       vBlit_OverwriteFillRGB
;;;3588               vGfListExecute();
006c90  ebfffffe          BL       vGfListExecute
;;;3589               stParamFill.eClipWndEn = stGastate.eClipWndEn;
006c94  e51f0410          LDR      r0,|L1.26764|
006c98  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
006c9c  e5cd0076          STRB     r0,[sp,#0x76]
                  |L1.27808|
;;;3590           }
;;;3591       }
;;;3592   
;;;3593       /* restore old background of base */
;;;3594       for (u32Count=0; u32Count<2; u32Count++)
006ca0  e3a04000          MOV      r4,#0
006ca4  ea00004c          B        |L1.28124|
                  |L1.27816|
;;;3595       {
;;;3596           stMemFill.u16DotCnt  = u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0];
006ca8  e51f042c          LDR      r0,|L1.26756|
006cac  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006cb0  e0800004          ADD      r0,r0,r4
006cb4  e59f1c00          LDR      r1,|L1.30908|
006cb8  e0810200          ADD      r0,r1,r0,LSL #4
006cbc  e1d000b8          LDRH     r0,[r0,#8]
006cc0  e51f1444          LDR      r1,|L1.26756|
006cc4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006cc8  e0811004          ADD      r1,r1,r4
006ccc  e59f2be8          LDR      r2,|L1.30908|
006cd0  e7921201          LDR      r1,[r2,r1,LSL #4]
006cd4  e0400001          SUB      r0,r0,r1
006cd8  e6ff1070          UXTH     r1,r0
006cdc  e1cd18b8          STRH     r1,[sp,#0x88]
;;;3597           stMemFill.u16LineCnt = u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1];
006ce0  e51f0464          LDR      r0,|L1.26756|
006ce4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006ce8  e0800004          ADD      r0,r0,r4
006cec  e2821000          ADD      r1,r2,#0
006cf0  e0810200          ADD      r0,r1,r0,LSL #4
006cf4  e1d000bc          LDRH     r0,[r0,#0xc]
006cf8  e51f147c          LDR      r1,|L1.26756|
006cfc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006d00  e0811004          ADD      r1,r1,r4
006d04  e0821201          ADD      r1,r2,r1,LSL #4
006d08  e1d110b4          LDRH     r1,[r1,#4]
006d0c  e0400001          SUB      r0,r0,r1
006d10  e6ff1070          UXTH     r1,r0
006d14  e1cd18ba          STRH     r1,[sp,#0x8a]
;;;3598           /* handle clip window fill */
;;;3599           eDraw = eHandleClipWindowBlit(pstDstImage, stMemFill.u16DotCnt, stMemFill.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1]);
006d18  e51f049c          LDR      r0,|L1.26756|
006d1c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
006d20  e0800004          ADD      r0,r0,r4
006d24  e2821000          ADD      r1,r2,#0
006d28  e0810200          ADD      r0,r1,r0,LSL #4
006d2c  e5900004          LDR      r0,[r0,#4]
006d30  e51f14b4          LDR      r1,|L1.26756|
006d34  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006d38  e0811004          ADD      r1,r1,r4
006d3c  e7921201          LDR      r1,[r2,r1,LSL #4]
006d40  e58d0004          STR      r0,[sp,#4]
006d44  e51f04c0          LDR      r0,|L1.26764|
006d48  e58d1000          STR      r1,[sp,#0]
006d4c  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
006d50  e1dd28ba          LDRH     r2,[sp,#0x8a]
006d54  e1dd18b8          LDRH     r1,[sp,#0x88]
006d58  e1a00007          MOV      r0,r7
006d5c  ebfffffe          BL       eHandleClipWindowBlit
006d60  e1a0b000          MOV      r11,r0
;;;3600           if(eDraw == GA_EN)
006d64  e35b0001          CMP      r11,#1
006d68  1a00001a          BNE      |L1.28120|
;;;3601           {
;;;3602               stParamFill.eClipWndEn = eDraw;
006d6c  e5cdb076          STRB     r11,[sp,#0x76]
;;;3603               stMemFill.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0];
006d70  e5970000          LDR      r0,[r7,#0]
006d74  e1d710b4          LDRH     r1,[r7,#4]
006d78  e0010a91          MUL      r1,r1,r10
006d7c  e51f2500          LDR      r2,|L1.26756|
006d80  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
006d84  e0822004          ADD      r2,r2,r4
006d88  e59f3b2c          LDR      r3,|L1.30908|
006d8c  e0832202          ADD      r2,r3,r2,LSL #4
006d90  e5922004          LDR      r2,[r2,#4]
006d94  e0200291          MLA      r0,r1,r2,r0
006d98  e51f151c          LDR      r1,|L1.26756|
006d9c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006da0  e0811004          ADD      r1,r1,r4
006da4  e2832000          ADD      r2,r3,#0
006da8  e7921201          LDR      r1,[r2,r1,LSL #4]
006dac  e020019a          MLA      r0,r10,r1,r0
006db0  e58d0084          STR      r0,[sp,#0x84]
;;;3604               vBlit_OverwriteFillRGB(&stMemFill, &stParamFill, pstWriteList);
006db4  e59f0afc          LDR      r0,|L1.30904|
006db8  e28d1070          ADD      r1,sp,#0x70
006dbc  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
006dc0  e28d0078          ADD      r0,sp,#0x78
006dc4  ebfffffe          BL       vBlit_OverwriteFillRGB
;;;3605               vGfListExecute();
006dc8  ebfffffe          BL       vGfListExecute
;;;3606               stParamFill.eClipWndEn = stGastate.eClipWndEn;;
006dcc  e51f0548          LDR      r0,|L1.26764|
006dd0  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
006dd4  e5cd0076          STRB     r0,[sp,#0x76]
                  |L1.28120|
006dd8  e2844001          ADD      r4,r4,#1              ;3594
                  |L1.28124|
006ddc  e3540002          CMP      r4,#2                 ;3594
006de0  3affffb0          BCC      |L1.27816|
;;;3607           }
;;;3608       }
;;;3609   
;;;3610       /* rotate needletip */
;;;3611       for (u32Count=0U; u32Count<u32Div; u32Count++)
006de4  e3a04000          MOV      r4,#0
006de8  ea000062          B        |L1.28536|
                  |L1.28140|
;;;3612       {
;;;3613           /* rotate needle tip */
;;;3614           stMemTip.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*((pstSrcImage->u16Width >> 1U) -(pstDef->u16TipWidth >> 1U)) + u8SrcNoOfBytes*u32Count*pstDef->u16BlockHeight*pstSrcImage->u16Width;
006dec  e1d500b4          LDRH     r0,[r5,#4]
006df0  e1a000c0          ASR      r0,r0,#1
006df4  e1d610b4          LDRH     r1,[r6,#4]
006df8  e04000c1          SUB      r0,r0,r1,ASR #1
006dfc  e5951000          LDR      r1,[r5,#0]
006e00  e0201099          MLA      r0,r9,r0,r1
006e04  e0010499          MUL      r1,r9,r4
006e08  e1d620b0          LDRH     r2,[r6,#0]
006e0c  e0010291          MUL      r1,r1,r2
006e10  e1d520b4          LDRH     r2,[r5,#4]
006e14  e0200291          MLA      r0,r1,r2,r0
006e18  e58d0060          STR      r0,[sp,#0x60]
;;;3615           stMemTip.u16SrcHeight  = pstDef->u16BlockHeight;
006e1c  e1d600b0          LDRH     r0,[r6,#0]
006e20  e1cd05bc          STRH     r0,[sp,#0x5c]
;;;3616           if((u32Count == u32Div - 1) && (u32Div*pstDef->u16BlockHeight) == pstDef->u16TipHeight)
006e24  e2480001          SUB      r0,r8,#1
006e28  e1500004          CMP      r0,r4
006e2c  1a000008          BNE      |L1.28244|
006e30  e1d600b0          LDRH     r0,[r6,#0]
006e34  e0000890          MUL      r0,r0,r8
006e38  e1d610b2          LDRH     r1,[r6,#2]
006e3c  e1500001          CMP      r0,r1
006e40  1a000003          BNE      |L1.28244|
;;;3617           {
;;;3618               /* Add 1 extra pixel so that the tip and base can overlap */
;;;3619               stMemTip.u16SrcHeight  = pstDef->u16BlockHeight + 1U;
006e44  e1d600b0          LDRH     r0,[r6,#0]
006e48  e2800001          ADD      r0,r0,#1
006e4c  e6ff0070          UXTH     r0,r0
006e50  e1cd05bc          STRH     r0,[sp,#0x5c]
                  |L1.28244|
;;;3620           }
;;;3621           stParamTip.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Count*pstDef->u16BlockHeight;
006e54  e1d500fa          LDRSH    r0,[r5,#0xa]
006e58  e59f1a50          LDR      r1,|L1.30896|
006e5c  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
006e60  e2611011          RSB      r1,r1,#0x11
006e64  e0010491          MUL      r1,r1,r4
006e68  e1d620b0          LDRH     r2,[r6,#0]
006e6c  e0600291          MLS      r0,r1,r2,r0
006e70  e6bf0070          SXTH     r0,r0
006e74  e1cd05b6          STRH     r0,[sp,#0x56]
;;;3622           /* Reinitializing Clip window and Destination Address */
;;;3623           stMemTip.u32DstAddr      = pstDstImage->u32Address;
006e78  e5970000          LDR      r0,[r7,#0]
006e7c  e58d0068          STR      r0,[sp,#0x68]
;;;3624           stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
006e80  e51f05fc          LDR      r0,|L1.26764|
006e84  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
006e88  e5cd0046          STRB     r0,[sp,#0x46]
;;;3625           if(stParamTip.stRotCfg.eClipWndEn == GA_EN)
006e8c  e5dd0046          LDRB     r0,[sp,#0x46]
006e90  e3500001          CMP      r0,#1
006e94  1a00000b          BNE      |L1.28360|
;;;3626           {
;;;3627               stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
006e98  e51f0614          LDR      r0,|L1.26764|
006e9c  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
006ea0  e1cd04bc          STRH     r0,[sp,#0x4c]
;;;3628               stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
006ea4  e51f0620          LDR      r0,|L1.26764|
006ea8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
006eac  e1cd04be          STRH     r0,[sp,#0x4e]
;;;3629               stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
006eb0  e51f062c          LDR      r0,|L1.26764|
006eb4  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
006eb8  e1cd05b0          STRH     r0,[sp,#0x50]
;;;3630               stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
006ebc  e51f0638          LDR      r0,|L1.26764|
006ec0  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
006ec4  e1cd05b2          STRH     r0,[sp,#0x52]
                  |L1.28360|
;;;3631           }
;;;3632           
;;;3633   #ifdef GA_USE_MATH_LIB
;;;3634           vRotLib_Rotate_Part(&stMemTip, &stParamTip, (float64_t)f32AngleLocal, pstWriteList);
006ec8  e59d0014          LDR      r0,[sp,#0x14]
006ecc  ebfffffe          BL       __aeabi_f2d
006ed0  e1cd00f8          STRD     r0,r1,[sp,#8]
006ed4  e59f09dc          LDR      r0,|L1.30904|
006ed8  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
006edc  e58d0000          STR      r0,[sp,#0]
006ee0  e1a03001          MOV      r3,r1
006ee4  e59d2008          LDR      r2,[sp,#8]
006ee8  e28d1044          ADD      r1,sp,#0x44
006eec  e28d005c          ADD      r0,sp,#0x5c
006ef0  ebfffffe          BL       vRotLib_Rotate_Part
;;;3635   #else
;;;3636           vRotLib_Rotate_Part(&stMemTip, &stParamTip, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;3637   #endif
;;;3638           vGfListExecute();
006ef4  ebfffffe          BL       vGfListExecute
;;;3639   
;;;3640           u32MinMaxValues[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
006ef8  ebfffffe          BL       u32GfGetMinXCoordinate
006efc  e2400001          SUB      r0,r0,#1
006f00  e51f1684          LDR      r1,|L1.26756|
006f04  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006f08  e0811004          ADD      r1,r1,r4
006f0c  e59f29ac          LDR      r2,|L1.30912|
006f10  e7820201          STR      r0,[r2,r1,LSL #4]
;;;3641           u32MinMaxValues[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
006f14  ebfffffe          BL       u32GfGetMinYCoordinate
006f18  e2400001          SUB      r0,r0,#1
006f1c  e51f16a0          LDR      r1,|L1.26756|
006f20  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006f24  e0811004          ADD      r1,r1,r4
006f28  e59f2990          LDR      r2,|L1.30912|
006f2c  e0821201          ADD      r1,r2,r1,LSL #4
006f30  e5810004          STR      r0,[r1,#4]
;;;3642           u32MinMaxValues[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
006f34  ebfffffe          BL       u32GfGetMaxXCoordinate
006f38  e2800001          ADD      r0,r0,#1
006f3c  e51f16c0          LDR      r1,|L1.26756|
006f40  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006f44  e0811004          ADD      r1,r1,r4
006f48  e59f2970          LDR      r2,|L1.30912|
006f4c  e0821201          ADD      r1,r2,r1,LSL #4
006f50  e5810008          STR      r0,[r1,#8]
;;;3643           u32MinMaxValues[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
006f54  ebfffffe          BL       u32GfGetMaxYCoordinate
006f58  e2800001          ADD      r0,r0,#1
006f5c  e51f16e0          LDR      r1,|L1.26756|
006f60  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
006f64  e0811004          ADD      r1,r1,r4
006f68  e59f2950          LDR      r2,|L1.30912|
006f6c  e0821201          ADD      r1,r2,r1,LSL #4
006f70  e581000c          STR      r0,[r1,#0xc]
006f74  e2844001          ADD      r4,r4,#1              ;3611
                  |L1.28536|
006f78  e1540008          CMP      r4,r8                 ;3611
006f7c  3affff9a          BCC      |L1.28140|
;;;3644       }
;;;3645   
;;;3646       /* rotate rest of tip */
;;;3647       if ((u32Div*pstDef->u16BlockHeight) != pstDef->u16TipHeight)
006f80  e1d600b0          LDRH     r0,[r6,#0]
006f84  e0000890          MUL      r0,r0,r8
006f88  e1d610b2          LDRH     r1,[r6,#2]
006f8c  e1500001          CMP      r0,r1
006f90  0a00005c          BEQ      |L1.28936|
;;;3648       {
;;;3649           /* rotate needle tip */
;;;3650           stMemTip.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*((pstSrcImage->u16Width >> 1U) -(pstDef->u16TipWidth >> 1U)) + u8SrcNoOfBytes*u32Div*pstDef->u16BlockHeight*pstSrcImage->u16Width;
006f94  e1d500b4          LDRH     r0,[r5,#4]
006f98  e1a000c0          ASR      r0,r0,#1
006f9c  e1d610b4          LDRH     r1,[r6,#4]
006fa0  e04000c1          SUB      r0,r0,r1,ASR #1
006fa4  e5951000          LDR      r1,[r5,#0]
006fa8  e0201099          MLA      r0,r9,r0,r1
006fac  e0010899          MUL      r1,r9,r8
006fb0  e1d620b0          LDRH     r2,[r6,#0]
006fb4  e0010291          MUL      r1,r1,r2
006fb8  e1d520b4          LDRH     r2,[r5,#4]
006fbc  e0200291          MLA      r0,r1,r2,r0
006fc0  e58d0060          STR      r0,[sp,#0x60]
;;;3651           /* Add 1 extra pixel so that the tip and base can overlap */
;;;3652           stMemTip.u16SrcHeight  = pstDef->u16TipHeight - u32Div*pstDef->u16BlockHeight + 1U;
006fc4  e1d600b2          LDRH     r0,[r6,#2]
006fc8  e1d610b0          LDRH     r1,[r6,#0]
006fcc  e0600198          MLS      r0,r8,r1,r0
006fd0  e2800001          ADD      r0,r0,#1
006fd4  e6ff1070          UXTH     r1,r0
006fd8  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;3653           stParamTip.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Div*pstDef->u16BlockHeight;
006fdc  e1d500fa          LDRSH    r0,[r5,#0xa]
006fe0  e59f18c8          LDR      r1,|L1.30896|
006fe4  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
006fe8  e2611011          RSB      r1,r1,#0x11
006fec  e0010891          MUL      r1,r1,r8
006ff0  e1d620b0          LDRH     r2,[r6,#0]
006ff4  e0600291          MLS      r0,r1,r2,r0
006ff8  e6bf1070          SXTH     r1,r0
006ffc  e1cd15b6          STRH     r1,[sp,#0x56]
;;;3654           /* Reinitializing Clip window and Destination Address */
;;;3655           stMemTip.u32DstAddr      = pstDstImage->u32Address;
007000  e5970000          LDR      r0,[r7,#0]
007004  e58d0068          STR      r0,[sp,#0x68]
;;;3656           stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
007008  e51f0784          LDR      r0,|L1.26764|
00700c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
007010  e5cd0046          STRB     r0,[sp,#0x46]
;;;3657           if(stParamTip.stRotCfg.eClipWndEn == GA_EN)
007014  e5dd0046          LDRB     r0,[sp,#0x46]
007018  e3500001          CMP      r0,#1
00701c  1a00000b          BNE      |L1.28752|
;;;3658           {
;;;3659               stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
007020  e51f079c          LDR      r0,|L1.26764|
007024  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
007028  e1cd04bc          STRH     r0,[sp,#0x4c]
;;;3660               stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
00702c  e51f07a8          LDR      r0,|L1.26764|
007030  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
007034  e1cd04be          STRH     r0,[sp,#0x4e]
;;;3661               stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
007038  e51f07b4          LDR      r0,|L1.26764|
00703c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
007040  e1cd05b0          STRH     r0,[sp,#0x50]
;;;3662               stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
007044  e51f07c0          LDR      r0,|L1.26764|
007048  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
00704c  e1cd05b2          STRH     r0,[sp,#0x52]
                  |L1.28752|
;;;3663           }
;;;3664   
;;;3665           if(stMemTip.u16SrcHeight > 0)
007050  e1dd05bc          LDRH     r0,[sp,#0x5c]
007054  e3500000          CMP      r0,#0
007058  da00000b          BLE      |L1.28812|
;;;3666           {
;;;3667   #ifdef GA_USE_MATH_LIB
;;;3668               vRotLib_Rotate_Part(&stMemTip, &stParamTip, (float64_t)f32AngleLocal, pstWriteList);
00705c  e59d0014          LDR      r0,[sp,#0x14]
007060  ebfffffe          BL       __aeabi_f2d
007064  e1cd00f8          STRD     r0,r1,[sp,#8]
007068  e59f0848          LDR      r0,|L1.30904|
00706c  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
007070  e58d0000          STR      r0,[sp,#0]
007074  e1a03001          MOV      r3,r1
007078  e59d2008          LDR      r2,[sp,#8]
00707c  e28d1044          ADD      r1,sp,#0x44
007080  e28d005c          ADD      r0,sp,#0x5c
007084  ebfffffe          BL       vRotLib_Rotate_Part
;;;3669   #else
;;;3670               vRotLib_Rotate_Part(&stMemTip, &stParamTip, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;3671   #endif
;;;3672               vGfListExecute();
007088  ebfffffe          BL       vGfListExecute
                  |L1.28812|
;;;3673           }
;;;3674   
;;;3675           u32MinMaxValues[u32NeedleNumber+3][0] = u32GfGetMinXCoordinate()-1U;
00708c  ebfffffe          BL       u32GfGetMinXCoordinate
007090  e2401001          SUB      r1,r0,#1
007094  e59f0824          LDR      r0,|L1.30912|
007098  e51f281c          LDR      r2,|L1.26756|
00709c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0070a0  e2822003          ADD      r2,r2,#3
0070a4  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3676           u32MinMaxValues[u32NeedleNumber+3][1] = u32GfGetMinYCoordinate()-1U;
0070a8  ebfffffe          BL       u32GfGetMinYCoordinate
0070ac  e2400001          SUB      r0,r0,#1
0070b0  e59f1808          LDR      r1,|L1.30912|
0070b4  e51f2838          LDR      r2,|L1.26756|
0070b8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0070bc  e2822003          ADD      r2,r2,#3
0070c0  e0811202          ADD      r1,r1,r2,LSL #4
0070c4  e5810004          STR      r0,[r1,#4]
;;;3677           u32MinMaxValues[u32NeedleNumber+3][2] = u32GfGetMaxXCoordinate()+1U;
0070c8  ebfffffe          BL       u32GfGetMaxXCoordinate
0070cc  e2800001          ADD      r0,r0,#1
0070d0  e59f17e8          LDR      r1,|L1.30912|
0070d4  e51f2858          LDR      r2,|L1.26756|
0070d8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0070dc  e2822003          ADD      r2,r2,#3
0070e0  e0811202          ADD      r1,r1,r2,LSL #4
0070e4  e5810008          STR      r0,[r1,#8]
;;;3678           u32MinMaxValues[u32NeedleNumber+3][3] = u32GfGetMaxYCoordinate()+1U;
0070e8  ebfffffe          BL       u32GfGetMaxYCoordinate
0070ec  e2801001          ADD      r1,r0,#1
0070f0  e59f07c8          LDR      r0,|L1.30912|
0070f4  e51f2878          LDR      r2,|L1.26756|
0070f8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0070fc  e2822003          ADD      r2,r2,#3
007100  e0800202          ADD      r0,r0,r2,LSL #4
007104  e580100c          STR      r1,[r0,#0xc]
                  |L1.28936|
;;;3679       }
;;;3680   
;;;3681       /* rotate needle base */
;;;3682       for (u32Count=0U; u32Count<2U; u32Count++)
007108  e3a04000          MOV      r4,#0
00710c  ea00005b          B        |L1.29312|
                  |L1.28944|
;;;3683       {
;;;3684           /* rotate needle */
;;;3685           stMemBase.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*pstSrcImage->u16Width*pstDef->u16TipHeight + u8SrcNoOfBytes*u32Count*(pstSrcImage->u16Width >> 1);
007110  e5950000          LDR      r0,[r5,#0]
007114  e1d510b4          LDRH     r1,[r5,#4]
007118  e0010991          MUL      r1,r1,r9
00711c  e1d620b2          LDRH     r2,[r6,#2]
007120  e0200291          MLA      r0,r1,r2,r0
007124  e0010499          MUL      r1,r9,r4
007128  e1d520b4          LDRH     r2,[r5,#4]
00712c  e1a020c2          ASR      r2,r2,#1
007130  e0200291          MLA      r0,r1,r2,r0
007134  e58d0034          STR      r0,[sp,#0x34]
;;;3686           stMemBase.u16SrcHeight  = pstSrcImage->u16Height - pstDef->u16TipHeight;
007138  e1d500b6          LDRH     r0,[r5,#6]
00713c  e1d610b2          LDRH     r1,[r6,#2]
007140  e0400001          SUB      r0,r0,r1
007144  e6ff1070          UXTH     r1,r0
007148  e1cd13b0          STRH     r1,[sp,#0x30]
;;;3687           stParamBase.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32Count*(pstSrcImage->u16Width >> 1U);
00714c  e1d500f8          LDRSH    r0,[r5,#8]
007150  e59f1758          LDR      r1,|L1.30896|
007154  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007158  e2611011          RSB      r1,r1,#0x11
00715c  e0010491          MUL      r1,r1,r4
007160  e1d520b4          LDRH     r2,[r5,#4]
007164  e1a020c2          ASR      r2,r2,#1
007168  e0600291          MLS      r0,r1,r2,r0
00716c  e6bf1070          SXTH     r1,r0
007170  e1cd12b8          STRH     r1,[sp,#0x28]
;;;3688           /* Reinitializing Clip window and Destination Address */
;;;3689           stMemBase.u32DstAddr      = pstDstImage->u32Address;
007174  e5970000          LDR      r0,[r7,#0]
007178  e58d003c          STR      r0,[sp,#0x3c]
;;;3690           stParamBase.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
00717c  e51f08f8          LDR      r0,|L1.26764|
007180  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
007184  e5cd001a          STRB     r0,[sp,#0x1a]
;;;3691           if(stParamBase.stRotCfg.eClipWndEn == GA_EN)
007188  e5dd001a          LDRB     r0,[sp,#0x1a]
00718c  e3500001          CMP      r0,#1
007190  1a00000b          BNE      |L1.29124|
;;;3692           {
;;;3693               stParamBase.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
007194  e51f0910          LDR      r0,|L1.26764|
007198  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00719c  e1cd02b0          STRH     r0,[sp,#0x20]
;;;3694               stParamBase.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0071a0  e51f091c          LDR      r0,|L1.26764|
0071a4  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0071a8  e1cd02b2          STRH     r0,[sp,#0x22]
;;;3695               stParamBase.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0071ac  e51f0928          LDR      r0,|L1.26764|
0071b0  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0071b4  e1cd02b4          STRH     r0,[sp,#0x24]
;;;3696               stParamBase.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0071b8  e51f0934          LDR      r0,|L1.26764|
0071bc  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0071c0  e1cd02b6          STRH     r0,[sp,#0x26]
                  |L1.29124|
;;;3697           }
;;;3698   
;;;3699           if(stMemBase.u16SrcHeight > 0)
0071c4  e1dd03b0          LDRH     r0,[sp,#0x30]
0071c8  e3500000          CMP      r0,#0
0071cc  da00000b          BLE      |L1.29184|
;;;3700           {
;;;3701   #ifdef GA_USE_MATH_LIB
;;;3702               vRotLib_Rotate_Part(&stMemBase, &stParamBase, (float64_t)f32AngleLocal, pstWriteList);
0071d0  e59d0014          LDR      r0,[sp,#0x14]
0071d4  ebfffffe          BL       __aeabi_f2d
0071d8  e1cd00f8          STRD     r0,r1,[sp,#8]
0071dc  e59f06d4          LDR      r0,|L1.30904|
0071e0  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
0071e4  e58d0000          STR      r0,[sp,#0]
0071e8  e1a03001          MOV      r3,r1
0071ec  e59d2008          LDR      r2,[sp,#8]
0071f0  e28d1018          ADD      r1,sp,#0x18
0071f4  e28d0030          ADD      r0,sp,#0x30
0071f8  ebfffffe          BL       vRotLib_Rotate_Part
;;;3703   #else
;;;3704               vRotLib_Rotate_Part(&stMemBase, &stParamBase, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;3705   #endif  
;;;3706               vGfListExecute();
0071fc  ebfffffe          BL       vGfListExecute
                  |L1.29184|
;;;3707           }
;;;3708    
;;;3709           u32MinMaxValuesBase[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
007200  ebfffffe          BL       u32GfGetMinXCoordinate
007204  e2400001          SUB      r0,r0,#1
007208  e51f198c          LDR      r1,|L1.26756|
00720c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007210  e0811004          ADD      r1,r1,r4
007214  e59f26a8          LDR      r2,|L1.30916|
007218  e7820201          STR      r0,[r2,r1,LSL #4]
;;;3710           u32MinMaxValuesBase[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
00721c  ebfffffe          BL       u32GfGetMinYCoordinate
007220  e2400001          SUB      r0,r0,#1
007224  e51f19a8          LDR      r1,|L1.26756|
007228  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00722c  e0811004          ADD      r1,r1,r4
007230  e59f268c          LDR      r2,|L1.30916|
007234  e0821201          ADD      r1,r2,r1,LSL #4
007238  e5810004          STR      r0,[r1,#4]
;;;3711           u32MinMaxValuesBase[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
00723c  ebfffffe          BL       u32GfGetMaxXCoordinate
007240  e2800001          ADD      r0,r0,#1
007244  e51f19c8          LDR      r1,|L1.26756|
007248  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00724c  e0811004          ADD      r1,r1,r4
007250  e59f266c          LDR      r2,|L1.30916|
007254  e0821201          ADD      r1,r2,r1,LSL #4
007258  e5810008          STR      r0,[r1,#8]
;;;3712           u32MinMaxValuesBase[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
00725c  ebfffffe          BL       u32GfGetMaxYCoordinate
007260  e2800001          ADD      r0,r0,#1
007264  e51f19e8          LDR      r1,|L1.26756|
007268  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00726c  e0811004          ADD      r1,r1,r4
007270  e59f264c          LDR      r2,|L1.30916|
007274  e0821201          ADD      r1,r2,r1,LSL #4
007278  e581000c          STR      r0,[r1,#0xc]
00727c  e2844001          ADD      r4,r4,#1              ;3682
                  |L1.29312|
007280  e3540002          CMP      r4,#2                 ;3682
007284  3affffa1          BCC      |L1.28944|
;;;3713       }
;;;3714       
;;;3715       u32MinMaxValues_old_old[u32NeedleNumber+0][0] = u32MinMaxValues_old[u32NeedleNumber+0][0];
007288  e59f1638          LDR      r1,|L1.30920|
00728c  e51f0a10          LDR      r0,|L1.26756|
007290  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007294  e7911200          LDR      r1,[r1,r0,LSL #4]
007298  e51f2a20          LDR      r2,|L1.26752|
00729c  e51f0a20          LDR      r0,|L1.26756|
0072a0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072a4  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3716       u32MinMaxValues_old_old[u32NeedleNumber+0][1] = u32MinMaxValues_old[u32NeedleNumber+0][1];
0072a8  e59f1618          LDR      r1,|L1.30920|
0072ac  e51f0a30          LDR      r0,|L1.26756|
0072b0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072b4  e0810200          ADD      r0,r1,r0,LSL #4
0072b8  e5901004          LDR      r1,[r0,#4]
0072bc  e51f0a40          LDR      r0,|L1.26756|
0072c0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072c4  e0820200          ADD      r0,r2,r0,LSL #4
0072c8  e5801004          STR      r1,[r0,#4]
;;;3717       u32MinMaxValues_old_old[u32NeedleNumber+0][2] = u32MinMaxValues_old[u32NeedleNumber+0][2];
0072cc  e59f15f4          LDR      r1,|L1.30920|
0072d0  e51f0a54          LDR      r0,|L1.26756|
0072d4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072d8  e0810200          ADD      r0,r1,r0,LSL #4
0072dc  e5901008          LDR      r1,[r0,#8]
0072e0  e51f0a64          LDR      r0,|L1.26756|
0072e4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072e8  e0820200          ADD      r0,r2,r0,LSL #4
0072ec  e5801008          STR      r1,[r0,#8]
;;;3718       u32MinMaxValues_old_old[u32NeedleNumber+0][3] = u32MinMaxValues_old[u32NeedleNumber+0][3];
0072f0  e59f15d0          LDR      r1,|L1.30920|
0072f4  e51f0a78          LDR      r0,|L1.26756|
0072f8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0072fc  e0810200          ADD      r0,r1,r0,LSL #4
007300  e590100c          LDR      r1,[r0,#0xc]
007304  e51f0a88          LDR      r0,|L1.26756|
007308  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00730c  e0820200          ADD      r0,r2,r0,LSL #4
007310  e580100c          STR      r1,[r0,#0xc]
;;;3719       u32MinMaxValues_old_old[u32NeedleNumber+1][0] = u32MinMaxValues_old[u32NeedleNumber+1][0];
007314  e59f05ac          LDR      r0,|L1.30920|
007318  e51f1a9c          LDR      r1,|L1.26756|
00731c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007320  e2811001          ADD      r1,r1,#1
007324  e7900201          LDR      r0,[r0,r1,LSL #4]
007328  e2821000          ADD      r1,r2,#0
00732c  e51f2ab0          LDR      r2,|L1.26756|
007330  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007334  e2822001          ADD      r2,r2,#1
007338  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3720       u32MinMaxValues_old_old[u32NeedleNumber+1][1] = u32MinMaxValues_old[u32NeedleNumber+1][1];
00733c  e59f0584          LDR      r0,|L1.30920|
007340  e51f1ac4          LDR      r1,|L1.26756|
007344  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007348  e2811001          ADD      r1,r1,#1
00734c  e0800201          ADD      r0,r0,r1,LSL #4
007350  e5901004          LDR      r1,[r0,#4]
007354  e51f0adc          LDR      r0,|L1.26752|
007358  e51f2adc          LDR      r2,|L1.26756|
00735c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007360  e2822001          ADD      r2,r2,#1
007364  e0800202          ADD      r0,r0,r2,LSL #4
007368  e5801004          STR      r1,[r0,#4]
;;;3721       u32MinMaxValues_old_old[u32NeedleNumber+1][2] = u32MinMaxValues_old[u32NeedleNumber+1][2];
00736c  e59f0554          LDR      r0,|L1.30920|
007370  e51f1af4          LDR      r1,|L1.26756|
007374  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007378  e2811001          ADD      r1,r1,#1
00737c  e0800201          ADD      r0,r0,r1,LSL #4
007380  e5900008          LDR      r0,[r0,#8]
007384  e51f1b0c          LDR      r1,|L1.26752|
007388  e51f2b0c          LDR      r2,|L1.26756|
00738c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007390  e2822001          ADD      r2,r2,#1
007394  e0811202          ADD      r1,r1,r2,LSL #4
007398  e5810008          STR      r0,[r1,#8]
;;;3722       u32MinMaxValues_old_old[u32NeedleNumber+1][3] = u32MinMaxValues_old[u32NeedleNumber+1][3];
00739c  e59f0524          LDR      r0,|L1.30920|
0073a0  e51f1b24          LDR      r1,|L1.26756|
0073a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0073a8  e2811001          ADD      r1,r1,#1
0073ac  e0800201          ADD      r0,r0,r1,LSL #4
0073b0  e590000c          LDR      r0,[r0,#0xc]
0073b4  e51f1b3c          LDR      r1,|L1.26752|
0073b8  e51f2b3c          LDR      r2,|L1.26756|
0073bc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0073c0  e2822001          ADD      r2,r2,#1
0073c4  e0811202          ADD      r1,r1,r2,LSL #4
0073c8  e581000c          STR      r0,[r1,#0xc]
;;;3723       u32MinMaxValues_old_old[u32NeedleNumber+2][0] = u32MinMaxValues_old[u32NeedleNumber+2][0];
0073cc  e59f04f4          LDR      r0,|L1.30920|
0073d0  e51f1b54          LDR      r1,|L1.26756|
0073d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0073d8  e2811002          ADD      r1,r1,#2
0073dc  e7900201          LDR      r0,[r0,r1,LSL #4]
0073e0  e51f1b68          LDR      r1,|L1.26752|
0073e4  e51f2b68          LDR      r2,|L1.26756|
0073e8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0073ec  e2822002          ADD      r2,r2,#2
0073f0  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3724       u32MinMaxValues_old_old[u32NeedleNumber+2][1] = u32MinMaxValues_old[u32NeedleNumber+2][1];
0073f4  e59f04cc          LDR      r0,|L1.30920|
0073f8  e51f1b7c          LDR      r1,|L1.26756|
0073fc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007400  e2811002          ADD      r1,r1,#2
007404  e0800201          ADD      r0,r0,r1,LSL #4
007408  e5900004          LDR      r0,[r0,#4]
00740c  e51f1b94          LDR      r1,|L1.26752|
007410  e51f2b94          LDR      r2,|L1.26756|
007414  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007418  e2822002          ADD      r2,r2,#2
00741c  e0811202          ADD      r1,r1,r2,LSL #4
007420  e5810004          STR      r0,[r1,#4]
;;;3725       u32MinMaxValues_old_old[u32NeedleNumber+2][2] = u32MinMaxValues_old[u32NeedleNumber+2][2];
007424  e59f049c          LDR      r0,|L1.30920|
007428  e51f1bac          LDR      r1,|L1.26756|
00742c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007430  e2811002          ADD      r1,r1,#2
007434  e0800201          ADD      r0,r0,r1,LSL #4
007438  e5900008          LDR      r0,[r0,#8]
00743c  e51f1bc4          LDR      r1,|L1.26752|
007440  e51f2bc4          LDR      r2,|L1.26756|
007444  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007448  e2822002          ADD      r2,r2,#2
00744c  e0811202          ADD      r1,r1,r2,LSL #4
007450  e5810008          STR      r0,[r1,#8]
;;;3726       u32MinMaxValues_old_old[u32NeedleNumber+2][3] = u32MinMaxValues_old[u32NeedleNumber+2][3];
007454  e59f046c          LDR      r0,|L1.30920|
007458  e51f1bdc          LDR      r1,|L1.26756|
00745c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007460  e2811002          ADD      r1,r1,#2
007464  e0800201          ADD      r0,r0,r1,LSL #4
007468  e590000c          LDR      r0,[r0,#0xc]
00746c  e51f1bf4          LDR      r1,|L1.26752|
007470  e51f2bf4          LDR      r2,|L1.26756|
007474  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007478  e2822002          ADD      r2,r2,#2
00747c  e0811202          ADD      r1,r1,r2,LSL #4
007480  e581000c          STR      r0,[r1,#0xc]
;;;3727       u32MinMaxValues_old_old[u32NeedleNumber+3][0] = u32MinMaxValues_old[u32NeedleNumber+3][0];
007484  e59f043c          LDR      r0,|L1.30920|
007488  e51f1c0c          LDR      r1,|L1.26756|
00748c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007490  e2811003          ADD      r1,r1,#3
007494  e7900201          LDR      r0,[r0,r1,LSL #4]
007498  e51f1c20          LDR      r1,|L1.26752|
00749c  e51f2c20          LDR      r2,|L1.26756|
0074a0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0074a4  e2822003          ADD      r2,r2,#3
0074a8  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3728       u32MinMaxValues_old_old[u32NeedleNumber+3][1] = u32MinMaxValues_old[u32NeedleNumber+3][1];
0074ac  e59f0414          LDR      r0,|L1.30920|
0074b0  e51f1c34          LDR      r1,|L1.26756|
0074b4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0074b8  e2811003          ADD      r1,r1,#3
0074bc  e0800201          ADD      r0,r0,r1,LSL #4
0074c0  e5900004          LDR      r0,[r0,#4]
0074c4  e51f1c4c          LDR      r1,|L1.26752|
0074c8  e51f2c4c          LDR      r2,|L1.26756|
0074cc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0074d0  e2822003          ADD      r2,r2,#3
0074d4  e0811202          ADD      r1,r1,r2,LSL #4
0074d8  e5810004          STR      r0,[r1,#4]
;;;3729       u32MinMaxValues_old_old[u32NeedleNumber+3][2] = u32MinMaxValues_old[u32NeedleNumber+3][2];
0074dc  e59f03e4          LDR      r0,|L1.30920|
0074e0  e51f1c64          LDR      r1,|L1.26756|
0074e4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0074e8  e2811003          ADD      r1,r1,#3
0074ec  e0800201          ADD      r0,r0,r1,LSL #4
0074f0  e5900008          LDR      r0,[r0,#8]
0074f4  e51f1c7c          LDR      r1,|L1.26752|
0074f8  e51f2c7c          LDR      r2,|L1.26756|
0074fc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007500  e2822003          ADD      r2,r2,#3
007504  e0811202          ADD      r1,r1,r2,LSL #4
007508  e5810008          STR      r0,[r1,#8]
;;;3730       u32MinMaxValues_old_old[u32NeedleNumber+3][3] = u32MinMaxValues_old[u32NeedleNumber+3][3];
00750c  e59f03b4          LDR      r0,|L1.30920|
007510  e51f1c94          LDR      r1,|L1.26756|
007514  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007518  e2811003          ADD      r1,r1,#3
00751c  e0800201          ADD      r0,r0,r1,LSL #4
007520  e590000c          LDR      r0,[r0,#0xc]
007524  e51f1cac          LDR      r1,|L1.26752|
007528  e51f2cac          LDR      r2,|L1.26756|
00752c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007530  e2822003          ADD      r2,r2,#3
007534  e0811202          ADD      r1,r1,r2,LSL #4
007538  e581000c          STR      r0,[r1,#0xc]
;;;3731       u32MinMaxValues_old_old[u32NeedleNumber+4][0] = u32MinMaxValues_old[u32NeedleNumber+4][0];
00753c  e59f0384          LDR      r0,|L1.30920|
007540  e51f1cc4          LDR      r1,|L1.26756|
007544  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007548  e2811004          ADD      r1,r1,#4
00754c  e7901201          LDR      r1,[r0,r1,LSL #4]
007550  e51f0cd8          LDR      r0,|L1.26752|
007554  e51f2cd8          LDR      r2,|L1.26756|
007558  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00755c  e2822004          ADD      r2,r2,#4
007560  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3732       u32MinMaxValues_old_old[u32NeedleNumber+4][1] = u32MinMaxValues_old[u32NeedleNumber+4][1];
007564  e59f035c          LDR      r0,|L1.30920|
007568  e51f1cec          LDR      r1,|L1.26756|
00756c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007570  e2811004          ADD      r1,r1,#4
007574  e0800201          ADD      r0,r0,r1,LSL #4
007578  e5900004          LDR      r0,[r0,#4]
00757c  e51f1d04          LDR      r1,|L1.26752|
007580  e51f2d04          LDR      r2,|L1.26756|
007584  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007588  e2822004          ADD      r2,r2,#4
00758c  e0811202          ADD      r1,r1,r2,LSL #4
007590  e5810004          STR      r0,[r1,#4]
;;;3733       u32MinMaxValues_old_old[u32NeedleNumber+4][2] = u32MinMaxValues_old[u32NeedleNumber+4][2];
007594  e59f032c          LDR      r0,|L1.30920|
007598  e51f1d1c          LDR      r1,|L1.26756|
00759c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0075a0  e2811004          ADD      r1,r1,#4
0075a4  e0800201          ADD      r0,r0,r1,LSL #4
0075a8  e5900008          LDR      r0,[r0,#8]
0075ac  e51f1d34          LDR      r1,|L1.26752|
0075b0  e51f2d34          LDR      r2,|L1.26756|
0075b4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0075b8  e2822004          ADD      r2,r2,#4
0075bc  e0811202          ADD      r1,r1,r2,LSL #4
0075c0  e5810008          STR      r0,[r1,#8]
;;;3734       u32MinMaxValues_old_old[u32NeedleNumber+4][3] = u32MinMaxValues_old[u32NeedleNumber+4][3];
0075c4  e59f02fc          LDR      r0,|L1.30920|
0075c8  e51f1d4c          LDR      r1,|L1.26756|
0075cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0075d0  e2811004          ADD      r1,r1,#4
0075d4  e0800201          ADD      r0,r0,r1,LSL #4
0075d8  e590100c          LDR      r1,[r0,#0xc]
0075dc  e51f0d64          LDR      r0,|L1.26752|
0075e0  e51f2d64          LDR      r2,|L1.26756|
0075e4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0075e8  e2822004          ADD      r2,r2,#4
0075ec  e0800202          ADD      r0,r0,r2,LSL #4
0075f0  e580100c          STR      r1,[r0,#0xc]
;;;3735       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][0] = u32MinMaxValuesBase_old[u32NeedleNumber+0][0];
0075f4  e59f12d0          LDR      r1,|L1.30924|
0075f8  e51f0d7c          LDR      r0,|L1.26756|
0075fc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007600  e7911200          LDR      r1,[r1,r0,LSL #4]
007604  e59f22b0          LDR      r2,|L1.30908|
007608  e51f0d8c          LDR      r0,|L1.26756|
00760c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007610  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3736       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][1] = u32MinMaxValuesBase_old[u32NeedleNumber+0][1];
007614  e59f12b0          LDR      r1,|L1.30924|
007618  e51f0d9c          LDR      r0,|L1.26756|
00761c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007620  e0810200          ADD      r0,r1,r0,LSL #4
007624  e5901004          LDR      r1,[r0,#4]
007628  e51f0dac          LDR      r0,|L1.26756|
00762c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007630  e0820200          ADD      r0,r2,r0,LSL #4
007634  e5801004          STR      r1,[r0,#4]
;;;3737       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][2] = u32MinMaxValuesBase_old[u32NeedleNumber+0][2];
007638  e59f128c          LDR      r1,|L1.30924|
00763c  e51f0dc0          LDR      r0,|L1.26756|
007640  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007644  e0810200          ADD      r0,r1,r0,LSL #4
007648  e5901008          LDR      r1,[r0,#8]
00764c  e51f0dd0          LDR      r0,|L1.26756|
007650  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007654  e0820200          ADD      r0,r2,r0,LSL #4
007658  e5801008          STR      r1,[r0,#8]
;;;3738       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][3] = u32MinMaxValuesBase_old[u32NeedleNumber+0][3];
00765c  e59f1268          LDR      r1,|L1.30924|
007660  e51f0de4          LDR      r0,|L1.26756|
007664  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007668  e0810200          ADD      r0,r1,r0,LSL #4
00766c  e590100c          LDR      r1,[r0,#0xc]
007670  e51f0df4          LDR      r0,|L1.26756|
007674  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007678  e0820200          ADD      r0,r2,r0,LSL #4
00767c  e580100c          STR      r1,[r0,#0xc]
;;;3739       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][0] = u32MinMaxValuesBase_old[u32NeedleNumber+1][0];
007680  e59f0244          LDR      r0,|L1.30924|
007684  e51f1e08          LDR      r1,|L1.26756|
007688  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00768c  e2811001          ADD      r1,r1,#1
007690  e7901201          LDR      r1,[r0,r1,LSL #4]
007694  e2820000          ADD      r0,r2,#0
007698  e51f2e1c          LDR      r2,|L1.26756|
00769c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0076a0  e2822001          ADD      r2,r2,#1
0076a4  e7801202          STR      r1,[r0,r2,LSL #4]
;;;3740       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][1] = u32MinMaxValuesBase_old[u32NeedleNumber+1][1];
0076a8  e59f021c          LDR      r0,|L1.30924|
0076ac  e51f1e30          LDR      r1,|L1.26756|
0076b0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0076b4  e2811001          ADD      r1,r1,#1
0076b8  e0800201          ADD      r0,r0,r1,LSL #4
0076bc  e5901004          LDR      r1,[r0,#4]
0076c0  e59f01f4          LDR      r0,|L1.30908|
0076c4  e51f2e48          LDR      r2,|L1.26756|
0076c8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0076cc  e2822001          ADD      r2,r2,#1
0076d0  e0800202          ADD      r0,r0,r2,LSL #4
0076d4  e5801004          STR      r1,[r0,#4]
;;;3741       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][2] = u32MinMaxValuesBase_old[u32NeedleNumber+1][2];
0076d8  e59f01ec          LDR      r0,|L1.30924|
0076dc  e51f1e60          LDR      r1,|L1.26756|
0076e0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0076e4  e2811001          ADD      r1,r1,#1
0076e8  e0800201          ADD      r0,r0,r1,LSL #4
0076ec  e5901008          LDR      r1,[r0,#8]
0076f0  e59f01c4          LDR      r0,|L1.30908|
0076f4  e51f2e78          LDR      r2,|L1.26756|
0076f8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0076fc  e2822001          ADD      r2,r2,#1
007700  e0800202          ADD      r0,r0,r2,LSL #4
007704  e5801008          STR      r1,[r0,#8]
;;;3742       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][3] = u32MinMaxValuesBase_old[u32NeedleNumber+1][3];
007708  e59f01bc          LDR      r0,|L1.30924|
00770c  e51f1e90          LDR      r1,|L1.26756|
007710  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007714  e2811001          ADD      r1,r1,#1
007718  e0800201          ADD      r0,r0,r1,LSL #4
00771c  e590000c          LDR      r0,[r0,#0xc]
007720  e59f1194          LDR      r1,|L1.30908|
007724  e51f2ea8          LDR      r2,|L1.26756|
007728  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00772c  e2822001          ADD      r2,r2,#1
007730  e0811202          ADD      r1,r1,r2,LSL #4
007734  e581000c          STR      r0,[r1,#0xc]
;;;3743   
;;;3744       u32MinMaxValues_old[u32NeedleNumber+0][0] = u32MinMaxValues[u32NeedleNumber+0][0];
007738  e59f1180          LDR      r1,|L1.30912|
00773c  e51f0ec0          LDR      r0,|L1.26756|
007740  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007744  e7911200          LDR      r1,[r1,r0,LSL #4]
007748  e59f2178          LDR      r2,|L1.30920|
00774c  e51f0ed0          LDR      r0,|L1.26756|
007750  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007754  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3745       u32MinMaxValues_old[u32NeedleNumber+0][1] = u32MinMaxValues[u32NeedleNumber+0][1];
007758  e59f1160          LDR      r1,|L1.30912|
00775c  e51f0ee0          LDR      r0,|L1.26756|
007760  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007764  e0810200          ADD      r0,r1,r0,LSL #4
007768  e5901004          LDR      r1,[r0,#4]
00776c  e51f0ef0          LDR      r0,|L1.26756|
007770  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007774  e0820200          ADD      r0,r2,r0,LSL #4
007778  e5801004          STR      r1,[r0,#4]
;;;3746       u32MinMaxValues_old[u32NeedleNumber+0][2] = u32MinMaxValues[u32NeedleNumber+0][2];
00777c  e59f113c          LDR      r1,|L1.30912|
007780  e51f0f04          LDR      r0,|L1.26756|
007784  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007788  e0810200          ADD      r0,r1,r0,LSL #4
00778c  e5901008          LDR      r1,[r0,#8]
007790  e51f0f14          LDR      r0,|L1.26756|
007794  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007798  e0820200          ADD      r0,r2,r0,LSL #4
00779c  e5801008          STR      r1,[r0,#8]
;;;3747       u32MinMaxValues_old[u32NeedleNumber+0][3] = u32MinMaxValues[u32NeedleNumber+0][3];
0077a0  e59f1118          LDR      r1,|L1.30912|
0077a4  e51f0f28          LDR      r0,|L1.26756|
0077a8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0077ac  e0810200          ADD      r0,r1,r0,LSL #4
0077b0  e590100c          LDR      r1,[r0,#0xc]
0077b4  e51f0f38          LDR      r0,|L1.26756|
0077b8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0077bc  e0820200          ADD      r0,r2,r0,LSL #4
0077c0  e580100c          STR      r1,[r0,#0xc]
;;;3748       u32MinMaxValues_old[u32NeedleNumber+1][0] = u32MinMaxValues[u32NeedleNumber+1][0];
0077c4  e59f00f4          LDR      r0,|L1.30912|
0077c8  e51f1f4c          LDR      r1,|L1.26756|
0077cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0077d0  e2811001          ADD      r1,r1,#1
0077d4  e7900201          LDR      r0,[r0,r1,LSL #4]
0077d8  e2821000          ADD      r1,r2,#0
0077dc  e51f2f60          LDR      r2,|L1.26756|
0077e0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0077e4  e2822001          ADD      r2,r2,#1
0077e8  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3749       u32MinMaxValues_old[u32NeedleNumber+1][1] = u32MinMaxValues[u32NeedleNumber+1][1];
0077ec  e59f00cc          LDR      r0,|L1.30912|
0077f0  e51f1f74          LDR      r1,|L1.26756|
0077f4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0077f8  e2811001          ADD      r1,r1,#1
0077fc  e0800201          ADD      r0,r0,r1,LSL #4
007800  e5901004          LDR      r1,[r0,#4]
007804  e59f00bc          LDR      r0,|L1.30920|
007808  e51f2f8c          LDR      r2,|L1.26756|
00780c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007810  e2822001          ADD      r2,r2,#1
007814  e0800202          ADD      r0,r0,r2,LSL #4
007818  e5801004          STR      r1,[r0,#4]
;;;3750       u32MinMaxValues_old[u32NeedleNumber+1][2] = u32MinMaxValues[u32NeedleNumber+1][2];
00781c  e59f009c          LDR      r0,|L1.30912|
007820  e51f1fa4          LDR      r1,|L1.26756|
007824  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007828  e2811001          ADD      r1,r1,#1
00782c  e0800201          ADD      r0,r0,r1,LSL #4
007830  e5901008          LDR      r1,[r0,#8]
007834  e59f008c          LDR      r0,|L1.30920|
007838  e51f2fbc          LDR      r2,|L1.26756|
00783c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007840  e2822001          ADD      r2,r2,#1
007844  e0800202          ADD      r0,r0,r2,LSL #4
007848  e5801008          STR      r1,[r0,#8]
;;;3751       u32MinMaxValues_old[u32NeedleNumber+1][3] = u32MinMaxValues[u32NeedleNumber+1][3];
00784c  e59f006c          LDR      r0,|L1.30912|
007850  e51f1fd4          LDR      r1,|L1.26756|
007854  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007858  e2811001          ADD      r1,r1,#1
00785c  e0800201          ADD      r0,r0,r1,LSL #4
007860  e590100c          LDR      r1,[r0,#0xc]
007864  e59f005c          LDR      r0,|L1.30920|
007868  e51f2fec          LDR      r2,|L1.26756|
00786c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007870  e2822001          ADD      r2,r2,#1
007874  e0800202          ADD      r0,r0,r2,LSL #4
007878  e580100c          STR      r1,[r0,#0xc]
;;;3752       u32MinMaxValues_old[u32NeedleNumber+2][0] = u32MinMaxValues[u32NeedleNumber+2][0];
00787c  e59f003c          LDR      r0,|L1.30912|
007880  e59f1048          LDR      r1,|L1.30928|
007884  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007888  e2811002          ADD      r1,r1,#2
00788c  e7900201          LDR      r0,[r0,r1,LSL #4]
007890  e59f1030          LDR      r1,|L1.30920|
007894  e59f2034          LDR      r2,|L1.30928|
007898  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00789c  e2822002          ADD      r2,r2,#2
0078a0  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3753       u32MinMaxValues_old[u32NeedleNumber+2][1] = u32MinMaxValues[u32NeedleNumber+2][1];
0078a4  e59f0014          LDR      r0,|L1.30912|
0078a8  e59f1020          LDR      r1,|L1.30928|
0078ac  ea000008          B        |L1.30932|
                  |L1.30896|
                          DCD      u32SubResCPos
                  |L1.30900|
                          DCD      u32SubResPPos
                  |L1.30904|
                          DCD      pstWriteList
                  |L1.30908|
                          DCD      u32MinMaxValuesBase_old_old
                  |L1.30912|
                          DCD      u32MinMaxValues
                  |L1.30916|
                          DCD      u32MinMaxValuesBase
                  |L1.30920|
                          DCD      u32MinMaxValues_old
                  |L1.30924|
                          DCD      u32MinMaxValuesBase_old
                  |L1.30928|
                          DCD      u32NeedleNumber
                  |L1.30932|
0078d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0078d8  e2811002          ADD      r1,r1,#2
0078dc  e0800201          ADD      r0,r0,r1,LSL #4
0078e0  e5901004          LDR      r1,[r0,#4]
0078e4  e51f0024          LDR      r0,|L1.30920|
0078e8  e51f2020          LDR      r2,|L1.30928|
0078ec  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0078f0  e2822002          ADD      r2,r2,#2
0078f4  e0800202          ADD      r0,r0,r2,LSL #4
0078f8  e5801004          STR      r1,[r0,#4]
;;;3754       u32MinMaxValues_old[u32NeedleNumber+2][2] = u32MinMaxValues[u32NeedleNumber+2][2];
0078fc  e51f0044          LDR      r0,|L1.30912|
007900  e51f1038          LDR      r1,|L1.30928|
007904  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007908  e2811002          ADD      r1,r1,#2
00790c  e0800201          ADD      r0,r0,r1,LSL #4
007910  e5901008          LDR      r1,[r0,#8]
007914  e51f0054          LDR      r0,|L1.30920|
007918  e51f2050          LDR      r2,|L1.30928|
00791c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007920  e2822002          ADD      r2,r2,#2
007924  e0800202          ADD      r0,r0,r2,LSL #4
007928  e5801008          STR      r1,[r0,#8]
;;;3755       u32MinMaxValues_old[u32NeedleNumber+2][3] = u32MinMaxValues[u32NeedleNumber+2][3];
00792c  e51f0074          LDR      r0,|L1.30912|
007930  e51f1068          LDR      r1,|L1.30928|
007934  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007938  e2811002          ADD      r1,r1,#2
00793c  e0800201          ADD      r0,r0,r1,LSL #4
007940  e590100c          LDR      r1,[r0,#0xc]
007944  e51f0084          LDR      r0,|L1.30920|
007948  e51f2080          LDR      r2,|L1.30928|
00794c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007950  e2822002          ADD      r2,r2,#2
007954  e0800202          ADD      r0,r0,r2,LSL #4
007958  e580100c          STR      r1,[r0,#0xc]
;;;3756       u32MinMaxValues_old[u32NeedleNumber+3][0] = u32MinMaxValues[u32NeedleNumber+3][0];
00795c  e51f00a4          LDR      r0,|L1.30912|
007960  e51f1098          LDR      r1,|L1.30928|
007964  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007968  e2811003          ADD      r1,r1,#3
00796c  e7900201          LDR      r0,[r0,r1,LSL #4]
007970  e51f10b0          LDR      r1,|L1.30920|
007974  e51f20ac          LDR      r2,|L1.30928|
007978  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00797c  e2822003          ADD      r2,r2,#3
007980  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3757       u32MinMaxValues_old[u32NeedleNumber+3][1] = u32MinMaxValues[u32NeedleNumber+3][1];
007984  e51f00cc          LDR      r0,|L1.30912|
007988  e51f10c0          LDR      r1,|L1.30928|
00798c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007990  e2811003          ADD      r1,r1,#3
007994  e0800201          ADD      r0,r0,r1,LSL #4
007998  e5900004          LDR      r0,[r0,#4]
00799c  e51f10dc          LDR      r1,|L1.30920|
0079a0  e51f20d8          LDR      r2,|L1.30928|
0079a4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0079a8  e2822003          ADD      r2,r2,#3
0079ac  e0811202          ADD      r1,r1,r2,LSL #4
0079b0  e5810004          STR      r0,[r1,#4]
;;;3758       u32MinMaxValues_old[u32NeedleNumber+3][2] = u32MinMaxValues[u32NeedleNumber+3][2];
0079b4  e51f00fc          LDR      r0,|L1.30912|
0079b8  e51f10f0          LDR      r1,|L1.30928|
0079bc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0079c0  e2811003          ADD      r1,r1,#3
0079c4  e0800201          ADD      r0,r0,r1,LSL #4
0079c8  e5900008          LDR      r0,[r0,#8]
0079cc  e51f110c          LDR      r1,|L1.30920|
0079d0  e51f2108          LDR      r2,|L1.30928|
0079d4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0079d8  e2822003          ADD      r2,r2,#3
0079dc  e0811202          ADD      r1,r1,r2,LSL #4
0079e0  e5810008          STR      r0,[r1,#8]
;;;3759       u32MinMaxValues_old[u32NeedleNumber+3][3] = u32MinMaxValues[u32NeedleNumber+3][3];
0079e4  e51f012c          LDR      r0,|L1.30912|
0079e8  e51f1120          LDR      r1,|L1.30928|
0079ec  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0079f0  e2811003          ADD      r1,r1,#3
0079f4  e0800201          ADD      r0,r0,r1,LSL #4
0079f8  e590100c          LDR      r1,[r0,#0xc]
0079fc  e51f013c          LDR      r0,|L1.30920|
007a00  e51f2138          LDR      r2,|L1.30928|
007a04  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007a08  e2822003          ADD      r2,r2,#3
007a0c  e0800202          ADD      r0,r0,r2,LSL #4
007a10  e580100c          STR      r1,[r0,#0xc]
;;;3760       u32MinMaxValues_old[u32NeedleNumber+4][0] = u32MinMaxValues[u32NeedleNumber+4][0];
007a14  e51f015c          LDR      r0,|L1.30912|
007a18  e51f1150          LDR      r1,|L1.30928|
007a1c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007a20  e2811004          ADD      r1,r1,#4
007a24  e7900201          LDR      r0,[r0,r1,LSL #4]
007a28  e51f1168          LDR      r1,|L1.30920|
007a2c  e51f2164          LDR      r2,|L1.30928|
007a30  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007a34  e2822004          ADD      r2,r2,#4
007a38  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3761       u32MinMaxValues_old[u32NeedleNumber+4][1] = u32MinMaxValues[u32NeedleNumber+4][1];
007a3c  e51f0184          LDR      r0,|L1.30912|
007a40  e51f1178          LDR      r1,|L1.30928|
007a44  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007a48  e2811004          ADD      r1,r1,#4
007a4c  e0800201          ADD      r0,r0,r1,LSL #4
007a50  e5900004          LDR      r0,[r0,#4]
007a54  e51f1194          LDR      r1,|L1.30920|
007a58  e51f2190          LDR      r2,|L1.30928|
007a5c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007a60  e2822004          ADD      r2,r2,#4
007a64  e0811202          ADD      r1,r1,r2,LSL #4
007a68  e5810004          STR      r0,[r1,#4]
;;;3762       u32MinMaxValues_old[u32NeedleNumber+4][2] = u32MinMaxValues[u32NeedleNumber+4][2];
007a6c  e51f01b4          LDR      r0,|L1.30912|
007a70  e51f11a8          LDR      r1,|L1.30928|
007a74  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007a78  e2811004          ADD      r1,r1,#4
007a7c  e0800201          ADD      r0,r0,r1,LSL #4
007a80  e5901008          LDR      r1,[r0,#8]
007a84  e51f01c4          LDR      r0,|L1.30920|
007a88  e51f21c0          LDR      r2,|L1.30928|
007a8c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007a90  e2822004          ADD      r2,r2,#4
007a94  e0800202          ADD      r0,r0,r2,LSL #4
007a98  e5801008          STR      r1,[r0,#8]
;;;3763       u32MinMaxValues_old[u32NeedleNumber+4][3] = u32MinMaxValues[u32NeedleNumber+4][3];
007a9c  e51f01e4          LDR      r0,|L1.30912|
007aa0  e51f11d8          LDR      r1,|L1.30928|
007aa4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007aa8  e2811004          ADD      r1,r1,#4
007aac  e0800201          ADD      r0,r0,r1,LSL #4
007ab0  e590000c          LDR      r0,[r0,#0xc]
007ab4  e51f11f4          LDR      r1,|L1.30920|
007ab8  e51f21f0          LDR      r2,|L1.30928|
007abc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007ac0  e2822004          ADD      r2,r2,#4
007ac4  e0811202          ADD      r1,r1,r2,LSL #4
007ac8  e581000c          STR      r0,[r1,#0xc]
;;;3764       u32MinMaxValuesBase_old[u32NeedleNumber+0][0] = u32MinMaxValuesBase[u32NeedleNumber+0][0];
007acc  e51f1210          LDR      r1,|L1.30916|
007ad0  e51f0208          LDR      r0,|L1.30928|
007ad4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007ad8  e7911200          LDR      r1,[r1,r0,LSL #4]
007adc  e51f2218          LDR      r2,|L1.30924|
007ae0  e51f0218          LDR      r0,|L1.30928|
007ae4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007ae8  e7821200          STR      r1,[r2,r0,LSL #4]
;;;3765       u32MinMaxValuesBase_old[u32NeedleNumber+0][1] = u32MinMaxValuesBase[u32NeedleNumber+0][1];
007aec  e51f1230          LDR      r1,|L1.30916|
007af0  e51f0228          LDR      r0,|L1.30928|
007af4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007af8  e0810200          ADD      r0,r1,r0,LSL #4
007afc  e2821000          ADD      r1,r2,#0
007b00  e5902004          LDR      r2,[r0,#4]
007b04  e51f023c          LDR      r0,|L1.30928|
007b08  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007b0c  e0810200          ADD      r0,r1,r0,LSL #4
007b10  e5802004          STR      r2,[r0,#4]
;;;3766       u32MinMaxValuesBase_old[u32NeedleNumber+0][2] = u32MinMaxValuesBase[u32NeedleNumber+0][2];
007b14  e51f1258          LDR      r1,|L1.30916|
007b18  e51f0250          LDR      r0,|L1.30928|
007b1c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007b20  e0810200          ADD      r0,r1,r0,LSL #4
007b24  e51f2260          LDR      r2,|L1.30924|
007b28  e5901008          LDR      r1,[r0,#8]
007b2c  e51f0264          LDR      r0,|L1.30928|
007b30  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007b34  e0820200          ADD      r0,r2,r0,LSL #4
007b38  e5801008          STR      r1,[r0,#8]
;;;3767       u32MinMaxValuesBase_old[u32NeedleNumber+0][3] = u32MinMaxValuesBase[u32NeedleNumber+0][3];
007b3c  e51f1280          LDR      r1,|L1.30916|
007b40  e51f0278          LDR      r0,|L1.30928|
007b44  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007b48  e0810200          ADD      r0,r1,r0,LSL #4
007b4c  e590100c          LDR      r1,[r0,#0xc]
007b50  e51f0288          LDR      r0,|L1.30928|
007b54  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
007b58  e0820200          ADD      r0,r2,r0,LSL #4
007b5c  e580100c          STR      r1,[r0,#0xc]
;;;3768       u32MinMaxValuesBase_old[u32NeedleNumber+1][0] = u32MinMaxValuesBase[u32NeedleNumber+1][0];
007b60  e51f02a4          LDR      r0,|L1.30916|
007b64  e51f129c          LDR      r1,|L1.30928|
007b68  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007b6c  e2811001          ADD      r1,r1,#1
007b70  e7900201          LDR      r0,[r0,r1,LSL #4]
007b74  e2821000          ADD      r1,r2,#0
007b78  e51f22b0          LDR      r2,|L1.30928|
007b7c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007b80  e2822001          ADD      r2,r2,#1
007b84  e7810202          STR      r0,[r1,r2,LSL #4]
;;;3769       u32MinMaxValuesBase_old[u32NeedleNumber+1][1] = u32MinMaxValuesBase[u32NeedleNumber+1][1];
007b88  e51f02cc          LDR      r0,|L1.30916|
007b8c  e51f12c4          LDR      r1,|L1.30928|
007b90  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007b94  e2811001          ADD      r1,r1,#1
007b98  e0800201          ADD      r0,r0,r1,LSL #4
007b9c  e5901004          LDR      r1,[r0,#4]
007ba0  e51f02dc          LDR      r0,|L1.30924|
007ba4  e51f22dc          LDR      r2,|L1.30928|
007ba8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007bac  e2822001          ADD      r2,r2,#1
007bb0  e0800202          ADD      r0,r0,r2,LSL #4
007bb4  e5801004          STR      r1,[r0,#4]
;;;3770       u32MinMaxValuesBase_old[u32NeedleNumber+1][2] = u32MinMaxValuesBase[u32NeedleNumber+1][2];
007bb8  e51f02fc          LDR      r0,|L1.30916|
007bbc  e51f12f4          LDR      r1,|L1.30928|
007bc0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007bc4  e2811001          ADD      r1,r1,#1
007bc8  e0800201          ADD      r0,r0,r1,LSL #4
007bcc  e5900008          LDR      r0,[r0,#8]
007bd0  e51f130c          LDR      r1,|L1.30924|
007bd4  e51f230c          LDR      r2,|L1.30928|
007bd8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007bdc  e2822001          ADD      r2,r2,#1
007be0  e0811202          ADD      r1,r1,r2,LSL #4
007be4  e5810008          STR      r0,[r1,#8]
;;;3771       u32MinMaxValuesBase_old[u32NeedleNumber+1][3] = u32MinMaxValuesBase[u32NeedleNumber+1][3];
007be8  e51f032c          LDR      r0,|L1.30916|
007bec  e51f1324          LDR      r1,|L1.30928|
007bf0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
007bf4  e2811001          ADD      r1,r1,#1
007bf8  e0800201          ADD      r0,r0,r1,LSL #4
007bfc  e590100c          LDR      r1,[r0,#0xc]
007c00  e51f033c          LDR      r0,|L1.30924|
007c04  e51f233c          LDR      r2,|L1.30928|
007c08  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
007c0c  e2822001          ADD      r2,r2,#1
007c10  e0800202          ADD      r0,r0,r2,LSL #4
007c14  e580100c          STR      r1,[r0,#0xc]
;;;3772   }
007c18  e28dd09c          ADD      sp,sp,#0x9c
007c1c  e8bd8ff0          POP      {r4-r11,pc}
;;;3773   
                          ENDP

                  vGfBuffRotateNeedleTipandBase PROC
;;;3776   
;;;3777   void vGfBuffRotateNeedleTipandBase(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
007c20  e92d4fff          PUSH     {r0-r11,lr}
;;;3778                                      uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef)
;;;3779   {
007c24  e24dd0cc          SUB      sp,sp,#0xcc
007c28  e1a05000          MOV      r5,r0
007c2c  e1a06001          MOV      r6,r1
007c30  e1a07003          MOV      r7,r3
007c34  e59d8108          LDR      r8,[sp,#0x108]
;;;3780       uint32_t        u32Div, u32Count;
;;;3781       blit_mem_st     stMemBlit;
;;;3782       blit_OvrRgb_st  stParamBlit;
;;;3783       rot_mem_part_st stMemTip;
;;;3784       rot_cfg_st      stParamTip;
;;;3785       rot_mem_part_st stMemBase;
;;;3786       rot_cfg_st      stParamBase;
;;;3787       blit_mem_st     stMemBlend;
;;;3788       blit_BlndRgb_st stParamBlend;
;;;3789       uint8_t         u8SrcNoOfBytes, u8SrcNoOfBytesBg, u8DstNoOfBytes;
;;;3790       float32_t       f32AngleLocal;
;;;3791       ga_en_e         eDraw;
;;;3792       
;;;3793       u8PreviousOperation = 0U;
007c38  e3a00000          MOV      r0,#0
007c3c  e59f1f94          LDR      r1,|L1.35800|
007c40  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;3794   
;;;3795       f32AngleLocal = f32CheckAngle(f32Angle);
007c44  e59d00d4          LDR      r0,[sp,#0xd4]
007c48  ebfffffe          BL       f32CheckAngle
007c4c  e58d0018          STR      r0,[sp,#0x18]
;;;3796   
;;;3797       /* restore blit */
;;;3798       stMemBlit.u16SrcWidth = pstSrcImageBg->u16Width;
007c50  e1d510b4          LDRH     r1,[r5,#4]
007c54  e1cd1bb4          STRH     r1,[sp,#0xb4]
;;;3799       stMemBlit.u16DstWidth = pstDstImage->u16Width;
007c58  e1d710b4          LDRH     r1,[r7,#4]
007c5c  e1cd1bbc          STRH     r1,[sp,#0xbc]
;;;3800   
;;;3801       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
007c60  e5d6000c          LDRB     r0,[r6,#0xc]
007c64  e3500004          CMP      r0,#4
007c68  1a000005          BNE      |L1.31876|
;;;3802       {
;;;3803           stParamTip.stRotCfg.eSrcColFmt  = GA_RGB16;
007c6c  e3a00000          MOV      r0,#0
007c70  e5cd0078          STRB     r0,[sp,#0x78]
;;;3804           stParamBase.stRotCfg.eSrcColFmt = GA_RGB16;
007c74  e5cd004c          STRB     r0,[sp,#0x4c]
;;;3805           u8SrcNoOfBytes                  = 2U;
007c78  e3a00002          MOV      r0,#2
007c7c  e58d001c          STR      r0,[sp,#0x1c]
007c80  ea000004          B        |L1.31896|
                  |L1.31876|
;;;3806       }
;;;3807       else
;;;3808       {
;;;3809           stParamTip.stRotCfg.eSrcColFmt  = GA_RGBA32;
007c84  e3a00001          MOV      r0,#1
007c88  e5cd0078          STRB     r0,[sp,#0x78]
;;;3810           stParamBase.stRotCfg.eSrcColFmt = GA_RGBA32;
007c8c  e5cd004c          STRB     r0,[sp,#0x4c]
;;;3811           u8SrcNoOfBytes                  = 4U;
007c90  e3a00004          MOV      r0,#4
007c94  e58d001c          STR      r0,[sp,#0x1c]
                  |L1.31896|
;;;3812       }
;;;3813   
;;;3814       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
007c98  e5d7000c          LDRB     r0,[r7,#0xc]
007c9c  e3500004          CMP      r0,#4
007ca0  1a000008          BNE      |L1.31944|
;;;3815       {
;;;3816           stParamBlit.eDestFmt            = GA_RGB16;
007ca4  e3a00000          MOV      r0,#0
007ca8  e5cd00a5          STRB     r0,[sp,#0xa5]
;;;3817           stParamTip.stRotCfg.eDstColFmt  = GA_RGB16;
007cac  e5cd0079          STRB     r0,[sp,#0x79]
;;;3818           stParamBase.stRotCfg.eDstColFmt = GA_RGB16;
007cb0  e5cd004d          STRB     r0,[sp,#0x4d]
;;;3819           stParamBlend.eDestFmt           = GA_RGB16;
007cb4  e5cd0021          STRB     r0,[sp,#0x21]
;;;3820           u8DstNoOfBytes                  = 2U;
007cb8  e3a0a002          MOV      r10,#2
;;;3821           
;;;3822           stParamBlit.eSrcFmt             = GA_RGB16;
007cbc  e5cd00a4          STRB     r0,[sp,#0xa4]
;;;3823           stParamBlend.eSrcFmt            = GA_RGB16;
007cc0  e5cd0020          STRB     r0,[sp,#0x20]
007cc4  ea000007          B        |L1.31976|
                  |L1.31944|
;;;3824       }
;;;3825       else
;;;3826       {
;;;3827           stParamBlit.eDestFmt            = GA_RGBA32;
007cc8  e3a00001          MOV      r0,#1
007ccc  e5cd00a5          STRB     r0,[sp,#0xa5]
;;;3828           stParamTip.stRotCfg.eDstColFmt  = GA_RGBA32;
007cd0  e5cd0079          STRB     r0,[sp,#0x79]
;;;3829           stParamBase.stRotCfg.eDstColFmt = GA_RGBA32;
007cd4  e5cd004d          STRB     r0,[sp,#0x4d]
;;;3830           stParamBlend.eDestFmt           = GA_RGBA32;
007cd8  e5cd0021          STRB     r0,[sp,#0x21]
;;;3831           u8DstNoOfBytes                  = 4U;
007cdc  e3a0a004          MOV      r10,#4
;;;3832           
;;;3833           stParamBlit.eSrcFmt             = GA_RGBA32;
007ce0  e5cd00a4          STRB     r0,[sp,#0xa4]
;;;3834           stParamBlend.eSrcFmt  = GA_RGBA32;
007ce4  e5cd0020          STRB     r0,[sp,#0x20]
                  |L1.31976|
;;;3835       }
;;;3836   
;;;3837       if(pstSrcImageBg->eFormat == (uint8_t)FMT_RGB16)
007ce8  e5d5000c          LDRB     r0,[r5,#0xc]
007cec  e3500004          CMP      r0,#4
007cf0  1a000001          BNE      |L1.31996|
;;;3838       {
;;;3839           u8SrcNoOfBytesBg      = 2U;
007cf4  e3a09002          MOV      r9,#2
007cf8  ea000000          B        |L1.32000|
                  |L1.31996|
;;;3840       }
;;;3841       else
;;;3842       {
;;;3843           u8SrcNoOfBytesBg      = 4U;
007cfc  e3a09004          MOV      r9,#4
                  |L1.32000|
;;;3844       }
;;;3845   
;;;3846       stParamBlit.eFadeMode      = stGastate.eFadeMode;
007d00  e59f0ed4          LDR      r0,|L1.35804|
007d04  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
007d08  e5cd00a7          STRB     r0,[sp,#0xa7]
;;;3847       stParamBlit.u8FadingFctr   = stGastate.u8FadingFctr;
007d0c  e59f0ec8          LDR      r0,|L1.35804|
007d10  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
007d14  e5cd00a9          STRB     r0,[sp,#0xa9]
;;;3848       stParamBlit.eTranspColEn   = stGastate.eTranspColEn;
007d18  e59f0ebc          LDR      r0,|L1.35804|
007d1c  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
007d20  e5cd00a6          STRB     r0,[sp,#0xa6]
;;;3849       stParamBlit.u32SrcTransVal = stGastate.u32SrcTransVal;
007d24  e59f0eb0          LDR      r0,|L1.35804|
007d28  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
007d2c  e58d00ac          STR      r0,[sp,#0xac]
;;;3850       stParamBlit.u16DstTransVal = stGastate.u16DstTransVal;
007d30  e59f0ea4          LDR      r0,|L1.35804|
007d34  e1d011b4          LDRH     r1,[r0,#0x14]  ; stGastate
007d38  e1cd1bb0          STRH     r1,[sp,#0xb0]
;;;3851       stParamBlit.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
007d3c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
007d40  e5cd00b2          STRB     r0,[sp,#0xb2]
;;;3852       stParamBlit.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
007d44  e59f0e90          LDR      r0,|L1.35804|
007d48  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
007d4c  e5cd00b3          STRB     r0,[sp,#0xb3]
;;;3853   
;;;3854       /* handle clip window */
;;;3855       stParamBlit.eClipWndEn = stGastate.eClipWndEn;
007d50  e59f0e84          LDR      r0,|L1.35804|
007d54  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
007d58  e5cd00a8          STRB     r0,[sp,#0xa8]
;;;3856   
;;;3857       /* rotation settings tip */
;;;3858       stMemTip.u16SrcWidth     = pstSrcImage->u16Width;
007d5c  e1d610b4          LDRH     r1,[r6,#4]
007d60  e1cd19b2          STRH     r1,[sp,#0x92]
;;;3859       stMemTip.u32DstAddr      = pstDstImage->u32Address;
007d64  e5970000          LDR      r0,[r7,#0]
007d68  e58d009c          STR      r0,[sp,#0x9c]
;;;3860       stMemTip.u16DstImgWidth  = pstDstImage->u16Width;
007d6c  e1d710b4          LDRH     r1,[r7,#4]
007d70  e1cd1ab0          STRH     r1,[sp,#0xa0]
;;;3861       stMemTip.u16DstImgHeight = pstDstImage->u16Height;
007d74  e1d710b6          LDRH     r1,[r7,#6]
007d78  e1cd1ab2          STRH     r1,[sp,#0xa2]
;;;3862       stMemTip.u16DotCnt       = pstDef->u16TipWidth;
007d7c  e1d810b4          LDRH     r1,[r8,#4]
007d80  e1cd19b8          STRH     r1,[sp,#0x98]
;;;3863   
;;;3864       /* handle clip window rotate */
;;;3865       stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
007d84  e59f0e50          LDR      r0,|L1.35804|
007d88  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
007d8c  e5cd007a          STRB     r0,[sp,#0x7a]
;;;3866       if (stParamTip.stRotCfg.eClipWndEn == GA_EN)
007d90  e5dd007a          LDRB     r0,[sp,#0x7a]
007d94  e3500001          CMP      r0,#1
007d98  1a00000b          BNE      |L1.32204|
;;;3867       {
;;;3868           stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
007d9c  e59f0e38          LDR      r0,|L1.35804|
007da0  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
007da4  e1cd08b0          STRH     r0,[sp,#0x80]
;;;3869           stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
007da8  e59f0e2c          LDR      r0,|L1.35804|
007dac  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
007db0  e1cd08b2          STRH     r0,[sp,#0x82]
;;;3870           stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
007db4  e59f0e20          LDR      r0,|L1.35804|
007db8  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
007dbc  e1cd08b4          STRH     r0,[sp,#0x84]
;;;3871           stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
007dc0  e59f0e14          LDR      r0,|L1.35804|
007dc4  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
007dc8  e1cd08b6          STRH     r0,[sp,#0x86]
                  |L1.32204|
;;;3872       }
;;;3873   
;;;3874       stParamTip.stRotCfg.eFilterEn     = stGastate.eFilterEn;
007dcc  e59f0e08          LDR      r0,|L1.35804|
007dd0  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
007dd4  e5cd007b          STRB     r0,[sp,#0x7b]
;;;3875       stParamTip.i16RotCentX            = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*((pstSrcImage->u16Width >> 1U) - (pstDef->u16TipWidth >> 1U));
007dd8  e1d600b4          LDRH     r0,[r6,#4]
007ddc  e1a000c0          ASR      r0,r0,#1
007de0  e1d810b4          LDRH     r1,[r8,#4]
007de4  e04000c1          SUB      r0,r0,r1,ASR #1
007de8  e1d610f8          LDRSH    r1,[r6,#8]
007dec  e51f2544          LDR      r2,|L1.30896|
007df0  e5922000          LDR      r2,[r2,#0]  ; u32SubResCPos
007df4  e2622011          RSB      r2,r2,#0x11
007df8  e0601092          MLS      r0,r2,r0,r1
007dfc  e6bf1070          SXTH     r1,r0
007e00  e1cd18b8          STRH     r1,[sp,#0x88]
;;;3876       stParamTip.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
007e04  e51f155c          LDR      r1,|L1.30896|
007e08  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007e0c  e2610011          RSB      r0,r1,#0x11
007e10  ebfffffe          BL       __aeabi_ui2f
007e14  e58d0010          STR      r0,[sp,#0x10]
007e18  e1d600f8          LDRSH    r0,[r6,#8]
007e1c  ebfffffe          BL       __aeabi_i2f
007e20  e51f1574          LDR      r1,|L1.30900|
007e24  e58d0008          STR      r0,[sp,#8]
007e28  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
007e2c  e2610011          RSB      r0,r1,#0x11
007e30  ebfffffe          BL       __aeabi_ui2f
007e34  e58d0004          STR      r0,[sp,#4]
007e38  e59d1008          LDR      r1,[sp,#8]
007e3c  ebfffffe          BL       __aeabi_fmul
007e40  e58d000c          STR      r0,[sp,#0xc]
007e44  e59d1010          LDR      r1,[sp,#0x10]
007e48  ebfffffe          BL       __aeabi_fdiv
007e4c  e58d0014          STR      r0,[sp,#0x14]
007e50  ebfffffe          BL       __aeabi_f2uiz
007e54  e59d1100          LDR      r1,[sp,#0x100]
007e58  e0800001          ADD      r0,r0,r1
007e5c  e6bf1070          SXTH     r1,r0
007e60  e1cd18bc          STRH     r1,[sp,#0x8c]
;;;3877       stParamTip.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
007e64  e51f15bc          LDR      r1,|L1.30896|
007e68  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007e6c  e2610011          RSB      r0,r1,#0x11
007e70  ebfffffe          BL       __aeabi_ui2f
007e74  e58d0010          STR      r0,[sp,#0x10]
007e78  e1d600fa          LDRSH    r0,[r6,#0xa]
007e7c  ebfffffe          BL       __aeabi_i2f
007e80  e51f15d4          LDR      r1,|L1.30900|
007e84  e58d0008          STR      r0,[sp,#8]
007e88  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
007e8c  e2610011          RSB      r0,r1,#0x11
007e90  ebfffffe          BL       __aeabi_ui2f
007e94  e58d0004          STR      r0,[sp,#4]
007e98  e59d1008          LDR      r1,[sp,#8]
007e9c  ebfffffe          BL       __aeabi_fmul
007ea0  e58d000c          STR      r0,[sp,#0xc]
007ea4  e59d1010          LDR      r1,[sp,#0x10]
007ea8  ebfffffe          BL       __aeabi_fdiv
007eac  e58d0014          STR      r0,[sp,#0x14]
007eb0  ebfffffe          BL       __aeabi_f2uiz
007eb4  e59d1104          LDR      r1,[sp,#0x104]
007eb8  e0800001          ADD      r0,r0,r1
007ebc  e6bf1070          SXTH     r1,r0
007ec0  e1cd18be          STRH     r1,[sp,#0x8e]
;;;3878       stParamTip.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
007ec4  e59f0d10          LDR      r0,|L1.35804|
007ec8  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
007ecc  e5cd007d          STRB     r0,[sp,#0x7d]
;;;3879       stParamTip.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
007ed0  e59f0d04          LDR      r0,|L1.35804|
007ed4  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
007ed8  e5cd007e          STRB     r0,[sp,#0x7e]
;;;3880   
;;;3881       /* rotation settings base */
;;;3882       stMemBase.u16SrcWidth     = pstSrcImage->u16Width;
007edc  e1d610b4          LDRH     r1,[r6,#4]
007ee0  e1cd16b6          STRH     r1,[sp,#0x66]
;;;3883       stMemBase.u32DstAddr      = pstDstImage->u32Address;
007ee4  e5970000          LDR      r0,[r7,#0]
007ee8  e58d0070          STR      r0,[sp,#0x70]
;;;3884       stMemBase.u16DstImgWidth  = pstDstImage->u16Width;
007eec  e1d710b4          LDRH     r1,[r7,#4]
007ef0  e1cd17b4          STRH     r1,[sp,#0x74]
;;;3885       stMemBase.u16DstImgHeight = pstDstImage->u16Height;
007ef4  e1d710b6          LDRH     r1,[r7,#6]
007ef8  e1cd17b6          STRH     r1,[sp,#0x76]
;;;3886       stMemBase.u16DotCnt       = pstSrcImage->u16Width >> 1U;
007efc  e1d600b4          LDRH     r0,[r6,#4]
007f00  e1a010c0          ASR      r1,r0,#1
007f04  e1cd16bc          STRH     r1,[sp,#0x6c]
;;;3887   
;;;3888       /* handle clip window rotate */
;;;3889       stParamBase.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
007f08  e59f0ccc          LDR      r0,|L1.35804|
007f0c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
007f10  e5cd004e          STRB     r0,[sp,#0x4e]
;;;3890       if (stParamBase.stRotCfg.eClipWndEn == GA_EN)
007f14  e5dd004e          LDRB     r0,[sp,#0x4e]
007f18  e3500001          CMP      r0,#1
007f1c  1a00000b          BNE      |L1.32592|
;;;3891       {
;;;3892           stParamBase.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
007f20  e59f0cb4          LDR      r0,|L1.35804|
007f24  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
007f28  e1cd05b4          STRH     r0,[sp,#0x54]
;;;3893           stParamBase.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
007f2c  e59f0ca8          LDR      r0,|L1.35804|
007f30  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
007f34  e1cd05b6          STRH     r0,[sp,#0x56]
;;;3894           stParamBase.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
007f38  e59f0c9c          LDR      r0,|L1.35804|
007f3c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
007f40  e1cd05b8          STRH     r0,[sp,#0x58]
;;;3895           stParamBase.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
007f44  e59f0c90          LDR      r0,|L1.35804|
007f48  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
007f4c  e1cd05ba          STRH     r0,[sp,#0x5a]
                  |L1.32592|
;;;3896       }
;;;3897   
;;;3898       stParamBase.stRotCfg.eFilterEn     = stGastate.eFilterEn;
007f50  e59f0c84          LDR      r0,|L1.35804|
007f54  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
007f58  e5cd004f          STRB     r0,[sp,#0x4f]
;;;3899       stParamBase.i16RotCentY            = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*pstDef->u16TipHeight;
007f5c  e1d600fa          LDRSH    r0,[r6,#0xa]
007f60  e51f16b8          LDR      r1,|L1.30896|
007f64  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007f68  e2611011          RSB      r1,r1,#0x11
007f6c  e1d820b2          LDRH     r2,[r8,#2]
007f70  e0600291          MLS      r0,r1,r2,r0
007f74  e6bf1070          SXTH     r1,r0
007f78  e1cd15be          STRH     r1,[sp,#0x5e]
;;;3900       stParamBase.i16OffsetX             = u32PosX + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterX/(float32_t)(17U-u32SubResCPos));
007f7c  e51f16d4          LDR      r1,|L1.30896|
007f80  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007f84  e2610011          RSB      r0,r1,#0x11
007f88  ebfffffe          BL       __aeabi_ui2f
007f8c  e58d0010          STR      r0,[sp,#0x10]
007f90  e1d600f8          LDRSH    r0,[r6,#8]
007f94  ebfffffe          BL       __aeabi_i2f
007f98  e51f16ec          LDR      r1,|L1.30900|
007f9c  e58d0008          STR      r0,[sp,#8]
007fa0  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
007fa4  e2610011          RSB      r0,r1,#0x11
007fa8  ebfffffe          BL       __aeabi_ui2f
007fac  e58d0004          STR      r0,[sp,#4]
007fb0  e59d1008          LDR      r1,[sp,#8]
007fb4  ebfffffe          BL       __aeabi_fmul
007fb8  e58d000c          STR      r0,[sp,#0xc]
007fbc  e59d1010          LDR      r1,[sp,#0x10]
007fc0  ebfffffe          BL       __aeabi_fdiv
007fc4  e58d0014          STR      r0,[sp,#0x14]
007fc8  ebfffffe          BL       __aeabi_f2uiz
007fcc  e59d1100          LDR      r1,[sp,#0x100]
007fd0  e0800001          ADD      r0,r0,r1
007fd4  e6bf1070          SXTH     r1,r0
007fd8  e1cd16b0          STRH     r1,[sp,#0x60]
;;;3901       stParamBase.i16OffsetY             = u32PosY + (uint32_t)((float32_t)(17U-u32SubResPPos)*(float32_t)pstSrcImage->i16CenterY/(float32_t)(17U-u32SubResCPos));
007fdc  e51f1734          LDR      r1,|L1.30896|
007fe0  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
007fe4  e2610011          RSB      r0,r1,#0x11
007fe8  ebfffffe          BL       __aeabi_ui2f
007fec  e58d0010          STR      r0,[sp,#0x10]
007ff0  e1d600fa          LDRSH    r0,[r6,#0xa]
007ff4  ebfffffe          BL       __aeabi_i2f
007ff8  e51f174c          LDR      r1,|L1.30900|
007ffc  e58d0008          STR      r0,[sp,#8]
008000  e5911000          LDR      r1,[r1,#0]  ; u32SubResPPos
008004  e2610011          RSB      r0,r1,#0x11
008008  ebfffffe          BL       __aeabi_ui2f
00800c  e58d0004          STR      r0,[sp,#4]
008010  e59d1008          LDR      r1,[sp,#8]
008014  ebfffffe          BL       __aeabi_fmul
008018  e58d000c          STR      r0,[sp,#0xc]
00801c  e59d1010          LDR      r1,[sp,#0x10]
008020  ebfffffe          BL       __aeabi_fdiv
008024  e58d0014          STR      r0,[sp,#0x14]
008028  ebfffffe          BL       __aeabi_f2uiz
00802c  e59d1104          LDR      r1,[sp,#0x104]
008030  e0800001          ADD      r0,r0,r1
008034  e6bf1070          SXTH     r1,r0
008038  e1cd16b2          STRH     r1,[sp,#0x62]
;;;3902       stParamBase.stRotCfg.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00803c  e59f0b98          LDR      r0,|L1.35804|
008040  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
008044  e5cd0051          STRB     r0,[sp,#0x51]
;;;3903       stParamBase.stRotCfg.u8DstAlphaVal = stGastate.u8DstAlphaVal;
008048  e59f0b8c          LDR      r0,|L1.35804|
00804c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
008050  e5cd0052          STRB     r0,[sp,#0x52]
;;;3904   
;;;3905       /* restore blend rotation */
;;;3906       stMemBlend.u16SrcWidth = pstSrcImageBg->u16Width;
008054  e1d510b4          LDRH     r1,[r5,#4]
008058  e1cd13b8          STRH     r1,[sp,#0x38]
;;;3907       stMemBlend.u16DstWidth = pstDstImage->u16Width;
00805c  e1d710b4          LDRH     r1,[r7,#4]
008060  e1cd14b0          STRH     r1,[sp,#0x40]
;;;3908   
;;;3909       stParamBlend.eClipWndEn     = stGastate.eClipWndEn;
008064  e59f0b70          LDR      r0,|L1.35804|
008068  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00806c  e5cd0029          STRB     r0,[sp,#0x29]
;;;3910       stParamBlend.eFadeMode      = stGastate.eFadeMode;
008070  e59f0b64          LDR      r0,|L1.35804|
008074  e5d0000a          LDRB     r0,[r0,#0xa]  ; stGastate
008078  e5cd0028          STRB     r0,[sp,#0x28]
;;;3911       stParamBlend.u8FadingFctr   = stGastate.u8FadingFctr;
00807c  e59f0b58          LDR      r0,|L1.35804|
008080  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
008084  e5cd002b          STRB     r0,[sp,#0x2b]
;;;3912       stParamBlend.eTranspColEn   = stGastate.eTranspColEn;
008088  e59f0b4c          LDR      r0,|L1.35804|
00808c  e5d0000c          LDRB     r0,[r0,#0xc]  ; stGastate
008090  e5cd0027          STRB     r0,[sp,#0x27]
;;;3913       stParamBlend.u32SrcTransVal = stGastate.u32SrcTransVal;
008094  e59f0b40          LDR      r0,|L1.35804|
008098  e5900010          LDR      r0,[r0,#0x10]  ; stGastate
00809c  e58d002c          STR      r0,[sp,#0x2c]
;;;3914       stParamBlend.u16DstTransVal = stGastate.u16DstTransVal;
0080a0  e59f0b34          LDR      r0,|L1.35804|
0080a4  e1d011b4          LDRH     r1,[r0,#0x14]  ; stGastate
0080a8  e1cd13b0          STRH     r1,[sp,#0x30]
;;;3915       stParamBlend.u8SrcAlphaVal  = stGastate.u8SrcAlphaVal;
0080ac  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0080b0  e5cd0032          STRB     r0,[sp,#0x32]
;;;3916       stParamBlend.u8DstAlphaVal  = stGastate.u8DstAlphaVal;
0080b4  e59f0b20          LDR      r0,|L1.35804|
0080b8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
0080bc  e5cd0033          STRB     r0,[sp,#0x33]
;;;3917   
;;;3918       stParamBlend.eRedChPrtEn    = stGastate.eRedChPrtEn;
0080c0  e59f0b14          LDR      r0,|L1.35804|
0080c4  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
0080c8  e5cd0022          STRB     r0,[sp,#0x22]
;;;3919       stParamBlend.eGreenChPrtEn  = stGastate.eGreenChPrtEn;
0080cc  e59f0b08          LDR      r0,|L1.35804|
0080d0  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
0080d4  e5cd0023          STRB     r0,[sp,#0x23]
;;;3920       stParamBlend.eBlueChPrtEn   = stGastate.eBlueChPrtEn;
0080d8  e59f0afc          LDR      r0,|L1.35804|
0080dc  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
0080e0  e5cd0024          STRB     r0,[sp,#0x24]
;;;3921       stParamBlend.eAlphaChPrtEn  = stGastate.eAlphaChPrtEn;
0080e4  e59f0af0          LDR      r0,|L1.35804|
0080e8  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
0080ec  e5cd0025          STRB     r0,[sp,#0x25]
;;;3922       stParamBlend.eRastOpEn      = GA_DIS;
0080f0  e3a00000          MOV      r0,#0
0080f4  e5cd0026          STRB     r0,[sp,#0x26]
;;;3923       stParamBlend.eBlndOrder     = GA_BEHIND_DEST;
0080f8  e3a00001          MOV      r0,#1
0080fc  e5cd002a          STRB     r0,[sp,#0x2a]
;;;3924       
;;;3925       u32Div = pstDef->u16TipHeight/pstDef->u16BlockHeight;
008100  e1d810b0          LDRH     r1,[r8,#0]
008104  e1d800b2          LDRH     r0,[r8,#2]
008108  ebfffffe          BL       __aeabi_idiv
00810c  e58d00c8          STR      r0,[sp,#0xc8]
;;;3926   
;;;3927       /* restore old background of tip */
;;;3928       for (u32Count=0; u32Count<u32Div; u32Count++)
008110  e3a04000          MOV      r4,#0
008114  ea000061          B        |L1.33440|
                  |L1.33048|
;;;3929       {
;;;3930           stMemBlit.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
008118  e51f0850          LDR      r0,|L1.30928|
00811c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008120  e0800004          ADD      r0,r0,r4
008124  e59f1ab4          LDR      r1,|L1.35808|
008128  e0810200          ADD      r0,r1,r0,LSL #4
00812c  e1d000b8          LDRH     r0,[r0,#8]
008130  e51f1868          LDR      r1,|L1.30928|
008134  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008138  e0811004          ADD      r1,r1,r4
00813c  e59f2a9c          LDR      r2,|L1.35808|
008140  e7921201          LDR      r1,[r2,r1,LSL #4]
008144  e0400001          SUB      r0,r0,r1
008148  e6ff1070          UXTH     r1,r0
00814c  e1cd1cb4          STRH     r1,[sp,#0xc4]
;;;3931           stMemBlit.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1];
008150  e51f0888          LDR      r0,|L1.30928|
008154  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008158  e0800004          ADD      r0,r0,r4
00815c  e2821000          ADD      r1,r2,#0
008160  e0810200          ADD      r0,r1,r0,LSL #4
008164  e1d000bc          LDRH     r0,[r0,#0xc]
008168  e51f18a0          LDR      r1,|L1.30928|
00816c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008170  e0811004          ADD      r1,r1,r4
008174  e0821201          ADD      r1,r2,r1,LSL #4
008178  e1d110b4          LDRH     r1,[r1,#4]
00817c  e0400001          SUB      r0,r0,r1
008180  e6ff1070          UXTH     r1,r0
008184  e1cd1cb6          STRH     r1,[sp,#0xc6]
;;;3932           /* handle clip window */
;;;3933           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlit.u16DotCnt, stMemBlit.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]);
008188  e51f08c0          LDR      r0,|L1.30928|
00818c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008190  e0800004          ADD      r0,r0,r4
008194  e2821000          ADD      r1,r2,#0
008198  e0810200          ADD      r0,r1,r0,LSL #4
00819c  e5900004          LDR      r0,[r0,#4]
0081a0  e51f18d8          LDR      r1,|L1.30928|
0081a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0081a8  e0811004          ADD      r1,r1,r4
0081ac  e7921201          LDR      r1,[r2,r1,LSL #4]
0081b0  e58d0004          STR      r0,[sp,#4]
0081b4  e59f0a20          LDR      r0,|L1.35804|
0081b8  e58d1000          STR      r1,[sp,#0]
0081bc  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
0081c0  e1dd2cb6          LDRH     r2,[sp,#0xc6]
0081c4  e1dd1cb4          LDRH     r1,[sp,#0xc4]
0081c8  e1a00007          MOV      r0,r7
0081cc  ebfffffe          BL       eHandleClipWindowBlit
0081d0  e1a0b000          MOV      r11,r0
;;;3934           if(eDraw == GA_EN)
0081d4  e35b0001          CMP      r11,#1
0081d8  1a00002f          BNE      |L1.33436|
;;;3935           {
;;;3936               stParamBlit.eClipWndEn = eDraw;
0081dc  e5cdb0a8          STRB     r11,[sp,#0xa8]
;;;3937               stMemBlit.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
0081e0  e51f0918          LDR      r0,|L1.30928|
0081e4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0081e8  e0800004          ADD      r0,r0,r4
0081ec  e59f19ec          LDR      r1,|L1.35808|
0081f0  e0810200          ADD      r0,r1,r0,LSL #4
0081f4  e5900004          LDR      r0,[r0,#4]
0081f8  e1d510fa          LDRSH    r1,[r5,#0xa]
0081fc  e0400001          SUB      r0,r0,r1
008200  e5951000          LDR      r1,[r5,#0]
008204  e1d520b4          LDRH     r2,[r5,#4]
008208  e0020992          MUL      r2,r2,r9
00820c  e0201092          MLA      r0,r2,r0,r1
008210  e51f1948          LDR      r1,|L1.30928|
008214  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008218  e0811004          ADD      r1,r1,r4
00821c  e59f29bc          LDR      r2,|L1.35808|
008220  e7921201          LDR      r1,[r2,r1,LSL #4]
008224  e1d520f8          LDRSH    r2,[r5,#8]
008228  e0411002          SUB      r1,r1,r2
00822c  e0200199          MLA      r0,r9,r1,r0
008230  e58d00b8          STR      r0,[sp,#0xb8]
;;;3938                                      + u8SrcNoOfBytesBg*(u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;3939               stMemBlit.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+u32Count][0];
008234  e5970000          LDR      r0,[r7,#0]
008238  e1d710b4          LDRH     r1,[r7,#4]
00823c  e0010a91          MUL      r1,r1,r10
008240  e51f2978          LDR      r2,|L1.30928|
008244  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008248  e0822004          ADD      r2,r2,r4
00824c  e59f398c          LDR      r3,|L1.35808|
008250  e0832202          ADD      r2,r3,r2,LSL #4
008254  e5922004          LDR      r2,[r2,#4]
008258  e0200291          MLA      r0,r1,r2,r0
00825c  e51f1994          LDR      r1,|L1.30928|
008260  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008264  e0811004          ADD      r1,r1,r4
008268  e2832000          ADD      r2,r3,#0
00826c  e7921201          LDR      r1,[r2,r1,LSL #4]
008270  e020019a          MLA      r0,r10,r1,r0
008274  e58d00c0          STR      r0,[sp,#0xc0]
;;;3940               vBlit_OverwriteRGB(&stMemBlit, &stParamBlit, pstWriteList);
008278  e51f09c8          LDR      r0,|L1.30904|
00827c  e28d10a4          ADD      r1,sp,#0xa4
008280  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
008284  e28d00b4          ADD      r0,sp,#0xb4
008288  ebfffffe          BL       vBlit_OverwriteRGB
;;;3941               vGfListExecute();
00828c  ebfffffe          BL       vGfListExecute
;;;3942               stParamBlit.eClipWndEn = stGastate.eClipWndEn;
008290  e59f0944          LDR      r0,|L1.35804|
008294  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008298  e5cd00a8          STRB     r0,[sp,#0xa8]
                  |L1.33436|
00829c  e2844001          ADD      r4,r4,#1              ;3928
                  |L1.33440|
0082a0  e59d00c8          LDR      r0,[sp,#0xc8]         ;3928
0082a4  e1540000          CMP      r4,r0                 ;3928
0082a8  3affff9a          BCC      |L1.33048|
;;;3943           }
;;;3944       }
;;;3945   
;;;3946       if ((u32Div*pstDef->u16BlockHeight) != pstDef->u16TipHeight)
0082ac  e1d810b0          LDRH     r1,[r8,#0]
0082b0  e59d00c8          LDR      r0,[sp,#0xc8]
0082b4  e0000091          MUL      r0,r1,r0
0082b8  e1d810b2          LDRH     r1,[r8,#2]
0082bc  e1500001          CMP      r0,r1
0082c0  0a000063          BEQ      |L1.33876|
;;;3947       {
;;;3948           
;;;3949           stMemBlit.u16DotCnt  = u32MinMaxValues_old_old[u32NeedleNumber+3][2] - u32MinMaxValues_old_old[u32NeedleNumber+3][0];
0082c4  e59f0914          LDR      r0,|L1.35808|
0082c8  e51f1a00          LDR      r1,|L1.30928|
0082cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0082d0  e2811003          ADD      r1,r1,#3
0082d4  e0800201          ADD      r0,r0,r1,LSL #4
0082d8  e1d000b8          LDRH     r0,[r0,#8]
0082dc  e59f18fc          LDR      r1,|L1.35808|
0082e0  e51f2a18          LDR      r2,|L1.30928|
0082e4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0082e8  e2822003          ADD      r2,r2,#3
0082ec  e7911202          LDR      r1,[r1,r2,LSL #4]
0082f0  e0400001          SUB      r0,r0,r1
0082f4  e6ff1070          UXTH     r1,r0
0082f8  e1cd1cb4          STRH     r1,[sp,#0xc4]
;;;3950           stMemBlit.u16LineCnt = u32MinMaxValues_old_old[u32NeedleNumber+3][3] - u32MinMaxValues_old_old[u32NeedleNumber+3][1];
0082fc  e59f08dc          LDR      r0,|L1.35808|
008300  e51f1a38          LDR      r1,|L1.30928|
008304  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008308  e2811003          ADD      r1,r1,#3
00830c  e0800201          ADD      r0,r0,r1,LSL #4
008310  e1d010bc          LDRH     r1,[r0,#0xc]
008314  e59f08c4          LDR      r0,|L1.35808|
008318  e51f2a50          LDR      r2,|L1.30928|
00831c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008320  e2822003          ADD      r2,r2,#3
008324  e0800202          ADD      r0,r0,r2,LSL #4
008328  e1d000b4          LDRH     r0,[r0,#4]
00832c  e0410000          SUB      r0,r1,r0
008330  e6ff1070          UXTH     r1,r0
008334  e1cd1cb6          STRH     r1,[sp,#0xc6]
;;;3951           /* handle clip window */
;;;3952           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlit.u16DotCnt, stMemBlit.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues_old_old[u32NeedleNumber+3][0], u32MinMaxValues_old_old[u32NeedleNumber+3][1]);
008338  e59f08a0          LDR      r0,|L1.35808|
00833c  e51f1a74          LDR      r1,|L1.30928|
008340  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008344  e2811003          ADD      r1,r1,#3
008348  e0800201          ADD      r0,r0,r1,LSL #4
00834c  e5900004          LDR      r0,[r0,#4]
008350  e59f1888          LDR      r1,|L1.35808|
008354  e51f2a8c          LDR      r2,|L1.30928|
008358  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00835c  e2822003          ADD      r2,r2,#3
008360  e7911202          LDR      r1,[r1,r2,LSL #4]
008364  e58d0004          STR      r0,[sp,#4]
008368  e59f086c          LDR      r0,|L1.35804|
00836c  e58d1000          STR      r1,[sp,#0]
008370  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
008374  e1dd2cb6          LDRH     r2,[sp,#0xc6]
008378  e1dd1cb4          LDRH     r1,[sp,#0xc4]
00837c  e1a00007          MOV      r0,r7
008380  ebfffffe          BL       eHandleClipWindowBlit
008384  e1a0b000          MOV      r11,r0
;;;3953           if(eDraw == GA_EN)
008388  e35b0001          CMP      r11,#1
00838c  1a000030          BNE      |L1.33876|
;;;3954           {
;;;3955               stParamBlit.eClipWndEn = GA_EN;
008390  e3a00001          MOV      r0,#1
008394  e5cd00a8          STRB     r0,[sp,#0xa8]
;;;3956               stMemBlit.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues_old_old[u32NeedleNumber+3][1]-pstSrcImageBg->i16CenterY)
008398  e59f0840          LDR      r0,|L1.35808|
00839c  e51f1ad4          LDR      r1,|L1.30928|
0083a0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0083a4  e2811003          ADD      r1,r1,#3
0083a8  e0800201          ADD      r0,r0,r1,LSL #4
0083ac  e5900004          LDR      r0,[r0,#4]
0083b0  e1d510fa          LDRSH    r1,[r5,#0xa]
0083b4  e0400001          SUB      r0,r0,r1
0083b8  e5951000          LDR      r1,[r5,#0]
0083bc  e1d520b4          LDRH     r2,[r5,#4]
0083c0  e0020992          MUL      r2,r2,r9
0083c4  e0211092          MLA      r1,r2,r0,r1
0083c8  e59f0810          LDR      r0,|L1.35808|
0083cc  e51f2b04          LDR      r2,|L1.30928|
0083d0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0083d4  e2822003          ADD      r2,r2,#3
0083d8  e7900202          LDR      r0,[r0,r2,LSL #4]
0083dc  e1d520f8          LDRSH    r2,[r5,#8]
0083e0  e0400002          SUB      r0,r0,r2
0083e4  e0201099          MLA      r0,r9,r0,r1
0083e8  e58d00b8          STR      r0,[sp,#0xb8]
;;;3957                                      + u8SrcNoOfBytesBg*(u32MinMaxValues_old_old[u32NeedleNumber+3][0]-pstSrcImageBg->i16CenterX);
;;;3958               stMemBlit.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues_old_old[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues_old_old[u32NeedleNumber+3][0];
0083ec  e5971000          LDR      r1,[r7,#0]
0083f0  e1d700b4          LDRH     r0,[r7,#4]
0083f4  e0020a90          MUL      r2,r0,r10
0083f8  e59f07e0          LDR      r0,|L1.35808|
0083fc  e51f3b34          LDR      r3,|L1.30928|
008400  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
008404  e2833003          ADD      r3,r3,#3
008408  e0800203          ADD      r0,r0,r3,LSL #4
00840c  e5900004          LDR      r0,[r0,#4]
008410  e0211092          MLA      r1,r2,r0,r1
008414  e59f07c4          LDR      r0,|L1.35808|
008418  e51f2b50          LDR      r2,|L1.30928|
00841c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008420  e2822003          ADD      r2,r2,#3
008424  e7900202          LDR      r0,[r0,r2,LSL #4]
008428  e020109a          MLA      r0,r10,r0,r1
00842c  e58d00c0          STR      r0,[sp,#0xc0]
;;;3959               vBlit_OverwriteRGB(&stMemBlit, &stParamBlit, pstWriteList);
008430  e51f0b80          LDR      r0,|L1.30904|
008434  e28d10a4          ADD      r1,sp,#0xa4
008438  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00843c  e28d00b4          ADD      r0,sp,#0xb4
008440  ebfffffe          BL       vBlit_OverwriteRGB
;;;3960               vGfListExecute();
008444  ebfffffe          BL       vGfListExecute
;;;3961               stParamBlit.eClipWndEn = stGastate.eClipWndEn;
008448  e59f078c          LDR      r0,|L1.35804|
00844c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008450  e5cd00a8          STRB     r0,[sp,#0xa8]
                  |L1.33876|
;;;3962           }
;;;3963       }
;;;3964   
;;;3965       /* restore old background of base */
;;;3966       for (u32Count=0U; u32Count<2U; u32Count++)
008454  e3a04000          MOV      r4,#0
008458  ea000061          B        |L1.34276|
                  |L1.33884|
;;;3967       {
;;;3968           stMemBlit.u16DotCnt  = u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][2] - u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0];
00845c  e51f0b94          LDR      r0,|L1.30928|
008460  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008464  e0800004          ADD      r0,r0,r4
008468  e51f1bb4          LDR      r1,|L1.30908|
00846c  e0810200          ADD      r0,r1,r0,LSL #4
008470  e1d000b8          LDRH     r0,[r0,#8]
008474  e51f1bac          LDR      r1,|L1.30928|
008478  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00847c  e0811004          ADD      r1,r1,r4
008480  e51f2bcc          LDR      r2,|L1.30908|
008484  e7921201          LDR      r1,[r2,r1,LSL #4]
008488  e0400001          SUB      r0,r0,r1
00848c  e6ff1070          UXTH     r1,r0
008490  e1cd1cb4          STRH     r1,[sp,#0xc4]
;;;3969           stMemBlit.u16LineCnt = u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][3] - u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1];
008494  e51f0bcc          LDR      r0,|L1.30928|
008498  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00849c  e0800004          ADD      r0,r0,r4
0084a0  e2821000          ADD      r1,r2,#0
0084a4  e0810200          ADD      r0,r1,r0,LSL #4
0084a8  e1d000bc          LDRH     r0,[r0,#0xc]
0084ac  e51f1be4          LDR      r1,|L1.30928|
0084b0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0084b4  e0811004          ADD      r1,r1,r4
0084b8  e0821201          ADD      r1,r2,r1,LSL #4
0084bc  e1d110b4          LDRH     r1,[r1,#4]
0084c0  e0400001          SUB      r0,r0,r1
0084c4  e6ff1070          UXTH     r1,r0
0084c8  e1cd1cb6          STRH     r1,[sp,#0xc6]
;;;3970           /* handle clip window */
;;;3971           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlit.u16DotCnt, stMemBlit.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0], u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1]);
0084cc  e51f0c04          LDR      r0,|L1.30928|
0084d0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0084d4  e0800004          ADD      r0,r0,r4
0084d8  e2821000          ADD      r1,r2,#0
0084dc  e0810200          ADD      r0,r1,r0,LSL #4
0084e0  e5900004          LDR      r0,[r0,#4]
0084e4  e51f1c1c          LDR      r1,|L1.30928|
0084e8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0084ec  e0811004          ADD      r1,r1,r4
0084f0  e7921201          LDR      r1,[r2,r1,LSL #4]
0084f4  e58d0004          STR      r0,[sp,#4]
0084f8  e59f06dc          LDR      r0,|L1.35804|
0084fc  e58d1000          STR      r1,[sp,#0]
008500  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
008504  e1dd2cb6          LDRH     r2,[sp,#0xc6]
008508  e1dd1cb4          LDRH     r1,[sp,#0xc4]
00850c  e1a00007          MOV      r0,r7
008510  ebfffffe          BL       eHandleClipWindowBlit
008514  e1a0b000          MOV      r11,r0
;;;3972           if(eDraw == GA_EN)
008518  e35b0001          CMP      r11,#1
00851c  1a00002f          BNE      |L1.34272|
;;;3973           {
;;;3974               stParamBlit.eClipWndEn = eDraw;
008520  e5cdb0a8          STRB     r11,[sp,#0xa8]
;;;3975               stMemBlit.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
008524  e51f0c5c          LDR      r0,|L1.30928|
008528  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00852c  e0800004          ADD      r0,r0,r4
008530  e51f1c7c          LDR      r1,|L1.30908|
008534  e0810200          ADD      r0,r1,r0,LSL #4
008538  e5900004          LDR      r0,[r0,#4]
00853c  e1d510fa          LDRSH    r1,[r5,#0xa]
008540  e0400001          SUB      r0,r0,r1
008544  e5951000          LDR      r1,[r5,#0]
008548  e1d520b4          LDRH     r2,[r5,#4]
00854c  e0020992          MUL      r2,r2,r9
008550  e0201092          MLA      r0,r2,r0,r1
008554  e51f1c8c          LDR      r1,|L1.30928|
008558  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00855c  e0811004          ADD      r1,r1,r4
008560  e51f2cac          LDR      r2,|L1.30908|
008564  e7921201          LDR      r1,[r2,r1,LSL #4]
008568  e1d520f8          LDRSH    r2,[r5,#8]
00856c  e0411002          SUB      r1,r1,r2
008570  e0200199          MLA      r0,r9,r1,r0
008574  e58d00b8          STR      r0,[sp,#0xb8]
;;;3976                                      + u8SrcNoOfBytesBg*(u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;3977               stMemBlit.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValuesBase_old_old[u32NeedleNumber+u32Count][0];
008578  e5970000          LDR      r0,[r7,#0]
00857c  e1d710b4          LDRH     r1,[r7,#4]
008580  e0010a91          MUL      r1,r1,r10
008584  e51f2cbc          LDR      r2,|L1.30928|
008588  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00858c  e0822004          ADD      r2,r2,r4
008590  e51f3cdc          LDR      r3,|L1.30908|
008594  e0832202          ADD      r2,r3,r2,LSL #4
008598  e5922004          LDR      r2,[r2,#4]
00859c  e0200291          MLA      r0,r1,r2,r0
0085a0  e51f1cd8          LDR      r1,|L1.30928|
0085a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0085a8  e0811004          ADD      r1,r1,r4
0085ac  e2832000          ADD      r2,r3,#0
0085b0  e7921201          LDR      r1,[r2,r1,LSL #4]
0085b4  e020019a          MLA      r0,r10,r1,r0
0085b8  e58d00c0          STR      r0,[sp,#0xc0]
;;;3978               vBlit_OverwriteRGB(&stMemBlit, &stParamBlit, pstWriteList);
0085bc  e51f0d0c          LDR      r0,|L1.30904|
0085c0  e28d10a4          ADD      r1,sp,#0xa4
0085c4  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0085c8  e28d00b4          ADD      r0,sp,#0xb4
0085cc  ebfffffe          BL       vBlit_OverwriteRGB
;;;3979               vGfListExecute();
0085d0  ebfffffe          BL       vGfListExecute
;;;3980               stParamBlit.eClipWndEn = stGastate.eClipWndEn;
0085d4  e59f0600          LDR      r0,|L1.35804|
0085d8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0085dc  e5cd00a8          STRB     r0,[sp,#0xa8]
                  |L1.34272|
0085e0  e2844001          ADD      r4,r4,#1              ;3966
                  |L1.34276|
0085e4  e3540002          CMP      r4,#2                 ;3966
0085e8  3affff9b          BCC      |L1.33884|
;;;3981           }
;;;3982       }
;;;3983   
;;;3984       /* rotate needletip and restore background */
;;;3985       for (u32Count=0; u32Count<u32Div; u32Count++)
0085ec  e3a04000          MOV      r4,#0
0085f0  ea0000c5          B        |L1.35084|
                  |L1.34292|
;;;3986       {
;;;3987           /* rotate needle tip */
;;;3988           stMemTip.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*((pstSrcImage->u16Width >> 1) -(pstDef->u16TipWidth >> 1)) + u8SrcNoOfBytes*u32Count*pstDef->u16BlockHeight*pstSrcImage->u16Width;
0085f4  e1d600b4          LDRH     r0,[r6,#4]
0085f8  e1a000c0          ASR      r0,r0,#1
0085fc  e1d810b4          LDRH     r1,[r8,#4]
008600  e04010c1          SUB      r1,r0,r1,ASR #1
008604  e5962000          LDR      r2,[r6,#0]
008608  e59d001c          LDR      r0,[sp,#0x1c]
00860c  e0212190          MLA      r1,r0,r1,r2
008610  e0000490          MUL      r0,r0,r4
008614  e1d820b0          LDRH     r2,[r8,#0]
008618  e0000290          MUL      r0,r0,r2
00861c  e1d620b4          LDRH     r2,[r6,#4]
008620  e0201290          MLA      r0,r0,r2,r1
008624  e58d0094          STR      r0,[sp,#0x94]
;;;3989           stMemTip.u16SrcHeight  = pstDef->u16BlockHeight;
008628  e1d800b0          LDRH     r0,[r8,#0]
00862c  e1cd09b0          STRH     r0,[sp,#0x90]
;;;3990           if((u32Count == u32Div - 1U) && (u32Div*pstDef->u16BlockHeight) == pstDef->u16TipHeight)
008630  e59d00c8          LDR      r0,[sp,#0xc8]
008634  e2400001          SUB      r0,r0,#1
008638  e1500004          CMP      r0,r4
00863c  1a000009          BNE      |L1.34408|
008640  e1d810b0          LDRH     r1,[r8,#0]
008644  e59d00c8          LDR      r0,[sp,#0xc8]
008648  e0000091          MUL      r0,r1,r0
00864c  e1d810b2          LDRH     r1,[r8,#2]
008650  e1500001          CMP      r0,r1
008654  1a000003          BNE      |L1.34408|
;;;3991           {
;;;3992               /* Add 1 extra pixel so that the tip and base can overlap */
;;;3993               stMemTip.u16SrcHeight  = pstDef->u16BlockHeight + 1U;
008658  e1d800b0          LDRH     r0,[r8,#0]
00865c  e2800001          ADD      r0,r0,#1
008660  e6ff0070          UXTH     r0,r0
008664  e1cd09b0          STRH     r0,[sp,#0x90]
                  |L1.34408|
;;;3994           }
;;;3995           stParamTip.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Count*pstDef->u16BlockHeight;
008668  e1d600fa          LDRSH    r0,[r6,#0xa]
00866c  e51f1dc4          LDR      r1,|L1.30896|
008670  e5911000          LDR      r1,[r1,#0]  ; u32SubResCPos
008674  e2611011          RSB      r1,r1,#0x11
008678  e0010491          MUL      r1,r1,r4
00867c  e1d820b0          LDRH     r2,[r8,#0]
008680  e0600291          MLS      r0,r1,r2,r0
008684  e6bf0070          SXTH     r0,r0
008688  e1cd08ba          STRH     r0,[sp,#0x8a]
;;;3996           /* Reinitializing Clip window and Destination Address */
;;;3997           stMemTip.u32DstAddr      = pstDstImage->u32Address;
00868c  e5970000          LDR      r0,[r7,#0]
008690  e58d009c          STR      r0,[sp,#0x9c]
;;;3998           stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
008694  e59f0540          LDR      r0,|L1.35804|
008698  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00869c  e5cd007a          STRB     r0,[sp,#0x7a]
;;;3999           if (stParamTip.stRotCfg.eClipWndEn == GA_EN)
0086a0  e5dd007a          LDRB     r0,[sp,#0x7a]
0086a4  e3500001          CMP      r0,#1
0086a8  1a00000b          BNE      |L1.34524|
;;;4000           {
;;;4001               stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0086ac  e59f0528          LDR      r0,|L1.35804|
0086b0  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0086b4  e1cd08b0          STRH     r0,[sp,#0x80]
;;;4002               stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0086b8  e59f051c          LDR      r0,|L1.35804|
0086bc  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0086c0  e1cd08b2          STRH     r0,[sp,#0x82]
;;;4003               stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0086c4  e59f0510          LDR      r0,|L1.35804|
0086c8  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0086cc  e1cd08b4          STRH     r0,[sp,#0x84]
;;;4004               stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0086d0  e59f0504          LDR      r0,|L1.35804|
0086d4  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0086d8  e1cd08b6          STRH     r0,[sp,#0x86]
                  |L1.34524|
;;;4005           }
;;;4006   
;;;4007   #ifdef GA_USE_MATH_LIB
;;;4008           vRotLib_Rotate_Part(&stMemTip, &stParamTip, (float64_t)f32AngleLocal, pstWriteList);
0086dc  e59d0018          LDR      r0,[sp,#0x18]
0086e0  ebfffffe          BL       __aeabi_f2d
0086e4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
0086e8  e51f0e38          LDR      r0,|L1.30904|
0086ec  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
0086f0  e58d0000          STR      r0,[sp,#0]
0086f4  e1a03001          MOV      r3,r1
0086f8  e59d2010          LDR      r2,[sp,#0x10]
0086fc  e28d1078          ADD      r1,sp,#0x78
008700  e28d0090          ADD      r0,sp,#0x90
008704  ebfffffe          BL       vRotLib_Rotate_Part
;;;4009   #else
;;;4010           vRotLib_Rotate_Part(&stMemTip, &stParamTip, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;4011   #endif
;;;4012           vGfListExecute();
008708  ebfffffe          BL       vGfListExecute
;;;4013                  
;;;4014           u32MinMaxValues[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
00870c  ebfffffe          BL       u32GfGetMinXCoordinate
008710  e2400001          SUB      r0,r0,#1
008714  e51f1e4c          LDR      r1,|L1.30928|
008718  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00871c  e0811004          ADD      r1,r1,r4
008720  e51f2e68          LDR      r2,|L1.30912|
008724  e7820201          STR      r0,[r2,r1,LSL #4]
;;;4015           u32MinMaxValues[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
008728  ebfffffe          BL       u32GfGetMinYCoordinate
00872c  e2400001          SUB      r0,r0,#1
008730  e51f1e68          LDR      r1,|L1.30928|
008734  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008738  e0811004          ADD      r1,r1,r4
00873c  e51f2e84          LDR      r2,|L1.30912|
008740  e0821201          ADD      r1,r2,r1,LSL #4
008744  e5810004          STR      r0,[r1,#4]
;;;4016           u32MinMaxValues[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
008748  ebfffffe          BL       u32GfGetMaxXCoordinate
00874c  e2800001          ADD      r0,r0,#1
008750  e51f1e88          LDR      r1,|L1.30928|
008754  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008758  e0811004          ADD      r1,r1,r4
00875c  e51f2ea4          LDR      r2,|L1.30912|
008760  e0821201          ADD      r1,r2,r1,LSL #4
008764  e5810008          STR      r0,[r1,#8]
;;;4017           u32MinMaxValues[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
008768  ebfffffe          BL       u32GfGetMaxYCoordinate
00876c  e2800001          ADD      r0,r0,#1
008770  e51f1ea8          LDR      r1,|L1.30928|
008774  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008778  e0811004          ADD      r1,r1,r4
00877c  e51f2ec4          LDR      r2,|L1.30912|
008780  e0821201          ADD      r1,r2,r1,LSL #4
008784  e581000c          STR      r0,[r1,#0xc]
;;;4018   
;;;4019           
;;;4020           stMemBlend.u16DotCnt  = u32MinMaxValues[u32NeedleNumber+u32Count][2] - u32MinMaxValues[u32NeedleNumber+u32Count][0];
008788  e51f0ec0          LDR      r0,|L1.30928|
00878c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008790  e0800004          ADD      r0,r0,r4
008794  e2821000          ADD      r1,r2,#0
008798  e0810200          ADD      r0,r1,r0,LSL #4
00879c  e1d000b8          LDRH     r0,[r0,#8]
0087a0  e51f1ed8          LDR      r1,|L1.30928|
0087a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0087a8  e0811004          ADD      r1,r1,r4
0087ac  e7921201          LDR      r1,[r2,r1,LSL #4]
0087b0  e0400001          SUB      r0,r0,r1
0087b4  e6ff1070          UXTH     r1,r0
0087b8  e1cd14b8          STRH     r1,[sp,#0x48]
;;;4021           stMemBlend.u16LineCnt = u32MinMaxValues[u32NeedleNumber+u32Count][3] - u32MinMaxValues[u32NeedleNumber+u32Count][1];
0087bc  e51f0ef4          LDR      r0,|L1.30928|
0087c0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0087c4  e0800004          ADD      r0,r0,r4
0087c8  e2821000          ADD      r1,r2,#0
0087cc  e0810200          ADD      r0,r1,r0,LSL #4
0087d0  e1d000bc          LDRH     r0,[r0,#0xc]
0087d4  e51f1f0c          LDR      r1,|L1.30928|
0087d8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0087dc  e0811004          ADD      r1,r1,r4
0087e0  e0821201          ADD      r1,r2,r1,LSL #4
0087e4  e1d110b4          LDRH     r1,[r1,#4]
0087e8  e0400001          SUB      r0,r0,r1
0087ec  e6ff1070          UXTH     r1,r0
0087f0  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;4022           /* handle clip window */
;;;4023           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlend.u16DotCnt, stMemBlend.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues[u32NeedleNumber+u32Count][0], u32MinMaxValues[u32NeedleNumber+u32Count][1]);
0087f4  e51f0f2c          LDR      r0,|L1.30928|
0087f8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0087fc  e0800004          ADD      r0,r0,r4
008800  e2821000          ADD      r1,r2,#0
008804  e0810200          ADD      r0,r1,r0,LSL #4
008808  e5900004          LDR      r0,[r0,#4]
00880c  e51f1f44          LDR      r1,|L1.30928|
008810  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008814  e0811004          ADD      r1,r1,r4
008818  e7921201          LDR      r1,[r2,r1,LSL #4]
00881c  e58d0004          STR      r0,[sp,#4]
008820  e59f03b4          LDR      r0,|L1.35804|
008824  e58d1000          STR      r1,[sp,#0]
008828  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
00882c  e1dd24ba          LDRH     r2,[sp,#0x4a]
008830  e1dd14b8          LDRH     r1,[sp,#0x48]
008834  e1a00007          MOV      r0,r7
008838  ebfffffe          BL       eHandleClipWindowBlit
00883c  e1a0b000          MOV      r11,r0
;;;4024           if(eDraw == GA_EN)
008840  e35b0001          CMP      r11,#1
008844  1a00002f          BNE      |L1.35080|
;;;4025           {
;;;4026               stParamBlend.eClipWndEn = eDraw;
008848  e5cdb029          STRB     r11,[sp,#0x29]
;;;4027               /* restore background */
;;;4028               stMemBlend.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
00884c  e51f0f84          LDR      r0,|L1.30928|
008850  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008854  e0800004          ADD      r0,r0,r4
008858  e51f1fa0          LDR      r1,|L1.30912|
00885c  e0810200          ADD      r0,r1,r0,LSL #4
008860  e5900004          LDR      r0,[r0,#4]
008864  e1d510fa          LDRSH    r1,[r5,#0xa]
008868  e0400001          SUB      r0,r0,r1
00886c  e5951000          LDR      r1,[r5,#0]
008870  e1d520b4          LDRH     r2,[r5,#4]
008874  e0020992          MUL      r2,r2,r9
008878  e0201092          MLA      r0,r2,r0,r1
00887c  e51f1fb4          LDR      r1,|L1.30928|
008880  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008884  e0811004          ADD      r1,r1,r4
008888  e51f2fd0          LDR      r2,|L1.30912|
00888c  e7921201          LDR      r1,[r2,r1,LSL #4]
008890  e1d520f8          LDRSH    r2,[r5,#8]
008894  e0411002          SUB      r1,r1,r2
008898  e0200199          MLA      r0,r9,r1,r0
00889c  e58d003c          STR      r0,[sp,#0x3c]
;;;4029                                       + u8SrcNoOfBytesBg*(u32MinMaxValues[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;4030               stMemBlend.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValues[u32NeedleNumber+u32Count][0];
0088a0  e5970000          LDR      r0,[r7,#0]
0088a4  e1d710b4          LDRH     r1,[r7,#4]
0088a8  e0010a91          MUL      r1,r1,r10
0088ac  e51f2fe4          LDR      r2,|L1.30928|
0088b0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0088b4  e0822004          ADD      r2,r2,r4
0088b8  e59f3324          LDR      r3,|L1.35812|
0088bc  e0832202          ADD      r2,r3,r2,LSL #4
0088c0  e5922004          LDR      r2,[r2,#4]
0088c4  e0200291          MLA      r0,r1,r2,r0
0088c8  e59f1318          LDR      r1,|L1.35816|
0088cc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0088d0  e0811004          ADD      r1,r1,r4
0088d4  e2832000          ADD      r2,r3,#0
0088d8  e7921201          LDR      r1,[r2,r1,LSL #4]
0088dc  e020019a          MLA      r0,r10,r1,r0
0088e0  e58d0044          STR      r0,[sp,#0x44]
;;;4031               i32Blit_BlendRGB(&stMemBlend, &stParamBlend, pstWriteList);
0088e4  e59f0300          LDR      r0,|L1.35820|
0088e8  e28d1020          ADD      r1,sp,#0x20
0088ec  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
0088f0  e28d0038          ADD      r0,sp,#0x38
0088f4  ebfffffe          BL       i32Blit_BlendRGB
;;;4032               vGfListExecute();
0088f8  ebfffffe          BL       vGfListExecute
;;;4033               stParamBlend.eClipWndEn = stGastate.eClipWndEn;
0088fc  e59f02d8          LDR      r0,|L1.35804|
008900  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008904  e5cd0029          STRB     r0,[sp,#0x29]
                  |L1.35080|
008908  e2844001          ADD      r4,r4,#1              ;3985
                  |L1.35084|
00890c  e59d00c8          LDR      r0,[sp,#0xc8]         ;3985
008910  e1540000          CMP      r4,r0                 ;3985
008914  3affff36          BCC      |L1.34292|
;;;4034           }
;;;4035       }
;;;4036   
;;;4037       /* rotate rest of tip */
;;;4038       if ((u32Div*pstDef->u16BlockHeight) != pstDef->u16TipHeight)
008918  e1d810b0          LDRH     r1,[r8,#0]
00891c  e59d00c8          LDR      r0,[sp,#0xc8]
008920  e0000091          MUL      r0,r1,r0
008924  e1d810b2          LDRH     r1,[r8,#2]
008928  e1500001          CMP      r0,r1
00892c  0a0000cb          BEQ      |L1.35936|
;;;4039       {
;;;4040           /* rotate needle tip */
;;;4041           stMemTip.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*((pstSrcImage->u16Width >> 1U) -(pstDef->u16TipWidth >> 1U)) + u8SrcNoOfBytes*u32Div*pstDef->u16BlockHeight*pstSrcImage->u16Width;
008930  e1d600b4          LDRH     r0,[r6,#4]
008934  e1a000c0          ASR      r0,r0,#1
008938  e1d810b4          LDRH     r1,[r8,#4]
00893c  e04010c1          SUB      r1,r0,r1,ASR #1
008940  e5962000          LDR      r2,[r6,#0]
008944  e59d001c          LDR      r0,[sp,#0x1c]
008948  e0222190          MLA      r2,r0,r1,r2
00894c  e59d10c8          LDR      r1,[sp,#0xc8]
008950  e0000190          MUL      r0,r0,r1
008954  e1d810b0          LDRH     r1,[r8,#0]
008958  e0000190          MUL      r0,r0,r1
00895c  e1d610b4          LDRH     r1,[r6,#4]
008960  e0202190          MLA      r0,r0,r1,r2
008964  e58d0094          STR      r0,[sp,#0x94]
;;;4042           /* Add 1 extra pixel so that the tip and base can overlap */
;;;4043           stMemTip.u16SrcHeight  = pstDef->u16TipHeight - u32Div*pstDef->u16BlockHeight + 1U;
008968  e1d810b2          LDRH     r1,[r8,#2]
00896c  e1d820b0          LDRH     r2,[r8,#0]
008970  e59d00c8          LDR      r0,[sp,#0xc8]
008974  e0601290          MLS      r0,r0,r2,r1
008978  e2800001          ADD      r0,r0,#1
00897c  e6ff1070          UXTH     r1,r0
008980  e1cd19b0          STRH     r1,[sp,#0x90]
;;;4044           stParamTip.i16RotCentY = pstSrcImage->i16CenterY - (17U-u32SubResCPos)*u32Div*pstDef->u16BlockHeight;
008984  e1d610fa          LDRSH    r1,[r6,#0xa]
008988  e59f0260          LDR      r0,|L1.35824|
00898c  e5900000          LDR      r0,[r0,#0]  ; u32SubResCPos
008990  e2602011          RSB      r2,r0,#0x11
008994  e59d00c8          LDR      r0,[sp,#0xc8]
008998  e0000092          MUL      r0,r2,r0
00899c  e1d820b0          LDRH     r2,[r8,#0]
0089a0  e0601290          MLS      r0,r0,r2,r1
0089a4  e6bf1070          SXTH     r1,r0
0089a8  e1cd18ba          STRH     r1,[sp,#0x8a]
;;;4045           /* Reinitializing Clip window and Destination Address */
;;;4046           stMemTip.u32DstAddr      = pstDstImage->u32Address;
0089ac  e5970000          LDR      r0,[r7,#0]
0089b0  e58d009c          STR      r0,[sp,#0x9c]
;;;4047           stParamTip.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
0089b4  e59f0220          LDR      r0,|L1.35804|
0089b8  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
0089bc  e5cd007a          STRB     r0,[sp,#0x7a]
;;;4048           if (stParamTip.stRotCfg.eClipWndEn == GA_EN)
0089c0  e5dd007a          LDRB     r0,[sp,#0x7a]
0089c4  e3500001          CMP      r0,#1
0089c8  1a00000b          BNE      |L1.35324|
;;;4049           {
;;;4050               stParamTip.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
0089cc  e59f0208          LDR      r0,|L1.35804|
0089d0  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
0089d4  e1cd08b0          STRH     r0,[sp,#0x80]
;;;4051               stParamTip.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
0089d8  e59f01fc          LDR      r0,|L1.35804|
0089dc  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
0089e0  e1cd08b2          STRH     r0,[sp,#0x82]
;;;4052               stParamTip.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
0089e4  e59f01f0          LDR      r0,|L1.35804|
0089e8  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0089ec  e1cd08b4          STRH     r0,[sp,#0x84]
;;;4053               stParamTip.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0089f0  e59f01e4          LDR      r0,|L1.35804|
0089f4  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0089f8  e1cd08b6          STRH     r0,[sp,#0x86]
                  |L1.35324|
;;;4054           }
;;;4055           if(stMemTip.u16SrcHeight > 0)
0089fc  e1dd09b0          LDRH     r0,[sp,#0x90]
008a00  e3500000          CMP      r0,#0
008a04  da00000b          BLE      |L1.35384|
;;;4056           {
;;;4057   #ifdef GA_USE_MATH_LIB
;;;4058               vRotLib_Rotate_Part(&stMemTip, &stParamTip, (float64_t)f32AngleLocal, pstWriteList);
008a08  e59d0018          LDR      r0,[sp,#0x18]
008a0c  ebfffffe          BL       __aeabi_f2d
008a10  e1cd01f0          STRD     r0,r1,[sp,#0x10]
008a14  e59f01d0          LDR      r0,|L1.35820|
008a18  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
008a1c  e58d0000          STR      r0,[sp,#0]
008a20  e1a03001          MOV      r3,r1
008a24  e59d2010          LDR      r2,[sp,#0x10]
008a28  e28d1078          ADD      r1,sp,#0x78
008a2c  e28d0090          ADD      r0,sp,#0x90
008a30  ebfffffe          BL       vRotLib_Rotate_Part
;;;4059   #else
;;;4060               vRotLib_Rotate_Part(&stMemTip, &stParamTip, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;4061   #endif  
;;;4062               vGfListExecute();
008a34  ebfffffe          BL       vGfListExecute
                  |L1.35384|
;;;4063           }
;;;4064   
;;;4065           u32MinMaxValues[u32NeedleNumber+3][0] = u32GfGetMinXCoordinate()-1U;
008a38  ebfffffe          BL       u32GfGetMinXCoordinate
008a3c  e2400001          SUB      r0,r0,#1
008a40  e59f119c          LDR      r1,|L1.35812|
008a44  e59f219c          LDR      r2,|L1.35816|
008a48  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008a4c  e2822003          ADD      r2,r2,#3
008a50  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4066           u32MinMaxValues[u32NeedleNumber+3][1] = u32GfGetMinYCoordinate()-1U;
008a54  ebfffffe          BL       u32GfGetMinYCoordinate
008a58  e2401001          SUB      r1,r0,#1
008a5c  e59f0180          LDR      r0,|L1.35812|
008a60  e59f2180          LDR      r2,|L1.35816|
008a64  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008a68  e2822003          ADD      r2,r2,#3
008a6c  e0800202          ADD      r0,r0,r2,LSL #4
008a70  e5801004          STR      r1,[r0,#4]
;;;4067           u32MinMaxValues[u32NeedleNumber+3][2] = u32GfGetMaxXCoordinate()+1U;
008a74  ebfffffe          BL       u32GfGetMaxXCoordinate
008a78  e2801001          ADD      r1,r0,#1
008a7c  e59f0160          LDR      r0,|L1.35812|
008a80  e59f2160          LDR      r2,|L1.35816|
008a84  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008a88  e2822003          ADD      r2,r2,#3
008a8c  e0800202          ADD      r0,r0,r2,LSL #4
008a90  e5801008          STR      r1,[r0,#8]
;;;4068           u32MinMaxValues[u32NeedleNumber+3][3] = u32GfGetMaxYCoordinate()+1U;
008a94  ebfffffe          BL       u32GfGetMaxYCoordinate
008a98  e2801001          ADD      r1,r0,#1
008a9c  e59f0140          LDR      r0,|L1.35812|
008aa0  e59f2140          LDR      r2,|L1.35816|
008aa4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008aa8  e2822003          ADD      r2,r2,#3
008aac  e0800202          ADD      r0,r0,r2,LSL #4
008ab0  e580100c          STR      r1,[r0,#0xc]
;;;4069   
;;;4070           
;;;4071           stMemBlend.u16DotCnt  = u32MinMaxValues[u32NeedleNumber+3][2] - u32MinMaxValues[u32NeedleNumber+3][0];
008ab4  e59f0128          LDR      r0,|L1.35812|
008ab8  e59f1128          LDR      r1,|L1.35816|
008abc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008ac0  e2811003          ADD      r1,r1,#3
008ac4  e0800201          ADD      r0,r0,r1,LSL #4
008ac8  e1d000b8          LDRH     r0,[r0,#8]
008acc  e59f1110          LDR      r1,|L1.35812|
008ad0  e59f2110          LDR      r2,|L1.35816|
008ad4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008ad8  e2822003          ADD      r2,r2,#3
008adc  e7911202          LDR      r1,[r1,r2,LSL #4]
008ae0  e0400001          SUB      r0,r0,r1
008ae4  e6ff1070          UXTH     r1,r0
008ae8  e1cd14b8          STRH     r1,[sp,#0x48]
;;;4072           stMemBlend.u16LineCnt = u32MinMaxValues[u32NeedleNumber+3][3] - u32MinMaxValues[u32NeedleNumber+3][1];
008aec  e59f00f0          LDR      r0,|L1.35812|
008af0  e59f10f0          LDR      r1,|L1.35816|
008af4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008af8  e2811003          ADD      r1,r1,#3
008afc  e0800201          ADD      r0,r0,r1,LSL #4
008b00  e1d010bc          LDRH     r1,[r0,#0xc]
008b04  e59f00d8          LDR      r0,|L1.35812|
008b08  e59f20d8          LDR      r2,|L1.35816|
008b0c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008b10  e2822003          ADD      r2,r2,#3
008b14  e0800202          ADD      r0,r0,r2,LSL #4
008b18  e1d000b4          LDRH     r0,[r0,#4]
008b1c  e0410000          SUB      r0,r1,r0
008b20  e6ff1070          UXTH     r1,r0
008b24  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;4073           /* handle clip window */
;;;4074           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlend.u16DotCnt, stMemBlend.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValues[u32NeedleNumber+3][0], u32MinMaxValues[u32NeedleNumber+3][1]);
008b28  e59f00b4          LDR      r0,|L1.35812|
008b2c  e59f10b4          LDR      r1,|L1.35816|
008b30  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008b34  e2811003          ADD      r1,r1,#3
008b38  e0800201          ADD      r0,r0,r1,LSL #4
008b3c  e5900004          LDR      r0,[r0,#4]
008b40  e59f109c          LDR      r1,|L1.35812|
008b44  e59f209c          LDR      r2,|L1.35816|
008b48  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008b4c  e2822003          ADD      r2,r2,#3
008b50  e7911202          LDR      r1,[r1,r2,LSL #4]
008b54  e58d0004          STR      r0,[sp,#4]
008b58  e59f007c          LDR      r0,|L1.35804|
008b5c  e58d1000          STR      r1,[sp,#0]
008b60  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
008b64  e1dd24ba          LDRH     r2,[sp,#0x4a]
008b68  e1dd14b8          LDRH     r1,[sp,#0x48]
008b6c  e1a00007          MOV      r0,r7
008b70  ebfffffe          BL       eHandleClipWindowBlit
008b74  e1a0b000          MOV      r11,r0
;;;4075           if(eDraw ==  GA_EN)
008b78  e35b0001          CMP      r11,#1
008b7c  1a000037          BNE      |L1.35936|
;;;4076           {
;;;4077               stParamBlend.eClipWndEn = eDraw;
008b80  e5cdb029          STRB     r11,[sp,#0x29]
;;;4078               /* restore background */
;;;4079               stMemBlend.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValues[u32NeedleNumber+3][1]-pstSrcImageBg->i16CenterY)
008b84  e59f0058          LDR      r0,|L1.35812|
008b88  e59f1058          LDR      r1,|L1.35816|
008b8c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008b90  e2811003          ADD      r1,r1,#3
008b94  e0800201          ADD      r0,r0,r1,LSL #4
008b98  e5900004          LDR      r0,[r0,#4]
008b9c  e1d510fa          LDRSH    r1,[r5,#0xa]
008ba0  e0400001          SUB      r0,r0,r1
008ba4  e5951000          LDR      r1,[r5,#0]
008ba8  e1d520b4          LDRH     r2,[r5,#4]
008bac  e0020992          MUL      r2,r2,r9
008bb0  e0201092          MLA      r0,r2,r0,r1
008bb4  e59f1028          LDR      r1,|L1.35812|
008bb8  e59f2028          LDR      r2,|L1.35816|
008bbc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008bc0  e2822003          ADD      r2,r2,#3
008bc4  e7911202          LDR      r1,[r1,r2,LSL #4]
008bc8  e1d520f8          LDRSH    r2,[r5,#8]
008bcc  e0411002          SUB      r1,r1,r2
008bd0  e0200199          MLA      r0,r9,r1,r0
008bd4  ea000006          B        |L1.35828|
                  |L1.35800|
                          DCD      u8PreviousOperation
                  |L1.35804|
                          DCD      stGastate
                  |L1.35808|
                          DCD      u32MinMaxValues_old_old
                  |L1.35812|
                          DCD      u32MinMaxValues
                  |L1.35816|
                          DCD      u32NeedleNumber
                  |L1.35820|
                          DCD      pstWriteList
                  |L1.35824|
                          DCD      u32SubResCPos
                  |L1.35828|
008bf4  e58d003c          STR      r0,[sp,#0x3c]
;;;4080                                       + u8SrcNoOfBytesBg*(u32MinMaxValues[u32NeedleNumber+3][0]-pstSrcImageBg->i16CenterX);
;;;4081               stMemBlend.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValues[u32NeedleNumber+3][1] + u8DstNoOfBytes*u32MinMaxValues[u32NeedleNumber+3][0];
008bf8  e5970000          LDR      r0,[r7,#0]
008bfc  e1d710b4          LDRH     r1,[r7,#4]
008c00  e0020a91          MUL      r2,r1,r10
008c04  e51f1028          LDR      r1,|L1.35812|
008c08  e51f3028          LDR      r3,|L1.35816|
008c0c  e5933000          LDR      r3,[r3,#0]  ; u32NeedleNumber
008c10  e2833003          ADD      r3,r3,#3
008c14  e0811203          ADD      r1,r1,r3,LSL #4
008c18  e5911004          LDR      r1,[r1,#4]
008c1c  e0210192          MLA      r1,r2,r1,r0
008c20  e51f0044          LDR      r0,|L1.35812|
008c24  e51f2044          LDR      r2,|L1.35816|
008c28  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008c2c  e2822003          ADD      r2,r2,#3
008c30  e7900202          LDR      r0,[r0,r2,LSL #4]
008c34  e020109a          MLA      r0,r10,r0,r1
008c38  e58d0044          STR      r0,[sp,#0x44]
;;;4082               i32Blit_BlendRGB(&stMemBlend, &stParamBlend, pstWriteList);
008c3c  e51f0058          LDR      r0,|L1.35820|
008c40  e28d1020          ADD      r1,sp,#0x20
008c44  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
008c48  e28d0038          ADD      r0,sp,#0x38
008c4c  ebfffffe          BL       i32Blit_BlendRGB
;;;4083               vGfListExecute();
008c50  ebfffffe          BL       vGfListExecute
;;;4084               stParamBlend.eClipWndEn = stGastate.eClipWndEn;
008c54  e51f0080          LDR      r0,|L1.35804|
008c58  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008c5c  e5cd0029          STRB     r0,[sp,#0x29]
                  |L1.35936|
;;;4085           }
;;;4086       }
;;;4087   
;;;4088       /* rotate needle base */
;;;4089       for (u32Count=0; u32Count<2; u32Count++)
008c60  e3a04000          MOV      r4,#0
008c64  ea0000bd          B        |L1.36704|
                  |L1.35944|
;;;4090       {
;;;4091           /* rotate needle */
;;;4092           stMemBase.u32SrcAddr    = pstSrcImage->u32Address + u8SrcNoOfBytes*pstSrcImage->u16Width*pstDef->u16TipHeight + u8SrcNoOfBytes*u32Count*(pstSrcImage->u16Width >> 1U);
008c68  e5961000          LDR      r1,[r6,#0]
008c6c  e1d620b4          LDRH     r2,[r6,#4]
008c70  e59d001c          LDR      r0,[sp,#0x1c]
008c74  e0000092          MUL      r0,r2,r0
008c78  e1d820b2          LDRH     r2,[r8,#2]
008c7c  e0211290          MLA      r1,r0,r2,r1
008c80  e59d001c          LDR      r0,[sp,#0x1c]
008c84  e0000490          MUL      r0,r0,r4
008c88  e1d620b4          LDRH     r2,[r6,#4]
008c8c  e1a020c2          ASR      r2,r2,#1
008c90  e0201290          MLA      r0,r0,r2,r1
008c94  e58d0068          STR      r0,[sp,#0x68]
;;;4093           stMemBase.u16SrcHeight  = pstSrcImage->u16Height - pstDef->u16TipHeight;
008c98  e1d600b6          LDRH     r0,[r6,#6]
008c9c  e1d810b2          LDRH     r1,[r8,#2]
008ca0  e0400001          SUB      r0,r0,r1
008ca4  e6ff1070          UXTH     r1,r0
008ca8  e1cd16b4          STRH     r1,[sp,#0x64]
;;;4094           stParamBase.i16RotCentX = pstSrcImage->i16CenterX - (17U-u32SubResCPos)*u32Count*(pstSrcImage->u16Width >> 1U);
008cac  e1d610f8          LDRSH    r1,[r6,#8]
008cb0  e51f00c8          LDR      r0,|L1.35824|
008cb4  e5900000          LDR      r0,[r0,#0]  ; u32SubResCPos
008cb8  e2600011          RSB      r0,r0,#0x11
008cbc  e0000490          MUL      r0,r0,r4
008cc0  e1d620b4          LDRH     r2,[r6,#4]
008cc4  e1a020c2          ASR      r2,r2,#1
008cc8  e0601290          MLS      r0,r0,r2,r1
008ccc  e6bf1070          SXTH     r1,r0
008cd0  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;4095           /* Reinitializing Clip window and Destination Address */
;;;4096           stMemBase.u32DstAddr      = pstDstImage->u32Address;
008cd4  e5970000          LDR      r0,[r7,#0]
008cd8  e58d0070          STR      r0,[sp,#0x70]
;;;4097           stParamBase.stRotCfg.eClipWndEn = stGastate.eClipWndEn;
008cdc  e51f0108          LDR      r0,|L1.35804|
008ce0  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008ce4  e5cd004e          STRB     r0,[sp,#0x4e]
;;;4098   	    if (stParamBase.stRotCfg.eClipWndEn == GA_EN)
008ce8  e5dd004e          LDRB     r0,[sp,#0x4e]
008cec  e3500001          CMP      r0,#1
008cf0  1a00000b          BNE      |L1.36132|
;;;4099           {
;;;4100               stParamBase.stRotCfg.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
008cf4  e51f0120          LDR      r0,|L1.35804|
008cf8  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
008cfc  e1cd05b4          STRH     r0,[sp,#0x54]
;;;4101               stParamBase.stRotCfg.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
008d00  e51f012c          LDR      r0,|L1.35804|
008d04  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
008d08  e1cd05b6          STRH     r0,[sp,#0x56]
;;;4102               stParamBase.stRotCfg.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
008d0c  e51f0138          LDR      r0,|L1.35804|
008d10  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
008d14  e1cd05b8          STRH     r0,[sp,#0x58]
;;;4103               stParamBase.stRotCfg.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
008d18  e51f0144          LDR      r0,|L1.35804|
008d1c  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
008d20  e1cd05ba          STRH     r0,[sp,#0x5a]
                  |L1.36132|
;;;4104           }
;;;4105   
;;;4106           if(stMemBase.u16SrcHeight > 0)
008d24  e1dd06b4          LDRH     r0,[sp,#0x64]
008d28  e3500000          CMP      r0,#0
008d2c  da00000b          BLE      |L1.36192|
;;;4107           {
;;;4108   #ifdef GA_USE_MATH_LIB
;;;4109               vRotLib_Rotate_Part(&stMemBase, &stParamBase, (float64_t)f32AngleLocal, pstWriteList);
008d30  e59d0018          LDR      r0,[sp,#0x18]
008d34  ebfffffe          BL       __aeabi_f2d
008d38  e1cd01f0          STRD     r0,r1,[sp,#0x10]
008d3c  e51f0158          LDR      r0,|L1.35820|
008d40  e5900000          LDR      r0,[r0,#0]  ; pstWriteList
008d44  e58d0000          STR      r0,[sp,#0]
008d48  e1a03001          MOV      r3,r1
008d4c  e59d2010          LDR      r2,[sp,#0x10]
008d50  e28d104c          ADD      r1,sp,#0x4c
008d54  e28d0064          ADD      r0,sp,#0x64
008d58  ebfffffe          BL       vRotLib_Rotate_Part
;;;4110   #else
;;;4111               vRotLib_Rotate_Part(&stMemBase, &stParamBase, (int16_t)(10U * f32AngleLocal), pstWriteList);
;;;4112   #endif  
;;;4113               vGfListExecute();
008d5c  ebfffffe          BL       vGfListExecute
                  |L1.36192|
;;;4114           }
;;;4115   
;;;4116           u32MinMaxValuesBase[u32NeedleNumber+u32Count][0] = u32GfGetMinXCoordinate()-1U;
008d60  ebfffffe          BL       u32GfGetMinXCoordinate
008d64  e2400001          SUB      r0,r0,#1
008d68  e51f1188          LDR      r1,|L1.35816|
008d6c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008d70  e0811004          ADD      r1,r1,r4
008d74  e59f2e68          LDR      r2,|L1.39908|
008d78  e7820201          STR      r0,[r2,r1,LSL #4]
;;;4117           u32MinMaxValuesBase[u32NeedleNumber+u32Count][1] = u32GfGetMinYCoordinate()-1U;
008d7c  ebfffffe          BL       u32GfGetMinYCoordinate
008d80  e2400001          SUB      r0,r0,#1
008d84  e51f11a4          LDR      r1,|L1.35816|
008d88  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008d8c  e0811004          ADD      r1,r1,r4
008d90  e59f2e4c          LDR      r2,|L1.39908|
008d94  e0821201          ADD      r1,r2,r1,LSL #4
008d98  e5810004          STR      r0,[r1,#4]
;;;4118           u32MinMaxValuesBase[u32NeedleNumber+u32Count][2] = u32GfGetMaxXCoordinate()+1U;
008d9c  ebfffffe          BL       u32GfGetMaxXCoordinate
008da0  e2800001          ADD      r0,r0,#1
008da4  e51f11c4          LDR      r1,|L1.35816|
008da8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008dac  e0811004          ADD      r1,r1,r4
008db0  e59f2e2c          LDR      r2,|L1.39908|
008db4  e0821201          ADD      r1,r2,r1,LSL #4
008db8  e5810008          STR      r0,[r1,#8]
;;;4119           u32MinMaxValuesBase[u32NeedleNumber+u32Count][3] = u32GfGetMaxYCoordinate()+1U;
008dbc  ebfffffe          BL       u32GfGetMaxYCoordinate
008dc0  e2800001          ADD      r0,r0,#1
008dc4  e51f11e4          LDR      r1,|L1.35816|
008dc8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008dcc  e0811004          ADD      r1,r1,r4
008dd0  e59f2e0c          LDR      r2,|L1.39908|
008dd4  e0821201          ADD      r1,r2,r1,LSL #4
008dd8  e581000c          STR      r0,[r1,#0xc]
;;;4120   
;;;4121           stMemBlend.u16DotCnt  = u32MinMaxValuesBase[u32NeedleNumber+u32Count][2] - u32MinMaxValuesBase[u32NeedleNumber+u32Count][0];
008ddc  e51f01fc          LDR      r0,|L1.35816|
008de0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008de4  e0800004          ADD      r0,r0,r4
008de8  e2821000          ADD      r1,r2,#0
008dec  e0810200          ADD      r0,r1,r0,LSL #4
008df0  e1d000b8          LDRH     r0,[r0,#8]
008df4  e51f1214          LDR      r1,|L1.35816|
008df8  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008dfc  e0811004          ADD      r1,r1,r4
008e00  e7921201          LDR      r1,[r2,r1,LSL #4]
008e04  e0400001          SUB      r0,r0,r1
008e08  e6ff1070          UXTH     r1,r0
008e0c  e1cd14b8          STRH     r1,[sp,#0x48]
;;;4122           stMemBlend.u16LineCnt = u32MinMaxValuesBase[u32NeedleNumber+u32Count][3] - u32MinMaxValuesBase[u32NeedleNumber+u32Count][1];
008e10  e51f0230          LDR      r0,|L1.35816|
008e14  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008e18  e0800004          ADD      r0,r0,r4
008e1c  e2821000          ADD      r1,r2,#0
008e20  e0810200          ADD      r0,r1,r0,LSL #4
008e24  e1d000bc          LDRH     r0,[r0,#0xc]
008e28  e51f1248          LDR      r1,|L1.35816|
008e2c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008e30  e0811004          ADD      r1,r1,r4
008e34  e0821201          ADD      r1,r2,r1,LSL #4
008e38  e1d110b4          LDRH     r1,[r1,#4]
008e3c  e0400001          SUB      r0,r0,r1
008e40  e6ff1070          UXTH     r1,r0
008e44  e1cd14ba          STRH     r1,[sp,#0x4a]
;;;4123           /* handle clip window */  
;;;4124           eDraw = eHandleClipWindowBlit(pstDstImage, stMemBlend.u16DotCnt, stMemBlend.u16LineCnt, stGastate.eClipWndEn, u32MinMaxValuesBase[u32NeedleNumber+u32Count][0], u32MinMaxValuesBase[u32NeedleNumber+u32Count][1]);
008e48  e51f0268          LDR      r0,|L1.35816|
008e4c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008e50  e0800004          ADD      r0,r0,r4
008e54  e2821000          ADD      r1,r2,#0
008e58  e0810200          ADD      r0,r1,r0,LSL #4
008e5c  e5900004          LDR      r0,[r0,#4]
008e60  e51f1280          LDR      r1,|L1.35816|
008e64  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008e68  e0811004          ADD      r1,r1,r4
008e6c  e7921201          LDR      r1,[r2,r1,LSL #4]
008e70  e58d0004          STR      r0,[sp,#4]
008e74  e51f02a0          LDR      r0,|L1.35804|
008e78  e58d1000          STR      r1,[sp,#0]
008e7c  e5d03023          LDRB     r3,[r0,#0x23]  ; stGastate
008e80  e1dd24ba          LDRH     r2,[sp,#0x4a]
008e84  e1dd14b8          LDRH     r1,[sp,#0x48]
008e88  e1a00007          MOV      r0,r7
008e8c  ebfffffe          BL       eHandleClipWindowBlit
008e90  e1a0b000          MOV      r11,r0
;;;4125           if(eDraw == GA_EN)
008e94  e35b0001          CMP      r11,#1
008e98  1a00002f          BNE      |L1.36700|
;;;4126           {
;;;4127               stParamBlend.eClipWndEn = eDraw;
008e9c  e5cdb029          STRB     r11,[sp,#0x29]
;;;4128               /* restore background */
;;;4129               stMemBlend.u32SrcAddr = pstSrcImageBg->u32Address + u8SrcNoOfBytesBg*pstSrcImageBg->u16Width*(u32MinMaxValuesBase[u32NeedleNumber+u32Count][1]-pstSrcImageBg->i16CenterY)
008ea0  e51f02c0          LDR      r0,|L1.35816|
008ea4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008ea8  e0800004          ADD      r0,r0,r4
008eac  e59f1d30          LDR      r1,|L1.39908|
008eb0  e0810200          ADD      r0,r1,r0,LSL #4
008eb4  e5900004          LDR      r0,[r0,#4]
008eb8  e1d510fa          LDRSH    r1,[r5,#0xa]
008ebc  e0400001          SUB      r0,r0,r1
008ec0  e5951000          LDR      r1,[r5,#0]
008ec4  e1d520b4          LDRH     r2,[r5,#4]
008ec8  e0020992          MUL      r2,r2,r9
008ecc  e0201092          MLA      r0,r2,r0,r1
008ed0  e51f12f0          LDR      r1,|L1.35816|
008ed4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008ed8  e0811004          ADD      r1,r1,r4
008edc  e59f2d00          LDR      r2,|L1.39908|
008ee0  e7921201          LDR      r1,[r2,r1,LSL #4]
008ee4  e1d520f8          LDRSH    r2,[r5,#8]
008ee8  e0411002          SUB      r1,r1,r2
008eec  e0200199          MLA      r0,r9,r1,r0
008ef0  e58d003c          STR      r0,[sp,#0x3c]
;;;4130                                       + u8SrcNoOfBytesBg*(u32MinMaxValuesBase[u32NeedleNumber+u32Count][0]-pstSrcImageBg->i16CenterX);
;;;4131               stMemBlend.u32DstAddr = pstDstImage->u32Address + u8DstNoOfBytes*pstDstImage->u16Width*u32MinMaxValuesBase[u32NeedleNumber+u32Count][1] + u8DstNoOfBytes*u32MinMaxValuesBase[u32NeedleNumber+u32Count][0];
008ef4  e5970000          LDR      r0,[r7,#0]
008ef8  e1d710b4          LDRH     r1,[r7,#4]
008efc  e0010a91          MUL      r1,r1,r10
008f00  e51f2320          LDR      r2,|L1.35816|
008f04  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
008f08  e0822004          ADD      r2,r2,r4
008f0c  e59f3cd0          LDR      r3,|L1.39908|
008f10  e0832202          ADD      r2,r3,r2,LSL #4
008f14  e5922004          LDR      r2,[r2,#4]
008f18  e0200291          MLA      r0,r1,r2,r0
008f1c  e51f133c          LDR      r1,|L1.35816|
008f20  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
008f24  e0811004          ADD      r1,r1,r4
008f28  e2832000          ADD      r2,r3,#0
008f2c  e7921201          LDR      r1,[r2,r1,LSL #4]
008f30  e020019a          MLA      r0,r10,r1,r0
008f34  e58d0044          STR      r0,[sp,#0x44]
;;;4132               i32Blit_BlendRGB(&stMemBlend, &stParamBlend, pstWriteList);
008f38  e51f0354          LDR      r0,|L1.35820|
008f3c  e28d1020          ADD      r1,sp,#0x20
008f40  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
008f44  e28d0038          ADD      r0,sp,#0x38
008f48  ebfffffe          BL       i32Blit_BlendRGB
;;;4133               vGfListExecute();
008f4c  ebfffffe          BL       vGfListExecute
;;;4134               stParamBlend.eClipWndEn = stGastate.eClipWndEn;
008f50  e51f037c          LDR      r0,|L1.35804|
008f54  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
008f58  e5cd0029          STRB     r0,[sp,#0x29]
                  |L1.36700|
008f5c  e2844001          ADD      r4,r4,#1              ;4089
                  |L1.36704|
008f60  e3540002          CMP      r4,#2                 ;4089
008f64  3affff3f          BCC      |L1.35944|
;;;4135           }
;;;4136       }
;;;4137       
;;;4138       u32MinMaxValues_old_old[u32NeedleNumber+0][0] = u32MinMaxValues_old[u32NeedleNumber+0][0];
008f68  e59f1c78          LDR      r1,|L1.39912|
008f6c  e51f038c          LDR      r0,|L1.35816|
008f70  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008f74  e7911200          LDR      r1,[r1,r0,LSL #4]
008f78  e51f23a0          LDR      r2,|L1.35808|
008f7c  e51f039c          LDR      r0,|L1.35816|
008f80  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008f84  e7821200          STR      r1,[r2,r0,LSL #4]
;;;4139       u32MinMaxValues_old_old[u32NeedleNumber+0][1] = u32MinMaxValues_old[u32NeedleNumber+0][1];
008f88  e59f1c58          LDR      r1,|L1.39912|
008f8c  e51f03ac          LDR      r0,|L1.35816|
008f90  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008f94  e0810200          ADD      r0,r1,r0,LSL #4
008f98  e5901004          LDR      r1,[r0,#4]
008f9c  e51f03bc          LDR      r0,|L1.35816|
008fa0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008fa4  e0820200          ADD      r0,r2,r0,LSL #4
008fa8  e5801004          STR      r1,[r0,#4]
;;;4140       u32MinMaxValues_old_old[u32NeedleNumber+0][2] = u32MinMaxValues_old[u32NeedleNumber+0][2];
008fac  e59f1c34          LDR      r1,|L1.39912|
008fb0  e51f03d0          LDR      r0,|L1.35816|
008fb4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008fb8  e0810200          ADD      r0,r1,r0,LSL #4
008fbc  e5901008          LDR      r1,[r0,#8]
008fc0  e51f03e0          LDR      r0,|L1.35816|
008fc4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008fc8  e0820200          ADD      r0,r2,r0,LSL #4
008fcc  e5801008          STR      r1,[r0,#8]
;;;4141       u32MinMaxValues_old_old[u32NeedleNumber+0][3] = u32MinMaxValues_old[u32NeedleNumber+0][3];
008fd0  e59f1c10          LDR      r1,|L1.39912|
008fd4  e51f03f4          LDR      r0,|L1.35816|
008fd8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008fdc  e0810200          ADD      r0,r1,r0,LSL #4
008fe0  e590100c          LDR      r1,[r0,#0xc]
008fe4  e51f0404          LDR      r0,|L1.35816|
008fe8  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
008fec  e0820200          ADD      r0,r2,r0,LSL #4
008ff0  e580100c          STR      r1,[r0,#0xc]
;;;4142       u32MinMaxValues_old_old[u32NeedleNumber+1][0] = u32MinMaxValues_old[u32NeedleNumber+1][0];
008ff4  e59f0bec          LDR      r0,|L1.39912|
008ff8  e51f1418          LDR      r1,|L1.35816|
008ffc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009000  e2811001          ADD      r1,r1,#1
009004  e7900201          LDR      r0,[r0,r1,LSL #4]
009008  e2821000          ADD      r1,r2,#0
00900c  e51f242c          LDR      r2,|L1.35816|
009010  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009014  e2822001          ADD      r2,r2,#1
009018  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4143       u32MinMaxValues_old_old[u32NeedleNumber+1][1] = u32MinMaxValues_old[u32NeedleNumber+1][1];
00901c  e59f0bc4          LDR      r0,|L1.39912|
009020  e51f1440          LDR      r1,|L1.35816|
009024  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009028  e2811001          ADD      r1,r1,#1
00902c  e0800201          ADD      r0,r0,r1,LSL #4
009030  e5900004          LDR      r0,[r0,#4]
009034  e51f145c          LDR      r1,|L1.35808|
009038  e51f2458          LDR      r2,|L1.35816|
00903c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009040  e2822001          ADD      r2,r2,#1
009044  e0811202          ADD      r1,r1,r2,LSL #4
009048  e5810004          STR      r0,[r1,#4]
;;;4144       u32MinMaxValues_old_old[u32NeedleNumber+1][2] = u32MinMaxValues_old[u32NeedleNumber+1][2];
00904c  e59f0b94          LDR      r0,|L1.39912|
009050  e51f1470          LDR      r1,|L1.35816|
009054  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009058  e2811001          ADD      r1,r1,#1
00905c  e0800201          ADD      r0,r0,r1,LSL #4
009060  e5900008          LDR      r0,[r0,#8]
009064  e51f148c          LDR      r1,|L1.35808|
009068  e51f2488          LDR      r2,|L1.35816|
00906c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009070  e2822001          ADD      r2,r2,#1
009074  e0811202          ADD      r1,r1,r2,LSL #4
009078  e5810008          STR      r0,[r1,#8]
;;;4145       u32MinMaxValues_old_old[u32NeedleNumber+1][3] = u32MinMaxValues_old[u32NeedleNumber+1][3];
00907c  e59f0b64          LDR      r0,|L1.39912|
009080  e51f14a0          LDR      r1,|L1.35816|
009084  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009088  e2811001          ADD      r1,r1,#1
00908c  e0800201          ADD      r0,r0,r1,LSL #4
009090  e590000c          LDR      r0,[r0,#0xc]
009094  e51f14bc          LDR      r1,|L1.35808|
009098  e51f24b8          LDR      r2,|L1.35816|
00909c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0090a0  e2822001          ADD      r2,r2,#1
0090a4  e0811202          ADD      r1,r1,r2,LSL #4
0090a8  e581000c          STR      r0,[r1,#0xc]
;;;4146       u32MinMaxValues_old_old[u32NeedleNumber+2][0] = u32MinMaxValues_old[u32NeedleNumber+2][0];
0090ac  e59f0b34          LDR      r0,|L1.39912|
0090b0  e51f14d0          LDR      r1,|L1.35816|
0090b4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0090b8  e2811002          ADD      r1,r1,#2
0090bc  e7900201          LDR      r0,[r0,r1,LSL #4]
0090c0  e51f14e8          LDR      r1,|L1.35808|
0090c4  e51f24e4          LDR      r2,|L1.35816|
0090c8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0090cc  e2822002          ADD      r2,r2,#2
0090d0  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4147       u32MinMaxValues_old_old[u32NeedleNumber+2][1] = u32MinMaxValues_old[u32NeedleNumber+2][1];
0090d4  e59f0b0c          LDR      r0,|L1.39912|
0090d8  e51f14f8          LDR      r1,|L1.35816|
0090dc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0090e0  e2811002          ADD      r1,r1,#2
0090e4  e0800201          ADD      r0,r0,r1,LSL #4
0090e8  e5901004          LDR      r1,[r0,#4]
0090ec  e51f0514          LDR      r0,|L1.35808|
0090f0  e51f2510          LDR      r2,|L1.35816|
0090f4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0090f8  e2822002          ADD      r2,r2,#2
0090fc  e0800202          ADD      r0,r0,r2,LSL #4
009100  e5801004          STR      r1,[r0,#4]
;;;4148       u32MinMaxValues_old_old[u32NeedleNumber+2][2] = u32MinMaxValues_old[u32NeedleNumber+2][2];
009104  e59f0adc          LDR      r0,|L1.39912|
009108  e51f1528          LDR      r1,|L1.35816|
00910c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009110  e2811002          ADD      r1,r1,#2
009114  e0800201          ADD      r0,r0,r1,LSL #4
009118  e5901008          LDR      r1,[r0,#8]
00911c  e51f0544          LDR      r0,|L1.35808|
009120  e51f2540          LDR      r2,|L1.35816|
009124  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009128  e2822002          ADD      r2,r2,#2
00912c  e0800202          ADD      r0,r0,r2,LSL #4
009130  e5801008          STR      r1,[r0,#8]
;;;4149       u32MinMaxValues_old_old[u32NeedleNumber+2][3] = u32MinMaxValues_old[u32NeedleNumber+2][3];
009134  e59f0aac          LDR      r0,|L1.39912|
009138  e51f1558          LDR      r1,|L1.35816|
00913c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009140  e2811002          ADD      r1,r1,#2
009144  e0800201          ADD      r0,r0,r1,LSL #4
009148  e590100c          LDR      r1,[r0,#0xc]
00914c  e51f0574          LDR      r0,|L1.35808|
009150  e51f2570          LDR      r2,|L1.35816|
009154  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009158  e2822002          ADD      r2,r2,#2
00915c  e0800202          ADD      r0,r0,r2,LSL #4
009160  e580100c          STR      r1,[r0,#0xc]
;;;4150       u32MinMaxValues_old_old[u32NeedleNumber+3][0] = u32MinMaxValues_old[u32NeedleNumber+3][0];
009164  e59f0a7c          LDR      r0,|L1.39912|
009168  e51f1588          LDR      r1,|L1.35816|
00916c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009170  e2811003          ADD      r1,r1,#3
009174  e7900201          LDR      r0,[r0,r1,LSL #4]
009178  e51f15a0          LDR      r1,|L1.35808|
00917c  e51f259c          LDR      r2,|L1.35816|
009180  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009184  e2822003          ADD      r2,r2,#3
009188  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4151       u32MinMaxValues_old_old[u32NeedleNumber+3][1] = u32MinMaxValues_old[u32NeedleNumber+3][1];
00918c  e59f0a54          LDR      r0,|L1.39912|
009190  e51f15b0          LDR      r1,|L1.35816|
009194  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009198  e2811003          ADD      r1,r1,#3
00919c  e0800201          ADD      r0,r0,r1,LSL #4
0091a0  e5901004          LDR      r1,[r0,#4]
0091a4  e51f05cc          LDR      r0,|L1.35808|
0091a8  e51f25c8          LDR      r2,|L1.35816|
0091ac  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0091b0  e2822003          ADD      r2,r2,#3
0091b4  e0800202          ADD      r0,r0,r2,LSL #4
0091b8  e5801004          STR      r1,[r0,#4]
;;;4152       u32MinMaxValues_old_old[u32NeedleNumber+3][2] = u32MinMaxValues_old[u32NeedleNumber+3][2];
0091bc  e59f0a24          LDR      r0,|L1.39912|
0091c0  e51f15e0          LDR      r1,|L1.35816|
0091c4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0091c8  e2811003          ADD      r1,r1,#3
0091cc  e0800201          ADD      r0,r0,r1,LSL #4
0091d0  e5901008          LDR      r1,[r0,#8]
0091d4  e51f05fc          LDR      r0,|L1.35808|
0091d8  e51f25f8          LDR      r2,|L1.35816|
0091dc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0091e0  e2822003          ADD      r2,r2,#3
0091e4  e0800202          ADD      r0,r0,r2,LSL #4
0091e8  e5801008          STR      r1,[r0,#8]
;;;4153       u32MinMaxValues_old_old[u32NeedleNumber+3][3] = u32MinMaxValues_old[u32NeedleNumber+3][3];
0091ec  e59f09f4          LDR      r0,|L1.39912|
0091f0  e51f1610          LDR      r1,|L1.35816|
0091f4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0091f8  e2811003          ADD      r1,r1,#3
0091fc  e0800201          ADD      r0,r0,r1,LSL #4
009200  e590100c          LDR      r1,[r0,#0xc]
009204  e51f062c          LDR      r0,|L1.35808|
009208  e51f2628          LDR      r2,|L1.35816|
00920c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009210  e2822003          ADD      r2,r2,#3
009214  e0800202          ADD      r0,r0,r2,LSL #4
009218  e580100c          STR      r1,[r0,#0xc]
;;;4154       u32MinMaxValues_old_old[u32NeedleNumber+4][0] = u32MinMaxValues_old[u32NeedleNumber+4][0];
00921c  e59f09c4          LDR      r0,|L1.39912|
009220  e51f1640          LDR      r1,|L1.35816|
009224  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009228  e2811004          ADD      r1,r1,#4
00922c  e7900201          LDR      r0,[r0,r1,LSL #4]
009230  e51f1658          LDR      r1,|L1.35808|
009234  e51f2654          LDR      r2,|L1.35816|
009238  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00923c  e2822004          ADD      r2,r2,#4
009240  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4155       u32MinMaxValues_old_old[u32NeedleNumber+4][1] = u32MinMaxValues_old[u32NeedleNumber+4][1];
009244  e59f099c          LDR      r0,|L1.39912|
009248  e51f1668          LDR      r1,|L1.35816|
00924c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009250  e2811004          ADD      r1,r1,#4
009254  e0800201          ADD      r0,r0,r1,LSL #4
009258  e5901004          LDR      r1,[r0,#4]
00925c  e51f0684          LDR      r0,|L1.35808|
009260  e51f2680          LDR      r2,|L1.35816|
009264  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009268  e2822004          ADD      r2,r2,#4
00926c  e0800202          ADD      r0,r0,r2,LSL #4
009270  e5801004          STR      r1,[r0,#4]
;;;4156       u32MinMaxValues_old_old[u32NeedleNumber+4][2] = u32MinMaxValues_old[u32NeedleNumber+4][2];
009274  e59f096c          LDR      r0,|L1.39912|
009278  e51f1698          LDR      r1,|L1.35816|
00927c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009280  e2811004          ADD      r1,r1,#4
009284  e0800201          ADD      r0,r0,r1,LSL #4
009288  e5901008          LDR      r1,[r0,#8]
00928c  e51f06b4          LDR      r0,|L1.35808|
009290  e51f26b0          LDR      r2,|L1.35816|
009294  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009298  e2822004          ADD      r2,r2,#4
00929c  e0800202          ADD      r0,r0,r2,LSL #4
0092a0  e5801008          STR      r1,[r0,#8]
;;;4157       u32MinMaxValues_old_old[u32NeedleNumber+4][3] = u32MinMaxValues_old[u32NeedleNumber+4][3];
0092a4  e59f093c          LDR      r0,|L1.39912|
0092a8  e51f16c8          LDR      r1,|L1.35816|
0092ac  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0092b0  e2811004          ADD      r1,r1,#4
0092b4  e0800201          ADD      r0,r0,r1,LSL #4
0092b8  e590000c          LDR      r0,[r0,#0xc]
0092bc  e51f16e4          LDR      r1,|L1.35808|
0092c0  e51f26e0          LDR      r2,|L1.35816|
0092c4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0092c8  e2822004          ADD      r2,r2,#4
0092cc  e0811202          ADD      r1,r1,r2,LSL #4
0092d0  e581000c          STR      r0,[r1,#0xc]
;;;4158       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][0] = u32MinMaxValuesBase_old[u32NeedleNumber+0][0];
0092d4  e59f1910          LDR      r1,|L1.39916|
0092d8  e51f06f8          LDR      r0,|L1.35816|
0092dc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0092e0  e7911200          LDR      r1,[r1,r0,LSL #4]
0092e4  e59f2904          LDR      r2,|L1.39920|
0092e8  e51f0708          LDR      r0,|L1.35816|
0092ec  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0092f0  e7821200          STR      r1,[r2,r0,LSL #4]
;;;4159       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][1] = u32MinMaxValuesBase_old[u32NeedleNumber+0][1];
0092f4  e59f18f0          LDR      r1,|L1.39916|
0092f8  e51f0718          LDR      r0,|L1.35816|
0092fc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009300  e0810200          ADD      r0,r1,r0,LSL #4
009304  e5901004          LDR      r1,[r0,#4]
009308  e51f0728          LDR      r0,|L1.35816|
00930c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009310  e0820200          ADD      r0,r2,r0,LSL #4
009314  e5801004          STR      r1,[r0,#4]
;;;4160       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][2] = u32MinMaxValuesBase_old[u32NeedleNumber+0][2];
009318  e59f18cc          LDR      r1,|L1.39916|
00931c  e51f073c          LDR      r0,|L1.35816|
009320  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009324  e0810200          ADD      r0,r1,r0,LSL #4
009328  e5901008          LDR      r1,[r0,#8]
00932c  e51f074c          LDR      r0,|L1.35816|
009330  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009334  e0820200          ADD      r0,r2,r0,LSL #4
009338  e5801008          STR      r1,[r0,#8]
;;;4161       u32MinMaxValuesBase_old_old[u32NeedleNumber+0][3] = u32MinMaxValuesBase_old[u32NeedleNumber+0][3];
00933c  e59f18a8          LDR      r1,|L1.39916|
009340  e51f0760          LDR      r0,|L1.35816|
009344  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009348  e0810200          ADD      r0,r1,r0,LSL #4
00934c  e590100c          LDR      r1,[r0,#0xc]
009350  e51f0770          LDR      r0,|L1.35816|
009354  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009358  e0820200          ADD      r0,r2,r0,LSL #4
00935c  e580100c          STR      r1,[r0,#0xc]
;;;4162       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][0] = u32MinMaxValuesBase_old[u32NeedleNumber+1][0];
009360  e59f0884          LDR      r0,|L1.39916|
009364  e51f1784          LDR      r1,|L1.35816|
009368  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00936c  e2811001          ADD      r1,r1,#1
009370  e7900201          LDR      r0,[r0,r1,LSL #4]
009374  e2821000          ADD      r1,r2,#0
009378  e51f2798          LDR      r2,|L1.35816|
00937c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009380  e2822001          ADD      r2,r2,#1
009384  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4163       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][1] = u32MinMaxValuesBase_old[u32NeedleNumber+1][1];
009388  e59f085c          LDR      r0,|L1.39916|
00938c  e51f17ac          LDR      r1,|L1.35816|
009390  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009394  e2811001          ADD      r1,r1,#1
009398  e0800201          ADD      r0,r0,r1,LSL #4
00939c  e5900004          LDR      r0,[r0,#4]
0093a0  e59f1848          LDR      r1,|L1.39920|
0093a4  e51f27c4          LDR      r2,|L1.35816|
0093a8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0093ac  e2822001          ADD      r2,r2,#1
0093b0  e0811202          ADD      r1,r1,r2,LSL #4
0093b4  e5810004          STR      r0,[r1,#4]
;;;4164       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][2] = u32MinMaxValuesBase_old[u32NeedleNumber+1][2];
0093b8  e59f082c          LDR      r0,|L1.39916|
0093bc  e51f17dc          LDR      r1,|L1.35816|
0093c0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0093c4  e2811001          ADD      r1,r1,#1
0093c8  e0800201          ADD      r0,r0,r1,LSL #4
0093cc  e5900008          LDR      r0,[r0,#8]
0093d0  e59f1818          LDR      r1,|L1.39920|
0093d4  e51f27f4          LDR      r2,|L1.35816|
0093d8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0093dc  e2822001          ADD      r2,r2,#1
0093e0  e0811202          ADD      r1,r1,r2,LSL #4
0093e4  e5810008          STR      r0,[r1,#8]
;;;4165       u32MinMaxValuesBase_old_old[u32NeedleNumber+1][3] = u32MinMaxValuesBase_old[u32NeedleNumber+1][3];
0093e8  e59f07fc          LDR      r0,|L1.39916|
0093ec  e51f180c          LDR      r1,|L1.35816|
0093f0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0093f4  e2811001          ADD      r1,r1,#1
0093f8  e0800201          ADD      r0,r0,r1,LSL #4
0093fc  e590100c          LDR      r1,[r0,#0xc]
009400  e59f07e8          LDR      r0,|L1.39920|
009404  e51f2824          LDR      r2,|L1.35816|
009408  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00940c  e2822001          ADD      r2,r2,#1
009410  e0800202          ADD      r0,r0,r2,LSL #4
009414  e580100c          STR      r1,[r0,#0xc]
;;;4166   
;;;4167       u32MinMaxValues_old[u32NeedleNumber+0][0] = u32MinMaxValues[u32NeedleNumber+0][0];
009418  e51f183c          LDR      r1,|L1.35812|
00941c  e51f083c          LDR      r0,|L1.35816|
009420  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009424  e7911200          LDR      r1,[r1,r0,LSL #4]
009428  e59f27b8          LDR      r2,|L1.39912|
00942c  e51f084c          LDR      r0,|L1.35816|
009430  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009434  e7821200          STR      r1,[r2,r0,LSL #4]
;;;4168       u32MinMaxValues_old[u32NeedleNumber+0][1] = u32MinMaxValues[u32NeedleNumber+0][1];
009438  e51f185c          LDR      r1,|L1.35812|
00943c  e51f085c          LDR      r0,|L1.35816|
009440  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009444  e0810200          ADD      r0,r1,r0,LSL #4
009448  e5901004          LDR      r1,[r0,#4]
00944c  e51f086c          LDR      r0,|L1.35816|
009450  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009454  e0820200          ADD      r0,r2,r0,LSL #4
009458  e5801004          STR      r1,[r0,#4]
;;;4169       u32MinMaxValues_old[u32NeedleNumber+0][2] = u32MinMaxValues[u32NeedleNumber+0][2];
00945c  e51f1880          LDR      r1,|L1.35812|
009460  e51f0880          LDR      r0,|L1.35816|
009464  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009468  e0810200          ADD      r0,r1,r0,LSL #4
00946c  e5901008          LDR      r1,[r0,#8]
009470  e51f0890          LDR      r0,|L1.35816|
009474  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009478  e0820200          ADD      r0,r2,r0,LSL #4
00947c  e5801008          STR      r1,[r0,#8]
;;;4170       u32MinMaxValues_old[u32NeedleNumber+0][3] = u32MinMaxValues[u32NeedleNumber+0][3];
009480  e51f18a4          LDR      r1,|L1.35812|
009484  e51f08a4          LDR      r0,|L1.35816|
009488  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00948c  e0810200          ADD      r0,r1,r0,LSL #4
009490  e590100c          LDR      r1,[r0,#0xc]
009494  e51f08b4          LDR      r0,|L1.35816|
009498  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
00949c  e0820200          ADD      r0,r2,r0,LSL #4
0094a0  e580100c          STR      r1,[r0,#0xc]
;;;4171       u32MinMaxValues_old[u32NeedleNumber+1][0] = u32MinMaxValues[u32NeedleNumber+1][0];
0094a4  e51f08c8          LDR      r0,|L1.35812|
0094a8  e51f18c8          LDR      r1,|L1.35816|
0094ac  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0094b0  e2811001          ADD      r1,r1,#1
0094b4  e7901201          LDR      r1,[r0,r1,LSL #4]
0094b8  e2820000          ADD      r0,r2,#0
0094bc  e51f28dc          LDR      r2,|L1.35816|
0094c0  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0094c4  e2822001          ADD      r2,r2,#1
0094c8  e7801202          STR      r1,[r0,r2,LSL #4]
;;;4172       u32MinMaxValues_old[u32NeedleNumber+1][1] = u32MinMaxValues[u32NeedleNumber+1][1];
0094cc  e51f08f0          LDR      r0,|L1.35812|
0094d0  e51f18f0          LDR      r1,|L1.35816|
0094d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0094d8  e2811001          ADD      r1,r1,#1
0094dc  e0800201          ADD      r0,r0,r1,LSL #4
0094e0  e5900004          LDR      r0,[r0,#4]
0094e4  e59f16fc          LDR      r1,|L1.39912|
0094e8  e51f2908          LDR      r2,|L1.35816|
0094ec  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0094f0  e2822001          ADD      r2,r2,#1
0094f4  e0811202          ADD      r1,r1,r2,LSL #4
0094f8  e5810004          STR      r0,[r1,#4]
;;;4173       u32MinMaxValues_old[u32NeedleNumber+1][2] = u32MinMaxValues[u32NeedleNumber+1][2];
0094fc  e51f0920          LDR      r0,|L1.35812|
009500  e51f1920          LDR      r1,|L1.35816|
009504  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009508  e2811001          ADD      r1,r1,#1
00950c  e0800201          ADD      r0,r0,r1,LSL #4
009510  e5900008          LDR      r0,[r0,#8]
009514  e59f16cc          LDR      r1,|L1.39912|
009518  e51f2938          LDR      r2,|L1.35816|
00951c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009520  e2822001          ADD      r2,r2,#1
009524  e0811202          ADD      r1,r1,r2,LSL #4
009528  e5810008          STR      r0,[r1,#8]
;;;4174       u32MinMaxValues_old[u32NeedleNumber+1][3] = u32MinMaxValues[u32NeedleNumber+1][3];
00952c  e51f0950          LDR      r0,|L1.35812|
009530  e51f1950          LDR      r1,|L1.35816|
009534  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009538  e2811001          ADD      r1,r1,#1
00953c  e0800201          ADD      r0,r0,r1,LSL #4
009540  e590000c          LDR      r0,[r0,#0xc]
009544  e59f169c          LDR      r1,|L1.39912|
009548  e51f2968          LDR      r2,|L1.35816|
00954c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009550  e2822001          ADD      r2,r2,#1
009554  e0811202          ADD      r1,r1,r2,LSL #4
009558  e581000c          STR      r0,[r1,#0xc]
;;;4175       u32MinMaxValues_old[u32NeedleNumber+2][0] = u32MinMaxValues[u32NeedleNumber+2][0];
00955c  e51f0980          LDR      r0,|L1.35812|
009560  e51f1980          LDR      r1,|L1.35816|
009564  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009568  e2811002          ADD      r1,r1,#2
00956c  e7900201          LDR      r0,[r0,r1,LSL #4]
009570  e59f1670          LDR      r1,|L1.39912|
009574  e51f2994          LDR      r2,|L1.35816|
009578  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00957c  e2822002          ADD      r2,r2,#2
009580  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4176       u32MinMaxValues_old[u32NeedleNumber+2][1] = u32MinMaxValues[u32NeedleNumber+2][1];
009584  e51f09a8          LDR      r0,|L1.35812|
009588  e51f19a8          LDR      r1,|L1.35816|
00958c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009590  e2811002          ADD      r1,r1,#2
009594  e0800201          ADD      r0,r0,r1,LSL #4
009598  e5900004          LDR      r0,[r0,#4]
00959c  e59f1644          LDR      r1,|L1.39912|
0095a0  e51f29c0          LDR      r2,|L1.35816|
0095a4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0095a8  e2822002          ADD      r2,r2,#2
0095ac  e0811202          ADD      r1,r1,r2,LSL #4
0095b0  e5810004          STR      r0,[r1,#4]
;;;4177       u32MinMaxValues_old[u32NeedleNumber+2][2] = u32MinMaxValues[u32NeedleNumber+2][2];
0095b4  e51f09d8          LDR      r0,|L1.35812|
0095b8  e51f19d8          LDR      r1,|L1.35816|
0095bc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0095c0  e2811002          ADD      r1,r1,#2
0095c4  e0800201          ADD      r0,r0,r1,LSL #4
0095c8  e5900008          LDR      r0,[r0,#8]
0095cc  e59f1614          LDR      r1,|L1.39912|
0095d0  e51f29f0          LDR      r2,|L1.35816|
0095d4  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0095d8  e2822002          ADD      r2,r2,#2
0095dc  e0811202          ADD      r1,r1,r2,LSL #4
0095e0  e5810008          STR      r0,[r1,#8]
;;;4178       u32MinMaxValues_old[u32NeedleNumber+2][3] = u32MinMaxValues[u32NeedleNumber+2][3];
0095e4  e51f0a08          LDR      r0,|L1.35812|
0095e8  e51f1a08          LDR      r1,|L1.35816|
0095ec  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0095f0  e2811002          ADD      r1,r1,#2
0095f4  e0800201          ADD      r0,r0,r1,LSL #4
0095f8  e590100c          LDR      r1,[r0,#0xc]
0095fc  e59f05e4          LDR      r0,|L1.39912|
009600  e51f2a20          LDR      r2,|L1.35816|
009604  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009608  e2822002          ADD      r2,r2,#2
00960c  e0800202          ADD      r0,r0,r2,LSL #4
009610  e580100c          STR      r1,[r0,#0xc]
;;;4179       u32MinMaxValues_old[u32NeedleNumber+3][0] = u32MinMaxValues[u32NeedleNumber+3][0];
009614  e51f0a38          LDR      r0,|L1.35812|
009618  e51f1a38          LDR      r1,|L1.35816|
00961c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009620  e2811003          ADD      r1,r1,#3
009624  e7901201          LDR      r1,[r0,r1,LSL #4]
009628  e59f05b8          LDR      r0,|L1.39912|
00962c  e51f2a4c          LDR      r2,|L1.35816|
009630  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009634  e2822003          ADD      r2,r2,#3
009638  e7801202          STR      r1,[r0,r2,LSL #4]
;;;4180       u32MinMaxValues_old[u32NeedleNumber+3][1] = u32MinMaxValues[u32NeedleNumber+3][1];
00963c  e51f0a60          LDR      r0,|L1.35812|
009640  e51f1a60          LDR      r1,|L1.35816|
009644  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009648  e2811003          ADD      r1,r1,#3
00964c  e0800201          ADD      r0,r0,r1,LSL #4
009650  e5900004          LDR      r0,[r0,#4]
009654  e59f158c          LDR      r1,|L1.39912|
009658  e51f2a78          LDR      r2,|L1.35816|
00965c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009660  e2822003          ADD      r2,r2,#3
009664  e0811202          ADD      r1,r1,r2,LSL #4
009668  e5810004          STR      r0,[r1,#4]
;;;4181       u32MinMaxValues_old[u32NeedleNumber+3][2] = u32MinMaxValues[u32NeedleNumber+3][2];
00966c  e51f0a90          LDR      r0,|L1.35812|
009670  e51f1a90          LDR      r1,|L1.35816|
009674  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009678  e2811003          ADD      r1,r1,#3
00967c  e0800201          ADD      r0,r0,r1,LSL #4
009680  e5900008          LDR      r0,[r0,#8]
009684  e59f155c          LDR      r1,|L1.39912|
009688  e51f2aa8          LDR      r2,|L1.35816|
00968c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009690  e2822003          ADD      r2,r2,#3
009694  e0811202          ADD      r1,r1,r2,LSL #4
009698  e5810008          STR      r0,[r1,#8]
;;;4182       u32MinMaxValues_old[u32NeedleNumber+3][3] = u32MinMaxValues[u32NeedleNumber+3][3];
00969c  e51f0ac0          LDR      r0,|L1.35812|
0096a0  e51f1ac0          LDR      r1,|L1.35816|
0096a4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0096a8  e2811003          ADD      r1,r1,#3
0096ac  e0800201          ADD      r0,r0,r1,LSL #4
0096b0  e590100c          LDR      r1,[r0,#0xc]
0096b4  e59f052c          LDR      r0,|L1.39912|
0096b8  e51f2ad8          LDR      r2,|L1.35816|
0096bc  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0096c0  e2822003          ADD      r2,r2,#3
0096c4  e0800202          ADD      r0,r0,r2,LSL #4
0096c8  e580100c          STR      r1,[r0,#0xc]
;;;4183       u32MinMaxValues_old[u32NeedleNumber+4][0] = u32MinMaxValues[u32NeedleNumber+4][0];
0096cc  e51f0af0          LDR      r0,|L1.35812|
0096d0  e51f1af0          LDR      r1,|L1.35816|
0096d4  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0096d8  e2811004          ADD      r1,r1,#4
0096dc  e7901201          LDR      r1,[r0,r1,LSL #4]
0096e0  e59f0500          LDR      r0,|L1.39912|
0096e4  e51f2b04          LDR      r2,|L1.35816|
0096e8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0096ec  e2822004          ADD      r2,r2,#4
0096f0  e7801202          STR      r1,[r0,r2,LSL #4]
;;;4184       u32MinMaxValues_old[u32NeedleNumber+4][1] = u32MinMaxValues[u32NeedleNumber+4][1];
0096f4  e51f0b18          LDR      r0,|L1.35812|
0096f8  e51f1b18          LDR      r1,|L1.35816|
0096fc  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009700  e2811004          ADD      r1,r1,#4
009704  e0800201          ADD      r0,r0,r1,LSL #4
009708  e5900004          LDR      r0,[r0,#4]
00970c  e59f14d4          LDR      r1,|L1.39912|
009710  e51f2b30          LDR      r2,|L1.35816|
009714  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009718  e2822004          ADD      r2,r2,#4
00971c  e0811202          ADD      r1,r1,r2,LSL #4
009720  e5810004          STR      r0,[r1,#4]
;;;4185       u32MinMaxValues_old[u32NeedleNumber+4][2] = u32MinMaxValues[u32NeedleNumber+4][2];
009724  e51f0b48          LDR      r0,|L1.35812|
009728  e51f1b48          LDR      r1,|L1.35816|
00972c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009730  e2811004          ADD      r1,r1,#4
009734  e0800201          ADD      r0,r0,r1,LSL #4
009738  e5901008          LDR      r1,[r0,#8]
00973c  e59f04a4          LDR      r0,|L1.39912|
009740  e51f2b60          LDR      r2,|L1.35816|
009744  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009748  e2822004          ADD      r2,r2,#4
00974c  e0800202          ADD      r0,r0,r2,LSL #4
009750  e5801008          STR      r1,[r0,#8]
;;;4186   
;;;4187       u32MinMaxValues_old[u32NeedleNumber+4][3] = u32MinMaxValues[u32NeedleNumber+4][3];
009754  e51f0b78          LDR      r0,|L1.35812|
009758  e51f1b78          LDR      r1,|L1.35816|
00975c  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009760  e2811004          ADD      r1,r1,#4
009764  e0800201          ADD      r0,r0,r1,LSL #4
009768  e590000c          LDR      r0,[r0,#0xc]
00976c  e59f1474          LDR      r1,|L1.39912|
009770  e51f2b90          LDR      r2,|L1.35816|
009774  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009778  e2822004          ADD      r2,r2,#4
00977c  e0811202          ADD      r1,r1,r2,LSL #4
009780  e581000c          STR      r0,[r1,#0xc]
;;;4188       u32MinMaxValuesBase_old[u32NeedleNumber+0][0] = u32MinMaxValuesBase[u32NeedleNumber+0][0];
009784  e59f1458          LDR      r1,|L1.39908|
009788  e51f0ba8          LDR      r0,|L1.35816|
00978c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009790  e7911200          LDR      r1,[r1,r0,LSL #4]
009794  e59f2450          LDR      r2,|L1.39916|
009798  e51f0bb8          LDR      r0,|L1.35816|
00979c  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097a0  e7821200          STR      r1,[r2,r0,LSL #4]
;;;4189       u32MinMaxValuesBase_old[u32NeedleNumber+0][1] = u32MinMaxValuesBase[u32NeedleNumber+0][1];
0097a4  e59f1438          LDR      r1,|L1.39908|
0097a8  e51f0bc8          LDR      r0,|L1.35816|
0097ac  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097b0  e0810200          ADD      r0,r1,r0,LSL #4
0097b4  e5901004          LDR      r1,[r0,#4]
0097b8  e51f0bd8          LDR      r0,|L1.35816|
0097bc  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097c0  e0820200          ADD      r0,r2,r0,LSL #4
0097c4  e5801004          STR      r1,[r0,#4]
;;;4190       u32MinMaxValuesBase_old[u32NeedleNumber+0][2] = u32MinMaxValuesBase[u32NeedleNumber+0][2];
0097c8  e59f1414          LDR      r1,|L1.39908|
0097cc  e51f0bec          LDR      r0,|L1.35816|
0097d0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097d4  e0810200          ADD      r0,r1,r0,LSL #4
0097d8  e5901008          LDR      r1,[r0,#8]
0097dc  e51f0bfc          LDR      r0,|L1.35816|
0097e0  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097e4  e0820200          ADD      r0,r2,r0,LSL #4
0097e8  e5801008          STR      r1,[r0,#8]
;;;4191       u32MinMaxValuesBase_old[u32NeedleNumber+0][3] = u32MinMaxValuesBase[u32NeedleNumber+0][3];
0097ec  e59f13f0          LDR      r1,|L1.39908|
0097f0  e51f0c10          LDR      r0,|L1.35816|
0097f4  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
0097f8  e0810200          ADD      r0,r1,r0,LSL #4
0097fc  e590100c          LDR      r1,[r0,#0xc]
009800  e51f0c20          LDR      r0,|L1.35816|
009804  e5900000          LDR      r0,[r0,#0]  ; u32NeedleNumber
009808  e0820200          ADD      r0,r2,r0,LSL #4
00980c  e580100c          STR      r1,[r0,#0xc]
;;;4192       u32MinMaxValuesBase_old[u32NeedleNumber+1][0] = u32MinMaxValuesBase[u32NeedleNumber+1][0];
009810  e59f03cc          LDR      r0,|L1.39908|
009814  e51f1c34          LDR      r1,|L1.35816|
009818  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
00981c  e2811001          ADD      r1,r1,#1
009820  e7900201          LDR      r0,[r0,r1,LSL #4]
009824  e2821000          ADD      r1,r2,#0
009828  e51f2c48          LDR      r2,|L1.35816|
00982c  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
009830  e2822001          ADD      r2,r2,#1
009834  e7810202          STR      r0,[r1,r2,LSL #4]
;;;4193       u32MinMaxValuesBase_old[u32NeedleNumber+1][1] = u32MinMaxValuesBase[u32NeedleNumber+1][1];
009838  e59f03a4          LDR      r0,|L1.39908|
00983c  e51f1c5c          LDR      r1,|L1.35816|
009840  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009844  e2811001          ADD      r1,r1,#1
009848  e0800201          ADD      r0,r0,r1,LSL #4
00984c  e5901004          LDR      r1,[r0,#4]
009850  e59f0394          LDR      r0,|L1.39916|
009854  e51f2c74          LDR      r2,|L1.35816|
009858  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00985c  e2822001          ADD      r2,r2,#1
009860  e0800202          ADD      r0,r0,r2,LSL #4
009864  e5801004          STR      r1,[r0,#4]
;;;4194       u32MinMaxValuesBase_old[u32NeedleNumber+1][2] = u32MinMaxValuesBase[u32NeedleNumber+1][2];
009868  e59f0374          LDR      r0,|L1.39908|
00986c  e51f1c8c          LDR      r1,|L1.35816|
009870  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
009874  e2811001          ADD      r1,r1,#1
009878  e0800201          ADD      r0,r0,r1,LSL #4
00987c  e5901008          LDR      r1,[r0,#8]
009880  e59f0364          LDR      r0,|L1.39916|
009884  e51f2ca4          LDR      r2,|L1.35816|
009888  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
00988c  e2822001          ADD      r2,r2,#1
009890  e0800202          ADD      r0,r0,r2,LSL #4
009894  e5801008          STR      r1,[r0,#8]
;;;4195       u32MinMaxValuesBase_old[u32NeedleNumber+1][3] = u32MinMaxValuesBase[u32NeedleNumber+1][3];
009898  e59f0344          LDR      r0,|L1.39908|
00989c  e51f1cbc          LDR      r1,|L1.35816|
0098a0  e5911000          LDR      r1,[r1,#0]  ; u32NeedleNumber
0098a4  e2811001          ADD      r1,r1,#1
0098a8  e0800201          ADD      r0,r0,r1,LSL #4
0098ac  e590000c          LDR      r0,[r0,#0xc]
0098b0  e59f1334          LDR      r1,|L1.39916|
0098b4  e51f2cd4          LDR      r2,|L1.35816|
0098b8  e5922000          LDR      r2,[r2,#0]  ; u32NeedleNumber
0098bc  e2822001          ADD      r2,r2,#1
0098c0  e0811202          ADD      r1,r1,r2,LSL #4
0098c4  e581000c          STR      r0,[r1,#0xc]
;;;4196   }
0098c8  e28dd0dc          ADD      sp,sp,#0xdc
0098cc  e8bd8ff0          POP      {r4-r11,pc}
;;;4197   
                          ENDP

                  vGfBuffShearFull PROC
;;;4200           
;;;4201   void vGfBuffShearFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
0098d0  e92d43f0          PUSH     {r4-r9,lr}
;;;4202                         int32_t i32PosX, int32_t i32PosY)
;;;4203   {
0098d4  e24dd03c          SUB      sp,sp,#0x3c
0098d8  e1a04000          MOV      r4,r0
0098dc  e1a06001          MOV      r6,r1
0098e0  e1a07002          MOV      r7,r2
0098e4  e1a05003          MOV      r5,r3
0098e8  e1cd85d8          LDRD     r8,r9,[sp,#0x58]
;;;4204       rot_mem_st      stMem;
;;;4205       rot_sscalCfg_st stParam;
;;;4206   
;;;4207       u8PreviousOperation = 0U;
0098ec  e3a00000          MOV      r0,#0
0098f0  e51f1d20          LDR      r1,|L1.35800|
0098f4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4208   
;;;4209       stMem.u32SrcAddr      = pstSrcImage->u32Address;
0098f8  e5940000          LDR      r0,[r4,#0]
0098fc  e58d002c          STR      r0,[sp,#0x2c]
;;;4210       stMem.u16SrcHeight    = pstSrcImage->u16Height;
009900  e1d400b6          LDRH     r0,[r4,#6]
009904  e1cd02b8          STRH     r0,[sp,#0x28]
;;;4211       stMem.u16SrcWidth     = pstSrcImage->u16Width;
009908  e1d400b4          LDRH     r0,[r4,#4]
00990c  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;4212       stMem.u32DstAddr      = pstDstImage->u32Address;
009910  e5950000          LDR      r0,[r5,#0]
009914  e58d0030          STR      r0,[sp,#0x30]
;;;4213       stMem.u16DstImgWidth  = pstDstImage->u16Width;
009918  e1d500b4          LDRH     r0,[r5,#4]
00991c  e1cd03b4          STRH     r0,[sp,#0x34]
;;;4214       stMem.u16DstImgHeight = pstDstImage->u16Height;
009920  e1d500b6          LDRH     r0,[r5,#6]
009924  e1cd03b6          STRH     r0,[sp,#0x36]
;;;4215   
;;;4216       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
009928  e5d4000c          LDRB     r0,[r4,#0xc]
00992c  e3500004          CMP      r0,#4
009930  1a000002          BNE      |L1.39232|
;;;4217       {
;;;4218           stParam.eSrcColFmt = GA_RGB16;
009934  e3a00000          MOV      r0,#0
009938  e5cd0000          STRB     r0,[sp,#0]
00993c  ea000001          B        |L1.39240|
                  |L1.39232|
;;;4219       }
;;;4220       else
;;;4221       {
;;;4222           stParam.eSrcColFmt = GA_RGBA32;
009940  e3a00001          MOV      r0,#1
009944  e5cd0000          STRB     r0,[sp,#0]
                  |L1.39240|
;;;4223       }
;;;4224   
;;;4225       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
009948  e5d5000c          LDRB     r0,[r5,#0xc]
00994c  e3500004          CMP      r0,#4
009950  1a000002          BNE      |L1.39264|
;;;4226       {
;;;4227           stParam.eDstColFmt = GA_RGB16;
009954  e3a00000          MOV      r0,#0
009958  e5cd0001          STRB     r0,[sp,#1]
00995c  ea000001          B        |L1.39272|
                  |L1.39264|
;;;4228       }
;;;4229       else
;;;4230       {
;;;4231           stParam.eDstColFmt = GA_RGBA32;
009960  e3a00001          MOV      r0,#1
009964  e5cd0001          STRB     r0,[sp,#1]
                  |L1.39272|
;;;4232       }
;;;4233   
;;;4234       /* handle clip window */
;;;4235       stParam.eClipWndEn = stGastate.eClipWndEn;
009968  e51f0d94          LDR      r0,|L1.35804|
00996c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
009970  e5cd0002          STRB     r0,[sp,#2]
;;;4236       if (stParam.eClipWndEn == GA_EN)
009974  e5dd0002          LDRB     r0,[sp,#2]
009978  e3500001          CMP      r0,#1
00997c  1a00000b          BNE      |L1.39344|
;;;4237       {
;;;4238           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
009980  e51f0dac          LDR      r0,|L1.35804|
009984  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
009988  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;4239           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
00998c  e51f0db8          LDR      r0,|L1.35804|
009990  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
009994  e1cd01be          STRH     r0,[sp,#0x1e]
;;;4240           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
009998  e51f0dc4          LDR      r0,|L1.35804|
00999c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
0099a0  e1cd02b0          STRH     r0,[sp,#0x20]
;;;4241           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
0099a4  e51f0dd0          LDR      r0,|L1.35804|
0099a8  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
0099ac  e1cd02b2          STRH     r0,[sp,#0x22]
                  |L1.39344|
;;;4242       }
;;;4243   
;;;4244       stParam.eFilterEn     = stGastate.eFilterEn;
0099b0  e51f0ddc          LDR      r0,|L1.35804|
0099b4  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
0099b8  e5cd0003          STRB     r0,[sp,#3]
;;;4245       stParam.i16OffsetX    = i32PosX;
0099bc  e6bf0078          SXTH     r0,r8
0099c0  e1cd00b4          STRH     r0,[sp,#4]
;;;4246       stParam.i16OffsetY    = i32PosY;
0099c4  e6bf0079          SXTH     r0,r9
0099c8  e1cd00b6          STRH     r0,[sp,#6]
;;;4247   #ifdef GA_USE_MATH_LIB
;;;4248       stParam.f64FactorX    = f32FactorX;
0099cc  e1a00006          MOV      r0,r6
0099d0  ebfffffe          BL       __aeabi_f2d
0099d4  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;4249       stParam.f64FactorY    = f32FactorY;
0099d8  e1a00007          MOV      r0,r7
0099dc  ebfffffe          BL       __aeabi_f2d
0099e0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4250   #else
;;;4251       stParam.i32FactorX    = (int32_t)(65536.0 * f32FactorX);
;;;4252       stParam.i32FactorY    = (int32_t)(65536.0 * f32FactorY);
;;;4253   #endif
;;;4254       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
0099e4  e51f0e10          LDR      r0,|L1.35804|
0099e8  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
0099ec  e5cd0019          STRB     r0,[sp,#0x19]
;;;4255       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
0099f0  e51f0e1c          LDR      r0,|L1.35804|
0099f4  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
0099f8  e5cd001a          STRB     r0,[sp,#0x1a]
;;;4256       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
0099fc  e51f0e28          LDR      r0,|L1.35804|
009a00  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
009a04  e5cd001b          STRB     r0,[sp,#0x1b]
;;;4257   
;;;4258       vRotLib_Shear(&stMem, &stParam, pstWriteList);
009a08  e51f0e24          LDR      r0,|L1.35820|
009a0c  e1a0100d          MOV      r1,sp
009a10  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
009a14  e28d0028          ADD      r0,sp,#0x28
009a18  ebfffffe          BL       vRotLib_Shear
;;;4259   }
009a1c  e28dd03c          ADD      sp,sp,#0x3c
009a20  e8bd83f0          POP      {r4-r9,pc}
;;;4260   
                          ENDP

                  vGfBuffShearBlendFull PROC
;;;4263   
;;;4264   void vGfBuffShearBlendFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
009a24  e92d43f0          PUSH     {r4-r9,lr}
;;;4265                              int32_t i32PosX, int32_t i32PosY)
;;;4266   {
009a28  e24dd044          SUB      sp,sp,#0x44
009a2c  e1a04000          MOV      r4,r0
009a30  e1a06001          MOV      r6,r1
009a34  e1a07002          MOV      r7,r2
009a38  e1a05003          MOV      r5,r3
009a3c  e1cd86d0          LDRD     r8,r9,[sp,#0x60]
;;;4267       rot_mem_st           stMem;
;;;4268       rot_sscalblendCfg_st stParam;
;;;4269   
;;;4270       u8PreviousOperation = 0U;
009a40  e3a00000          MOV      r0,#0
009a44  e51f1e74          LDR      r1,|L1.35800|
009a48  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4271   
;;;4272       stMem.u32SrcAddr      = pstSrcImage->u32Address;
009a4c  e5940000          LDR      r0,[r4,#0]
009a50  e58d0034          STR      r0,[sp,#0x34]
;;;4273       stMem.u16SrcHeight    = pstSrcImage->u16Height;
009a54  e1d400b6          LDRH     r0,[r4,#6]
009a58  e1cd03b0          STRH     r0,[sp,#0x30]
;;;4274       stMem.u16SrcWidth     = pstSrcImage->u16Width;
009a5c  e1d400b4          LDRH     r0,[r4,#4]
009a60  e1cd03b2          STRH     r0,[sp,#0x32]
;;;4275       stMem.u32DstAddr      = pstDstImage->u32Address;
009a64  e5950000          LDR      r0,[r5,#0]
009a68  e58d0038          STR      r0,[sp,#0x38]
;;;4276       stMem.u16DstImgWidth  = pstDstImage->u16Width;
009a6c  e1d500b4          LDRH     r0,[r5,#4]
009a70  e1cd03bc          STRH     r0,[sp,#0x3c]
;;;4277       stMem.u16DstImgHeight = pstDstImage->u16Height;
009a74  e1d500b6          LDRH     r0,[r5,#6]
009a78  e1cd03be          STRH     r0,[sp,#0x3e]
;;;4278   
;;;4279       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
009a7c  e5d4000c          LDRB     r0,[r4,#0xc]
009a80  e3500004          CMP      r0,#4
009a84  1a000002          BNE      |L1.39572|
;;;4280       {
;;;4281           stParam.eSrcColFmt = GA_RGB16;
009a88  e3a00000          MOV      r0,#0
009a8c  e5cd0000          STRB     r0,[sp,#0]
009a90  ea000001          B        |L1.39580|
                  |L1.39572|
;;;4282       }
;;;4283       else
;;;4284       {
;;;4285           stParam.eSrcColFmt = GA_RGBA32;
009a94  e3a00001          MOV      r0,#1
009a98  e5cd0000          STRB     r0,[sp,#0]
                  |L1.39580|
;;;4286       }
;;;4287   
;;;4288       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
009a9c  e5d5000c          LDRB     r0,[r5,#0xc]
009aa0  e3500004          CMP      r0,#4
009aa4  1a000002          BNE      |L1.39604|
;;;4289       {
;;;4290           stParam.eDstColFmt = GA_RGB16;
009aa8  e3a00000          MOV      r0,#0
009aac  e5cd0001          STRB     r0,[sp,#1]
009ab0  ea000001          B        |L1.39612|
                  |L1.39604|
;;;4291       }
;;;4292       else
;;;4293       {
;;;4294           stParam.eDstColFmt = GA_RGBA32;
009ab4  e3a00001          MOV      r0,#1
009ab8  e5cd0001          STRB     r0,[sp,#1]
                  |L1.39612|
;;;4295       }
;;;4296   
;;;4297       /* handle clip window */
;;;4298       stParam.eClipWndEn = stGastate.eClipWndEn;
009abc  e51f0ee8          LDR      r0,|L1.35804|
009ac0  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
009ac4  e5cd0002          STRB     r0,[sp,#2]
;;;4299       if (stParam.eClipWndEn == GA_EN)
009ac8  e5dd0002          LDRB     r0,[sp,#2]
009acc  e3500001          CMP      r0,#1
009ad0  1a00000b          BNE      |L1.39684|
;;;4300       {
;;;4301           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
009ad4  e51f0f00          LDR      r0,|L1.35804|
009ad8  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
009adc  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4302           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
009ae0  e51f0f0c          LDR      r0,|L1.35804|
009ae4  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
009ae8  e1cd02b8          STRH     r0,[sp,#0x28]
;;;4303           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
009aec  e51f0f18          LDR      r0,|L1.35804|
009af0  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
009af4  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;4304           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
009af8  e51f0f24          LDR      r0,|L1.35804|
009afc  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
009b00  e1cd02bc          STRH     r0,[sp,#0x2c]
                  |L1.39684|
;;;4305       }
;;;4306   
;;;4307       stParam.eFilterEn     = stGastate.eFilterEn;
009b04  e51f0f30          LDR      r0,|L1.35804|
009b08  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
009b0c  e5cd0003          STRB     r0,[sp,#3]
;;;4308       stParam.i16OffsetX    = i32PosX;
009b10  e6bf0078          SXTH     r0,r8
009b14  e1cd00b4          STRH     r0,[sp,#4]
;;;4309       stParam.i16OffsetY    = i32PosY;
009b18  e6bf0079          SXTH     r0,r9
009b1c  e1cd00b6          STRH     r0,[sp,#6]
;;;4310   #ifdef GA_USE_MATH_LIB
;;;4311       stParam.f64FactorX    = f32FactorX;
009b20  e1a00006          MOV      r0,r6
009b24  ebfffffe          BL       __aeabi_f2d
009b28  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;4312       stParam.f64FactorY    = f32FactorY;
009b2c  e1a00007          MOV      r0,r7
009b30  ebfffffe          BL       __aeabi_f2d
009b34  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4313   #else
;;;4314       stParam.i32FactorX    = (int32_t)(65536.0 * f32FactorX);
;;;4315       stParam.i32FactorY    = (int32_t)(65536.0 * f32FactorY);
;;;4316   #endif
;;;4317       stParam.eBldOrd       = stGastate.eBlndOrder;
009b38  e51f0f64          LDR      r0,|L1.35804|
009b3c  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
009b40  e5cd0022          STRB     r0,[sp,#0x22]
;;;4318       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
009b44  e51f0f70          LDR      r0,|L1.35804|
009b48  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
009b4c  e5cd0021          STRB     r0,[sp,#0x21]
;;;4319       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
009b50  e51f0f7c          LDR      r0,|L1.35804|
009b54  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
009b58  e5cd0023          STRB     r0,[sp,#0x23]
;;;4320       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
009b5c  e51f0f88          LDR      r0,|L1.35804|
009b60  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
009b64  e5cd0024          STRB     r0,[sp,#0x24]
;;;4321   
;;;4322       stParam.eDstRedProt   = stGastate.eRedChPrtEn;
009b68  e51f0f94          LDR      r0,|L1.35804|
009b6c  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
009b70  e5cd0019          STRB     r0,[sp,#0x19]
;;;4323       stParam.eDstGreenProt = stGastate.eGreenChPrtEn;
009b74  e51f0fa0          LDR      r0,|L1.35804|
009b78  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
009b7c  e5cd001a          STRB     r0,[sp,#0x1a]
;;;4324       stParam.eDstBlueProt  = stGastate.eBlueChPrtEn;
009b80  e51f0fac          LDR      r0,|L1.35804|
009b84  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
009b88  e5cd001b          STRB     r0,[sp,#0x1b]
;;;4325       stParam.eDstAlphaProt = stGastate.eAlphaChPrtEn;
009b8c  e51f0fb8          LDR      r0,|L1.35804|
009b90  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
009b94  e5cd001c          STRB     r0,[sp,#0x1c]
;;;4326       stParam.eSrcRedFad    = stGastate.eSrcRedFad;
009b98  e51f0fc4          LDR      r0,|L1.35804|
009b9c  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
009ba0  e5cd001d          STRB     r0,[sp,#0x1d]
;;;4327       stParam.eSrcGreenFad  = stGastate.eSrcGreenFad;
009ba4  e51f0fd0          LDR      r0,|L1.35804|
009ba8  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
009bac  e5cd001e          STRB     r0,[sp,#0x1e]
;;;4328       stParam.eSrcBlueFad   = stGastate.eSrcBlueFad;
009bb0  e51f0fdc          LDR      r0,|L1.35804|
009bb4  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
009bb8  e5cd001f          STRB     r0,[sp,#0x1f]
;;;4329       stParam.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
009bbc  e51f0fe8          LDR      r0,|L1.35804|
009bc0  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
009bc4  e5cd0020          STRB     r0,[sp,#0x20]
;;;4330       
;;;4331       vRotLib_ShearBlend(&stMem, &stParam, pstWriteList);
009bc8  e51f0fe4          LDR      r0,|L1.35820|
009bcc  e1a0100d          MOV      r1,sp
009bd0  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
009bd4  e28d0030          ADD      r0,sp,#0x30
009bd8  ebfffffe          BL       vRotLib_ShearBlend
;;;4332   }
009bdc  e28dd044          ADD      sp,sp,#0x44
009be0  e8bd83f0          POP      {r4-r9,pc}
                  |L1.39908|
                          DCD      u32MinMaxValuesBase
                  |L1.39912|
                          DCD      u32MinMaxValues_old
                  |L1.39916|
                          DCD      u32MinMaxValuesBase_old
                  |L1.39920|
                          DCD      u32MinMaxValuesBase_old_old
                          ENDP

                  vGfBuffScaleFull PROC
;;;4336   
;;;4337   void vGfBuffScaleFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY,
009bf4  e92d47f0          PUSH     {r4-r10,lr}
;;;4338                         rot_scaleAlign_e eAlignment, gf_image_st * pstDstImage,
;;;4339                         int32_t i32PosX, int32_t i32PosY)
;;;4340   {
009bf8  e24dd038          SUB      sp,sp,#0x38
009bfc  e1a04000          MOV      r4,r0
009c00  e1a06001          MOV      r6,r1
009c04  e1a07002          MOV      r7,r2
009c08  e1a08003          MOV      r8,r3
009c0c  e28da058          ADD      r10,sp,#0x58
009c10  e89a0620          LDM      r10,{r5,r9,r10}
;;;4341       rot_mem_st      stMem;
;;;4342       rot_sscalCfg_st stParam;
;;;4343   
;;;4344       u8PreviousOperation = 0U;
009c14  e3a00000          MOV      r0,#0
009c18  e59f1e60          LDR      r1,|L1.43648|
009c1c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4345   
;;;4346       stMem.u32SrcAddr      = pstSrcImage->u32Address;
009c20  e5940000          LDR      r0,[r4,#0]
009c24  e58d002c          STR      r0,[sp,#0x2c]
;;;4347       stMem.u16SrcHeight    = pstSrcImage->u16Height;
009c28  e1d400b6          LDRH     r0,[r4,#6]
009c2c  e1cd02b8          STRH     r0,[sp,#0x28]
;;;4348       stMem.u16SrcWidth     = pstSrcImage->u16Width;
009c30  e1d400b4          LDRH     r0,[r4,#4]
009c34  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;4349       stMem.u32DstAddr      = pstDstImage->u32Address;
009c38  e5950000          LDR      r0,[r5,#0]
009c3c  e58d0030          STR      r0,[sp,#0x30]
;;;4350       stMem.u16DstImgWidth  = pstDstImage->u16Width;
009c40  e1d500b4          LDRH     r0,[r5,#4]
009c44  e1cd03b4          STRH     r0,[sp,#0x34]
;;;4351       stMem.u16DstImgHeight = pstDstImage->u16Height;
009c48  e1d500b6          LDRH     r0,[r5,#6]
009c4c  e1cd03b6          STRH     r0,[sp,#0x36]
;;;4352   
;;;4353       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
009c50  e5d4000c          LDRB     r0,[r4,#0xc]
009c54  e3500004          CMP      r0,#4
009c58  1a000002          BNE      |L1.40040|
;;;4354       {
;;;4355           stParam.eSrcColFmt = GA_RGB16;
009c5c  e3a00000          MOV      r0,#0
009c60  e5cd0000          STRB     r0,[sp,#0]
009c64  ea000001          B        |L1.40048|
                  |L1.40040|
;;;4356       }
;;;4357       else
;;;4358       {
;;;4359           stParam.eSrcColFmt = GA_RGBA32;
009c68  e3a00001          MOV      r0,#1
009c6c  e5cd0000          STRB     r0,[sp,#0]
                  |L1.40048|
;;;4360       }
;;;4361   
;;;4362       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
009c70  e5d5000c          LDRB     r0,[r5,#0xc]
009c74  e3500004          CMP      r0,#4
009c78  1a000002          BNE      |L1.40072|
;;;4363       {
;;;4364           stParam.eDstColFmt = GA_RGB16;
009c7c  e3a00000          MOV      r0,#0
009c80  e5cd0001          STRB     r0,[sp,#1]
009c84  ea000001          B        |L1.40080|
                  |L1.40072|
;;;4365       }
;;;4366       else
;;;4367       {
;;;4368           stParam.eDstColFmt = GA_RGBA32;
009c88  e3a00001          MOV      r0,#1
009c8c  e5cd0001          STRB     r0,[sp,#1]
                  |L1.40080|
;;;4369       }
;;;4370   
;;;4371       /* handle clip window */
;;;4372       stParam.eClipWndEn = stGastate.eClipWndEn;
009c90  e59f0dec          LDR      r0,|L1.43652|
009c94  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
009c98  e5cd0002          STRB     r0,[sp,#2]
;;;4373       if (stParam.eClipWndEn == GA_EN)
009c9c  e5dd0002          LDRB     r0,[sp,#2]
009ca0  e3500001          CMP      r0,#1
009ca4  1a00000b          BNE      |L1.40152|
;;;4374       {
;;;4375           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
009ca8  e59f0dd4          LDR      r0,|L1.43652|
009cac  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
009cb0  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;4376           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
009cb4  e59f0dc8          LDR      r0,|L1.43652|
009cb8  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
009cbc  e1cd01be          STRH     r0,[sp,#0x1e]
;;;4377           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
009cc0  e59f0dbc          LDR      r0,|L1.43652|
009cc4  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
009cc8  e1cd02b0          STRH     r0,[sp,#0x20]
;;;4378           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
009ccc  e59f0db0          LDR      r0,|L1.43652|
009cd0  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
009cd4  e1cd02b2          STRH     r0,[sp,#0x22]
                  |L1.40152|
;;;4379       }
;;;4380   
;;;4381       stParam.eFilterEn     = stGastate.eFilterEn;
009cd8  e59f0da4          LDR      r0,|L1.43652|
009cdc  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
009ce0  e5cd0003          STRB     r0,[sp,#3]
;;;4382       stParam.i16OffsetX    = i32PosX;
009ce4  e6bf0079          SXTH     r0,r9
009ce8  e1cd00b4          STRH     r0,[sp,#4]
;;;4383       stParam.i16OffsetY    = i32PosY;
009cec  e6bf007a          SXTH     r0,r10
009cf0  e1cd00b6          STRH     r0,[sp,#6]
;;;4384   #ifdef GA_USE_MATH_LIB
;;;4385       stParam.f64FactorX    = f32FactorX;
009cf4  e1a00006          MOV      r0,r6
009cf8  ebfffffe          BL       __aeabi_f2d
009cfc  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;4386       stParam.f64FactorY    = f32FactorY;
009d00  e1a00007          MOV      r0,r7
009d04  ebfffffe          BL       __aeabi_f2d
009d08  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4387   #else
;;;4388       stParam.i32FactorX    = (int32_t)(65536.0 * f32FactorX);
;;;4389       stParam.i32FactorY    = (int32_t)(65536.0 * f32FactorY);
;;;4390   #endif
;;;4391       stParam.eAlignment    = eAlignment;
009d0c  e5cd8018          STRB     r8,[sp,#0x18]
;;;4392       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
009d10  e59f0d6c          LDR      r0,|L1.43652|
009d14  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
009d18  e5cd0019          STRB     r0,[sp,#0x19]
;;;4393       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
009d1c  e59f0d60          LDR      r0,|L1.43652|
009d20  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
009d24  e5cd001a          STRB     r0,[sp,#0x1a]
;;;4394       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
009d28  e59f0d54          LDR      r0,|L1.43652|
009d2c  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
009d30  e5cd001b          STRB     r0,[sp,#0x1b]
;;;4395   
;;;4396       vRotLib_Scale(&stMem, &stParam, pstWriteList);
009d34  e59f0d4c          LDR      r0,|L1.43656|
009d38  e1a0100d          MOV      r1,sp
009d3c  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
009d40  e28d0028          ADD      r0,sp,#0x28
009d44  ebfffffe          BL       vRotLib_Scale
;;;4397   }
009d48  e28dd038          ADD      sp,sp,#0x38
009d4c  e8bd87f0          POP      {r4-r10,pc}
;;;4398   
                          ENDP

                  vGfBuffScaleBlendFull PROC
;;;4401   
;;;4402   void vGfBuffScaleBlendFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY,
009d50  e92d47f0          PUSH     {r4-r10,lr}
;;;4403                              rot_scaleAlign_e eAlignment, gf_image_st * pstDstImage,
;;;4404                              int32_t i32PosX, int32_t i32PosY)
;;;4405   {
009d54  e24dd040          SUB      sp,sp,#0x40
009d58  e1a04000          MOV      r4,r0
009d5c  e1a06001          MOV      r6,r1
009d60  e1a07002          MOV      r7,r2
009d64  e1a08003          MOV      r8,r3
009d68  e28da060          ADD      r10,sp,#0x60
009d6c  e89a0620          LDM      r10,{r5,r9,r10}
;;;4406       rot_mem_st           stMem;
;;;4407       rot_sscalblendCfg_st stParam;
;;;4408   
;;;4409       u8PreviousOperation = 0U;
009d70  e3a00000          MOV      r0,#0
009d74  e59f1d04          LDR      r1,|L1.43648|
009d78  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4410   
;;;4411       stMem.u32SrcAddr      = pstSrcImage->u32Address;
009d7c  e5940000          LDR      r0,[r4,#0]
009d80  e58d0034          STR      r0,[sp,#0x34]
;;;4412       stMem.u16SrcHeight    = pstSrcImage->u16Height;
009d84  e1d400b6          LDRH     r0,[r4,#6]
009d88  e1cd03b0          STRH     r0,[sp,#0x30]
;;;4413       stMem.u16SrcWidth     = pstSrcImage->u16Width;
009d8c  e1d400b4          LDRH     r0,[r4,#4]
009d90  e1cd03b2          STRH     r0,[sp,#0x32]
;;;4414       stMem.u32DstAddr      = pstDstImage->u32Address;
009d94  e5950000          LDR      r0,[r5,#0]
009d98  e58d0038          STR      r0,[sp,#0x38]
;;;4415       stMem.u16DstImgWidth  = pstDstImage->u16Width;
009d9c  e1d500b4          LDRH     r0,[r5,#4]
009da0  e1cd03bc          STRH     r0,[sp,#0x3c]
;;;4416       stMem.u16DstImgHeight = pstDstImage->u16Height;
009da4  e1d500b6          LDRH     r0,[r5,#6]
009da8  e1cd03be          STRH     r0,[sp,#0x3e]
;;;4417   
;;;4418       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
009dac  e5d4000c          LDRB     r0,[r4,#0xc]
009db0  e3500004          CMP      r0,#4
009db4  1a000002          BNE      |L1.40388|
;;;4419       {
;;;4420           stParam.eSrcColFmt = GA_RGB16;
009db8  e3a00000          MOV      r0,#0
009dbc  e5cd0000          STRB     r0,[sp,#0]
009dc0  ea000001          B        |L1.40396|
                  |L1.40388|
;;;4421       }
;;;4422       else
;;;4423       {
;;;4424           stParam.eSrcColFmt = GA_RGBA32;
009dc4  e3a00001          MOV      r0,#1
009dc8  e5cd0000          STRB     r0,[sp,#0]
                  |L1.40396|
;;;4425       }
;;;4426   
;;;4427       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
009dcc  e5d5000c          LDRB     r0,[r5,#0xc]
009dd0  e3500004          CMP      r0,#4
009dd4  1a000002          BNE      |L1.40420|
;;;4428       {
;;;4429           stParam.eDstColFmt = GA_RGB16;
009dd8  e3a00000          MOV      r0,#0
009ddc  e5cd0001          STRB     r0,[sp,#1]
009de0  ea000001          B        |L1.40428|
                  |L1.40420|
;;;4430       }
;;;4431       else
;;;4432       {
;;;4433           stParam.eDstColFmt = GA_RGBA32;
009de4  e3a00001          MOV      r0,#1
009de8  e5cd0001          STRB     r0,[sp,#1]
                  |L1.40428|
;;;4434       }
;;;4435   
;;;4436       /* handle clip window */
;;;4437       stParam.eClipWndEn = stGastate.eClipWndEn;
009dec  e59f0c90          LDR      r0,|L1.43652|
009df0  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
009df4  e5cd0002          STRB     r0,[sp,#2]
;;;4438       if (stParam.eClipWndEn == GA_EN)
009df8  e5dd0002          LDRB     r0,[sp,#2]
009dfc  e3500001          CMP      r0,#1
009e00  1a00000b          BNE      |L1.40500|
;;;4439       {
;;;4440           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
009e04  e59f0c78          LDR      r0,|L1.43652|
009e08  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
009e0c  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4441           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
009e10  e59f0c6c          LDR      r0,|L1.43652|
009e14  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
009e18  e1cd02b8          STRH     r0,[sp,#0x28]
;;;4442           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
009e1c  e59f0c60          LDR      r0,|L1.43652|
009e20  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
009e24  e1cd02ba          STRH     r0,[sp,#0x2a]
;;;4443           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
009e28  e59f0c54          LDR      r0,|L1.43652|
009e2c  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
009e30  e1cd02bc          STRH     r0,[sp,#0x2c]
                  |L1.40500|
;;;4444       }
;;;4445   
;;;4446       stParam.eFilterEn     = stGastate.eFilterEn;
009e34  e59f0c48          LDR      r0,|L1.43652|
009e38  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
009e3c  e5cd0003          STRB     r0,[sp,#3]
;;;4447       stParam.i16OffsetX    = i32PosX;
009e40  e6bf0079          SXTH     r0,r9
009e44  e1cd00b4          STRH     r0,[sp,#4]
;;;4448       stParam.i16OffsetY    = i32PosY;
009e48  e6bf007a          SXTH     r0,r10
009e4c  e1cd00b6          STRH     r0,[sp,#6]
;;;4449   #ifdef GA_USE_MATH_LIB
;;;4450       stParam.f64FactorX    = f32FactorX;
009e50  e1a00006          MOV      r0,r6
009e54  ebfffffe          BL       __aeabi_f2d
009e58  e1cd00f8          STRD     r0,r1,[sp,#8]
;;;4451       stParam.f64FactorY    = f32FactorY;
009e5c  e1a00007          MOV      r0,r7
009e60  ebfffffe          BL       __aeabi_f2d
009e64  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4452   #else
;;;4453       stParam.i32FactorX    = (int32_t)(65536.0 * f32FactorX);
;;;4454       stParam.i32FactorY    = (int32_t)(65536.0 * f32FactorY);
;;;4455   #endif
;;;4456       stParam.eAlignment    = eAlignment;
009e68  e5cd8018          STRB     r8,[sp,#0x18]
;;;4457       stParam.eBldOrd       = stGastate.eBlndOrder;
009e6c  e59f0c10          LDR      r0,|L1.43652|
009e70  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
009e74  e5cd0022          STRB     r0,[sp,#0x22]
;;;4458       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
009e78  e59f0c04          LDR      r0,|L1.43652|
009e7c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
009e80  e5cd0021          STRB     r0,[sp,#0x21]
;;;4459       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
009e84  e59f0bf8          LDR      r0,|L1.43652|
009e88  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
009e8c  e5cd0023          STRB     r0,[sp,#0x23]
;;;4460       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
009e90  e59f0bec          LDR      r0,|L1.43652|
009e94  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
009e98  e5cd0024          STRB     r0,[sp,#0x24]
;;;4461   
;;;4462       stParam.eDstRedProt   = stGastate.eRedChPrtEn;
009e9c  e59f0be0          LDR      r0,|L1.43652|
009ea0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
009ea4  e5cd0019          STRB     r0,[sp,#0x19]
;;;4463       stParam.eDstGreenProt = stGastate.eGreenChPrtEn;
009ea8  e59f0bd4          LDR      r0,|L1.43652|
009eac  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
009eb0  e5cd001a          STRB     r0,[sp,#0x1a]
;;;4464       stParam.eDstBlueProt  = stGastate.eBlueChPrtEn;
009eb4  e59f0bc8          LDR      r0,|L1.43652|
009eb8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
009ebc  e5cd001b          STRB     r0,[sp,#0x1b]
;;;4465       stParam.eDstAlphaProt = stGastate.eAlphaChPrtEn;
009ec0  e59f0bbc          LDR      r0,|L1.43652|
009ec4  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
009ec8  e5cd001c          STRB     r0,[sp,#0x1c]
;;;4466       stParam.eSrcRedFad    = stGastate.eSrcRedFad;
009ecc  e59f0bb0          LDR      r0,|L1.43652|
009ed0  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
009ed4  e5cd001d          STRB     r0,[sp,#0x1d]
;;;4467       stParam.eSrcGreenFad  = stGastate.eSrcGreenFad;
009ed8  e59f0ba4          LDR      r0,|L1.43652|
009edc  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
009ee0  e5cd001e          STRB     r0,[sp,#0x1e]
;;;4468       stParam.eSrcBlueFad   = stGastate.eSrcBlueFad;
009ee4  e59f0b98          LDR      r0,|L1.43652|
009ee8  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
009eec  e5cd001f          STRB     r0,[sp,#0x1f]
;;;4469       stParam.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
009ef0  e59f0b8c          LDR      r0,|L1.43652|
009ef4  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
009ef8  e5cd0020          STRB     r0,[sp,#0x20]
;;;4470       
;;;4471       vRotLib_ScaleBlend(&stMem, &stParam, pstWriteList);
009efc  e59f0b84          LDR      r0,|L1.43656|
009f00  e1a0100d          MOV      r1,sp
009f04  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
009f08  e28d0030          ADD      r0,sp,#0x30
009f0c  ebfffffe          BL       vRotLib_ScaleBlend
;;;4472   }
009f10  e28dd040          ADD      sp,sp,#0x40
009f14  e8bd87f0          POP      {r4-r10,pc}
;;;4473   
                          ENDP

                  vGfBuffPerspectiveBlitFull PROC
;;;4477   #ifdef GA_USE_MATH_LIB
;;;4478   void vGfBuffPerspectiveBlitFull(gf_image_st * pstSrcImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
009f18  e92d4ff0          PUSH     {r4-r11,lr}
;;;4479                                   float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
;;;4480                                   int32_t i32PosX, int32_t i32PosY,
;;;4481                                   uint32_t u32RotPointX, uint32_t u32RotPointY)
;;;4482   {
009f1c  e24dd05c          SUB      sp,sp,#0x5c
009f20  e1a04000          MOV      r4,r0
009f24  e1a06001          MOV      r6,r1
009f28  e1a07002          MOV      r7,r2
009f2c  e1a08003          MOV      r8,r3
009f30  e28db088          ADD      r11,sp,#0x88
009f34  e89b0c20          LDM      r11,{r5,r10,r11}
009f38  e59d9080          LDR      r9,[sp,#0x80]
;;;4483       rot_mem_st stMem;
;;;4484       rot_perspectiveCfg_st stParam;
;;;4485   
;;;4486       u8PreviousOperation = 0U;
009f3c  e3a00000          MOV      r0,#0
009f40  e59f1b38          LDR      r1,|L1.43648|
009f44  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4487   
;;;4488       stMem.u32SrcAddr   = pstSrcImage->u32Address;
009f48  e5940000          LDR      r0,[r4,#0]
009f4c  e58d004c          STR      r0,[sp,#0x4c]
;;;4489       stMem.u16SrcHeight = pstSrcImage->u16Height;
009f50  e1d400b6          LDRH     r0,[r4,#6]
009f54  e1cd04b8          STRH     r0,[sp,#0x48]
;;;4490       stMem.u16SrcWidth  = pstSrcImage->u16Width;
009f58  e1d400b4          LDRH     r0,[r4,#4]
009f5c  e1cd04ba          STRH     r0,[sp,#0x4a]
;;;4491       stMem.u32DstAddr   = pstDstImage->u32Address;
009f60  e5950000          LDR      r0,[r5,#0]
009f64  e58d0050          STR      r0,[sp,#0x50]
;;;4492   
;;;4493       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
009f68  e5d5000c          LDRB     r0,[r5,#0xc]
009f6c  e3500004          CMP      r0,#4
009f70  1a000002          BNE      |L1.40832|
;;;4494       {
;;;4495           stParam.eDstColFmt = GA_RGB16;
009f74  e3a00000          MOV      r0,#0
009f78  e5cd0001          STRB     r0,[sp,#1]
009f7c  ea000001          B        |L1.40840|
                  |L1.40832|
;;;4496       }
;;;4497       else
;;;4498       {
;;;4499           stParam.eDstColFmt = GA_RGBA32;
009f80  e3a00001          MOV      r0,#1
009f84  e5cd0001          STRB     r0,[sp,#1]
                  |L1.40840|
;;;4500       }
;;;4501   
;;;4502       stMem.u16DstImgWidth  = pstDstImage->u16Width;
009f88  e1d500b4          LDRH     r0,[r5,#4]
009f8c  e1cd05b4          STRH     r0,[sp,#0x54]
;;;4503       stMem.u16DstImgHeight = pstDstImage->u16Height;
009f90  e1d500b6          LDRH     r0,[r5,#6]
009f94  e1cd05b6          STRH     r0,[sp,#0x56]
;;;4504   
;;;4505       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
009f98  e5d4000c          LDRB     r0,[r4,#0xc]
009f9c  e3500004          CMP      r0,#4
009fa0  1a000002          BNE      |L1.40880|
;;;4506       {
;;;4507           stParam.eSrcColFmt = GA_RGB16;
009fa4  e3a00000          MOV      r0,#0
009fa8  e5cd0000          STRB     r0,[sp,#0]
009fac  ea000001          B        |L1.40888|
                  |L1.40880|
;;;4508       }
;;;4509       else
;;;4510       {
;;;4511           stParam.eSrcColFmt = GA_RGBA32;
009fb0  e3a00001          MOV      r0,#1
009fb4  e5cd0000          STRB     r0,[sp,#0]
                  |L1.40888|
;;;4512       }
;;;4513   
;;;4514       /* handle clip window */
;;;4515       stParam.eClipWndEn = stGastate.eClipWndEn;
009fb8  e59f0ac4          LDR      r0,|L1.43652|
009fbc  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
009fc0  e5cd0002          STRB     r0,[sp,#2]
;;;4516       if (stParam.eClipWndEn == GA_EN)
009fc4  e5dd0002          LDRB     r0,[sp,#2]
009fc8  e3500001          CMP      r0,#1
009fcc  1a00000b          BNE      |L1.40960|
;;;4517       {
;;;4518           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
009fd0  e59f0aac          LDR      r0,|L1.43652|
009fd4  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
009fd8  e1cd03bc          STRH     r0,[sp,#0x3c]
;;;4519           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
009fdc  e59f0aa0          LDR      r0,|L1.43652|
009fe0  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
009fe4  e1cd03be          STRH     r0,[sp,#0x3e]
;;;4520           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
009fe8  e59f0a94          LDR      r0,|L1.43652|
009fec  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
009ff0  e1cd04b0          STRH     r0,[sp,#0x40]
;;;4521           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
009ff4  e59f0a88          LDR      r0,|L1.43652|
009ff8  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
009ffc  e1cd04b2          STRH     r0,[sp,#0x42]
                  |L1.40960|
;;;4522       }
;;;4523   
;;;4524       stParam.eFilterEn    = stGastate.eFilterEn;
00a000  e59f0a7c          LDR      r0,|L1.43652|
00a004  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00a008  e5cd0003          STRB     r0,[sp,#3]
;;;4525       stParam.i16OffsetX   = i32PosX;
00a00c  e6bf007a          SXTH     r0,r10
00a010  e1cd00b4          STRH     r0,[sp,#4]
;;;4526       stParam.i16OffsetY   = i32PosY;
00a014  e6bf007b          SXTH     r0,r11
00a018  e1cd00b6          STRH     r0,[sp,#6]
;;;4527       stParam.u32RotPointX = u32RotPointX;
00a01c  e59d0094          LDR      r0,[sp,#0x94]
00a020  e58d0008          STR      r0,[sp,#8]
;;;4528       stParam.u32RotPointY = u32RotPointY;
00a024  e59d0098          LDR      r0,[sp,#0x98]
00a028  e58d000c          STR      r0,[sp,#0xc]
;;;4529   #ifdef GA_USE_MATH_LIB
;;;4530       stParam.f64AngleX = f32AngleX;
00a02c  e1a00006          MOV      r0,r6
00a030  ebfffffe          BL       __aeabi_f2d
00a034  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4531       stParam.f64AngleY = f32AngleY;
00a038  e1a00007          MOV      r0,r7
00a03c  ebfffffe          BL       __aeabi_f2d
00a040  e1cd01f8          STRD     r0,r1,[sp,#0x18]
;;;4532       stParam.f64AngleZ = f32AngleZ;
00a044  e1a00008          MOV      r0,r8
00a048  ebfffffe          BL       __aeabi_f2d
00a04c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
;;;4533       stParam.f64ScaleX = f32FactorX;
00a050  e1a00009          MOV      r0,r9
00a054  ebfffffe          BL       __aeabi_f2d
00a058  e1cd02f8          STRD     r0,r1,[sp,#0x28]
;;;4534       stParam.f64ScaleY = f32FactorY;
00a05c  e59d0084          LDR      r0,[sp,#0x84]
00a060  ebfffffe          BL       __aeabi_f2d
00a064  e1cd03f0          STRD     r0,r1,[sp,#0x30]
;;;4535   #else
;;;4536       stParam.i32AngleX = (int32_t)(65536.0 * f32AngleX);
;;;4537       stParam.i32AngleY = (int32_t)(65536.0 * f32AngleY);
;;;4538       stParam.i32AngleZ = (int32_t)(65536.0 * f32AngleZ);
;;;4539       stParam.i32ScaleX = (int32_t)(65536.0 * f32FactorX);
;;;4540       stParam.i32ScaleY = (int32_t)(65536.0 * f32FactorY);
;;;4541   #endif
;;;4542       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
00a068  e59f0a14          LDR      r0,|L1.43652|
00a06c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
00a070  e5cd0038          STRB     r0,[sp,#0x38]
;;;4543       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00a074  e59f0a08          LDR      r0,|L1.43652|
00a078  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00a07c  e5cd0039          STRB     r0,[sp,#0x39]
;;;4544       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00a080  e59f09fc          LDR      r0,|L1.43652|
00a084  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00a088  e5cd003a          STRB     r0,[sp,#0x3a]
;;;4545   
;;;4546       vRotLib_Perspective(&stMem, &stParam, pstWriteList);
00a08c  e59f09f4          LDR      r0,|L1.43656|
00a090  e1a0100d          MOV      r1,sp
00a094  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00a098  e28d0048          ADD      r0,sp,#0x48
00a09c  ebfffffe          BL       vRotLib_Perspective
;;;4547   }
00a0a0  e28dd05c          ADD      sp,sp,#0x5c
00a0a4  e8bd8ff0          POP      {r4-r11,pc}
;;;4548   
                          ENDP

                  vGfBuffPerspectiveBlendFull PROC
;;;4551   
;;;4552   void vGfBuffPerspectiveBlendFull(gf_image_st * pstSrcImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
00a0a8  e92d4ff0          PUSH     {r4-r11,lr}
;;;4553                                    float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
;;;4554                                    int32_t i32PosX, int32_t i32PosY,
;;;4555                                    uint32_t u32RotPointX, uint32_t u32RotPointY)
;;;4556   {
00a0ac  e24dd06c          SUB      sp,sp,#0x6c
00a0b0  e1a04000          MOV      r4,r0
00a0b4  e1a06001          MOV      r6,r1
00a0b8  e1a07002          MOV      r7,r2
00a0bc  e1a08003          MOV      r8,r3
00a0c0  e28db098          ADD      r11,sp,#0x98
00a0c4  e89b0c20          LDM      r11,{r5,r10,r11}
00a0c8  e59d9090          LDR      r9,[sp,#0x90]
;;;4557       rot_mem_st stMem;
;;;4558       rot_perspectiveblendCfg_st stParam;
;;;4559   
;;;4560       u8PreviousOperation = 0U;
00a0cc  e3a00000          MOV      r0,#0
00a0d0  e59f19a8          LDR      r1,|L1.43648|
00a0d4  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4561   
;;;4562       stMem.u32SrcAddr   = pstSrcImage->u32Address;
00a0d8  e5940000          LDR      r0,[r4,#0]
00a0dc  e58d005c          STR      r0,[sp,#0x5c]
;;;4563       stMem.u16SrcHeight = pstSrcImage->u16Height;
00a0e0  e1d400b6          LDRH     r0,[r4,#6]
00a0e4  e1cd05b8          STRH     r0,[sp,#0x58]
;;;4564       stMem.u16SrcWidth  = pstSrcImage->u16Width;
00a0e8  e1d400b4          LDRH     r0,[r4,#4]
00a0ec  e1cd05ba          STRH     r0,[sp,#0x5a]
;;;4565       stMem.u32DstAddr   = pstDstImage->u32Address;
00a0f0  e5950000          LDR      r0,[r5,#0]
00a0f4  e58d0060          STR      r0,[sp,#0x60]
;;;4566   
;;;4567       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00a0f8  e5d5000c          LDRB     r0,[r5,#0xc]
00a0fc  e3500004          CMP      r0,#4
00a100  1a000002          BNE      |L1.41232|
;;;4568       {
;;;4569           stParam.eDstColFmt = GA_RGB16;
00a104  e3a00000          MOV      r0,#0
00a108  e5cd0001          STRB     r0,[sp,#1]
00a10c  ea000001          B        |L1.41240|
                  |L1.41232|
;;;4570       }
;;;4571       else
;;;4572       {
;;;4573         stParam.eDstColFmt = GA_RGBA32;
00a110  e3a00001          MOV      r0,#1
00a114  e5cd0001          STRB     r0,[sp,#1]
                  |L1.41240|
;;;4574       }
;;;4575   
;;;4576       stMem.u16DstImgWidth  = pstDstImage->u16Width;
00a118  e1d500b4          LDRH     r0,[r5,#4]
00a11c  e1cd06b4          STRH     r0,[sp,#0x64]
;;;4577       stMem.u16DstImgHeight = pstDstImage->u16Height;
00a120  e1d500b6          LDRH     r0,[r5,#6]
00a124  e1cd06b6          STRH     r0,[sp,#0x66]
;;;4578   
;;;4579       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a128  e5d4000c          LDRB     r0,[r4,#0xc]
00a12c  e3500004          CMP      r0,#4
00a130  1a000002          BNE      |L1.41280|
;;;4580       {
;;;4581           stParam.eSrcColFmt = GA_RGB16;
00a134  e3a00000          MOV      r0,#0
00a138  e5cd0000          STRB     r0,[sp,#0]
00a13c  ea000001          B        |L1.41288|
                  |L1.41280|
;;;4582       }
;;;4583       else
;;;4584       {
;;;4585           stParam.eSrcColFmt = GA_RGBA32;
00a140  e3a00001          MOV      r0,#1
00a144  e5cd0000          STRB     r0,[sp,#0]
                  |L1.41288|
;;;4586       }
;;;4587   
;;;4588       /* handle clip window */
;;;4589       stParam.eClipWndEn = stGastate.eClipWndEn;
00a148  e59f0934          LDR      r0,|L1.43652|
00a14c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00a150  e5cd0002          STRB     r0,[sp,#2]
;;;4590       if (stParam.eClipWndEn == GA_EN)
00a154  e5dd0002          LDRB     r0,[sp,#2]
00a158  e3500001          CMP      r0,#1
00a15c  1a00000b          BNE      |L1.41360|
;;;4591       {
;;;4592           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00a160  e59f091c          LDR      r0,|L1.43652|
00a164  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00a168  e1cd04bc          STRH     r0,[sp,#0x4c]
;;;4593           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
00a16c  e59f0910          LDR      r0,|L1.43652|
00a170  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
00a174  e1cd04be          STRH     r0,[sp,#0x4e]
;;;4594           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
00a178  e59f0904          LDR      r0,|L1.43652|
00a17c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00a180  e1cd05b0          STRH     r0,[sp,#0x50]
;;;4595           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
00a184  e59f08f8          LDR      r0,|L1.43652|
00a188  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
00a18c  e1cd05b2          STRH     r0,[sp,#0x52]
                  |L1.41360|
;;;4596       }
;;;4597   
;;;4598       stParam.eFilterEn    = stGastate.eFilterEn;
00a190  e59f08ec          LDR      r0,|L1.43652|
00a194  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00a198  e5cd0003          STRB     r0,[sp,#3]
;;;4599       stParam.i16OffsetX   = i32PosX;
00a19c  e6bf007a          SXTH     r0,r10
00a1a0  e1cd00b4          STRH     r0,[sp,#4]
;;;4600       stParam.i16OffsetY   = i32PosY;
00a1a4  e6bf007b          SXTH     r0,r11
00a1a8  e1cd00b6          STRH     r0,[sp,#6]
;;;4601       stParam.u32RotPointX = u32RotPointX;
00a1ac  e59d00a4          LDR      r0,[sp,#0xa4]
00a1b0  e58d0008          STR      r0,[sp,#8]
;;;4602       stParam.u32RotPointY = u32RotPointY;
00a1b4  e59d00a8          LDR      r0,[sp,#0xa8]
00a1b8  e58d000c          STR      r0,[sp,#0xc]
;;;4603   #ifdef GA_USE_MATH_LIB
;;;4604       stParam.f64AngleX = f32AngleX;
00a1bc  e1a00006          MOV      r0,r6
00a1c0  ebfffffe          BL       __aeabi_f2d
00a1c4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
;;;4605       stParam.f64AngleY = f32AngleY;
00a1c8  e1a00007          MOV      r0,r7
00a1cc  ebfffffe          BL       __aeabi_f2d
00a1d0  e1cd01f8          STRD     r0,r1,[sp,#0x18]
;;;4606       stParam.f64AngleZ = f32AngleZ;
00a1d4  e1a00008          MOV      r0,r8
00a1d8  ebfffffe          BL       __aeabi_f2d
00a1dc  e1cd02f0          STRD     r0,r1,[sp,#0x20]
;;;4607       stParam.f64ScaleX = f32FactorX;
00a1e0  e1a00009          MOV      r0,r9
00a1e4  ebfffffe          BL       __aeabi_f2d
00a1e8  e1cd03f0          STRD     r0,r1,[sp,#0x30]
;;;4608       stParam.f64ScaleY = f32FactorY;
00a1ec  e59d0094          LDR      r0,[sp,#0x94]
00a1f0  ebfffffe          BL       __aeabi_f2d
00a1f4  e1cd03f8          STRD     r0,r1,[sp,#0x38]
;;;4609   #else
;;;4610       stParam.i32AngleX = (int32_t)(65536.0 * f32AngleX);
;;;4611       stParam.i32AngleY = (int32_t)(65536.0 * f32AngleY);
;;;4612       stParam.i32AngleZ = (int32_t)(65536.0 * f32AngleZ);
;;;4613       stParam.i32ScaleX = (int32_t)(65536.0 * f32FactorX);
;;;4614       stParam.i32ScaleY = (int32_t)(65536.0 * f32FactorY);
;;;4615   #endif
;;;4616       stParam.eBldOrd       = stGastate.eBlndOrder;
00a1f8  e59f0884          LDR      r0,|L1.43652|
00a1fc  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
00a200  e5cd0049          STRB     r0,[sp,#0x49]
;;;4617       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
00a204  e59f0878          LDR      r0,|L1.43652|
00a208  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
00a20c  e5cd0048          STRB     r0,[sp,#0x48]
;;;4618       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00a210  e59f086c          LDR      r0,|L1.43652|
00a214  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00a218  e5cd004a          STRB     r0,[sp,#0x4a]
;;;4619       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00a21c  e59f0860          LDR      r0,|L1.43652|
00a220  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00a224  e5cd004b          STRB     r0,[sp,#0x4b]
;;;4620   
;;;4621       stParam.eDstRedProt   = stGastate.eRedChPrtEn;
00a228  e59f0854          LDR      r0,|L1.43652|
00a22c  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
00a230  e5cd0040          STRB     r0,[sp,#0x40]
;;;4622       stParam.eDstGreenProt = stGastate.eGreenChPrtEn;
00a234  e59f0848          LDR      r0,|L1.43652|
00a238  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
00a23c  e5cd0041          STRB     r0,[sp,#0x41]
;;;4623       stParam.eDstBlueProt  = stGastate.eBlueChPrtEn;
00a240  e59f083c          LDR      r0,|L1.43652|
00a244  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
00a248  e5cd0042          STRB     r0,[sp,#0x42]
;;;4624       stParam.eDstAlphaProt = stGastate.eAlphaChPrtEn;
00a24c  e59f0830          LDR      r0,|L1.43652|
00a250  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00a254  e5cd0043          STRB     r0,[sp,#0x43]
;;;4625       stParam.eSrcRedFad    = stGastate.eSrcRedFad;
00a258  e59f0824          LDR      r0,|L1.43652|
00a25c  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
00a260  e5cd0044          STRB     r0,[sp,#0x44]
;;;4626       stParam.eSrcGreenFad  = stGastate.eSrcGreenFad;
00a264  e59f0818          LDR      r0,|L1.43652|
00a268  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
00a26c  e5cd0045          STRB     r0,[sp,#0x45]
;;;4627       stParam.eSrcBlueFad   = stGastate.eSrcBlueFad;
00a270  e59f080c          LDR      r0,|L1.43652|
00a274  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
00a278  e5cd0046          STRB     r0,[sp,#0x46]
;;;4628       stParam.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
00a27c  e59f0800          LDR      r0,|L1.43652|
00a280  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
00a284  e5cd0047          STRB     r0,[sp,#0x47]
;;;4629   
;;;4630       vRotLib_PerspectiveBlend(&stMem, &stParam, pstWriteList);
00a288  e59f07f8          LDR      r0,|L1.43656|
00a28c  e1a0100d          MOV      r1,sp
00a290  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00a294  e28d0058          ADD      r0,sp,#0x58
00a298  ebfffffe          BL       vRotLib_PerspectiveBlend
;;;4631   }
00a29c  e28dd06c          ADD      sp,sp,#0x6c
00a2a0  e8bd8ff0          POP      {r4-r11,pc}
;;;4632   #endif
                          ENDP

                  vGfBuffTransformationFull PROC
;;;4636   
;;;4637   void vGfBuffTransformationFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
00a2a4  e92d41f0          PUSH     {r4-r8,lr}
;;;4638                                  uint32_t u32PosX, uint32_t u32PosY)
;;;4639   {
00a2a8  e24dd028          SUB      sp,sp,#0x28
00a2ac  e1a06000          MOV      r6,r0
00a2b0  e1a05001          MOV      r5,r1
00a2b4  e1a04002          MOV      r4,r2
00a2b8  e1a07003          MOV      r7,r3
00a2bc  e59d8040          LDR      r8,[sp,#0x40]
;;;4640       transf_mem_st stMem;
;;;4641       transf_Lut_st stLutCfg;
;;;4642       transf_Prm_st stTsfPrm;
;;;4643   
;;;4644       u8PreviousOperation = 0U;
00a2c0  e3a00000          MOV      r0,#0
00a2c4  e59f17b4          LDR      r1,|L1.43648|
00a2c8  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4645   
;;;4646       stMem.u32SrcAddr     = pstSrcImage->u32Address;
00a2cc  e5960000          LDR      r0,[r6,#0]
00a2d0  e58d0018          STR      r0,[sp,#0x18]
;;;4647       stMem.u16SrcWidth    = pstSrcImage->u16Width;
00a2d4  e1d600b4          LDRH     r0,[r6,#4]
00a2d8  e1cd01b4          STRH     r0,[sp,#0x14]
;;;4648   
;;;4649       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00a2dc  e5d5000c          LDRB     r0,[r5,#0xc]
00a2e0  e3500004          CMP      r0,#4
00a2e4  1a000009          BNE      |L1.41744|
;;;4650       {
;;;4651           stMem.u32DstAddr    = pstDstImage->u32Address + 2U*pstDstImage->u16Width * u32PosY + 2U*u32PosX;
00a2e8  e5950000          LDR      r0,[r5,#0]
00a2ec  e1d510b4          LDRH     r1,[r5,#4]
00a2f0  e1a01081          LSL      r1,r1,#1
00a2f4  e0200891          MLA      r0,r1,r8,r0
00a2f8  e3a01002          MOV      r1,#2
00a2fc  e0200791          MLA      r0,r1,r7,r0
00a300  e58d0020          STR      r0,[sp,#0x20]
;;;4652           stTsfPrm.eDstColFmt = GA_RGB16;
00a304  e3a00000          MOV      r0,#0
00a308  e5cd0003          STRB     r0,[sp,#3]
00a30c  ea000008          B        |L1.41780|
                  |L1.41744|
;;;4653       }
;;;4654       else
;;;4655       {
;;;4656           stMem.u32DstAddr    = pstDstImage->u32Address + 4U*pstDstImage->u16Width * u32PosY + 4U*u32PosX;
00a310  e5950000          LDR      r0,[r5,#0]
00a314  e1d510b4          LDRH     r1,[r5,#4]
00a318  e1a01101          LSL      r1,r1,#2
00a31c  e0200891          MLA      r0,r1,r8,r0
00a320  e3a01004          MOV      r1,#4
00a324  e0200791          MLA      r0,r1,r7,r0
00a328  e58d0020          STR      r0,[sp,#0x20]
;;;4657           stTsfPrm.eDstColFmt = GA_RGBA32;
00a32c  e3a00001          MOV      r0,#1
00a330  e5cd0003          STRB     r0,[sp,#3]
                  |L1.41780|
;;;4658       }
;;;4659   
;;;4660       stMem.u16DstWidth    = pstDstImage->u16Width;
00a334  e1d500b4          LDRH     r0,[r5,#4]
00a338  e1cd01bc          STRH     r0,[sp,#0x1c]
;;;4661       stMem.u16LineCnt     = pstTable->u16Height;
00a33c  e1d400b6          LDRH     r0,[r4,#6]
00a340  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4662       if(stGastate.eTsfMode == TSF_MODE_COLOR)
00a344  e59f0738          LDR      r0,|L1.43652|
00a348  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a34c  e3500001          CMP      r0,#1
00a350  1a00000b          BNE      |L1.41860|
;;;4663       {
;;;4664           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a354  e5d6000c          LDRB     r0,[r6,#0xc]
00a358  e3500004          CMP      r0,#4
00a35c  1a000004          BNE      |L1.41844|
;;;4665           {
;;;4666               stMem.u16DstImgWidth = pstTable->u16Width/3U;
00a360  e1d400b4          LDRH     r0,[r4,#4]
00a364  e3a01003          MOV      r1,#3
00a368  ebfffffe          BL       __aeabi_uidiv
00a36c  e1cd02b4          STRH     r0,[sp,#0x24]
00a370  ea000005          B        |L1.41868|
                  |L1.41844|
;;;4667           }
;;;4668           else
;;;4669           {
;;;4670               stMem.u16DstImgWidth = pstTable->u16Width/4U;
00a374  e1d400b4          LDRH     r0,[r4,#4]
00a378  e1a00120          LSR      r0,r0,#2
00a37c  e1cd02b4          STRH     r0,[sp,#0x24]
00a380  ea000001          B        |L1.41868|
                  |L1.41860|
;;;4671           }
;;;4672       }
;;;4673       else
;;;4674       {
;;;4675           stMem.u16DstImgWidth = pstTable->u16Width;
00a384  e1d400b4          LDRH     r0,[r4,#4]
00a388  e1cd02b4          STRH     r0,[sp,#0x24]
                  |L1.41868|
;;;4676       }
;;;4677       stLutCfg.u32Addr    = pstTable->u32Address;
00a38c  e5940000          LDR      r0,[r4,#0]
00a390  e58d000c          STR      r0,[sp,#0xc]
;;;4678       stLutCfg.u16Width   = pstTable->u16Width;
00a394  e1d400b4          LDRH     r0,[r4,#4]
00a398  e1cd01b0          STRH     r0,[sp,#0x10]
;;;4679       stLutCfg.u16LineCnt = pstTable->u16Height;
00a39c  e1d400b6          LDRH     r0,[r4,#6]
00a3a0  e1cd01b2          STRH     r0,[sp,#0x12]
;;;4680   
;;;4681       stTsfPrm.eTsfMode   = stGastate.eTsfMode;
00a3a4  e59f06d8          LDR      r0,|L1.43652|
00a3a8  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a3ac  e5cd0000          STRB     r0,[sp,#0]
;;;4682   
;;;4683       stTsfPrm.eFilterEn  = stGastate.eFilterEn;
00a3b0  e59f06cc          LDR      r0,|L1.43652|
00a3b4  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00a3b8  e5cd0001          STRB     r0,[sp,#1]
;;;4684   
;;;4685       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a3bc  e5d6000c          LDRB     r0,[r6,#0xc]
00a3c0  e3500004          CMP      r0,#4
00a3c4  1a000002          BNE      |L1.41940|
;;;4686       {
;;;4687           stTsfPrm.eSrcColFmt = GA_RGB16;
00a3c8  e3a00000          MOV      r0,#0
00a3cc  e5cd0002          STRB     r0,[sp,#2]
00a3d0  ea000001          B        |L1.41948|
                  |L1.41940|
;;;4688       }
;;;4689       else
;;;4690       {
;;;4691           stTsfPrm.eSrcColFmt = GA_RGBA32;
00a3d4  e3a00001          MOV      r0,#1
00a3d8  e5cd0002          STRB     r0,[sp,#2]
                  |L1.41948|
;;;4692       }
;;;4693   
;;;4694       stTsfPrm.u32Color      = stGastate.u32TsfPredefColor;
00a3dc  e59f06a0          LDR      r0,|L1.43652|
00a3e0  e590001c          LDR      r0,[r0,#0x1c]  ; stGastate
00a3e4  e58d0004          STR      r0,[sp,#4]
;;;4695       stTsfPrm.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00a3e8  e59f0694          LDR      r0,|L1.43652|
00a3ec  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00a3f0  e5cd0008          STRB     r0,[sp,#8]
;;;4696       stTsfPrm.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00a3f4  e59f0688          LDR      r0,|L1.43652|
00a3f8  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00a3fc  e5cd0009          STRB     r0,[sp,#9]
;;;4697   
;;;4698   
;;;4699       vTransf_ConfigTransfOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00a400  e59f0680          LDR      r0,|L1.43656|
00a404  e1a0200d          MOV      r2,sp
00a408  e28d100c          ADD      r1,sp,#0xc
00a40c  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00a410  e28d0014          ADD      r0,sp,#0x14
00a414  ebfffffe          BL       vTransf_ConfigTransfOp
;;;4700   }
00a418  e28dd028          ADD      sp,sp,#0x28
00a41c  e8bd81f0          POP      {r4-r8,pc}
;;;4701   
                          ENDP

                  vGfBuffTransformationFullOptimized PROC
;;;4704   
;;;4705   void vGfBuffTransformationFullOptimized(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
00a420  e92d4fff          PUSH     {r0-r11,lr}
;;;4706                                           uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight)
;;;4707   {
00a424  e24dd03c          SUB      sp,sp,#0x3c
00a428  e1a07001          MOV      r7,r1
00a42c  e1a04002          MOV      r4,r2
00a430  e59d5078          LDR      r5,[sp,#0x78]
;;;4708       transf_mem_st stMem;
;;;4709       transf_Lut_st stLutCfg;
;;;4710       transf_Prm_st stTsfPrm;
;;;4711       uint32_t      u32DivX, u32ModX, u32CountX;
;;;4712       uint32_t      u32DivY, u32ModY, u32CountY;
;;;4713       uint32_t      u32ByteCountDest;
;;;4714       uint32_t      u32LutIndexCount;
;;;4715       uint32_t      u32LUTBlockWidth;
;;;4716   
;;;4717       u8PreviousOperation = 0U;
00a434  e3a00000          MOV      r0,#0
00a438  e59f1640          LDR      r1,|L1.43648|
00a43c  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4718   
;;;4719       stMem.u32SrcAddr  = pstSrcImage->u32Address;
00a440  e59d003c          LDR      r0,[sp,#0x3c]
00a444  e5900000          LDR      r0,[r0,#0]
00a448  e58d002c          STR      r0,[sp,#0x2c]
;;;4720       stMem.u16SrcWidth = pstSrcImage->u16Width;
00a44c  e59d003c          LDR      r0,[sp,#0x3c]
00a450  e1d000b4          LDRH     r0,[r0,#4]
00a454  e1cd02b8          STRH     r0,[sp,#0x28]
;;;4721   
;;;4722       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00a458  e5d7000c          LDRB     r0,[r7,#0xc]
00a45c  e3500004          CMP      r0,#4
00a460  1a000003          BNE      |L1.42100|
;;;4723       {
;;;4724           stTsfPrm.eDstColFmt = GA_RGB16;
00a464  e3a00000          MOV      r0,#0
00a468  e5cd0017          STRB     r0,[sp,#0x17]
;;;4725           u32ByteCountDest    = 2U;
00a46c  e3a06002          MOV      r6,#2
00a470  ea000002          B        |L1.42112|
                  |L1.42100|
;;;4726       }
;;;4727       else
;;;4728       {
;;;4729           stTsfPrm.eDstColFmt = GA_RGBA32;
00a474  e3a00001          MOV      r0,#1
00a478  e5cd0017          STRB     r0,[sp,#0x17]
;;;4730           u32ByteCountDest    = 4U;
00a47c  e3a06004          MOV      r6,#4
                  |L1.42112|
;;;4731       }
;;;4732   
;;;4733       stMem.u16DstWidth   = pstDstImage->u16Width;
00a480  e1d700b4          LDRH     r0,[r7,#4]
00a484  e1cd03b0          STRH     r0,[sp,#0x30]
;;;4734   
;;;4735       stLutCfg.u16Width   = pstTable->u16Width;
00a488  e1d400b4          LDRH     r0,[r4,#4]
00a48c  e1cd02b4          STRH     r0,[sp,#0x24]
;;;4736   
;;;4737       stTsfPrm.eTsfMode   = stGastate.eTsfMode;
00a490  e59f05ec          LDR      r0,|L1.43652|
00a494  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a498  e5cd0014          STRB     r0,[sp,#0x14]
;;;4738       stTsfPrm.eFilterEn  = stGastate.eFilterEn;
00a49c  e59f05e0          LDR      r0,|L1.43652|
00a4a0  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00a4a4  e5cd0015          STRB     r0,[sp,#0x15]
;;;4739       if(stGastate.eTsfMode == TSF_MODE_COLOR)
00a4a8  e59f05d4          LDR      r0,|L1.43652|
00a4ac  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a4b0  e3500001          CMP      r0,#1
00a4b4  1a000014          BNE      |L1.42252|
;;;4740       {
;;;4741           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a4b8  e59d003c          LDR      r0,[sp,#0x3c]
00a4bc  e5d0000c          LDRB     r0,[r0,#0xc]
00a4c0  e3500004          CMP      r0,#4
00a4c4  1a000008          BNE      |L1.42220|
;;;4742           {
;;;4743               stMem.u16DstImgWidth = pstTable->u16Width/3U;
00a4c8  e1d400b4          LDRH     r0,[r4,#4]
00a4cc  e3a01003          MOV      r1,#3
00a4d0  ebfffffe          BL       __aeabi_uidiv
00a4d4  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4744               u32LUTBlockWidth     = u32BlockWidth*3U;
00a4d8  e59d0074          LDR      r0,[sp,#0x74]
00a4dc  e080a080          ADD      r10,r0,r0,LSL #1
;;;4745               u32LutIndexCount     = 3U;
00a4e0  e3a00003          MOV      r0,#3
00a4e4  e58d0004          STR      r0,[sp,#4]
00a4e8  ea00000c          B        |L1.42272|
                  |L1.42220|
;;;4746           }
;;;4747           else
;;;4748           {
;;;4749               stMem.u16DstImgWidth = pstTable->u16Width/4U;
00a4ec  e1d400b4          LDRH     r0,[r4,#4]
00a4f0  e1a00120          LSR      r0,r0,#2
00a4f4  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4750               u32LUTBlockWidth     = u32BlockWidth*4U;
00a4f8  e59d0074          LDR      r0,[sp,#0x74]
00a4fc  e1a0a100          LSL      r10,r0,#2
;;;4751               u32LutIndexCount     = 4U;
00a500  e3a00004          MOV      r0,#4
00a504  e58d0004          STR      r0,[sp,#4]
00a508  ea000004          B        |L1.42272|
                  |L1.42252|
;;;4752           }
;;;4753       }
;;;4754       else
;;;4755       {
;;;4756           stMem.u16DstImgWidth = pstTable->u16Width;
00a50c  e1d400b4          LDRH     r0,[r4,#4]
00a510  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4757           u32LUTBlockWidth     = u32BlockWidth;
00a514  e59da074          LDR      r10,[sp,#0x74]
;;;4758           u32LutIndexCount     = 1U;
00a518  e3a00001          MOV      r0,#1
00a51c  e58d0004          STR      r0,[sp,#4]
                  |L1.42272|
;;;4759       }
;;;4760       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a520  e59d003c          LDR      r0,[sp,#0x3c]
00a524  e5d0000c          LDRB     r0,[r0,#0xc]
00a528  e3500004          CMP      r0,#4
00a52c  1a000002          BNE      |L1.42300|
;;;4761       {
;;;4762           stTsfPrm.eSrcColFmt = GA_RGB16;
00a530  e3a00000          MOV      r0,#0
00a534  e5cd0016          STRB     r0,[sp,#0x16]
00a538  ea000001          B        |L1.42308|
                  |L1.42300|
;;;4763       }
;;;4764       else
;;;4765       {
;;;4766           stTsfPrm.eSrcColFmt = GA_RGBA32;
00a53c  e3a00001          MOV      r0,#1
00a540  e5cd0016          STRB     r0,[sp,#0x16]
                  |L1.42308|
;;;4767       }
;;;4768   
;;;4769       stTsfPrm.u32Color      = stGastate.u32TsfPredefColor;
00a544  e59f0538          LDR      r0,|L1.43652|
00a548  e590001c          LDR      r0,[r0,#0x1c]  ; stGastate
00a54c  e58d0018          STR      r0,[sp,#0x18]
;;;4770       stTsfPrm.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00a550  e59f052c          LDR      r0,|L1.43652|
00a554  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00a558  e5cd001c          STRB     r0,[sp,#0x1c]
;;;4771       stTsfPrm.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00a55c  e59f0520          LDR      r0,|L1.43652|
00a560  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00a564  e5cd001d          STRB     r0,[sp,#0x1d]
;;;4772   
;;;4773       u32DivX = pstTable->u16Width/u32LUTBlockWidth;
00a568  e1d400b4          LDRH     r0,[r4,#4]
00a56c  e1a0100a          MOV      r1,r10
00a570  ebfffffe          BL       __aeabi_uidiv
00a574  e58d0010          STR      r0,[sp,#0x10]
;;;4774       u32ModX = pstTable->u16Width - u32DivX*u32LUTBlockWidth;
00a578  e1d410b4          LDRH     r1,[r4,#4]
00a57c  e59d0010          LDR      r0,[sp,#0x10]
00a580  e0601a90          MLS      r0,r0,r10,r1
00a584  e58d000c          STR      r0,[sp,#0xc]
;;;4775       u32DivY = pstTable->u16Height/u32BlockHeight;
00a588  e1d400b6          LDRH     r0,[r4,#6]
00a58c  e1a01005          MOV      r1,r5
00a590  ebfffffe          BL       __aeabi_uidiv
00a594  e1a0b000          MOV      r11,r0
;;;4776       u32ModY = pstTable->u16Height - u32DivY*u32BlockHeight;
00a598  e1d410b6          LDRH     r1,[r4,#6]
00a59c  e060159b          MLS      r0,r11,r5,r1
00a5a0  e58d0008          STR      r0,[sp,#8]
;;;4777   
;;;4778       for (u32CountY=0U; u32CountY<=u32DivY; u32CountY++)
00a5a4  e3a08000          MOV      r8,#0
00a5a8  ea0000bd          B        |L1.43172|
                  |L1.42412|
;;;4779       {
;;;4780           for (u32CountX=0U; u32CountX<=u32DivX; u32CountX++)
00a5ac  e3a09000          MOV      r9,#0
00a5b0  ea0000b7          B        |L1.43156|
                  |L1.42420|
;;;4781           {
;;;4782               if (u32CountX<u32DivX)
00a5b4  e59d0010          LDR      r0,[sp,#0x10]
00a5b8  e1590000          CMP      r9,r0
00a5bc  2a000054          BCS      |L1.42772|
;;;4783               {
;;;4784                   if (u32CountY<u32DivY)
00a5c0  e158000b          CMP      r8,r11
00a5c4  2a000025          BCS      |L1.42592|
;;;4785                   {
;;;4786                       /* normal operation */
;;;4787                       stMem.u32DstAddr     = pstDstImage->u32Address + u32ByteCountDest*pstDstImage->u16Width * u32PosY + u32ByteCountDest*u32PosX +
00a5c8  e5971000          LDR      r1,[r7,#0]
00a5cc  e1d700b4          LDRH     r0,[r7,#4]
00a5d0  e0020690          MUL      r2,r0,r6
00a5d4  e59d0070          LDR      r0,[sp,#0x70]
00a5d8  e0211092          MLA      r1,r2,r0,r1
00a5dc  e59d0048          LDR      r0,[sp,#0x48]
00a5e0  e0201096          MLA      r0,r6,r0,r1
00a5e4  e0010896          MUL      r1,r6,r8
00a5e8  e0010591          MUL      r1,r1,r5
00a5ec  e1d720b4          LDRH     r2,[r7,#4]
00a5f0  e0210291          MLA      r1,r1,r2,r0
00a5f4  e0020996          MUL      r2,r6,r9
00a5f8  e59d0074          LDR      r0,[sp,#0x74]
00a5fc  e0201092          MLA      r0,r2,r0,r1
00a600  e58d0034          STR      r0,[sp,#0x34]
;;;4788                                              u32ByteCountDest*u32CountY*u32BlockHeight*pstDstImage->u16Width + u32ByteCountDest*u32CountX*u32BlockWidth;
;;;4789                       stMem.u16DstImgWidth = u32BlockWidth;
00a604  e59d0074          LDR      r0,[sp,#0x74]
00a608  e6ff0070          UXTH     r0,r0
00a60c  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4790                       stMem.u16LineCnt     = u32BlockHeight;
00a610  e6ff0075          UXTH     r0,r5
00a614  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;4791                       stLutCfg.u32Addr     = pstTable->u32Address + 4U*u32CountY*u32BlockHeight*pstTable->u16Width + 4U*u32CountX*u32LUTBlockWidth;
00a618  e1a01108          LSL      r1,r8,#2
00a61c  e0010591          MUL      r1,r1,r5
00a620  e5940000          LDR      r0,[r4,#0]
00a624  e1d420b4          LDRH     r2,[r4,#4]
00a628  e0200291          MLA      r0,r1,r2,r0
00a62c  e1a01109          LSL      r1,r9,#2
00a630  e0200a91          MLA      r0,r1,r10,r0
00a634  e58d0020          STR      r0,[sp,#0x20]
;;;4792                       stLutCfg.u16LineCnt  = u32BlockHeight;
00a638  e6ff0075          UXTH     r0,r5
00a63c  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4793   
;;;4794                       vTransf_ConfigTransfOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00a640  e59f0440          LDR      r0,|L1.43656|
00a644  e28d2014          ADD      r2,sp,#0x14
00a648  e28d1020          ADD      r1,sp,#0x20
00a64c  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00a650  e28d0028          ADD      r0,sp,#0x28
00a654  ebfffffe          BL       vTransf_ConfigTransfOp
;;;4795                       vGfListExecute();
00a658  ebfffffe          BL       vGfListExecute
00a65c  ea00008b          B        |L1.43152|
                  |L1.42592|
;;;4796                   }
;;;4797                   else
;;;4798                   {
;;;4799                       if (u32ModY != 0U)
00a660  e59d0008          LDR      r0,[sp,#8]
00a664  e3500000          CMP      r0,#0
00a668  0a000088          BEQ      |L1.43152|
;;;4800                       {
;;;4801                           /* lowest row */
;;;4802                           stMem.u32DstAddr     = pstDstImage->u32Address + u32ByteCountDest*pstDstImage->u16Width * u32PosY + u32ByteCountDest*u32PosX +
00a66c  e5971000          LDR      r1,[r7,#0]
00a670  e1d700b4          LDRH     r0,[r7,#4]
00a674  e0020690          MUL      r2,r0,r6
00a678  e59d0070          LDR      r0,[sp,#0x70]
00a67c  e0211092          MLA      r1,r2,r0,r1
00a680  e59d0048          LDR      r0,[sp,#0x48]
00a684  e0201096          MLA      r0,r6,r0,r1
00a688  e0010896          MUL      r1,r6,r8
00a68c  e0010591          MUL      r1,r1,r5
00a690  e1d720b4          LDRH     r2,[r7,#4]
00a694  e0210291          MLA      r1,r1,r2,r0
00a698  e0020996          MUL      r2,r6,r9
00a69c  e59d0074          LDR      r0,[sp,#0x74]
00a6a0  e0201092          MLA      r0,r2,r0,r1
00a6a4  e58d0034          STR      r0,[sp,#0x34]
;;;4803                                                  u32ByteCountDest*u32CountY*u32BlockHeight*pstDstImage->u16Width + u32ByteCountDest*u32CountX*u32BlockWidth;
;;;4804                           stMem.u16DstImgWidth = u32BlockWidth;
00a6a8  e59d0074          LDR      r0,[sp,#0x74]
00a6ac  e6ff0070          UXTH     r0,r0
00a6b0  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4805                           stMem.u16LineCnt     = pstTable->u16Height - u32DivY*u32BlockHeight;
00a6b4  e1d400b6          LDRH     r0,[r4,#6]
00a6b8  e060059b          MLS      r0,r11,r5,r0
00a6bc  e6ff0070          UXTH     r0,r0
00a6c0  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;4806                           stLutCfg.u32Addr     = pstTable->u32Address + 4U*u32CountY*u32BlockHeight*pstTable->u16Width + 4U*u32CountX*u32LUTBlockWidth;
00a6c4  e1a01108          LSL      r1,r8,#2
00a6c8  e0010591          MUL      r1,r1,r5
00a6cc  e5940000          LDR      r0,[r4,#0]
00a6d0  e1d420b4          LDRH     r2,[r4,#4]
00a6d4  e0200291          MLA      r0,r1,r2,r0
00a6d8  e1a01109          LSL      r1,r9,#2
00a6dc  e0200a91          MLA      r0,r1,r10,r0
00a6e0  e58d0020          STR      r0,[sp,#0x20]
;;;4807                           stLutCfg.u16LineCnt  = pstTable->u16Height - u32DivY*u32BlockHeight;
00a6e4  e1d400b6          LDRH     r0,[r4,#6]
00a6e8  e060059b          MLS      r0,r11,r5,r0
00a6ec  e6ff0070          UXTH     r0,r0
00a6f0  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4808   
;;;4809                           vTransf_ConfigTransfOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00a6f4  e59f038c          LDR      r0,|L1.43656|
00a6f8  e28d2014          ADD      r2,sp,#0x14
00a6fc  e28d1020          ADD      r1,sp,#0x20
00a700  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00a704  e28d0028          ADD      r0,sp,#0x28
00a708  ebfffffe          BL       vTransf_ConfigTransfOp
;;;4810                           vGfListExecute();
00a70c  ebfffffe          BL       vGfListExecute
00a710  ea00005e          B        |L1.43152|
                  |L1.42772|
;;;4811                       }
;;;4812                   }
;;;4813               }
;;;4814               else
;;;4815               {
;;;4816                   if (u32ModX != 0U)
00a714  e59d000c          LDR      r0,[sp,#0xc]
00a718  e3500000          CMP      r0,#0
00a71c  0a00005b          BEQ      |L1.43152|
;;;4817                   {
;;;4818                       if (u32CountY<u32DivY)
00a720  e158000b          CMP      r8,r11
00a724  2a000029          BCS      |L1.42960|
;;;4819                       {
;;;4820                           /* most right part */
;;;4821                           stMem.u32DstAddr     = pstDstImage->u32Address + u32ByteCountDest*pstDstImage->u16Width * u32PosY + u32ByteCountDest*u32PosX +
00a728  e5971000          LDR      r1,[r7,#0]
00a72c  e1d700b4          LDRH     r0,[r7,#4]
00a730  e0020690          MUL      r2,r0,r6
00a734  e59d0070          LDR      r0,[sp,#0x70]
00a738  e0211092          MLA      r1,r2,r0,r1
00a73c  e59d0048          LDR      r0,[sp,#0x48]
00a740  e0201096          MLA      r0,r6,r0,r1
00a744  e0010896          MUL      r1,r6,r8
00a748  e0010591          MUL      r1,r1,r5
00a74c  e1d720b4          LDRH     r2,[r7,#4]
00a750  e0210291          MLA      r1,r1,r2,r0
00a754  e0020996          MUL      r2,r6,r9
00a758  e59d0074          LDR      r0,[sp,#0x74]
00a75c  e0201092          MLA      r0,r2,r0,r1
00a760  e58d0034          STR      r0,[sp,#0x34]
;;;4822                                                  u32ByteCountDest*u32CountY*u32BlockHeight*pstDstImage->u16Width + u32ByteCountDest*u32CountX*u32BlockWidth;
;;;4823                           stMem.u16DstImgWidth = (pstTable->u16Width - u32DivX*u32LUTBlockWidth)/u32LutIndexCount;
00a764  e1d420b4          LDRH     r2,[r4,#4]
00a768  e59d1010          LDR      r1,[sp,#0x10]
00a76c  e0602a91          MLS      r0,r1,r10,r2
00a770  e59d1004          LDR      r1,[sp,#4]
00a774  ebfffffe          BL       __aeabi_uidiv
00a778  e6ff0070          UXTH     r0,r0
00a77c  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4824                           stMem.u16LineCnt     = u32BlockHeight;
00a780  e6ff0075          UXTH     r0,r5
00a784  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;4825                           stLutCfg.u32Addr     = pstTable->u32Address + 4U*u32CountY*u32BlockHeight*pstTable->u16Width + 4U*u32CountX*u32LUTBlockWidth;
00a788  e1a01108          LSL      r1,r8,#2
00a78c  e0010591          MUL      r1,r1,r5
00a790  e5940000          LDR      r0,[r4,#0]
00a794  e1d420b4          LDRH     r2,[r4,#4]
00a798  e0200291          MLA      r0,r1,r2,r0
00a79c  e1a01109          LSL      r1,r9,#2
00a7a0  e0200a91          MLA      r0,r1,r10,r0
00a7a4  e58d0020          STR      r0,[sp,#0x20]
;;;4826                           stLutCfg.u16LineCnt  = u32BlockHeight;
00a7a8  e6ff0075          UXTH     r0,r5
00a7ac  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4827   
;;;4828                           vTransf_ConfigTransfOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00a7b0  e59f02d0          LDR      r0,|L1.43656|
00a7b4  e28d2014          ADD      r2,sp,#0x14
00a7b8  e28d1020          ADD      r1,sp,#0x20
00a7bc  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00a7c0  e28d0028          ADD      r0,sp,#0x28
00a7c4  ebfffffe          BL       vTransf_ConfigTransfOp
;;;4829                           vGfListExecute();
00a7c8  ebfffffe          BL       vGfListExecute
00a7cc  ea00002f          B        |L1.43152|
                  |L1.42960|
;;;4830                       }
;;;4831                       else
;;;4832                       {
;;;4833                           if (u32ModY != 0U)
00a7d0  e59d0008          LDR      r0,[sp,#8]
00a7d4  e3500000          CMP      r0,#0
00a7d8  0a00002c          BEQ      |L1.43152|
;;;4834                           {
;;;4835                               /* lower right part */
;;;4836                               stMem.u32DstAddr     = pstDstImage->u32Address + u32ByteCountDest*pstDstImage->u16Width * u32PosY + u32ByteCountDest*u32PosX +
00a7dc  e5971000          LDR      r1,[r7,#0]
00a7e0  e1d700b4          LDRH     r0,[r7,#4]
00a7e4  e0020690          MUL      r2,r0,r6
00a7e8  e59d0070          LDR      r0,[sp,#0x70]
00a7ec  e0211092          MLA      r1,r2,r0,r1
00a7f0  e59d0048          LDR      r0,[sp,#0x48]
00a7f4  e0201096          MLA      r0,r6,r0,r1
00a7f8  e0010896          MUL      r1,r6,r8
00a7fc  e0010591          MUL      r1,r1,r5
00a800  e1d720b4          LDRH     r2,[r7,#4]
00a804  e0210291          MLA      r1,r1,r2,r0
00a808  e0020996          MUL      r2,r6,r9
00a80c  e59d0074          LDR      r0,[sp,#0x74]
00a810  e0201092          MLA      r0,r2,r0,r1
00a814  e58d0034          STR      r0,[sp,#0x34]
;;;4837                                                      u32ByteCountDest*u32CountY*u32BlockHeight*pstDstImage->u16Width + u32ByteCountDest*u32CountX*u32BlockWidth;
;;;4838                               stMem.u16DstImgWidth = (pstTable->u16Width - u32DivX*u32LUTBlockWidth)/u32LutIndexCount;
00a818  e1d420b4          LDRH     r2,[r4,#4]
00a81c  e59d1010          LDR      r1,[sp,#0x10]
00a820  e0602a91          MLS      r0,r1,r10,r2
00a824  e59d1004          LDR      r1,[sp,#4]
00a828  ebfffffe          BL       __aeabi_uidiv
00a82c  e6ff0070          UXTH     r0,r0
00a830  e1cd03b8          STRH     r0,[sp,#0x38]
;;;4839                               stMem.u16LineCnt     = pstTable->u16Height - u32DivY*u32BlockHeight;
00a834  e1d400b6          LDRH     r0,[r4,#6]
00a838  e060059b          MLS      r0,r11,r5,r0
00a83c  e6ff0070          UXTH     r0,r0
00a840  e1cd03ba          STRH     r0,[sp,#0x3a]
;;;4840                               stLutCfg.u32Addr     = pstTable->u32Address + 4U*u32CountY*u32BlockHeight*pstTable->u16Width + 4U*u32CountX*u32LUTBlockWidth;
00a844  e1a01108          LSL      r1,r8,#2
00a848  e0010591          MUL      r1,r1,r5
00a84c  e5940000          LDR      r0,[r4,#0]
00a850  e1d420b4          LDRH     r2,[r4,#4]
00a854  e0200291          MLA      r0,r1,r2,r0
00a858  e1a01109          LSL      r1,r9,#2
00a85c  e0200a91          MLA      r0,r1,r10,r0
00a860  e58d0020          STR      r0,[sp,#0x20]
;;;4841                               stLutCfg.u16LineCnt  = pstTable->u16Height - u32DivY*u32BlockHeight;
00a864  e1d400b6          LDRH     r0,[r4,#6]
00a868  e060059b          MLS      r0,r11,r5,r0
00a86c  e6ff0070          UXTH     r0,r0
00a870  e1cd02b6          STRH     r0,[sp,#0x26]
;;;4842   
;;;4843                               vTransf_ConfigTransfOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00a874  e59f020c          LDR      r0,|L1.43656|
00a878  e28d2014          ADD      r2,sp,#0x14
00a87c  e28d1020          ADD      r1,sp,#0x20
00a880  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00a884  e28d0028          ADD      r0,sp,#0x28
00a888  ebfffffe          BL       vTransf_ConfigTransfOp
;;;4844                               vGfListExecute();
00a88c  ebfffffe          BL       vGfListExecute
                  |L1.43152|
00a890  e2899001          ADD      r9,r9,#1              ;4780
                  |L1.43156|
00a894  e59d0010          LDR      r0,[sp,#0x10]         ;4780
00a898  e1590000          CMP      r9,r0                 ;4780
00a89c  9affff44          BLS      |L1.42420|
00a8a0  e2888001          ADD      r8,r8,#1              ;4778
                  |L1.43172|
00a8a4  e158000b          CMP      r8,r11                ;4778
00a8a8  9affff3f          BLS      |L1.42412|
;;;4845                           }
;;;4846                       }
;;;4847                   }
;;;4848               }
;;;4849           }
;;;4850       }
;;;4851   }
00a8ac  e28dd04c          ADD      sp,sp,#0x4c
00a8b0  e8bd8ff0          POP      {r4-r11,pc}
;;;4852   
                          ENDP

                  vGfBuffTransformationBlendFull PROC
;;;4855   
;;;4856   void vGfBuffTransformationBlendFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
00a8b4  e92d41f0          PUSH     {r4-r8,lr}
;;;4857                                       uint32_t u32PosX, uint32_t u32PosY)
;;;4858   {
00a8b8  e24dd038          SUB      sp,sp,#0x38
00a8bc  e1a06000          MOV      r6,r0
00a8c0  e1a05001          MOV      r5,r1
00a8c4  e1a04002          MOV      r4,r2
00a8c8  e1a07003          MOV      r7,r3
00a8cc  e59d8050          LDR      r8,[sp,#0x50]
;;;4859       transf_mem_st stMem;
;;;4860       transf_Lut_st stLutCfg;
;;;4861       transf_PrmBlend_st stTsfPrm;
;;;4862   
;;;4863       u8PreviousOperation = 0U;
00a8d0  e3a00000          MOV      r0,#0
00a8d4  e59f11a4          LDR      r1,|L1.43648|
00a8d8  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;4864   
;;;4865       stMem.u32SrcAddr     = pstSrcImage->u32Address;
00a8dc  e5960000          LDR      r0,[r6,#0]
00a8e0  e58d0028          STR      r0,[sp,#0x28]
;;;4866       stMem.u16SrcWidth    = pstSrcImage->u16Width;
00a8e4  e1d600b4          LDRH     r0,[r6,#4]
00a8e8  e1cd02b4          STRH     r0,[sp,#0x24]
;;;4867   
;;;4868       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00a8ec  e5d5000c          LDRB     r0,[r5,#0xc]
00a8f0  e3500004          CMP      r0,#4
00a8f4  1a000009          BNE      |L1.43296|
;;;4869       {
;;;4870           stMem.u32DstAddr    = pstDstImage->u32Address + 2U*pstDstImage->u16Width * u32PosY + 2U*u32PosX;
00a8f8  e5950000          LDR      r0,[r5,#0]
00a8fc  e1d510b4          LDRH     r1,[r5,#4]
00a900  e1a01081          LSL      r1,r1,#1
00a904  e0200891          MLA      r0,r1,r8,r0
00a908  e3a01002          MOV      r1,#2
00a90c  e0200791          MLA      r0,r1,r7,r0
00a910  e58d0030          STR      r0,[sp,#0x30]
;;;4871           stTsfPrm.eDstColFmt = GA_RGB16;
00a914  e3a00000          MOV      r0,#0
00a918  e5cd0010          STRB     r0,[sp,#0x10]
00a91c  ea000008          B        |L1.43332|
                  |L1.43296|
;;;4872       }
;;;4873       else
;;;4874       {
;;;4875           stMem.u32DstAddr    = pstDstImage->u32Address + 4U*pstDstImage->u16Width * u32PosY + 4U*u32PosX;
00a920  e5950000          LDR      r0,[r5,#0]
00a924  e1d510b4          LDRH     r1,[r5,#4]
00a928  e1a01101          LSL      r1,r1,#2
00a92c  e0200891          MLA      r0,r1,r8,r0
00a930  e3a01004          MOV      r1,#4
00a934  e0200791          MLA      r0,r1,r7,r0
00a938  e58d0030          STR      r0,[sp,#0x30]
;;;4876           stTsfPrm.eDstColFmt = GA_RGBA32;
00a93c  e3a00001          MOV      r0,#1
00a940  e5cd0010          STRB     r0,[sp,#0x10]
                  |L1.43332|
;;;4877       }
;;;4878   
;;;4879       stMem.u16DstWidth    = pstDstImage->u16Width;
00a944  e1d500b4          LDRH     r0,[r5,#4]
00a948  e1cd02bc          STRH     r0,[sp,#0x2c]
;;;4880       stMem.u16LineCnt     = pstTable->u16Height;
00a94c  e1d400b6          LDRH     r0,[r4,#6]
00a950  e1cd03b6          STRH     r0,[sp,#0x36]
;;;4881       if(stGastate.eTsfMode == TSF_MODE_COLOR)
00a954  e59f0128          LDR      r0,|L1.43652|
00a958  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a95c  e3500001          CMP      r0,#1
00a960  1a00000b          BNE      |L1.43412|
;;;4882       {
;;;4883           if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00a964  e5d6000c          LDRB     r0,[r6,#0xc]
00a968  e3500004          CMP      r0,#4
00a96c  1a000004          BNE      |L1.43396|
;;;4884           {
;;;4885               stMem.u16DstImgWidth = pstTable->u16Width/3U;
00a970  e1d400b4          LDRH     r0,[r4,#4]
00a974  e3a01003          MOV      r1,#3
00a978  ebfffffe          BL       __aeabi_uidiv
00a97c  e1cd03b4          STRH     r0,[sp,#0x34]
00a980  ea000005          B        |L1.43420|
                  |L1.43396|
;;;4886           }
;;;4887           else
;;;4888           {
;;;4889               stMem.u16DstImgWidth = pstTable->u16Width/4U;
00a984  e1d400b4          LDRH     r0,[r4,#4]
00a988  e1a00120          LSR      r0,r0,#2
00a98c  e1cd03b4          STRH     r0,[sp,#0x34]
00a990  ea000001          B        |L1.43420|
                  |L1.43412|
;;;4890           }
;;;4891       }
;;;4892       else
;;;4893       {
;;;4894           stMem.u16DstImgWidth = pstTable->u16Width;
00a994  e1d400b4          LDRH     r0,[r4,#4]
00a998  e1cd03b4          STRH     r0,[sp,#0x34]
                  |L1.43420|
;;;4895       }
;;;4896       stLutCfg.u32Addr    = pstTable->u32Address;
00a99c  e5940000          LDR      r0,[r4,#0]
00a9a0  e58d001c          STR      r0,[sp,#0x1c]
;;;4897       stLutCfg.u16Width   = pstTable->u16Width;
00a9a4  e1d400b4          LDRH     r0,[r4,#4]
00a9a8  e1cd02b0          STRH     r0,[sp,#0x20]
;;;4898       stLutCfg.u16LineCnt = pstTable->u16Height;
00a9ac  e1d400b6          LDRH     r0,[r4,#6]
00a9b0  e1cd02b2          STRH     r0,[sp,#0x22]
;;;4899   
;;;4900       stTsfPrm.eTsfMode      = stGastate.eTsfMode;
00a9b4  e59f00c8          LDR      r0,|L1.43652|
00a9b8  e5d00018          LDRB     r0,[r0,#0x18]  ; stGastate
00a9bc  e5cd0004          STRB     r0,[sp,#4]
;;;4901   
;;;4902       stTsfPrm.eFilterEn     = stGastate.eFilterEn;
00a9c0  e59f00bc          LDR      r0,|L1.43652|
00a9c4  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00a9c8  e5cd0005          STRB     r0,[sp,#5]
;;;4903       stTsfPrm.eDstRedProt   = stGastate.eRedChPrtEn;
00a9cc  e59f00b0          LDR      r0,|L1.43652|
00a9d0  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
00a9d4  e5cd0006          STRB     r0,[sp,#6]
;;;4904       stTsfPrm.eDstGreenProt = stGastate.eGreenChPrtEn;
00a9d8  e59f00a4          LDR      r0,|L1.43652|
00a9dc  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
00a9e0  e5cd0007          STRB     r0,[sp,#7]
;;;4905       stTsfPrm.eDstBlueProt  = stGastate.eBlueChPrtEn;
00a9e4  e59f0098          LDR      r0,|L1.43652|
00a9e8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
00a9ec  e5cd0008          STRB     r0,[sp,#8]
;;;4906       stTsfPrm.eDstAlphaProt = stGastate.eAlphaChPrtEn;
00a9f0  e59f008c          LDR      r0,|L1.43652|
00a9f4  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00a9f8  e5cd0009          STRB     r0,[sp,#9]
;;;4907   
;;;4908       stTsfPrm.eSrcRedFad    = GA_DIS;
00a9fc  e3a00000          MOV      r0,#0
00aa00  e5cd000a          STRB     r0,[sp,#0xa]
;;;4909       stTsfPrm.eSrcGreenFad  = GA_DIS;
00aa04  e5cd000b          STRB     r0,[sp,#0xb]
;;;4910       stTsfPrm.eSrcBlueFad   = GA_DIS;
00aa08  e5cd000c          STRB     r0,[sp,#0xc]
;;;4911       stTsfPrm.eSrcAlphaFad  = GA_DIS;
00aa0c  e5cd000d          STRB     r0,[sp,#0xd]
;;;4912   
;;;4913       stTsfPrm.eBldOrd       = stGastate.eBlndOrder;
00aa10  e59f006c          LDR      r0,|L1.43652|
00aa14  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
00aa18  e5cd000e          STRB     r0,[sp,#0xe]
;;;4914   
;;;4915       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00aa1c  e5d6000c          LDRB     r0,[r6,#0xc]
00aa20  e3500004          CMP      r0,#4
00aa24  1a000002          BNE      |L1.43572|
;;;4916       {
;;;4917           stTsfPrm.eSrcColFmt = GA_RGB16;
00aa28  e3a00000          MOV      r0,#0
00aa2c  e5cd000f          STRB     r0,[sp,#0xf]
00aa30  ea000001          B        |L1.43580|
                  |L1.43572|
;;;4918       }
;;;4919       else
;;;4920       {
;;;4921           stTsfPrm.eSrcColFmt = GA_RGBA32;
00aa34  e3a00001          MOV      r0,#1
00aa38  e5cd000f          STRB     r0,[sp,#0xf]
                  |L1.43580|
;;;4922       }
;;;4923   
;;;4924       stTsfPrm.u32Color      = stGastate.u32TsfPredefColor;
00aa3c  e59f0040          LDR      r0,|L1.43652|
00aa40  e590001c          LDR      r0,[r0,#0x1c]  ; stGastate
00aa44  e58d0014          STR      r0,[sp,#0x14]
;;;4925       stTsfPrm.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00aa48  e59f0034          LDR      r0,|L1.43652|
00aa4c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00aa50  e5cd0019          STRB     r0,[sp,#0x19]
;;;4926       stTsfPrm.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00aa54  e59f0028          LDR      r0,|L1.43652|
00aa58  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00aa5c  e5cd001a          STRB     r0,[sp,#0x1a]
;;;4927   
;;;4928       /* rearrange pixel by transformation */
;;;4929       vTransf_ConfigTransfBlendOp(&stMem, &stLutCfg, &stTsfPrm, pstWriteList);
00aa60  e59f0020          LDR      r0,|L1.43656|
00aa64  e28d2004          ADD      r2,sp,#4
00aa68  e28d101c          ADD      r1,sp,#0x1c
00aa6c  e5903000          LDR      r3,[r0,#0]  ; pstWriteList
00aa70  e28d0024          ADD      r0,sp,#0x24
00aa74  ebfffffe          BL       vTransf_ConfigTransfBlendOp
;;;4930   }
00aa78  e28dd038          ADD      sp,sp,#0x38
00aa7c  e8bd81f0          POP      {r4-r8,pc}
                  |L1.43648|
                          DCD      u8PreviousOperation
                  |L1.43652|
                          DCD      stGastate
                  |L1.43656|
                          DCD      pstWriteList
                          ENDP

                  vGfBuffDrawCircle PROC
;;;4989   
;;;4990   void vGfBuffDrawCircle(gf_image_st *pstDstImage, drw_OpCfg_st *pstOption, gf_circle_st *pstCircle)
00aa8c  e92d4007          PUSH     {r0-r2,lr}
;;;4991   {
00aa90  e24dd088          SUB      sp,sp,#0x88
;;;4992       float32_t f32Angle, f32AngleDelta, f32PosX, f32PosY;
;;;4993       drw_Trngl_st stTrngl;
;;;4994       uint32_t u32ResPPos, u32ResCPos;
;;;4995       gf_subRes_e ePPos, eCPos; 
;;;4996       uint16_t u16Count, u16Index, u16Radius;
;;;4997   
;;;4998       /* Get Sub resolution values */ 
;;;4999       u32ResPPos = u32GfGetSubRes_Position();
00aa94  ebfffffe          BL       u32GfGetSubRes_Position
00aa98  e58d0058          STR      r0,[sp,#0x58]
;;;5000       u32ResCPos = u32GfGetSubRes_CenterPosition();
00aa9c  ebfffffe          BL       u32GfGetSubRes_CenterPosition
00aaa0  e58d0054          STR      r0,[sp,#0x54]
;;;5001       ePPos = GA_PIXEL_RES;
00aaa4  e3a00000          MOV      r0,#0
00aaa8  e58d0050          STR      r0,[sp,#0x50]
;;;5002       eCPos = GA_PIXEL_RES;
00aaac  e58d004c          STR      r0,[sp,#0x4c]
;;;5003       
;;;5004       /* Sub Resolution position is already handled before calling vGfBuffDrawTriangle() API.
;;;5005          Hence u32SubResPPos is initialised to default value */
;;;5006       vGfSetSubRes(GA_PIXEL_RES, GA_PIXEL_RES);
00aab0  e3a01000          MOV      r1,#0
00aab4  e1a00001          MOV      r0,r1
00aab8  ebfffffe          BL       vGfSetSubRes
;;;5007   
;;;5008       /* Initializing Radius and triangle colour value */
;;;5009       u16Radius = pstCircle->u16Radius;
00aabc  e59d0090          LDR      r0,[sp,#0x90]
00aac0  e1d001b2          LDRH     r0,[r0,#0x12]
00aac4  e58d0040          STR      r0,[sp,#0x40]
;;;5010       stTrngl.stColor = pstCircle->stColor;
00aac8  e59d0090          LDR      r0,[sp,#0x90]
00aacc  e8900006          LDM      r0,{r1,r2}
00aad0  e5900008          LDR      r0,[r0,#8]
00aad4  e58d0074          STR      r0,[sp,#0x74]
00aad8  e58d106c          STR      r1,[sp,#0x6c]
00aadc  e58d2070          STR      r2,[sp,#0x70]
;;;5011       pstCircle->stCenter.u16X = (uint16_t)((17U-u32ResPPos)*(pstCircle->stCenter.u16X));
00aae0  e59d0058          LDR      r0,[sp,#0x58]
00aae4  e2601011          RSB      r1,r0,#0x11
00aae8  e59d0090          LDR      r0,[sp,#0x90]
00aaec  e1d000bc          LDRH     r0,[r0,#0xc]
00aaf0  e0000091          MUL      r0,r1,r0
00aaf4  e6ff1070          UXTH     r1,r0
00aaf8  e59d0090          LDR      r0,[sp,#0x90]
00aafc  e1c010bc          STRH     r1,[r0,#0xc]
;;;5012       pstCircle->stCenter.u16Y = (uint16_t)((17U-u32ResPPos)*(pstCircle->stCenter.u16Y));
00ab00  e59d0058          LDR      r0,[sp,#0x58]
00ab04  e2601011          RSB      r1,r0,#0x11
00ab08  e59d0090          LDR      r0,[sp,#0x90]
00ab0c  e1d000be          LDRH     r0,[r0,#0xe]
00ab10  e0000091          MUL      r0,r1,r0
00ab14  e6ff1070          UXTH     r1,r0
00ab18  e59d0090          LDR      r0,[sp,#0x90]
00ab1c  e1c010be          STRH     r1,[r0,#0xe]
;;;5013   
;;;5014       /* Draw line feature with Circular end caps is used to get circle when radius < 16 and when AA is enabled */
;;;5015       if((u16Radius < 256U) && (pstCircle->eAntialEn == GA_EN))
00ab20  e59d0040          LDR      r0,[sp,#0x40]
00ab24  e3500c01          CMP      r0,#0x100
00ab28  2a000007          BCS      |L1.43852|
00ab2c  e59d0090          LDR      r0,[sp,#0x90]
00ab30  e5d00010          LDRB     r0,[r0,#0x10]
00ab34  e3500001          CMP      r0,#1
00ab38  1a000003          BNE      |L1.43852|
;;;5016       {
;;;5017           vGfDrawCircleWithEndCaps(pstDstImage, pstOption, pstCircle);
00ab3c  e28d2088          ADD      r2,sp,#0x88
00ab40  e8920007          LDM      r2,{r0-r2}
00ab44  ebfffffe          BL       vGfDrawCircleWithEndCaps
00ab48  ea00025b          B        |L1.46268|
                  |L1.43852|
;;;5018       }
;;;5019       else
;;;5020       {
;;;5021           /* Circles with radius more than or equal to 16 will be drawn using triangles */
;;;5022           /* Number of triangles for semicircle - 1 */
;;;5023           u16Count = (uint16_t)(GA_CONST_PI / (acos((u16Radius >> 4U) / ((u16Radius >> 4U) + 0.125)) * 2U));
00ab4c  e59d0040          LDR      r0,[sp,#0x40]
00ab50  e1a00240          ASR      r0,r0,#4
00ab54  e58d0004          STR      r0,[sp,#4]
00ab58  ebfffffe          BL       __aeabi_i2d
00ab5c  e3a02000          MOV      r2,#0
00ab60  e3a035ff          MOV      r3,#0x3fc00000
00ab64  e1cd00f8          STRD     r0,r1,[sp,#8]
00ab68  ebfffffe          BL       __aeabi_dadd
00ab6c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00ab70  e59d0040          LDR      r0,[sp,#0x40]
00ab74  e1a00240          ASR      r0,r0,#4
00ab78  e58d000c          STR      r0,[sp,#0xc]
00ab7c  ebfffffe          BL       __aeabi_i2d
00ab80  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00ab84  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00ab88  ebfffffe          BL       __aeabi_ddiv
00ab8c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ab90  ebfffffe          BL       acos
00ab94  e3a02000          MOV      r2,#0
00ab98  e3a03101          MOV      r3,#0x40000000
00ab9c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00aba0  ebfffffe          BL       __aeabi_dmul
00aba4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00aba8  e1a02000          MOV      r2,r0
00abac  e1a03001          MOV      r3,r1
00abb0  e59f0f94          LDR      r0,|L1.47948|
00abb4  e59f1f94          LDR      r1,|L1.47952|
00abb8  ebfffffe          BL       __aeabi_ddiv
00abbc  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00abc0  ebfffffe          BL       __aeabi_d2uiz
00abc4  e6ff0070          UXTH     r0,r0
00abc8  e58d0048          STR      r0,[sp,#0x48]
;;;5024           /* Triangle count is increased to odd value to avoid overlap between the triangles */
;;;5025           u16Count += (u16Count & 1U);
00abcc  e59d0048          LDR      r0,[sp,#0x48]
00abd0  e2001001          AND      r1,r0,#1
00abd4  e0800001          ADD      r0,r0,r1
00abd8  e6ff0070          UXTH     r0,r0
00abdc  e58d0048          STR      r0,[sp,#0x48]
;;;5026   
;;;5027           /* angle for each triangle over a semicircle */
;;;5028           f32Angle = (GA_CONST_PI / (u16Count + 1U));
00abe0  e59d0048          LDR      r0,[sp,#0x48]
00abe4  e2800001          ADD      r0,r0,#1
00abe8  ebfffffe          BL       __aeabi_ui2d
00abec  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00abf0  e1a02000          MOV      r2,r0
00abf4  e1a03001          MOV      r3,r1
00abf8  e59f0f4c          LDR      r0,|L1.47948|
00abfc  e59f1f4c          LDR      r1,|L1.47952|
00ac00  ebfffffe          BL       __aeabi_ddiv
00ac04  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ac08  ebfffffe          BL       __aeabi_d2f
00ac0c  e58d0084          STR      r0,[sp,#0x84]
;;;5029           f32AngleDelta = f32Angle;
00ac10  e59d0084          LDR      r0,[sp,#0x84]
00ac14  e58d0080          STR      r0,[sp,#0x80]
;;;5030   
;;;5031           /* Pattern for arranging vertices in Ist quadrant ; u16Count is used for first half circle */
;;;5032           /* AA settings for Ist quadrant */
;;;5033           stTrngl.eAntialEn1 = GA_DIS;
00ac18  e3a00000          MOV      r0,#0
00ac1c  e5cd0068          STRB     r0,[sp,#0x68]
;;;5034           stTrngl.eAntialEn2 = GA_DIS;
00ac20  e5cd0069          STRB     r0,[sp,#0x69]
;;;5035           stTrngl.eAntialEn3 = pstCircle->eAntialEn;
00ac24  e59d0090          LDR      r0,[sp,#0x90]
00ac28  e5d00010          LDRB     r0,[r0,#0x10]
00ac2c  e5cd006a          STRB     r0,[sp,#0x6a]
;;;5036           
;;;5037           f32PosX = u16Radius * cos(f32Angle);
00ac30  e59d0084          LDR      r0,[sp,#0x84]
00ac34  ebfffffe          BL       __aeabi_f2d
00ac38  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ac3c  ebfffffe          BL       ||cos||
00ac40  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ac44  e59d0040          LDR      r0,[sp,#0x40]
00ac48  ebfffffe          BL       __aeabi_ui2d
00ac4c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ac50  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00ac54  ebfffffe          BL       __aeabi_dmul
00ac58  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ac5c  ebfffffe          BL       __aeabi_d2f
00ac60  e58d007c          STR      r0,[sp,#0x7c]
;;;5038           f32PosY = u16Radius * sin(f32Angle);
00ac64  e59d0084          LDR      r0,[sp,#0x84]
00ac68  ebfffffe          BL       __aeabi_f2d
00ac6c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ac70  ebfffffe          BL       ||sin||
00ac74  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ac78  e59d0040          LDR      r0,[sp,#0x40]
00ac7c  ebfffffe          BL       __aeabi_ui2d
00ac80  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ac84  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00ac88  ebfffffe          BL       __aeabi_dmul
00ac8c  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ac90  ebfffffe          BL       __aeabi_d2f
00ac94  e58d0078          STR      r0,[sp,#0x78]
;;;5039   
;;;5040           stTrngl.stPt3.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00ac98  e59d0090          LDR      r0,[sp,#0x90]
00ac9c  e1d000bc          LDRH     r0,[r0,#0xc]
00aca0  e58d0034          STR      r0,[sp,#0x34]
00aca4  ebfffffe          BL       __aeabi_ui2f
00aca8  e58d0038          STR      r0,[sp,#0x38]
00acac  e59d107c          LDR      r1,[sp,#0x7c]
00acb0  ebfffffe          BL       __aeabi_fadd
00acb4  e58d003c          STR      r0,[sp,#0x3c]
00acb8  ebfffffe          BL       __aeabi_f2uiz
00acbc  e6ff1070          UXTH     r1,r0
00acc0  e1cd16b4          STRH     r1,[sp,#0x64]
;;;5041           stTrngl.stPt3.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00acc4  e59d0090          LDR      r0,[sp,#0x90]
00acc8  e1d000be          LDRH     r0,[r0,#0xe]
00accc  e58d0034          STR      r0,[sp,#0x34]
00acd0  ebfffffe          BL       __aeabi_ui2f
00acd4  e58d0038          STR      r0,[sp,#0x38]
00acd8  e59d1078          LDR      r1,[sp,#0x78]
00acdc  ebfffffe          BL       __aeabi_fsub
00ace0  e58d003c          STR      r0,[sp,#0x3c]
00ace4  ebfffffe          BL       __aeabi_f2uiz
00ace8  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5042           
;;;5043           stTrngl.stPt2.u16X = pstCircle->stCenter.u16X;
00acec  e59d0090          LDR      r0,[sp,#0x90]
00acf0  e1d010bc          LDRH     r1,[r0,#0xc]
00acf4  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5044           stTrngl.stPt2.u16Y = pstCircle->stCenter.u16Y;
00acf8  e59d0090          LDR      r0,[sp,#0x90]
00acfc  e1d000be          LDRH     r0,[r0,#0xe]
00ad00  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5045           
;;;5046           f32Angle += f32AngleDelta;
00ad04  e59d0084          LDR      r0,[sp,#0x84]
00ad08  e59d1080          LDR      r1,[sp,#0x80]
00ad0c  ebfffffe          BL       __aeabi_fadd
00ad10  e58d0084          STR      r0,[sp,#0x84]
;;;5047           
;;;5048           /* Check for angle between 0 to 90 degree and triangle count for first half of the circle; 
;;;5049              u16Index = 2 because the first triangle is skipped and 
;;;5050              joined with last triangle of the circle to avoid overlap */
;;;5051           for(u16Index = 2U; (u16Index <= u16Count) && (f32Angle <= GF_PI_BY_2 ); u16Index++)
00ad14  e3a00002          MOV      r0,#2
00ad18  e58d0044          STR      r0,[sp,#0x44]
00ad1c  ea00003e          B        |L1.44572|
                  |L1.44320|
;;;5052           {
;;;5053               f32PosX = u16Radius * cos(f32Angle);
00ad20  e59d0084          LDR      r0,[sp,#0x84]
00ad24  ebfffffe          BL       __aeabi_f2d
00ad28  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ad2c  ebfffffe          BL       ||cos||
00ad30  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ad34  e59d0040          LDR      r0,[sp,#0x40]
00ad38  ebfffffe          BL       __aeabi_ui2d
00ad3c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ad40  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00ad44  ebfffffe          BL       __aeabi_dmul
00ad48  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ad4c  ebfffffe          BL       __aeabi_d2f
00ad50  e58d007c          STR      r0,[sp,#0x7c]
;;;5054               f32PosY = u16Radius * sin(f32Angle);
00ad54  e59d0084          LDR      r0,[sp,#0x84]
00ad58  ebfffffe          BL       __aeabi_f2d
00ad5c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ad60  ebfffffe          BL       ||sin||
00ad64  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ad68  e59d0040          LDR      r0,[sp,#0x40]
00ad6c  ebfffffe          BL       __aeabi_ui2d
00ad70  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ad74  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00ad78  ebfffffe          BL       __aeabi_dmul
00ad7c  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ad80  ebfffffe          BL       __aeabi_d2f
00ad84  e58d0078          STR      r0,[sp,#0x78]
;;;5055               
;;;5056               stTrngl.stPt1.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00ad88  e59d0090          LDR      r0,[sp,#0x90]
00ad8c  e1d000bc          LDRH     r0,[r0,#0xc]
00ad90  e58d0034          STR      r0,[sp,#0x34]
00ad94  ebfffffe          BL       __aeabi_ui2f
00ad98  e58d0038          STR      r0,[sp,#0x38]
00ad9c  e59d107c          LDR      r1,[sp,#0x7c]
00ada0  ebfffffe          BL       __aeabi_fadd
00ada4  e58d003c          STR      r0,[sp,#0x3c]
00ada8  ebfffffe          BL       __aeabi_f2uiz
00adac  e6ff1070          UXTH     r1,r0
00adb0  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;5057               stTrngl.stPt1.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00adb4  e59d0090          LDR      r0,[sp,#0x90]
00adb8  e1d000be          LDRH     r0,[r0,#0xe]
00adbc  e58d0034          STR      r0,[sp,#0x34]
00adc0  ebfffffe          BL       __aeabi_ui2f
00adc4  e58d0038          STR      r0,[sp,#0x38]
00adc8  e59d1078          LDR      r1,[sp,#0x78]
00adcc  ebfffffe          BL       __aeabi_fsub
00add0  e58d003c          STR      r0,[sp,#0x3c]
00add4  ebfffffe          BL       __aeabi_f2uiz
00add8  e6ff1070          UXTH     r1,r0
00addc  e1cd15be          STRH     r1,[sp,#0x5e]
;;;5058   
;;;5059               vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00ade0  e28d205c          ADD      r2,sp,#0x5c
00ade4  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00ade8  ebfffffe          BL       vGfBuffDrawTriangle
;;;5060   
;;;5061               stTrngl.stPt3.u16X = stTrngl.stPt1.u16X;
00adec  e1dd15bc          LDRH     r1,[sp,#0x5c]
00adf0  e1cd16b4          STRH     r1,[sp,#0x64]
;;;5062               stTrngl.stPt3.u16Y = stTrngl.stPt1.u16Y;
00adf4  e1dd05be          LDRH     r0,[sp,#0x5e]
00adf8  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5063               
;;;5064               f32Angle += f32AngleDelta;
00adfc  e59d0084          LDR      r0,[sp,#0x84]
00ae00  e59d1080          LDR      r1,[sp,#0x80]
00ae04  ebfffffe          BL       __aeabi_fadd
00ae08  e58d0084          STR      r0,[sp,#0x84]
00ae0c  e59d0044          LDR      r0,[sp,#0x44]         ;5051
00ae10  e2800001          ADD      r0,r0,#1              ;5051
00ae14  e6ff0070          UXTH     r0,r0                 ;5051
00ae18  e58d0044          STR      r0,[sp,#0x44]         ;5051
                  |L1.44572|
00ae1c  e1cd04d4          LDRD     r0,r1,[sp,#0x44]      ;5051
00ae20  e1500001          CMP      r0,r1                 ;5051
00ae24  ca000006          BGT      |L1.44612|
00ae28  e59d0084          LDR      r0,[sp,#0x84]         ;5051
00ae2c  ebfffffe          BL       __aeabi_f2d
00ae30  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5051
00ae34  e59f2d18          LDR      r2,|L1.47956|
00ae38  e59f3d18          LDR      r3,|L1.47960|
00ae3c  ebfffffe          BL       __aeabi_cdcmple
00ae40  9affffb6          BLS      |L1.44320|
                  |L1.44612|
;;;5065           }
;;;5066           
;;;5067           /* Pattern for arranging vertices in 2nd quadrant */
;;;5068           /* AA settings for II quadrant */
;;;5069           stTrngl.eAntialEn1 = pstCircle->eAntialEn;
00ae44  e59d0090          LDR      r0,[sp,#0x90]
00ae48  e5d00010          LDRB     r0,[r0,#0x10]
00ae4c  e5cd0068          STRB     r0,[sp,#0x68]
;;;5070           stTrngl.eAntialEn2 = GA_DIS;
00ae50  e3a00000          MOV      r0,#0
00ae54  e5cd0069          STRB     r0,[sp,#0x69]
;;;5071           stTrngl.eAntialEn3 = GA_DIS;
00ae58  e5cd006a          STRB     r0,[sp,#0x6a]
;;;5072           
;;;5073           /* check for angle which covers both I and II quadrant */
;;;5074           stTrngl.stPt3.u16X = pstCircle->stCenter.u16X;
00ae5c  e59d0090          LDR      r0,[sp,#0x90]
00ae60  e1d010bc          LDRH     r1,[r0,#0xc]
00ae64  e1cd16b4          STRH     r1,[sp,#0x64]
;;;5075           stTrngl.stPt3.u16Y = pstCircle->stCenter.u16Y;
00ae68  e59d0090          LDR      r0,[sp,#0x90]
00ae6c  e1d000be          LDRH     r0,[r0,#0xe]
00ae70  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5076   
;;;5077           f32PosX = u16Radius * cos(f32Angle);
00ae74  e59d0084          LDR      r0,[sp,#0x84]
00ae78  ebfffffe          BL       __aeabi_f2d
00ae7c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ae80  ebfffffe          BL       ||cos||
00ae84  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ae88  e59d0040          LDR      r0,[sp,#0x40]
00ae8c  ebfffffe          BL       __aeabi_ui2d
00ae90  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ae94  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00ae98  ebfffffe          BL       __aeabi_dmul
00ae9c  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00aea0  ebfffffe          BL       __aeabi_d2f
00aea4  e58d007c          STR      r0,[sp,#0x7c]
;;;5078           f32PosY = u16Radius * sin(f32Angle);
00aea8  e59d0084          LDR      r0,[sp,#0x84]
00aeac  ebfffffe          BL       __aeabi_f2d
00aeb0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00aeb4  ebfffffe          BL       ||sin||
00aeb8  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00aebc  e59d0040          LDR      r0,[sp,#0x40]
00aec0  ebfffffe          BL       __aeabi_ui2d
00aec4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00aec8  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00aecc  ebfffffe          BL       __aeabi_dmul
00aed0  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00aed4  ebfffffe          BL       __aeabi_d2f
00aed8  e58d0078          STR      r0,[sp,#0x78]
;;;5079   
;;;5080           stTrngl.stPt2.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00aedc  e59d0090          LDR      r0,[sp,#0x90]
00aee0  e1d000bc          LDRH     r0,[r0,#0xc]
00aee4  e58d0034          STR      r0,[sp,#0x34]
00aee8  ebfffffe          BL       __aeabi_ui2f
00aeec  e58d0038          STR      r0,[sp,#0x38]
00aef0  e59d107c          LDR      r1,[sp,#0x7c]
00aef4  ebfffffe          BL       __aeabi_fadd
00aef8  e58d003c          STR      r0,[sp,#0x3c]
00aefc  ebfffffe          BL       __aeabi_f2uiz
00af00  e6ff1070          UXTH     r1,r0
00af04  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5081           stTrngl.stPt2.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00af08  e59d0090          LDR      r0,[sp,#0x90]
00af0c  e1d000be          LDRH     r0,[r0,#0xe]
00af10  e58d0034          STR      r0,[sp,#0x34]
00af14  ebfffffe          BL       __aeabi_ui2f
00af18  e58d0038          STR      r0,[sp,#0x38]
00af1c  e59d1078          LDR      r1,[sp,#0x78]
00af20  ebfffffe          BL       __aeabi_fsub
00af24  e58d003c          STR      r0,[sp,#0x3c]
00af28  ebfffffe          BL       __aeabi_f2uiz
00af2c  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5082   
;;;5083           /* Check for anticlockwise direction and sorting */
;;;5084           if(stTrngl.stPt1.u16Y > stTrngl.stPt2.u16Y)
00af30  e1dd05be          LDRH     r0,[sp,#0x5e]
00af34  e1dd16b2          LDRH     r1,[sp,#0x62]
00af38  e1500001          CMP      r0,r1
00af3c  da000014          BLE      |L1.44948|
;;;5085           {
;;;5086               /* AA flag is not required to be sorted in circle so passing 0 as argument to sort function*/
;;;5087               vGfDrawTriangleSort(pstDstImage, pstOption, &stTrngl, pstCircle->eAntialEn & 1);
00af40  e59d0090          LDR      r0,[sp,#0x90]
00af44  e5d00010          LDRB     r0,[r0,#0x10]
00af48  e2000001          AND      r0,r0,#1
00af4c  e58d003c          STR      r0,[sp,#0x3c]
00af50  e1a03000          MOV      r3,r0
00af54  e28d205c          ADD      r2,sp,#0x5c
00af58  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00af5c  ebfffffe          BL       vGfDrawTriangleSort
;;;5088   
;;;5089               /* Reset center and AA settings for triangles to be drawn in IInd quadrant */
;;;5090               stTrngl.stPt3.u16X = pstCircle->stCenter.u16X;
00af60  e59d0090          LDR      r0,[sp,#0x90]
00af64  e1d000bc          LDRH     r0,[r0,#0xc]
00af68  e1cd06b4          STRH     r0,[sp,#0x64]
;;;5091               stTrngl.stPt3.u16Y = pstCircle->stCenter.u16Y;
00af6c  e59d0090          LDR      r0,[sp,#0x90]
00af70  e1d000be          LDRH     r0,[r0,#0xe]
00af74  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5092   
;;;5093               stTrngl.eAntialEn1 = pstCircle->eAntialEn;
00af78  e59d0090          LDR      r0,[sp,#0x90]
00af7c  e5d00010          LDRB     r0,[r0,#0x10]
00af80  e5cd0068          STRB     r0,[sp,#0x68]
;;;5094               stTrngl.eAntialEn2 = GA_DIS;
00af84  e3a00000          MOV      r0,#0
00af88  e5cd0069          STRB     r0,[sp,#0x69]
;;;5095               stTrngl.eAntialEn3 = GA_DIS;
00af8c  e5cd006a          STRB     r0,[sp,#0x6a]
00af90  ea000006          B        |L1.44976|
                  |L1.44948|
;;;5096           }
;;;5097           else /* If the points are arranged in properly no change in AA effect and coordinates arrangement */
;;;5098           {
;;;5099               vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00af94  e28d205c          ADD      r2,sp,#0x5c
00af98  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00af9c  ebfffffe          BL       vGfBuffDrawTriangle
;;;5100   
;;;5101               stTrngl.stPt1.u16X = stTrngl.stPt2.u16X;
00afa0  e1dd16b0          LDRH     r1,[sp,#0x60]
00afa4  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;5102               stTrngl.stPt1.u16Y = stTrngl.stPt2.u16Y;
00afa8  e1dd16b2          LDRH     r1,[sp,#0x62]
00afac  e1cd15be          STRH     r1,[sp,#0x5e]
                  |L1.44976|
;;;5103           }
;;;5104           f32Angle += f32AngleDelta;
00afb0  e59d0084          LDR      r0,[sp,#0x84]
00afb4  e59d1080          LDR      r1,[sp,#0x80]
00afb8  ebfffffe          BL       __aeabi_fadd
00afbc  e58d0084          STR      r0,[sp,#0x84]
;;;5105           u16Index++;
00afc0  e59d0044          LDR      r0,[sp,#0x44]
00afc4  e2800001          ADD      r0,r0,#1
00afc8  e6ff0070          UXTH     r0,r0
00afcc  e58d0044          STR      r0,[sp,#0x44]
;;;5106   
;;;5107           /* Check for angle between 90 to 180 degree and triangle count for first half of the circle */
;;;5108           for(; (u16Index <= u16Count) && (GF_PI_BY_2 < f32Angle) && (f32Angle < GA_CONST_PI); u16Index++)
00afd0  ea00003d          B        |L1.45260|
                  |L1.45012|
;;;5109           {
;;;5110               f32PosX = u16Radius * cos(f32Angle);
00afd4  e59d0084          LDR      r0,[sp,#0x84]
00afd8  ebfffffe          BL       __aeabi_f2d
00afdc  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00afe0  ebfffffe          BL       ||cos||
00afe4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00afe8  e59d0040          LDR      r0,[sp,#0x40]
00afec  ebfffffe          BL       __aeabi_ui2d
00aff0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00aff4  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00aff8  ebfffffe          BL       __aeabi_dmul
00affc  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b000  ebfffffe          BL       __aeabi_d2f
00b004  e58d007c          STR      r0,[sp,#0x7c]
;;;5111               f32PosY = u16Radius * sin(f32Angle);
00b008  e59d0084          LDR      r0,[sp,#0x84]
00b00c  ebfffffe          BL       __aeabi_f2d
00b010  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b014  ebfffffe          BL       ||sin||
00b018  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b01c  e59d0040          LDR      r0,[sp,#0x40]
00b020  ebfffffe          BL       __aeabi_ui2d
00b024  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b028  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b02c  ebfffffe          BL       __aeabi_dmul
00b030  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b034  ebfffffe          BL       __aeabi_d2f
00b038  e58d0078          STR      r0,[sp,#0x78]
;;;5112   
;;;5113               stTrngl.stPt2.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00b03c  e59d0090          LDR      r0,[sp,#0x90]
00b040  e1d000bc          LDRH     r0,[r0,#0xc]
00b044  e58d0034          STR      r0,[sp,#0x34]
00b048  ebfffffe          BL       __aeabi_ui2f
00b04c  e58d0038          STR      r0,[sp,#0x38]
00b050  e59d107c          LDR      r1,[sp,#0x7c]
00b054  ebfffffe          BL       __aeabi_fadd
00b058  e58d003c          STR      r0,[sp,#0x3c]
00b05c  ebfffffe          BL       __aeabi_f2uiz
00b060  e6ff1070          UXTH     r1,r0
00b064  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5114               stTrngl.stPt2.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00b068  e59d0090          LDR      r0,[sp,#0x90]
00b06c  e1d000be          LDRH     r0,[r0,#0xe]
00b070  e58d0034          STR      r0,[sp,#0x34]
00b074  ebfffffe          BL       __aeabi_ui2f
00b078  e58d0038          STR      r0,[sp,#0x38]
00b07c  e59d1078          LDR      r1,[sp,#0x78]
00b080  ebfffffe          BL       __aeabi_fsub
00b084  e58d003c          STR      r0,[sp,#0x3c]
00b088  ebfffffe          BL       __aeabi_f2uiz
00b08c  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5115   
;;;5116               vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00b090  e28d205c          ADD      r2,sp,#0x5c
00b094  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00b098  ebfffffe          BL       vGfBuffDrawTriangle
;;;5117   
;;;5118               stTrngl.stPt1.u16X = stTrngl.stPt2.u16X;
00b09c  e1dd16b0          LDRH     r1,[sp,#0x60]
00b0a0  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;5119               stTrngl.stPt1.u16Y = stTrngl.stPt2.u16Y;
00b0a4  e1dd16b2          LDRH     r1,[sp,#0x62]
00b0a8  e1cd15be          STRH     r1,[sp,#0x5e]
;;;5120   
;;;5121               f32Angle += f32AngleDelta;
00b0ac  e59d0084          LDR      r0,[sp,#0x84]
00b0b0  e59d1080          LDR      r1,[sp,#0x80]
00b0b4  ebfffffe          BL       __aeabi_fadd
00b0b8  e58d0084          STR      r0,[sp,#0x84]
00b0bc  e59d0044          LDR      r0,[sp,#0x44]         ;5108
00b0c0  e2800001          ADD      r0,r0,#1              ;5108
00b0c4  e6ff0070          UXTH     r0,r0                 ;5108
00b0c8  e58d0044          STR      r0,[sp,#0x44]         ;5108
                  |L1.45260|
00b0cc  e1cd04d4          LDRD     r0,r1,[sp,#0x44]      ;5108
00b0d0  e1500001          CMP      r0,r1                 ;5108
00b0d4  ca00000d          BGT      |L1.45328|
00b0d8  e59d0084          LDR      r0,[sp,#0x84]         ;5108
00b0dc  ebfffffe          BL       __aeabi_f2d
00b0e0  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5108
00b0e4  e59f2a68          LDR      r2,|L1.47956|
00b0e8  e59f3a68          LDR      r3,|L1.47960|
00b0ec  ebfffffe          BL       __aeabi_cdrcmple
00b0f0  2a000006          BCS      |L1.45328|
00b0f4  e59d0084          LDR      r0,[sp,#0x84]         ;5108
00b0f8  ebfffffe          BL       __aeabi_f2d
00b0fc  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5108
00b100  e59f2a44          LDR      r2,|L1.47948|
00b104  e59f3a44          LDR      r3,|L1.47952|
00b108  ebfffffe          BL       __aeabi_cdcmple
00b10c  3affffb0          BCC      |L1.45012|
                  |L1.45328|
;;;5122           }
;;;5123           
;;;5124           /* Pattern for arranging vertices in 3rd and 4th quadrant */
;;;5125           /* Last triangle of 2nd quadrant and first triangle of 3rd quadrant are drawn as single triangle
;;;5126              to avoid overlap between two triangles  */
;;;5127   
;;;5128           /* AA settings for triangle between III and IV quadrant */
;;;5129           stTrngl.eAntialEn1 = pstCircle->eAntialEn;
00b110  e59d0090          LDR      r0,[sp,#0x90]
00b114  e5d00010          LDRB     r0,[r0,#0x10]
00b118  e5cd0068          STRB     r0,[sp,#0x68]
;;;5130           stTrngl.eAntialEn2 = GA_DIS;
00b11c  e3a00000          MOV      r0,#0
00b120  e5cd0069          STRB     r0,[sp,#0x69]
;;;5131           stTrngl.eAntialEn3 = GA_DIS;
00b124  e5cd006a          STRB     r0,[sp,#0x6a]
;;;5132   
;;;5133           f32Angle = GA_CONST_PI + f32AngleDelta;
00b128  e59d0080          LDR      r0,[sp,#0x80]
00b12c  ebfffffe          BL       __aeabi_f2d
00b130  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b134  e59f2a10          LDR      r2,|L1.47948|
00b138  e59f3a10          LDR      r3,|L1.47952|
00b13c  ebfffffe          BL       __aeabi_dadd
00b140  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b144  ebfffffe          BL       __aeabi_d2f
00b148  e58d0084          STR      r0,[sp,#0x84]
;;;5134   
;;;5135           f32PosX = u16Radius * cos(f32Angle);
00b14c  e59d0084          LDR      r0,[sp,#0x84]
00b150  ebfffffe          BL       __aeabi_f2d
00b154  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b158  ebfffffe          BL       ||cos||
00b15c  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b160  e59d0040          LDR      r0,[sp,#0x40]
00b164  ebfffffe          BL       __aeabi_ui2d
00b168  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b16c  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b170  ebfffffe          BL       __aeabi_dmul
00b174  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b178  ebfffffe          BL       __aeabi_d2f
00b17c  e58d007c          STR      r0,[sp,#0x7c]
;;;5136           f32PosY = u16Radius * sin(f32Angle);
00b180  e59d0084          LDR      r0,[sp,#0x84]
00b184  ebfffffe          BL       __aeabi_f2d
00b188  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b18c  ebfffffe          BL       ||sin||
00b190  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b194  e59d0040          LDR      r0,[sp,#0x40]
00b198  ebfffffe          BL       __aeabi_ui2d
00b19c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b1a0  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b1a4  ebfffffe          BL       __aeabi_dmul
00b1a8  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b1ac  ebfffffe          BL       __aeabi_d2f
00b1b0  e58d0078          STR      r0,[sp,#0x78]
;;;5137   
;;;5138           stTrngl.stPt2.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00b1b4  e59d0090          LDR      r0,[sp,#0x90]
00b1b8  e1d000bc          LDRH     r0,[r0,#0xc]
00b1bc  e58d0034          STR      r0,[sp,#0x34]
00b1c0  ebfffffe          BL       __aeabi_ui2f
00b1c4  e58d0038          STR      r0,[sp,#0x38]
00b1c8  e59d107c          LDR      r1,[sp,#0x7c]
00b1cc  ebfffffe          BL       __aeabi_fadd
00b1d0  e58d003c          STR      r0,[sp,#0x3c]
00b1d4  ebfffffe          BL       __aeabi_f2uiz
00b1d8  e6ff1070          UXTH     r1,r0
00b1dc  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5139           stTrngl.stPt2.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00b1e0  e59d0090          LDR      r0,[sp,#0x90]
00b1e4  e1d000be          LDRH     r0,[r0,#0xe]
00b1e8  e58d0034          STR      r0,[sp,#0x34]
00b1ec  ebfffffe          BL       __aeabi_ui2f
00b1f0  e58d0038          STR      r0,[sp,#0x38]
00b1f4  e59d1078          LDR      r1,[sp,#0x78]
00b1f8  ebfffffe          BL       __aeabi_fsub
00b1fc  e58d003c          STR      r0,[sp,#0x3c]
00b200  ebfffffe          BL       __aeabi_f2uiz
00b204  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5140   
;;;5141           stTrngl.stPt3.u16X = pstCircle->stCenter.u16X;
00b208  e59d0090          LDR      r0,[sp,#0x90]
00b20c  e1d010bc          LDRH     r1,[r0,#0xc]
00b210  e1cd16b4          STRH     r1,[sp,#0x64]
;;;5142           stTrngl.stPt3.u16Y = pstCircle->stCenter.u16Y;
00b214  e59d0090          LDR      r0,[sp,#0x90]
00b218  e1d000be          LDRH     r0,[r0,#0xe]
00b21c  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5143           
;;;5144           vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00b220  e28d205c          ADD      r2,sp,#0x5c
00b224  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00b228  ebfffffe          BL       vGfBuffDrawTriangle
;;;5145           
;;;5146            /* AA settings and co-ordinate arrangement for III and IV quadrant */
;;;5147           stTrngl.stPt1.u16X = pstCircle->stCenter.u16X;
00b22c  e59d0090          LDR      r0,[sp,#0x90]
00b230  e1d010bc          LDRH     r1,[r0,#0xc]
00b234  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;5148           stTrngl.stPt1.u16Y = pstCircle->stCenter.u16Y;
00b238  e59d0090          LDR      r0,[sp,#0x90]
00b23c  e1d010be          LDRH     r1,[r0,#0xe]
00b240  e1cd15be          STRH     r1,[sp,#0x5e]
;;;5149           
;;;5150           stTrngl.eAntialEn1 = GA_DIS;
00b244  e3a00000          MOV      r0,#0
00b248  e5cd0068          STRB     r0,[sp,#0x68]
;;;5151           stTrngl.eAntialEn2 = pstCircle->eAntialEn;
00b24c  e59d0090          LDR      r0,[sp,#0x90]
00b250  e5d00010          LDRB     r0,[r0,#0x10]
00b254  e5cd0069          STRB     r0,[sp,#0x69]
;;;5152           stTrngl.eAntialEn3 = GA_DIS;
00b258  e3a00000          MOV      r0,#0
00b25c  e5cd006a          STRB     r0,[sp,#0x6a]
;;;5153           
;;;5154           f32Angle += f32AngleDelta;
00b260  e59d0084          LDR      r0,[sp,#0x84]
00b264  e59d1080          LDR      r1,[sp,#0x80]
00b268  ebfffffe          BL       __aeabi_fadd
00b26c  e58d0084          STR      r0,[sp,#0x84]
;;;5155           u16Index++;
00b270  e59d0044          LDR      r0,[sp,#0x44]
00b274  e2800001          ADD      r0,r0,#1
00b278  e6ff0070          UXTH     r0,r0
00b27c  e58d0044          STR      r0,[sp,#0x44]
;;;5156           /* Check for angle between 180 to 360 degree and triangle count for second half of the circle */
;;;5157           /* Same pattern of arrangement is used for points in 3rd and 4th quadrant since point1 is same */
;;;5158           for(;(u16Index <= (u16Count * 2U)) && (f32Angle < GF_2_PI) && (f32Angle > GA_CONST_PI); u16Index++)
00b280  ea00003d          B        |L1.45948|
                  |L1.45700|
;;;5159           {
;;;5160               f32PosX = u16Radius * cos(f32Angle);
00b284  e59d0084          LDR      r0,[sp,#0x84]
00b288  ebfffffe          BL       __aeabi_f2d
00b28c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b290  ebfffffe          BL       ||cos||
00b294  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b298  e59d0040          LDR      r0,[sp,#0x40]
00b29c  ebfffffe          BL       __aeabi_ui2d
00b2a0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b2a4  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b2a8  ebfffffe          BL       __aeabi_dmul
00b2ac  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b2b0  ebfffffe          BL       __aeabi_d2f
00b2b4  e58d007c          STR      r0,[sp,#0x7c]
;;;5161               f32PosY = u16Radius * sin(f32Angle);
00b2b8  e59d0084          LDR      r0,[sp,#0x84]
00b2bc  ebfffffe          BL       __aeabi_f2d
00b2c0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b2c4  ebfffffe          BL       ||sin||
00b2c8  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b2cc  e59d0040          LDR      r0,[sp,#0x40]
00b2d0  ebfffffe          BL       __aeabi_ui2d
00b2d4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b2d8  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b2dc  ebfffffe          BL       __aeabi_dmul
00b2e0  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b2e4  ebfffffe          BL       __aeabi_d2f
00b2e8  e58d0078          STR      r0,[sp,#0x78]
;;;5162   
;;;5163               stTrngl.stPt3.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00b2ec  e59d0090          LDR      r0,[sp,#0x90]
00b2f0  e1d000bc          LDRH     r0,[r0,#0xc]
00b2f4  e58d0034          STR      r0,[sp,#0x34]
00b2f8  ebfffffe          BL       __aeabi_ui2f
00b2fc  e58d0038          STR      r0,[sp,#0x38]
00b300  e59d107c          LDR      r1,[sp,#0x7c]
00b304  ebfffffe          BL       __aeabi_fadd
00b308  e58d003c          STR      r0,[sp,#0x3c]
00b30c  ebfffffe          BL       __aeabi_f2uiz
00b310  e6ff1070          UXTH     r1,r0
00b314  e1cd16b4          STRH     r1,[sp,#0x64]
;;;5164               stTrngl.stPt3.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00b318  e59d0090          LDR      r0,[sp,#0x90]
00b31c  e1d000be          LDRH     r0,[r0,#0xe]
00b320  e58d0034          STR      r0,[sp,#0x34]
00b324  ebfffffe          BL       __aeabi_ui2f
00b328  e58d0038          STR      r0,[sp,#0x38]
00b32c  e59d1078          LDR      r1,[sp,#0x78]
00b330  ebfffffe          BL       __aeabi_fsub
00b334  e58d003c          STR      r0,[sp,#0x3c]
00b338  ebfffffe          BL       __aeabi_f2uiz
00b33c  e1cd06b6          STRH     r0,[sp,#0x66]
;;;5165   
;;;5166               vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00b340  e28d205c          ADD      r2,sp,#0x5c
00b344  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00b348  ebfffffe          BL       vGfBuffDrawTriangle
;;;5167   
;;;5168               stTrngl.stPt2.u16X = stTrngl.stPt3.u16X;
00b34c  e1dd16b4          LDRH     r1,[sp,#0x64]
00b350  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5169               stTrngl.stPt2.u16Y = stTrngl.stPt3.u16Y;
00b354  e1dd06b6          LDRH     r0,[sp,#0x66]
00b358  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5170   
;;;5171               f32Angle += f32AngleDelta;
00b35c  e59d0084          LDR      r0,[sp,#0x84]
00b360  e59d1080          LDR      r1,[sp,#0x80]
00b364  ebfffffe          BL       __aeabi_fadd
00b368  e58d0084          STR      r0,[sp,#0x84]
00b36c  e59d0044          LDR      r0,[sp,#0x44]         ;5158
00b370  e2800001          ADD      r0,r0,#1              ;5158
00b374  e6ff0070          UXTH     r0,r0                 ;5158
00b378  e58d0044          STR      r0,[sp,#0x44]         ;5158
                  |L1.45948|
00b37c  e59d0048          LDR      r0,[sp,#0x48]         ;5158
00b380  e59d1044          LDR      r1,[sp,#0x44]         ;5158
00b384  e1510080          CMP      r1,r0,LSL #1          ;5158
00b388  8a00000d          BHI      |L1.46020|
00b38c  e59d0084          LDR      r0,[sp,#0x84]         ;5158
00b390  ebfffffe          BL       __aeabi_f2d
00b394  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5158
00b398  e59f27ac          LDR      r2,|L1.47948|
00b39c  e59f37b8          LDR      r3,|L1.47964|
00b3a0  ebfffffe          BL       __aeabi_cdcmple
00b3a4  2a000006          BCS      |L1.46020|
00b3a8  e59d0084          LDR      r0,[sp,#0x84]         ;5158
00b3ac  ebfffffe          BL       __aeabi_f2d
00b3b0  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5158
00b3b4  e59f2790          LDR      r2,|L1.47948|
00b3b8  e59f3790          LDR      r3,|L1.47952|
00b3bc  ebfffffe          BL       __aeabi_cdrcmple
00b3c0  3affffaf          BCC      |L1.45700|
                  |L1.46020|
;;;5172           }
;;;5173           /* AA and co-ordinate arrangements for last triangle to complete the circle */
;;;5174           /* Last triangle of 4th quadrant and first triangle of 1st quadrant are drawn as single triangle
;;;5175              to avoid overlap between two triangles  */
;;;5176           f32PosX = u16Radius * cos(f32AngleDelta);
00b3c4  e59d0080          LDR      r0,[sp,#0x80]
00b3c8  ebfffffe          BL       __aeabi_f2d
00b3cc  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b3d0  ebfffffe          BL       ||cos||
00b3d4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b3d8  e59d0040          LDR      r0,[sp,#0x40]
00b3dc  ebfffffe          BL       __aeabi_ui2d
00b3e0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b3e4  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b3e8  ebfffffe          BL       __aeabi_dmul
00b3ec  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b3f0  ebfffffe          BL       __aeabi_d2f
00b3f4  e58d007c          STR      r0,[sp,#0x7c]
;;;5177           f32PosY = u16Radius * sin(f32AngleDelta);
00b3f8  e59d0080          LDR      r0,[sp,#0x80]
00b3fc  ebfffffe          BL       __aeabi_f2d
00b400  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b404  ebfffffe          BL       ||sin||
00b408  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b40c  e59d0040          LDR      r0,[sp,#0x40]
00b410  ebfffffe          BL       __aeabi_ui2d
00b414  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b418  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00b41c  ebfffffe          BL       __aeabi_dmul
00b420  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b424  ebfffffe          BL       __aeabi_d2f
00b428  e58d0078          STR      r0,[sp,#0x78]
;;;5178           
;;;5179           stTrngl.stPt1.u16X = (uint16_t)(pstCircle->stCenter.u16X + f32PosX);
00b42c  e59d0090          LDR      r0,[sp,#0x90]
00b430  e1d000bc          LDRH     r0,[r0,#0xc]
00b434  e58d0034          STR      r0,[sp,#0x34]
00b438  ebfffffe          BL       __aeabi_ui2f
00b43c  e58d0038          STR      r0,[sp,#0x38]
00b440  e59d107c          LDR      r1,[sp,#0x7c]
00b444  ebfffffe          BL       __aeabi_fadd
00b448  e58d003c          STR      r0,[sp,#0x3c]
00b44c  ebfffffe          BL       __aeabi_f2uiz
00b450  e6ff1070          UXTH     r1,r0
00b454  e1cd15bc          STRH     r1,[sp,#0x5c]
;;;5180           stTrngl.stPt1.u16Y = (uint16_t)(pstCircle->stCenter.u16Y - f32PosY);
00b458  e59d0090          LDR      r0,[sp,#0x90]
00b45c  e1d000be          LDRH     r0,[r0,#0xe]
00b460  e58d0034          STR      r0,[sp,#0x34]
00b464  ebfffffe          BL       __aeabi_ui2f
00b468  e58d0038          STR      r0,[sp,#0x38]
00b46c  e59d1078          LDR      r1,[sp,#0x78]
00b470  ebfffffe          BL       __aeabi_fsub
00b474  e58d003c          STR      r0,[sp,#0x3c]
00b478  ebfffffe          BL       __aeabi_f2uiz
00b47c  e6ff1070          UXTH     r1,r0
00b480  e1cd15be          STRH     r1,[sp,#0x5e]
;;;5181   
;;;5182           stTrngl.stPt2.u16X = pstCircle->stCenter.u16X;
00b484  e59d0090          LDR      r0,[sp,#0x90]
00b488  e1d010bc          LDRH     r1,[r0,#0xc]
00b48c  e1cd16b0          STRH     r1,[sp,#0x60]
;;;5183           stTrngl.stPt2.u16Y = pstCircle->stCenter.u16Y;
00b490  e59d0090          LDR      r0,[sp,#0x90]
00b494  e1d000be          LDRH     r0,[r0,#0xe]
00b498  e1cd06b2          STRH     r0,[sp,#0x62]
;;;5184   
;;;5185           stTrngl.eAntialEn2 = GA_DIS;
00b49c  e3a00000          MOV      r0,#0
00b4a0  e5cd0069          STRB     r0,[sp,#0x69]
;;;5186           stTrngl.eAntialEn3 = pstCircle->eAntialEn;
00b4a4  e59d0090          LDR      r0,[sp,#0x90]
00b4a8  e5d00010          LDRB     r0,[r0,#0x10]
00b4ac  e5cd006a          STRB     r0,[sp,#0x6a]
;;;5187   
;;;5188           vGfBuffDrawTriangle(pstDstImage, pstOption, &stTrngl);
00b4b0  e28d205c          ADD      r2,sp,#0x5c
00b4b4  e1cd08d8          LDRD     r0,r1,[sp,#0x88]
00b4b8  ebfffffe          BL       vGfBuffDrawTriangle
                  |L1.46268|
;;;5189       }
;;;5190       /* Reset the Sub Resolution positions */
;;;5191       if(u32ResPPos == 1U)
00b4bc  e59d0058          LDR      r0,[sp,#0x58]
00b4c0  e3500001          CMP      r0,#1
00b4c4  1a000001          BNE      |L1.46288|
;;;5192       {
;;;5193           ePPos = GA_HIGH_RES;
00b4c8  e3a00001          MOV      r0,#1
00b4cc  e58d0050          STR      r0,[sp,#0x50]
                  |L1.46288|
;;;5194       }
;;;5195       if(u32ResCPos == 1U)
00b4d0  e59d0054          LDR      r0,[sp,#0x54]
00b4d4  e3500001          CMP      r0,#1
00b4d8  1a000001          BNE      |L1.46308|
;;;5196       {
;;;5197           eCPos = GA_HIGH_RES;
00b4dc  e3a00001          MOV      r0,#1
00b4e0  e58d004c          STR      r0,[sp,#0x4c]
                  |L1.46308|
;;;5198       }
;;;5199       vGfSetSubRes(ePPos, eCPos);
00b4e4  e59d0050          LDR      r0,[sp,#0x50]
00b4e8  e59d104c          LDR      r1,[sp,#0x4c]
00b4ec  ebfffffe          BL       vGfSetSubRes
;;;5200   }
00b4f0  e28dd094          ADD      sp,sp,#0x94
00b4f4  e49df004          POP      {pc}
;;;5201   
                          ENDP

                  vGfBuffDrawPolygon PROC
;;;5204   
;;;5205   void vGfBuffDrawPolygon(gf_image_st *pstDstImage, drw_OpCfg_st *pstOption, gf_polygon_st *pstPolygon)
00b4f8  e92d43f0          PUSH     {r4-r9,lr}
;;;5206   {
00b4fc  e24dd01c          SUB      sp,sp,#0x1c
00b500  e1a08000          MOV      r8,r0
00b504  e1a09001          MOV      r9,r1
00b508  e1a04002          MOV      r4,r2
;;;5207       drw_Trngl_st stTrngl;
;;;5208       uint16_t u16NumVert;
;;;5209       uint16_t u16Count;
;;;5210       uint8_t u8AAEdge;
;;;5211       
;;;5212       u16NumVert = pstPolygon->u16NumVert;
00b50c  e1d471b4          LDRH     r7,[r4,#0x14]
;;;5213       stTrngl.stColor = pstPolygon->stColor;
00b510  e2842008          ADD      r2,r4,#8
00b514  e8920007          LDM      r2,{r0-r2}
00b518  e28d3010          ADD      r3,sp,#0x10
00b51c  e8830007          STM      r3,{r0-r2}
;;;5214       
;;;5215       /* First co-ordinate will remain common for all triangles */
;;;5216       stTrngl.stPt1.u16X = pstPolygon->pstPolyVertex[0U].u16X;
00b520  e5940000          LDR      r0,[r4,#0]
00b524  e1d000b0          LDRH     r0,[r0,#0]
00b528  e1cd00b0          STRH     r0,[sp,#0]
;;;5217       stTrngl.stPt1.u16Y = pstPolygon->pstPolyVertex[0U].u16Y;
00b52c  e5940000          LDR      r0,[r4,#0]
00b530  e1d000b2          LDRH     r0,[r0,#2]
00b534  e1cd00b2          STRH     r0,[sp,#2]
;;;5218       
;;;5219       /* AAEdge1 will be enabled only for the first time */
;;;5220       u8AAEdge = (uint8_t)(pstPolygon->eAntialEn);
00b538  e5d46004          LDRB     r6,[r4,#4]
;;;5221       for(u16Count = 0U;u16Count < u16NumVert - 2U; u16Count++)
00b53c  e3a05000          MOV      r5,#0
00b540  ea000024          B        |L1.46552|
                  |L1.46404|
;;;5222       {
;;;5223           /* Values for second and third co-ordinate */
;;;5224           stTrngl.stPt2.u16X = pstPolygon->pstPolyVertex[u16Count + 1U].u16X;
00b544  e2851001          ADD      r1,r5,#1
00b548  e5940000          LDR      r0,[r4,#0]
00b54c  e0800101          ADD      r0,r0,r1,LSL #2
00b550  e1d000b0          LDRH     r0,[r0,#0]
00b554  e1cd00b4          STRH     r0,[sp,#4]
;;;5225           stTrngl.stPt2.u16Y = pstPolygon->pstPolyVertex[u16Count + 1U].u16Y;
00b558  e2851001          ADD      r1,r5,#1
00b55c  e5940000          LDR      r0,[r4,#0]
00b560  e0800101          ADD      r0,r0,r1,LSL #2
00b564  e1d000b2          LDRH     r0,[r0,#2]
00b568  e1cd00b6          STRH     r0,[sp,#6]
;;;5226   
;;;5227           stTrngl.stPt3.u16X = pstPolygon->pstPolyVertex[u16Count + 2U].u16X;
00b56c  e2851002          ADD      r1,r5,#2
00b570  e5940000          LDR      r0,[r4,#0]
00b574  e0800101          ADD      r0,r0,r1,LSL #2
00b578  e1d000b0          LDRH     r0,[r0,#0]
00b57c  e1cd00b8          STRH     r0,[sp,#8]
;;;5228           stTrngl.stPt3.u16Y = pstPolygon->pstPolyVertex[u16Count + 2U].u16Y;
00b580  e2851002          ADD      r1,r5,#2
00b584  e5940000          LDR      r0,[r4,#0]
00b588  e0800101          ADD      r0,r0,r1,LSL #2
00b58c  e1d000b2          LDRH     r0,[r0,#2]
00b590  e1cd00ba          STRH     r0,[sp,#0xa]
;;;5229   
;;;5230           /*
;;;5231            * Anti aliasing flag needs to enabled for all outer edges
;;;5232            * in the following conditions and the conditions needs to be 
;;;5233            * checked for all edges of the triangle.
;;;5234            * 1) The difference between the vertex index is equals to 1.
;;;5235            * 2) The difference between the vertex index is equals to (total number of polygon vertices-1)
;;;5236            *    for the last edge drawn to close the polygon should have AA enabled.
;;;5237            */
;;;5238           if(pstPolygon->eAntialEn == GA_EN)
00b594  e5d40004          LDRB     r0,[r4,#4]
00b598  e3500001          CMP      r0,#1
00b59c  1a000005          BNE      |L1.46520|
;;;5239           {
;;;5240               /* Edge2: Enable 2 bit (0010). Edge2 is always enabled */
;;;5241               u8AAEdge |= 2U;
00b5a0  e3866002          ORR      r6,r6,#2
;;;5242   
;;;5243               if((u16Count + 2U) == (u16NumVert - 1U))
00b5a4  e2470001          SUB      r0,r7,#1
00b5a8  e2851002          ADD      r1,r5,#2
00b5ac  e1500001          CMP      r0,r1
00b5b0  1a000000          BNE      |L1.46520|
;;;5244               {
;;;5245                   /* Edge3: Enable 3 bit (0100)*/
;;;5246                   u8AAEdge |= 4U;
00b5b4  e3866004          ORR      r6,r6,#4
                  |L1.46520|
;;;5247               }
;;;5248           }
;;;5249           
;;;5250           /* Sorting function to sort the co-ordinates in anticlockwise direction and AntiAliasing edge
;;;5251              and then draw the triangle */
;;;5252           vGfDrawTriangleSort(pstDstImage, pstOption, &stTrngl, u8AAEdge);
00b5b8  e1a03006          MOV      r3,r6
00b5bc  e1a0200d          MOV      r2,sp
00b5c0  e1a01009          MOV      r1,r9
00b5c4  e1a00008          MOV      r0,r8
00b5c8  ebfffffe          BL       vGfDrawTriangleSort
;;;5253           /*Reset AA settings */
;;;5254           u8AAEdge = 0U;
00b5cc  e3a06000          MOV      r6,#0
00b5d0  e2850001          ADD      r0,r5,#1              ;5221
00b5d4  e6ff5070          UXTH     r5,r0                 ;5221
                  |L1.46552|
00b5d8  e2470002          SUB      r0,r7,#2              ;5221
00b5dc  e1500005          CMP      r0,r5                 ;5221
00b5e0  8affffd7          BHI      |L1.46404|
;;;5255       }
;;;5256   }
00b5e4  e28dd01c          ADD      sp,sp,#0x1c
00b5e8  e8bd83f0          POP      {r4-r9,pc}
;;;5257   
                          ENDP

                  vGfInsertList PROC
;;;5260   
;;;5261   void vGfInsertList(uint64_t * pu64Values, uint32_t u32Length)
00b5ec  e92d41f0          PUSH     {r4-r8,lr}
;;;5262   {
00b5f0  e1a06000          MOV      r6,r0
00b5f4  e1a07001          MOV      r7,r1
;;;5263       uint32_t u32Curr;
;;;5264       ga_list_st * pstCmdList;
;;;5265       uint64_t   * pu64Curr;
;;;5266   
;;;5267       /* get pointer to write list */
;;;5268       pstCmdList = pstGfListGetWrite();
00b5f8  ebfffffe          BL       pstGfListGetWrite
00b5fc  e1a05000          MOV      r5,r0
;;;5269   
;;;5270       /* Update Pointer */
;;;5271       pu64Curr = (uint64_t*) pstCmdList->pu64Current;
00b600  e3040000          MOVW     r0,#0x4000
00b604  e7908005          LDR      r8,[r0,r5]
;;;5272   
;;;5273       /* fill list */
;;;5274       for(u32Curr=0; u32Curr<u32Length; u32Curr++)
00b608  e3a04000          MOV      r4,#0
00b60c  ea000004          B        |L1.46628|
                  |L1.46608|
;;;5275       {
;;;5276           pu64Curr[u32Curr] = *(pu64Values + u32Curr);
00b610  e0861184          ADD      r1,r6,r4,LSL #3
00b614  e1c100d0          LDRD     r0,r1,[r1,#0]
00b618  e0882184          ADD      r2,r8,r4,LSL #3
00b61c  e1c200f0          STRD     r0,r1,[r2,#0]
00b620  e2844001          ADD      r4,r4,#1              ;5274
                  |L1.46628|
00b624  e1540007          CMP      r4,r7                 ;5274
00b628  3afffff8          BCC      |L1.46608|
;;;5277       }
;;;5278   
;;;5279       /* Update List Pointer */
;;;5280       pstCmdList->pu64Current = &pu64Curr[u32Curr];
00b62c  e0880184          ADD      r0,r8,r4,LSL #3
00b630  e3041000          MOVW     r1,#0x4000
00b634  e7810005          STR      r0,[r1,r5]
;;;5281   
;;;5282       pstCmdList->u32UsedDoubleWords = u32Curr;
00b638  e3040004          MOV      r0,#0x4004
00b63c  e7804005          STR      r4,[r0,r5]
;;;5283   }
00b640  e8bd81f0          POP      {r4-r8,pc}
;;;5284   
                          ENDP

                  f64GETMATRIX PROC
;;;5287   
;;;5288   static float64_t* f64GETMATRIX(void)
00b644  e59f1514          LDR      r1,|L1.47968|
;;;5289   {
;;;5290       float64_t * matrix;
;;;5291   
;;;5292       switch (matrixmode)
00b648  e5d11000          LDRB     r1,[r1,#0]  ; matrixmode
00b64c  e3510000          CMP      r1,#0
00b650  0a000004          BEQ      |L1.46696|
00b654  e3510001          CMP      r1,#1
00b658  0a000005          BEQ      |L1.46708|
00b65c  e3510002          CMP      r1,#2
00b660  1a000009          BNE      |L1.46732|
00b664  ea000005          B        |L1.46720|
                  |L1.46696|
;;;5293       {
;;;5294           case GA_RE_PROJECTION:
00b668  e320f000          NOP      
;;;5295               matrix = ((float64_t*)projection);
00b66c  e59f04f0          LDR      r0,|L1.47972|
;;;5296               break;
00b670  ea000005          B        |L1.46732|
                  |L1.46708|
;;;5297           case GA_RE_MODELVIEW:
00b674  e320f000          NOP      
;;;5298               matrix = ((float64_t*)modelview);
00b678  e59f04e8          LDR      r0,|L1.47976|
;;;5299               break;
00b67c  ea000002          B        |L1.46732|
                  |L1.46720|
;;;5300           case GA_RE_IP:
00b680  e320f000          NOP      
;;;5301               matrix = ((float64_t*)ip);
00b684  e59f04e0          LDR      r0,|L1.47980|
;;;5302               break;
00b688  e320f000          NOP      
                  |L1.46732|
00b68c  e320f000          NOP                            ;5296
;;;5303       }
;;;5304   
;;;5305       return matrix;
;;;5306   }
00b690  e12fff1e          BX       lr
;;;5307   
                          ENDP

                  vMMMUL4x4 PROC
;;;5310   
;;;5311   static void vMMMUL4x4(float64_t* r, float64_t* a, float64_t *b)
00b694  e92d4007          PUSH     {r0-r2,lr}
;;;5312   {
00b698  e24dd0c8          SUB      sp,sp,#0xc8
;;;5313       float64_t n[16];
;;;5314       uint32_t  i;
;;;5315   
;;;5316       n[0] = a[0]*b[0] + a[4]*b[1] + a[8]*b[2]  + a[12]*b[3];
00b69c  e59d10d0          LDR      r1,[sp,#0xd0]
00b6a0  e1c101d8          LDRD     r0,r1,[r1,#0x18]
00b6a4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b6a8  e59d10cc          LDR      r1,[sp,#0xcc]
00b6ac  e1c106d0          LDRD     r0,r1,[r1,#0x60]
00b6b0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b6b4  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b6b8  ebfffffe          BL       __aeabi_dmul
00b6bc  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b6c0  e59d10d0          LDR      r1,[sp,#0xd0]
00b6c4  e1c101d0          LDRD     r0,r1,[r1,#0x10]
00b6c8  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b6cc  e59d10cc          LDR      r1,[sp,#0xcc]
00b6d0  e1c104d0          LDRD     r0,r1,[r1,#0x40]
00b6d4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b6d8  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b6dc  ebfffffe          BL       __aeabi_dmul
00b6e0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b6e4  e59d00d0          LDR      r0,[sp,#0xd0]
00b6e8  e1c000d8          LDRD     r0,r1,[r0,#8]
00b6ec  e1cd00f8          STRD     r0,r1,[sp,#8]
00b6f0  e59d00cc          LDR      r0,[sp,#0xcc]
00b6f4  e1c002d0          LDRD     r0,r1,[r0,#0x20]
00b6f8  e1cd00f0          STRD     r0,r1,[sp,#0]
00b6fc  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b700  ebfffffe          BL       __aeabi_dmul
00b704  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b708  e59d00d0          LDR      r0,[sp,#0xd0]
00b70c  e1c000d0          LDRD     r0,r1,[r0,#0]
00b710  e1cd00f8          STRD     r0,r1,[sp,#8]
00b714  e59d00cc          LDR      r0,[sp,#0xcc]
00b718  e1c000d0          LDRD     r0,r1,[r0,#0]
00b71c  e1cd00f0          STRD     r0,r1,[sp,#0]
00b720  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b724  ebfffffe          BL       __aeabi_dmul
00b728  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b72c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b730  ebfffffe          BL       __aeabi_dadd
00b734  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b738  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b73c  ebfffffe          BL       __aeabi_dadd
00b740  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b744  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00b748  ebfffffe          BL       __aeabi_dadd
00b74c  e1cd04f8          STRD     r0,r1,[sp,#0x48]
;;;5317       n[1] = a[1]*b[0] + a[5]*b[1] + a[9]*b[2]  + a[13]*b[3];
00b750  e59d10d0          LDR      r1,[sp,#0xd0]
00b754  e1c101d8          LDRD     r0,r1,[r1,#0x18]
00b758  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b75c  e59d00cc          LDR      r0,[sp,#0xcc]
00b760  e1c006d8          LDRD     r0,r1,[r0,#0x68]
00b764  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b768  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b76c  ebfffffe          BL       __aeabi_dmul
00b770  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b774  e59d00d0          LDR      r0,[sp,#0xd0]
00b778  e1c001d0          LDRD     r0,r1,[r0,#0x10]
00b77c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b780  e59d10cc          LDR      r1,[sp,#0xcc]
00b784  e1c104d8          LDRD     r0,r1,[r1,#0x48]
00b788  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b78c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b790  ebfffffe          BL       __aeabi_dmul
00b794  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b798  e59d00d0          LDR      r0,[sp,#0xd0]
00b79c  e1c000d8          LDRD     r0,r1,[r0,#8]
00b7a0  e1cd00f8          STRD     r0,r1,[sp,#8]
00b7a4  e59d00cc          LDR      r0,[sp,#0xcc]
00b7a8  e1c002d8          LDRD     r0,r1,[r0,#0x28]
00b7ac  e1cd00f0          STRD     r0,r1,[sp,#0]
00b7b0  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b7b4  ebfffffe          BL       __aeabi_dmul
00b7b8  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b7bc  e59d00d0          LDR      r0,[sp,#0xd0]
00b7c0  e1c000d0          LDRD     r0,r1,[r0,#0]
00b7c4  e1cd00f8          STRD     r0,r1,[sp,#8]
00b7c8  e59d10cc          LDR      r1,[sp,#0xcc]
00b7cc  e1c100d8          LDRD     r0,r1,[r1,#8]
00b7d0  e1cd00f0          STRD     r0,r1,[sp,#0]
00b7d4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b7d8  ebfffffe          BL       __aeabi_dmul
00b7dc  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b7e0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b7e4  ebfffffe          BL       __aeabi_dadd
00b7e8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b7ec  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b7f0  ebfffffe          BL       __aeabi_dadd
00b7f4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b7f8  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00b7fc  ebfffffe          BL       __aeabi_dadd
00b800  e1cd05f0          STRD     r0,r1,[sp,#0x50]
;;;5318       n[2] = a[2]*b[0] + a[6]*b[1] + a[10]*b[2] + a[14]*b[3];
00b804  e59d00d0          LDR      r0,[sp,#0xd0]
00b808  e1c001d8          LDRD     r0,r1,[r0,#0x18]
00b80c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b810  e59d10cc          LDR      r1,[sp,#0xcc]
00b814  e1c107d0          LDRD     r0,r1,[r1,#0x70]
00b818  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b81c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b820  ebfffffe          BL       __aeabi_dmul
00b824  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b828  e59d10d0          LDR      r1,[sp,#0xd0]
00b82c  e1c101d0          LDRD     r0,r1,[r1,#0x10]
00b830  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b834  e59d00cc          LDR      r0,[sp,#0xcc]
00b838  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00b83c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b840  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b844  ebfffffe          BL       __aeabi_dmul
00b848  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b84c  e59d00d0          LDR      r0,[sp,#0xd0]
00b850  e1c000d8          LDRD     r0,r1,[r0,#8]
00b854  e1cd00f8          STRD     r0,r1,[sp,#8]
00b858  e59d10cc          LDR      r1,[sp,#0xcc]
00b85c  e1c103d0          LDRD     r0,r1,[r1,#0x30]
00b860  e1cd00f0          STRD     r0,r1,[sp,#0]
00b864  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b868  ebfffffe          BL       __aeabi_dmul
00b86c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b870  e59d00d0          LDR      r0,[sp,#0xd0]
00b874  e8900006          LDM      r0,{r1,r2}
00b878  e1a00001          MOV      r0,r1
00b87c  e58d0008          STR      r0,[sp,#8]
00b880  e58d200c          STR      r2,[sp,#0xc]
00b884  e59d00cc          LDR      r0,[sp,#0xcc]
00b888  e1c001d0          LDRD     r0,r1,[r0,#0x10]
00b88c  e1cd00f0          STRD     r0,r1,[sp,#0]
00b890  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b894  ebfffffe          BL       __aeabi_dmul
00b898  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b89c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b8a0  ebfffffe          BL       __aeabi_dadd
00b8a4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b8a8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b8ac  ebfffffe          BL       __aeabi_dadd
00b8b0  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b8b4  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00b8b8  ebfffffe          BL       __aeabi_dadd
00b8bc  e1cd05f8          STRD     r0,r1,[sp,#0x58]
;;;5319       n[3] = a[3]*b[0] + a[7]*b[1] + a[11]*b[2] + a[15]*b[3];
00b8c0  e59d10d0          LDR      r1,[sp,#0xd0]
00b8c4  e1c101d8          LDRD     r0,r1,[r1,#0x18]
00b8c8  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b8cc  e59d10cc          LDR      r1,[sp,#0xcc]
00b8d0  e1c107d8          LDRD     r0,r1,[r1,#0x78]
00b8d4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b8d8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b8dc  ebfffffe          BL       __aeabi_dmul
00b8e0  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b8e4  e59d10d0          LDR      r1,[sp,#0xd0]
00b8e8  e1c101d0          LDRD     r0,r1,[r1,#0x10]
00b8ec  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b8f0  e59d10cc          LDR      r1,[sp,#0xcc]
00b8f4  e1c105d8          LDRD     r0,r1,[r1,#0x58]
00b8f8  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b8fc  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b900  ebfffffe          BL       __aeabi_dmul
00b904  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b908  e59d00d0          LDR      r0,[sp,#0xd0]
00b90c  e1c000d8          LDRD     r0,r1,[r0,#8]
00b910  e1cd00f8          STRD     r0,r1,[sp,#8]
00b914  e59d10cc          LDR      r1,[sp,#0xcc]
00b918  e1c103d8          LDRD     r0,r1,[r1,#0x38]
00b91c  e1cd00f0          STRD     r0,r1,[sp,#0]
00b920  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b924  ebfffffe          BL       __aeabi_dmul
00b928  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b92c  e59d00d0          LDR      r0,[sp,#0xd0]
00b930  e1c000d0          LDRD     r0,r1,[r0,#0]
00b934  e1cd00f8          STRD     r0,r1,[sp,#8]
00b938  e59d10cc          LDR      r1,[sp,#0xcc]
00b93c  e1c101d8          LDRD     r0,r1,[r1,#0x18]
00b940  e1cd00f0          STRD     r0,r1,[sp,#0]
00b944  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b948  ebfffffe          BL       __aeabi_dmul
00b94c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b950  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b954  ebfffffe          BL       __aeabi_dadd
00b958  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b95c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b960  ebfffffe          BL       __aeabi_dadd
00b964  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00b968  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00b96c  ebfffffe          BL       __aeabi_dadd
00b970  e1cd06f0          STRD     r0,r1,[sp,#0x60]
;;;5320   
;;;5321       n[4] = a[0]*b[4] + a[4]*b[5] + a[8]*b[6]  + a[12]*b[7];
00b974  e59d10d0          LDR      r1,[sp,#0xd0]
00b978  e1c103d8          LDRD     r0,r1,[r1,#0x38]
00b97c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b980  e59d10cc          LDR      r1,[sp,#0xcc]
00b984  e1c106d0          LDRD     r0,r1,[r1,#0x60]
00b988  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00b98c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00b990  ebfffffe          BL       __aeabi_dmul
00b994  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00b998  e59d00d0          LDR      r0,[sp,#0xd0]
00b99c  e1c003d0          LDRD     r0,r1,[r0,#0x30]
00b9a0  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b9a4  e59d10cc          LDR      r1,[sp,#0xcc]
00b9a8  e1c104d0          LDRD     r0,r1,[r1,#0x40]
00b9ac  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00b9b0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00b9b4  ebfffffe          BL       __aeabi_dmul
00b9b8  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00b9bc  e59d00d0          LDR      r0,[sp,#0xd0]
00b9c0  e1c002d8          LDRD     r0,r1,[r0,#0x28]
00b9c4  e1cd00f8          STRD     r0,r1,[sp,#8]
00b9c8  e59d00cc          LDR      r0,[sp,#0xcc]
00b9cc  e1c002d0          LDRD     r0,r1,[r0,#0x20]
00b9d0  e1cd00f0          STRD     r0,r1,[sp,#0]
00b9d4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b9d8  ebfffffe          BL       __aeabi_dmul
00b9dc  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00b9e0  e59d00d0          LDR      r0,[sp,#0xd0]
00b9e4  e1c002d0          LDRD     r0,r1,[r0,#0x20]
00b9e8  e1cd00f8          STRD     r0,r1,[sp,#8]
00b9ec  e59d00cc          LDR      r0,[sp,#0xcc]
00b9f0  e1c000d0          LDRD     r0,r1,[r0,#0]
00b9f4  e1cd00f0          STRD     r0,r1,[sp,#0]
00b9f8  e1cd20d8          LDRD     r2,r3,[sp,#8]
00b9fc  ebfffffe          BL       __aeabi_dmul
00ba00  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00ba04  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00ba08  ebfffffe          BL       __aeabi_dadd
00ba0c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ba10  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00ba14  ebfffffe          BL       __aeabi_dadd
00ba18  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00ba1c  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00ba20  ebfffffe          BL       __aeabi_dadd
00ba24  e1cd06f8          STRD     r0,r1,[sp,#0x68]
;;;5322       n[5] = a[1]*b[4] + a[5]*b[5] + a[9]*b[6]  + a[13]*b[7];
00ba28  e59d00d0          LDR      r0,[sp,#0xd0]
00ba2c  e1c003d8          LDRD     r0,r1,[r0,#0x38]
00ba30  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ba34  e59d00cc          LDR      r0,[sp,#0xcc]
00ba38  e1c006d8          LDRD     r0,r1,[r0,#0x68]
00ba3c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00ba40  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00ba44  ebfffffe          BL       __aeabi_dmul
00ba48  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00ba4c  e59d10d0          LDR      r1,[sp,#0xd0]
00ba50  e1c103d0          LDRD     r0,r1,[r1,#0x30]
00ba54  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00ba58  e59d00cc          LDR      r0,[sp,#0xcc]
00ba5c  e1c004d8          LDRD     r0,r1,[r0,#0x48]
00ba60  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00ba64  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00ba68  ebfffffe          BL       __aeabi_dmul
00ba6c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00ba70  e59d00d0          LDR      r0,[sp,#0xd0]
00ba74  e1c002d8          LDRD     r0,r1,[r0,#0x28]
00ba78  e1cd00f8          STRD     r0,r1,[sp,#8]
00ba7c  e59d00cc          LDR      r0,[sp,#0xcc]
00ba80  e5901028          LDR      r1,[r0,#0x28]
00ba84  e590202c          LDR      r2,[r0,#0x2c]
00ba88  e1a00001          MOV      r0,r1
00ba8c  e88d0005          STM      sp,{r0,r2}
00ba90  e99d000e          LDMIB    sp,{r1-r3}
00ba94  ebfffffe          BL       __aeabi_dmul
00ba98  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00ba9c  e59d00d0          LDR      r0,[sp,#0xd0]
00baa0  e5901020          LDR      r1,[r0,#0x20]
00baa4  e5902024          LDR      r2,[r0,#0x24]
00baa8  e58d1008          STR      r1,[sp,#8]
00baac  e58d200c          STR      r2,[sp,#0xc]
00bab0  e59d00cc          LDR      r0,[sp,#0xcc]
00bab4  e1c000d8          LDRD     r0,r1,[r0,#8]
00bab8  e1cd00f0          STRD     r0,r1,[sp,#0]
00babc  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bac0  ebfffffe          BL       __aeabi_dmul
00bac4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bac8  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bacc  ebfffffe          BL       __aeabi_dadd
00bad0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bad4  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bad8  ebfffffe          BL       __aeabi_dadd
00badc  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00bae0  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bae4  ebfffffe          BL       __aeabi_dadd
00bae8  e1cd07f0          STRD     r0,r1,[sp,#0x70]
;;;5323       n[6] = a[2]*b[4] + a[6]*b[5] + a[10]*b[6] + a[14]*b[7];
00baec  e59d10d0          LDR      r1,[sp,#0xd0]
00baf0  e1c103d8          LDRD     r0,r1,[r1,#0x38]
00baf4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00baf8  e59d00cc          LDR      r0,[sp,#0xcc]
00bafc  e1c007d0          LDRD     r0,r1,[r0,#0x70]
00bb00  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bb04  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bb08  ebfffffe          BL       __aeabi_dmul
00bb0c  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00bb10  e59d00d0          LDR      r0,[sp,#0xd0]
00bb14  e1c003d0          LDRD     r0,r1,[r0,#0x30]
00bb18  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bb1c  e59d00cc          LDR      r0,[sp,#0xcc]
00bb20  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00bb24  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bb28  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bb2c  ebfffffe          BL       __aeabi_dmul
00bb30  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bb34  e59d00d0          LDR      r0,[sp,#0xd0]
00bb38  e1c002d8          LDRD     r0,r1,[r0,#0x28]
00bb3c  e1cd00f8          STRD     r0,r1,[sp,#8]
00bb40  e59d10cc          LDR      r1,[sp,#0xcc]
00bb44  e1c103d0          LDRD     r0,r1,[r1,#0x30]
00bb48  ea000008          B        |L1.47984|
                  |L1.47948|
                          DCD      0x54442d18
                  |L1.47952|
                          DCD      0x400921fb
                  |L1.47956|
                          DCD      0x54442d1a
                  |L1.47960|
                          DCD      0x3ff921fb
                  |L1.47964|
                          DCD      0x401921fb
                  |L1.47968|
                          DCD      matrixmode
                  |L1.47972|
                          DCD      projection
                  |L1.47976|
                          DCD      modelview
                  |L1.47980|
                          DCD      ||ip||
                  |L1.47984|
00bb70  e1cd00f0          STRD     r0,r1,[sp,#0]
00bb74  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bb78  ebfffffe          BL       __aeabi_dmul
00bb7c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bb80  e59d00d0          LDR      r0,[sp,#0xd0]
00bb84  e5901020          LDR      r1,[r0,#0x20]
00bb88  e5902024          LDR      r2,[r0,#0x24]
00bb8c  e1a00001          MOV      r0,r1
00bb90  e58d0008          STR      r0,[sp,#8]
00bb94  e58d200c          STR      r2,[sp,#0xc]
00bb98  e59d00cc          LDR      r0,[sp,#0xcc]
00bb9c  e5901010          LDR      r1,[r0,#0x10]
00bba0  e5902014          LDR      r2,[r0,#0x14]
00bba4  e1a00001          MOV      r0,r1
00bba8  e88d0005          STM      sp,{r0,r2}
00bbac  e99d000e          LDMIB    sp,{r1-r3}
00bbb0  ebfffffe          BL       __aeabi_dmul
00bbb4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bbb8  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bbbc  ebfffffe          BL       __aeabi_dadd
00bbc0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bbc4  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bbc8  ebfffffe          BL       __aeabi_dadd
00bbcc  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00bbd0  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bbd4  ebfffffe          BL       __aeabi_dadd
00bbd8  e1cd07f8          STRD     r0,r1,[sp,#0x78]
;;;5324       n[7] = a[3]*b[4] + a[7]*b[5] + a[11]*b[6] + a[15]*b[7];
00bbdc  e59d10d0          LDR      r1,[sp,#0xd0]
00bbe0  e1c103d8          LDRD     r0,r1,[r1,#0x38]
00bbe4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bbe8  e59d10cc          LDR      r1,[sp,#0xcc]
00bbec  e1c107d8          LDRD     r0,r1,[r1,#0x78]
00bbf0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bbf4  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bbf8  ebfffffe          BL       __aeabi_dmul
00bbfc  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00bc00  e59d10d0          LDR      r1,[sp,#0xd0]
00bc04  e1c103d0          LDRD     r0,r1,[r1,#0x30]
00bc08  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bc0c  e59d00cc          LDR      r0,[sp,#0xcc]
00bc10  e1c005d8          LDRD     r0,r1,[r0,#0x58]
00bc14  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bc18  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bc1c  ebfffffe          BL       __aeabi_dmul
00bc20  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bc24  e59d00d0          LDR      r0,[sp,#0xd0]
00bc28  e1c002d8          LDRD     r0,r1,[r0,#0x28]
00bc2c  e1cd00f8          STRD     r0,r1,[sp,#8]
00bc30  e59d00cc          LDR      r0,[sp,#0xcc]
00bc34  e1c003d8          LDRD     r0,r1,[r0,#0x38]
00bc38  e1cd00f0          STRD     r0,r1,[sp,#0]
00bc3c  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bc40  ebfffffe          BL       __aeabi_dmul
00bc44  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bc48  e59d10d0          LDR      r1,[sp,#0xd0]
00bc4c  e1c102d0          LDRD     r0,r1,[r1,#0x20]
00bc50  e1cd00f8          STRD     r0,r1,[sp,#8]
00bc54  e59d00cc          LDR      r0,[sp,#0xcc]
00bc58  e1c001d8          LDRD     r0,r1,[r0,#0x18]
00bc5c  e1cd00f0          STRD     r0,r1,[sp,#0]
00bc60  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bc64  ebfffffe          BL       __aeabi_dmul
00bc68  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bc6c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bc70  ebfffffe          BL       __aeabi_dadd
00bc74  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bc78  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bc7c  ebfffffe          BL       __aeabi_dadd
00bc80  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00bc84  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bc88  ebfffffe          BL       __aeabi_dadd
00bc8c  e1cd08f0          STRD     r0,r1,[sp,#0x80]
;;;5325   
;;;5326       n[8]  = a[0]*b[8] + a[4]*b[9] + a[8]*b[10]  + a[12]*b[11];
00bc90  e59d00d0          LDR      r0,[sp,#0xd0]
00bc94  e1c005d8          LDRD     r0,r1,[r0,#0x58]
00bc98  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bc9c  e59d10cc          LDR      r1,[sp,#0xcc]
00bca0  e1c106d0          LDRD     r0,r1,[r1,#0x60]
00bca4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bca8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bcac  ebfffffe          BL       __aeabi_dmul
00bcb0  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00bcb4  e59d00d0          LDR      r0,[sp,#0xd0]
00bcb8  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00bcbc  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bcc0  e59d00cc          LDR      r0,[sp,#0xcc]
00bcc4  e5901040          LDR      r1,[r0,#0x40]
00bcc8  e5902044          LDR      r2,[r0,#0x44]
00bccc  e1a00001          MOV      r0,r1
00bcd0  e58d0010          STR      r0,[sp,#0x10]
00bcd4  e58d2014          STR      r2,[sp,#0x14]
00bcd8  e28d3014          ADD      r3,sp,#0x14
00bcdc  e893000e          LDM      r3,{r1-r3}
00bce0  ebfffffe          BL       __aeabi_dmul
00bce4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bce8  e59d10d0          LDR      r1,[sp,#0xd0]
00bcec  e1c104d8          LDRD     r0,r1,[r1,#0x48]
00bcf0  e1cd00f8          STRD     r0,r1,[sp,#8]
00bcf4  e59d00cc          LDR      r0,[sp,#0xcc]
00bcf8  e5901020          LDR      r1,[r0,#0x20]
00bcfc  e5902024          LDR      r2,[r0,#0x24]
00bd00  e1a00001          MOV      r0,r1
00bd04  e88d0005          STM      sp,{r0,r2}
00bd08  e99d000e          LDMIB    sp,{r1-r3}
00bd0c  ebfffffe          BL       __aeabi_dmul
00bd10  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bd14  e59d10d0          LDR      r1,[sp,#0xd0]
00bd18  e1c104d0          LDRD     r0,r1,[r1,#0x40]
00bd1c  e1cd00f8          STRD     r0,r1,[sp,#8]
00bd20  e59d00cc          LDR      r0,[sp,#0xcc]
00bd24  e1c000d0          LDRD     r0,r1,[r0,#0]
00bd28  e1cd00f0          STRD     r0,r1,[sp,#0]
00bd2c  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bd30  ebfffffe          BL       __aeabi_dmul
00bd34  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bd38  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bd3c  ebfffffe          BL       __aeabi_dadd
00bd40  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bd44  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bd48  ebfffffe          BL       __aeabi_dadd
00bd4c  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00bd50  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bd54  ebfffffe          BL       __aeabi_dadd
00bd58  e1cd08f8          STRD     r0,r1,[sp,#0x88]
;;;5327       n[9]  = a[1]*b[8] + a[5]*b[9] + a[9]*b[10]  + a[13]*b[11];
00bd5c  e59d10d0          LDR      r1,[sp,#0xd0]
00bd60  e1c105d8          LDRD     r0,r1,[r1,#0x58]
00bd64  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bd68  e59d00cc          LDR      r0,[sp,#0xcc]
00bd6c  e1c006d8          LDRD     r0,r1,[r0,#0x68]
00bd70  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bd74  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bd78  ebfffffe          BL       __aeabi_dmul
00bd7c  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00bd80  e59d00d0          LDR      r0,[sp,#0xd0]
00bd84  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00bd88  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bd8c  e59d00cc          LDR      r0,[sp,#0xcc]
00bd90  e1c004d8          LDRD     r0,r1,[r0,#0x48]
00bd94  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bd98  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bd9c  ebfffffe          BL       __aeabi_dmul
00bda0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bda4  e59d00d0          LDR      r0,[sp,#0xd0]
00bda8  e5901048          LDR      r1,[r0,#0x48]
00bdac  e590204c          LDR      r2,[r0,#0x4c]
00bdb0  e1a00001          MOV      r0,r1
00bdb4  e58d0008          STR      r0,[sp,#8]
00bdb8  e58d200c          STR      r2,[sp,#0xc]
00bdbc  e59d00cc          LDR      r0,[sp,#0xcc]
00bdc0  e5901028          LDR      r1,[r0,#0x28]
00bdc4  e590202c          LDR      r2,[r0,#0x2c]
00bdc8  e1a00001          MOV      r0,r1
00bdcc  e88d0005          STM      sp,{r0,r2}
00bdd0  e99d000e          LDMIB    sp,{r1-r3}
00bdd4  ebfffffe          BL       __aeabi_dmul
00bdd8  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bddc  e59d00d0          LDR      r0,[sp,#0xd0]
00bde0  e1c004d0          LDRD     r0,r1,[r0,#0x40]
00bde4  e1cd00f8          STRD     r0,r1,[sp,#8]
00bde8  e59d00cc          LDR      r0,[sp,#0xcc]
00bdec  e1c000d8          LDRD     r0,r1,[r0,#8]
00bdf0  e1cd00f0          STRD     r0,r1,[sp,#0]
00bdf4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bdf8  ebfffffe          BL       __aeabi_dmul
00bdfc  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00be00  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00be04  ebfffffe          BL       __aeabi_dadd
00be08  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00be0c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00be10  ebfffffe          BL       __aeabi_dadd
00be14  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00be18  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00be1c  ebfffffe          BL       __aeabi_dadd
00be20  e1cd09f0          STRD     r0,r1,[sp,#0x90]
;;;5328       n[10] = a[2]*b[8] + a[6]*b[9] + a[10]*b[10] + a[14]*b[11];
00be24  e59d00d0          LDR      r0,[sp,#0xd0]
00be28  e1c005d8          LDRD     r0,r1,[r0,#0x58]
00be2c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00be30  e59d00cc          LDR      r0,[sp,#0xcc]
00be34  e1c007d0          LDRD     r0,r1,[r0,#0x70]
00be38  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00be3c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00be40  ebfffffe          BL       __aeabi_dmul
00be44  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00be48  e59d10d0          LDR      r1,[sp,#0xd0]
00be4c  e1c105d0          LDRD     r0,r1,[r1,#0x50]
00be50  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00be54  e59d00cc          LDR      r0,[sp,#0xcc]
00be58  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00be5c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00be60  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00be64  ebfffffe          BL       __aeabi_dmul
00be68  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00be6c  e59d00d0          LDR      r0,[sp,#0xd0]
00be70  e1c004d8          LDRD     r0,r1,[r0,#0x48]
00be74  e1cd00f8          STRD     r0,r1,[sp,#8]
00be78  e59d00cc          LDR      r0,[sp,#0xcc]
00be7c  e1c003d0          LDRD     r0,r1,[r0,#0x30]
00be80  e1cd00f0          STRD     r0,r1,[sp,#0]
00be84  e1cd20d8          LDRD     r2,r3,[sp,#8]
00be88  ebfffffe          BL       __aeabi_dmul
00be8c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00be90  e59d00d0          LDR      r0,[sp,#0xd0]
00be94  e1c004d0          LDRD     r0,r1,[r0,#0x40]
00be98  e1cd00f8          STRD     r0,r1,[sp,#8]
00be9c  e59d10cc          LDR      r1,[sp,#0xcc]
00bea0  e1c101d0          LDRD     r0,r1,[r1,#0x10]
00bea4  e1cd00f0          STRD     r0,r1,[sp,#0]
00bea8  e1cd20d8          LDRD     r2,r3,[sp,#8]
00beac  ebfffffe          BL       __aeabi_dmul
00beb0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00beb4  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00beb8  ebfffffe          BL       __aeabi_dadd
00bebc  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bec0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bec4  ebfffffe          BL       __aeabi_dadd
00bec8  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00becc  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bed0  ebfffffe          BL       __aeabi_dadd
00bed4  e1cd09f8          STRD     r0,r1,[sp,#0x98]
;;;5329       n[11] = a[3]*b[8] + a[7]*b[9] + a[11]*b[10] + a[15]*b[11];
00bed8  e59d10d0          LDR      r1,[sp,#0xd0]
00bedc  e1c105d8          LDRD     r0,r1,[r1,#0x58]
00bee0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bee4  e59d00cc          LDR      r0,[sp,#0xcc]
00bee8  e1c007d8          LDRD     r0,r1,[r0,#0x78]
00beec  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bef0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bef4  ebfffffe          BL       __aeabi_dmul
00bef8  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00befc  e59d00d0          LDR      r0,[sp,#0xd0]
00bf00  e1c005d0          LDRD     r0,r1,[r0,#0x50]
00bf04  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bf08  e59d00cc          LDR      r0,[sp,#0xcc]
00bf0c  e1c005d8          LDRD     r0,r1,[r0,#0x58]
00bf10  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bf14  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bf18  ebfffffe          BL       __aeabi_dmul
00bf1c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bf20  e59d00d0          LDR      r0,[sp,#0xd0]
00bf24  e1c004d8          LDRD     r0,r1,[r0,#0x48]
00bf28  e1cd00f8          STRD     r0,r1,[sp,#8]
00bf2c  e59d00cc          LDR      r0,[sp,#0xcc]
00bf30  e1c003d8          LDRD     r0,r1,[r0,#0x38]
00bf34  e1cd00f0          STRD     r0,r1,[sp,#0]
00bf38  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bf3c  ebfffffe          BL       __aeabi_dmul
00bf40  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bf44  e59d00d0          LDR      r0,[sp,#0xd0]
00bf48  e5901040          LDR      r1,[r0,#0x40]
00bf4c  e5902044          LDR      r2,[r0,#0x44]
00bf50  e1a00001          MOV      r0,r1
00bf54  e58d0008          STR      r0,[sp,#8]
00bf58  e58d200c          STR      r2,[sp,#0xc]
00bf5c  e59d00cc          LDR      r0,[sp,#0xcc]
00bf60  e1c001d8          LDRD     r0,r1,[r0,#0x18]
00bf64  e1cd00f0          STRD     r0,r1,[sp,#0]
00bf68  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bf6c  ebfffffe          BL       __aeabi_dmul
00bf70  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bf74  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bf78  ebfffffe          BL       __aeabi_dadd
00bf7c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bf80  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bf84  ebfffffe          BL       __aeabi_dadd
00bf88  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00bf8c  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00bf90  ebfffffe          BL       __aeabi_dadd
00bf94  e1cd0af0          STRD     r0,r1,[sp,#0xa0]
;;;5330   
;;;5331       n[12] = a[0]*b[12] + a[4]*b[13] + a[8]*b[14]  + a[12]*b[15];
00bf98  e59d10d0          LDR      r1,[sp,#0xd0]
00bf9c  e1c107d8          LDRD     r0,r1,[r1,#0x78]
00bfa0  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bfa4  e59d00cc          LDR      r0,[sp,#0xcc]
00bfa8  e1c006d0          LDRD     r0,r1,[r0,#0x60]
00bfac  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00bfb0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00bfb4  ebfffffe          BL       __aeabi_dmul
00bfb8  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00bfbc  e59d10d0          LDR      r1,[sp,#0xd0]
00bfc0  e1c107d0          LDRD     r0,r1,[r1,#0x70]
00bfc4  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00bfc8  e59d10cc          LDR      r1,[sp,#0xcc]
00bfcc  e1c104d0          LDRD     r0,r1,[r1,#0x40]
00bfd0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00bfd4  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00bfd8  ebfffffe          BL       __aeabi_dmul
00bfdc  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00bfe0  e59d10d0          LDR      r1,[sp,#0xd0]
00bfe4  e1c106d8          LDRD     r0,r1,[r1,#0x68]
00bfe8  e1cd00f8          STRD     r0,r1,[sp,#8]
00bfec  e59d10cc          LDR      r1,[sp,#0xcc]
00bff0  e1c102d0          LDRD     r0,r1,[r1,#0x20]
00bff4  e1cd00f0          STRD     r0,r1,[sp,#0]
00bff8  e1cd20d8          LDRD     r2,r3,[sp,#8]
00bffc  ebfffffe          BL       __aeabi_dmul
00c000  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c004  e59d00d0          LDR      r0,[sp,#0xd0]
00c008  e1c006d0          LDRD     r0,r1,[r0,#0x60]
00c00c  e1cd00f8          STRD     r0,r1,[sp,#8]
00c010  e59d00cc          LDR      r0,[sp,#0xcc]
00c014  e8900006          LDM      r0,{r1,r2}
00c018  e1a00001          MOV      r0,r1
00c01c  e88d0005          STM      sp,{r0,r2}
00c020  e99d000e          LDMIB    sp,{r1-r3}
00c024  ebfffffe          BL       __aeabi_dmul
00c028  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c02c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c030  ebfffffe          BL       __aeabi_dadd
00c034  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c038  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c03c  ebfffffe          BL       __aeabi_dadd
00c040  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00c044  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00c048  ebfffffe          BL       __aeabi_dadd
00c04c  e1cd0af8          STRD     r0,r1,[sp,#0xa8]
;;;5332       n[13] = a[1]*b[12] + a[5]*b[13] + a[9]*b[14]  + a[13]*b[15];
00c050  e59d10d0          LDR      r1,[sp,#0xd0]
00c054  e1c107d8          LDRD     r0,r1,[r1,#0x78]
00c058  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c05c  e59d00cc          LDR      r0,[sp,#0xcc]
00c060  e5901068          LDR      r1,[r0,#0x68]
00c064  e590206c          LDR      r2,[r0,#0x6c]
00c068  e1a00001          MOV      r0,r1
00c06c  e58d0020          STR      r0,[sp,#0x20]
00c070  e58d2024          STR      r2,[sp,#0x24]
00c074  e28d3024          ADD      r3,sp,#0x24
00c078  e893000e          LDM      r3,{r1-r3}
00c07c  ebfffffe          BL       __aeabi_dmul
00c080  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00c084  e59d00d0          LDR      r0,[sp,#0xd0]
00c088  e1c007d0          LDRD     r0,r1,[r0,#0x70]
00c08c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c090  e59d00cc          LDR      r0,[sp,#0xcc]
00c094  e1c004d8          LDRD     r0,r1,[r0,#0x48]
00c098  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c09c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c0a0  ebfffffe          BL       __aeabi_dmul
00c0a4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c0a8  e59d10d0          LDR      r1,[sp,#0xd0]
00c0ac  e1c106d8          LDRD     r0,r1,[r1,#0x68]
00c0b0  e1cd00f8          STRD     r0,r1,[sp,#8]
00c0b4  e59d00cc          LDR      r0,[sp,#0xcc]
00c0b8  e5901028          LDR      r1,[r0,#0x28]
00c0bc  e590202c          LDR      r2,[r0,#0x2c]
00c0c0  e1a00001          MOV      r0,r1
00c0c4  e88d0005          STM      sp,{r0,r2}
00c0c8  e99d000e          LDMIB    sp,{r1-r3}
00c0cc  ebfffffe          BL       __aeabi_dmul
00c0d0  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c0d4  e59d00d0          LDR      r0,[sp,#0xd0]
00c0d8  e5901060          LDR      r1,[r0,#0x60]
00c0dc  e5902064          LDR      r2,[r0,#0x64]
00c0e0  e1a00001          MOV      r0,r1
00c0e4  e58d0008          STR      r0,[sp,#8]
00c0e8  e58d200c          STR      r2,[sp,#0xc]
00c0ec  e59d00cc          LDR      r0,[sp,#0xcc]
00c0f0  e1c000d8          LDRD     r0,r1,[r0,#8]
00c0f4  e1cd00f0          STRD     r0,r1,[sp,#0]
00c0f8  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c0fc  ebfffffe          BL       __aeabi_dmul
00c100  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c104  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c108  ebfffffe          BL       __aeabi_dadd
00c10c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c110  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c114  ebfffffe          BL       __aeabi_dadd
00c118  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00c11c  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00c120  ebfffffe          BL       __aeabi_dadd
00c124  e1cd0bf0          STRD     r0,r1,[sp,#0xb0]
;;;5333       n[14] = a[2]*b[12] + a[6]*b[13] + a[10]*b[14] + a[14]*b[15];
00c128  e59d00d0          LDR      r0,[sp,#0xd0]
00c12c  e1c007d8          LDRD     r0,r1,[r0,#0x78]
00c130  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c134  e59d00cc          LDR      r0,[sp,#0xcc]
00c138  e1c007d0          LDRD     r0,r1,[r0,#0x70]
00c13c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c140  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c144  ebfffffe          BL       __aeabi_dmul
00c148  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00c14c  e59d00d0          LDR      r0,[sp,#0xd0]
00c150  e1c007d0          LDRD     r0,r1,[r0,#0x70]
00c154  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c158  e59d10cc          LDR      r1,[sp,#0xcc]
00c15c  e1c105d0          LDRD     r0,r1,[r1,#0x50]
00c160  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c164  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c168  ebfffffe          BL       __aeabi_dmul
00c16c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c170  e59d10d0          LDR      r1,[sp,#0xd0]
00c174  e1c106d8          LDRD     r0,r1,[r1,#0x68]
00c178  e1cd00f8          STRD     r0,r1,[sp,#8]
00c17c  e59d00cc          LDR      r0,[sp,#0xcc]
00c180  e1c003d0          LDRD     r0,r1,[r0,#0x30]
00c184  e1cd00f0          STRD     r0,r1,[sp,#0]
00c188  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c18c  ebfffffe          BL       __aeabi_dmul
00c190  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c194  e59d00d0          LDR      r0,[sp,#0xd0]
00c198  e5901060          LDR      r1,[r0,#0x60]
00c19c  e5902064          LDR      r2,[r0,#0x64]
00c1a0  e58d1008          STR      r1,[sp,#8]
00c1a4  e58d200c          STR      r2,[sp,#0xc]
00c1a8  e59d00cc          LDR      r0,[sp,#0xcc]
00c1ac  e1c001d0          LDRD     r0,r1,[r0,#0x10]
00c1b0  e1cd00f0          STRD     r0,r1,[sp,#0]
00c1b4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c1b8  ebfffffe          BL       __aeabi_dmul
00c1bc  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c1c0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c1c4  ebfffffe          BL       __aeabi_dadd
00c1c8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c1cc  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c1d0  ebfffffe          BL       __aeabi_dadd
00c1d4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00c1d8  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00c1dc  ebfffffe          BL       __aeabi_dadd
00c1e0  e1cd0bf8          STRD     r0,r1,[sp,#0xb8]
;;;5334       n[15] = a[3]*b[12] + a[7]*b[13] + a[11]*b[14] + a[15]*b[15];
00c1e4  e59d10d0          LDR      r1,[sp,#0xd0]
00c1e8  e1c107d8          LDRD     r0,r1,[r1,#0x78]
00c1ec  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c1f0  e59d00cc          LDR      r0,[sp,#0xcc]
00c1f4  e5901078          LDR      r1,[r0,#0x78]
00c1f8  e590207c          LDR      r2,[r0,#0x7c]
00c1fc  e1a00001          MOV      r0,r1
00c200  e58d0020          STR      r0,[sp,#0x20]
00c204  e58d2024          STR      r2,[sp,#0x24]
00c208  e28d3024          ADD      r3,sp,#0x24
00c20c  e893000e          LDM      r3,{r1-r3}
00c210  ebfffffe          BL       __aeabi_dmul
00c214  e1cd03f8          STRD     r0,r1,[sp,#0x38]
00c218  e59d00d0          LDR      r0,[sp,#0xd0]
00c21c  e5901070          LDR      r1,[r0,#0x70]
00c220  e5902074          LDR      r2,[r0,#0x74]
00c224  e1a00001          MOV      r0,r1
00c228  e58d0018          STR      r0,[sp,#0x18]
00c22c  e58d201c          STR      r2,[sp,#0x1c]
00c230  e59d00cc          LDR      r0,[sp,#0xcc]
00c234  e5901058          LDR      r1,[r0,#0x58]
00c238  e590205c          LDR      r2,[r0,#0x5c]
00c23c  e1a00001          MOV      r0,r1
00c240  e58d0010          STR      r0,[sp,#0x10]
00c244  e58d2014          STR      r2,[sp,#0x14]
00c248  e28d3014          ADD      r3,sp,#0x14
00c24c  e893000e          LDM      r3,{r1-r3}
00c250  ebfffffe          BL       __aeabi_dmul
00c254  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c258  e59d10d0          LDR      r1,[sp,#0xd0]
00c25c  e1c106d8          LDRD     r0,r1,[r1,#0x68]
00c260  e1cd00f8          STRD     r0,r1,[sp,#8]
00c264  e59d10cc          LDR      r1,[sp,#0xcc]
00c268  e1c103d8          LDRD     r0,r1,[r1,#0x38]
00c26c  e1cd00f0          STRD     r0,r1,[sp,#0]
00c270  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c274  ebfffffe          BL       __aeabi_dmul
00c278  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c27c  e59d10d0          LDR      r1,[sp,#0xd0]
00c280  e1c106d0          LDRD     r0,r1,[r1,#0x60]
00c284  e1cd00f8          STRD     r0,r1,[sp,#8]
00c288  e59d10cc          LDR      r1,[sp,#0xcc]
00c28c  e1c101d8          LDRD     r0,r1,[r1,#0x18]
00c290  e1cd00f0          STRD     r0,r1,[sp,#0]
00c294  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c298  ebfffffe          BL       __aeabi_dmul
00c29c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c2a0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c2a4  ebfffffe          BL       __aeabi_dadd
00c2a8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c2ac  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c2b0  ebfffffe          BL       __aeabi_dadd
00c2b4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
00c2b8  e1cd23d8          LDRD     r2,r3,[sp,#0x38]
00c2bc  ebfffffe          BL       __aeabi_dadd
00c2c0  e1cd0cf0          STRD     r0,r1,[sp,#0xc0]
;;;5335   
;;;5336       for (i=0; i<16; i++)
00c2c4  e3a00000          MOV      r0,#0
00c2c8  e58d0044          STR      r0,[sp,#0x44]
00c2cc  ea00000a          B        |L1.49916|
                  |L1.49872|
;;;5337       {
;;;5338           r[i] = n[i];
00c2d0  e28d1048          ADD      r1,sp,#0x48
00c2d4  e59d0044          LDR      r0,[sp,#0x44]
00c2d8  e0810180          ADD      r0,r1,r0,LSL #3
00c2dc  e8900006          LDM      r0,{r1,r2}
00c2e0  e59d0044          LDR      r0,[sp,#0x44]
00c2e4  e59d30c8          LDR      r3,[sp,#0xc8]
00c2e8  e0830180          ADD      r0,r3,r0,LSL #3
00c2ec  e8800006          STM      r0,{r1,r2}
00c2f0  e59d0044          LDR      r0,[sp,#0x44]         ;5336
00c2f4  e2801001          ADD      r1,r0,#1              ;5336
00c2f8  e58d1044          STR      r1,[sp,#0x44]         ;5336
                  |L1.49916|
00c2fc  e59d0044          LDR      r0,[sp,#0x44]         ;5336
00c300  e3500010          CMP      r0,#0x10              ;5336
00c304  3afffff1          BCC      |L1.49872|
;;;5339       }
;;;5340   }
00c308  e28dd0d4          ADD      sp,sp,#0xd4
00c30c  e49df004          POP      {pc}
;;;5341   
                          ENDP

                  vMVMUL4x4 PROC
;;;5344   
;;;5345   static void vMVMUL4x4(float64_t* r, float64_t* m, float64_t* v)
00c310  e92d4ff0          PUSH     {r4-r11,lr}
;;;5346   {
00c314  e24dd054          SUB      sp,sp,#0x54
00c318  e1a09000          MOV      r9,r0
00c31c  e1a04001          MOV      r4,r1
00c320  e1a05002          MOV      r5,r2
;;;5347       float64_t n[4];
;;;5348       uint32_t i;
;;;5349   
;;;5350       n[0] = m[0]*v[0] + m[4]*v[1] + m[8]*v[2]  + m[12]*v[3];
00c324  e595301c          LDR      r3,[r5,#0x1c]
00c328  e5957018          LDR      r7,[r5,#0x18]
00c32c  e1a02007          MOV      r2,r7
00c330  e594a060          LDR      r10,[r4,#0x60]
00c334  e1a0000a          MOV      r0,r10
00c338  e5941064          LDR      r1,[r4,#0x64]
00c33c  ebfffffe          BL       __aeabi_dmul
00c340  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c344  e5953014          LDR      r3,[r5,#0x14]
00c348  e5957010          LDR      r7,[r5,#0x10]
00c34c  e1a02007          MOV      r2,r7
00c350  e594a040          LDR      r10,[r4,#0x40]
00c354  e1a0000a          MOV      r0,r10
00c358  e5941044          LDR      r1,[r4,#0x44]
00c35c  ebfffffe          BL       __aeabi_dmul
00c360  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c364  e595300c          LDR      r3,[r5,#0xc]
00c368  e595a008          LDR      r10,[r5,#8]
00c36c  e1a0200a          MOV      r2,r10
00c370  e5947020          LDR      r7,[r4,#0x20]
00c374  e1a00007          MOV      r0,r7
00c378  e5941024          LDR      r1,[r4,#0x24]
00c37c  ebfffffe          BL       __aeabi_dmul
00c380  e1cd00f8          STRD     r0,r1,[sp,#8]
00c384  e5953004          LDR      r3,[r5,#4]
00c388  e595a000          LDR      r10,[r5,#0]
00c38c  e1a0200a          MOV      r2,r10
00c390  e5947000          LDR      r7,[r4,#0]
00c394  e1a00007          MOV      r0,r7
00c398  e5941004          LDR      r1,[r4,#4]
00c39c  ebfffffe          BL       __aeabi_dmul
00c3a0  e1cd00f0          STRD     r0,r1,[sp,#0]
00c3a4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c3a8  ebfffffe          BL       __aeabi_dadd
00c3ac  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c3b0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c3b4  ebfffffe          BL       __aeabi_dadd
00c3b8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c3bc  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c3c0  ebfffffe          BL       __aeabi_dadd
00c3c4  e1cd03f0          STRD     r0,r1,[sp,#0x30]
;;;5351       n[1] = m[1]*v[0] + m[5]*v[1] + m[9]*v[2]  + m[13]*v[3];
00c3c8  e595301c          LDR      r3,[r5,#0x1c]
00c3cc  e5957018          LDR      r7,[r5,#0x18]
00c3d0  e1a02007          MOV      r2,r7
00c3d4  e594a068          LDR      r10,[r4,#0x68]
00c3d8  e1a0000a          MOV      r0,r10
00c3dc  e594106c          LDR      r1,[r4,#0x6c]
00c3e0  ebfffffe          BL       __aeabi_dmul
00c3e4  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c3e8  e5953014          LDR      r3,[r5,#0x14]
00c3ec  e5957010          LDR      r7,[r5,#0x10]
00c3f0  e1a02007          MOV      r2,r7
00c3f4  e594a048          LDR      r10,[r4,#0x48]
00c3f8  e1a0000a          MOV      r0,r10
00c3fc  e594104c          LDR      r1,[r4,#0x4c]
00c400  ebfffffe          BL       __aeabi_dmul
00c404  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c408  e595300c          LDR      r3,[r5,#0xc]
00c40c  e5957008          LDR      r7,[r5,#8]
00c410  e1a02007          MOV      r2,r7
00c414  e594a028          LDR      r10,[r4,#0x28]
00c418  e1a0000a          MOV      r0,r10
00c41c  e594102c          LDR      r1,[r4,#0x2c]
00c420  ebfffffe          BL       __aeabi_dmul
00c424  e1cd00f8          STRD     r0,r1,[sp,#8]
00c428  e5953004          LDR      r3,[r5,#4]
00c42c  e595a000          LDR      r10,[r5,#0]
00c430  e1a0200a          MOV      r2,r10
00c434  e5947008          LDR      r7,[r4,#8]
00c438  e1a00007          MOV      r0,r7
00c43c  e594100c          LDR      r1,[r4,#0xc]
00c440  ebfffffe          BL       __aeabi_dmul
00c444  e1cd00f0          STRD     r0,r1,[sp,#0]
00c448  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c44c  ebfffffe          BL       __aeabi_dadd
00c450  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c454  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c458  ebfffffe          BL       __aeabi_dadd
00c45c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c460  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c464  ebfffffe          BL       __aeabi_dadd
00c468  e1cd03f8          STRD     r0,r1,[sp,#0x38]
;;;5352       n[2] = m[2]*v[0] + m[6]*v[1] + m[10]*v[2] + m[14]*v[3];
00c46c  e595301c          LDR      r3,[r5,#0x1c]
00c470  e595a018          LDR      r10,[r5,#0x18]
00c474  e1a0200a          MOV      r2,r10
00c478  e5947070          LDR      r7,[r4,#0x70]
00c47c  e1a00007          MOV      r0,r7
00c480  e5941074          LDR      r1,[r4,#0x74]
00c484  ebfffffe          BL       __aeabi_dmul
00c488  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c48c  e5953014          LDR      r3,[r5,#0x14]
00c490  e595a010          LDR      r10,[r5,#0x10]
00c494  e1a0200a          MOV      r2,r10
00c498  e5947050          LDR      r7,[r4,#0x50]
00c49c  e1a00007          MOV      r0,r7
00c4a0  e5941054          LDR      r1,[r4,#0x54]
00c4a4  ebfffffe          BL       __aeabi_dmul
00c4a8  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c4ac  e595300c          LDR      r3,[r5,#0xc]
00c4b0  e5957008          LDR      r7,[r5,#8]
00c4b4  e1a02007          MOV      r2,r7
00c4b8  e594a030          LDR      r10,[r4,#0x30]
00c4bc  e1a0000a          MOV      r0,r10
00c4c0  e5941034          LDR      r1,[r4,#0x34]
00c4c4  ebfffffe          BL       __aeabi_dmul
00c4c8  e1cd00f8          STRD     r0,r1,[sp,#8]
00c4cc  e5953004          LDR      r3,[r5,#4]
00c4d0  e5957000          LDR      r7,[r5,#0]
00c4d4  e1a02007          MOV      r2,r7
00c4d8  e594a010          LDR      r10,[r4,#0x10]
00c4dc  e1a0000a          MOV      r0,r10
00c4e0  e5941014          LDR      r1,[r4,#0x14]
00c4e4  ebfffffe          BL       __aeabi_dmul
00c4e8  e1cd00f0          STRD     r0,r1,[sp,#0]
00c4ec  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c4f0  ebfffffe          BL       __aeabi_dadd
00c4f4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c4f8  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c4fc  ebfffffe          BL       __aeabi_dadd
00c500  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c504  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c508  ebfffffe          BL       __aeabi_dadd
00c50c  e1cd04f0          STRD     r0,r1,[sp,#0x40]
;;;5353       n[3] = m[3]*v[0] + m[7]*v[1] + m[11]*v[2] + m[15]*v[3];
00c510  e595301c          LDR      r3,[r5,#0x1c]
00c514  e595a018          LDR      r10,[r5,#0x18]
00c518  e1a0200a          MOV      r2,r10
00c51c  e5947078          LDR      r7,[r4,#0x78]
00c520  e1a00007          MOV      r0,r7
00c524  e594107c          LDR      r1,[r4,#0x7c]
00c528  ebfffffe          BL       __aeabi_dmul
00c52c  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00c530  e5953014          LDR      r3,[r5,#0x14]
00c534  e595a010          LDR      r10,[r5,#0x10]
00c538  e1a0200a          MOV      r2,r10
00c53c  e5947058          LDR      r7,[r4,#0x58]
00c540  e1a00007          MOV      r0,r7
00c544  e594105c          LDR      r1,[r4,#0x5c]
00c548  ebfffffe          BL       __aeabi_dmul
00c54c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00c550  e595300c          LDR      r3,[r5,#0xc]
00c554  e595a008          LDR      r10,[r5,#8]
00c558  e1a0200a          MOV      r2,r10
00c55c  e5947038          LDR      r7,[r4,#0x38]
00c560  e1a00007          MOV      r0,r7
00c564  e594103c          LDR      r1,[r4,#0x3c]
00c568  ebfffffe          BL       __aeabi_dmul
00c56c  e1cd00f8          STRD     r0,r1,[sp,#8]
00c570  e5953004          LDR      r3,[r5,#4]
00c574  e5957000          LDR      r7,[r5,#0]
00c578  e1a02007          MOV      r2,r7
00c57c  e594a018          LDR      r10,[r4,#0x18]
00c580  e1a0000a          MOV      r0,r10
00c584  e594101c          LDR      r1,[r4,#0x1c]
00c588  ebfffffe          BL       __aeabi_dmul
00c58c  e1cd00f0          STRD     r0,r1,[sp,#0]
00c590  e1cd20d8          LDRD     r2,r3,[sp,#8]
00c594  ebfffffe          BL       __aeabi_dadd
00c598  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c59c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00c5a0  ebfffffe          BL       __aeabi_dadd
00c5a4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00c5a8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00c5ac  ebfffffe          BL       __aeabi_dadd
00c5b0  e1cd04f8          STRD     r0,r1,[sp,#0x48]
;;;5354   
;;;5355       for (i=0; i<4; i++)
00c5b4  e3a06000          MOV      r6,#0
00c5b8  ea000005          B        |L1.50644|
                  |L1.50620|
;;;5356       {
;;;5357           r[i]=n[i];
00c5bc  e28d0030          ADD      r0,sp,#0x30
00c5c0  e0801186          ADD      r1,r0,r6,LSL #3
00c5c4  e1c100d0          LDRD     r0,r1,[r1,#0]
00c5c8  e0892186          ADD      r2,r9,r6,LSL #3
00c5cc  e1c200f0          STRD     r0,r1,[r2,#0]
00c5d0  e2866001          ADD      r6,r6,#1              ;5355
                  |L1.50644|
00c5d4  e3560004          CMP      r6,#4                 ;5355
00c5d8  3afffff7          BCC      |L1.50620|
;;;5358       }
;;;5359   }
00c5dc  e28dd054          ADD      sp,sp,#0x54
00c5e0  e8bd8ff0          POP      {r4-r11,pc}
;;;5360   
                          ENDP

                  iGfInvertMatrix4x4 PROC
;;;5364   /* This code comes directly from GLU except that it is for float64_t */
;;;5365   static int iGfInvertMatrix4x4(float64_t *m, float64_t *out)
00c5e4  e92d4003          PUSH     {r0,r1,lr}
;;;5366   {
00c5e8  e24ddf55          SUB      sp,sp,#0x154
;;;5367       float64_t wtmp[4][8];
;;;5368       float64_t m0, m1, m2, m3, s;
;;;5369       float64_t *r0, *r1, *r2, *r3;
;;;5370   
;;;5371       r0 = wtmp[0];
00c5ec  e28d0050          ADD      r0,sp,#0x50
00c5f0  e58d0024          STR      r0,[sp,#0x24]
;;;5372       r1 = wtmp[1];
00c5f4  e28d1090          ADD      r1,sp,#0x90
00c5f8  e58d1020          STR      r1,[sp,#0x20]
;;;5373       r2 = wtmp[2];
00c5fc  e28d10d0          ADD      r1,sp,#0xd0
00c600  e58d101c          STR      r1,[sp,#0x1c]
;;;5374       r3 = wtmp[3];
00c604  e28d1e11          ADD      r1,sp,#0x110
00c608  e58d1018          STR      r1,[sp,#0x18]
;;;5375   
;;;5376       r0[0] = MAT(m, 0, 0);
00c60c  e59d0154          LDR      r0,[sp,#0x154]
00c610  e8900006          LDM      r0,{r1,r2}
00c614  e59d0024          LDR      r0,[sp,#0x24]
00c618  e8800006          STM      r0,{r1,r2}
;;;5377       r0[1] = MAT(m, 0, 1);
00c61c  e59d0154          LDR      r0,[sp,#0x154]
00c620  e5901020          LDR      r1,[r0,#0x20]
00c624  e5902024          LDR      r2,[r0,#0x24]
00c628  e59d0024          LDR      r0,[sp,#0x24]
00c62c  e5801008          STR      r1,[r0,#8]
00c630  e580200c          STR      r2,[r0,#0xc]
;;;5378       r0[2] = MAT(m, 0, 2);
00c634  e59d0154          LDR      r0,[sp,#0x154]
00c638  e5901044          LDR      r1,[r0,#0x44]
00c63c  e5902040          LDR      r2,[r0,#0x40]
00c640  e59d0024          LDR      r0,[sp,#0x24]
00c644  e5801014          STR      r1,[r0,#0x14]
00c648  e5802010          STR      r2,[r0,#0x10]
;;;5379       r0[3] = MAT(m, 0, 3);
00c64c  e59d0154          LDR      r0,[sp,#0x154]
00c650  e5901064          LDR      r1,[r0,#0x64]
00c654  e5902060          LDR      r2,[r0,#0x60]
00c658  e59d0024          LDR      r0,[sp,#0x24]
00c65c  e580101c          STR      r1,[r0,#0x1c]
00c660  e5802018          STR      r2,[r0,#0x18]
00c664  e3a02000          MOV      r2,#0
00c668  e59f1f94          LDR      r1,|L1.54788|
;;;5380       r0[4] = 1.0;
00c66c  e59d0024          LDR      r0,[sp,#0x24]
00c670  e5801024          STR      r1,[r0,#0x24]
00c674  e5802020          STR      r2,[r0,#0x20]
;;;5381       r0[5] = 0.0;
00c678  e59d0024          LDR      r0,[sp,#0x24]
00c67c  e5802028          STR      r2,[r0,#0x28]
00c680  e580202c          STR      r2,[r0,#0x2c]
;;;5382       r0[6] = 0.0;
00c684  e59d0024          LDR      r0,[sp,#0x24]
00c688  e5802030          STR      r2,[r0,#0x30]
00c68c  e5802034          STR      r2,[r0,#0x34]
;;;5383       r0[7] = 0.0;
00c690  e59d0024          LDR      r0,[sp,#0x24]
00c694  e5802038          STR      r2,[r0,#0x38]
00c698  e580203c          STR      r2,[r0,#0x3c]
;;;5384       r1[0] = MAT(m, 1, 0);
00c69c  e59d0154          LDR      r0,[sp,#0x154]
00c6a0  e5901008          LDR      r1,[r0,#8]
00c6a4  e590200c          LDR      r2,[r0,#0xc]
00c6a8  e59d0020          LDR      r0,[sp,#0x20]
00c6ac  e8800006          STM      r0,{r1,r2}
;;;5385       r1[1] = MAT(m, 1, 1);
00c6b0  e59d0154          LDR      r0,[sp,#0x154]
00c6b4  e590102c          LDR      r1,[r0,#0x2c]
00c6b8  e5902028          LDR      r2,[r0,#0x28]
00c6bc  e59d0020          LDR      r0,[sp,#0x20]
00c6c0  e580100c          STR      r1,[r0,#0xc]
00c6c4  e5802008          STR      r2,[r0,#8]
;;;5386       r1[2] = MAT(m, 1, 2);
00c6c8  e59d0154          LDR      r0,[sp,#0x154]
00c6cc  e590104c          LDR      r1,[r0,#0x4c]
00c6d0  e5902048          LDR      r2,[r0,#0x48]
00c6d4  e59d0020          LDR      r0,[sp,#0x20]
00c6d8  e5801014          STR      r1,[r0,#0x14]
00c6dc  e5802010          STR      r2,[r0,#0x10]
;;;5387       r1[3] = MAT(m, 1, 3);
00c6e0  e59d0154          LDR      r0,[sp,#0x154]
00c6e4  e5901068          LDR      r1,[r0,#0x68]
00c6e8  e590206c          LDR      r2,[r0,#0x6c]
00c6ec  e59d0020          LDR      r0,[sp,#0x20]
00c6f0  e5801018          STR      r1,[r0,#0x18]
00c6f4  e580201c          STR      r2,[r0,#0x1c]
00c6f8  e3a02000          MOV      r2,#0
00c6fc  e59f1f00          LDR      r1,|L1.54788|
;;;5388       r1[5] = 1.0;
00c700  e59d0020          LDR      r0,[sp,#0x20]
00c704  e580102c          STR      r1,[r0,#0x2c]
00c708  e5802028          STR      r2,[r0,#0x28]
;;;5389       r1[4] = 0.0;
00c70c  e59d0020          LDR      r0,[sp,#0x20]
00c710  e5802020          STR      r2,[r0,#0x20]
00c714  e5802024          STR      r2,[r0,#0x24]
;;;5390       r1[6] = 0.0;
00c718  e59d0020          LDR      r0,[sp,#0x20]
00c71c  e5802030          STR      r2,[r0,#0x30]
00c720  e5802034          STR      r2,[r0,#0x34]
;;;5391       r1[7] = 0.0;
00c724  e59d0020          LDR      r0,[sp,#0x20]
00c728  e5802038          STR      r2,[r0,#0x38]
00c72c  e580203c          STR      r2,[r0,#0x3c]
;;;5392       r2[0] = MAT(m, 2, 0);
00c730  e59d0154          LDR      r0,[sp,#0x154]
00c734  e5901010          LDR      r1,[r0,#0x10]
00c738  e5902014          LDR      r2,[r0,#0x14]
00c73c  e59d001c          LDR      r0,[sp,#0x1c]
00c740  e8800006          STM      r0,{r1,r2}
;;;5393       r2[1] = MAT(m, 2, 1);
00c744  e59d0154          LDR      r0,[sp,#0x154]
00c748  e5901034          LDR      r1,[r0,#0x34]
00c74c  e5902030          LDR      r2,[r0,#0x30]
00c750  e59d001c          LDR      r0,[sp,#0x1c]
00c754  e580100c          STR      r1,[r0,#0xc]
00c758  e5802008          STR      r2,[r0,#8]
;;;5394       r2[2] = MAT(m, 2, 2);
00c75c  e59d0154          LDR      r0,[sp,#0x154]
00c760  e5901054          LDR      r1,[r0,#0x54]
00c764  e5902050          LDR      r2,[r0,#0x50]
00c768  e59d001c          LDR      r0,[sp,#0x1c]
00c76c  e5801014          STR      r1,[r0,#0x14]
00c770  e5802010          STR      r2,[r0,#0x10]
;;;5395       r2[3] = MAT(m, 2, 3);
00c774  e59d0154          LDR      r0,[sp,#0x154]
00c778  e5901074          LDR      r1,[r0,#0x74]
00c77c  e5902070          LDR      r2,[r0,#0x70]
00c780  e59d001c          LDR      r0,[sp,#0x1c]
00c784  e580101c          STR      r1,[r0,#0x1c]
00c788  e5802018          STR      r2,[r0,#0x18]
00c78c  e3a02000          MOV      r2,#0
00c790  e59f1e6c          LDR      r1,|L1.54788|
;;;5396       r2[6] = 1.0;
00c794  e59d001c          LDR      r0,[sp,#0x1c]
00c798  e5801034          STR      r1,[r0,#0x34]
00c79c  e5802030          STR      r2,[r0,#0x30]
;;;5397       r2[4] = 0.0;
00c7a0  e59d001c          LDR      r0,[sp,#0x1c]
00c7a4  e5802020          STR      r2,[r0,#0x20]
00c7a8  e5802024          STR      r2,[r0,#0x24]
;;;5398       r2[5] = 0.0;
00c7ac  e59d001c          LDR      r0,[sp,#0x1c]
00c7b0  e5802028          STR      r2,[r0,#0x28]
00c7b4  e580202c          STR      r2,[r0,#0x2c]
;;;5399       r2[7] = 0.0;
00c7b8  e59d001c          LDR      r0,[sp,#0x1c]
00c7bc  e5802038          STR      r2,[r0,#0x38]
00c7c0  e580203c          STR      r2,[r0,#0x3c]
;;;5400       r3[0] = MAT(m, 3, 0);
00c7c4  e59d0154          LDR      r0,[sp,#0x154]
00c7c8  e590101c          LDR      r1,[r0,#0x1c]
00c7cc  e5902018          LDR      r2,[r0,#0x18]
00c7d0  e59d0018          LDR      r0,[sp,#0x18]
00c7d4  e5801004          STR      r1,[r0,#4]
00c7d8  e5802000          STR      r2,[r0,#0]
;;;5401       r3[1] = MAT(m, 3, 1);
00c7dc  e59d0154          LDR      r0,[sp,#0x154]
00c7e0  e5901038          LDR      r1,[r0,#0x38]
00c7e4  e590203c          LDR      r2,[r0,#0x3c]
00c7e8  e59d0018          LDR      r0,[sp,#0x18]
00c7ec  e5801008          STR      r1,[r0,#8]
00c7f0  e580200c          STR      r2,[r0,#0xc]
;;;5402       r3[2] = MAT(m, 3, 2);
00c7f4  e59d0154          LDR      r0,[sp,#0x154]
00c7f8  e590105c          LDR      r1,[r0,#0x5c]
00c7fc  e5902058          LDR      r2,[r0,#0x58]
00c800  e59d0018          LDR      r0,[sp,#0x18]
00c804  e5801014          STR      r1,[r0,#0x14]
00c808  e5802010          STR      r2,[r0,#0x10]
;;;5403       r3[3] = MAT(m, 3, 3);
00c80c  e59d0154          LDR      r0,[sp,#0x154]
00c810  e590107c          LDR      r1,[r0,#0x7c]
00c814  e5902078          LDR      r2,[r0,#0x78]
00c818  e59d0018          LDR      r0,[sp,#0x18]
00c81c  e580101c          STR      r1,[r0,#0x1c]
00c820  e5802018          STR      r2,[r0,#0x18]
00c824  e3a02000          MOV      r2,#0
00c828  e59f1dd4          LDR      r1,|L1.54788|
;;;5404       r3[7] = 1.0;
00c82c  e59d0018          LDR      r0,[sp,#0x18]
00c830  e580103c          STR      r1,[r0,#0x3c]
00c834  e5802038          STR      r2,[r0,#0x38]
;;;5405       r3[4] = 0.0;
00c838  e59d0018          LDR      r0,[sp,#0x18]
00c83c  e5802020          STR      r2,[r0,#0x20]
00c840  e5802024          STR      r2,[r0,#0x24]
;;;5406       r3[5] = 0.0;
00c844  e59d0018          LDR      r0,[sp,#0x18]
00c848  e5802028          STR      r2,[r0,#0x28]
00c84c  e580202c          STR      r2,[r0,#0x2c]
;;;5407       r3[6] = 0.0;
00c850  e59d0018          LDR      r0,[sp,#0x18]
00c854  e5802030          STR      r2,[r0,#0x30]
00c858  e5802034          STR      r2,[r0,#0x34]
;;;5408       /* choose pivot - or die */
;;;5409       if (fabs(r3[0]) > fabs(r2[0]))
00c85c  e59d101c          LDR      r1,[sp,#0x1c]
00c860  e1c100d0          LDRD     r0,r1,[r1,#0]
00c864  e3c11102          BIC      r1,r1,#0x80000000
00c868  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c86c  e59d1018          LDR      r1,[sp,#0x18]
00c870  e1c100d0          LDRD     r0,r1,[r1,#0]
00c874  e3c11102          BIC      r1,r1,#0x80000000
00c878  e1cd00f8          STRD     r0,r1,[sp,#8]
00c87c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00c880  ebfffffe          BL       __aeabi_cdrcmple
00c884  2a000006          BCS      |L1.51364|
;;;5410       {
;;;5411           SWAP_ROWS_FLOAT(r3, r2);
00c888  e59d0018          LDR      r0,[sp,#0x18]
00c88c  e58d0014          STR      r0,[sp,#0x14]
00c890  e59d001c          LDR      r0,[sp,#0x1c]
00c894  e58d0018          STR      r0,[sp,#0x18]
00c898  e59d0014          LDR      r0,[sp,#0x14]
00c89c  e58d001c          STR      r0,[sp,#0x1c]
00c8a0  e320f000          NOP      
                  |L1.51364|
;;;5412       }
;;;5413       if (fabs(r2[0]) > fabs(r1[0]))
00c8a4  e59d1020          LDR      r1,[sp,#0x20]
00c8a8  e1c100d0          LDRD     r0,r1,[r1,#0]
00c8ac  e3c11102          BIC      r1,r1,#0x80000000
00c8b0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c8b4  e59d101c          LDR      r1,[sp,#0x1c]
00c8b8  e1c100d0          LDRD     r0,r1,[r1,#0]
00c8bc  e3c11102          BIC      r1,r1,#0x80000000
00c8c0  e1cd00f8          STRD     r0,r1,[sp,#8]
00c8c4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00c8c8  ebfffffe          BL       __aeabi_cdrcmple
00c8cc  2a000006          BCS      |L1.51436|
;;;5414       {
;;;5415           SWAP_ROWS_FLOAT(r2, r1);
00c8d0  e59d001c          LDR      r0,[sp,#0x1c]
00c8d4  e58d0014          STR      r0,[sp,#0x14]
00c8d8  e59d0020          LDR      r0,[sp,#0x20]
00c8dc  e58d001c          STR      r0,[sp,#0x1c]
00c8e0  e59d0014          LDR      r0,[sp,#0x14]
00c8e4  e58d0020          STR      r0,[sp,#0x20]
00c8e8  e320f000          NOP      
                  |L1.51436|
;;;5416       }
;;;5417       if (fabs(r1[0]) > fabs(r0[0]))
00c8ec  e59d1024          LDR      r1,[sp,#0x24]
00c8f0  e1c100d0          LDRD     r0,r1,[r1,#0]
00c8f4  e3c11102          BIC      r1,r1,#0x80000000
00c8f8  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c8fc  e59d1020          LDR      r1,[sp,#0x20]
00c900  e1c100d0          LDRD     r0,r1,[r1,#0]
00c904  e3c11102          BIC      r1,r1,#0x80000000
00c908  e1cd00f8          STRD     r0,r1,[sp,#8]
00c90c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00c910  ebfffffe          BL       __aeabi_cdrcmple
00c914  2a000006          BCS      |L1.51508|
;;;5418       {
;;;5419           SWAP_ROWS_FLOAT(r1, r0);
00c918  e59d0020          LDR      r0,[sp,#0x20]
00c91c  e58d0014          STR      r0,[sp,#0x14]
00c920  e59d0024          LDR      r0,[sp,#0x24]
00c924  e58d0020          STR      r0,[sp,#0x20]
00c928  e59d0014          LDR      r0,[sp,#0x14]
00c92c  e58d0024          STR      r0,[sp,#0x24]
00c930  e320f000          NOP      
                  |L1.51508|
;;;5420       }
;;;5421       if (0.0 == r0[0])
00c934  e59d0024          LDR      r0,[sp,#0x24]
00c938  e1c000d0          LDRD     r0,r1,[r0,#0]
00c93c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00c940  e1a02000          MOV      r2,r0
00c944  e1a03001          MOV      r3,r1
00c948  e3a00000          MOV      r0,#0
00c94c  e1a01000          MOV      r1,r0
00c950  ebfffffe          BL       __aeabi_cdcmpeq
00c954  1a000002          BNE      |L1.51556|
;;;5422       {
;;;5423           return 0;
00c958  e3a00000          MOV      r0,#0
                  |L1.51548|
00c95c  e28ddf57          ADD      sp,sp,#0x15c
;;;5424       }
;;;5425       /* eliminate first variable */
;;;5426       m1 = r1[0] / r0[0];
;;;5427       m2 = r2[0] / r0[0];
;;;5428       m3 = r3[0] / r0[0];
;;;5429       s  = r0[1];
;;;5430       r1[1] -= m1 * s;
;;;5431       r2[1] -= m2 * s;
;;;5432       r3[1] -= m3 * s;
;;;5433       s = r0[2];
;;;5434       r1[2] -= m1 * s;
;;;5435       r2[2] -= m2 * s;
;;;5436       r3[2] -= m3 * s;
;;;5437       s = r0[3];
;;;5438       r1[3] -= m1 * s;
;;;5439       r2[3] -= m2 * s;
;;;5440       r3[3] -= m3 * s;
;;;5441       s = r0[4];
;;;5442       if (s != 0.0)
;;;5443       {
;;;5444           r1[4] -= m1 * s;
;;;5445           r2[4] -= m2 * s;
;;;5446           r3[4] -= m3 * s;
;;;5447       }
;;;5448       s = r0[5];
;;;5449       if (s != 0.0)
;;;5450       {
;;;5451           r1[5] -= m1 * s;
;;;5452           r2[5] -= m2 * s;
;;;5453           r3[5] -= m3 * s;
;;;5454       }
;;;5455       s = r0[6];
;;;5456       if (s != 0.0)
;;;5457       {
;;;5458           r1[6] -= m1 * s;
;;;5459           r2[6] -= m2 * s;
;;;5460           r3[6] -= m3 * s;
;;;5461       }
;;;5462       s = r0[7];
;;;5463       if (s != 0.0)
;;;5464       {
;;;5465           r1[7] -= m1 * s;
;;;5466           r2[7] -= m2 * s;
;;;5467           r3[7] -= m3 * s;
;;;5468       }
;;;5469       /* choose pivot - or die */
;;;5470       if (fabs(r3[1]) > fabs(r2[1]))
;;;5471       {
;;;5472           SWAP_ROWS_FLOAT(r3, r2);
;;;5473       }
;;;5474       if (fabs(r2[1]) > fabs(r1[1]))
;;;5475       {
;;;5476           SWAP_ROWS_FLOAT(r2, r1);
;;;5477       }
;;;5478       if (0.0 == r1[1])
;;;5479       {
;;;5480           return 0;
;;;5481       }
;;;5482       /* eliminate second variable */
;;;5483       m2 = r2[1] / r1[1];
;;;5484       m3 = r3[1] / r1[1];
;;;5485       r2[2] -= m2 * r1[2];
;;;5486       r3[2] -= m3 * r1[2];
;;;5487       r2[3] -= m2 * r1[3];
;;;5488       r3[3] -= m3 * r1[3];
;;;5489       s = r1[4];
;;;5490       if (0.0 != s)
;;;5491       {
;;;5492           r2[4] -= m2 * s;
;;;5493           r3[4] -= m3 * s;
;;;5494       }
;;;5495       s = r1[5];
;;;5496       if (0.0 != s)
;;;5497       {
;;;5498           r2[5] -= m2 * s;
;;;5499           r3[5] -= m3 * s;
;;;5500       }
;;;5501       s = r1[6];
;;;5502       if (0.0 != s)
;;;5503       {
;;;5504           r2[6] -= m2 * s;
;;;5505           r3[6] -= m3 * s;
;;;5506       }
;;;5507       s = r1[7];
;;;5508       if (0.0 != s)
;;;5509       {
;;;5510           r2[7] -= m2 * s;
;;;5511           r3[7] -= m3 * s;
;;;5512       }
;;;5513       /* choose pivot - or die */
;;;5514       if (fabs(r3[2]) > fabs(r2[2]))
;;;5515       {
;;;5516           SWAP_ROWS_FLOAT(r3, r2);
;;;5517       }
;;;5518       if (0.0 == r2[2])
;;;5519       {
;;;5520           return 0;
;;;5521       }
;;;5522       /* eliminate third variable */
;;;5523       m3 = r3[2] / r2[2];
;;;5524       r3[3] -= m3 * r2[3];
;;;5525       r3[4] -= m3 * r2[4];
;;;5526       r3[5] -= m3 * r2[5];
;;;5527       r3[6] -= m3 * r2[6];
;;;5528       r3[7] -= m3 * r2[7];
;;;5529       /* last check */
;;;5530       if (0.0 == r3[3])
;;;5531       {
;;;5532           return 0;
;;;5533       }
;;;5534       s = 1.0 / r3[3];		/* now back substitute row 3 */
;;;5535       r3[4] *= s;
;;;5536       r3[5] *= s;
;;;5537       r3[6] *= s;
;;;5538       r3[7] *= s;
;;;5539       m2 = r2[3];			/* now back substitute row 2 */
;;;5540       s = 1.0 / r2[2];
;;;5541       r2[4] = s * (r2[4] - r3[4] * m2);
;;;5542       r2[5] = s * (r2[5] - r3[5] * m2);
;;;5543       r2[6] = s * (r2[6] - r3[6] * m2);
;;;5544       r2[7] = s * (r2[7] - r3[7] * m2);
;;;5545       m1 = r1[3];
;;;5546       r1[4] -= r3[4] * m1;
;;;5547       r1[5] -= r3[5] * m1;
;;;5548       r1[6] -= r3[6] * m1;
;;;5549       r1[7] -= r3[7] * m1;
;;;5550       m0 = r0[3];
;;;5551       r0[4] -= r3[4] * m0;
;;;5552       r0[5] -= r3[5] * m0;
;;;5553       r0[6] -= r3[6] * m0;
;;;5554       r0[7] -= r3[7] * m0;
;;;5555       m1 = r1[2];			/* now back substitute row 1 */
;;;5556       s = 1.0 / r1[1];
;;;5557       r1[4] = s * (r1[4] - r2[4] * m1);
;;;5558       r1[5] = s * (r1[5] - r2[5] * m1);
;;;5559       r1[6] = s * (r1[6] - r2[6] * m1);
;;;5560       r1[7] = s * (r1[7] - r2[7] * m1);
;;;5561       m0 = r0[2];
;;;5562       r0[4] -= r2[4] * m0;
;;;5563       r0[5] -= r2[5] * m0;
;;;5564       r0[6] -= r2[6] * m0;
;;;5565       r0[7] -= r2[7] * m0;
;;;5566       m0 = r0[1];			/* now back substitute row 0 */
;;;5567       s = 1.0 / r0[0];
;;;5568       r0[4] = s * (r0[4] - r1[4] * m0);
;;;5569       r0[5] = s * (r0[5] - r1[5] * m0);
;;;5570       r0[6] = s * (r0[6] - r1[6] * m0);
;;;5571       r0[7] = s * (r0[7] - r1[7] * m0);
;;;5572       MAT(out, 0, 0) = r0[4];
;;;5573       MAT(out, 0, 1) = r0[5];
;;;5574       MAT(out, 0, 2) = r0[6];
;;;5575       MAT(out, 0, 3) = r0[7];
;;;5576       MAT(out, 1, 0) = r1[4];
;;;5577       MAT(out, 1, 1) = r1[5];
;;;5578       MAT(out, 1, 2) = r1[6];
;;;5579       MAT(out, 1, 3) = r1[7];
;;;5580       MAT(out, 2, 0) = r2[4];
;;;5581       MAT(out, 2, 1) = r2[5];
;;;5582       MAT(out, 2, 2) = r2[6];
;;;5583       MAT(out, 2, 3) = r2[7];
;;;5584       MAT(out, 3, 0) = r3[4];
;;;5585       MAT(out, 3, 1) = r3[5];
;;;5586       MAT(out, 3, 2) = r3[6];
;;;5587       MAT(out, 3, 3) = r3[7];
;;;5588   
;;;5589       return 1;
;;;5590   }
00c960  e49df004          POP      {pc}
                  |L1.51556|
00c964  e59d1024          LDR      r1,[sp,#0x24]         ;5426
00c968  e1c100d0          LDRD     r0,r1,[r1,#0]         ;5426
00c96c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5426
00c970  e59d0020          LDR      r0,[sp,#0x20]         ;5426
00c974  e8900006          LDM      r0,{r1,r2}            ;5426
00c978  e1a00001          MOV      r0,r1                 ;5426
00c97c  e58d0008          STR      r0,[sp,#8]            ;5426
00c980  e58d200c          STR      r2,[sp,#0xc]          ;5426
00c984  e28d300c          ADD      r3,sp,#0xc            ;5426
00c988  e893000e          LDM      r3,{r1-r3}            ;5426
00c98c  ebfffffe          BL       __aeabi_ddiv
00c990  e1cd04f0          STRD     r0,r1,[sp,#0x40]      ;5426
00c994  e59d0024          LDR      r0,[sp,#0x24]         ;5427
00c998  e8900006          LDM      r0,{r1,r2}            ;5427
00c99c  e1a00001          MOV      r0,r1                 ;5427
00c9a0  e58d0010          STR      r0,[sp,#0x10]         ;5427
00c9a4  e58d2014          STR      r2,[sp,#0x14]         ;5427
00c9a8  e59d101c          LDR      r1,[sp,#0x1c]         ;5427
00c9ac  e1c100d0          LDRD     r0,r1,[r1,#0]         ;5427
00c9b0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5427
00c9b4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5427
00c9b8  ebfffffe          BL       __aeabi_ddiv
00c9bc  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5427
00c9c0  e59d0024          LDR      r0,[sp,#0x24]         ;5428
00c9c4  e8900006          LDM      r0,{r1,r2}            ;5428
00c9c8  e58d1010          STR      r1,[sp,#0x10]         ;5428
00c9cc  e58d2014          STR      r2,[sp,#0x14]         ;5428
00c9d0  e59d1018          LDR      r1,[sp,#0x18]         ;5428
00c9d4  e1c100d0          LDRD     r0,r1,[r1,#0]         ;5428
00c9d8  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5428
00c9dc  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5428
00c9e0  ebfffffe          BL       __aeabi_ddiv
00c9e4  e1cd03f0          STRD     r0,r1,[sp,#0x30]      ;5428
00c9e8  e59d0024          LDR      r0,[sp,#0x24]         ;5429
00c9ec  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5429
00c9f0  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5429
00c9f4  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5430
00c9f8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5430
00c9fc  ebfffffe          BL       __aeabi_dmul
00ca00  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5430
00ca04  e59d0020          LDR      r0,[sp,#0x20]         ;5430
00ca08  e5901008          LDR      r1,[r0,#8]            ;5430
00ca0c  e590200c          LDR      r2,[r0,#0xc]          ;5430
00ca10  e1a00001          MOV      r0,r1                 ;5430
00ca14  e58d0008          STR      r0,[sp,#8]            ;5430
00ca18  e58d200c          STR      r2,[sp,#0xc]          ;5430
00ca1c  e1a02001          MOV      r2,r1                 ;5430
00ca20  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5430
00ca24  e59d300c          LDR      r3,[sp,#0xc]          ;5430
00ca28  ebfffffe          BL       __aeabi_drsub
00ca2c  e59d2020          LDR      r2,[sp,#0x20]         ;5430
00ca30  e1c200f8          STRD     r0,r1,[r2,#8]         ;5430
00ca34  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5431
00ca38  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5431
00ca3c  ebfffffe          BL       __aeabi_dmul
00ca40  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5431
00ca44  e59d001c          LDR      r0,[sp,#0x1c]         ;5431
00ca48  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5431
00ca4c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5431
00ca50  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5431
00ca54  ebfffffe          BL       __aeabi_dsub
00ca58  e59d201c          LDR      r2,[sp,#0x1c]         ;5431
00ca5c  e1c200f8          STRD     r0,r1,[r2,#8]         ;5431
00ca60  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5432
00ca64  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5432
00ca68  ebfffffe          BL       __aeabi_dmul
00ca6c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5432
00ca70  e59d0018          LDR      r0,[sp,#0x18]         ;5432
00ca74  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5432
00ca78  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5432
00ca7c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5432
00ca80  ebfffffe          BL       __aeabi_dsub
00ca84  e59d2018          LDR      r2,[sp,#0x18]         ;5432
00ca88  e1c200f8          STRD     r0,r1,[r2,#8]         ;5432
00ca8c  e59d0024          LDR      r0,[sp,#0x24]         ;5433
00ca90  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5433
00ca94  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5433
00ca98  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5434
00ca9c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5434
00caa0  ebfffffe          BL       __aeabi_dmul
00caa4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5434
00caa8  e59d0020          LDR      r0,[sp,#0x20]         ;5434
00caac  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5434
00cab0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5434
00cab4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5434
00cab8  ebfffffe          BL       __aeabi_dsub
00cabc  e59d2020          LDR      r2,[sp,#0x20]         ;5434
00cac0  e1c201f0          STRD     r0,r1,[r2,#0x10]      ;5434
00cac4  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5435
00cac8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5435
00cacc  ebfffffe          BL       __aeabi_dmul
00cad0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5435
00cad4  e59d001c          LDR      r0,[sp,#0x1c]         ;5435
00cad8  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5435
00cadc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5435
00cae0  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5435
00cae4  ebfffffe          BL       __aeabi_dsub
00cae8  e59d201c          LDR      r2,[sp,#0x1c]         ;5435
00caec  e1c201f0          STRD     r0,r1,[r2,#0x10]      ;5435
00caf0  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5436
00caf4  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5436
00caf8  ebfffffe          BL       __aeabi_dmul
00cafc  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5436
00cb00  e59d0018          LDR      r0,[sp,#0x18]         ;5436
00cb04  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5436
00cb08  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5436
00cb0c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5436
00cb10  ebfffffe          BL       __aeabi_dsub
00cb14  e59d2018          LDR      r2,[sp,#0x18]         ;5436
00cb18  e1c201f0          STRD     r0,r1,[r2,#0x10]      ;5436
00cb1c  e59d0024          LDR      r0,[sp,#0x24]         ;5437
00cb20  e5901018          LDR      r1,[r0,#0x18]         ;5437
00cb24  e590201c          LDR      r2,[r0,#0x1c]         ;5437
00cb28  e58d1028          STR      r1,[sp,#0x28]         ;5437
00cb2c  e58d202c          STR      r2,[sp,#0x2c]         ;5437
00cb30  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5438
00cb34  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5438
00cb38  ebfffffe          BL       __aeabi_dmul
00cb3c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5438
00cb40  e59d0020          LDR      r0,[sp,#0x20]         ;5438
00cb44  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5438
00cb48  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5438
00cb4c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5438
00cb50  ebfffffe          BL       __aeabi_dsub
00cb54  e59d2020          LDR      r2,[sp,#0x20]         ;5438
00cb58  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5438
00cb5c  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5439
00cb60  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5439
00cb64  ebfffffe          BL       __aeabi_dmul
00cb68  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5439
00cb6c  e59d101c          LDR      r1,[sp,#0x1c]         ;5439
00cb70  e1c101d8          LDRD     r0,r1,[r1,#0x18]      ;5439
00cb74  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5439
00cb78  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5439
00cb7c  ebfffffe          BL       __aeabi_dsub
00cb80  e59d201c          LDR      r2,[sp,#0x1c]         ;5439
00cb84  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5439
00cb88  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5440
00cb8c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5440
00cb90  ebfffffe          BL       __aeabi_dmul
00cb94  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5440
00cb98  e59d1018          LDR      r1,[sp,#0x18]         ;5440
00cb9c  e1c101d8          LDRD     r0,r1,[r1,#0x18]      ;5440
00cba0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5440
00cba4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5440
00cba8  ebfffffe          BL       __aeabi_dsub
00cbac  e59d2018          LDR      r2,[sp,#0x18]         ;5440
00cbb0  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5440
00cbb4  e59d0024          LDR      r0,[sp,#0x24]         ;5441
00cbb8  e5901020          LDR      r1,[r0,#0x20]         ;5441
00cbbc  e5902024          LDR      r2,[r0,#0x24]         ;5441
00cbc0  e58d1028          STR      r1,[sp,#0x28]         ;5441
00cbc4  e58d202c          STR      r2,[sp,#0x2c]         ;5441
00cbc8  e3a02000          MOV      r2,#0                 ;5441
00cbcc  e1a03002          MOV      r3,r2                 ;5441
00cbd0  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;5442
00cbd4  ebfffffe          BL       __aeabi_cdcmpeq
00cbd8  0a000020          BEQ      |L1.52320|
00cbdc  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5444
00cbe0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5444
00cbe4  ebfffffe          BL       __aeabi_dmul
00cbe8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5444
00cbec  e59d0020          LDR      r0,[sp,#0x20]         ;5444
00cbf0  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5444
00cbf4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5444
00cbf8  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5444
00cbfc  ebfffffe          BL       __aeabi_dsub
00cc00  e59d2020          LDR      r2,[sp,#0x20]         ;5444
00cc04  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5444
00cc08  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5445
00cc0c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5445
00cc10  ebfffffe          BL       __aeabi_dmul
00cc14  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5445
00cc18  e59d101c          LDR      r1,[sp,#0x1c]         ;5445
00cc1c  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5445
00cc20  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5445
00cc24  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5445
00cc28  ebfffffe          BL       __aeabi_dsub
00cc2c  e59d201c          LDR      r2,[sp,#0x1c]         ;5445
00cc30  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5445
00cc34  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5446
00cc38  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5446
00cc3c  ebfffffe          BL       __aeabi_dmul
00cc40  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5446
00cc44  e59d1018          LDR      r1,[sp,#0x18]         ;5446
00cc48  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5446
00cc4c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5446
00cc50  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5446
00cc54  ebfffffe          BL       __aeabi_dsub
00cc58  e59d2018          LDR      r2,[sp,#0x18]         ;5446
00cc5c  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5446
                  |L1.52320|
00cc60  e59d1024          LDR      r1,[sp,#0x24]         ;5448
00cc64  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5448
00cc68  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5448
00cc6c  e3a02000          MOV      r2,#0                 ;5448
00cc70  e1a03002          MOV      r3,r2                 ;5448
00cc74  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;5449
00cc78  ebfffffe          BL       __aeabi_cdcmpeq
00cc7c  0a00002a          BEQ      |L1.52524|
00cc80  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5451
00cc84  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5451
00cc88  ebfffffe          BL       __aeabi_dmul
00cc8c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5451
00cc90  e59d1020          LDR      r1,[sp,#0x20]         ;5451
00cc94  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5451
00cc98  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5451
00cc9c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5451
00cca0  ebfffffe          BL       __aeabi_dsub
00cca4  e59d2020          LDR      r2,[sp,#0x20]         ;5451
00cca8  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5451
00ccac  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5452
00ccb0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5452
00ccb4  ebfffffe          BL       __aeabi_dmul
00ccb8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5452
00ccbc  e59d001c          LDR      r0,[sp,#0x1c]         ;5452
00ccc0  e5901028          LDR      r1,[r0,#0x28]         ;5452
00ccc4  e590202c          LDR      r2,[r0,#0x2c]         ;5452
00ccc8  e1a00001          MOV      r0,r1                 ;5452
00cccc  e58d0008          STR      r0,[sp,#8]            ;5452
00ccd0  e58d200c          STR      r2,[sp,#0xc]          ;5452
00ccd4  e1a02001          MOV      r2,r1                 ;5452
00ccd8  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5452
00ccdc  e59d300c          LDR      r3,[sp,#0xc]          ;5452
00cce0  ebfffffe          BL       __aeabi_drsub
00cce4  e59d201c          LDR      r2,[sp,#0x1c]         ;5452
00cce8  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5452
00ccec  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5453
00ccf0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5453
00ccf4  ebfffffe          BL       __aeabi_dmul
00ccf8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5453
00ccfc  e59d0018          LDR      r0,[sp,#0x18]         ;5453
00cd00  e5901028          LDR      r1,[r0,#0x28]         ;5453
00cd04  e590202c          LDR      r2,[r0,#0x2c]         ;5453
00cd08  e1a00001          MOV      r0,r1                 ;5453
00cd0c  e58d0008          STR      r0,[sp,#8]            ;5453
00cd10  e58d200c          STR      r2,[sp,#0xc]          ;5453
00cd14  e1a02001          MOV      r2,r1                 ;5453
00cd18  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5453
00cd1c  e59d300c          LDR      r3,[sp,#0xc]          ;5453
00cd20  ebfffffe          BL       __aeabi_drsub
00cd24  e59d2018          LDR      r2,[sp,#0x18]         ;5453
00cd28  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5453
                  |L1.52524|
00cd2c  e59d1024          LDR      r1,[sp,#0x24]         ;5455
00cd30  e1c103d0          LDRD     r0,r1,[r1,#0x30]      ;5455
00cd34  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5455
00cd38  e3a02000          MOV      r2,#0                 ;5455
00cd3c  e1a03002          MOV      r3,r2                 ;5455
00cd40  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;5456
00cd44  ebfffffe          BL       __aeabi_cdcmpeq
00cd48  0a00002a          BEQ      |L1.52728|
00cd4c  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5458
00cd50  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5458
00cd54  ebfffffe          BL       __aeabi_dmul
00cd58  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5458
00cd5c  e59d0020          LDR      r0,[sp,#0x20]         ;5458
00cd60  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5458
00cd64  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5458
00cd68  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5458
00cd6c  ebfffffe          BL       __aeabi_dsub
00cd70  e59d2020          LDR      r2,[sp,#0x20]         ;5458
00cd74  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5458
00cd78  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5459
00cd7c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5459
00cd80  ebfffffe          BL       __aeabi_dmul
00cd84  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5459
00cd88  e59d001c          LDR      r0,[sp,#0x1c]         ;5459
00cd8c  e5901030          LDR      r1,[r0,#0x30]         ;5459
00cd90  e5902034          LDR      r2,[r0,#0x34]         ;5459
00cd94  e1a00001          MOV      r0,r1                 ;5459
00cd98  e58d0008          STR      r0,[sp,#8]            ;5459
00cd9c  e58d200c          STR      r2,[sp,#0xc]          ;5459
00cda0  e1a02001          MOV      r2,r1                 ;5459
00cda4  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5459
00cda8  e59d300c          LDR      r3,[sp,#0xc]          ;5459
00cdac  ebfffffe          BL       __aeabi_drsub
00cdb0  e59d201c          LDR      r2,[sp,#0x1c]         ;5459
00cdb4  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5459
00cdb8  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5460
00cdbc  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5460
00cdc0  ebfffffe          BL       __aeabi_dmul
00cdc4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5460
00cdc8  e59d0018          LDR      r0,[sp,#0x18]         ;5460
00cdcc  e5901030          LDR      r1,[r0,#0x30]         ;5460
00cdd0  e5902034          LDR      r2,[r0,#0x34]         ;5460
00cdd4  e1a00001          MOV      r0,r1                 ;5460
00cdd8  e58d0008          STR      r0,[sp,#8]            ;5460
00cddc  e58d200c          STR      r2,[sp,#0xc]          ;5460
00cde0  e1a02001          MOV      r2,r1                 ;5460
00cde4  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5460
00cde8  e59d300c          LDR      r3,[sp,#0xc]          ;5460
00cdec  ebfffffe          BL       __aeabi_drsub
00cdf0  e59d2018          LDR      r2,[sp,#0x18]         ;5460
00cdf4  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5460
                  |L1.52728|
00cdf8  e59d1024          LDR      r1,[sp,#0x24]         ;5462
00cdfc  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5462
00ce00  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5462
00ce04  e3a02000          MOV      r2,#0                 ;5462
00ce08  e1a03002          MOV      r3,r2                 ;5462
00ce0c  e1cd02d8          LDRD     r0,r1,[sp,#0x28]      ;5463
00ce10  ebfffffe          BL       __aeabi_cdcmpeq
00ce14  0a000029          BEQ      |L1.52928|
00ce18  e1cd04d0          LDRD     r0,r1,[sp,#0x40]      ;5465
00ce1c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5465
00ce20  ebfffffe          BL       __aeabi_dmul
00ce24  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5465
00ce28  e59d0020          LDR      r0,[sp,#0x20]         ;5465
00ce2c  e5901038          LDR      r1,[r0,#0x38]         ;5465
00ce30  e590203c          LDR      r2,[r0,#0x3c]         ;5465
00ce34  e58d1008          STR      r1,[sp,#8]            ;5465
00ce38  e58d200c          STR      r2,[sp,#0xc]          ;5465
00ce3c  e1a02001          MOV      r2,r1                 ;5465
00ce40  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5465
00ce44  e59d300c          LDR      r3,[sp,#0xc]          ;5465
00ce48  ebfffffe          BL       __aeabi_drsub
00ce4c  e59d2020          LDR      r2,[sp,#0x20]         ;5465
00ce50  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5465
00ce54  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5466
00ce58  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5466
00ce5c  ebfffffe          BL       __aeabi_dmul
00ce60  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5466
00ce64  e59d001c          LDR      r0,[sp,#0x1c]         ;5466
00ce68  e5901038          LDR      r1,[r0,#0x38]         ;5466
00ce6c  e590203c          LDR      r2,[r0,#0x3c]         ;5466
00ce70  e1a00001          MOV      r0,r1                 ;5466
00ce74  e58d0008          STR      r0,[sp,#8]            ;5466
00ce78  e58d200c          STR      r2,[sp,#0xc]          ;5466
00ce7c  e1a02001          MOV      r2,r1                 ;5466
00ce80  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5466
00ce84  e59d300c          LDR      r3,[sp,#0xc]          ;5466
00ce88  ebfffffe          BL       __aeabi_drsub
00ce8c  e59d201c          LDR      r2,[sp,#0x1c]         ;5466
00ce90  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5466
00ce94  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5467
00ce98  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5467
00ce9c  ebfffffe          BL       __aeabi_dmul
00cea0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5467
00cea4  e59d0018          LDR      r0,[sp,#0x18]         ;5467
00cea8  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5467
00ceac  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5467
00ceb0  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5467
00ceb4  ebfffffe          BL       __aeabi_dsub
00ceb8  e59d2018          LDR      r2,[sp,#0x18]         ;5467
00cebc  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5467
                  |L1.52928|
00cec0  e59d101c          LDR      r1,[sp,#0x1c]         ;5470
00cec4  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5470
00cec8  e3c11102          BIC      r1,r1,#0x80000000     ;5470
00cecc  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5470
00ced0  e59d1018          LDR      r1,[sp,#0x18]         ;5470
00ced4  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5470
00ced8  e3c11102          BIC      r1,r1,#0x80000000     ;5470
00cedc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5470
00cee0  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5470
00cee4  ebfffffe          BL       __aeabi_cdrcmple
00cee8  2a000006          BCS      |L1.53000|
00ceec  e59d0018          LDR      r0,[sp,#0x18]         ;5472
00cef0  e58d0014          STR      r0,[sp,#0x14]         ;5472
00cef4  e59d001c          LDR      r0,[sp,#0x1c]         ;5472
00cef8  e58d0018          STR      r0,[sp,#0x18]         ;5472
00cefc  e59d0014          LDR      r0,[sp,#0x14]         ;5472
00cf00  e58d001c          STR      r0,[sp,#0x1c]         ;5472
00cf04  e320f000          NOP                            ;5472
                  |L1.53000|
00cf08  e59d1020          LDR      r1,[sp,#0x20]         ;5474
00cf0c  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5474
00cf10  e3c11102          BIC      r1,r1,#0x80000000     ;5474
00cf14  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5474
00cf18  e59d101c          LDR      r1,[sp,#0x1c]         ;5474
00cf1c  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5474
00cf20  e3c11102          BIC      r1,r1,#0x80000000     ;5474
00cf24  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5474
00cf28  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5474
00cf2c  ebfffffe          BL       __aeabi_cdrcmple
00cf30  2a000006          BCS      |L1.53072|
00cf34  e59d001c          LDR      r0,[sp,#0x1c]         ;5476
00cf38  e58d0014          STR      r0,[sp,#0x14]         ;5476
00cf3c  e59d1020          LDR      r1,[sp,#0x20]         ;5476
00cf40  e58d101c          STR      r1,[sp,#0x1c]         ;5476
00cf44  e59d1014          LDR      r1,[sp,#0x14]         ;5476
00cf48  e58d1020          STR      r1,[sp,#0x20]         ;5476
00cf4c  e320f000          NOP                            ;5476
                  |L1.53072|
00cf50  e59d1020          LDR      r1,[sp,#0x20]         ;5478
00cf54  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5478
00cf58  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5478
00cf5c  e1a02000          MOV      r2,r0                 ;5478
00cf60  e1a03001          MOV      r3,r1                 ;5478
00cf64  e3a00000          MOV      r0,#0                 ;5478
00cf68  e1a01000          MOV      r1,r0                 ;5478
00cf6c  ebfffffe          BL       __aeabi_cdcmpeq
00cf70  1a000001          BNE      |L1.53116|
00cf74  e3a00000          MOV      r0,#0                 ;5480
00cf78  eafffe77          B        |L1.51548|
                  |L1.53116|
00cf7c  e59d1020          LDR      r1,[sp,#0x20]         ;5483
00cf80  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5483
00cf84  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5483
00cf88  e59d001c          LDR      r0,[sp,#0x1c]         ;5483
00cf8c  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5483
00cf90  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5483
00cf94  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5483
00cf98  ebfffffe          BL       __aeabi_ddiv
00cf9c  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5483
00cfa0  e59d1020          LDR      r1,[sp,#0x20]         ;5484
00cfa4  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5484
00cfa8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5484
00cfac  e59d1018          LDR      r1,[sp,#0x18]         ;5484
00cfb0  e1c100d8          LDRD     r0,r1,[r1,#8]         ;5484
00cfb4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5484
00cfb8  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5484
00cfbc  ebfffffe          BL       __aeabi_ddiv
00cfc0  e1cd03f0          STRD     r0,r1,[sp,#0x30]      ;5484
00cfc4  e59d1020          LDR      r1,[sp,#0x20]         ;5485
00cfc8  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5485
00cfcc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5485
00cfd0  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5485
00cfd4  ebfffffe          BL       __aeabi_dmul
00cfd8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5485
00cfdc  e59d001c          LDR      r0,[sp,#0x1c]         ;5485
00cfe0  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5485
00cfe4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5485
00cfe8  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5485
00cfec  ebfffffe          BL       __aeabi_dsub
00cff0  e59d201c          LDR      r2,[sp,#0x1c]         ;5485
00cff4  e1c201f0          STRD     r0,r1,[r2,#0x10]      ;5485
00cff8  e59d1020          LDR      r1,[sp,#0x20]         ;5486
00cffc  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5486
00d000  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5486
00d004  e1cd23d0          LDRD     r2,r3,[sp,#0x30]      ;5486
00d008  ebfffffe          BL       __aeabi_dmul
00d00c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5486
00d010  e59d0018          LDR      r0,[sp,#0x18]         ;5486
00d014  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5486
00d018  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5486
00d01c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5486
00d020  ebfffffe          BL       __aeabi_dsub
00d024  e59d2018          LDR      r2,[sp,#0x18]         ;5486
00d028  e1c201f0          STRD     r0,r1,[r2,#0x10]      ;5486
00d02c  e59d0020          LDR      r0,[sp,#0x20]         ;5487
00d030  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5487
00d034  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5487
00d038  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5487
00d03c  ebfffffe          BL       __aeabi_dmul
00d040  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5487
00d044  e59d001c          LDR      r0,[sp,#0x1c]         ;5487
00d048  e5901018          LDR      r1,[r0,#0x18]         ;5487
00d04c  e590201c          LDR      r2,[r0,#0x1c]         ;5487
00d050  e1a00001          MOV      r0,r1                 ;5487
00d054  e58d0008          STR      r0,[sp,#8]            ;5487
00d058  e58d200c          STR      r2,[sp,#0xc]          ;5487
00d05c  e1a02001          MOV      r2,r1                 ;5487
00d060  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5487
00d064  e59d300c          LDR      r3,[sp,#0xc]          ;5487
00d068  ebfffffe          BL       __aeabi_drsub
00d06c  e59d201c          LDR      r2,[sp,#0x1c]         ;5487
00d070  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5487
00d074  e59d0020          LDR      r0,[sp,#0x20]         ;5488
00d078  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5488
00d07c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5488
00d080  e1cd23d0          LDRD     r2,r3,[sp,#0x30]      ;5488
00d084  ebfffffe          BL       __aeabi_dmul
00d088  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5488
00d08c  e59d0018          LDR      r0,[sp,#0x18]         ;5488
00d090  e5901018          LDR      r1,[r0,#0x18]         ;5488
00d094  e590201c          LDR      r2,[r0,#0x1c]         ;5488
00d098  e1a00001          MOV      r0,r1                 ;5488
00d09c  e58d0008          STR      r0,[sp,#8]            ;5488
00d0a0  e58d200c          STR      r2,[sp,#0xc]          ;5488
00d0a4  e1a02001          MOV      r2,r1                 ;5488
00d0a8  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5488
00d0ac  e59d300c          LDR      r3,[sp,#0xc]          ;5488
00d0b0  ebfffffe          BL       __aeabi_drsub
00d0b4  e59d2018          LDR      r2,[sp,#0x18]         ;5488
00d0b8  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5488
00d0bc  e59d0020          LDR      r0,[sp,#0x20]         ;5489
00d0c0  e1c022d0          LDRD     r2,r3,[r0,#0x20]      ;5489
00d0c4  e1cd22f8          STRD     r2,r3,[sp,#0x28]      ;5489
00d0c8  e3a00000          MOV      r0,#0                 ;5490
00d0cc  e1a01000          MOV      r1,r0                 ;5490
00d0d0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5490
00d0d4  ebfffffe          BL       __aeabi_cdcmpeq
00d0d8  0a00001a          BEQ      |L1.53576|
00d0dc  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5492
00d0e0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5492
00d0e4  ebfffffe          BL       __aeabi_dmul
00d0e8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5492
00d0ec  e59d001c          LDR      r0,[sp,#0x1c]         ;5492
00d0f0  e5901020          LDR      r1,[r0,#0x20]         ;5492
00d0f4  e5902024          LDR      r2,[r0,#0x24]         ;5492
00d0f8  e1a00001          MOV      r0,r1                 ;5492
00d0fc  e58d0008          STR      r0,[sp,#8]            ;5492
00d100  e58d200c          STR      r2,[sp,#0xc]          ;5492
00d104  e1a02001          MOV      r2,r1                 ;5492
00d108  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5492
00d10c  e59d300c          LDR      r3,[sp,#0xc]          ;5492
00d110  ebfffffe          BL       __aeabi_drsub
00d114  e59d201c          LDR      r2,[sp,#0x1c]         ;5492
00d118  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5492
00d11c  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5493
00d120  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5493
00d124  ebfffffe          BL       __aeabi_dmul
00d128  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5493
00d12c  e59d0018          LDR      r0,[sp,#0x18]         ;5493
00d130  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5493
00d134  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5493
00d138  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5493
00d13c  ebfffffe          BL       __aeabi_dsub
00d140  e59d2018          LDR      r2,[sp,#0x18]         ;5493
00d144  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5493
                  |L1.53576|
00d148  e59d0020          LDR      r0,[sp,#0x20]         ;5495
00d14c  e1c022d8          LDRD     r2,r3,[r0,#0x28]      ;5495
00d150  e1cd22f8          STRD     r2,r3,[sp,#0x28]      ;5495
00d154  e3a00000          MOV      r0,#0                 ;5496
00d158  e1a01000          MOV      r1,r0                 ;5496
00d15c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5496
00d160  ebfffffe          BL       __aeabi_cdcmpeq
00d164  0a00001a          BEQ      |L1.53716|
00d168  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5498
00d16c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5498
00d170  ebfffffe          BL       __aeabi_dmul
00d174  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5498
00d178  e59d001c          LDR      r0,[sp,#0x1c]         ;5498
00d17c  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5498
00d180  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5498
00d184  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5498
00d188  ebfffffe          BL       __aeabi_dsub
00d18c  e59d201c          LDR      r2,[sp,#0x1c]         ;5498
00d190  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5498
00d194  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5499
00d198  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5499
00d19c  ebfffffe          BL       __aeabi_dmul
00d1a0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5499
00d1a4  e59d0018          LDR      r0,[sp,#0x18]         ;5499
00d1a8  e5901028          LDR      r1,[r0,#0x28]         ;5499
00d1ac  e590202c          LDR      r2,[r0,#0x2c]         ;5499
00d1b0  e1a00001          MOV      r0,r1                 ;5499
00d1b4  e58d0008          STR      r0,[sp,#8]            ;5499
00d1b8  e58d200c          STR      r2,[sp,#0xc]          ;5499
00d1bc  e1a02001          MOV      r2,r1                 ;5499
00d1c0  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5499
00d1c4  e59d300c          LDR      r3,[sp,#0xc]          ;5499
00d1c8  ebfffffe          BL       __aeabi_drsub
00d1cc  e59d2018          LDR      r2,[sp,#0x18]         ;5499
00d1d0  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5499
                  |L1.53716|
00d1d4  e59d0020          LDR      r0,[sp,#0x20]         ;5501
00d1d8  e1c023d0          LDRD     r2,r3,[r0,#0x30]      ;5501
00d1dc  e1cd22f8          STRD     r2,r3,[sp,#0x28]      ;5501
00d1e0  e3a00000          MOV      r0,#0                 ;5502
00d1e4  e1a01000          MOV      r1,r0                 ;5502
00d1e8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5502
00d1ec  ebfffffe          BL       __aeabi_cdcmpeq
00d1f0  0a00001a          BEQ      |L1.53856|
00d1f4  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5504
00d1f8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5504
00d1fc  ebfffffe          BL       __aeabi_dmul
00d200  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5504
00d204  e59d001c          LDR      r0,[sp,#0x1c]         ;5504
00d208  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5504
00d20c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5504
00d210  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5504
00d214  ebfffffe          BL       __aeabi_dsub
00d218  e59d201c          LDR      r2,[sp,#0x1c]         ;5504
00d21c  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5504
00d220  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5505
00d224  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5505
00d228  ebfffffe          BL       __aeabi_dmul
00d22c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5505
00d230  e59d0018          LDR      r0,[sp,#0x18]         ;5505
00d234  e5901030          LDR      r1,[r0,#0x30]         ;5505
00d238  e5902034          LDR      r2,[r0,#0x34]         ;5505
00d23c  e1a00001          MOV      r0,r1                 ;5505
00d240  e58d0008          STR      r0,[sp,#8]            ;5505
00d244  e58d200c          STR      r2,[sp,#0xc]          ;5505
00d248  e1a02001          MOV      r2,r1                 ;5505
00d24c  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5505
00d250  e59d300c          LDR      r3,[sp,#0xc]          ;5505
00d254  ebfffffe          BL       __aeabi_drsub
00d258  e59d2018          LDR      r2,[sp,#0x18]         ;5505
00d25c  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5505
                  |L1.53856|
00d260  e59d0020          LDR      r0,[sp,#0x20]         ;5507
00d264  e1c023d8          LDRD     r2,r3,[r0,#0x38]      ;5507
00d268  e1cd22f8          STRD     r2,r3,[sp,#0x28]      ;5507
00d26c  e3a00000          MOV      r0,#0                 ;5508
00d270  e1a01000          MOV      r1,r0                 ;5508
00d274  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5508
00d278  ebfffffe          BL       __aeabi_cdcmpeq
00d27c  0a000015          BEQ      |L1.53976|
00d280  e1cd03d8          LDRD     r0,r1,[sp,#0x38]      ;5510
00d284  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5510
00d288  ebfffffe          BL       __aeabi_dmul
00d28c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5510
00d290  e59d101c          LDR      r1,[sp,#0x1c]         ;5510
00d294  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5510
00d298  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5510
00d29c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5510
00d2a0  ebfffffe          BL       __aeabi_dsub
00d2a4  e59d201c          LDR      r2,[sp,#0x1c]         ;5510
00d2a8  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5510
00d2ac  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5511
00d2b0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5511
00d2b4  ebfffffe          BL       __aeabi_dmul
00d2b8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5511
00d2bc  e59d1018          LDR      r1,[sp,#0x18]         ;5511
00d2c0  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5511
00d2c4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5511
00d2c8  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5511
00d2cc  ebfffffe          BL       __aeabi_dsub
00d2d0  e59d2018          LDR      r2,[sp,#0x18]         ;5511
00d2d4  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5511
                  |L1.53976|
00d2d8  e59d101c          LDR      r1,[sp,#0x1c]         ;5514
00d2dc  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5514
00d2e0  e3c11102          BIC      r1,r1,#0x80000000     ;5514
00d2e4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5514
00d2e8  e59d1018          LDR      r1,[sp,#0x18]         ;5514
00d2ec  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5514
00d2f0  e3c11102          BIC      r1,r1,#0x80000000     ;5514
00d2f4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5514
00d2f8  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5514
00d2fc  ebfffffe          BL       __aeabi_cdrcmple
00d300  2a000006          BCS      |L1.54048|
00d304  e59d0018          LDR      r0,[sp,#0x18]         ;5516
00d308  e58d0014          STR      r0,[sp,#0x14]         ;5516
00d30c  e59d101c          LDR      r1,[sp,#0x1c]         ;5516
00d310  e58d1018          STR      r1,[sp,#0x18]         ;5516
00d314  e59d1014          LDR      r1,[sp,#0x14]         ;5516
00d318  e58d101c          STR      r1,[sp,#0x1c]         ;5516
00d31c  e320f000          NOP                            ;5516
                  |L1.54048|
00d320  e59d001c          LDR      r0,[sp,#0x1c]         ;5518
00d324  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5518
00d328  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5518
00d32c  e1a02000          MOV      r2,r0                 ;5518
00d330  e1a03001          MOV      r3,r1                 ;5518
00d334  e3a00000          MOV      r0,#0                 ;5518
00d338  e1a01000          MOV      r1,r0                 ;5518
00d33c  ebfffffe          BL       __aeabi_cdcmpeq
00d340  1a000001          BNE      |L1.54092|
00d344  e3a00000          MOV      r0,#0                 ;5520
00d348  eafffd83          B        |L1.51548|
                  |L1.54092|
00d34c  e59d101c          LDR      r1,[sp,#0x1c]         ;5523
00d350  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5523
00d354  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5523
00d358  e59d0018          LDR      r0,[sp,#0x18]         ;5523
00d35c  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5523
00d360  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5523
00d364  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5523
00d368  ebfffffe          BL       __aeabi_ddiv
00d36c  e1cd03f0          STRD     r0,r1,[sp,#0x30]      ;5523
00d370  e59d001c          LDR      r0,[sp,#0x1c]         ;5524
00d374  e5901018          LDR      r1,[r0,#0x18]         ;5524
00d378  e590201c          LDR      r2,[r0,#0x1c]         ;5524
00d37c  e58d1008          STR      r1,[sp,#8]            ;5524
00d380  e58d200c          STR      r2,[sp,#0xc]          ;5524
00d384  e1a02001          MOV      r2,r1                 ;5524
00d388  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5524
00d38c  e59d300c          LDR      r3,[sp,#0xc]          ;5524
00d390  ebfffffe          BL       __aeabi_dmul
00d394  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5524
00d398  e59d0018          LDR      r0,[sp,#0x18]         ;5524
00d39c  e5901018          LDR      r1,[r0,#0x18]         ;5524
00d3a0  e590201c          LDR      r2,[r0,#0x1c]         ;5524
00d3a4  e58d1008          STR      r1,[sp,#8]            ;5524
00d3a8  e58d200c          STR      r2,[sp,#0xc]          ;5524
00d3ac  e1a02001          MOV      r2,r1                 ;5524
00d3b0  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5524
00d3b4  e59d300c          LDR      r3,[sp,#0xc]          ;5524
00d3b8  ebfffffe          BL       __aeabi_drsub
00d3bc  e59d2018          LDR      r2,[sp,#0x18]         ;5524
00d3c0  e1c201f8          STRD     r0,r1,[r2,#0x18]      ;5524
00d3c4  e59d001c          LDR      r0,[sp,#0x1c]         ;5525
00d3c8  e5901020          LDR      r1,[r0,#0x20]         ;5525
00d3cc  e5902024          LDR      r2,[r0,#0x24]         ;5525
00d3d0  e1a00001          MOV      r0,r1                 ;5525
00d3d4  e58d0008          STR      r0,[sp,#8]            ;5525
00d3d8  e58d200c          STR      r2,[sp,#0xc]          ;5525
00d3dc  e1a02001          MOV      r2,r1                 ;5525
00d3e0  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5525
00d3e4  e59d300c          LDR      r3,[sp,#0xc]          ;5525
00d3e8  ebfffffe          BL       __aeabi_dmul
00d3ec  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5525
00d3f0  e59d0018          LDR      r0,[sp,#0x18]         ;5525
00d3f4  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5525
00d3f8  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5525
00d3fc  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5525
00d400  ebfffffe          BL       __aeabi_dsub
00d404  e59d2018          LDR      r2,[sp,#0x18]         ;5525
00d408  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5525
00d40c  e59d001c          LDR      r0,[sp,#0x1c]         ;5526
00d410  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5526
00d414  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5526
00d418  e1cd23d0          LDRD     r2,r3,[sp,#0x30]      ;5526
00d41c  ebfffffe          BL       __aeabi_dmul
00d420  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5526
00d424  e59d0018          LDR      r0,[sp,#0x18]         ;5526
00d428  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5526
00d42c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5526
00d430  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5526
00d434  ebfffffe          BL       __aeabi_dsub
00d438  e59d2018          LDR      r2,[sp,#0x18]         ;5526
00d43c  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5526
00d440  e59d001c          LDR      r0,[sp,#0x1c]         ;5527
00d444  e5901030          LDR      r1,[r0,#0x30]         ;5527
00d448  e5902034          LDR      r2,[r0,#0x34]         ;5527
00d44c  e1a00001          MOV      r0,r1                 ;5527
00d450  e58d0008          STR      r0,[sp,#8]            ;5527
00d454  e58d200c          STR      r2,[sp,#0xc]          ;5527
00d458  e1a02001          MOV      r2,r1                 ;5527
00d45c  e1cd03d0          LDRD     r0,r1,[sp,#0x30]      ;5527
00d460  e59d300c          LDR      r3,[sp,#0xc]          ;5527
00d464  ebfffffe          BL       __aeabi_dmul
00d468  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5527
00d46c  e59d0018          LDR      r0,[sp,#0x18]         ;5527
00d470  e5901030          LDR      r1,[r0,#0x30]         ;5527
00d474  e5902034          LDR      r2,[r0,#0x34]         ;5527
00d478  e1a00001          MOV      r0,r1                 ;5527
00d47c  e58d0008          STR      r0,[sp,#8]            ;5527
00d480  e58d200c          STR      r2,[sp,#0xc]          ;5527
00d484  e1a02001          MOV      r2,r1                 ;5527
00d488  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5527
00d48c  e59d300c          LDR      r3,[sp,#0xc]          ;5527
00d490  ebfffffe          BL       __aeabi_drsub
00d494  e59d2018          LDR      r2,[sp,#0x18]         ;5527
00d498  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5527
00d49c  e59d001c          LDR      r0,[sp,#0x1c]         ;5528
00d4a0  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5528
00d4a4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5528
00d4a8  e1cd23d0          LDRD     r2,r3,[sp,#0x30]      ;5528
00d4ac  ebfffffe          BL       __aeabi_dmul
00d4b0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5528
00d4b4  e59d0018          LDR      r0,[sp,#0x18]         ;5528
00d4b8  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5528
00d4bc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5528
00d4c0  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5528
00d4c4  ebfffffe          BL       __aeabi_dsub
00d4c8  e59d2018          LDR      r2,[sp,#0x18]         ;5528
00d4cc  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5528
00d4d0  e59d1018          LDR      r1,[sp,#0x18]         ;5530
00d4d4  e1c101d8          LDRD     r0,r1,[r1,#0x18]      ;5530
00d4d8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5530
00d4dc  e1a02000          MOV      r2,r0                 ;5530
00d4e0  e1a03001          MOV      r3,r1                 ;5530
00d4e4  e3a00000          MOV      r0,#0                 ;5530
00d4e8  e1a01000          MOV      r1,r0                 ;5530
00d4ec  ebfffffe          BL       __aeabi_cdcmpeq
00d4f0  1a000001          BNE      |L1.54524|
00d4f4  e3a00000          MOV      r0,#0                 ;5532
00d4f8  eafffd17          B        |L1.51548|
                  |L1.54524|
00d4fc  e59d0018          LDR      r0,[sp,#0x18]         ;5534
00d500  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5534
00d504  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5534
00d508  e1a02000          MOV      r2,r0                 ;5534
00d50c  e1a03001          MOV      r3,r1                 ;5534
00d510  e3a00000          MOV      r0,#0                 ;5534
00d514  e59f10e8          LDR      r1,|L1.54788|
00d518  ebfffffe          BL       __aeabi_ddiv
00d51c  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5534
00d520  e59d0018          LDR      r0,[sp,#0x18]         ;5535
00d524  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5535
00d528  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5535
00d52c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5535
00d530  ebfffffe          BL       __aeabi_dmul
00d534  e59d2018          LDR      r2,[sp,#0x18]         ;5535
00d538  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5535
00d53c  e59d0018          LDR      r0,[sp,#0x18]         ;5536
00d540  e5901028          LDR      r1,[r0,#0x28]         ;5536
00d544  e590202c          LDR      r2,[r0,#0x2c]         ;5536
00d548  e58d1010          STR      r1,[sp,#0x10]         ;5536
00d54c  e58d2014          STR      r2,[sp,#0x14]         ;5536
00d550  e1a00001          MOV      r0,r1                 ;5536
00d554  e59d1014          LDR      r1,[sp,#0x14]         ;5536
00d558  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5536
00d55c  ebfffffe          BL       __aeabi_dmul
00d560  e59d2018          LDR      r2,[sp,#0x18]         ;5536
00d564  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5536
00d568  e59d0018          LDR      r0,[sp,#0x18]         ;5537
00d56c  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5537
00d570  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5537
00d574  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5537
00d578  ebfffffe          BL       __aeabi_dmul
00d57c  e59d2018          LDR      r2,[sp,#0x18]         ;5537
00d580  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5537
00d584  e59d0018          LDR      r0,[sp,#0x18]         ;5538
00d588  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5538
00d58c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5538
00d590  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5538
00d594  ebfffffe          BL       __aeabi_dmul
00d598  e59d2018          LDR      r2,[sp,#0x18]         ;5538
00d59c  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5538
00d5a0  e59d001c          LDR      r0,[sp,#0x1c]         ;5539
00d5a4  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5539
00d5a8  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5539
00d5ac  e59d001c          LDR      r0,[sp,#0x1c]         ;5540
00d5b0  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5540
00d5b4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5540
00d5b8  e1a02000          MOV      r2,r0                 ;5540
00d5bc  e1a03001          MOV      r3,r1                 ;5540
00d5c0  e3a00000          MOV      r0,#0                 ;5540
00d5c4  e59f1038          LDR      r1,|L1.54788|
00d5c8  ebfffffe          BL       __aeabi_ddiv
00d5cc  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5540
00d5d0  e59d0018          LDR      r0,[sp,#0x18]         ;5541
00d5d4  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5541
00d5d8  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5541
00d5dc  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5541
00d5e0  ebfffffe          BL       __aeabi_dmul
00d5e4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5541
00d5e8  e59d001c          LDR      r0,[sp,#0x1c]         ;5541
00d5ec  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5541
00d5f0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5541
00d5f4  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5541
00d5f8  ebfffffe          BL       __aeabi_dsub
00d5fc  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5541
00d600  ea000000          B        |L1.54792|
                  |L1.54788|
                          DCD      0x3ff00000
                  |L1.54792|
00d608  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5541
00d60c  ebfffffe          BL       __aeabi_dmul
00d610  e59d201c          LDR      r2,[sp,#0x1c]         ;5541
00d614  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5541
00d618  e59d0018          LDR      r0,[sp,#0x18]         ;5542
00d61c  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5542
00d620  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5542
00d624  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5542
00d628  ebfffffe          BL       __aeabi_dmul
00d62c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5542
00d630  e59d001c          LDR      r0,[sp,#0x1c]         ;5542
00d634  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5542
00d638  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5542
00d63c  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5542
00d640  ebfffffe          BL       __aeabi_dsub
00d644  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5542
00d648  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5542
00d64c  ebfffffe          BL       __aeabi_dmul
00d650  e59d201c          LDR      r2,[sp,#0x1c]         ;5542
00d654  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5542
00d658  e59d0018          LDR      r0,[sp,#0x18]         ;5543
00d65c  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5543
00d660  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5543
00d664  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5543
00d668  ebfffffe          BL       __aeabi_dmul
00d66c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5543
00d670  e59d101c          LDR      r1,[sp,#0x1c]         ;5543
00d674  e1c103d0          LDRD     r0,r1,[r1,#0x30]      ;5543
00d678  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5543
00d67c  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5543
00d680  ebfffffe          BL       __aeabi_dsub
00d684  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5543
00d688  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5543
00d68c  ebfffffe          BL       __aeabi_dmul
00d690  e59d201c          LDR      r2,[sp,#0x1c]         ;5543
00d694  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5543
00d698  e59d0018          LDR      r0,[sp,#0x18]         ;5544
00d69c  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5544
00d6a0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5544
00d6a4  e1cd23d8          LDRD     r2,r3,[sp,#0x38]      ;5544
00d6a8  ebfffffe          BL       __aeabi_dmul
00d6ac  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5544
00d6b0  e59d001c          LDR      r0,[sp,#0x1c]         ;5544
00d6b4  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5544
00d6b8  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5544
00d6bc  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5544
00d6c0  ebfffffe          BL       __aeabi_dsub
00d6c4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5544
00d6c8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5544
00d6cc  ebfffffe          BL       __aeabi_dmul
00d6d0  e59d201c          LDR      r2,[sp,#0x1c]         ;5544
00d6d4  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5544
00d6d8  e59d0020          LDR      r0,[sp,#0x20]         ;5545
00d6dc  e1c001d8          LDRD     r0,r1,[r0,#0x18]      ;5545
00d6e0  e1cd04f0          STRD     r0,r1,[sp,#0x40]      ;5545
00d6e4  e59d0018          LDR      r0,[sp,#0x18]         ;5546
00d6e8  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5546
00d6ec  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5546
00d6f0  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5546
00d6f4  ebfffffe          BL       __aeabi_dmul
00d6f8  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5546
00d6fc  e59d0020          LDR      r0,[sp,#0x20]         ;5546
00d700  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5546
00d704  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5546
00d708  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5546
00d70c  ebfffffe          BL       __aeabi_dsub
00d710  e59d2020          LDR      r2,[sp,#0x20]         ;5546
00d714  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5546
00d718  e59d1018          LDR      r1,[sp,#0x18]         ;5547
00d71c  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5547
00d720  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5547
00d724  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5547
00d728  ebfffffe          BL       __aeabi_dmul
00d72c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5547
00d730  e59d0020          LDR      r0,[sp,#0x20]         ;5547
00d734  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5547
00d738  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5547
00d73c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5547
00d740  ebfffffe          BL       __aeabi_dsub
00d744  e59d2020          LDR      r2,[sp,#0x20]         ;5547
00d748  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5547
00d74c  e59d0018          LDR      r0,[sp,#0x18]         ;5548
00d750  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5548
00d754  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5548
00d758  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5548
00d75c  ebfffffe          BL       __aeabi_dmul
00d760  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5548
00d764  e59d0020          LDR      r0,[sp,#0x20]         ;5548
00d768  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5548
00d76c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5548
00d770  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5548
00d774  ebfffffe          BL       __aeabi_dsub
00d778  e59d2020          LDR      r2,[sp,#0x20]         ;5548
00d77c  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5548
00d780  e59d1018          LDR      r1,[sp,#0x18]         ;5549
00d784  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5549
00d788  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5549
00d78c  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5549
00d790  ebfffffe          BL       __aeabi_dmul
00d794  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5549
00d798  e59d0020          LDR      r0,[sp,#0x20]         ;5549
00d79c  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5549
00d7a0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5549
00d7a4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5549
00d7a8  ebfffffe          BL       __aeabi_dsub
00d7ac  e59d2020          LDR      r2,[sp,#0x20]         ;5549
00d7b0  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5549
00d7b4  e59d1024          LDR      r1,[sp,#0x24]         ;5550
00d7b8  e1c101d8          LDRD     r0,r1,[r1,#0x18]      ;5550
00d7bc  e1cd04f8          STRD     r0,r1,[sp,#0x48]      ;5550
00d7c0  e59d1018          LDR      r1,[sp,#0x18]         ;5551
00d7c4  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5551
00d7c8  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5551
00d7cc  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5551
00d7d0  ebfffffe          BL       __aeabi_dmul
00d7d4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5551
00d7d8  e59d0024          LDR      r0,[sp,#0x24]         ;5551
00d7dc  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5551
00d7e0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5551
00d7e4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5551
00d7e8  ebfffffe          BL       __aeabi_dsub
00d7ec  e59d2024          LDR      r2,[sp,#0x24]         ;5551
00d7f0  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5551
00d7f4  e59d0018          LDR      r0,[sp,#0x18]         ;5552
00d7f8  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5552
00d7fc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5552
00d800  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5552
00d804  ebfffffe          BL       __aeabi_dmul
00d808  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5552
00d80c  e59d1024          LDR      r1,[sp,#0x24]         ;5552
00d810  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5552
00d814  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5552
00d818  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5552
00d81c  ebfffffe          BL       __aeabi_dsub
00d820  e59d2024          LDR      r2,[sp,#0x24]         ;5552
00d824  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5552
00d828  e59d0018          LDR      r0,[sp,#0x18]         ;5553
00d82c  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5553
00d830  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5553
00d834  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5553
00d838  ebfffffe          BL       __aeabi_dmul
00d83c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5553
00d840  e59d0024          LDR      r0,[sp,#0x24]         ;5553
00d844  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5553
00d848  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5553
00d84c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5553
00d850  ebfffffe          BL       __aeabi_dsub
00d854  e59d2024          LDR      r2,[sp,#0x24]         ;5553
00d858  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5553
00d85c  e59d1018          LDR      r1,[sp,#0x18]         ;5554
00d860  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5554
00d864  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5554
00d868  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5554
00d86c  ebfffffe          BL       __aeabi_dmul
00d870  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5554
00d874  e59d0024          LDR      r0,[sp,#0x24]         ;5554
00d878  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5554
00d87c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5554
00d880  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5554
00d884  ebfffffe          BL       __aeabi_dsub
00d888  e59d2024          LDR      r2,[sp,#0x24]         ;5554
00d88c  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5554
00d890  e59d1020          LDR      r1,[sp,#0x20]         ;5555
00d894  e1c101d0          LDRD     r0,r1,[r1,#0x10]      ;5555
00d898  e1cd04f0          STRD     r0,r1,[sp,#0x40]      ;5555
00d89c  e59d0020          LDR      r0,[sp,#0x20]         ;5556
00d8a0  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5556
00d8a4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5556
00d8a8  e1a02000          MOV      r2,r0                 ;5556
00d8ac  e1a03001          MOV      r3,r1                 ;5556
00d8b0  e3a00000          MOV      r0,#0                 ;5556
00d8b4  e51f12b8          LDR      r1,|L1.54788|
00d8b8  ebfffffe          BL       __aeabi_ddiv
00d8bc  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5556
00d8c0  e59d101c          LDR      r1,[sp,#0x1c]         ;5557
00d8c4  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5557
00d8c8  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5557
00d8cc  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5557
00d8d0  ebfffffe          BL       __aeabi_dmul
00d8d4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5557
00d8d8  e59d0020          LDR      r0,[sp,#0x20]         ;5557
00d8dc  e1c002d0          LDRD     r0,r1,[r0,#0x20]      ;5557
00d8e0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5557
00d8e4  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5557
00d8e8  ebfffffe          BL       __aeabi_dsub
00d8ec  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5557
00d8f0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5557
00d8f4  ebfffffe          BL       __aeabi_dmul
00d8f8  e59d2020          LDR      r2,[sp,#0x20]         ;5557
00d8fc  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5557
00d900  e59d001c          LDR      r0,[sp,#0x1c]         ;5558
00d904  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5558
00d908  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5558
00d90c  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5558
00d910  ebfffffe          BL       __aeabi_dmul
00d914  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5558
00d918  e59d1020          LDR      r1,[sp,#0x20]         ;5558
00d91c  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5558
00d920  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5558
00d924  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5558
00d928  ebfffffe          BL       __aeabi_dsub
00d92c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5558
00d930  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5558
00d934  ebfffffe          BL       __aeabi_dmul
00d938  e59d2020          LDR      r2,[sp,#0x20]         ;5558
00d93c  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5558
00d940  e59d101c          LDR      r1,[sp,#0x1c]         ;5559
00d944  e1c103d0          LDRD     r0,r1,[r1,#0x30]      ;5559
00d948  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5559
00d94c  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5559
00d950  ebfffffe          BL       __aeabi_dmul
00d954  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5559
00d958  e59d0020          LDR      r0,[sp,#0x20]         ;5559
00d95c  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5559
00d960  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5559
00d964  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5559
00d968  ebfffffe          BL       __aeabi_dsub
00d96c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5559
00d970  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5559
00d974  ebfffffe          BL       __aeabi_dmul
00d978  e59d2020          LDR      r2,[sp,#0x20]         ;5559
00d97c  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5559
00d980  e59d001c          LDR      r0,[sp,#0x1c]         ;5560
00d984  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5560
00d988  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5560
00d98c  e1cd24d0          LDRD     r2,r3,[sp,#0x40]      ;5560
00d990  ebfffffe          BL       __aeabi_dmul
00d994  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5560
00d998  e59d0020          LDR      r0,[sp,#0x20]         ;5560
00d99c  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5560
00d9a0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5560
00d9a4  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5560
00d9a8  ebfffffe          BL       __aeabi_dsub
00d9ac  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5560
00d9b0  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5560
00d9b4  ebfffffe          BL       __aeabi_dmul
00d9b8  e59d2020          LDR      r2,[sp,#0x20]         ;5560
00d9bc  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5560
00d9c0  e59d0024          LDR      r0,[sp,#0x24]         ;5561
00d9c4  e1c001d0          LDRD     r0,r1,[r0,#0x10]      ;5561
00d9c8  e1cd04f8          STRD     r0,r1,[sp,#0x48]      ;5561
00d9cc  e59d101c          LDR      r1,[sp,#0x1c]         ;5562
00d9d0  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5562
00d9d4  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5562
00d9d8  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5562
00d9dc  ebfffffe          BL       __aeabi_dmul
00d9e0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5562
00d9e4  e59d0024          LDR      r0,[sp,#0x24]         ;5562
00d9e8  e5901020          LDR      r1,[r0,#0x20]         ;5562
00d9ec  e5902024          LDR      r2,[r0,#0x24]         ;5562
00d9f0  e58d1008          STR      r1,[sp,#8]            ;5562
00d9f4  e58d200c          STR      r2,[sp,#0xc]          ;5562
00d9f8  e1a02001          MOV      r2,r1                 ;5562
00d9fc  e1cd01d0          LDRD     r0,r1,[sp,#0x10]      ;5562
00da00  e59d300c          LDR      r3,[sp,#0xc]          ;5562
00da04  ebfffffe          BL       __aeabi_drsub
00da08  e59d2024          LDR      r2,[sp,#0x24]         ;5562
00da0c  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5562
00da10  e59d001c          LDR      r0,[sp,#0x1c]         ;5563
00da14  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5563
00da18  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5563
00da1c  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5563
00da20  ebfffffe          BL       __aeabi_dmul
00da24  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5563
00da28  e59d1024          LDR      r1,[sp,#0x24]         ;5563
00da2c  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5563
00da30  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5563
00da34  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5563
00da38  ebfffffe          BL       __aeabi_dsub
00da3c  e59d2024          LDR      r2,[sp,#0x24]         ;5563
00da40  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5563
00da44  e59d001c          LDR      r0,[sp,#0x1c]         ;5564
00da48  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5564
00da4c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5564
00da50  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5564
00da54  ebfffffe          BL       __aeabi_dmul
00da58  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5564
00da5c  e59d0024          LDR      r0,[sp,#0x24]         ;5564
00da60  e1c003d0          LDRD     r0,r1,[r0,#0x30]      ;5564
00da64  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5564
00da68  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5564
00da6c  ebfffffe          BL       __aeabi_dsub
00da70  e59d2024          LDR      r2,[sp,#0x24]         ;5564
00da74  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5564
00da78  e59d101c          LDR      r1,[sp,#0x1c]         ;5565
00da7c  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5565
00da80  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5565
00da84  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5565
00da88  ebfffffe          BL       __aeabi_dmul
00da8c  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5565
00da90  e59d0024          LDR      r0,[sp,#0x24]         ;5565
00da94  e1c003d8          LDRD     r0,r1,[r0,#0x38]      ;5565
00da98  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5565
00da9c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]      ;5565
00daa0  ebfffffe          BL       __aeabi_dsub
00daa4  e59d2024          LDR      r2,[sp,#0x24]         ;5565
00daa8  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5565
00daac  e59d0024          LDR      r0,[sp,#0x24]         ;5566
00dab0  e1c000d8          LDRD     r0,r1,[r0,#8]         ;5566
00dab4  e1cd04f8          STRD     r0,r1,[sp,#0x48]      ;5566
00dab8  e59d1024          LDR      r1,[sp,#0x24]         ;5567
00dabc  e1c100d0          LDRD     r0,r1,[r1,#0]         ;5567
00dac0  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5567
00dac4  e1a02000          MOV      r2,r0                 ;5567
00dac8  e1a03001          MOV      r3,r1                 ;5567
00dacc  e3a00000          MOV      r0,#0                 ;5567
00dad0  e51f14d4          LDR      r1,|L1.54788|
00dad4  ebfffffe          BL       __aeabi_ddiv
00dad8  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5567
00dadc  e59d1020          LDR      r1,[sp,#0x20]         ;5568
00dae0  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5568
00dae4  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5568
00dae8  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5568
00daec  ebfffffe          BL       __aeabi_dmul
00daf0  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5568
00daf4  e59d1024          LDR      r1,[sp,#0x24]         ;5568
00daf8  e1c102d0          LDRD     r0,r1,[r1,#0x20]      ;5568
00dafc  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5568
00db00  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5568
00db04  ebfffffe          BL       __aeabi_dsub
00db08  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5568
00db0c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5568
00db10  ebfffffe          BL       __aeabi_dmul
00db14  e59d2024          LDR      r2,[sp,#0x24]         ;5568
00db18  e1c202f0          STRD     r0,r1,[r2,#0x20]      ;5568
00db1c  e59d0020          LDR      r0,[sp,#0x20]         ;5569
00db20  e1c002d8          LDRD     r0,r1,[r0,#0x28]      ;5569
00db24  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5569
00db28  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5569
00db2c  ebfffffe          BL       __aeabi_dmul
00db30  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5569
00db34  e59d1024          LDR      r1,[sp,#0x24]         ;5569
00db38  e1c102d8          LDRD     r0,r1,[r1,#0x28]      ;5569
00db3c  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5569
00db40  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5569
00db44  ebfffffe          BL       __aeabi_dsub
00db48  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5569
00db4c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5569
00db50  ebfffffe          BL       __aeabi_dmul
00db54  e59d2024          LDR      r2,[sp,#0x24]         ;5569
00db58  e1c202f8          STRD     r0,r1,[r2,#0x28]      ;5569
00db5c  e59d0020          LDR      r0,[sp,#0x20]         ;5570
00db60  e5901030          LDR      r1,[r0,#0x30]         ;5570
00db64  e5902034          LDR      r2,[r0,#0x34]         ;5570
00db68  e1a00001          MOV      r0,r1                 ;5570
00db6c  e88d0005          STM      sp,{r0,r2}            ;5570
00db70  e59d1004          LDR      r1,[sp,#4]            ;5570
00db74  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5570
00db78  ebfffffe          BL       __aeabi_dmul
00db7c  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5570
00db80  e59d1024          LDR      r1,[sp,#0x24]         ;5570
00db84  e1c103d0          LDRD     r0,r1,[r1,#0x30]      ;5570
00db88  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5570
00db8c  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5570
00db90  ebfffffe          BL       __aeabi_dsub
00db94  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5570
00db98  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5570
00db9c  ebfffffe          BL       __aeabi_dmul
00dba0  e59d2024          LDR      r2,[sp,#0x24]         ;5570
00dba4  e1c203f0          STRD     r0,r1,[r2,#0x30]      ;5570
00dba8  e59d1020          LDR      r1,[sp,#0x20]         ;5571
00dbac  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5571
00dbb0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5571
00dbb4  e1cd24d8          LDRD     r2,r3,[sp,#0x48]      ;5571
00dbb8  ebfffffe          BL       __aeabi_dmul
00dbbc  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5571
00dbc0  e59d1024          LDR      r1,[sp,#0x24]         ;5571
00dbc4  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5571
00dbc8  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5571
00dbcc  e1cd20d8          LDRD     r2,r3,[sp,#8]         ;5571
00dbd0  ebfffffe          BL       __aeabi_dsub
00dbd4  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5571
00dbd8  e1cd22d8          LDRD     r2,r3,[sp,#0x28]      ;5571
00dbdc  ebfffffe          BL       __aeabi_dmul
00dbe0  e59d2024          LDR      r2,[sp,#0x24]         ;5571
00dbe4  e1c203f8          STRD     r0,r1,[r2,#0x38]      ;5571
00dbe8  e59d0024          LDR      r0,[sp,#0x24]         ;5572
00dbec  e5901024          LDR      r1,[r0,#0x24]         ;5572
00dbf0  e5902020          LDR      r2,[r0,#0x20]         ;5572
00dbf4  e59d0158          LDR      r0,[sp,#0x158]        ;5572
00dbf8  e5801004          STR      r1,[r0,#4]            ;5572
00dbfc  e5802000          STR      r2,[r0,#0]            ;5572
00dc00  e59d0024          LDR      r0,[sp,#0x24]         ;5573
00dc04  e590102c          LDR      r1,[r0,#0x2c]         ;5573
00dc08  e5902028          LDR      r2,[r0,#0x28]         ;5573
00dc0c  e59d0158          LDR      r0,[sp,#0x158]        ;5573
00dc10  e5801024          STR      r1,[r0,#0x24]         ;5573
00dc14  e5802020          STR      r2,[r0,#0x20]         ;5573
00dc18  e59d0024          LDR      r0,[sp,#0x24]         ;5574
00dc1c  e5901034          LDR      r1,[r0,#0x34]         ;5574
00dc20  e5902030          LDR      r2,[r0,#0x30]         ;5574
00dc24  e59d0158          LDR      r0,[sp,#0x158]        ;5574
00dc28  e5801044          STR      r1,[r0,#0x44]         ;5574
00dc2c  e5802040          STR      r2,[r0,#0x40]         ;5574
00dc30  e59d0024          LDR      r0,[sp,#0x24]         ;5575
00dc34  e590103c          LDR      r1,[r0,#0x3c]         ;5575
00dc38  e5902038          LDR      r2,[r0,#0x38]         ;5575
00dc3c  e59d0158          LDR      r0,[sp,#0x158]        ;5575
00dc40  e5801064          STR      r1,[r0,#0x64]         ;5575
00dc44  e5802060          STR      r2,[r0,#0x60]         ;5575
00dc48  e59d0020          LDR      r0,[sp,#0x20]         ;5576
00dc4c  e5901024          LDR      r1,[r0,#0x24]         ;5576
00dc50  e5902020          LDR      r2,[r0,#0x20]         ;5576
00dc54  e59d0158          LDR      r0,[sp,#0x158]        ;5576
00dc58  e580100c          STR      r1,[r0,#0xc]          ;5576
00dc5c  e5802008          STR      r2,[r0,#8]            ;5576
00dc60  e59d0020          LDR      r0,[sp,#0x20]         ;5577
00dc64  e5901028          LDR      r1,[r0,#0x28]         ;5577
00dc68  e590202c          LDR      r2,[r0,#0x2c]         ;5577
00dc6c  e59d0158          LDR      r0,[sp,#0x158]        ;5577
00dc70  e5801028          STR      r1,[r0,#0x28]         ;5577
00dc74  e580202c          STR      r2,[r0,#0x2c]         ;5577
00dc78  e59d0020          LDR      r0,[sp,#0x20]         ;5578
00dc7c  e5901034          LDR      r1,[r0,#0x34]         ;5578
00dc80  e5902030          LDR      r2,[r0,#0x30]         ;5578
00dc84  e59d0158          LDR      r0,[sp,#0x158]        ;5578
00dc88  e580104c          STR      r1,[r0,#0x4c]         ;5578
00dc8c  e5802048          STR      r2,[r0,#0x48]         ;5578
00dc90  e59d0020          LDR      r0,[sp,#0x20]         ;5579
00dc94  e590103c          LDR      r1,[r0,#0x3c]         ;5579
00dc98  e5902038          LDR      r2,[r0,#0x38]         ;5579
00dc9c  e59d0158          LDR      r0,[sp,#0x158]        ;5579
00dca0  e580106c          STR      r1,[r0,#0x6c]         ;5579
00dca4  e5802068          STR      r2,[r0,#0x68]         ;5579
00dca8  e59d001c          LDR      r0,[sp,#0x1c]         ;5580
00dcac  e5901024          LDR      r1,[r0,#0x24]         ;5580
00dcb0  e5902020          LDR      r2,[r0,#0x20]         ;5580
00dcb4  e59d0158          LDR      r0,[sp,#0x158]        ;5580
00dcb8  e5801014          STR      r1,[r0,#0x14]         ;5580
00dcbc  e5802010          STR      r2,[r0,#0x10]         ;5580
00dcc0  e59d001c          LDR      r0,[sp,#0x1c]         ;5581
00dcc4  e5901028          LDR      r1,[r0,#0x28]         ;5581
00dcc8  e590202c          LDR      r2,[r0,#0x2c]         ;5581
00dccc  e59d0158          LDR      r0,[sp,#0x158]        ;5581
00dcd0  e5801030          STR      r1,[r0,#0x30]         ;5581
00dcd4  e5802034          STR      r2,[r0,#0x34]         ;5581
00dcd8  e59d001c          LDR      r0,[sp,#0x1c]         ;5582
00dcdc  e5901034          LDR      r1,[r0,#0x34]         ;5582
00dce0  e5902030          LDR      r2,[r0,#0x30]         ;5582
00dce4  e59d0158          LDR      r0,[sp,#0x158]        ;5582
00dce8  e5801054          STR      r1,[r0,#0x54]         ;5582
00dcec  e5802050          STR      r2,[r0,#0x50]         ;5582
00dcf0  e59d001c          LDR      r0,[sp,#0x1c]         ;5583
00dcf4  e590103c          LDR      r1,[r0,#0x3c]         ;5583
00dcf8  e5902038          LDR      r2,[r0,#0x38]         ;5583
00dcfc  e59d0158          LDR      r0,[sp,#0x158]        ;5583
00dd00  e5801074          STR      r1,[r0,#0x74]         ;5583
00dd04  e5802070          STR      r2,[r0,#0x70]         ;5583
00dd08  e59d0018          LDR      r0,[sp,#0x18]         ;5584
00dd0c  e5901024          LDR      r1,[r0,#0x24]         ;5584
00dd10  e5902020          LDR      r2,[r0,#0x20]         ;5584
00dd14  e59d0158          LDR      r0,[sp,#0x158]        ;5584
00dd18  e580101c          STR      r1,[r0,#0x1c]         ;5584
00dd1c  e5802018          STR      r2,[r0,#0x18]         ;5584
00dd20  e59d0018          LDR      r0,[sp,#0x18]         ;5585
00dd24  e590102c          LDR      r1,[r0,#0x2c]         ;5585
00dd28  e5902028          LDR      r2,[r0,#0x28]         ;5585
00dd2c  e59d0158          LDR      r0,[sp,#0x158]        ;5585
00dd30  e580103c          STR      r1,[r0,#0x3c]         ;5585
00dd34  e5802038          STR      r2,[r0,#0x38]         ;5585
00dd38  e59d0018          LDR      r0,[sp,#0x18]         ;5586
00dd3c  e5901034          LDR      r1,[r0,#0x34]         ;5586
00dd40  e5902030          LDR      r2,[r0,#0x30]         ;5586
00dd44  e59d0158          LDR      r0,[sp,#0x158]        ;5586
00dd48  e580105c          STR      r1,[r0,#0x5c]         ;5586
00dd4c  e5802058          STR      r2,[r0,#0x58]         ;5586
00dd50  e59d1018          LDR      r1,[sp,#0x18]         ;5587
00dd54  e1c103d8          LDRD     r0,r1,[r1,#0x38]      ;5587
00dd58  e59d2158          LDR      r2,[sp,#0x158]        ;5587
00dd5c  e1c207f8          STRD     r0,r1,[r2,#0x78]      ;5587
00dd60  e3a00001          MOV      r0,#1                 ;5589
00dd64  eafffafc          B        |L1.51548|
;;;5591   
                          ENDP

                  vGfViewport PROC
;;;5594   
;;;5595   void vGfViewport(float64_t f64X, float64_t f64Y, float64_t f64Width, float64_t f64Height)
00dd68  e92d40f0          PUSH     {r4-r7,lr}
;;;5596   {
00dd6c  e1cd41d4          LDRD     r4,r5,[sp,#0x14]
00dd70  e1cd61dc          LDRD     r6,r7,[sp,#0x1c]
;;;5597       viewport[0] = f64X;
00dd74  e59fcdec          LDR      r12,|L1.60264|
00dd78  e1cc00f0          STRD     r0,r1,[r12,#0]  ; viewport, viewport
;;;5598       viewport[1] = f64Y;
00dd7c  e1cc20f8          STRD     r2,r3,[r12,#8]  ; viewport, viewport
;;;5599       viewport[2] = f64Width;
00dd80  e1cc41f0          STRD     r4,r5,[r12,#0x10]  ; viewport, viewport
;;;5600       viewport[3] = f64Height;
00dd84  e1cc61f8          STRD     r6,r7,[r12,#0x18]  ; viewport, viewport
;;;5601   }
00dd88  e8bd80f0          POP      {r4-r7,pc}
;;;5602   
                          ENDP

                  vGfFrustum PROC
;;;5605   
;;;5606   void vGfFrustum(float64_t f64Left, float64_t f64Right, float64_t f64Bottom, float64_t f64Top, float64_t f64zNear, float64_t f64zFar)
00dd8c  e92d4ff0          PUSH     {r4-r11,lr}
;;;5607   {
00dd90  e24dd09c          SUB      sp,sp,#0x9c
00dd94  e1a06000          MOV      r6,r0
00dd98  e1a07001          MOV      r7,r1
00dd9c  e1a08002          MOV      r8,r2
00dda0  e1a09003          MOV      r9,r3
00dda4  e1cd4dd0          LDRD     r4,r5,[sp,#0xd0]
00dda8  e1cdadd8          LDRD     r10,r11,[sp,#0xd8]
;;;5608       float64_t* m;
;;;5609       float64_t  f[16];
;;;5610   
;;;5611       m = f64GETMATRIX();
00ddac  ebfffffe          BL       f64GETMATRIX
00ddb0  e58d0098          STR      r0,[sp,#0x98]
;;;5612   
;;;5613       f[0]  = (2.0*f64zNear)/(f64Right - f64Left);
00ddb4  e1a02008          MOV      r2,r8
00ddb8  e1a03009          MOV      r3,r9
00ddbc  e1a00006          MOV      r0,r6
00ddc0  e1a01007          MOV      r1,r7
00ddc4  ebfffffe          BL       __aeabi_drsub
00ddc8  e1a02004          MOV      r2,r4
00ddcc  e1a03005          MOV      r3,r5
00ddd0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00ddd4  e3a00000          MOV      r0,#0
00ddd8  e3a01101          MOV      r1,#0x40000000
00dddc  ebfffffe          BL       __aeabi_dmul
00dde0  e1cd00f8          STRD     r0,r1,[sp,#8]
00dde4  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00dde8  ebfffffe          BL       __aeabi_ddiv
00ddec  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00ddf0  e3a00000          MOV      r0,#0
;;;5614       f[1]  = 0.0;
00ddf4  e58d0020          STR      r0,[sp,#0x20]
00ddf8  e58d0024          STR      r0,[sp,#0x24]
00ddfc  e3a01000          MOV      r1,#0
;;;5615       f[2]  = 0.0;
00de00  e58d1028          STR      r1,[sp,#0x28]
00de04  e58d102c          STR      r1,[sp,#0x2c]
;;;5616       f[3]  = 0.0;
00de08  e58d1030          STR      r1,[sp,#0x30]
00de0c  e58d1034          STR      r1,[sp,#0x34]
;;;5617       f[4]  = 0.0;
00de10  e58d1038          STR      r1,[sp,#0x38]
00de14  e58d103c          STR      r1,[sp,#0x3c]
;;;5618       f[5]  = (2.0*f64zNear)/(f64Top - f64Bottom);
00de18  e1cd0cd8          LDRD     r0,r1,[sp,#0xc8]
00de1c  e1cd2cd0          LDRD     r2,r3,[sp,#0xc0]
00de20  ebfffffe          BL       __aeabi_dsub
00de24  e1a02004          MOV      r2,r4
00de28  e1a03005          MOV      r3,r5
00de2c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00de30  e3a00000          MOV      r0,#0
00de34  e3a01101          MOV      r1,#0x40000000
00de38  ebfffffe          BL       __aeabi_dmul
00de3c  e1cd00f8          STRD     r0,r1,[sp,#8]
00de40  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00de44  ebfffffe          BL       __aeabi_ddiv
00de48  e1cd04f0          STRD     r0,r1,[sp,#0x40]
00de4c  e3a01000          MOV      r1,#0
;;;5619       f[6]  = 0.0;
00de50  e58d1048          STR      r1,[sp,#0x48]
00de54  e58d104c          STR      r1,[sp,#0x4c]
;;;5620       f[7]  = 0.0;
00de58  e58d1050          STR      r1,[sp,#0x50]
00de5c  e58d1054          STR      r1,[sp,#0x54]
;;;5621       f[8]  = (f64Right + f64Left)/(f64Right - f64Left);
00de60  e1a02008          MOV      r2,r8
00de64  e1a03009          MOV      r3,r9
00de68  e1a00006          MOV      r0,r6
00de6c  e1a01007          MOV      r1,r7
00de70  ebfffffe          BL       __aeabi_drsub
00de74  e1a02008          MOV      r2,r8
00de78  e1a03009          MOV      r3,r9
00de7c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00de80  e1a00006          MOV      r0,r6
00de84  e1a01007          MOV      r1,r7
00de88  ebfffffe          BL       __aeabi_dadd
00de8c  e1cd00f8          STRD     r0,r1,[sp,#8]
00de90  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00de94  ebfffffe          BL       __aeabi_ddiv
00de98  e1cd05f8          STRD     r0,r1,[sp,#0x58]
;;;5622       f[9]  = (f64Top + f64Bottom)/(f64Top - f64Bottom);
00de9c  e1cd0cd8          LDRD     r0,r1,[sp,#0xc8]
00dea0  e1cd2cd0          LDRD     r2,r3,[sp,#0xc0]
00dea4  ebfffffe          BL       __aeabi_dsub
00dea8  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00deac  e1cd0cd8          LDRD     r0,r1,[sp,#0xc8]
00deb0  e1cd2cd0          LDRD     r2,r3,[sp,#0xc0]
00deb4  ebfffffe          BL       __aeabi_dadd
00deb8  e1cd00f8          STRD     r0,r1,[sp,#8]
00debc  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00dec0  ebfffffe          BL       __aeabi_ddiv
00dec4  e1cd06f0          STRD     r0,r1,[sp,#0x60]
;;;5623       f[10] = -(f64zFar + f64zNear)/(f64zFar - f64zNear);
00dec8  e1a02004          MOV      r2,r4
00decc  e1a03005          MOV      r3,r5
00ded0  e1a0000a          MOV      r0,r10
00ded4  e1a0100b          MOV      r1,r11
00ded8  ebfffffe          BL       __aeabi_dsub
00dedc  e1a02004          MOV      r2,r4
00dee0  e1a03005          MOV      r3,r5
00dee4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00dee8  e1a0000a          MOV      r0,r10
00deec  e1a0100b          MOV      r1,r11
00def0  ebfffffe          BL       __aeabi_dadd
00def4  e2211102          EOR      r1,r1,#0x80000000
00def8  e1cd00f8          STRD     r0,r1,[sp,#8]
00defc  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00df00  ebfffffe          BL       __aeabi_ddiv
00df04  e1cd06f8          STRD     r0,r1,[sp,#0x68]
00df08  e3a01000          MOV      r1,#0
00df0c  e59f0c58          LDR      r0,|L1.60268|
;;;5624       f[11] = -1.0;
00df10  e58d0074          STR      r0,[sp,#0x74]
00df14  e58d1070          STR      r1,[sp,#0x70]
;;;5625       f[12] = 0.0;
00df18  e58d1078          STR      r1,[sp,#0x78]
00df1c  e58d107c          STR      r1,[sp,#0x7c]
;;;5626       f[13] = 0.0;
00df20  e58d1080          STR      r1,[sp,#0x80]
00df24  e58d1084          STR      r1,[sp,#0x84]
;;;5627       f[14] = (-2.0*f64zFar*f64zNear)/(f64zFar - f64zNear);
00df28  e1a02004          MOV      r2,r4
00df2c  e1a03005          MOV      r3,r5
00df30  e1a0000a          MOV      r0,r10
00df34  e1a0100b          MOV      r1,r11
00df38  ebfffffe          BL       __aeabi_dsub
00df3c  e1a0200a          MOV      r2,r10
00df40  e1a0300b          MOV      r3,r11
00df44  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00df48  e3a00000          MOV      r0,#0
00df4c  e3a01103          MOV      r1,#0xc0000000
00df50  ebfffffe          BL       __aeabi_dmul
00df54  e1a02004          MOV      r2,r4
00df58  e1a03005          MOV      r3,r5
00df5c  e1cd00f0          STRD     r0,r1,[sp,#0]
00df60  ebfffffe          BL       __aeabi_dmul
00df64  e1cd00f8          STRD     r0,r1,[sp,#8]
00df68  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00df6c  ebfffffe          BL       __aeabi_ddiv
00df70  e1cd08f8          STRD     r0,r1,[sp,#0x88]
00df74  e3a00000          MOV      r0,#0
;;;5628       f[15] = 0.0;
00df78  e58d0090          STR      r0,[sp,#0x90]
00df7c  e58d0094          STR      r0,[sp,#0x94]
;;;5629   
;;;5630       vMMMUL4x4(m, m, f);
00df80  e28d2018          ADD      r2,sp,#0x18
00df84  e59d1098          LDR      r1,[sp,#0x98]
00df88  e1a00001          MOV      r0,r1
00df8c  ebfffffe          BL       vMMMUL4x4
;;;5631   }
00df90  e28dd09c          ADD      sp,sp,#0x9c
00df94  e8bd8ff0          POP      {r4-r11,pc}
;;;5632   
                          ENDP

                  vGfMatrixMode PROC
;;;5635   
;;;5636   void vGfMatrixMode(gf_matrixmodes_e eMatrix)
00df98  e59f1bd0          LDR      r1,|L1.60272|
;;;5637   {
;;;5638       matrixmode = eMatrix;
00df9c  e5c10000          STRB     r0,[r1,#0]  ; matrixmode
;;;5639   }
00dfa0  e12fff1e          BX       lr
;;;5640   
                          ENDP

                  vGfLoadIdentity PROC
;;;5643   
;;;5644   void vGfLoadIdentity(void)
00dfa4  e92d4010          PUSH     {r4,lr}
;;;5645   {
;;;5646       float64_t* m;
;;;5647   
;;;5648       m = f64GETMATRIX();
00dfa8  ebfffffe          BL       f64GETMATRIX
00dfac  e1a04000          MOV      r4,r0
00dfb0  e3a01000          MOV      r1,#0
00dfb4  e51f09b8          LDR      r0,|L1.54788|
;;;5649   
;;;5650       m[0]  = 1.0;
00dfb8  e5840004          STR      r0,[r4,#4]
00dfbc  e5841000          STR      r1,[r4,#0]
;;;5651       m[1]  = 0.0;
00dfc0  e5841008          STR      r1,[r4,#8]
00dfc4  e584100c          STR      r1,[r4,#0xc]
;;;5652       m[2]  = 0.0;
00dfc8  e5841010          STR      r1,[r4,#0x10]
00dfcc  e5841014          STR      r1,[r4,#0x14]
00dfd0  e3a00000          MOV      r0,#0
;;;5653       m[3]  = 0.0;
00dfd4  e5840018          STR      r0,[r4,#0x18]
00dfd8  e584001c          STR      r0,[r4,#0x1c]
;;;5654       m[4]  = 0.0;
00dfdc  e5840020          STR      r0,[r4,#0x20]
00dfe0  e5840024          STR      r0,[r4,#0x24]
00dfe4  e51f09e8          LDR      r0,|L1.54788|
;;;5655       m[5]  = 1.0;
00dfe8  e584002c          STR      r0,[r4,#0x2c]
00dfec  e5841028          STR      r1,[r4,#0x28]
;;;5656       m[6]  = 0.0;
00dff0  e5841030          STR      r1,[r4,#0x30]
00dff4  e5841034          STR      r1,[r4,#0x34]
00dff8  e3a00000          MOV      r0,#0
;;;5657       m[7]  = 0.0;
00dffc  e5840038          STR      r0,[r4,#0x38]
00e000  e584003c          STR      r0,[r4,#0x3c]
;;;5658       m[8]  = 0.0;
00e004  e5841040          STR      r1,[r4,#0x40]
00e008  e5841044          STR      r1,[r4,#0x44]
;;;5659       m[9]  = 0.0;
00e00c  e5840048          STR      r0,[r4,#0x48]
00e010  e584004c          STR      r0,[r4,#0x4c]
00e014  e51f0a18          LDR      r0,|L1.54788|
;;;5660       m[10] = 1.0;
00e018  e5840054          STR      r0,[r4,#0x54]
00e01c  e5841050          STR      r1,[r4,#0x50]
;;;5661       m[11] = 0.0;
00e020  e5841058          STR      r1,[r4,#0x58]
00e024  e584105c          STR      r1,[r4,#0x5c]
00e028  e3a00000          MOV      r0,#0
;;;5662       m[12] = 0.0;
00e02c  e5840060          STR      r0,[r4,#0x60]
00e030  e5840064          STR      r0,[r4,#0x64]
;;;5663       m[13] = 0.0;
00e034  e5840068          STR      r0,[r4,#0x68]
00e038  e584006c          STR      r0,[r4,#0x6c]
;;;5664       m[14] = 0.0;
00e03c  e5840070          STR      r0,[r4,#0x70]
00e040  e5840074          STR      r0,[r4,#0x74]
00e044  e51f0a48          LDR      r0,|L1.54788|
;;;5665       m[15] = 1.0;
00e048  e584007c          STR      r0,[r4,#0x7c]
00e04c  e5841078          STR      r1,[r4,#0x78]
;;;5666   }
00e050  e8bd8010          POP      {r4,pc}
;;;5667   
                          ENDP

                  vGfLoadIP PROC
;;;5670   
;;;5671   void vGfLoadIP(void)
00e054  e92d4010          PUSH     {r4,lr}
;;;5672   {
;;;5673       float64_t* m;
;;;5674   
;;;5675       m = f64GETMATRIX();
00e058  ebfffffe          BL       f64GETMATRIX
00e05c  e1a04000          MOV      r4,r0
;;;5676   
;;;5677       m[0]  = ip[0];
00e060  e59f0b0c          LDR      r0,|L1.60276|
00e064  e1c000d0          LDRD     r0,r1,[r0,#0]  ; ip, ip
00e068  e1c400f0          STRD     r0,r1,[r4,#0]
;;;5678       m[1]  = ip[1];
00e06c  e59f0b00          LDR      r0,|L1.60276|
00e070  e1c000d8          LDRD     r0,r1,[r0,#8]  ; ip, ip
00e074  e1c400f8          STRD     r0,r1,[r4,#8]
;;;5679       m[2]  = ip[2];
00e078  e59f0af4          LDR      r0,|L1.60276|
00e07c  e1c001d0          LDRD     r0,r1,[r0,#0x10]  ; ip, ip
00e080  e1c401f0          STRD     r0,r1,[r4,#0x10]
;;;5680       m[3]  = ip[3];
00e084  e59f0ae8          LDR      r0,|L1.60276|
00e088  e1c001d8          LDRD     r0,r1,[r0,#0x18]  ; ip, ip
00e08c  e1c401f8          STRD     r0,r1,[r4,#0x18]
;;;5681       m[4]  = ip[4];
00e090  e59f0adc          LDR      r0,|L1.60276|
00e094  e1c002d0          LDRD     r0,r1,[r0,#0x20]  ; ip, ip
00e098  e1c402f0          STRD     r0,r1,[r4,#0x20]
;;;5682       m[5]  = ip[5];
00e09c  e59f1ad0          LDR      r1,|L1.60276|
00e0a0  e1c102d8          LDRD     r0,r1,[r1,#0x28]  ; ip, ip
00e0a4  e1c402f8          STRD     r0,r1,[r4,#0x28]
;;;5683       m[6]  = ip[6];
00e0a8  e59f1ac4          LDR      r1,|L1.60276|
00e0ac  e1c103d0          LDRD     r0,r1,[r1,#0x30]  ; ip, ip
00e0b0  e1c403f0          STRD     r0,r1,[r4,#0x30]
;;;5684       m[7]  = ip[7];
00e0b4  e59f1ab8          LDR      r1,|L1.60276|
00e0b8  e1c103d8          LDRD     r0,r1,[r1,#0x38]  ; ip, ip
00e0bc  e1c403f8          STRD     r0,r1,[r4,#0x38]
;;;5685       m[8]  = ip[8];
00e0c0  e59f0aac          LDR      r0,|L1.60276|
00e0c4  e1c004d0          LDRD     r0,r1,[r0,#0x40]  ; ip, ip
00e0c8  e1c404f0          STRD     r0,r1,[r4,#0x40]
;;;5686       m[9]  = ip[9];
00e0cc  e59f0aa0          LDR      r0,|L1.60276|
00e0d0  e1c004d8          LDRD     r0,r1,[r0,#0x48]  ; ip, ip
00e0d4  e1c404f8          STRD     r0,r1,[r4,#0x48]
;;;5687       m[10] = ip[10];
00e0d8  e59f0a94          LDR      r0,|L1.60276|
00e0dc  e1c005d0          LDRD     r0,r1,[r0,#0x50]  ; ip, ip
00e0e0  e1c405f0          STRD     r0,r1,[r4,#0x50]
;;;5688       m[11] = ip[11];
00e0e4  e59f0a88          LDR      r0,|L1.60276|
00e0e8  e1c005d8          LDRD     r0,r1,[r0,#0x58]  ; ip, ip
00e0ec  e1c405f8          STRD     r0,r1,[r4,#0x58]
;;;5689       m[12] = ip[12];
00e0f0  e59f0a7c          LDR      r0,|L1.60276|
00e0f4  e1c006d0          LDRD     r0,r1,[r0,#0x60]  ; ip, ip
00e0f8  e1c406f0          STRD     r0,r1,[r4,#0x60]
;;;5690       m[13] = ip[13];
00e0fc  e59f0a70          LDR      r0,|L1.60276|
00e100  e1c006d8          LDRD     r0,r1,[r0,#0x68]  ; ip, ip
00e104  e1c406f8          STRD     r0,r1,[r4,#0x68]
;;;5691       m[14] = ip[14];
00e108  e59f1a64          LDR      r1,|L1.60276|
00e10c  e1c107d0          LDRD     r0,r1,[r1,#0x70]  ; ip, ip
00e110  e1c407f0          STRD     r0,r1,[r4,#0x70]
;;;5692       m[15] = ip[15];
00e114  e59f0a58          LDR      r0,|L1.60276|
00e118  e1c007d8          LDRD     r0,r1,[r0,#0x78]  ; ip, ip
00e11c  e1c407f8          STRD     r0,r1,[r4,#0x78]
;;;5693   }
00e120  e8bd8010          POP      {r4,pc}
;;;5694   
                          ENDP

                  vGfTranslate PROC
;;;5697   
;;;5698   void vGfTranslate(float64_t f64X, float64_t f64Y, float64_t f64Z)
00e124  e92d47f0          PUSH     {r4-r10,lr}
;;;5699   {
00e128  e24dd080          SUB      sp,sp,#0x80
00e12c  e1a04000          MOV      r4,r0
00e130  e1a05001          MOV      r5,r1
00e134  e1a06002          MOV      r6,r2
00e138  e1a07003          MOV      r7,r3
00e13c  e1cd8ad0          LDRD     r8,r9,[sp,#0xa0]
;;;5700       float64_t* m;
;;;5701       float64_t  f[16];
;;;5702   
;;;5703       m = f64GETMATRIX();
00e140  ebfffffe          BL       f64GETMATRIX
00e144  e1a0a000          MOV      r10,r0
00e148  e3a01000          MOV      r1,#0
00e14c  e51f0b50          LDR      r0,|L1.54788|
;;;5704   
;;;5705       f[0]  = 1.0;
00e150  e58d0004          STR      r0,[sp,#4]
00e154  e58d1000          STR      r1,[sp,#0]
00e158  e3a00000          MOV      r0,#0
;;;5706       f[1]  = 0.0;
00e15c  e58d0008          STR      r0,[sp,#8]
00e160  e58d000c          STR      r0,[sp,#0xc]
;;;5707       f[2]  = 0.0;
00e164  e58d0010          STR      r0,[sp,#0x10]
00e168  e58d0014          STR      r0,[sp,#0x14]
;;;5708       f[3]  = 0.0;
00e16c  e58d1018          STR      r1,[sp,#0x18]
00e170  e58d101c          STR      r1,[sp,#0x1c]
;;;5709       f[4]  = 0.0;
00e174  e58d0020          STR      r0,[sp,#0x20]
00e178  e58d0024          STR      r0,[sp,#0x24]
00e17c  e51f1b80          LDR      r1,|L1.54788|
;;;5710       f[5]  = 1.0;
00e180  e1cd02f8          STRD     r0,r1,[sp,#0x28]
00e184  e3a01000          MOV      r1,#0
;;;5711       f[6]  = 0.0;
00e188  e58d1030          STR      r1,[sp,#0x30]
00e18c  e58d1034          STR      r1,[sp,#0x34]
;;;5712       f[7]  = 0.0;
00e190  e58d1038          STR      r1,[sp,#0x38]
00e194  e58d103c          STR      r1,[sp,#0x3c]
;;;5713       f[8]  = 0.0;
00e198  e58d1040          STR      r1,[sp,#0x40]
00e19c  e58d1044          STR      r1,[sp,#0x44]
;;;5714       f[9]  = 0.0;
00e1a0  e58d0048          STR      r0,[sp,#0x48]
00e1a4  e58d004c          STR      r0,[sp,#0x4c]
00e1a8  e51f0bac          LDR      r0,|L1.54788|
;;;5715       f[10] = 1.0;
00e1ac  e58d0054          STR      r0,[sp,#0x54]
00e1b0  e58d1050          STR      r1,[sp,#0x50]
00e1b4  e3a00000          MOV      r0,#0
;;;5716       f[11] = 0.0;
00e1b8  e58d0058          STR      r0,[sp,#0x58]
00e1bc  e58d005c          STR      r0,[sp,#0x5c]
;;;5717       f[12] = f64X;
00e1c0  e1cd46f0          STRD     r4,r5,[sp,#0x60]
;;;5718       f[13] = f64Y;
00e1c4  e1cd66f8          STRD     r6,r7,[sp,#0x68]
;;;5719       f[14] = f64Z;
00e1c8  e1cd87f0          STRD     r8,r9,[sp,#0x70]
00e1cc  e51f1bd0          LDR      r1,|L1.54788|
;;;5720       f[15] = 1.0;
00e1d0  e1cd07f8          STRD     r0,r1,[sp,#0x78]
;;;5721   
;;;5722       vMMMUL4x4(m, m, f);
00e1d4  e1a0200d          MOV      r2,sp
00e1d8  e1a0100a          MOV      r1,r10
00e1dc  e1a0000a          MOV      r0,r10
00e1e0  ebfffffe          BL       vMMMUL4x4
;;;5723   }
00e1e4  e28dd080          ADD      sp,sp,#0x80
00e1e8  e8bd87f0          POP      {r4-r10,pc}
;;;5724   
                          ENDP

                  vGfScale PROC
;;;5727   
;;;5728   void vGfScale(float64_t f64X, float64_t f64Y, float64_t f64Z)
00e1ec  e92d47f0          PUSH     {r4-r10,lr}
;;;5729   {
00e1f0  e24dd080          SUB      sp,sp,#0x80
00e1f4  e1a04000          MOV      r4,r0
00e1f8  e1a05001          MOV      r5,r1
00e1fc  e1a06002          MOV      r6,r2
00e200  e1a07003          MOV      r7,r3
00e204  e1cd8ad0          LDRD     r8,r9,[sp,#0xa0]
;;;5730       float64_t* m;
;;;5731       float64_t  f[16];
;;;5732   
;;;5733       m = f64GETMATRIX();
00e208  ebfffffe          BL       f64GETMATRIX
00e20c  e1a0a000          MOV      r10,r0
;;;5734   
;;;5735       f[0]  = f64X;
00e210  e1cd40f0          STRD     r4,r5,[sp,#0]
00e214  e3a01000          MOV      r1,#0
;;;5736       f[1]  = 0.0;
00e218  e58d1008          STR      r1,[sp,#8]
00e21c  e58d100c          STR      r1,[sp,#0xc]
;;;5737       f[2]  = 0.0;
00e220  e58d1010          STR      r1,[sp,#0x10]
00e224  e58d1014          STR      r1,[sp,#0x14]
;;;5738       f[3]  = 0.0;
00e228  e58d1018          STR      r1,[sp,#0x18]
00e22c  e58d101c          STR      r1,[sp,#0x1c]
00e230  e3a00000          MOV      r0,#0
;;;5739       f[4]  = 0.0;
00e234  e58d0020          STR      r0,[sp,#0x20]
00e238  e58d0024          STR      r0,[sp,#0x24]
;;;5740       f[5]  = f64Y;
00e23c  e1cd62f8          STRD     r6,r7,[sp,#0x28]
;;;5741       f[6]  = 0.0;
00e240  e58d1030          STR      r1,[sp,#0x30]
00e244  e58d1034          STR      r1,[sp,#0x34]
;;;5742       f[7]  = 0.0;
00e248  e58d1038          STR      r1,[sp,#0x38]
00e24c  e58d103c          STR      r1,[sp,#0x3c]
;;;5743       f[8]  = 0.0;
00e250  e58d0040          STR      r0,[sp,#0x40]
00e254  e58d0044          STR      r0,[sp,#0x44]
;;;5744       f[9]  = 0.0;
00e258  e58d0048          STR      r0,[sp,#0x48]
00e25c  e58d004c          STR      r0,[sp,#0x4c]
;;;5745       f[10] = f64Z;
00e260  e1cd85f0          STRD     r8,r9,[sp,#0x50]
;;;5746       f[11] = 0.0;
00e264  e58d0058          STR      r0,[sp,#0x58]
00e268  e58d005c          STR      r0,[sp,#0x5c]
;;;5747       f[12] = 0.0;
00e26c  e58d0060          STR      r0,[sp,#0x60]
00e270  e58d0064          STR      r0,[sp,#0x64]
;;;5748       f[13] = 0.0;
00e274  e58d1068          STR      r1,[sp,#0x68]
00e278  e58d106c          STR      r1,[sp,#0x6c]
;;;5749       f[14] = 0.0;
00e27c  e58d1070          STR      r1,[sp,#0x70]
00e280  e58d1074          STR      r1,[sp,#0x74]
00e284  e51f1c88          LDR      r1,|L1.54788|
;;;5750       f[15] = 1.0;
00e288  e1cd07f8          STRD     r0,r1,[sp,#0x78]
;;;5751   
;;;5752       vMMMUL4x4(m, m, f);
00e28c  e1a0200d          MOV      r2,sp
00e290  e1a0100a          MOV      r1,r10
00e294  e1a0000a          MOV      r0,r10
00e298  ebfffffe          BL       vMMMUL4x4
;;;5753   }
00e29c  e28dd080          ADD      sp,sp,#0x80
00e2a0  e8bd87f0          POP      {r4-r10,pc}
;;;5754   
                          ENDP

                  vGfRotate PROC
;;;5757   
;;;5758   void vGfRotate(float64_t f64Angle, float64_t f64X, float64_t f64Y, float64_t f64Z)
00e2a4  e92d5fff          PUSH     {r0-r12,lr}
;;;5759   {
00e2a8  e24dd0c0          SUB      sp,sp,#0xc0
;;;5760       float64_t* m;
;;;5761       float64_t  f[16];
;;;5762       float64_t  c;
;;;5763       float64_t  s;
;;;5764       float64_t  n;
;;;5765       float64_t  x;
;;;5766       float64_t  y;
;;;5767       float64_t  z;
;;;5768   
;;;5769       m = f64GETMATRIX();
00e2ac  ebfffffe          BL       f64GETMATRIX
00e2b0  e58d00bc          STR      r0,[sp,#0xbc]
;;;5770   
;;;5771       /* normalize (x,y,z) vector */
;;;5772       n = sqrt(f64X*f64X + f64Y*f64Y + f64Z*f64Z);
00e2b4  e59d2100          LDR      r2,[sp,#0x100]
00e2b8  e59d3104          LDR      r3,[sp,#0x104]
00e2bc  e1a00002          MOV      r0,r2
00e2c0  e1a01003          MOV      r1,r3
00e2c4  ebfffffe          BL       __aeabi_dmul
00e2c8  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e2cc  e1cd2fd8          LDRD     r2,r3,[sp,#0xf8]
00e2d0  e1a00002          MOV      r0,r2
00e2d4  e1a01003          MOV      r1,r3
00e2d8  ebfffffe          BL       __aeabi_dmul
00e2dc  e1cd00f8          STRD     r0,r1,[sp,#8]
00e2e0  e1cd2cd8          LDRD     r2,r3,[sp,#0xc8]
00e2e4  e1a00002          MOV      r0,r2
00e2e8  e1a01003          MOV      r1,r3
00e2ec  ebfffffe          BL       __aeabi_dmul
00e2f0  e1cd00f0          STRD     r0,r1,[sp,#0]
00e2f4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00e2f8  ebfffffe          BL       __aeabi_dadd
00e2fc  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e300  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00e304  ebfffffe          BL       __aeabi_dadd
00e308  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e30c  ebfffffe          BL       sqrt
00e310  e1cd02f8          STRD     r0,r1,[sp,#0x28]
;;;5773       x = f64X/n;
00e314  e1cd0cd8          LDRD     r0,r1,[sp,#0xc8]
00e318  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00e31c  ebfffffe          BL       __aeabi_ddiv
00e320  e1a06000          MOV      r6,r0
00e324  e1a07001          MOV      r7,r1
;;;5774       y = f64Y/n;
00e328  e1cd0fd8          LDRD     r0,r1,[sp,#0xf8]
00e32c  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00e330  ebfffffe          BL       __aeabi_ddiv
00e334  e1a08000          MOV      r8,r0
00e338  e1a09001          MOV      r9,r1
;;;5775       z = f64Z/n;
00e33c  e59d0100          LDR      r0,[sp,#0x100]
00e340  e59d1104          LDR      r1,[sp,#0x104]
00e344  e1cd22d8          LDRD     r2,r3,[sp,#0x28]
00e348  ebfffffe          BL       __aeabi_ddiv
00e34c  e1a0a000          MOV      r10,r0
00e350  e1a0b001          MOV      r11,r1
00e354  e59f281c          LDR      r2,|L1.60280|
00e358  e59f381c          LDR      r3,|L1.60284|
;;;5776   
;;;5777       c = cos(f64Angle*GA_CONST_PI/180.0);
00e35c  e1cd0cd0          LDRD     r0,r1,[sp,#0xc0]
00e360  ebfffffe          BL       __aeabi_dmul
00e364  e3a02000          MOV      r2,#0
00e368  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e36c  e59f380c          LDR      r3,|L1.60288|
00e370  ebfffffe          BL       __aeabi_ddiv
00e374  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e378  ebfffffe          BL       ||cos||
00e37c  e1a04000          MOV      r4,r0
00e380  e1a05001          MOV      r5,r1
00e384  e59f27ec          LDR      r2,|L1.60280|
00e388  e59f37ec          LDR      r3,|L1.60284|
;;;5778       s = sin(f64Angle*GA_CONST_PI/180.0);
00e38c  e1cd0cd0          LDRD     r0,r1,[sp,#0xc0]
00e390  ebfffffe          BL       __aeabi_dmul
00e394  e3a02000          MOV      r2,#0
00e398  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e39c  e59f37dc          LDR      r3,|L1.60288|
00e3a0  ebfffffe          BL       __aeabi_ddiv
00e3a4  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e3a8  ebfffffe          BL       ||sin||
00e3ac  e1cd03f0          STRD     r0,r1,[sp,#0x30]
;;;5779   
;;;5780       f[0]  = x*x*(1.0-c) + c;
00e3b0  e1a02004          MOV      r2,r4
00e3b4  e1a03005          MOV      r3,r5
00e3b8  e3a00000          MOV      r0,#0
00e3bc  e51f1dc0          LDR      r1,|L1.54788|
00e3c0  ebfffffe          BL       __aeabi_dsub
00e3c4  e1a02006          MOV      r2,r6
00e3c8  e1a03007          MOV      r3,r7
00e3cc  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e3d0  e1a00006          MOV      r0,r6
00e3d4  e1a01007          MOV      r1,r7
00e3d8  ebfffffe          BL       __aeabi_dmul
00e3dc  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e3e0  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00e3e4  ebfffffe          BL       __aeabi_dmul
00e3e8  e1a02004          MOV      r2,r4
00e3ec  e1a03005          MOV      r3,r5
00e3f0  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e3f4  ebfffffe          BL       __aeabi_dadd
00e3f8  e1cd03f8          STRD     r0,r1,[sp,#0x38]
;;;5781       f[1]  = y*x*(1.0-c) + z*s;
00e3fc  e1a0000a          MOV      r0,r10
00e400  e1a0100b          MOV      r1,r11
00e404  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e408  ebfffffe          BL       __aeabi_dmul
00e40c  e1a02004          MOV      r2,r4
00e410  e1a03005          MOV      r3,r5
00e414  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e418  e3a00000          MOV      r0,#0
00e41c  e51f1e20          LDR      r1,|L1.54788|
00e420  ebfffffe          BL       __aeabi_dsub
00e424  e1a02006          MOV      r2,r6
00e428  e1a03007          MOV      r3,r7
00e42c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e430  e1a00008          MOV      r0,r8
00e434  e1a01009          MOV      r1,r9
00e438  ebfffffe          BL       __aeabi_dmul
00e43c  e1cd00f8          STRD     r0,r1,[sp,#8]
00e440  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e444  ebfffffe          BL       __aeabi_dmul
00e448  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e44c  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e450  ebfffffe          BL       __aeabi_dadd
00e454  e1cd04f0          STRD     r0,r1,[sp,#0x40]
;;;5782       f[2]  = x*z*(1.0-c) - y*s;
00e458  e1a00008          MOV      r0,r8
00e45c  e1a01009          MOV      r1,r9
00e460  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e464  ebfffffe          BL       __aeabi_dmul
00e468  e1a02004          MOV      r2,r4
00e46c  e1a03005          MOV      r3,r5
00e470  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e474  e3a00000          MOV      r0,#0
00e478  e51f1e7c          LDR      r1,|L1.54788|
00e47c  ebfffffe          BL       __aeabi_dsub
00e480  e1a0200a          MOV      r2,r10
00e484  e1a0300b          MOV      r3,r11
00e488  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e48c  e1a00006          MOV      r0,r6
00e490  e1a01007          MOV      r1,r7
00e494  ebfffffe          BL       __aeabi_dmul
00e498  e1cd00f8          STRD     r0,r1,[sp,#8]
00e49c  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e4a0  ebfffffe          BL       __aeabi_dmul
00e4a4  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e4a8  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e4ac  ebfffffe          BL       __aeabi_dsub
00e4b0  e1cd04f8          STRD     r0,r1,[sp,#0x48]
00e4b4  e3a01000          MOV      r1,#0
;;;5783       f[3]  = 0;
00e4b8  e58d1050          STR      r1,[sp,#0x50]
00e4bc  e58d1054          STR      r1,[sp,#0x54]
;;;5784       f[4]  = x*y*(1.0-c) - z*s;
00e4c0  e1a0000a          MOV      r0,r10
00e4c4  e1a0100b          MOV      r1,r11
00e4c8  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e4cc  ebfffffe          BL       __aeabi_dmul
00e4d0  e1a02004          MOV      r2,r4
00e4d4  e1a03005          MOV      r3,r5
00e4d8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e4dc  e3a00000          MOV      r0,#0
00e4e0  e51f1ee4          LDR      r1,|L1.54788|
00e4e4  ebfffffe          BL       __aeabi_dsub
00e4e8  e1a02008          MOV      r2,r8
00e4ec  e1a03009          MOV      r3,r9
00e4f0  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e4f4  e1a00006          MOV      r0,r6
00e4f8  e1a01007          MOV      r1,r7
00e4fc  ebfffffe          BL       __aeabi_dmul
00e500  e1cd00f8          STRD     r0,r1,[sp,#8]
00e504  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e508  ebfffffe          BL       __aeabi_dmul
00e50c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e510  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e514  ebfffffe          BL       __aeabi_dsub
00e518  e1cd05f8          STRD     r0,r1,[sp,#0x58]
;;;5785       f[5]  = y*y*(1.0-c) + c;
00e51c  e1a02004          MOV      r2,r4
00e520  e1a03005          MOV      r3,r5
00e524  e3a00000          MOV      r0,#0
00e528  e51f1f2c          LDR      r1,|L1.54788|
00e52c  ebfffffe          BL       __aeabi_dsub
00e530  e1a02008          MOV      r2,r8
00e534  e1a03009          MOV      r3,r9
00e538  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e53c  e1a00008          MOV      r0,r8
00e540  e1a01009          MOV      r1,r9
00e544  ebfffffe          BL       __aeabi_dmul
00e548  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e54c  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00e550  ebfffffe          BL       __aeabi_dmul
00e554  e1a02004          MOV      r2,r4
00e558  e1a03005          MOV      r3,r5
00e55c  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e560  ebfffffe          BL       __aeabi_dadd
00e564  e1cd06f0          STRD     r0,r1,[sp,#0x60]
;;;5786       f[6]  = y*z*(1.0-c) + x*s;
00e568  e1a00006          MOV      r0,r6
00e56c  e1a01007          MOV      r1,r7
00e570  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e574  ebfffffe          BL       __aeabi_dmul
00e578  e1a02004          MOV      r2,r4
00e57c  e1a03005          MOV      r3,r5
00e580  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e584  e3a00000          MOV      r0,#0
00e588  e51f1f8c          LDR      r1,|L1.54788|
00e58c  ebfffffe          BL       __aeabi_dsub
00e590  e1a0200a          MOV      r2,r10
00e594  e1a0300b          MOV      r3,r11
00e598  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e59c  e1a00008          MOV      r0,r8
00e5a0  e1a01009          MOV      r1,r9
00e5a4  ebfffffe          BL       __aeabi_dmul
00e5a8  e1cd00f8          STRD     r0,r1,[sp,#8]
00e5ac  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e5b0  ebfffffe          BL       __aeabi_dmul
00e5b4  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e5b8  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e5bc  ebfffffe          BL       __aeabi_dadd
00e5c0  e1cd06f8          STRD     r0,r1,[sp,#0x68]
00e5c4  e3a01000          MOV      r1,#0
;;;5787       f[7]  = 0;
00e5c8  e58d1070          STR      r1,[sp,#0x70]
00e5cc  e58d1074          STR      r1,[sp,#0x74]
;;;5788       f[8]  = x*z*(1.0-c) + y*s;
00e5d0  e1a00008          MOV      r0,r8
00e5d4  e1a01009          MOV      r1,r9
00e5d8  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e5dc  ebfffffe          BL       __aeabi_dmul
00e5e0  e1a02004          MOV      r2,r4
00e5e4  e1a03005          MOV      r3,r5
00e5e8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e5ec  e3a00000          MOV      r0,#0
00e5f0  e51f1ff4          LDR      r1,|L1.54788|
00e5f4  ebfffffe          BL       __aeabi_dsub
00e5f8  e1a0200a          MOV      r2,r10
00e5fc  e1a0300b          MOV      r3,r11
00e600  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e604  e1a00006          MOV      r0,r6
00e608  e1a01007          MOV      r1,r7
00e60c  ebfffffe          BL       __aeabi_dmul
00e610  e1cd00f8          STRD     r0,r1,[sp,#8]
00e614  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e618  ebfffffe          BL       __aeabi_dmul
00e61c  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e620  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e624  ebfffffe          BL       __aeabi_dadd
00e628  e1cd07f8          STRD     r0,r1,[sp,#0x78]
;;;5789       f[9]  = y*z*(1.0-c) - x*s;
00e62c  e1a00006          MOV      r0,r6
00e630  e1a01007          MOV      r1,r7
00e634  e1cd23d0          LDRD     r2,r3,[sp,#0x30]
00e638  ebfffffe          BL       __aeabi_dmul
00e63c  e1a02004          MOV      r2,r4
00e640  e1a03005          MOV      r3,r5
00e644  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e648  e3a00000          MOV      r0,#0
00e64c  e59f1530          LDR      r1,|L1.60292|
00e650  ebfffffe          BL       __aeabi_dsub
00e654  e1a0200a          MOV      r2,r10
00e658  e1a0300b          MOV      r3,r11
00e65c  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e660  e1a00008          MOV      r0,r8
00e664  e1a01009          MOV      r1,r9
00e668  ebfffffe          BL       __aeabi_dmul
00e66c  e1cd00f8          STRD     r0,r1,[sp,#8]
00e670  e1cd21d0          LDRD     r2,r3,[sp,#0x10]
00e674  ebfffffe          BL       __aeabi_dmul
00e678  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e67c  e1cd22d0          LDRD     r2,r3,[sp,#0x20]
00e680  ebfffffe          BL       __aeabi_dsub
00e684  e1cd08f0          STRD     r0,r1,[sp,#0x80]
;;;5790       f[10] = z*z*(1.0-c) + c;
00e688  e1a02004          MOV      r2,r4
00e68c  e1a03005          MOV      r3,r5
00e690  e3a00000          MOV      r0,#0
00e694  e59f14e8          LDR      r1,|L1.60292|
00e698  ebfffffe          BL       __aeabi_dsub
00e69c  e1a0200a          MOV      r2,r10
00e6a0  e1a0300b          MOV      r3,r11
00e6a4  e1cd01f8          STRD     r0,r1,[sp,#0x18]
00e6a8  e1a0000a          MOV      r0,r10
00e6ac  e1a0100b          MOV      r1,r11
00e6b0  ebfffffe          BL       __aeabi_dmul
00e6b4  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00e6b8  e1cd21d8          LDRD     r2,r3,[sp,#0x18]
00e6bc  ebfffffe          BL       __aeabi_dmul
00e6c0  e1a02004          MOV      r2,r4
00e6c4  e1a03005          MOV      r3,r5
00e6c8  e1cd02f0          STRD     r0,r1,[sp,#0x20]
00e6cc  ebfffffe          BL       __aeabi_dadd
00e6d0  e1cd08f8          STRD     r0,r1,[sp,#0x88]
00e6d4  e3a01000          MOV      r1,#0
;;;5791       f[11] = 0;
00e6d8  e58d1090          STR      r1,[sp,#0x90]
00e6dc  e58d1094          STR      r1,[sp,#0x94]
;;;5792       f[12] = 0;
00e6e0  e58d1098          STR      r1,[sp,#0x98]
00e6e4  e58d109c          STR      r1,[sp,#0x9c]
;;;5793       f[13] = 0;
00e6e8  e58d10a0          STR      r1,[sp,#0xa0]
00e6ec  e58d10a4          STR      r1,[sp,#0xa4]
;;;5794       f[14] = 0;
00e6f0  e58d10a8          STR      r1,[sp,#0xa8]
00e6f4  e58d10ac          STR      r1,[sp,#0xac]
00e6f8  e3a00000          MOV      r0,#0
00e6fc  e59f1480          LDR      r1,|L1.60292|
;;;5795       f[15] = 1;
00e700  e1cd0bf0          STRD     r0,r1,[sp,#0xb0]
;;;5796   
;;;5797       vMMMUL4x4(m, m, f);
00e704  e28d2038          ADD      r2,sp,#0x38
00e708  e59d10bc          LDR      r1,[sp,#0xbc]
00e70c  e1a00001          MOV      r0,r1
00e710  ebfffffe          BL       vMMMUL4x4
;;;5798   }
00e714  e28dd0d0          ADD      sp,sp,#0xd0
00e718  e8bd9ff0          POP      {r4-r12,pc}
;;;5799   
                          ENDP

                  iProject PROC
;;;5802   
;;;5803   static int iProject(float64_t * pf64Win, float64_t * pf64Obj)
00e71c  e92d4ff0          PUSH     {r4-r11,lr}
;;;5804   {
00e720  e24dd02c          SUB      sp,sp,#0x2c
00e724  e1a04000          MOV      r4,r0
00e728  e1a09001          MOV      r9,r1
;;;5805       /* Transformation vectors */
;;;5806       float64_t tmp[4];
;;;5807   
;;;5808       /* Modelview transform */
;;;5809       vMVMUL4x4(tmp, modelview, pf64Obj);
00e72c  e1a02009          MOV      r2,r9
00e730  e59f1450          LDR      r1,|L1.60296|
00e734  e28d0008          ADD      r0,sp,#8
00e738  ebfffffe          BL       vMVMUL4x4
;;;5810   
;;;5811       /* Projection transform */
;;;5812       vMVMUL4x4(tmp, projection, tmp);
00e73c  e28d2008          ADD      r2,sp,#8
00e740  e59f1444          LDR      r1,|L1.60300|
00e744  e28d0008          ADD      r0,sp,#8
00e748  ebfffffe          BL       vMVMUL4x4
;;;5813   
;;;5814       /* The result normalizes between -1 and 1 */
;;;5815       if(tmp[3] == 0.0) /* The w value */
00e74c  e3a02000          MOV      r2,#0
00e750  e1a03002          MOV      r3,r2
00e754  e59d5020          LDR      r5,[sp,#0x20]
00e758  e1a00005          MOV      r0,r5
00e75c  e59d1024          LDR      r1,[sp,#0x24]
00e760  ebfffffe          BL       __aeabi_cdcmpeq
00e764  1a000002          BNE      |L1.59252|
;;;5816       {
;;;5817           return 0;
00e768  e3a00000          MOV      r0,#0
                  |L1.59244|
00e76c  e28dd02c          ADD      sp,sp,#0x2c
;;;5818       }
;;;5819       tmp[3] = 1.0/tmp[3];
;;;5820   
;;;5821       /* Perspective division */
;;;5822       tmp[0]*= tmp[3];
;;;5823       tmp[1]*= tmp[3];
;;;5824       tmp[2]*= tmp[3];
;;;5825   
;;;5826       /* Window coordinates */
;;;5827       /* Map x, y to range 0-1 */
;;;5828       pf64Win[0] = (tmp[0]*0.5 + 0.5)*viewport[2] + viewport[0];
;;;5829       pf64Win[1] = (/*-*/tmp[1]*0.5 + 0.5)*viewport[3] + viewport[1];
;;;5830   
;;;5831       /* This is only correct when glDepthRange(0.0, 1.0) */
;;;5832       pf64Win[2] = (1.0 + tmp[2])*0.5;    /* Between 0 and 1 */
;;;5833   
;;;5834       return 1;
;;;5835   }
00e770  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.59252|
00e774  e59d5020          LDR      r5,[sp,#0x20]         ;5819
00e778  e1a02005          MOV      r2,r5                 ;5819
00e77c  e3a00000          MOV      r0,#0                 ;5819
00e780  e59d3024          LDR      r3,[sp,#0x24]         ;5819
00e784  e59f13f8          LDR      r1,|L1.60292|
00e788  ebfffffe          BL       __aeabi_ddiv
00e78c  e1cd02f0          STRD     r0,r1,[sp,#0x20]      ;5819
00e790  e59d5020          LDR      r5,[sp,#0x20]         ;5822
00e794  e1a02005          MOV      r2,r5                 ;5822
00e798  e59d7008          LDR      r7,[sp,#8]            ;5822
00e79c  e1a00007          MOV      r0,r7                 ;5822
00e7a0  e59d100c          LDR      r1,[sp,#0xc]          ;5822
00e7a4  e59d3024          LDR      r3,[sp,#0x24]         ;5822
00e7a8  ebfffffe          BL       __aeabi_dmul
00e7ac  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5822
00e7b0  e59d5020          LDR      r5,[sp,#0x20]         ;5823
00e7b4  e1a02005          MOV      r2,r5                 ;5823
00e7b8  e59d7010          LDR      r7,[sp,#0x10]         ;5823
00e7bc  e1a00007          MOV      r0,r7                 ;5823
00e7c0  e59d1014          LDR      r1,[sp,#0x14]         ;5823
00e7c4  e59d3024          LDR      r3,[sp,#0x24]         ;5823
00e7c8  ebfffffe          BL       __aeabi_dmul
00e7cc  e1cd01f0          STRD     r0,r1,[sp,#0x10]      ;5823
00e7d0  e59d101c          LDR      r1,[sp,#0x1c]         ;5824
00e7d4  e59d5020          LDR      r5,[sp,#0x20]         ;5824
00e7d8  e1a02005          MOV      r2,r5                 ;5824
00e7dc  e59d7018          LDR      r7,[sp,#0x18]         ;5824
00e7e0  e1a00007          MOV      r0,r7                 ;5824
00e7e4  e59d3024          LDR      r3,[sp,#0x24]         ;5824
00e7e8  ebfffffe          BL       __aeabi_dmul
00e7ec  e1cd01f8          STRD     r0,r1,[sp,#0x18]      ;5824
00e7f0  e3a02000          MOV      r2,#0                 ;5828
00e7f4  e59d100c          LDR      r1,[sp,#0xc]          ;5828
00e7f8  e59d5008          LDR      r5,[sp,#8]            ;5828
00e7fc  e59f338c          LDR      r3,|L1.60304|
00e800  e1a00005          MOV      r0,r5                 ;5828
00e804  ebfffffe          BL       __aeabi_dmul
00e808  e1a07000          MOV      r7,r0                 ;5828
00e80c  e3a02000          MOV      r2,#0                 ;5828
00e810  e59f3378          LDR      r3,|L1.60304|
00e814  ebfffffe          BL       __aeabi_dadd
00e818  e1a0a000          MOV      r10,r0                ;5828
00e81c  e1a0b001          MOV      r11,r1                ;5828
00e820  e59f1340          LDR      r1,|L1.60264|
00e824  e5915010          LDR      r5,[r1,#0x10]         ;5828  ; viewport, viewport
00e828  e1a02005          MOV      r2,r5                 ;5828
00e82c  e5913014          LDR      r3,[r1,#0x14]         ;5828
00e830  e1a0100b          MOV      r1,r11                ;5828
00e834  ebfffffe          BL       __aeabi_dmul
00e838  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5828
00e83c  e59f0324          LDR      r0,|L1.60264|
00e840  e5905000          LDR      r5,[r0,#0]            ;5828  ; viewport, viewport
00e844  e1a02005          MOV      r2,r5                 ;5828
00e848  e5903004          LDR      r3,[r0,#4]            ;5828
00e84c  e59d0000          LDR      r0,[sp,#0]            ;5828
00e850  ebfffffe          BL       __aeabi_dadd
00e854  e1c400f0          STRD     r0,r1,[r4,#0]         ;5828
00e858  e3a02000          MOV      r2,#0                 ;5829
00e85c  e59d1014          LDR      r1,[sp,#0x14]         ;5829
00e860  e59d5010          LDR      r5,[sp,#0x10]         ;5829
00e864  e59f3324          LDR      r3,|L1.60304|
00e868  e1a00005          MOV      r0,r5                 ;5829
00e86c  ebfffffe          BL       __aeabi_dmul
00e870  e1a07000          MOV      r7,r0                 ;5829
00e874  e3a02000          MOV      r2,#0                 ;5829
00e878  e59f3310          LDR      r3,|L1.60304|
00e87c  ebfffffe          BL       __aeabi_dadd
00e880  e1a0a000          MOV      r10,r0                ;5829
00e884  e1a0b001          MOV      r11,r1                ;5829
00e888  e59f12d8          LDR      r1,|L1.60264|
00e88c  e5915018          LDR      r5,[r1,#0x18]         ;5829  ; viewport, viewport
00e890  e1a02005          MOV      r2,r5                 ;5829
00e894  e591301c          LDR      r3,[r1,#0x1c]         ;5829
00e898  e1a0100b          MOV      r1,r11                ;5829
00e89c  ebfffffe          BL       __aeabi_dmul
00e8a0  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5829
00e8a4  e59f12bc          LDR      r1,|L1.60264|
00e8a8  e5915008          LDR      r5,[r1,#8]            ;5829  ; viewport, viewport
00e8ac  e1a02005          MOV      r2,r5                 ;5829
00e8b0  e591300c          LDR      r3,[r1,#0xc]          ;5829
00e8b4  e59d1004          LDR      r1,[sp,#4]            ;5829
00e8b8  ebfffffe          BL       __aeabi_dadd
00e8bc  e1c400f8          STRD     r0,r1,[r4,#8]         ;5829
00e8c0  e59d5018          LDR      r5,[sp,#0x18]         ;5832
00e8c4  e1a02005          MOV      r2,r5                 ;5832
00e8c8  e3a00000          MOV      r0,#0                 ;5832
00e8cc  e59d301c          LDR      r3,[sp,#0x1c]         ;5832
00e8d0  e59f12ac          LDR      r1,|L1.60292|
00e8d4  ebfffffe          BL       __aeabi_dadd
00e8d8  e1a07000          MOV      r7,r0                 ;5832
00e8dc  e3a02000          MOV      r2,#0                 ;5832
00e8e0  e59f32a8          LDR      r3,|L1.60304|
00e8e4  ebfffffe          BL       __aeabi_dmul
00e8e8  e1c401f0          STRD     r0,r1,[r4,#0x10]      ;5832
00e8ec  e3a00001          MOV      r0,#1                 ;5834
00e8f0  eaffff9d          B        |L1.59244|
;;;5836   
                          ENDP

                  iGfProject PROC
;;;5839   
;;;5840   int iGfProject(float64_t * pf64Obj)
00e8f4  e92d4010          PUSH     {r4,lr}
;;;5841   {
00e8f8  e1a04000          MOV      r4,r0
;;;5842       if (0 == iProject(obj[0], pf64Obj))
00e8fc  e1a01004          MOV      r1,r4
00e900  e59f028c          LDR      r0,|L1.60308|
00e904  ebfffffe          BL       iProject
00e908  e3500000          CMP      r0,#0
00e90c  1a000001          BNE      |L1.59672|
;;;5843       {
;;;5844           return 0;
00e910  e3a00000          MOV      r0,#0
                  |L1.59668|
;;;5845       }
;;;5846       if (0 == iProject(obj[1], pf64Obj+4))
;;;5847       {
;;;5848           return 0;
;;;5849       }
;;;5850       if (0 == iProject(obj[2], pf64Obj+8))
;;;5851       {
;;;5852           return 0;
;;;5853       }
;;;5854       if (0 == iProject(obj[3], pf64Obj+12))
;;;5855       {
;;;5856           return 0;
;;;5857       }
;;;5858   
;;;5859       return 1;
;;;5860   }
00e914  e8bd8010          POP      {r4,pc}
                  |L1.59672|
00e918  e2841020          ADD      r1,r4,#0x20           ;5846
00e91c  e59f0274          LDR      r0,|L1.60312|
00e920  ebfffffe          BL       iProject
00e924  e3500000          CMP      r0,#0                 ;5846
00e928  1a000001          BNE      |L1.59700|
00e92c  e3a00000          MOV      r0,#0                 ;5848
00e930  eafffff7          B        |L1.59668|
                  |L1.59700|
00e934  e2841040          ADD      r1,r4,#0x40           ;5850
00e938  e59f025c          LDR      r0,|L1.60316|
00e93c  ebfffffe          BL       iProject
00e940  e3500000          CMP      r0,#0                 ;5850
00e944  1a000001          BNE      |L1.59728|
00e948  e3a00000          MOV      r0,#0                 ;5852
00e94c  eafffff0          B        |L1.59668|
                  |L1.59728|
00e950  e2841060          ADD      r1,r4,#0x60           ;5854
00e954  e59f0244          LDR      r0,|L1.60320|
00e958  ebfffffe          BL       iProject
00e95c  e3500000          CMP      r0,#0                 ;5854
00e960  1a000001          BNE      |L1.59756|
00e964  e3a00000          MOV      r0,#0                 ;5856
00e968  eaffffe9          B        |L1.59668|
                  |L1.59756|
00e96c  e3a00001          MOV      r0,#1                 ;5859
00e970  eaffffe7          B        |L1.59668|
;;;5861   
                          ENDP

                  iGfUnProject PROC
;;;5863   
;;;5864   int iGfUnProject(float64_t * pf64Obj, float64_t * pf64Win)
00e974  e92d4ff0          PUSH     {r4-r11,lr}
;;;5865   {
00e978  e24ddf55          SUB      sp,sp,#0x154
00e97c  e1a04000          MOV      r4,r0
00e980  e1a09001          MOV      r9,r1
;;;5866       /* Transformation matrices */
;;;5867       float64_t m[16], A[16];
;;;5868       float64_t in[4], out[4];
;;;5869       /* Calculation for inverting a matrix, compute projection x modelview */
;;;5870       /* and store in A[16] */
;;;5871       vMMMUL4x4(A, projection, modelview);
00e984  e59f21fc          LDR      r2,|L1.60296|
00e988  e59f11fc          LDR      r1,|L1.60300|
00e98c  e28d0050          ADD      r0,sp,#0x50
00e990  ebfffffe          BL       vMMMUL4x4
;;;5872       /* Now compute the inverse of matrix A */
;;;5873       if(iGfInvertMatrix4x4(A, m)==0)
00e994  e28d10d0          ADD      r1,sp,#0xd0
00e998  e28d0050          ADD      r0,sp,#0x50
00e99c  ebfffffe          BL       iGfInvertMatrix4x4
00e9a0  e3500000          CMP      r0,#0
00e9a4  1a000002          BNE      |L1.59828|
;;;5874       {
;;;5875           return 0;
00e9a8  e3a00000          MOV      r0,#0
                  |L1.59820|
00e9ac  e28ddf55          ADD      sp,sp,#0x154
;;;5876       }
;;;5877   
;;;5878       /* Transformation of normalized coordinates between -1 and 1 */
;;;5879       in[0] = (pf64Win[0] - (float64_t)viewport[0])/(float64_t)viewport[2]*2.0 - 1.0;
;;;5880       in[1] = (pf64Win[1] - (float64_t)viewport[1])/(float64_t)viewport[3]*2.0 - 1.0;
;;;5881       in[2] = 2.0*pf64Win[2]-1.0;
;;;5882       in[3] = 1.0;
;;;5883       /* Objects coordinates */
;;;5884       vMVMUL4x4(out, m, in);
;;;5885   
;;;5886       if(out[3]==0.0)
;;;5887       {
;;;5888           return 0;
;;;5889       }
;;;5890   
;;;5891       out[3] = 1.0/out[3];
;;;5892   
;;;5893       pf64Obj[0] = out[0]*out[3];
;;;5894       pf64Obj[1] = /*-*/out[1]*out[3];
;;;5895       pf64Obj[2] = out[2]*out[3];
;;;5896   
;;;5897       return 1;
;;;5898   }
00e9b0  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.59828|
00e9b4  e59f01ac          LDR      r0,|L1.60264|
00e9b8  e5903004          LDR      r3,[r0,#4]            ;5879  ; viewport, viewport
00e9bc  e5905000          LDR      r5,[r0,#0]            ;5879
00e9c0  e1a02005          MOV      r2,r5                 ;5879
00e9c4  e5997000          LDR      r7,[r9,#0]            ;5879
00e9c8  e1a00007          MOV      r0,r7                 ;5879
00e9cc  e5991004          LDR      r1,[r9,#4]            ;5879
00e9d0  ebfffffe          BL       __aeabi_dsub
00e9d4  e1a0a000          MOV      r10,r0                ;5879
00e9d8  e59f0188          LDR      r0,|L1.60264|
00e9dc  e5905010          LDR      r5,[r0,#0x10]         ;5879  ; viewport, viewport
00e9e0  e1a02005          MOV      r2,r5                 ;5879
00e9e4  e5903014          LDR      r3,[r0,#0x14]         ;5879
00e9e8  e1a0000a          MOV      r0,r10                ;5879
00e9ec  ebfffffe          BL       __aeabi_ddiv
00e9f0  e3a02000          MOV      r2,#0                 ;5879
00e9f4  e3a03101          MOV      r3,#0x40000000        ;5879
00e9f8  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5879
00e9fc  ebfffffe          BL       __aeabi_dmul
00ea00  e3a02000          MOV      r2,#0                 ;5879
00ea04  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5879
00ea08  e59f3174          LDR      r3,|L1.60292|
00ea0c  ebfffffe          BL       __aeabi_dsub
00ea10  e1cd03f0          STRD     r0,r1,[sp,#0x30]      ;5879
00ea14  e59f014c          LDR      r0,|L1.60264|
00ea18  e590300c          LDR      r3,[r0,#0xc]          ;5880  ; viewport, viewport
00ea1c  e5905008          LDR      r5,[r0,#8]            ;5880
00ea20  e1a02005          MOV      r2,r5                 ;5880
00ea24  e5997008          LDR      r7,[r9,#8]            ;5880
00ea28  e1a00007          MOV      r0,r7                 ;5880
00ea2c  e599100c          LDR      r1,[r9,#0xc]          ;5880
00ea30  ebfffffe          BL       __aeabi_dsub
00ea34  e1a0a000          MOV      r10,r0                ;5880
00ea38  e59f0128          LDR      r0,|L1.60264|
00ea3c  e5905018          LDR      r5,[r0,#0x18]         ;5880  ; viewport, viewport
00ea40  e1a02005          MOV      r2,r5                 ;5880
00ea44  e590301c          LDR      r3,[r0,#0x1c]         ;5880
00ea48  e1a0000a          MOV      r0,r10                ;5880
00ea4c  ebfffffe          BL       __aeabi_ddiv
00ea50  e3a02000          MOV      r2,#0                 ;5880
00ea54  e3a03101          MOV      r3,#0x40000000        ;5880
00ea58  e1cd00f0          STRD     r0,r1,[sp,#0]         ;5880
00ea5c  ebfffffe          BL       __aeabi_dmul
00ea60  e3a02000          MOV      r2,#0                 ;5880
00ea64  e1cd00f8          STRD     r0,r1,[sp,#8]         ;5880
00ea68  e59f3114          LDR      r3,|L1.60292|
00ea6c  ebfffffe          BL       __aeabi_dsub
00ea70  e1cd03f8          STRD     r0,r1,[sp,#0x38]      ;5880
00ea74  e5995010          LDR      r5,[r9,#0x10]         ;5881
00ea78  e1a02005          MOV      r2,r5                 ;5881
00ea7c  e3a00000          MOV      r0,#0                 ;5881
00ea80  e3a01101          MOV      r1,#0x40000000        ;5881
00ea84  e5993014          LDR      r3,[r9,#0x14]         ;5881
00ea88  ebfffffe          BL       __aeabi_dmul
00ea8c  e1a07000          MOV      r7,r0                 ;5881
00ea90  e3a02000          MOV      r2,#0                 ;5881
00ea94  e59f30e8          LDR      r3,|L1.60292|
00ea98  ebfffffe          BL       __aeabi_dsub
00ea9c  e1cd04f0          STRD     r0,r1,[sp,#0x40]      ;5881
00eaa0  e3a01000          MOV      r1,#0                 ;5881
00eaa4  e59f00d8          LDR      r0,|L1.60292|
00eaa8  e58d004c          STR      r0,[sp,#0x4c]         ;5882
00eaac  e58d1048          STR      r1,[sp,#0x48]         ;5882
00eab0  e28d2030          ADD      r2,sp,#0x30           ;5884
00eab4  e28d10d0          ADD      r1,sp,#0xd0           ;5884
00eab8  e28d0010          ADD      r0,sp,#0x10           ;5884
00eabc  ebfffffe          BL       vMVMUL4x4
00eac0  e3a02000          MOV      r2,#0                 ;5886
00eac4  e1a03002          MOV      r3,r2                 ;5886
00eac8  e59d5028          LDR      r5,[sp,#0x28]         ;5886
00eacc  e1a00005          MOV      r0,r5                 ;5886
00ead0  e59d102c          LDR      r1,[sp,#0x2c]         ;5886
00ead4  ebfffffe          BL       __aeabi_cdcmpeq
00ead8  1a000001          BNE      |L1.60132|
00eadc  e3a00000          MOV      r0,#0                 ;5888
00eae0  eaffffb1          B        |L1.59820|
                  |L1.60132|
00eae4  e59d5028          LDR      r5,[sp,#0x28]         ;5891
00eae8  e1a02005          MOV      r2,r5                 ;5891
00eaec  e3a00000          MOV      r0,#0                 ;5891
00eaf0  e59d302c          LDR      r3,[sp,#0x2c]         ;5891
00eaf4  e59f1088          LDR      r1,|L1.60292|
00eaf8  ebfffffe          BL       __aeabi_ddiv
00eafc  e1cd02f8          STRD     r0,r1,[sp,#0x28]      ;5891
00eb00  e59d5028          LDR      r5,[sp,#0x28]         ;5893
00eb04  e1a02005          MOV      r2,r5                 ;5893
00eb08  e59d7010          LDR      r7,[sp,#0x10]         ;5893
00eb0c  e1a00007          MOV      r0,r7                 ;5893
00eb10  e59d1014          LDR      r1,[sp,#0x14]         ;5893
00eb14  e59d302c          LDR      r3,[sp,#0x2c]         ;5893
00eb18  ebfffffe          BL       __aeabi_dmul
00eb1c  e1c400f0          STRD     r0,r1,[r4,#0]         ;5893
00eb20  e59d5028          LDR      r5,[sp,#0x28]         ;5894
00eb24  e1a02005          MOV      r2,r5                 ;5894
00eb28  e59d7018          LDR      r7,[sp,#0x18]         ;5894
00eb2c  e1a00007          MOV      r0,r7                 ;5894
00eb30  e59d101c          LDR      r1,[sp,#0x1c]         ;5894
00eb34  e59d302c          LDR      r3,[sp,#0x2c]         ;5894
00eb38  ebfffffe          BL       __aeabi_dmul
00eb3c  e1c400f8          STRD     r0,r1,[r4,#8]         ;5894
00eb40  e59d1024          LDR      r1,[sp,#0x24]         ;5895
00eb44  e59d7028          LDR      r7,[sp,#0x28]         ;5895
00eb48  e1a02007          MOV      r2,r7                 ;5895
00eb4c  e59d5020          LDR      r5,[sp,#0x20]         ;5895
00eb50  e1a00005          MOV      r0,r5                 ;5895
00eb54  e59d302c          LDR      r3,[sp,#0x2c]         ;5895
00eb58  ebfffffe          BL       __aeabi_dmul
00eb5c  e1c401f0          STRD     r0,r1,[r4,#0x10]      ;5895
00eb60  e3a00001          MOV      r0,#1                 ;5897
00eb64  eaffff90          B        |L1.59820|
                  |L1.60264|
                          DCD      viewport
                  |L1.60268|
                          DCD      0xbff00000
                  |L1.60272|
                          DCD      matrixmode
                  |L1.60276|
                          DCD      ||ip||
                  |L1.60280|
                          DCD      0x54442d18
                  |L1.60284|
                          DCD      0x400921fb
                  |L1.60288|
                          DCD      0x40668000
                  |L1.60292|
                          DCD      0x3ff00000
                  |L1.60296|
                          DCD      modelview
                  |L1.60300|
                          DCD      projection
                  |L1.60304|
                          DCD      0x3fe00000
                  |L1.60308|
                          DCD      obj
                  |L1.60312|
                          DCD      obj+0x20
                  |L1.60316|
                          DCD      obj+0x40
                  |L1.60320|
                          DCD      obj+0x60
                          ENDP

                  vGfSetIP PROC
;;;5902   
;;;5903   void vGfSetIP(float64_t f64ImgWidth, float64_t f64ImgHeight, float64_t f64Znear, float64_t f64Zfar)
00eba4  e92d4ff0          PUSH     {r4-r11,lr}
;;;5904   {
00eba8  e24dd054          SUB      sp,sp,#0x54
00ebac  e1a04000          MOV      r4,r0
00ebb0  e1a05001          MOV      r5,r1
00ebb4  e1a06002          MOV      r6,r2
00ebb8  e1a07003          MOV      r7,r3
;;;5905       float64_t obj_local[4];
;;;5906       float64_t img[4];
;;;5907   
;;;5908       vGfMatrixMode(GA_RE_IP);
00ebbc  e3a00002          MOV      r0,#2
00ebc0  ebfffffe          BL       vGfMatrixMode
;;;5909       vGfLoadIdentity();
00ebc4  ebfffffe          BL       vGfLoadIdentity
;;;5910       vGfTranslate(0, 0, -(f64Zfar - f64Znear)/2);
00ebc8  e1cd08d0          LDRD     r0,r1,[sp,#0x80]
00ebcc  e1cd27d8          LDRD     r2,r3,[sp,#0x78]
00ebd0  ebfffffe          BL       __aeabi_dsub
00ebd4  e2211102          EOR      r1,r1,#0x80000000
00ebd8  e1a08000          MOV      r8,r0
00ebdc  e3a02000          MOV      r2,#0
00ebe0  e3a03101          MOV      r3,#0x40000000
00ebe4  ebfffffe          BL       __aeabi_ddiv
00ebe8  e3a02000          MOV      r2,#0
00ebec  e1a03002          MOV      r3,r2
00ebf0  e1cd00f0          STRD     r0,r1,[sp,#0]
00ebf4  e1a00002          MOV      r0,r2
00ebf8  e1a01002          MOV      r1,r2
00ebfc  ebfffffe          BL       vGfTranslate
;;;5911   
;;;5912       img[0] = f64ImgWidth/f64ImgHeight;
00ec00  e1a02006          MOV      r2,r6
00ec04  e1a03007          MOV      r3,r7
00ec08  e1a00004          MOV      r0,r4
00ec0c  e1a01005          MOV      r1,r5
00ec10  ebfffffe          BL       __aeabi_ddiv
00ec14  e1cd01f0          STRD     r0,r1,[sp,#0x10]
00ec18  e3a01000          MOV      r1,#0
00ec1c  e51f00a0          LDR      r0,|L1.60292|
;;;5913       img[1] = 1;
00ec20  e58d001c          STR      r0,[sp,#0x1c]
00ec24  e58d1018          STR      r1,[sp,#0x18]
;;;5914       img[2] = 0;
00ec28  e58d1020          STR      r1,[sp,#0x20]
00ec2c  e58d1024          STR      r1,[sp,#0x24]
;;;5915       img[3] = 1;
00ec30  e58d002c          STR      r0,[sp,#0x2c]
00ec34  e58d1028          STR      r1,[sp,#0x28]
;;;5916   
;;;5917       vGfMatrixMode(GA_RE_MODELVIEW);
00ec38  e3a00001          MOV      r0,#1
00ec3c  ebfffffe          BL       vGfMatrixMode
;;;5918       vGfLoadIP();
00ec40  ebfffffe          BL       vGfLoadIP
;;;5919       iProject(obj_local, img);
00ec44  e28d1010          ADD      r1,sp,#0x10
00ec48  e28d0030          ADD      r0,sp,#0x30
00ec4c  ebfffffe          BL       iProject
;;;5920   
;;;5921       obj_local[0] = (obj_local[0] - viewport[0]) - (viewport[2]/2);
00ec50  e51f10f0          LDR      r1,|L1.60264|
00ec54  e5918010          LDR      r8,[r1,#0x10]  ; viewport, viewport
00ec58  e5911014          LDR      r1,[r1,#0x14]
00ec5c  e3a02000          MOV      r2,#0
00ec60  e3a03101          MOV      r3,#0x40000000
00ec64  e1a00008          MOV      r0,r8
00ec68  ebfffffe          BL       __aeabi_ddiv
00ec6c  e1cd00f8          STRD     r0,r1,[sp,#8]
00ec70  e51f1110          LDR      r1,|L1.60264|
00ec74  e5913004          LDR      r3,[r1,#4]  ; viewport, viewport
00ec78  e591a000          LDR      r10,[r1,#0]
00ec7c  e1a0200a          MOV      r2,r10
00ec80  e59d8030          LDR      r8,[sp,#0x30]
00ec84  e1a00008          MOV      r0,r8
00ec88  e59d1034          LDR      r1,[sp,#0x34]
00ec8c  ebfffffe          BL       __aeabi_dsub
00ec90  e1cd00f0          STRD     r0,r1,[sp,#0]
00ec94  e1cd20d8          LDRD     r2,r3,[sp,#8]
00ec98  ebfffffe          BL       __aeabi_dsub
00ec9c  e1cd03f0          STRD     r0,r1,[sp,#0x30]
;;;5922       obj_local[1] = (obj_local[1] - viewport[1]) - (viewport[3]/2);
00eca0  e51f1140          LDR      r1,|L1.60264|
00eca4  e5918018          LDR      r8,[r1,#0x18]  ; viewport, viewport
00eca8  e591101c          LDR      r1,[r1,#0x1c]
00ecac  e3a02000          MOV      r2,#0
00ecb0  e3a03101          MOV      r3,#0x40000000
00ecb4  e1a00008          MOV      r0,r8
00ecb8  ebfffffe          BL       __aeabi_ddiv
00ecbc  e1cd00f8          STRD     r0,r1,[sp,#8]
00ecc0  e51f0160          LDR      r0,|L1.60264|
00ecc4  e590300c          LDR      r3,[r0,#0xc]  ; viewport, viewport
00ecc8  e590a008          LDR      r10,[r0,#8]
00eccc  e1a0200a          MOV      r2,r10
00ecd0  e59d8038          LDR      r8,[sp,#0x38]
00ecd4  e1a00008          MOV      r0,r8
00ecd8  e59d103c          LDR      r1,[sp,#0x3c]
00ecdc  ebfffffe          BL       __aeabi_dsub
00ece0  e1cd00f0          STRD     r0,r1,[sp,#0]
00ece4  e1cd20d8          LDRD     r2,r3,[sp,#8]
00ece8  ebfffffe          BL       __aeabi_dsub
00ecec  e1cd03f8          STRD     r0,r1,[sp,#0x38]
;;;5923   
;;;5924       vGfMatrixMode(GA_RE_IP);
00ecf0  e3a00002          MOV      r0,#2
00ecf4  ebfffffe          BL       vGfMatrixMode
;;;5925       vGfScale(f64ImgWidth/obj_local[0], f64ImgHeight/obj_local[1], 1);
00ecf8  e59d8038          LDR      r8,[sp,#0x38]
00ecfc  e1a02008          MOV      r2,r8
00ed00  e1a00006          MOV      r0,r6
00ed04  e1a01007          MOV      r1,r7
00ed08  e59d303c          LDR      r3,[sp,#0x3c]
00ed0c  ebfffffe          BL       __aeabi_ddiv
00ed10  e1cd00f8          STRD     r0,r1,[sp,#8]
00ed14  e59d8030          LDR      r8,[sp,#0x30]
00ed18  e1a02008          MOV      r2,r8
00ed1c  e1a00004          MOV      r0,r4
00ed20  e1a01005          MOV      r1,r5
00ed24  e59d3034          LDR      r3,[sp,#0x34]
00ed28  ebfffffe          BL       __aeabi_ddiv
00ed2c  e1a0a000          MOV      r10,r0
00ed30  e1a0b001          MOV      r11,r1
00ed34  e3a01000          MOV      r1,#0
00ed38  e51f01bc          LDR      r0,|L1.60292|
00ed3c  e58d0004          STR      r0,[sp,#4]
00ed40  e58d1000          STR      r1,[sp,#0]
00ed44  e1a0000a          MOV      r0,r10
00ed48  e1a0100b          MOV      r1,r11
00ed4c  e1cd20d8          LDRD     r2,r3,[sp,#8]
00ed50  ebfffffe          BL       vGfScale
;;;5926   }
00ed54  e28dd054          ADD      sp,sp,#0x54
00ed58  e8bd8ff0          POP      {r4-r11,pc}
;;;5927   
                          ENDP

                  vGfBuffBlitElement PROC
;;;5930   
;;;5931   void vGfBuffBlitElement(gf_image_st * pstSrcImage, gf_image_st * pstDstImage)
00ed5c  e92d4030          PUSH     {r4,r5,lr}
;;;5932   {
00ed60  e24dd05c          SUB      sp,sp,#0x5c
00ed64  e1a05000          MOV      r5,r0
00ed68  e1a04001          MOV      r4,r1
;;;5933       rot_mem_st stMem;
;;;5934       rot_perspectiveCfg_st stParam;
;;;5935   
;;;5936       u8PreviousOperation = 0U;
00ed6c  e3a00000          MOV      r0,#0
00ed70  e59f1aa0          LDR      r1,|L1.63512|
00ed74  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;5937   
;;;5938       stMem.u32SrcAddr   = pstSrcImage->u32Address;
00ed78  e5950000          LDR      r0,[r5,#0]
00ed7c  e58d004c          STR      r0,[sp,#0x4c]
;;;5939       stMem.u16SrcHeight = pstSrcImage->u16Height;
00ed80  e1d500b6          LDRH     r0,[r5,#6]
00ed84  e1cd04b8          STRH     r0,[sp,#0x48]
;;;5940       stMem.u16SrcWidth  = pstSrcImage->u16Width;
00ed88  e1d500b4          LDRH     r0,[r5,#4]
00ed8c  e1cd04ba          STRH     r0,[sp,#0x4a]
;;;5941       stMem.u32DstAddr   = pstDstImage->u32Address;
00ed90  e5940000          LDR      r0,[r4,#0]
00ed94  e58d0050          STR      r0,[sp,#0x50]
;;;5942   
;;;5943       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00ed98  e5d4000c          LDRB     r0,[r4,#0xc]
00ed9c  e3500004          CMP      r0,#4
00eda0  1a000002          BNE      |L1.60848|
;;;5944       {
;;;5945           stParam.eDstColFmt = GA_RGB16;
00eda4  e3a00000          MOV      r0,#0
00eda8  e5cd0001          STRB     r0,[sp,#1]
00edac  ea000001          B        |L1.60856|
                  |L1.60848|
;;;5946       }
;;;5947       else
;;;5948       {
;;;5949           stParam.eDstColFmt = GA_RGBA32;
00edb0  e3a00001          MOV      r0,#1
00edb4  e5cd0001          STRB     r0,[sp,#1]
                  |L1.60856|
;;;5950       }
;;;5951   
;;;5952       stMem.u16DstImgWidth  = pstDstImage->u16Width;
00edb8  e1d400b4          LDRH     r0,[r4,#4]
00edbc  e1cd05b4          STRH     r0,[sp,#0x54]
;;;5953       stMem.u16DstImgHeight = pstDstImage->u16Height;
00edc0  e1d400b6          LDRH     r0,[r4,#6]
00edc4  e1cd05b6          STRH     r0,[sp,#0x56]
;;;5954   
;;;5955       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00edc8  e5d5000c          LDRB     r0,[r5,#0xc]
00edcc  e3500004          CMP      r0,#4
00edd0  1a000002          BNE      |L1.60896|
;;;5956       {
;;;5957           stParam.eSrcColFmt = GA_RGB16;
00edd4  e3a00000          MOV      r0,#0
00edd8  e5cd0000          STRB     r0,[sp,#0]
00eddc  ea000001          B        |L1.60904|
                  |L1.60896|
;;;5958       }
;;;5959       else
;;;5960       {
;;;5961           stParam.eSrcColFmt = GA_RGBA32;
00ede0  e3a00001          MOV      r0,#1
00ede4  e5cd0000          STRB     r0,[sp,#0]
                  |L1.60904|
;;;5962       }
;;;5963   
;;;5964       /* handle clip window */
;;;5965       stParam.eClipWndEn = stGastate.eClipWndEn;
00ede8  e59f0a2c          LDR      r0,|L1.63516|
00edec  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00edf0  e5cd0002          STRB     r0,[sp,#2]
;;;5966       if (stParam.eClipWndEn == GA_EN)
00edf4  e5dd0002          LDRB     r0,[sp,#2]
00edf8  e3500001          CMP      r0,#1
00edfc  1a00000b          BNE      |L1.60976|
;;;5967       {
;;;5968           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00ee00  e59f0a14          LDR      r0,|L1.63516|
00ee04  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00ee08  e1cd03bc          STRH     r0,[sp,#0x3c]
;;;5969           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
00ee0c  e59f0a08          LDR      r0,|L1.63516|
00ee10  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
00ee14  e1cd03be          STRH     r0,[sp,#0x3e]
;;;5970           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
00ee18  e59f09fc          LDR      r0,|L1.63516|
00ee1c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00ee20  e1cd04b0          STRH     r0,[sp,#0x40]
;;;5971           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
00ee24  e59f09f0          LDR      r0,|L1.63516|
00ee28  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
00ee2c  e1cd04b2          STRH     r0,[sp,#0x42]
                  |L1.60976|
;;;5972       }
;;;5973   
;;;5974       stParam.eFilterEn     = stGastate.eFilterEn;
00ee30  e59f09e4          LDR      r0,|L1.63516|
00ee34  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00ee38  e5cd0003          STRB     r0,[sp,#3]
;;;5975   
;;;5976       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
00ee3c  e59f09d8          LDR      r0,|L1.63516|
00ee40  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
00ee44  e5cd0038          STRB     r0,[sp,#0x38]
;;;5977       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00ee48  e59f09cc          LDR      r0,|L1.63516|
00ee4c  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00ee50  e5cd0039          STRB     r0,[sp,#0x39]
;;;5978       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00ee54  e59f09c0          LDR      r0,|L1.63516|
00ee58  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00ee5c  e5cd003a          STRB     r0,[sp,#0x3a]
;;;5979   
;;;5980       vRotLib_PerspectiveOGL(&stMem, &stParam, pstWriteList);
00ee60  e59f09b8          LDR      r0,|L1.63520|
00ee64  e1a0100d          MOV      r1,sp
00ee68  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00ee6c  e28d0048          ADD      r0,sp,#0x48
00ee70  ebfffffe          BL       vRotLib_PerspectiveOGL
;;;5981   }
00ee74  e28dd05c          ADD      sp,sp,#0x5c
00ee78  e8bd8030          POP      {r4,r5,pc}
;;;5982   
                          ENDP

                  vGfBuffBlendElement PROC
;;;5985   
;;;5986   void vGfBuffBlendElement(gf_image_st * pstSrcImage, gf_image_st * pstDstImage)
00ee7c  e92d4030          PUSH     {r4,r5,lr}
;;;5987   {
00ee80  e24dd06c          SUB      sp,sp,#0x6c
00ee84  e1a05000          MOV      r5,r0
00ee88  e1a04001          MOV      r4,r1
;;;5988       rot_mem_st stMem;
;;;5989       rot_perspectiveblendCfg_st stParam;
;;;5990   
;;;5991       u8PreviousOperation = 0U;
00ee8c  e3a00000          MOV      r0,#0
00ee90  e59f1980          LDR      r1,|L1.63512|
00ee94  e5c10000          STRB     r0,[r1,#0]  ; u8PreviousOperation
;;;5992   
;;;5993       stMem.u32SrcAddr   = pstSrcImage->u32Address;
00ee98  e5950000          LDR      r0,[r5,#0]
00ee9c  e58d005c          STR      r0,[sp,#0x5c]
;;;5994       stMem.u16SrcHeight = pstSrcImage->u16Height;
00eea0  e1d500b6          LDRH     r0,[r5,#6]
00eea4  e1cd05b8          STRH     r0,[sp,#0x58]
;;;5995       stMem.u16SrcWidth  = pstSrcImage->u16Width;
00eea8  e1d500b4          LDRH     r0,[r5,#4]
00eeac  e1cd05ba          STRH     r0,[sp,#0x5a]
;;;5996       stMem.u32DstAddr   = pstDstImage->u32Address;
00eeb0  e5940000          LDR      r0,[r4,#0]
00eeb4  e58d0060          STR      r0,[sp,#0x60]
;;;5997   
;;;5998       if(pstDstImage->eFormat == (uint8_t)FMT_RGB16)
00eeb8  e5d4000c          LDRB     r0,[r4,#0xc]
00eebc  e3500004          CMP      r0,#4
00eec0  1a000002          BNE      |L1.61136|
;;;5999       {
;;;6000           stParam.eDstColFmt = GA_RGB16;
00eec4  e3a00000          MOV      r0,#0
00eec8  e5cd0001          STRB     r0,[sp,#1]
00eecc  ea000001          B        |L1.61144|
                  |L1.61136|
;;;6001       }
;;;6002       else
;;;6003       {
;;;6004           stParam.eDstColFmt = GA_RGBA32;
00eed0  e3a00001          MOV      r0,#1
00eed4  e5cd0001          STRB     r0,[sp,#1]
                  |L1.61144|
;;;6005       }
;;;6006   
;;;6007       stMem.u16DstImgWidth  = pstDstImage->u16Width;
00eed8  e1d400b4          LDRH     r0,[r4,#4]
00eedc  e1cd06b4          STRH     r0,[sp,#0x64]
;;;6008       stMem.u16DstImgHeight = pstDstImage->u16Height;
00eee0  e1d400b6          LDRH     r0,[r4,#6]
00eee4  e1cd06b6          STRH     r0,[sp,#0x66]
;;;6009   
;;;6010       if(pstSrcImage->eFormat == (uint8_t)FMT_RGB16)
00eee8  e5d5000c          LDRB     r0,[r5,#0xc]
00eeec  e3500004          CMP      r0,#4
00eef0  1a000002          BNE      |L1.61184|
;;;6011       {
;;;6012           stParam.eSrcColFmt = GA_RGB16;
00eef4  e3a00000          MOV      r0,#0
00eef8  e5cd0000          STRB     r0,[sp,#0]
00eefc  ea000001          B        |L1.61192|
                  |L1.61184|
;;;6013       }
;;;6014       else
;;;6015       {
;;;6016           stParam.eSrcColFmt = GA_RGBA32;
00ef00  e3a00001          MOV      r0,#1
00ef04  e5cd0000          STRB     r0,[sp,#0]
                  |L1.61192|
;;;6017       }
;;;6018   
;;;6019       /* handle clip window */
;;;6020       stParam.eClipWndEn = stGastate.eClipWndEn;
00ef08  e59f090c          LDR      r0,|L1.63516|
00ef0c  e5d00023          LDRB     r0,[r0,#0x23]  ; stGastate
00ef10  e5cd0002          STRB     r0,[sp,#2]
;;;6021       if (stParam.eClipWndEn == GA_EN)
00ef14  e5dd0002          LDRB     r0,[sp,#2]
00ef18  e3500001          CMP      r0,#1
00ef1c  1a00000b          BNE      |L1.61264|
;;;6022       {
;;;6023           stParam.tClipWnd.u16UlX = stGastate.u16ClipC1_X;
00ef20  e59f08f4          LDR      r0,|L1.63516|
00ef24  e1d002b4          LDRH     r0,[r0,#0x24]  ; stGastate
00ef28  e1cd04bc          STRH     r0,[sp,#0x4c]
;;;6024           stParam.tClipWnd.u16UlY = stGastate.u16ClipC1_Y;
00ef2c  e59f08e8          LDR      r0,|L1.63516|
00ef30  e1d002b6          LDRH     r0,[r0,#0x26]  ; stGastate
00ef34  e1cd04be          STRH     r0,[sp,#0x4e]
;;;6025           stParam.tClipWnd.u16LrX = stGastate.u16ClipC2_X;
00ef38  e59f08dc          LDR      r0,|L1.63516|
00ef3c  e1d002b8          LDRH     r0,[r0,#0x28]  ; stGastate
00ef40  e1cd05b0          STRH     r0,[sp,#0x50]
;;;6026           stParam.tClipWnd.u16LrY = stGastate.u16ClipC2_Y;
00ef44  e59f08d0          LDR      r0,|L1.63516|
00ef48  e1d002ba          LDRH     r0,[r0,#0x2a]  ; stGastate
00ef4c  e1cd05b2          STRH     r0,[sp,#0x52]
                  |L1.61264|
;;;6027       }
;;;6028   
;;;6029       stParam.eFilterEn     = stGastate.eFilterEn;
00ef50  e59f08c4          LDR      r0,|L1.63516|
00ef54  e5d00008          LDRB     r0,[r0,#8]  ; stGastate
00ef58  e5cd0003          STRB     r0,[sp,#3]
;;;6030   
;;;6031       stParam.eBldOrd       = stGastate.eBlndOrder;
00ef5c  e59f08b8          LDR      r0,|L1.63516|
00ef60  e5d00009          LDRB     r0,[r0,#9]  ; stGastate
00ef64  e5cd0049          STRB     r0,[sp,#0x49]
;;;6032       stParam.u8FadingFctr  = stGastate.u8FadingFctr;
00ef68  e59f08ac          LDR      r0,|L1.63516|
00ef6c  e5d0000b          LDRB     r0,[r0,#0xb]  ; stGastate
00ef70  e5cd0048          STRB     r0,[sp,#0x48]
;;;6033       stParam.u8SrcAlphaVal = stGastate.u8SrcAlphaVal;
00ef74  e59f08a0          LDR      r0,|L1.63516|
00ef78  e5d00016          LDRB     r0,[r0,#0x16]  ; stGastate
00ef7c  e5cd004a          STRB     r0,[sp,#0x4a]
;;;6034       stParam.u8DstAlphaVal = stGastate.u8DstAlphaVal;
00ef80  e59f0894          LDR      r0,|L1.63516|
00ef84  e5d00017          LDRB     r0,[r0,#0x17]  ; stGastate
00ef88  e5cd004b          STRB     r0,[sp,#0x4b]
;;;6035   
;;;6036       stParam.eDstRedProt   = stGastate.eRedChPrtEn;
00ef8c  e59f0888          LDR      r0,|L1.63516|
00ef90  e5d00000          LDRB     r0,[r0,#0]  ; stGastate
00ef94  e5cd0040          STRB     r0,[sp,#0x40]
;;;6037       stParam.eDstGreenProt = stGastate.eGreenChPrtEn;
00ef98  e59f087c          LDR      r0,|L1.63516|
00ef9c  e5d00001          LDRB     r0,[r0,#1]  ; stGastate
00efa0  e5cd0041          STRB     r0,[sp,#0x41]
;;;6038       stParam.eDstBlueProt  = stGastate.eBlueChPrtEn;
00efa4  e59f0870          LDR      r0,|L1.63516|
00efa8  e5d00002          LDRB     r0,[r0,#2]  ; stGastate
00efac  e5cd0042          STRB     r0,[sp,#0x42]
;;;6039       stParam.eDstAlphaProt = stGastate.eAlphaChPrtEn;
00efb0  e59f0864          LDR      r0,|L1.63516|
00efb4  e5d00003          LDRB     r0,[r0,#3]  ; stGastate
00efb8  e5cd0043          STRB     r0,[sp,#0x43]
;;;6040       stParam.eSrcRedFad    = stGastate.eSrcRedFad;
00efbc  e59f0858          LDR      r0,|L1.63516|
00efc0  e5d00004          LDRB     r0,[r0,#4]  ; stGastate
00efc4  e5cd0044          STRB     r0,[sp,#0x44]
;;;6041       stParam.eSrcGreenFad  = stGastate.eSrcGreenFad;
00efc8  e59f084c          LDR      r0,|L1.63516|
00efcc  e5d00005          LDRB     r0,[r0,#5]  ; stGastate
00efd0  e5cd0045          STRB     r0,[sp,#0x45]
;;;6042       stParam.eSrcBlueFad   = stGastate.eSrcBlueFad;
00efd4  e59f0840          LDR      r0,|L1.63516|
00efd8  e5d00006          LDRB     r0,[r0,#6]  ; stGastate
00efdc  e5cd0046          STRB     r0,[sp,#0x46]
;;;6043       stParam.eSrcAlphaFad  = stGastate.eSrcAlphaFad;
00efe0  e59f0834          LDR      r0,|L1.63516|
00efe4  e5d00007          LDRB     r0,[r0,#7]  ; stGastate
00efe8  e5cd0047          STRB     r0,[sp,#0x47]
;;;6044   
;;;6045       vRotLib_PerspectiveBlendOGL(&stMem, &stParam, pstWriteList);
00efec  e59f082c          LDR      r0,|L1.63520|
00eff0  e1a0100d          MOV      r1,sp
00eff4  e5902000          LDR      r2,[r0,#0]  ; pstWriteList
00eff8  e28d0058          ADD      r0,sp,#0x58
00effc  ebfffffe          BL       vRotLib_PerspectiveBlendOGL
;;;6046   }
00f000  e28dd06c          ADD      sp,sp,#0x6c
00f004  e8bd8030          POP      {r4,r5,pc}
;;;6047   
                          ENDP

                  vGfLayerFillArea PROC
;;;6055   
;;;6056   void vGfLayerFillArea(gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f008  e92d4070          PUSH     {r4-r6,lr}
;;;6057                         uint32_t u32Color)
;;;6058   {
00f00c  e1a04000          MOV      r4,r0
00f010  e1a05001          MOV      r5,r1
00f014  e1a06002          MOV      r6,r2
;;;6059       vGfBuffFillArea(&(pstLayer->stWriteFB), pstImgPart, u32Color);
00f018  e1a02006          MOV      r2,r6
00f01c  e1a01005          MOV      r1,r5
00f020  e2840020          ADD      r0,r4,#0x20
00f024  ebfffffe          BL       vGfBuffFillArea
;;;6060   }
00f028  e8bd8070          POP      {r4-r6,pc}
;;;6061   
                          ENDP

                  u32GfLayerBlitBitmapFull PROC
;;;6064   
;;;6065   uint32_t u32GfLayerBlitBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f02c  e92d41f0          PUSH     {r4-r8,lr}
;;;6066                                     int32_t i32PosX, int32_t i32PosY)
;;;6067   {
00f030  e1a05000          MOV      r5,r0
00f034  e1a04001          MOV      r4,r1
00f038  e1a06002          MOV      r6,r2
00f03c  e1a07003          MOV      r7,r3
;;;6068       return u32GfBuffBlitBitmapFull(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f040  e1a03007          MOV      r3,r7
00f044  e1a02006          MOV      r2,r6
00f048  e2841020          ADD      r1,r4,#0x20
00f04c  e1a00005          MOV      r0,r5
00f050  ebfffffe          BL       u32GfBuffBlitBitmapFull
;;;6069   }
00f054  e8bd81f0          POP      {r4-r8,pc}
;;;6070   
                          ENDP

                  vGfLayerBlitBitmapFull PROC
;;;6073   
;;;6074   void vGfLayerBlitBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f058  e92d41f0          PUSH     {r4-r8,lr}
;;;6075                               int32_t i32PosX, int32_t i32PosY)
;;;6076   {
00f05c  e1a05000          MOV      r5,r0
00f060  e1a04001          MOV      r4,r1
00f064  e1a06002          MOV      r6,r2
00f068  e1a07003          MOV      r7,r3
;;;6077       vGfBuffBlitBitmapFull(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f06c  e1a03007          MOV      r3,r7
00f070  e1a02006          MOV      r2,r6
00f074  e2841020          ADD      r1,r4,#0x20
00f078  e1a00005          MOV      r0,r5
00f07c  ebfffffe          BL       vGfBuffBlitBitmapFull
;;;6078   }
00f080  e8bd81f0          POP      {r4-r8,pc}
;;;6079   
                          ENDP

                  vGfLayerBlitBitmapPart PROC
;;;6082   
;;;6083   void vGfLayerBlitBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f084  e92d43f8          PUSH     {r3-r9,lr}
;;;6084                               uint32_t u32PosX, uint32_t u32PosY)
;;;6085   {
00f088  e1a05000          MOV      r5,r0
00f08c  e1a04001          MOV      r4,r1
00f090  e1a06002          MOV      r6,r2
00f094  e1a07003          MOV      r7,r3
00f098  e59d8020          LDR      r8,[sp,#0x20]
;;;6086       vGfBuffBlitBitmapPart(pstImage, &(pstLayer->stWriteFB), pstImgPart, u32PosX, u32PosY);
00f09c  e1a03007          MOV      r3,r7
00f0a0  e1a02006          MOV      r2,r6
00f0a4  e2841020          ADD      r1,r4,#0x20
00f0a8  e1a00005          MOV      r0,r5
00f0ac  e58d8000          STR      r8,[sp,#0]
00f0b0  ebfffffe          BL       vGfBuffBlitBitmapPart
;;;6087   }
00f0b4  e8bd83f8          POP      {r3-r9,pc}
;;;6088   
                          ENDP

                  u32GfLayerBlitBitmapPart PROC
;;;6091   
;;;6092   uint32_t u32GfLayerBlitBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f0b8  e92d43f8          PUSH     {r3-r9,lr}
;;;6093                                     uint32_t u32PosX, uint32_t u32PosY)
;;;6094   {
00f0bc  e1a05000          MOV      r5,r0
00f0c0  e1a04001          MOV      r4,r1
00f0c4  e1a06002          MOV      r6,r2
00f0c8  e1a07003          MOV      r7,r3
00f0cc  e59d8020          LDR      r8,[sp,#0x20]
;;;6095       return u32GfBuffBlitBitmapPart(pstImage, &(pstLayer->stWriteFB), pstImgPart, u32PosX, u32PosY);
00f0d0  e1a03007          MOV      r3,r7
00f0d4  e1a02006          MOV      r2,r6
00f0d8  e2841020          ADD      r1,r4,#0x20
00f0dc  e1a00005          MOV      r0,r5
00f0e0  e58d8000          STR      r8,[sp,#0]
00f0e4  ebfffffe          BL       u32GfBuffBlitBitmapPart
;;;6096   }
00f0e8  e8bd83f8          POP      {r3-r9,pc}
;;;6097   
                          ENDP

                  vGfLayerBlitBitmapRLE16 PROC
;;;6100   
;;;6101   void vGfLayerBlitBitmapRLE16(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f0ec  e92d41f0          PUSH     {r4-r8,lr}
;;;6102                                int32_t i32PosX, int32_t i32PosY)
;;;6103   {
00f0f0  e1a05000          MOV      r5,r0
00f0f4  e1a04001          MOV      r4,r1
00f0f8  e1a06002          MOV      r6,r2
00f0fc  e1a07003          MOV      r7,r3
;;;6104       vGfBuffBlitBitmapRLE16(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f100  e1a03007          MOV      r3,r7
00f104  e1a02006          MOV      r2,r6
00f108  e2841020          ADD      r1,r4,#0x20
00f10c  e1a00005          MOV      r0,r5
00f110  ebfffffe          BL       vGfBuffBlitBitmapRLE16
;;;6105   }
00f114  e8bd81f0          POP      {r4-r8,pc}
;;;6106   
                          ENDP

                  vGfLayerBlitBitmapRLE24 PROC
;;;6109   
;;;6110   void vGfLayerBlitBitmapRLE24(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f118  e92d41f0          PUSH     {r4-r8,lr}
;;;6111                                int32_t i32PosX, int32_t i32PosY)
;;;6112   {
00f11c  e1a05000          MOV      r5,r0
00f120  e1a04001          MOV      r4,r1
00f124  e1a06002          MOV      r6,r2
00f128  e1a07003          MOV      r7,r3
;;;6113       vGfBuffBlitBitmapRLE24(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f12c  e1a03007          MOV      r3,r7
00f130  e1a02006          MOV      r2,r6
00f134  e2841020          ADD      r1,r4,#0x20
00f138  e1a00005          MOV      r0,r5
00f13c  ebfffffe          BL       vGfBuffBlitBitmapRLE24
;;;6114   }
00f140  e8bd81f0          POP      {r4-r8,pc}
;;;6115   
                          ENDP

                  vGfLayerBlitBitmapRLE24A PROC
;;;6118   
;;;6119   void vGfLayerBlitBitmapRLE24A(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f144  e92d41f0          PUSH     {r4-r8,lr}
;;;6120                                 int32_t i32PosX, int32_t i32PosY)
;;;6121   {
00f148  e1a05000          MOV      r5,r0
00f14c  e1a04001          MOV      r4,r1
00f150  e1a06002          MOV      r6,r2
00f154  e1a07003          MOV      r7,r3
;;;6122       vGfBuffBlitBitmapRLE24A(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f158  e1a03007          MOV      r3,r7
00f15c  e1a02006          MOV      r2,r6
00f160  e2841020          ADD      r1,r4,#0x20
00f164  e1a00005          MOV      r0,r5
00f168  ebfffffe          BL       vGfBuffBlitBitmapRLE24A
;;;6123   }
00f16c  e8bd81f0          POP      {r4-r8,pc}
;;;6124   
                          ENDP

                  vGfLayerBlitBitmapRLE32 PROC
;;;6127   
;;;6128   void vGfLayerBlitBitmapRLE32(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f170  e92d41f0          PUSH     {r4-r8,lr}
;;;6129                                int32_t i32PosX, int32_t i32PosY)
;;;6130   {
00f174  e1a05000          MOV      r5,r0
00f178  e1a04001          MOV      r4,r1
00f17c  e1a06002          MOV      r6,r2
00f180  e1a07003          MOV      r7,r3
;;;6131       vGfBuffBlitBitmapRLE32(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f184  e1a03007          MOV      r3,r7
00f188  e1a02006          MOV      r2,r6
00f18c  e2841020          ADD      r1,r4,#0x20
00f190  e1a00005          MOV      r0,r5
00f194  ebfffffe          BL       vGfBuffBlitBitmapRLE32
;;;6132   }
00f198  e8bd81f0          POP      {r4-r8,pc}
;;;6133   
                          ENDP

                  vGfLayerBlendFillArea PROC
;;;6136   
;;;6137   void vGfLayerBlendFillArea(gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart, uint32_t u32Color)
00f19c  e92d4070          PUSH     {r4-r6,lr}
;;;6138   {
00f1a0  e1a04000          MOV      r4,r0
00f1a4  e1a05001          MOV      r5,r1
00f1a8  e1a06002          MOV      r6,r2
;;;6139       vGfBuffBlendFillArea(&(pstLayer->stWriteFB), pstImgPart, u32Color);
00f1ac  e1a02006          MOV      r2,r6
00f1b0  e1a01005          MOV      r1,r5
00f1b4  e2840020          ADD      r0,r4,#0x20
00f1b8  ebfffffe          BL       vGfBuffBlendFillArea
;;;6140   }
00f1bc  e8bd8070          POP      {r4-r6,pc}
;;;6141   
                          ENDP

                  u32GfLayerBlendBitmapFull PROC
;;;6144   
;;;6145   uint32_t u32GfLayerBlendBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f1c0  e92d41f0          PUSH     {r4-r8,lr}
;;;6146                                      int32_t i32PosX, int32_t i32PosY)
;;;6147   {
00f1c4  e1a05000          MOV      r5,r0
00f1c8  e1a04001          MOV      r4,r1
00f1cc  e1a06002          MOV      r6,r2
00f1d0  e1a07003          MOV      r7,r3
;;;6148       return u32GfBuffBlendBitmapFull(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f1d4  e1a03007          MOV      r3,r7
00f1d8  e1a02006          MOV      r2,r6
00f1dc  e2841020          ADD      r1,r4,#0x20
00f1e0  e1a00005          MOV      r0,r5
00f1e4  ebfffffe          BL       u32GfBuffBlendBitmapFull
;;;6149   }
00f1e8  e8bd81f0          POP      {r4-r8,pc}
;;;6150   
                          ENDP

                  vGfLayerBlendBitmapFull PROC
;;;6153   
;;;6154   void vGfLayerBlendBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f1ec  e92d41f0          PUSH     {r4-r8,lr}
;;;6155                                int32_t i32PosX, int32_t i32PosY)
;;;6156   {
00f1f0  e1a05000          MOV      r5,r0
00f1f4  e1a04001          MOV      r4,r1
00f1f8  e1a06002          MOV      r6,r2
00f1fc  e1a07003          MOV      r7,r3
;;;6157       vGfBuffBlendBitmapFull(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f200  e1a03007          MOV      r3,r7
00f204  e1a02006          MOV      r2,r6
00f208  e2841020          ADD      r1,r4,#0x20
00f20c  e1a00005          MOV      r0,r5
00f210  ebfffffe          BL       vGfBuffBlendBitmapFull
;;;6158   }
00f214  e8bd81f0          POP      {r4-r8,pc}
;;;6159   
                          ENDP

                  u32GfLayerBlendBitmapPart PROC
;;;6162   
;;;6163   uint32_t u32GfLayerBlendBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f218  e92d43f8          PUSH     {r3-r9,lr}
;;;6164                                      uint32_t u32PosX, uint32_t u32PosY)
;;;6165   {
00f21c  e1a05000          MOV      r5,r0
00f220  e1a04001          MOV      r4,r1
00f224  e1a06002          MOV      r6,r2
00f228  e1a07003          MOV      r7,r3
00f22c  e59d8020          LDR      r8,[sp,#0x20]
;;;6166       return u32GfBuffBlendBitmapPart(pstImage, &(pstLayer->stWriteFB), pstImgPart, u32PosX, u32PosY);
00f230  e1a03007          MOV      r3,r7
00f234  e1a02006          MOV      r2,r6
00f238  e2841020          ADD      r1,r4,#0x20
00f23c  e1a00005          MOV      r0,r5
00f240  e58d8000          STR      r8,[sp,#0]
00f244  ebfffffe          BL       u32GfBuffBlendBitmapPart
;;;6167   }
00f248  e8bd83f8          POP      {r3-r9,pc}
;;;6168   
                          ENDP

                  vGfLayerBlendBitmapPart PROC
;;;6171   
;;;6172   void vGfLayerBlendBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f24c  e92d43f8          PUSH     {r3-r9,lr}
;;;6173                                uint32_t u32PosX, uint32_t u32PosY)
;;;6174   {
00f250  e1a05000          MOV      r5,r0
00f254  e1a04001          MOV      r4,r1
00f258  e1a06002          MOV      r6,r2
00f25c  e1a07003          MOV      r7,r3
00f260  e59d8020          LDR      r8,[sp,#0x20]
;;;6175       vGfBuffBlendBitmapPart(pstImage, &(pstLayer->stWriteFB), pstImgPart, u32PosX, u32PosY);
00f264  e1a03007          MOV      r3,r7
00f268  e1a02006          MOV      r2,r6
00f26c  e2841020          ADD      r1,r4,#0x20
00f270  e1a00005          MOV      r0,r5
00f274  e58d8000          STR      r8,[sp,#0]
00f278  ebfffffe          BL       vGfBuffBlendBitmapPart
;;;6176   }
00f27c  e8bd83f8          POP      {r3-r9,pc}
;;;6177   
                          ENDP

                  vGfLayerBlendBitmapRLE16 PROC
;;;6180   
;;;6181   void vGfLayerBlendBitmapRLE16(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f280  e92d41f0          PUSH     {r4-r8,lr}
;;;6182                                 int32_t i32PosX, int32_t i32PosY)
;;;6183   {
00f284  e1a05000          MOV      r5,r0
00f288  e1a04001          MOV      r4,r1
00f28c  e1a06002          MOV      r6,r2
00f290  e1a07003          MOV      r7,r3
;;;6184       vGfBuffBlendBitmapRLE16(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f294  e1a03007          MOV      r3,r7
00f298  e1a02006          MOV      r2,r6
00f29c  e2841020          ADD      r1,r4,#0x20
00f2a0  e1a00005          MOV      r0,r5
00f2a4  ebfffffe          BL       vGfBuffBlendBitmapRLE16
;;;6185   }
00f2a8  e8bd81f0          POP      {r4-r8,pc}
;;;6186   
                          ENDP

                  vGfLayerBlendBitmapRLE24 PROC
;;;6189   
;;;6190   void vGfLayerBlendBitmapRLE24(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f2ac  e92d41f0          PUSH     {r4-r8,lr}
;;;6191                                 int32_t i32PosX, int32_t i32PosY)
;;;6192   {
00f2b0  e1a05000          MOV      r5,r0
00f2b4  e1a04001          MOV      r4,r1
00f2b8  e1a06002          MOV      r6,r2
00f2bc  e1a07003          MOV      r7,r3
;;;6193       vGfBuffBlendBitmapRLE24(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f2c0  e1a03007          MOV      r3,r7
00f2c4  e1a02006          MOV      r2,r6
00f2c8  e2841020          ADD      r1,r4,#0x20
00f2cc  e1a00005          MOV      r0,r5
00f2d0  ebfffffe          BL       vGfBuffBlendBitmapRLE24
;;;6194   }
00f2d4  e8bd81f0          POP      {r4-r8,pc}
;;;6195   
                          ENDP

                  vGfLayerBlendBitmapRLE24A PROC
;;;6198   
;;;6199   void vGfLayerBlendBitmapRLE24A(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f2d8  e92d41f0          PUSH     {r4-r8,lr}
;;;6200                                  int32_t i32PosX, int32_t i32PosY)
;;;6201   {
00f2dc  e1a05000          MOV      r5,r0
00f2e0  e1a04001          MOV      r4,r1
00f2e4  e1a06002          MOV      r6,r2
00f2e8  e1a07003          MOV      r7,r3
;;;6202       vGfBuffBlendBitmapRLE24A(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f2ec  e1a03007          MOV      r3,r7
00f2f0  e1a02006          MOV      r2,r6
00f2f4  e2841020          ADD      r1,r4,#0x20
00f2f8  e1a00005          MOV      r0,r5
00f2fc  ebfffffe          BL       vGfBuffBlendBitmapRLE24A
;;;6203   }
00f300  e8bd81f0          POP      {r4-r8,pc}
;;;6204   
                          ENDP

                  vGfLayerBlendBitmapRLE32 PROC
;;;6207   
;;;6208   void vGfLayerBlendBitmapRLE32(gf_image_st * pstImage, gf_layer_st * pstLayer,
00f304  e92d41f0          PUSH     {r4-r8,lr}
;;;6209                                 int32_t i32PosX, int32_t i32PosY)
;;;6210   {
00f308  e1a05000          MOV      r5,r0
00f30c  e1a04001          MOV      r4,r1
00f310  e1a06002          MOV      r6,r2
00f314  e1a07003          MOV      r7,r3
;;;6211       vGfBuffBlendBitmapRLE32(pstImage, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f318  e1a03007          MOV      r3,r7
00f31c  e1a02006          MOV      r2,r6
00f320  e2841020          ADD      r1,r4,#0x20
00f324  e1a00005          MOV      r0,r5
00f328  ebfffffe          BL       vGfBuffBlendBitmapRLE32
;;;6212   }
00f32c  e8bd81f0          POP      {r4-r8,pc}
;;;6213   
                          ENDP

                  vGfLayerRotateBitmapFull PROC
;;;6216   
;;;6217   void vGfLayerRotateBitmapFull(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f330  e92d43f8          PUSH     {r3-r9,lr}
;;;6218                                 int32_t i32PosX, int32_t i32PosY)
;;;6219   {
00f334  e1a05000          MOV      r5,r0
00f338  e1a06001          MOV      r6,r1
00f33c  e1a04002          MOV      r4,r2
00f340  e1a07003          MOV      r7,r3
00f344  e59d8020          LDR      r8,[sp,#0x20]
;;;6220       vGfBuffRotateBitmapFull(pstImage, f32Angle, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f348  e1a03007          MOV      r3,r7
00f34c  e2842020          ADD      r2,r4,#0x20
00f350  e1a01006          MOV      r1,r6
00f354  e1a00005          MOV      r0,r5
00f358  e58d8000          STR      r8,[sp,#0]
00f35c  ebfffffe          BL       vGfBuffRotateBitmapFull
;;;6221   }
00f360  e8bd83f8          POP      {r3-r9,pc}
;;;6222   
                          ENDP

                  vGfLayerRotateBitmapPart PROC
;;;6225   
;;;6226   void vGfLayerRotateBitmapPart(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f364  e92d47fc          PUSH     {r2-r10,lr}
;;;6227                                 int32_t i32PosX, int32_t i32PosY)
;;;6228   {
00f368  e1a05000          MOV      r5,r0
00f36c  e1a06001          MOV      r6,r1
00f370  e1a04002          MOV      r4,r2
00f374  e1a07003          MOV      r7,r3
00f378  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6229       vGfBuffRotateBitmapPart(pstImage, f32Angle, &(pstLayer->stWriteFB), pstImgPart, i32PosX, i32PosY);
00f37c  e1a03007          MOV      r3,r7
00f380  e2842020          ADD      r2,r4,#0x20
00f384  e1a01006          MOV      r1,r6
00f388  e1a00005          MOV      r0,r5
00f38c  e1cd80f0          STRD     r8,r9,[sp,#0]
00f390  ebfffffe          BL       vGfBuffRotateBitmapPart
;;;6230   }
00f394  e8bd87fc          POP      {r2-r10,pc}
;;;6231   
                          ENDP

                  vGfLayerRotateBitmapOptimized PROC
;;;6234   
;;;6235   void vGfLayerRotateBitmapOptimized(gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f398  e92d4ffe          PUSH     {r1-r11,lr}
;;;6236                                      uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight)
;;;6237   {
00f39c  e1a05000          MOV      r5,r0
00f3a0  e1a06001          MOV      r6,r1
00f3a4  e1a04002          MOV      r4,r2
00f3a8  e1a07003          MOV      r7,r3
00f3ac  e28da030          ADD      r10,sp,#0x30
00f3b0  e89a0700          LDM      r10,{r8-r10}
;;;6238       vGfBuffRotateBitmapOptimized(pstSrcImage, f32Angle, &(pstLayer->stWriteFB), u32PosX, u32PosY, u32BlockWidth, u32BlockHeight);
00f3b4  e1a03007          MOV      r3,r7
00f3b8  e2842020          ADD      r2,r4,#0x20
00f3bc  e1a01006          MOV      r1,r6
00f3c0  e1a00005          MOV      r0,r5
00f3c4  e88d0700          STM      sp,{r8-r10}
00f3c8  ebfffffe          BL       vGfBuffRotateBitmapOptimized
;;;6239   }
00f3cc  e8bd8ffe          POP      {r1-r11,pc}
;;;6240   
                          ENDP

                  vGfLayerRotateBlendBitmapFull PROC
;;;6243   
;;;6244   void vGfLayerRotateBlendBitmapFull(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f3d0  e92d43f8          PUSH     {r3-r9,lr}
;;;6245                                      int32_t i32PosX, int32_t i32PosY)
;;;6246   {
00f3d4  e1a05000          MOV      r5,r0
00f3d8  e1a06001          MOV      r6,r1
00f3dc  e1a04002          MOV      r4,r2
00f3e0  e1a07003          MOV      r7,r3
00f3e4  e59d8020          LDR      r8,[sp,#0x20]
;;;6247       vGfBuffRotateBlendBitmapFull(pstImage, f32Angle, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f3e8  e1a03007          MOV      r3,r7
00f3ec  e2842020          ADD      r2,r4,#0x20
00f3f0  e1a01006          MOV      r1,r6
00f3f4  e1a00005          MOV      r0,r5
00f3f8  e58d8000          STR      r8,[sp,#0]
00f3fc  ebfffffe          BL       vGfBuffRotateBlendBitmapFull
;;;6248   }
00f400  e8bd83f8          POP      {r3-r9,pc}
;;;6249   
                          ENDP

                  vGfLayerRotateBlendBitmapPart PROC
;;;6252   
;;;6253   void vGfLayerRotateBlendBitmapPart(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
00f404  e92d47fc          PUSH     {r2-r10,lr}
;;;6254                                      int32_t i32PosX, int32_t i32PosY)
;;;6255   {
00f408  e1a05000          MOV      r5,r0
00f40c  e1a06001          MOV      r6,r1
00f410  e1a04002          MOV      r4,r2
00f414  e1a07003          MOV      r7,r3
00f418  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6256       vGfBuffRotateBlendBitmapPart(pstImage, f32Angle, &(pstLayer->stWriteFB), pstImgPart, i32PosX, i32PosY);
00f41c  e1a03007          MOV      r3,r7
00f420  e2842020          ADD      r2,r4,#0x20
00f424  e1a01006          MOV      r1,r6
00f428  e1a00005          MOV      r0,r5
00f42c  e1cd80f0          STRD     r8,r9,[sp,#0]
00f430  ebfffffe          BL       vGfBuffRotateBlendBitmapPart
;;;6257   }
00f434  e8bd87fc          POP      {r2-r10,pc}
;;;6258   
                          ENDP

                  vGfLayerRotateNeedleFill PROC
;;;6261   
;;;6262   void vGfLayerRotateNeedleFill(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f438  e92d47fc          PUSH     {r2-r10,lr}
;;;6263                                 uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight)
;;;6264   {
00f43c  e1a05000          MOV      r5,r0
00f440  e1a06001          MOV      r6,r1
00f444  e1a04002          MOV      r4,r2
00f448  e1a07003          MOV      r7,r3
00f44c  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6265       vGfBuffRotateNeedleFill(pstImage, f32Angle, &(pstLayer->stWriteFB), u32PosX, u32PosY, u32BlockHeight);
00f450  e1a03007          MOV      r3,r7
00f454  e2842020          ADD      r2,r4,#0x20
00f458  e1a01006          MOV      r1,r6
00f45c  e1a00005          MOV      r0,r5
00f460  e1cd80f0          STRD     r8,r9,[sp,#0]
00f464  ebfffffe          BL       vGfBuffRotateNeedleFill
;;;6266   }
00f468  e8bd87fc          POP      {r2-r10,pc}
;;;6267   
                          ENDP

                  vGfLayerRotateNeedle PROC
;;;6270   
;;;6271   void vGfLayerRotateNeedle(gf_image_st * pstImageBg, gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f46c  e92d4ffe          PUSH     {r1-r11,lr}
;;;6272                             uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight)
;;;6273   {
00f470  e1a05000          MOV      r5,r0
00f474  e1a06001          MOV      r6,r1
00f478  e1a07002          MOV      r7,r2
00f47c  e1a04003          MOV      r4,r3
00f480  e28da030          ADD      r10,sp,#0x30
00f484  e89a0700          LDM      r10,{r8-r10}
;;;6274       vGfBuffRotateNeedle(pstImageBg, pstImage, f32Angle, &(pstLayer->stWriteFB), u32PosX, u32PosY, u32BlockHeight);
00f488  e2843020          ADD      r3,r4,#0x20
00f48c  e1a02007          MOV      r2,r7
00f490  e1a01006          MOV      r1,r6
00f494  e1a00005          MOV      r0,r5
00f498  e88d0700          STM      sp,{r8-r10}
00f49c  ebfffffe          BL       vGfBuffRotateNeedle
;;;6275   }
00f4a0  e8bd8ffe          POP      {r1-r11,pc}
;;;6276   
                          ENDP

                  vGfLayerRotateNeedleTipandBaseFill PROC
;;;6279   
;;;6280   void vGfLayerRotateNeedleTipandBaseFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f4a4  e92d47fc          PUSH     {r2-r10,lr}
;;;6281                                           uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef)
;;;6282   {
00f4a8  e1a05000          MOV      r5,r0
00f4ac  e1a06001          MOV      r6,r1
00f4b0  e1a04002          MOV      r4,r2
00f4b4  e1a07003          MOV      r7,r3
00f4b8  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6283       vGfBuffRotateNeedleTipandBaseFill(pstSrcImage, f32Angle, &(pstLayer->stWriteFB), u32PosX, u32PosY, pstDef);
00f4bc  e1a03007          MOV      r3,r7
00f4c0  e2842020          ADD      r2,r4,#0x20
00f4c4  e1a01006          MOV      r1,r6
00f4c8  e1a00005          MOV      r0,r5
00f4cc  e1cd80f0          STRD     r8,r9,[sp,#0]
00f4d0  ebfffffe          BL       vGfBuffRotateNeedleTipandBaseFill
;;;6284   }
00f4d4  e8bd87fc          POP      {r2-r10,pc}
;;;6285   
                          ENDP

                  vGfLayerRotateNeedleTipandBase PROC
;;;6288   
;;;6289   void vGfLayerRotateNeedleTipandBase(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
00f4d8  e92d4ffe          PUSH     {r1-r11,lr}
;;;6290                                       uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef)
;;;6291   {
00f4dc  e1a05000          MOV      r5,r0
00f4e0  e1a06001          MOV      r6,r1
00f4e4  e1a07002          MOV      r7,r2
00f4e8  e1a04003          MOV      r4,r3
00f4ec  e28da030          ADD      r10,sp,#0x30
00f4f0  e89a0700          LDM      r10,{r8-r10}
;;;6292       vGfBuffRotateNeedleTipandBase(pstSrcImageBg, pstSrcImage, f32Angle, &(pstLayer->stWriteFB), u32PosX, u32PosY, pstDef);
00f4f4  e2843020          ADD      r3,r4,#0x20
00f4f8  e1a02007          MOV      r2,r7
00f4fc  e1a01006          MOV      r1,r6
00f500  e1a00005          MOV      r0,r5
00f504  e88d0700          STM      sp,{r8-r10}
00f508  ebfffffe          BL       vGfBuffRotateNeedleTipandBase
;;;6293   }
00f50c  e8bd8ffe          POP      {r1-r11,pc}
;;;6294   
                          ENDP

                  vGfLayerShearFull PROC
;;;6298   #ifdef GA_USE_MATH_LIB
;;;6299   void vGfLayerShearFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
00f510  e92d47fc          PUSH     {r2-r10,lr}
;;;6300                          int32_t i32PosX, int32_t i32PosY)
;;;6301   {
00f514  e1a05000          MOV      r5,r0
00f518  e1a06001          MOV      r6,r1
00f51c  e1a07002          MOV      r7,r2
00f520  e1a04003          MOV      r4,r3
00f524  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6302       vGfBuffShearFull(pstImage, f32FactorX, f32FactorY, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f528  e2843020          ADD      r3,r4,#0x20
00f52c  e1a02007          MOV      r2,r7
00f530  e1a01006          MOV      r1,r6
00f534  e1a00005          MOV      r0,r5
00f538  e1cd80f0          STRD     r8,r9,[sp,#0]
00f53c  ebfffffe          BL       vGfBuffShearFull
;;;6303   }
00f540  e8bd87fc          POP      {r2-r10,pc}
;;;6304   
                          ENDP

                  vGfLayerShearBlendFull PROC
;;;6307   
;;;6308   void vGfLayerShearBlendFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
00f544  e92d47fc          PUSH     {r2-r10,lr}
;;;6309                               int32_t i32PosX, int32_t i32PosY)
;;;6310   {
00f548  e1a05000          MOV      r5,r0
00f54c  e1a06001          MOV      r6,r1
00f550  e1a07002          MOV      r7,r2
00f554  e1a04003          MOV      r4,r3
00f558  e1cd82d8          LDRD     r8,r9,[sp,#0x28]
;;;6311       vGfBuffShearBlendFull(pstImage, f32FactorX, f32FactorY, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f55c  e2843020          ADD      r3,r4,#0x20
00f560  e1a02007          MOV      r2,r7
00f564  e1a01006          MOV      r1,r6
00f568  e1a00005          MOV      r0,r5
00f56c  e1cd80f0          STRD     r8,r9,[sp,#0]
00f570  ebfffffe          BL       vGfBuffShearBlendFull
;;;6312   }
00f574  e8bd87fc          POP      {r2-r10,pc}
;;;6313   #endif /* GA_USE_MATH_LIB */
                          ENDP

                  vGfLayerScaleFull PROC
;;;6317   
;;;6318   void vGfLayerScaleFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY,
00f578  e92d4ffe          PUSH     {r1-r11,lr}
;;;6319                          rot_scaleAlign_e eAlignment, gf_layer_st * pstLayer,
;;;6320                          int32_t i32PosX, int32_t i32PosY)
;;;6321   {
00f57c  e1a04000          MOV      r4,r0
00f580  e1a05001          MOV      r5,r1
00f584  e1a06002          MOV      r6,r2
00f588  e1a07003          MOV      r7,r3
00f58c  e28da030          ADD      r10,sp,#0x30
00f590  e89a0700          LDM      r10,{r8-r10}
;;;6322       vGfBuffScaleFull(pstImage, f32FactorX, f32FactorY, eAlignment, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f594  e2880020          ADD      r0,r8,#0x20
00f598  e1a03007          MOV      r3,r7
00f59c  e1a02006          MOV      r2,r6
00f5a0  e1a01005          MOV      r1,r5
00f5a4  e88d0601          STM      sp,{r0,r9,r10}
00f5a8  e1a00004          MOV      r0,r4
00f5ac  ebfffffe          BL       vGfBuffScaleFull
;;;6323   }
00f5b0  e8bd8ffe          POP      {r1-r11,pc}
;;;6324   
                          ENDP

                  vGfLayerScaleBlendFull PROC
;;;6327   
;;;6328   void vGfLayerScaleBlendFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY,
00f5b4  e92d4ffe          PUSH     {r1-r11,lr}
;;;6329                               rot_scaleAlign_e eAlignment, gf_layer_st * pstLayer,
;;;6330                               int32_t i32PosX, int32_t i32PosY)
;;;6331   {
00f5b8  e1a04000          MOV      r4,r0
00f5bc  e1a05001          MOV      r5,r1
00f5c0  e1a06002          MOV      r6,r2
00f5c4  e1a07003          MOV      r7,r3
00f5c8  e28da030          ADD      r10,sp,#0x30
00f5cc  e89a0700          LDM      r10,{r8-r10}
;;;6332       vGfBuffScaleBlendFull(pstImage, f32FactorX, f32FactorY, eAlignment, &(pstLayer->stWriteFB), i32PosX, i32PosY);
00f5d0  e2880020          ADD      r0,r8,#0x20
00f5d4  e1a03007          MOV      r3,r7
00f5d8  e1a02006          MOV      r2,r6
00f5dc  e1a01005          MOV      r1,r5
00f5e0  e88d0601          STM      sp,{r0,r9,r10}
00f5e4  e1a00004          MOV      r0,r4
00f5e8  ebfffffe          BL       vGfBuffScaleBlendFull
;;;6333   }
00f5ec  e8bd8ffe          POP      {r1-r11,pc}
;;;6334   
                          ENDP

                  vGfLayerPerspectiveBlitFull PROC
;;;6338   #ifdef GA_USE_MATH_LIB
;;;6339   void vGfLayerPerspectiveBlitFull(gf_image_st * pstImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
00f5f0  e92d4fff          PUSH     {r0-r11,lr}
;;;6340                                    float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
;;;6341                                    int32_t i32PosX, int32_t i32PosY,
;;;6342                                    uint32_t u32RotPointX, uint32_t u32RotPointY)
;;;6343   {
00f5f4  e24dd01c          SUB      sp,sp,#0x1c
00f5f8  e1a04000          MOV      r4,r0
00f5fc  e1a05001          MOV      r5,r1
00f600  e1a06002          MOV      r6,r2
00f604  e28da054          ADD      r10,sp,#0x54
00f608  e89a0780          LDM      r10,{r7-r10}
00f60c  e59db068          LDR      r11,[sp,#0x68]
;;;6344       vGfBuffPerspectiveBlitFull(pstImage, f32AngleX, f32AngleY, f32AngleZ, f32FactorX, f32FactorY, &(pstLayer->stWriteFB), i32PosX, i32PosY, u32RotPointX, u32RotPointY);
00f610  e59d0064          LDR      r0,[sp,#0x64]
00f614  e2881020          ADD      r1,r8,#0x20
00f618  e58d0014          STR      r0,[sp,#0x14]
00f61c  e58db018          STR      r11,[sp,#0x18]
00f620  e58d900c          STR      r9,[sp,#0xc]
00f624  e58da010          STR      r10,[sp,#0x10]
00f628  e59d0050          LDR      r0,[sp,#0x50]
00f62c  e88d0081          STM      sp,{r0,r7}
00f630  e58d1008          STR      r1,[sp,#8]
00f634  e1a02006          MOV      r2,r6
00f638  e1a01005          MOV      r1,r5
00f63c  e1a00004          MOV      r0,r4
00f640  e59d3028          LDR      r3,[sp,#0x28]
00f644  ebfffffe          BL       vGfBuffPerspectiveBlitFull
;;;6345   }
00f648  e28dd02c          ADD      sp,sp,#0x2c
00f64c  e8bd8ff0          POP      {r4-r11,pc}
;;;6346   
                          ENDP

                  vGfLayerPerspectiveBlendFull PROC
;;;6349   
;;;6350   void vGfLayerPerspectiveBlendFull(gf_image_st * pstImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
00f650  e92d4fff          PUSH     {r0-r11,lr}
;;;6351                                     float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
;;;6352                                     int32_t i32PosX, int32_t i32PosY,
;;;6353                                     uint32_t u32RotPointX, uint32_t u32RotPointY)
;;;6354   {
00f654  e24dd01c          SUB      sp,sp,#0x1c
00f658  e1a04000          MOV      r4,r0
00f65c  e1a05001          MOV      r5,r1
00f660  e1a06002          MOV      r6,r2
00f664  e28da054          ADD      r10,sp,#0x54
00f668  e89a0780          LDM      r10,{r7-r10}
00f66c  e59db068          LDR      r11,[sp,#0x68]
;;;6355       vGfBuffPerspectiveBlendFull(pstImage, f32AngleX, f32AngleY, f32AngleZ, f32FactorX, f32FactorY, &(pstLayer->stWriteFB), i32PosX, i32PosY, u32RotPointX, u32RotPointY);
00f670  e59d0064          LDR      r0,[sp,#0x64]
00f674  e2881020          ADD      r1,r8,#0x20
00f678  e58d0014          STR      r0,[sp,#0x14]
00f67c  e58db018          STR      r11,[sp,#0x18]
00f680  e58d900c          STR      r9,[sp,#0xc]
00f684  e58da010          STR      r10,[sp,#0x10]
00f688  e59d0050          LDR      r0,[sp,#0x50]
00f68c  e88d0081          STM      sp,{r0,r7}
00f690  e58d1008          STR      r1,[sp,#8]
00f694  e1a02006          MOV      r2,r6
00f698  e1a01005          MOV      r1,r5
00f69c  e1a00004          MOV      r0,r4
00f6a0  e59d3028          LDR      r3,[sp,#0x28]
00f6a4  ebfffffe          BL       vGfBuffPerspectiveBlendFull
;;;6356   }
00f6a8  e28dd02c          ADD      sp,sp,#0x2c
00f6ac  e8bd8ff0          POP      {r4-r11,pc}
;;;6357   #endif
                          ENDP

                  vGfLayerTransformationFull PROC
;;;6361   
;;;6362   void vGfLayerTransformationFull(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable, uint32_t u32PosX, uint32_t u32PosY)
00f6b0  e92d43f8          PUSH     {r3-r9,lr}
;;;6363   {
00f6b4  e1a05000          MOV      r5,r0
00f6b8  e1a04001          MOV      r4,r1
00f6bc  e1a06002          MOV      r6,r2
00f6c0  e1a07003          MOV      r7,r3
00f6c4  e59d8020          LDR      r8,[sp,#0x20]
;;;6364       vGfBuffTransformationFull(pstImage, &(pstLayer->stWriteFB), pstTable, u32PosX, u32PosY);
00f6c8  e1a03007          MOV      r3,r7
00f6cc  e1a02006          MOV      r2,r6
00f6d0  e2841020          ADD      r1,r4,#0x20
00f6d4  e1a00005          MOV      r0,r5
00f6d8  e58d8000          STR      r8,[sp,#0]
00f6dc  ebfffffe          BL       vGfBuffTransformationFull
;;;6365   }
00f6e0  e8bd83f8          POP      {r3-r9,pc}
;;;6366   
                          ENDP

                  vGfLayerTransformationFullOptimized PROC
;;;6369   
;;;6370   void vGfLayerTransformationFullOptimized(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable, uint32_t u32PosX, uint32_t u32PosY,
00f6e4  e92d4ffe          PUSH     {r1-r11,lr}
;;;6371                                            uint32_t u32BlockWidth, uint32_t u32BlockHeight)
;;;6372   {
00f6e8  e1a05000          MOV      r5,r0
00f6ec  e1a04001          MOV      r4,r1
00f6f0  e1a06002          MOV      r6,r2
00f6f4  e1a07003          MOV      r7,r3
00f6f8  e28da030          ADD      r10,sp,#0x30
00f6fc  e89a0700          LDM      r10,{r8-r10}
;;;6373       vGfBuffTransformationFullOptimized(pstImage, &(pstLayer->stWriteFB), pstTable, u32PosX, u32PosY, u32BlockWidth, u32BlockHeight);
00f700  e1a03007          MOV      r3,r7
00f704  e1a02006          MOV      r2,r6
00f708  e2841020          ADD      r1,r4,#0x20
00f70c  e1a00005          MOV      r0,r5
00f710  e88d0700          STM      sp,{r8-r10}
00f714  ebfffffe          BL       vGfBuffTransformationFullOptimized
;;;6374   }
00f718  e8bd8ffe          POP      {r1-r11,pc}
;;;6375   
                          ENDP

                  vGfLayerTransformationBlendFull PROC
;;;6378   
;;;6379   void vGfLayerTransformationBlendFull(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable,
00f71c  e92d43f8          PUSH     {r3-r9,lr}
;;;6380                                        uint32_t u32PosX, uint32_t u32PosY)
;;;6381   {
00f720  e1a05000          MOV      r5,r0
00f724  e1a04001          MOV      r4,r1
00f728  e1a06002          MOV      r6,r2
00f72c  e1a07003          MOV      r7,r3
00f730  e59d8020          LDR      r8,[sp,#0x20]
;;;6382       vGfBuffTransformationBlendFull(pstImage, &(pstLayer->stWriteFB), pstTable, u32PosX, u32PosY);
00f734  e1a03007          MOV      r3,r7
00f738  e1a02006          MOV      r2,r6
00f73c  e2841020          ADD      r1,r4,#0x20
00f740  e1a00005          MOV      r0,r5
00f744  e58d8000          STR      r8,[sp,#0]
00f748  ebfffffe          BL       vGfBuffTransformationBlendFull
;;;6383   }
00f74c  e8bd83f8          POP      {r3-r9,pc}
;;;6384   
                          ENDP

                  vGfLayerDrawLine PROC
;;;6387   
;;;6388   void vGfLayerDrawLine(gf_layer_st * pstLayer, drw_OpCfg_st *pstOption, drw_Line_st *pstLine)
00f750  e92d4070          PUSH     {r4-r6,lr}
;;;6389   {
00f754  e1a04000          MOV      r4,r0
00f758  e1a05001          MOV      r5,r1
00f75c  e1a06002          MOV      r6,r2
;;;6390       vGfBuffDrawLine(&(pstLayer->stWriteFB), pstOption, pstLine);
00f760  e1a02006          MOV      r2,r6
00f764  e1a01005          MOV      r1,r5
00f768  e2840020          ADD      r0,r4,#0x20
00f76c  ebfffffe          BL       vGfBuffDrawLine
;;;6391   }
00f770  e8bd8070          POP      {r4-r6,pc}
;;;6392   
                          ENDP

                  vGfLayerDrawTriangle PROC
;;;6395   
;;;6396   void vGfLayerDrawTriangle(gf_layer_st * pstLayer, drw_OpCfg_st *pstOption, drw_Trngl_st *pstTrngl)
00f774  e92d4070          PUSH     {r4-r6,lr}
;;;6397   {
00f778  e1a04000          MOV      r4,r0
00f77c  e1a05001          MOV      r5,r1
00f780  e1a06002          MOV      r6,r2
;;;6398       vGfBuffDrawTriangle(&(pstLayer->stWriteFB), pstOption, pstTrngl);
00f784  e1a02006          MOV      r2,r6
00f788  e1a01005          MOV      r1,r5
00f78c  e2840020          ADD      r0,r4,#0x20
00f790  ebfffffe          BL       vGfBuffDrawTriangle
;;;6399   }
00f794  e8bd8070          POP      {r4-r6,pc}
;;;6400   
                          ENDP

                  vGfLayerDrawCircle PROC
;;;6403   
;;;6404   void vGfLayerDrawCircle(gf_layer_st *pstLayer, drw_OpCfg_st *pstOption, gf_circle_st *pstCircle)
00f798  e92d4070          PUSH     {r4-r6,lr}
;;;6405   {
00f79c  e1a04000          MOV      r4,r0
00f7a0  e1a05001          MOV      r5,r1
00f7a4  e1a06002          MOV      r6,r2
;;;6406       vGfBuffDrawCircle(&(pstLayer->stWriteFB), pstOption, pstCircle);
00f7a8  e1a02006          MOV      r2,r6
00f7ac  e1a01005          MOV      r1,r5
00f7b0  e2840020          ADD      r0,r4,#0x20
00f7b4  ebfffffe          BL       vGfBuffDrawCircle
;;;6407   }
00f7b8  e8bd8070          POP      {r4-r6,pc}
;;;6408   
                          ENDP

                  vGfLayerDrawPolygon PROC
;;;6411   
;;;6412   void vGfLayerDrawPolygon(gf_layer_st *pstLayer, drw_OpCfg_st *pstOption, gf_polygon_st *pstPolygon)
00f7bc  e92d4070          PUSH     {r4-r6,lr}
;;;6413   {
00f7c0  e1a04000          MOV      r4,r0
00f7c4  e1a05001          MOV      r5,r1
00f7c8  e1a06002          MOV      r6,r2
;;;6414       vGfBuffDrawPolygon(&(pstLayer->stWriteFB), pstOption, pstPolygon);
00f7cc  e1a02006          MOV      r2,r6
00f7d0  e1a01005          MOV      r1,r5
00f7d4  e2840020          ADD      r0,r4,#0x20
00f7d8  ebfffffe          BL       vGfBuffDrawPolygon
;;;6415   }
00f7dc  e8bd8070          POP      {r4-r6,pc}
;;;6416   
                          ENDP

                  vGfLayerBlitElement PROC
;;;6419   
;;;6420   void vGfLayerBlitElement(gf_image_st * pstSrcImage, gf_layer_st * pstLayer)
00f7e0  e92d4070          PUSH     {r4-r6,lr}
;;;6421   {
00f7e4  e1a05000          MOV      r5,r0
00f7e8  e1a04001          MOV      r4,r1
;;;6422       vGfBuffBlitElement(pstSrcImage, &(pstLayer->stWriteFB));
00f7ec  e2841020          ADD      r1,r4,#0x20
00f7f0  e1a00005          MOV      r0,r5
00f7f4  ebfffffe          BL       vGfBuffBlitElement
;;;6423   }
00f7f8  e8bd8070          POP      {r4-r6,pc}
;;;6424   
                          ENDP

                  vGfLayerBlendElement PROC
;;;6427   
;;;6428   void vGfLayerBlendElement(gf_image_st * pstSrcImage, gf_layer_st * pstLayer)
00f7fc  e92d4070          PUSH     {r4-r6,lr}
;;;6429   {
00f800  e1a05000          MOV      r5,r0
00f804  e1a04001          MOV      r4,r1
;;;6430       vGfBuffBlendElement(pstSrcImage, &(pstLayer->stWriteFB));
00f808  e2841020          ADD      r1,r4,#0x20
00f80c  e1a00005          MOV      r0,r5
00f810  ebfffffe          BL       vGfBuffBlendElement
;;;6431   }
00f814  e8bd8070          POP      {r4-r6,pc}
;;;6432   
                          ENDP

                  |L1.63512|
                          DCD      u8PreviousOperation
                  |L1.63516|
                          DCD      stGastate
                  |L1.63520|
                          DCD      pstWriteList

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  stGastate
                          %        44
                  u32MinMaxValues
                          %        320
                  u32MinMaxValues_old
                          %        320
                  u32MinMaxValues_old_old
                          %        320
                  u32MinMaxValuesBase
                          %        320
                  u32MinMaxValuesBase_old
                          %        320
                  u32MinMaxValuesBase_old_old
                          %        324
                  viewport
                          %        32
                  modelview
                          %        128
                  projection
                          %        128
                  ||ip||
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  au8MW_GFUNCTIONS_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e333220          DCB      0x2e,0x33,0x32,0x20
000010  2400              DCB      0x24,0x00
                  au8MW_GFUNCTIONS_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  20477261          DCB      0x20,0x47,0x72,0x61
00001c  70686963          DCB      0x70,0x68,0x69,0x63
000020  5f4d6964          DCB      0x5f,0x4d,0x69,0x64
000024  646c6577          DCB      0x64,0x6c,0x65,0x77
000028  6172655f          DCB      0x61,0x72,0x65,0x5f
00002c  56315f35          DCB      0x56,0x31,0x5f,0x35
000030  202400            DCB      0x20,0x24,0x00
                  au8MW_GFUNCTIONS_H_REVISION
000033  24                DCB      0x24
000034  52657669          DCB      0x52,0x65,0x76,0x69
000038  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00003c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000040  31382024          DCB      0x31,0x38,0x20,0x24
000044  00                DCB      0x00
                  au8MW_GFUNCTIONS_H_TAG
000045  244e61            DCB      0x24,0x4e,0x61
000048  6d653a20          DCB      0x6d,0x65,0x3a,0x20
00004c  47726170          DCB      0x47,0x72,0x61,0x70
000050  6869635f          DCB      0x68,0x69,0x63,0x5f
000054  4d696464          DCB      0x4d,0x69,0x64,0x64
000058  6c657761          DCB      0x6c,0x65,0x77,0x61
00005c  72655f56          DCB      0x72,0x65,0x5f,0x56
000060  315f3520          DCB      0x31,0x5f,0x35,0x20
000064  2400              DCB      0x24,0x00
                  au8MW_GF_H_REVISION
000066  2452              DCB      0x24,0x52
000068  65766973          DCB      0x65,0x76,0x69,0x73
00006c  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000070  20312e38          DCB      0x20,0x31,0x2e,0x38
000074  202400            DCB      0x20,0x24,0x00
                  au8MW_GF_H_TAG
000077  24                DCB      0x24
000078  4e616d65          DCB      0x4e,0x61,0x6d,0x65
00007c  3a204772          DCB      0x3a,0x20,0x47,0x72
000080  61706869          DCB      0x61,0x70,0x68,0x69
000084  635f4d69          DCB      0x63,0x5f,0x4d,0x69
000088  64646c65          DCB      0x64,0x64,0x6c,0x65
00008c  77617265          DCB      0x77,0x61,0x72,0x65
000090  5f56315f          DCB      0x5f,0x56,0x31,0x5f
000094  35202400          DCB      0x35,0x20,0x24,0x00
                  au8MW_DEFINITIONS_H_REVISION
000098  24526576          DCB      0x24,0x52,0x65,0x76
00009c  6973696f          DCB      0x69,0x73,0x69,0x6f
0000a0  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
0000a4  2e313720          DCB      0x2e,0x31,0x37,0x20
0000a8  2400              DCB      0x24,0x00
                  au8MW_DEFINITIONS_H_TAG
0000aa  244e              DCB      0x24,0x4e
0000ac  616d653a          DCB      0x61,0x6d,0x65,0x3a
0000b0  20477261          DCB      0x20,0x47,0x72,0x61
0000b4  70686963          DCB      0x70,0x68,0x69,0x63
0000b8  5f4d6964          DCB      0x5f,0x4d,0x69,0x64
0000bc  646c6577          DCB      0x64,0x6c,0x65,0x77
0000c0  6172655f          DCB      0x61,0x72,0x65,0x5f
0000c4  56315f35          DCB      0x56,0x31,0x5f,0x35
0000c8  20240000          DCB      0x20,0x24,0x00,0x00
                  u32NeedleNumber
                          DCD      0x00000000
                  u32TimeMeasure
                          DCD      0x00000000
                  u32TimeMeasureGA
                          DCD      0x00000000
                  u8PNG_Decoder
0000d8  00                DCB      0x00
                  u8PNG_PaletteStream6
0000d9  01                DCB      0x01
                  u8PNG_PaletteStream7
0000da  01                DCB      0x01
                  u8PreviousOperation
0000db  01                DCB      0x01
                  matrixmode
0000dc  00                DCB      0x00
