


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       **********************
    2 00000000         ;*   This software is copyright protected. All rights re
                       served
    3 00000000         ;*   Toshiba Electronics Europe GmbH
    4 00000000         ;*   European LSI Design and Engineering Center (ELDEC)
    5 00000000         ;*******************************************************
                       **********************
    6 00000000         ;*   DESCRIPTION : Performance monitor unit routines bas
                       ed on ARM's V7 sample code'
    7 00000000         ;*******************************************************
                       **********************
    8 00000000         ;*   PLATFORM    : TMPR46xXBG-300
    9 00000000         ;*   PROJECT     :
   10 00000000         ;*   MODULE      : System
   11 00000000         ;*   LIBRARIES   : None
   12 00000000         ;;******************************************************
                       ***********************
   13 00000000         ;*   VERSION     : $Revision: 1.6 $
   14 00000000         ;*   DATE        : $Date: 2015/05/04 09:07:17 $
   15 00000000         ;*   TAG         : $Name:  $
   16 00000000         ;*   RELEASE     : Preliminary & Confidential
   17 00000000         ;*******************************************************
                       **********************
   18 00000000         
   19 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
8
   20 00000000         
   21 00000000         ; ******************************************************
                       **********************
   22 00000000                 EXPORT           u32CR4_GetPMN
   23 00000000         ; Returns the number of progammable counters
   24 00000000         ; uint32_t u32CR4_GetPMN(void)
   25 00000000         u32CR4_GetPMN
   26 00000000 EE190F1C        MRC              p15, 0, r0, c9, c12, 0 ; Read P
                                                            MNC Register
   27 00000004 E1A005A0        MOV              r0, r0, LSR #11 ; Shift N field
                                                             down to bit 0
   28 00000008 E200001F        AND              r0, r0, #0x1F ; Mask to leave j
                                                            ust the 5 N bits
   29 0000000C E12FFF1E        BX               lr
   30 00000010         
   31 00000010         
   32 00000010         ; ******************************************************
                       **********************
   33 00000010                 EXPORT           vCR4_PMNConfig
   34 00000010         ; Sets the event for a programmable counter to record
   35 00000010         ; void vCR4_PMNConfig(uint32_t u32Counter, uint32_t u32E
                       vent)
   36 00000010         ; counter = r0 = Which counter to program  (e.g. 0 for P
                       MN0, 1 for PMN1)
   37 00000010         ; event   = r1 = The event code
   38 00000010         vCR4_PMNConfig
   39 00000010 E200001F        AND              r0, r0, #0x1F ; Mask to leave o
                                                            nly bits 4:0
   40 00000014 EE090FBC        MCR              p15, 0, r0, c9, c12, 5 ; Write 
                                                            PMNXSEL Register
   41 00000018 EE091F3D        MCR              p15, 0, r1, c9, c13, 1 ; Write 
                                                            EVTSELx Register



ARM Macro Assembler    Page 2 


   42 0000001C E12FFF1E        BX               lr
   43 00000020         
   44 00000020         
   45 00000020         ; ******************************************************
                       **********************
   46 00000020                 EXPORT           vCR4_SetCntDivider
   47 00000020         ; Enables/disables the divider (1/64) on CCNT
   48 00000020         ; void vCR4_SetCntDivider(uint32_t u32Divider)
   49 00000020         ; divider = r0 = If 0 disable divider, else enable dvide
                       r
   50 00000020         vCR4_SetCntDivider
   51 00000020 EE191F1C        MRC              p15, 0, r1, c9, c12, 0 
                                                            ; Read PMNC
   52 00000024         
   53 00000024 E3500000        CMP              r0, #0x0    ; IF (r0 == 0)
   54 00000028 03C11008        BICEQ            r1, r1, #0x08 ; THEN: Clear the
                                                             D bit (disables th
                                                            e divisor)
   55 0000002C 13811008        ORRNE            r1, r1, #0x08 ; ELSE: Set the D
                                                             bit (enables the d
                                                            ivisor)
   56 00000030         
   57 00000030 EE091F1C        MCR              p15, 0, r1, c9, c12, 0 
                                                            ; Write PMNC
   58 00000034 E12FFF1E        BX               lr
   59 00000038         
   60 00000038         
   61 00000038         ; ******************************************************
                       **********************
   62 00000038                 EXPORT           vCR4_EnablePMU
   63 00000038         ; Global PMU enable
   64 00000038         ; void vCR4_EnablePMU(void)
   65 00000038         vCR4_EnablePMU
   66 00000038 EE190F1C        MRC              p15, 0, r0, c9, c12, 0 
                                                            ; Read PMNC
   67 0000003C E3800001        ORR              r0, r0, #0x01 ; Set E bit
   68 00000040 EE090F1C        MCR              p15, 0, r0, c9, c12, 0 
                                                            ; Write PMNC
   69 00000044 E12FFF1E        BX               lr
   70 00000048         
   71 00000048         
   72 00000048         ; ******************************************************
                       **********************
   73 00000048                 EXPORT           vCR4_DisablePMU
   74 00000048         ; Global PMU disable
   75 00000048         ; void vCR4_DisablePMU(void)
   76 00000048         vCR4_DisablePMU
   77 00000048 EE190F1C        MRC              p15, 0, r0, c9, c12, 0 
                                                            ; Read PMNC
   78 0000004C E3C00001        BIC              r0, r0, #0x01 ; Clear E bit
   79 00000050 EE090F1C        MCR              p15, 0, r0, c9, c12, 0 
                                                            ; Write PMNC
   80 00000054 E12FFF1E        BX               lr
   81 00000058         
   82 00000058         
   83 00000058         ; ******************************************************
                       **********************
   84 00000058                 EXPORT           vCR4_EnableCCNT
   85 00000058         ; Enable the CCNT



ARM Macro Assembler    Page 3 


   86 00000058         ; void vCR4_EnableCCNT(void)
   87 00000058         vCR4_EnableCCNT
   88 00000058 E3A00102        MOV              r0, #0x80000000 ; Set C bit
   89 0000005C EE090F3C        MCR              p15, 0, r0, c9, c12, 1 ; Write 
                                                            CNTENS Register
   90 00000060 E12FFF1E        BX               lr
   91 00000064         
   92 00000064         
   93 00000064         ; ******************************************************
                       **********************
   94 00000064                 EXPORT           vCR4_DisableCCNT
   95 00000064         ; Disable the CCNT
   96 00000064         ; void vCR4_DisableCCNT(void)
   97 00000064         vCR4_DisableCCNT
   98 00000064 E3A00102        MOV              r0, #0x80000000 ; Clear C bit
   99 00000068 EE090F5C        MCR              p15, 0, r0, c9, c12, 2 ; Write 
                                                            CNTENC Register
  100 0000006C E12FFF1E        BX               lr
  101 00000070         
  102 00000070         
  103 00000070         ; ******************************************************
                       **********************
  104 00000070                 EXPORT           vCR4_EnablePMN
  105 00000070         ; Enable PMN{n}
  106 00000070         ; void vCR4_EnablePMN(uint32_t u32Counter)
  107 00000070         ; counter = r0 = The counter to enable (e.g. 0 for PMN0,
                        1 for PMN1)
  108 00000070         vCR4_EnablePMN
  109 00000070 E3A01001        MOV              r1, #0x1    ; Use arg (r0) to s
                                                            et which counter to
                                                             disable
  110 00000074 E1A01011        MOV              r1, r1, LSL r0
  111 00000078         
  112 00000078 EE091F3C        MCR              p15, 0, r1, c9, c12, 1 ; Write 
                                                            CNTENS Register
  113 0000007C E12FFF1E        BX               lr
  114 00000080         
  115 00000080         
  116 00000080         ; ******************************************************
                       **********************
  117 00000080                 EXPORT           vCR4_DisablePMN
  118 00000080         ; Enable PMN{n}
  119 00000080         ; void vCR4_DisablePMN(uint32_t u32Counter)
  120 00000080         ; counter = r0 = The counter to enable (e.g. 0 for PMN0,
                        1 for PMN1)
  121 00000080         vCR4_DisablePMN
  122 00000080 E3A01001        MOV              r1, #0x1    ; Use arg (r0) to s
                                                            et which counter to
                                                             disable
  123 00000084 E1A01011        MOV              r1, r1, LSL r0
  124 00000088         
  125 00000088 EE091F3C        MCR              p15, 0, r1, c9, c12, 1 ; Write 
                                                            CNTENS Register
  126 0000008C E12FFF1E        BX               lr
  127 00000090         
  128 00000090         
  129 00000090         ; ******************************************************
                       **********************
  130 00000090                 EXPORT           u32CR4_ReadCCNT



ARM Macro Assembler    Page 4 


  131 00000090         ; Returns the value of CCNT
  132 00000090         ; uint32_t u32CR4_ReadCCNT(void)
  133 00000090         u32CR4_ReadCCNT
  134 00000090 EE190F1D        MRC              p15, 0, r0, c9, c13, 0 ; Read C
                                                            CNT Register
  135 00000094 E12FFF1E        BX               lr
  136 00000098         
  137 00000098         ; ******************************************************
                       **********************
  138 00000098                 EXPORT           u32CR4_ReadPMN
  139 00000098         ; Returns the value of PMN{n}
  140 00000098         ; uint32_t u32CR4_ReadPMN(uint32_t u32Counter)
  141 00000098         ; counter = r0 =  The counter to read (e.g. 0 for PMN0, 
                       1 for PMN1)
  142 00000098         u32CR4_ReadPMN
  143 00000098 E200001F        AND              r0, r0, #0x1F ; Mask to leave o
                                                            nly bits 4:0
  144 0000009C EE090FBC        MCR              p15, 0, r0, c9, c12, 5 ; Write 
                                                            PMNXSEL Register
  145 000000A0 EE190F5D        MRC              p15, 0, r0, c9, c13, 2 ; Read c
                                                            urrent PMNx Registe
                                                            r
  146 000000A4 E12FFF1E        BX               lr
  147 000000A8         
  148 000000A8         
  149 000000A8         ; ******************************************************
                       **********************
  150 000000A8                 EXPORT           u32CR4_ReadFlags
  151 000000A8         ; Returns the value of the overflow flags
  152 000000A8         ; uint32_t u32CR4_ReadFlags(void)
  153 000000A8         u32CR4_ReadFlags
  154 000000A8 EE190F7C        MRC              p15, 0, r0, c9, c12, 3 ; Read F
                                                            LAG Register
  155 000000AC E12FFF1E        BX               lr
  156 000000B0         
  157 000000B0         
  158 000000B0         ; ******************************************************
                       **********************
  159 000000B0                 EXPORT           vCR4_WriteFlags
  160 000000B0         ; Writes the overflow flags
  161 000000B0         ; void vCR4_WriteFlags(uint32_t u32Flags)
  162 000000B0         vCR4_WriteFlags
  163 000000B0 EE090F7C        MCR              p15, 0, r0, c9, c12, 3 ; Write 
                                                            FLAG Register
  164 000000B4 E12FFF1E        BX               lr
  165 000000B8         
  166 000000B8         
  167 000000B8         ; ******************************************************
                       **********************
  168 000000B8                 EXPORT           vCR4_EnableCCNTIrq
  169 000000B8         ; Enables interrupt generation on overflow of the CCNT
  170 000000B8         ; void vCR4_EnableCCNTIrq(void)
  171 000000B8         vCR4_EnableCCNTIrq
  172 000000B8 E3A00102        MOV              r0, #0x80000000
  173 000000BC EE090F3E        MCR              p15, 0, r0, c9, c14, 1 ; Write 
                                                            INTENS Register
  174 000000C0 E12FFF1E        BX               lr
  175 000000C4         
  176 000000C4         



ARM Macro Assembler    Page 5 


  177 000000C4         ; ******************************************************
                       **********************
  178 000000C4                 EXPORT           vCR4_DisableCCNTIrq
  179 000000C4         ; Disables interrupt generation on overflow of the CCNT
  180 000000C4         ; void vCR4_DisableCCNTIrq(void)
  181 000000C4         vCR4_DisableCCNTIrq
  182 000000C4 E3A00102        MOV              r0, #0x80000000
  183 000000C8 EE090F5E        MCR              p15, 0, r0, c9, c14, 2 ; Write 
                                                            INTENC Register
  184 000000CC E12FFF1E        BX               lr
  185 000000D0         
  186 000000D0         
  187 000000D0         ; ******************************************************
                       **********************
  188 000000D0                 EXPORT           vCR4_EnablePmnIrq
  189 000000D0         ; Enables interrupt generation on overflow of PMN{x}
  190 000000D0         ; void vCR4_EnablePmnIrq(uint32_t u32Counter)
  191 000000D0         ; counter = r0 =  The counter to enable the interrupt fo
                       r (e.g. 0 for PMN0, 1 for PMN1)
  192 000000D0         vCR4_EnablePmnIrq
  193 000000D0 E3A01001        MOV              r1, #0x1    ; Use arg (r0) to s
                                                            et which counter to
                                                             disable
  194 000000D4 E1A00011        MOV              r0, r1, LSL r0
  195 000000D8 EE090F3E        MCR              p15, 0, r0, c9, c14, 1 ; Write 
                                                            INTENS Register
  196 000000DC E12FFF1E        BX               lr
  197 000000E0         
  198 000000E0         
  199 000000E0         ; ******************************************************
                       **********************
  200 000000E0                 EXPORT           vCR4_DisablePMNIrq
  201 000000E0         ; Disables interrupt generation on overflow of PMN{x}
  202 000000E0         ; void vCR4_DisablePMNIrq(uint32_t u32Counter)
  203 000000E0         ; counter = r0 =  The counter to disable the interrupt f
                       or (e.g. 0 for PMN0, 1 for PMN1)
  204 000000E0         vCR4_DisablePMNIrq
  205 000000E0 E3A01001        MOV              r1, #0x1    ; Use arg (r0) to s
                                                            et which counter to
                                                             disable
  206 000000E4 E1A00011        MOV              r0, r1, LSL r0
  207 000000E8 EE090F5E        MCR              p15, 0, r0, c9, c14, 2 ; Write 
                                                            INTENC Register
  208 000000EC E12FFF1E        BX               lr
  209 000000F0         
  210 000000F0         
  211 000000F0         ; ******************************************************
                       **********************
  212 000000F0                 EXPORT           vCR4_ResetPMN
  213 000000F0         ; Resets the programmable counters
  214 000000F0         ; void vCR4_ResetPMN(void)
  215 000000F0         vCR4_ResetPMN
  216 000000F0 EE190F1C        MRC              p15, 0, r0, c9, c12, 0 
                                                            ; Read PMNC
  217 000000F4 E3800002        ORR              r0, r0, #0x02 ; Set P bit (Even
                                                            t Counter Reset)
  218 000000F8 EE090F1C        MCR              p15, 0, r0, c9, c12, 0 
                                                            ; Write PMNC
  219 000000FC E12FFF1E        BX               lr



ARM Macro Assembler    Page 6 


  220 00000100         
  221 00000100         
  222 00000100         ; ******************************************************
                       **********************
  223 00000100                 EXPORT           vCR4_ResetCCNT
  224 00000100         ; Resets the CCNT
  225 00000100         ; void vCR4_ResetCCNT(void)
  226 00000100         vCR4_ResetCCNT
  227 00000100 EE190F1C        MRC              p15, 0, r0, c9, c12, 0 
                                                            ; Read PMNC
  228 00000104 E3800004        ORR              r0, r0, #0x04 ; Set C bit (Even
                                                            t Counter Reset)
  229 00000108 EE090F1C        MCR              p15, 0, r0, c9, c12, 0 
                                                            ; Write PMNC
  230 0000010C E12FFF1E        BX               lr
  231 00000110         
  232 00000110         
  233 00000110         ; ******************************************************
                       **********************
  234 00000110                 EXPORT           vCR4_PMUSoftwareIncrement
  235 00000110         ; Writes to software increment register
  236 00000110         ; void vCR4_PMUSoftwareIncrement(uint32_t u32Counter)
  237 00000110         ; counter = r0 =  The counter to increment (e.g. 0 for P
                       MN0, 1 for PMN1)
  238 00000110         vCR4_PMUSoftwareIncrement
  239 00000110 E3A01001        MOV              r1, #0x01
  240 00000114 E1A01011        MOV              r1, r1, LSL r0
  241 00000118 EE091F9C        MCR              p15, 0, r1, c9, c12, 4 ; Write 
                                                            SWINCR Register
  242 0000011C E12FFF1E        BX               lr
  243 00000120         
  244 00000120         
  245 00000120         ; ******************************************************
                       **********************  
  246 00000120                 EXPORT           vCR4_EnablePMUUserAccess
  247 00000120         ; Enables User mode access to the PMU (must be called in
                        a priviledged mode)
  248 00000120         ; void vCR4_EnablePMUUserAccess(void)
  249 00000120         vCR4_EnablePMUUserAccess
  250 00000120 EE190F1E        MRC              p15, 0, r0, c9, c14, 0 ; Read P
                                                            MUSERENR Register
  251 00000124 E3800001        ORR              r0, r0, #0x01 ; Set EN bit (bit
                                                             0)
  252 00000128 EE090F1E        MCR              p15, 0, r0, c9, c14, 0 ; Write 
                                                            PMUSERENR Register
  253 0000012C E12FFF1E        BX               lr
  254 00000130         
  255 00000130         
  256 00000130         ; ******************************************************
                       **********************  
  257 00000130                 EXPORT           vCR4_DisablePMUUserAccess
  258 00000130         ; Disables User mode access to the PMU (must be called i
                       n a priviledged mode)
  259 00000130         ; void vCR4_DisablePMUUserAccess(void)
  260 00000130         vCR4_DisablePMUUserAccess
  261 00000130 EE190F1E        MRC              p15, 0, r0, c9, c14, 0 ; Read P
                                                            MUSERENR Register
  262 00000134 E3C00001        BIC              r0, r0, #0x01 ; Clear EN bit (b
                                                            it 0)



ARM Macro Assembler    Page 7 


  263 00000138 EE090F1E        MCR              p15, 0, r0, c9, c14, 0 ; Write 
                                                            PMUSERENR Register
  264 0000013C E12FFF1E        BX               lr
  265 00000140         
  266 00000140         ; ******************************************************
                       **********************
  267 00000140         
  268 00000140                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-R4 --apcs=interw
ork --depend=..\out\cr4_pmu_keil.d -o..\out\cr4_pmu_keil.o -I..\..\..\..\cortex
_r4_keil\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include --predefi
ne="__UVISION_VERSION SETA 516" --list=..\out\cr4_pmu_keil.lst ..\..\..\..\cort
ex_r4_keil\src\cr4_pmu_keil.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 19 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      None
Comment: .text unused
u32CR4_GetPMN 00000000

Symbol: u32CR4_GetPMN
   Definitions
      At line 25 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 22 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: u32CR4_GetPMN used once
u32CR4_ReadCCNT 00000090

Symbol: u32CR4_ReadCCNT
   Definitions
      At line 133 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 130 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: u32CR4_ReadCCNT used once
u32CR4_ReadFlags 000000A8

Symbol: u32CR4_ReadFlags
   Definitions
      At line 153 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 150 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: u32CR4_ReadFlags used once
u32CR4_ReadPMN 00000098

Symbol: u32CR4_ReadPMN
   Definitions
      At line 142 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 138 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: u32CR4_ReadPMN used once
vCR4_DisableCCNT 00000064

Symbol: vCR4_DisableCCNT
   Definitions
      At line 97 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 94 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisableCCNT used once
vCR4_DisableCCNTIrq 000000C4

Symbol: vCR4_DisableCCNTIrq
   Definitions
      At line 181 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 178 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisableCCNTIrq used once
vCR4_DisablePMN 00000080

Symbol: vCR4_DisablePMN



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 121 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 117 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisablePMN used once
vCR4_DisablePMNIrq 000000E0

Symbol: vCR4_DisablePMNIrq
   Definitions
      At line 204 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 200 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisablePMNIrq used once
vCR4_DisablePMU 00000048

Symbol: vCR4_DisablePMU
   Definitions
      At line 76 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 73 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisablePMU used once
vCR4_DisablePMUUserAccess 00000130

Symbol: vCR4_DisablePMUUserAccess
   Definitions
      At line 260 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 257 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_DisablePMUUserAccess used once
vCR4_EnableCCNT 00000058

Symbol: vCR4_EnableCCNT
   Definitions
      At line 87 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 84 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnableCCNT used once
vCR4_EnableCCNTIrq 000000B8

Symbol: vCR4_EnableCCNTIrq
   Definitions
      At line 171 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 168 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnableCCNTIrq used once
vCR4_EnablePMN 00000070

Symbol: vCR4_EnablePMN
   Definitions
      At line 108 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 104 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnablePMN used once
vCR4_EnablePMU 00000038

Symbol: vCR4_EnablePMU
   Definitions
      At line 65 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 62 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnablePMU used once
vCR4_EnablePMUUserAccess 00000120

Symbol: vCR4_EnablePMUUserAccess
   Definitions
      At line 249 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 246 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnablePMUUserAccess used once
vCR4_EnablePmnIrq 000000D0

Symbol: vCR4_EnablePmnIrq
   Definitions
      At line 192 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 188 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_EnablePmnIrq used once
vCR4_PMNConfig 00000010

Symbol: vCR4_PMNConfig
   Definitions
      At line 38 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 33 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_PMNConfig used once
vCR4_PMUSoftwareIncrement 00000110

Symbol: vCR4_PMUSoftwareIncrement
   Definitions
      At line 238 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 234 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_PMUSoftwareIncrement used once
vCR4_ResetCCNT 00000100

Symbol: vCR4_ResetCCNT
   Definitions
      At line 226 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 223 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_ResetCCNT used once
vCR4_ResetPMN 000000F0

Symbol: vCR4_ResetPMN
   Definitions
      At line 215 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 212 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_ResetPMN used once
vCR4_SetCntDivider 00000020

Symbol: vCR4_SetCntDivider
   Definitions
      At line 50 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 46 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_SetCntDivider used once
vCR4_WriteFlags 000000B0



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols


Symbol: vCR4_WriteFlags
   Definitions
      At line 162 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
   Uses
      At line 159 in file ..\..\..\..\cortex_r4_keil\src\cr4_pmu_keil.s
Comment: vCR4_WriteFlags used once
23 symbols
354 symbols in table
