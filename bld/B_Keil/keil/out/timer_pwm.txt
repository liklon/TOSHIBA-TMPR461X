; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\timer_pwm.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\timer_pwm.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\timer_pwm.crf ..\..\..\..\lldd\src\timer_pwm.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTIMER_PWM_GetVersion PROC
;;;84     
;;;85     void vTIMER_PWM_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;86                                uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;87                                uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;88     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;89        *pau8ModuleRevision = &au8LLDD_TIMER_PWM_C_REVISION[0];
000008  e59f6494          LDR      r6,|L1.1188|
00000c  e5806000          STR      r6,[r0,#0]
;;;90        *pau8ModuleTag      = &au8LLDD_TIMER_PWM_C_TAG[0];
000010  e59f6490          LDR      r6,|L1.1192|
000014  e5816000          STR      r6,[r1,#0]
;;;91        *pau8HeaderRevision = &au8LLDD_TIMER_PWM_H_REVISION[0];
000018  e59f648c          LDR      r6,|L1.1196|
00001c  e5826000          STR      r6,[r2,#0]
;;;92        *pau8HeaderTag      = &au8LLDD_TIMER_PWM_H_TAG[0];
000020  e59f6488          LDR      r6,|L1.1200|
000024  e5836000          STR      r6,[r3,#0]
;;;93        *pau8IORevision     = &au8LLDD_TIMER_PWM_IO_H_REVISION[0];
000028  e59f6484          LDR      r6,|L1.1204|
00002c  e5846000          STR      r6,[r4,#0]
;;;94        *pau8IOTag          = &au8LLDD_TIMER_PWM_IO_H_TAG[0];
000030  e59f6480          LDR      r6,|L1.1208|
000034  e5856000          STR      r6,[r5,#0]
;;;95     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;96     
                          ENDP

                  boTIMER_PWM_Config PROC
;;;99     
;;;100    bool_t boTIMER_PWM_Config(timer_pwm_cntrl_e eCntrl, timer_pwm_Cfg_st stCfg)
00003c  e92d4007          PUSH     {r0-r2,lr}
;;;101    {
000040  e1a03000          MOV      r3,r0
;;;102        bool_t boResult = C_FALSE;    
000044  e3a00000          MOV      r0,#0
;;;103    
;;;104        /* Standard PWM timers */
;;;105        vSetPWMCR_RC(eCntrl, stCfg.eRst);       
000048  e5dd2005          LDRB     r2,[sp,#5]
00004c  e24315ff          SUB      r1,r3,#0x3fc00000
000050  e241193f          SUB      r1,r1,#0xfc000
000054  e1d110b0          LDRH     r1,[r1,#0]
000058  e7cb1512          BFI      r1,r2,#10,#2
00005c  e24325ff          SUB      r2,r3,#0x3fc00000
000060  e242293f          SUB      r2,r2,#0xfc000
000064  e1c210b0          STRH     r1,[r2,#0]
;;;106        vSetPWMCR_VED(eCntrl, stCfg.eVSyncEd);
000068  e5dd2006          LDRB     r2,[sp,#6]
00006c  e24315ff          SUB      r1,r3,#0x3fc00000
000070  e241193f          SUB      r1,r1,#0xfc000
000074  e1d110b0          LDRH     r1,[r1,#0]
000078  e7c91492          BFI      r1,r2,#9,#1
00007c  e24325ff          SUB      r2,r3,#0x3fc00000
000080  e242293f          SUB      r2,r2,#0xfc000
000084  e1c210b0          STRH     r1,[r2,#0]
;;;107        vSetPWMCR_HED(eCntrl, stCfg.eHsyncEd);
000088  e5dd2007          LDRB     r2,[sp,#7]
00008c  e24315ff          SUB      r1,r3,#0x3fc00000
000090  e241193f          SUB      r1,r1,#0xfc000
000094  e1d110b0          LDRH     r1,[r1,#0]
000098  e7c81412          BFI      r1,r2,#8,#1
00009c  e24325ff          SUB      r2,r3,#0x3fc00000
0000a0  e242293f          SUB      r2,r2,#0xfc000
0000a4  e1c210b0          STRH     r1,[r2,#0]
;;;108        vSetPWMCR_GDC(eCntrl, stCfg.eClkSrc);
0000a8  e5dd200b          LDRB     r2,[sp,#0xb]
0000ac  e24315ff          SUB      r1,r3,#0x3fc00000
0000b0  e241193f          SUB      r1,r1,#0xfc000
0000b4  e1d110b0          LDRH     r1,[r1,#0]
0000b8  e7c21092          BFI      r1,r2,#1,#2
0000bc  e24325ff          SUB      r2,r3,#0x3fc00000
0000c0  e242293f          SUB      r2,r2,#0xfc000
0000c4  e1c210b0          STRH     r1,[r2,#0]
;;;109        vSetPWMCR_SCLK(eCntrl, stCfg.ePrescalClk);
0000c8  e5dd2004          LDRB     r2,[sp,#4]
0000cc  e24315ff          SUB      r1,r3,#0x3fc00000
0000d0  e241193f          SUB      r1,r1,#0xfc000
0000d4  e1d110b0          LDRH     r1,[r1,#0]
0000d8  e7ce1612          BFI      r1,r2,#12,#3
0000dc  e24325ff          SUB      r2,r3,#0x3fc00000
0000e0  e242293f          SUB      r2,r2,#0xfc000
0000e4  e1c210b0          STRH     r1,[r2,#0]
;;;110        vSetPWMCR_IE(eCntrl, stCfg.eIrqEn);
0000e8  e5dd2008          LDRB     r2,[sp,#8]
0000ec  e24315ff          SUB      r1,r3,#0x3fc00000
0000f0  e241193f          SUB      r1,r1,#0xfc000
0000f4  e1d110b0          LDRH     r1,[r1,#0]
0000f8  e7c61312          BFI      r1,r2,#6,#1
0000fc  e24325ff          SUB      r2,r3,#0x3fc00000
000100  e242293f          SUB      r2,r2,#0xfc000
000104  e1c210b0          STRH     r1,[r2,#0]
;;;111        vSetPWMCR_DB(eCntrl, stCfg.eDblBuffEn);
000108  e5dd2009          LDRB     r2,[sp,#9]
00010c  e24315ff          SUB      r1,r3,#0x3fc00000
000110  e241193f          SUB      r1,r1,#0xfc000
000114  e1d110b0          LDRH     r1,[r1,#0]
000118  e7c51292          BFI      r1,r2,#5,#1
00011c  e24325ff          SUB      r2,r3,#0x3fc00000
000120  e242293f          SUB      r2,r2,#0xfc000
000124  e1c210b0          STRH     r1,[r2,#0]
;;;112        vSetPWMCR_OL(eCntrl, stCfg.eOutLevel);
000128  e5dd200a          LDRB     r2,[sp,#0xa]
00012c  e24315ff          SUB      r1,r3,#0x3fc00000
000130  e241193f          SUB      r1,r1,#0xfc000
000134  e1d110b0          LDRH     r1,[r1,#0]
000138  e7c41212          BFI      r1,r2,#4,#1
00013c  e24325ff          SUB      r2,r3,#0x3fc00000
000140  e242293f          SUB      r2,r2,#0xfc000
000144  e1c210b0          STRH     r1,[r2,#0]
;;;113        boResult = C_TRUE;
000148  e3a00001          MOV      r0,#1
;;;114    
;;;115        /* Configuration result */
;;;116        return boResult;
;;;117    }
00014c  e8bd800e          POP      {r1-r3,pc}
;;;118    
                          ENDP

                  vTIMER_PWM_SetPeriod PROC
;;;121    
;;;122    void vTIMER_PWM_SetPeriod(timer_pwm_cntrl_e eCntrl, uint16_t u16Period)
000150  e24025ff          SUB      r2,r0,#0x3fc00000
;;;123    {
;;;124       vSetPWMPDR_PWMPDR(eCntrl, u16Period);
000154  e242293f          SUB      r2,r2,#0xfc000
000158  e1d220b4          LDRH     r2,[r2,#4]
00015c  e7cf2011          BFI      r2,r1,#0,#16
000160  e24035ff          SUB      r3,r0,#0x3fc00000
000164  e243393f          SUB      r3,r3,#0xfc000
000168  e1c320b4          STRH     r2,[r3,#4]
;;;125    }
00016c  e12fff1e          BX       lr
;;;126    
                          ENDP

                  vTIMER_PWM_SetDuty PROC
;;;129    
;;;130    void vTIMER_PWM_SetDuty(timer_pwm_cntrl_e eCntrl, uint16_t u16Duty)
000170  e24025ff          SUB      r2,r0,#0x3fc00000
;;;131    {
;;;132       vSetPWMDDR_PWMDDR(eCntrl, u16Duty);
000174  e242293f          SUB      r2,r2,#0xfc000
000178  e1d220b8          LDRH     r2,[r2,#8]
00017c  e7cf2011          BFI      r2,r1,#0,#16
000180  e24035ff          SUB      r3,r0,#0x3fc00000
000184  e243393f          SUB      r3,r3,#0xfc000
000188  e1c320b8          STRH     r2,[r3,#8]
;;;133    }
00018c  e12fff1e          BX       lr
;;;134    
                          ENDP

                  u16TIMER_PWM_GetDuty PROC
;;;137    
;;;138    uint16_t u16TIMER_PWM_GetDuty(timer_pwm_cntrl_e eCntrl)
000190  e1a01000          MOV      r1,r0
;;;139    {
;;;140        uint16_t u16Res;
;;;141    
;;;142        u16Res = u16GetPWMDDR(eCntrl);
000194  e24125ff          SUB      r2,r1,#0x3fc00000
000198  e242293f          SUB      r2,r2,#0xfc000
00019c  e1d200b8          LDRH     r0,[r2,#8]
;;;143    
;;;144        return u16Res;
;;;145    }
0001a0  e12fff1e          BX       lr
;;;146    
                          ENDP

                  i32TIMER_PWM_SetWaveform PROC
;;;149    
;;;150    int32_t i32TIMER_PWM_SetWaveform(timer_pwm_cntrl_e eCntrl, uint16_t u16Period, uint16_t u16Duty, timer_pwm_ol_e eOutLevel)
0001a4  e92d5ff0          PUSH     {r4-r12,lr}
;;;151    {
0001a8  e1a04000          MOV      r4,r0
0001ac  e1a07001          MOV      r7,r1
0001b0  e1a05002          MOV      r5,r2
0001b4  e1a08003          MOV      r8,r3
;;;152        int32_t i32Res;
;;;153        uint16_t u16DutyVal;
;;;154        timer_pwm_en_e eCurStat = TIMER_PWM_DISABLE;
0001b8  e3a0a000          MOV      r10,#0
;;;155        timer_pwm_en_e eBuffType = TIMER_PWM_DISABLE;
0001bc  e3a0b000          MOV      r11,#0
;;;156    
;;;157        eCurStat = (timer_pwm_en_e)biGetPWMCR_TRUN(eCntrl);
0001c0  e24405ff          SUB      r0,r4,#0x3fc00000
0001c4  e240093f          SUB      r0,r0,#0xfc000
0001c8  e1d000b0          LDRH     r0,[r0,#0]
0001cc  e200a001          AND      r10,r0,#1
;;;158        eBuffType = (timer_pwm_en_e)biGetPWMCR_DB(eCntrl);
0001d0  e24405ff          SUB      r0,r4,#0x3fc00000
0001d4  e240093f          SUB      r0,r0,#0xfc000
0001d8  e1d000b0          LDRH     r0,[r0,#0]
0001dc  e7e0b2d0          UBFX     r11,r0,#5,#1
;;;159    
;;;160        /* check if change is allowed */
;;;161        if( ( TIMER_PWM_ENABLE != eCurStat ) || ( TIMER_PWM_DISABLE != eBuffType ) )
0001e0  e35a0000          CMP      r10,#0
0001e4  0a000001          BEQ      |L1.496|
0001e8  e35b0000          CMP      r11,#0
0001ec  0a00004e          BEQ      |L1.812|
                  |L1.496|
;;;162        {
;;;163            if(u16Duty <= 100)
0001f0  e3550064          CMP      r5,#0x64
0001f4  ca00004a          BGT      |L1.804|
;;;164            {
;;;165                if ((u16Duty != 0) && (u16Duty != 100))
0001f8  e3550000          CMP      r5,#0
0001fc  0a000025          BEQ      |L1.664|
000200  e3550064          CMP      r5,#0x64
000204  0a000023          BEQ      |L1.664|
;;;166                {
;;;167                    /* Duty-counter value */
;;;168                    u16DutyVal = (uint16_t)((u16Period * u16Duty)/100);
000208  e0000597          MUL      r0,r7,r5
00020c  e3a01064          MOV      r1,#0x64
000210  ebfffffe          BL       __aeabi_idiv
000214  e6ff9070          UXTH     r9,r0
;;;169    
;;;170                    vSetPWMPDR_PWMPDR(eCntrl, u16Period);
000218  e24405ff          SUB      r0,r4,#0x3fc00000
00021c  e240093f          SUB      r0,r0,#0xfc000
000220  e1d000b4          LDRH     r0,[r0,#4]
000224  e7cf0017          BFI      r0,r7,#0,#16
000228  e24415ff          SUB      r1,r4,#0x3fc00000
00022c  e241193f          SUB      r1,r1,#0xfc000
000230  e1c100b4          STRH     r0,[r1,#4]
;;;171                    vSetPWMDDR_PWMDDR(eCntrl, u16DutyVal);
000234  e24405ff          SUB      r0,r4,#0x3fc00000
000238  e240093f          SUB      r0,r0,#0xfc000
00023c  e1d000b8          LDRH     r0,[r0,#8]
000240  e7cf0019          BFI      r0,r9,#0,#16
000244  e24415ff          SUB      r1,r4,#0x3fc00000
000248  e241193f          SUB      r1,r1,#0xfc000
00024c  e1c100b8          STRH     r0,[r1,#8]
;;;172    
;;;173                    /* enable timer if coming from 0% and 100% */
;;;174                    if (au8PWMRunning[eCntrl] == 1)
000250  e59f0264          LDR      r0,|L1.1212|
000254  e7d00004          LDRB     r0,[r0,r4]
000258  e3500001          CMP      r0,#1
00025c  1a000007          BNE      |L1.640|
;;;175                    {
;;;176                        vSetPWMCR_TRUN(eCntrl, TIMER_PWM_ENABLE);
000260  e24405ff          SUB      r0,r4,#0x3fc00000
000264  e240093f          SUB      r0,r0,#0xfc000
000268  e1d000b0          LDRH     r0,[r0,#0]
00026c  e3c00001          BIC      r0,r0,#1
000270  e2800001          ADD      r0,r0,#1
000274  e24415ff          SUB      r1,r4,#0x3fc00000
000278  e241193f          SUB      r1,r1,#0xfc000
00027c  e1c100b0          STRH     r0,[r1,#0]
                  |L1.640|
;;;177                    }
;;;178    
;;;179    		/* Achieved Duty-cycle */
;;;180                    i32Res = (u16DutyVal* 100) / u16Period;
000280  e3a01064          MOV      r1,#0x64
000284  e0000199          MUL      r0,r9,r1
000288  e1a01007          MOV      r1,r7
00028c  ebfffffe          BL       __aeabi_idiv
000290  e1a06000          MOV      r6,r0
000294  ea000025          B        |L1.816|
                  |L1.664|
;;;181                }
;;;182                else
;;;183                {
;;;184                    /* special treatment for 0% and 100% */
;;;185                    if (u16Duty == 0)
000298  e3550000          CMP      r5,#0
00029c  1a00000f          BNE      |L1.736|
;;;186                    {
;;;187                        /* 0% */
;;;188                        vSetPWMCR_TRUN(eCntrl, TIMER_PWM_DISABLE);
0002a0  e24405ff          SUB      r0,r4,#0x3fc00000
0002a4  e240093f          SUB      r0,r0,#0xfc000
0002a8  e1d000b0          LDRH     r0,[r0,#0]
0002ac  e3c00001          BIC      r0,r0,#1
0002b0  e24415ff          SUB      r1,r4,#0x3fc00000
0002b4  e241193f          SUB      r1,r1,#0xfc000
0002b8  e1c100b0          STRH     r0,[r1,#0]
;;;189                        vSetPWMCR_OL(eCntrl, eOutLevel);
0002bc  e24405ff          SUB      r0,r4,#0x3fc00000
0002c0  e240093f          SUB      r0,r0,#0xfc000
0002c4  e1d000b0          LDRH     r0,[r0,#0]
0002c8  e7c40218          BFI      r0,r8,#4,#1
0002cc  e24415ff          SUB      r1,r4,#0x3fc00000
0002d0  e241193f          SUB      r1,r1,#0xfc000
0002d4  e1c100b0          STRH     r0,[r1,#0]
;;;190    
;;;191    		    /* Achieved Duty-cycle */
;;;192                        i32Res = 0;
0002d8  e3a06000          MOV      r6,#0
0002dc  ea000013          B        |L1.816|
                  |L1.736|
;;;193                    }
;;;194                    else
;;;195                    {
;;;196                        /* 100% */
;;;197                        vSetPWMCR_TRUN(eCntrl, TIMER_PWM_DISABLE);
0002e0  e24405ff          SUB      r0,r4,#0x3fc00000
0002e4  e240093f          SUB      r0,r0,#0xfc000
0002e8  e1d000b0          LDRH     r0,[r0,#0]
0002ec  e3c00001          BIC      r0,r0,#1
0002f0  e24415ff          SUB      r1,r4,#0x3fc00000
0002f4  e241193f          SUB      r1,r1,#0xfc000
0002f8  e1c100b0          STRH     r0,[r1,#0]
;;;198                        vSetPWMCR_OL(eCntrl, ~eOutLevel);
0002fc  e1e00008          MVN      r0,r8
000300  e24415ff          SUB      r1,r4,#0x3fc00000
000304  e241193f          SUB      r1,r1,#0xfc000
000308  e1d110b0          LDRH     r1,[r1,#0]
00030c  e7c41210          BFI      r1,r0,#4,#1
000310  e24405ff          SUB      r0,r4,#0x3fc00000
000314  e240093f          SUB      r0,r0,#0xfc000
000318  e1c010b0          STRH     r1,[r0,#0]
;;;199    
;;;200    		    /* Achieved Duty-cycle */
;;;201                        i32Res = 100;
00031c  e3a06064          MOV      r6,#0x64
000320  ea000002          B        |L1.816|
                  |L1.804|
;;;202                    }
;;;203                }
;;;204            }
;;;205            else
;;;206            {
;;;207                /* Duty Cycle parameter out of range */
;;;208                i32Res = 0xff;
000324  e3a060ff          MOV      r6,#0xff
000328  ea000000          B        |L1.816|
                  |L1.812|
;;;209            }
;;;210        }
;;;211        else
;;;212        {
;;;213            /* PWM Timer running, no change allowed */
;;;214            i32Res = 0xff;
00032c  e3a060ff          MOV      r6,#0xff
                  |L1.816|
;;;215        }
;;;216    
;;;217        return i32Res;
000330  e1a00006          MOV      r0,r6
;;;218    }
000334  e8bd9ff0          POP      {r4-r12,pc}
;;;219    
                          ENDP

                  vTIMER_PWM_SetPrescaler PROC
;;;222    
;;;223    void vTIMER_PWM_SetPrescaler(timer_pwm_cntrl_e eCntrl, timer_pwm_sclk_e ePrescal)
000338  e24025ff          SUB      r2,r0,#0x3fc00000
;;;224    {
;;;225        vSetPWMCR_SCLK(eCntrl, ePrescal);
00033c  e242293f          SUB      r2,r2,#0xfc000
000340  e1d220b0          LDRH     r2,[r2,#0]
000344  e7ce2611          BFI      r2,r1,#12,#3
000348  e24035ff          SUB      r3,r0,#0x3fc00000
00034c  e243393f          SUB      r3,r3,#0xfc000
000350  e1c320b0          STRH     r2,[r3,#0]
;;;226    }
000354  e12fff1e          BX       lr
;;;227    
                          ENDP

                  vTIMER_PWM_SetRstCondition PROC
;;;230    
;;;231    void vTIMER_PWM_SetRstCondition(timer_pwm_cntrl_e eCntrl, timer_pwm_rc_e eRst)
000358  e24025ff          SUB      r2,r0,#0x3fc00000
;;;232    {
;;;233        vSetPWMCR_RC(eCntrl, eRst);
00035c  e242293f          SUB      r2,r2,#0xfc000
000360  e1d220b0          LDRH     r2,[r2,#0]
000364  e7cb2511          BFI      r2,r1,#10,#2
000368  e24035ff          SUB      r3,r0,#0x3fc00000
00036c  e243393f          SUB      r3,r3,#0xfc000
000370  e1c320b0          STRH     r2,[r3,#0]
;;;234    }
000374  e12fff1e          BX       lr
;;;235    
                          ENDP

                  vTIMER_PWM_SetDetEdgeVsync PROC
;;;238    
;;;239    void vTIMER_PWM_SetDetEdgeVsync(timer_pwm_cntrl_e eCntrl, timer_pwm_ved_e eEdge)
000378  e24025ff          SUB      r2,r0,#0x3fc00000
;;;240    {
;;;241        vSetPWMCR_VED(eCntrl, eEdge);
00037c  e242293f          SUB      r2,r2,#0xfc000
000380  e1d220b0          LDRH     r2,[r2,#0]
000384  e7c92491          BFI      r2,r1,#9,#1
000388  e24035ff          SUB      r3,r0,#0x3fc00000
00038c  e243393f          SUB      r3,r3,#0xfc000
000390  e1c320b0          STRH     r2,[r3,#0]
;;;242    }
000394  e12fff1e          BX       lr
;;;243    
                          ENDP

                  vTIMER_PWM_SetDetEdgeHSync PROC
;;;246    
;;;247    void vTIMER_PWM_SetDetEdgeHSync(timer_pwm_cntrl_e eCntrl, timer_pwm_ved_e eEdge)
000398  e24025ff          SUB      r2,r0,#0x3fc00000
;;;248    {
;;;249        vSetPWMCR_HED(eCntrl, eEdge);
00039c  e242293f          SUB      r2,r2,#0xfc000
0003a0  e1d220b0          LDRH     r2,[r2,#0]
0003a4  e7c82411          BFI      r2,r1,#8,#1
0003a8  e24035ff          SUB      r3,r0,#0x3fc00000
0003ac  e243393f          SUB      r3,r3,#0xfc000
0003b0  e1c320b0          STRH     r2,[r3,#0]
;;;250    }
0003b4  e12fff1e          BX       lr
;;;251    
                          ENDP

                  vTIMER_PWM_IrqEnable PROC
;;;254    
;;;255    void vTIMER_PWM_IrqEnable(timer_pwm_cntrl_e eCntrl, timer_pwm_en_e eEnable)
0003b8  e24025ff          SUB      r2,r0,#0x3fc00000
;;;256    {
;;;257        vSetPWMCR_IE(eCntrl, eEnable);
0003bc  e242293f          SUB      r2,r2,#0xfc000
0003c0  e1d220b0          LDRH     r2,[r2,#0]
0003c4  e7c62311          BFI      r2,r1,#6,#1
0003c8  e24035ff          SUB      r3,r0,#0x3fc00000
0003cc  e243393f          SUB      r3,r3,#0xfc000
0003d0  e1c320b0          STRH     r2,[r3,#0]
;;;258    }
0003d4  e12fff1e          BX       lr
;;;259    
                          ENDP

                  vTIMER_PWM_DBuffEnable PROC
;;;262    
;;;263    void vTIMER_PWM_DBuffEnable(timer_pwm_cntrl_e eCntrl, timer_pwm_en_e eEnable)
0003d8  e24025ff          SUB      r2,r0,#0x3fc00000
;;;264    {
;;;265        vSetPWMCR_DB(eCntrl, eEnable);
0003dc  e242293f          SUB      r2,r2,#0xfc000
0003e0  e1d220b0          LDRH     r2,[r2,#0]
0003e4  e7c52291          BFI      r2,r1,#5,#1
0003e8  e24035ff          SUB      r3,r0,#0x3fc00000
0003ec  e243393f          SUB      r3,r3,#0xfc000
0003f0  e1c320b0          STRH     r2,[r3,#0]
;;;266    }
0003f4  e12fff1e          BX       lr
;;;267    
                          ENDP

                  i32TIMER_PWM_SetOutLevel PROC
;;;270    
;;;271    int32_t i32TIMER_PWM_SetOutLevel(timer_pwm_cntrl_e eCntrl, timer_pwm_ol_e eLevel)
0003f8  e92d4030          PUSH     {r4,r5,lr}
;;;272    {
0003fc  e1a02000          MOV      r2,r0
;;;273        int32_t i32Res = C_SUCCESS;
000400  e3a00000          MOV      r0,#0
;;;274        timer_pwm_en_e eCurStat = TIMER_PWM_DISABLE;
000404  e3a03000          MOV      r3,#0
;;;275    
;;;276        eCurStat = (timer_pwm_en_e)biGetPWMCR_TRUN(eCntrl);
000408  e24245ff          SUB      r4,r2,#0x3fc00000
00040c  e244493f          SUB      r4,r4,#0xfc000
000410  e1d440b0          LDRH     r4,[r4,#0]
000414  e2043001          AND      r3,r4,#1
;;;277    
;;;278        /* Change allowed only when Timer is not Running */
;;;279        if( TIMER_PWM_ENABLE != eCurStat )
000418  e3530000          CMP      r3,#0
00041c  1a000007          BNE      |L1.1088|
;;;280        {
;;;281            /* Change Output Level */
;;;282            vSetPWMCR_OL(eCntrl, eLevel);
000420  e24245ff          SUB      r4,r2,#0x3fc00000
000424  e244493f          SUB      r4,r4,#0xfc000
000428  e1d440b0          LDRH     r4,[r4,#0]
00042c  e7c44211          BFI      r4,r1,#4,#1
000430  e24255ff          SUB      r5,r2,#0x3fc00000
000434  e245593f          SUB      r5,r5,#0xfc000
000438  e1c540b0          STRH     r4,[r5,#0]
00043c  ea000000          B        |L1.1092|
                  |L1.1088|
;;;283        }
;;;284        else
;;;285        {
;;;286            /* No change allowed (PWM Timer running) */
;;;287            i32Res = C_FAILED;
000440  e3e00000          MVN      r0,#0
                  |L1.1092|
;;;288        }
;;;289    
;;;290        return i32Res;
;;;291    }
000444  e8bd8030          POP      {r4,r5,pc}
;;;292    
                          ENDP

                  vTIMER_PWM_SetClkSource PROC
;;;295    
;;;296    void vTIMER_PWM_SetClkSource(timer_pwm_cntrl_e eCntrl, timer_pwm_gdc_e eSource)
000448  e24025ff          SUB      r2,r0,#0x3fc00000
;;;297    {
;;;298        vSetPWMCR_GDC(eCntrl, eSource);
00044c  e242293f          SUB      r2,r2,#0xfc000
000450  e1d220b0          LDRH     r2,[r2,#0]
000454  e7c22091          BFI      r2,r1,#1,#2
000458  e24035ff          SUB      r3,r0,#0x3fc00000
00045c  e243393f          SUB      r3,r3,#0xfc000
000460  e1c320b0          STRH     r2,[r3,#0]
;;;299    }
000464  e12fff1e          BX       lr
;;;300    
                          ENDP

                  vTIMER_PWM_Enable PROC
;;;304    
;;;305    void vTIMER_PWM_Enable(timer_pwm_cntrl_e eCntrl, timer_pwm_en_e eEnable)
000468  e24025ff          SUB      r2,r0,#0x3fc00000
;;;306    {
;;;307        vSetPWMCR_TRUN(eCntrl, eEnable);
00046c  e242293f          SUB      r2,r2,#0xfc000
000470  e1d220b0          LDRH     r2,[r2,#0]
000474  e7c02011          BFI      r2,r1,#0,#1
000478  e24035ff          SUB      r3,r0,#0x3fc00000
00047c  e243393f          SUB      r3,r3,#0xfc000
000480  e1c320b0          STRH     r2,[r3,#0]
;;;308        au8PWMRunning[eCntrl] = (uint8_t)eEnable;
000484  e59f2030          LDR      r2,|L1.1212|
000488  e7c21000          STRB     r1,[r2,r0]
;;;309    }
00048c  e12fff1e          BX       lr
;;;310    
                          ENDP

                  u16TIMER_PWM_GetCountVal PROC
;;;313    
;;;314    uint16_t u16TIMER_PWM_GetCountVal(timer_pwm_cntrl_e eCntrl)
000490  e1a01000          MOV      r1,r0
;;;315    {
;;;316        return (uint16_t) biGetPWMCNT_PWMCNT(eCntrl);
000494  e24105ff          SUB      r0,r1,#0x3fc00000
000498  e240093f          SUB      r0,r0,#0xfc000
00049c  e1d000bc          LDRH     r0,[r0,#0xc]
;;;317    }
0004a0  e12fff1e          BX       lr
;;;318    
                          ENDP

                  |L1.1188|
                          DCD      au8LLDD_TIMER_PWM_C_REVISION
                  |L1.1192|
                          DCD      au8LLDD_TIMER_PWM_C_TAG
                  |L1.1196|
                          DCD      au8LLDD_TIMER_PWM_H_REVISION
                  |L1.1200|
                          DCD      au8LLDD_TIMER_PWM_H_TAG
                  |L1.1204|
                          DCD      au8LLDD_TIMER_PWM_IO_H_REVISION
                  |L1.1208|
                          DCD      au8LLDD_TIMER_PWM_IO_H_TAG
                  |L1.1212|
                          DCD      au8PWMRunning

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  au8PWMRunning
                          %        24

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_TIMER_PWM_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e382024          DCB      0x2e,0x38,0x20,0x24
000010  00                DCB      0x00
                  au8LLDD_TIMER_PWM_C_TAG
000011  244e61            DCB      0x24,0x4e,0x61
000014  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000018  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
00001c  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000020  202400            DCB      0x20,0x24,0x00
                  au8LLDD_TIMER_PWM_H_REVISION
000023  24                DCB      0x24
000024  52657669          DCB      0x52,0x65,0x76,0x69
000028  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00002c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000030  31302024          DCB      0x31,0x30,0x20,0x24
000034  00                DCB      0x00
                  au8LLDD_TIMER_PWM_H_TAG
000035  244e61            DCB      0x24,0x4e,0x61
000038  6d653a20          DCB      0x6d,0x65,0x3a,0x20
00003c  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
000040  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000044  202400            DCB      0x20,0x24,0x00
                  au8LLDD_TIMER_PWM_IO_H_REVISION
000047  24                DCB      0x24
000048  52657669          DCB      0x52,0x65,0x76,0x69
00004c  73696f6e          DCB      0x73,0x69,0x6f,0x6e
000050  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000054  31332024          DCB      0x31,0x33,0x20,0x24
000058  00                DCB      0x00
                  au8LLDD_TIMER_PWM_IO_H_TAG
000059  244e61            DCB      0x24,0x4e,0x61
00005c  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000060  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
000064  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000068  202400            DCB      0x20,0x24,0x00
