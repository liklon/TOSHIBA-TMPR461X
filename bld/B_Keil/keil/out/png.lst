L 1 "..\..\..\..\lldd\src\png.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : PNG-decoder low level driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : 
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.19 $
N*   DATE        : $Date: 2015/05/04 09:07:15 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "png_io.h"                   /* png registers, bits and access macros defintion */
L 1 "..\..\..\..\lldd\hdr\png_io.h" 1
N
N/*##########################################################################    
N/  AUTOMATICALLY GENERATED FROM A REG_XML-FILE 
N/  Module                       : PNGDe 
N/  Date of creation (y-m-d:time): 2015-01-23+01:00  :  12:06:21.789+01:00
N/  Excel2XML Tool ver.          : XLS2XML Converter 2.6.2
N/  Stylesheet  ver              : $Revision: 1.11 $ 
N/  Excel Sheet ver.             : vv1.16
N/  Excel Sheet date             : 2014-Oct-28
N/  Excel Sheet author           : ZUL
N/##########################################################################*/
N
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : PNG low level driver io-header file
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : PNG
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.11 $ 
N*   DATE        : $Date: 2015/05/04 09:07:16 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary and Confidential
N*****************************************************************************/
N
N
N#ifndef PNGDeIO_H
N#define PNGDeIO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N/* Following include file(s) needed for proper operation: */
N#include "captypes.h"                      /* Core specific primitive type definitions */ 
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 40 "..\..\..\..\lldd\hdr\png_io.h" 2
N
N/*********************************************/
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S
N#endif
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_PNG_IO_H_REVISION     "$Revision: 1.11 $"
N#define LLDD_PNG_IO_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N     
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGVER                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04000                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGVER_REG__       0xC0C04000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   VERSION	:32; 	 /* 0..31  bit(s) R */                    
N} PNGVER_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGVER_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGVER_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGVER_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGVER()     ((volatile PNGVER_bit_view_st *)\
N(PNGVER_REG__ ))
X#define pst_bitPNGVER()     ((volatile PNGVER_bit_view_st *)(PNGVER_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGVER()     ((volatile PNGVER_byte_view_st *)\
N(PNGVER_REG__ ))
X#define pst_u8PNGVER()     ((volatile PNGVER_byte_view_st *)(PNGVER_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGVER()     ((volatile PNGVER_halfword_view_st *)\
N(PNGVER_REG__ ))
X#define pst_u16PNGVER()     ((volatile PNGVER_halfword_view_st *)(PNGVER_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGVER()     ((volatile u32PNGVER_word_view *)\
N(PNGVER_REG__ ))
X#define pu32PNGVER()     ((volatile u32PNGVER_word_view *)(PNGVER_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGVER_VERSION() (pst_bitPNGVER() -> VERSION)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGVERLL() (pst_u8PNGVER() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGVERLH() (pst_u8PNGVER() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGVERHL() (pst_u8PNGVER() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGVERHH() (pst_u8PNGVER() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGVERL() (pst_u16PNGVER() -> u16L)
N
N#define u16GetPNGVERH() (pst_u16PNGVER() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGVER()  (*pu32PNGVER() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGGCTRL                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04004                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGGCTRL_REG__       0xC0C04004U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   IPRE	:1; 	 /* 0..0  bit(s) R/W */ 
N  uint32_t   RSRVD1	:31; 	 /* 1..31  bit(s) R */                    
N} PNGGCTRL_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGGCTRL_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGGCTRL_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGGCTRL_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGGCTRL()     ((volatile PNGGCTRL_bit_view_st *)\
N(PNGGCTRL_REG__ ))
X#define pst_bitPNGGCTRL()     ((volatile PNGGCTRL_bit_view_st *)(PNGGCTRL_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGGCTRL()     ((volatile PNGGCTRL_byte_view_st *)\
N(PNGGCTRL_REG__ ))
X#define pst_u8PNGGCTRL()     ((volatile PNGGCTRL_byte_view_st *)(PNGGCTRL_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGGCTRL()     ((volatile PNGGCTRL_halfword_view_st *)\
N(PNGGCTRL_REG__ ))
X#define pst_u16PNGGCTRL()     ((volatile PNGGCTRL_halfword_view_st *)(PNGGCTRL_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGGCTRL()     ((volatile u32PNGGCTRL_word_view *)\
N(PNGGCTRL_REG__ ))
X#define pu32PNGGCTRL()     ((volatile u32PNGGCTRL_word_view *)(PNGGCTRL_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGGCTRL_IPRE() (pst_bitPNGGCTRL() -> IPRE)
N#define vSetPNGGCTRL_IPRE(ParValue)  (pst_bitPNGGCTRL() -> IPRE=(ParValue))            
N#define biGetPNGGCTRL_RSRVD1() (pst_bitPNGGCTRL() -> RSRVD1)
N            
N/* LL-struct byte access */
N#define vSetPNGGCTRLLL(ParValue) (pst_u8PNGGCTRL() -> u8LL = (ParValue))
N#define u8GetPNGGCTRLLL() (pst_u8PNGGCTRL() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGGCTRLLH(ParValue) (pst_u8PNGGCTRL() -> u8LH = (ParValue))
N#define u8GetPNGGCTRLLH() (pst_u8PNGGCTRL() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGGCTRLHL(ParValue) (pst_u8PNGGCTRL() -> u8HL = (ParValue))
N#define u8GetPNGGCTRLHL() (pst_u8PNGGCTRL() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGGCTRLHH(ParValue) (pst_u8PNGGCTRL() -> u8HH = (ParValue))
N#define u8GetPNGGCTRLHH() (pst_u8PNGGCTRL() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGGCTRLL(ParValue) (pst_u16PNGGCTRL() -> u16L = (ParValue))
N#define u16GetPNGGCTRLL() (pst_u16PNGGCTRL() -> u16L)
N#define vSetPNGGCTRLH(ParValue) (pst_u16PNGGCTRL() -> u16H = (ParValue))
N#define u16GetPNGGCTRLH() (pst_u16PNGGCTRL() -> u16H)
N            
N/* Word access */
N#define vSetPNGGCTRL(ParValue)  (*pu32PNGGCTRL() = (ParValue))
N#define u32GetPNGGCTRL()  (*pu32PNGGCTRL() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGGINTE                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04008                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGGINTE_REG__       0xC0C04008U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   VSWAEIE	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   VSUAEIE	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   CW2ROEIE	:1; 	 /* 2..2  bit(s) R/W */
N  uint32_t   CRSVAEIE	:1; 	 /* 3..3  bit(s) R/W */
N  uint32_t   CPEIE	:1; 	 /* 4..4  bit(s) R/W */
N  uint32_t   SWBEIE	:1; 	 /* 5..5  bit(s) R/W */
N  uint32_t   SSBEIE	:1; 	 /* 6..6  bit(s) R/W */ 
N  uint32_t   RSRVD7	:25; 	 /* 7..31  bit(s) R */                    
N} PNGGINTE_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGGINTE_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGGINTE_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGGINTE_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGGINTE()     ((volatile PNGGINTE_bit_view_st *)\
N(PNGGINTE_REG__ ))
X#define pst_bitPNGGINTE()     ((volatile PNGGINTE_bit_view_st *)(PNGGINTE_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGGINTE()     ((volatile PNGGINTE_byte_view_st *)\
N(PNGGINTE_REG__ ))
X#define pst_u8PNGGINTE()     ((volatile PNGGINTE_byte_view_st *)(PNGGINTE_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGGINTE()     ((volatile PNGGINTE_halfword_view_st *)\
N(PNGGINTE_REG__ ))
X#define pst_u16PNGGINTE()     ((volatile PNGGINTE_halfword_view_st *)(PNGGINTE_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGGINTE()     ((volatile u32PNGGINTE_word_view *)\
N(PNGGINTE_REG__ ))
X#define pu32PNGGINTE()     ((volatile u32PNGGINTE_word_view *)(PNGGINTE_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGGINTE_VSWAEIE() (pst_bitPNGGINTE() -> VSWAEIE)
N#define vSetPNGGINTE_VSWAEIE(ParValue)  (pst_bitPNGGINTE() -> VSWAEIE=(ParValue))
N#define biGetPNGGINTE_VSUAEIE() (pst_bitPNGGINTE() -> VSUAEIE)
N#define vSetPNGGINTE_VSUAEIE(ParValue)  (pst_bitPNGGINTE() -> VSUAEIE=(ParValue))
N#define biGetPNGGINTE_CW2ROEIE() (pst_bitPNGGINTE() -> CW2ROEIE)
N#define vSetPNGGINTE_CW2ROEIE(ParValue)  (pst_bitPNGGINTE() -> CW2ROEIE=(ParValue))
N#define biGetPNGGINTE_CRSVAEIE() (pst_bitPNGGINTE() -> CRSVAEIE)
N#define vSetPNGGINTE_CRSVAEIE(ParValue)  (pst_bitPNGGINTE() -> CRSVAEIE=(ParValue))
N#define biGetPNGGINTE_CPEIE() (pst_bitPNGGINTE() -> CPEIE)
N#define vSetPNGGINTE_CPEIE(ParValue)  (pst_bitPNGGINTE() -> CPEIE=(ParValue))
N#define biGetPNGGINTE_SWBEIE() (pst_bitPNGGINTE() -> SWBEIE)
N#define vSetPNGGINTE_SWBEIE(ParValue)  (pst_bitPNGGINTE() -> SWBEIE=(ParValue))
N#define biGetPNGGINTE_SSBEIE() (pst_bitPNGGINTE() -> SSBEIE)
N#define vSetPNGGINTE_SSBEIE(ParValue)  (pst_bitPNGGINTE() -> SSBEIE=(ParValue))            
N#define biGetPNGGINTE_RSRVD7() (pst_bitPNGGINTE() -> RSRVD7)
N            
N/* LL-struct byte access */
N#define vSetPNGGINTELL(ParValue) (pst_u8PNGGINTE() -> u8LL = (ParValue))
N#define u8GetPNGGINTELL() (pst_u8PNGGINTE() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGGINTELH(ParValue) (pst_u8PNGGINTE() -> u8LH = (ParValue))
N#define u8GetPNGGINTELH() (pst_u8PNGGINTE() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGGINTEHL(ParValue) (pst_u8PNGGINTE() -> u8HL = (ParValue))
N#define u8GetPNGGINTEHL() (pst_u8PNGGINTE() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGGINTEHH(ParValue) (pst_u8PNGGINTE() -> u8HH = (ParValue))
N#define u8GetPNGGINTEHH() (pst_u8PNGGINTE() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGGINTEL(ParValue) (pst_u16PNGGINTE() -> u16L = (ParValue))
N#define u16GetPNGGINTEL() (pst_u16PNGGINTE() -> u16L)
N#define vSetPNGGINTEH(ParValue) (pst_u16PNGGINTE() -> u16H = (ParValue))
N#define u16GetPNGGINTEH() (pst_u16PNGGINTE() -> u16H)
N            
N/* Word access */
N#define vSetPNGGINTE(ParValue)  (*pu32PNGGINTE() = (ParValue))
N#define u32GetPNGGINTE()  (*pu32PNGGINTE() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGGINTS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C0400C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGGINTS_REG__       0xC0C0400CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   VSWAEIS	:1; 	 /* 0..0  bit(s) R */
N  uint32_t   VSUAEIS	:1; 	 /* 1..1  bit(s) R */
N  uint32_t   CW2ROEIS	:1; 	 /* 2..2  bit(s) R */
N  uint32_t   CRSVAEIS	:1; 	 /* 3..3  bit(s) R */
N  uint32_t   CPEIS	:1; 	 /* 4..4  bit(s) R */
N  uint32_t   SWBEIS	:1; 	 /* 5..5  bit(s) R */
N  uint32_t   SSBEIS	:1; 	 /* 6..6  bit(s) R */ 
N  uint32_t   RSRVD7	:25; 	 /* 7..31  bit(s) R */                    
N} PNGGINTS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGGINTS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGGINTS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGGINTS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGGINTS()     ((volatile PNGGINTS_bit_view_st *)\
N(PNGGINTS_REG__ ))
X#define pst_bitPNGGINTS()     ((volatile PNGGINTS_bit_view_st *)(PNGGINTS_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGGINTS()     ((volatile PNGGINTS_byte_view_st *)\
N(PNGGINTS_REG__ ))
X#define pst_u8PNGGINTS()     ((volatile PNGGINTS_byte_view_st *)(PNGGINTS_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGGINTS()     ((volatile PNGGINTS_halfword_view_st *)\
N(PNGGINTS_REG__ ))
X#define pst_u16PNGGINTS()     ((volatile PNGGINTS_halfword_view_st *)(PNGGINTS_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGGINTS()     ((volatile u32PNGGINTS_word_view *)\
N(PNGGINTS_REG__ ))
X#define pu32PNGGINTS()     ((volatile u32PNGGINTS_word_view *)(PNGGINTS_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGGINTS_VSWAEIS() (pst_bitPNGGINTS() -> VSWAEIS)            
N#define biGetPNGGINTS_VSUAEIS() (pst_bitPNGGINTS() -> VSUAEIS)            
N#define biGetPNGGINTS_CW2ROEIS() (pst_bitPNGGINTS() -> CW2ROEIS)            
N#define biGetPNGGINTS_CRSVAEIS() (pst_bitPNGGINTS() -> CRSVAEIS)            
N#define biGetPNGGINTS_CPEIS() (pst_bitPNGGINTS() -> CPEIS)            
N#define biGetPNGGINTS_SWBEIS() (pst_bitPNGGINTS() -> SWBEIS)            
N#define biGetPNGGINTS_SSBEIS() (pst_bitPNGGINTS() -> SSBEIS)            
N#define biGetPNGGINTS_RSRVD7() (pst_bitPNGGINTS() -> RSRVD7)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGGINTSLL() (pst_u8PNGGINTS() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGGINTSLH() (pst_u8PNGGINTS() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGGINTSHL() (pst_u8PNGGINTS() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGGINTSHH() (pst_u8PNGGINTS() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGGINTSL() (pst_u16PNGGINTS() -> u16L)
N
N#define u16GetPNGGINTSH() (pst_u16PNGGINTS() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGGINTS()  (*pu32PNGGINTS() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGGINTC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04010                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGGINTC_REG__       0xC0C04010U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   VSWAEIC	:1; 	 /* 0..0  bit(s) R/W1C */
N  uint32_t   VSUAEIC	:1; 	 /* 1..1  bit(s) R/W1C */
N  uint32_t   CW2ROEIC	:1; 	 /* 2..2  bit(s) R/W1C */
N  uint32_t   CRSVAEIC	:1; 	 /* 3..3  bit(s) R/W1C */
N  uint32_t   CPEIC	:1; 	 /* 4..4  bit(s) R/W1C */
N  uint32_t   SWBEIC	:1; 	 /* 5..5  bit(s) R/W1C */
N  uint32_t   SSBEIC	:1; 	 /* 6..6  bit(s) R/W1C */ 
N  uint32_t   RSRVD7	:25; 	 /* 7..31  bit(s) R */                    
N} PNGGINTC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGGINTC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGGINTC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGGINTC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGGINTC()     ((volatile PNGGINTC_bit_view_st *)\
N(PNGGINTC_REG__ ))
X#define pst_bitPNGGINTC()     ((volatile PNGGINTC_bit_view_st *)(PNGGINTC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGGINTC()     ((volatile PNGGINTC_byte_view_st *)\
N(PNGGINTC_REG__ ))
X#define pst_u8PNGGINTC()     ((volatile PNGGINTC_byte_view_st *)(PNGGINTC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGGINTC()     ((volatile PNGGINTC_halfword_view_st *)\
N(PNGGINTC_REG__ ))
X#define pst_u16PNGGINTC()     ((volatile PNGGINTC_halfword_view_st *)(PNGGINTC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGGINTC()     ((volatile u32PNGGINTC_word_view *)\
N(PNGGINTC_REG__ ))
X#define pu32PNGGINTC()     ((volatile u32PNGGINTC_word_view *)(PNGGINTC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGGINTC_VSWAEIC() (pst_bitPNGGINTC() -> VSWAEIC)
N#define vClrPNGGINTC_VSWAEIC() (pst_bitPNGGINTC() -> VSWAEIC = (1))
N#define biGetPNGGINTC_VSUAEIC() (pst_bitPNGGINTC() -> VSUAEIC)
N#define vClrPNGGINTC_VSUAEIC() (pst_bitPNGGINTC() -> VSUAEIC = (1))
N#define biGetPNGGINTC_CW2ROEIC() (pst_bitPNGGINTC() -> CW2ROEIC)
N#define vClrPNGGINTC_CW2ROEIC() (pst_bitPNGGINTC() -> CW2ROEIC = (1))
N#define biGetPNGGINTC_CRSVAEIC() (pst_bitPNGGINTC() -> CRSVAEIC)
N#define vClrPNGGINTC_CRSVAEIC() (pst_bitPNGGINTC() -> CRSVAEIC = (1))
N#define biGetPNGGINTC_CPEIC() (pst_bitPNGGINTC() -> CPEIC)
N#define vClrPNGGINTC_CPEIC() (pst_bitPNGGINTC() -> CPEIC = (1))
N#define biGetPNGGINTC_SWBEIC() (pst_bitPNGGINTC() -> SWBEIC)
N#define vClrPNGGINTC_SWBEIC() (pst_bitPNGGINTC() -> SWBEIC = (1))
N#define biGetPNGGINTC_SSBEIC() (pst_bitPNGGINTC() -> SSBEIC)
N#define vClrPNGGINTC_SSBEIC() (pst_bitPNGGINTC() -> SSBEIC = (1))            
N#define biGetPNGGINTC_RSRVD7() (pst_bitPNGGINTC() -> RSRVD7)
N            
N/* LL-struct byte access */
N#define vSetPNGGINTCLL(ParValue) (pst_u8PNGGINTC() -> u8LL = (ParValue))
N#define u8GetPNGGINTCLL() (pst_u8PNGGINTC() -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGGINTCLH(ParValue) (pst_u8PNGGINTC() -> u8LH = (ParValue))
N#define u8GetPNGGINTCLH() (pst_u8PNGGINTC() -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGGINTCHL(ParValue) (pst_u8PNGGINTC() -> u8HL = (ParValue))
N#define u8GetPNGGINTCHL() (pst_u8PNGGINTC() -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGGINTCHH(ParValue) (pst_u8PNGGINTC() -> u8HH = (ParValue))
N#define u8GetPNGGINTCHH() (pst_u8PNGGINTC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGGINTCL(ParValue) (pst_u16PNGGINTC() -> u16L = (ParValue))
N#define u16GetPNGGINTCL() (pst_u16PNGGINTC() -> u16L)
N#define vSetPNGGINTCH(ParValue) (pst_u16PNGGINTC() -> u16H = (ParValue))
N#define u16GetPNGGINTCH() (pst_u16PNGGINTC() -> u16H)
N            
N/* Word access */
N#define vSetPNGGINTC(ParValue)  (*pu32PNGGINTC() = (ParValue))
N#define u32GetPNGGINTC()  (*pu32PNGGINTC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSWBEA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04014                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSWBEA_REG__       0xC0C04014U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   ADDR	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSWBEA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSWBEA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSWBEA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSWBEA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSWBEA()     ((volatile PNGSWBEA_bit_view_st *)\
N(PNGSWBEA_REG__ ))
X#define pst_bitPNGSWBEA()     ((volatile PNGSWBEA_bit_view_st *)(PNGSWBEA_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSWBEA()     ((volatile PNGSWBEA_byte_view_st *)\
N(PNGSWBEA_REG__ ))
X#define pst_u8PNGSWBEA()     ((volatile PNGSWBEA_byte_view_st *)(PNGSWBEA_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSWBEA()     ((volatile PNGSWBEA_halfword_view_st *)\
N(PNGSWBEA_REG__ ))
X#define pst_u16PNGSWBEA()     ((volatile PNGSWBEA_halfword_view_st *)(PNGSWBEA_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSWBEA()     ((volatile u32PNGSWBEA_word_view *)\
N(PNGSWBEA_REG__ ))
X#define pu32PNGSWBEA()     ((volatile u32PNGSWBEA_word_view *)(PNGSWBEA_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSWBEA_ADDR() (pst_bitPNGSWBEA() -> ADDR)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSWBEALL() (pst_u8PNGSWBEA() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSWBEALH() (pst_u8PNGSWBEA() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSWBEAHL() (pst_u8PNGSWBEA() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSWBEAHH() (pst_u8PNGSWBEA() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSWBEAL() (pst_u16PNGSWBEA() -> u16L)
N
N#define u16GetPNGSWBEAH() (pst_u16PNGSWBEA() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSWBEA()  (*pu32PNGSWBEA() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSWBEC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04018                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSWBEC_REG__       0xC0C04018U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   WR	:1; 	 /* 0..0  bit(s) R */
N  uint32_t   BTYPE	:1; 	 /* 1..1  bit(s) R */
N  uint32_t   BSIZE	:3; 	 /* 2..4  bit(s) R */
N  uint32_t   RTYPE	:2; 	 /* 5..6  bit(s) R */
N  uint32_t   RSRVD7	:1; 	 /* 7..7  bit(s) R */
N  uint32_t   BEN	:8; 	 /* 8..15  bit(s) R */
N  uint32_t   ID	:4; 	 /* 16..19  bit(s) R */
N  uint32_t   LEN	:4; 	 /* 20..23  bit(s) R */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGSWBEC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSWBEC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSWBEC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSWBEC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSWBEC()     ((volatile PNGSWBEC_bit_view_st *)\
N(PNGSWBEC_REG__ ))
X#define pst_bitPNGSWBEC()     ((volatile PNGSWBEC_bit_view_st *)(PNGSWBEC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSWBEC()     ((volatile PNGSWBEC_byte_view_st *)\
N(PNGSWBEC_REG__ ))
X#define pst_u8PNGSWBEC()     ((volatile PNGSWBEC_byte_view_st *)(PNGSWBEC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSWBEC()     ((volatile PNGSWBEC_halfword_view_st *)\
N(PNGSWBEC_REG__ ))
X#define pst_u16PNGSWBEC()     ((volatile PNGSWBEC_halfword_view_st *)(PNGSWBEC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSWBEC()     ((volatile u32PNGSWBEC_word_view *)\
N(PNGSWBEC_REG__ ))
X#define pu32PNGSWBEC()     ((volatile u32PNGSWBEC_word_view *)(PNGSWBEC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSWBEC_WR() (pst_bitPNGSWBEC() -> WR)            
N#define biGetPNGSWBEC_BTYPE() (pst_bitPNGSWBEC() -> BTYPE)            
N#define biGetPNGSWBEC_BSIZE() (pst_bitPNGSWBEC() -> BSIZE)            
N#define biGetPNGSWBEC_RTYPE() (pst_bitPNGSWBEC() -> RTYPE)            
N#define biGetPNGSWBEC_RSRVD7() (pst_bitPNGSWBEC() -> RSRVD7)            
N#define biGetPNGSWBEC_BEN() (pst_bitPNGSWBEC() -> BEN)            
N#define biGetPNGSWBEC_ID() (pst_bitPNGSWBEC() -> ID)            
N#define biGetPNGSWBEC_LEN() (pst_bitPNGSWBEC() -> LEN)            
N#define biGetPNGSWBEC_RSRVD24() (pst_bitPNGSWBEC() -> RSRVD24)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSWBECLL() (pst_u8PNGSWBEC() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSWBECLH() (pst_u8PNGSWBEC() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSWBECHL() (pst_u8PNGSWBEC() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSWBECHH() (pst_u8PNGSWBEC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSWBECL() (pst_u16PNGSWBEC() -> u16L)
N
N#define u16GetPNGSWBECH() (pst_u16PNGSWBEC() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSWBEC()  (*pu32PNGSWBEC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSSBEA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C0401C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSSBEA_REG__       0xC0C0401CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   ADDR	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSSBEA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSSBEA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSSBEA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSSBEA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSSBEA()     ((volatile PNGSSBEA_bit_view_st *)\
N(PNGSSBEA_REG__ ))
X#define pst_bitPNGSSBEA()     ((volatile PNGSSBEA_bit_view_st *)(PNGSSBEA_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSSBEA()     ((volatile PNGSSBEA_byte_view_st *)\
N(PNGSSBEA_REG__ ))
X#define pst_u8PNGSSBEA()     ((volatile PNGSSBEA_byte_view_st *)(PNGSSBEA_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSSBEA()     ((volatile PNGSSBEA_halfword_view_st *)\
N(PNGSSBEA_REG__ ))
X#define pst_u16PNGSSBEA()     ((volatile PNGSSBEA_halfword_view_st *)(PNGSSBEA_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSSBEA()     ((volatile u32PNGSSBEA_word_view *)\
N(PNGSSBEA_REG__ ))
X#define pu32PNGSSBEA()     ((volatile u32PNGSSBEA_word_view *)(PNGSSBEA_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSSBEA_ADDR() (pst_bitPNGSSBEA() -> ADDR)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSSBEALL() (pst_u8PNGSSBEA() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSSBEALH() (pst_u8PNGSSBEA() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSSBEAHL() (pst_u8PNGSSBEA() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSSBEAHH() (pst_u8PNGSSBEA() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSSBEAL() (pst_u16PNGSSBEA() -> u16L)
N
N#define u16GetPNGSSBEAH() (pst_u16PNGSSBEA() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSSBEA()  (*pu32PNGSSBEA() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSSBEC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04020                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSSBEC_REG__       0xC0C04020U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   WR	:1; 	 /* 0..0  bit(s) R */
N  uint32_t   BTYPE	:1; 	 /* 1..1  bit(s) R */
N  uint32_t   BSIZE	:3; 	 /* 2..4  bit(s) R */
N  uint32_t   RTYPE	:2; 	 /* 5..6  bit(s) R */
N  uint32_t   RSRVD7	:1; 	 /* 7..7  bit(s) R */
N  uint32_t   BEN	:8; 	 /* 8..15  bit(s) R */
N  uint32_t   ID	:4; 	 /* 16..19  bit(s) R */
N  uint32_t   LEN	:4; 	 /* 20..23  bit(s) R */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGSSBEC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSSBEC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSSBEC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSSBEC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSSBEC()     ((volatile PNGSSBEC_bit_view_st *)\
N(PNGSSBEC_REG__ ))
X#define pst_bitPNGSSBEC()     ((volatile PNGSSBEC_bit_view_st *)(PNGSSBEC_REG__ ))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSSBEC()     ((volatile PNGSSBEC_byte_view_st *)\
N(PNGSSBEC_REG__ ))
X#define pst_u8PNGSSBEC()     ((volatile PNGSSBEC_byte_view_st *)(PNGSSBEC_REG__ ))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSSBEC()     ((volatile PNGSSBEC_halfword_view_st *)\
N(PNGSSBEC_REG__ ))
X#define pst_u16PNGSSBEC()     ((volatile PNGSSBEC_halfword_view_st *)(PNGSSBEC_REG__ ))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSSBEC()     ((volatile u32PNGSSBEC_word_view *)\
N(PNGSSBEC_REG__ ))
X#define pu32PNGSSBEC()     ((volatile u32PNGSSBEC_word_view *)(PNGSSBEC_REG__ ))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSSBEC_WR() (pst_bitPNGSSBEC() -> WR)            
N#define biGetPNGSSBEC_BTYPE() (pst_bitPNGSSBEC() -> BTYPE)            
N#define biGetPNGSSBEC_BSIZE() (pst_bitPNGSSBEC() -> BSIZE)            
N#define biGetPNGSSBEC_RTYPE() (pst_bitPNGSSBEC() -> RTYPE)            
N#define biGetPNGSSBEC_RSRVD7() (pst_bitPNGSSBEC() -> RSRVD7)            
N#define biGetPNGSSBEC_BEN() (pst_bitPNGSSBEC() -> BEN)            
N#define biGetPNGSSBEC_ID() (pst_bitPNGSSBEC() -> ID)            
N#define biGetPNGSSBEC_LEN() (pst_bitPNGSSBEC() -> LEN)            
N#define biGetPNGSSBEC_RSRVD24() (pst_bitPNGSSBEC() -> RSRVD24)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSSBECLL() (pst_u8PNGSSBEC() -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSSBECLH() (pst_u8PNGSSBEC() -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSSBECHL() (pst_u8PNGSSBEC() -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSSBECHH() (pst_u8PNGSSBEC() -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSSBECL() (pst_u16PNGSSBEC() -> u16L)
N
N#define u16GetPNGSSBECH() (pst_u16PNGSSBEC() -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSSBEC()  (*pu32PNGSSBEC() )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSCTRL                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04080                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSCTRL_REG__       0xC0C04080U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   TRIG	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   SRST	:1; 	 /* 1..1  bit(s) R/S */
N  uint32_t   LOOP	:1; 	 /* 2..2  bit(s) R/W */ 
N  uint32_t   RSRVD3	:29; 	 /* 3..31  bit(s) R */                    
N} PNGSCTRL_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSCTRL_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSCTRL_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSCTRL_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSCTRL(ch)     ((volatile PNGSCTRL_bit_view_st *)\
N(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSCTRL(ch)     ((volatile PNGSCTRL_bit_view_st *)(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSCTRL(ch)     ((volatile PNGSCTRL_byte_view_st *)\
N(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSCTRL(ch)     ((volatile PNGSCTRL_byte_view_st *)(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSCTRL(ch)     ((volatile PNGSCTRL_halfword_view_st *)\
N(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSCTRL(ch)     ((volatile PNGSCTRL_halfword_view_st *)(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSCTRL(ch)     ((volatile u32PNGSCTRL_word_view *)\
N(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSCTRL(ch)     ((volatile u32PNGSCTRL_word_view *)(PNGSCTRL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSCTRL_TRIG(ch) (pst_bitPNGSCTRL(ch) -> TRIG)
N#define vSetPNGSCTRL_TRIG(ch,ParValue)  (pst_bitPNGSCTRL(ch) -> TRIG=(ParValue))
N#define biGetPNGSCTRL_SRST(ch) (pst_bitPNGSCTRL(ch) -> SRST)
N#define vSetPNGSCTRL_SRST(ch) (pst_bitPNGSCTRL(ch) -> SRST=(1))
N#define biGetPNGSCTRL_LOOP(ch) (pst_bitPNGSCTRL(ch) -> LOOP)
N#define vSetPNGSCTRL_LOOP(ch,ParValue)  (pst_bitPNGSCTRL(ch) -> LOOP=(ParValue))            
N#define biGetPNGSCTRL_RSRVD3(ch) (pst_bitPNGSCTRL(ch) -> RSRVD3)
N            
N/* LL-struct byte access */
N#define vSetPNGSCTRLLL(ch,ParValue) (pst_u8PNGSCTRL(ch) -> u8LL = (ParValue))
N#define u8GetPNGSCTRLLL(ch) (pst_u8PNGSCTRL(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSCTRLLH(ch,ParValue) (pst_u8PNGSCTRL(ch) -> u8LH = (ParValue))
N#define u8GetPNGSCTRLLH(ch) (pst_u8PNGSCTRL(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSCTRLHL(ch,ParValue) (pst_u8PNGSCTRL(ch) -> u8HL = (ParValue))
N#define u8GetPNGSCTRLHL(ch) (pst_u8PNGSCTRL(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSCTRLHH(ch,ParValue) (pst_u8PNGSCTRL(ch) -> u8HH = (ParValue))
N#define u8GetPNGSCTRLHH(ch) (pst_u8PNGSCTRL(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSCTRLL(ch,ParValue) (pst_u16PNGSCTRL(ch) -> u16L = (ParValue))
N#define u16GetPNGSCTRLL(ch) (pst_u16PNGSCTRL(ch) -> u16L)
N#define vSetPNGSCTRLH(ch,ParValue) (pst_u16PNGSCTRL(ch) -> u16H = (ParValue))
N#define u16GetPNGSCTRLH(ch) (pst_u16PNGSCTRL(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSCTRL(ch,ParValue)  (*pu32PNGSCTRL(ch) = (ParValue))
N#define u32GetPNGSCTRL(ch)  (*pu32PNGSCTRL(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSOF                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04084                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSOF_REG__       0xC0C04084U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   FSEL	:3; 	 /* 0..2  bit(s) R/W */ 
N  uint32_t   RSRVD3	:29; 	 /* 3..31  bit(s) R */                    
N} PNGSOF_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSOF_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSOF_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSOF_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSOF(ch)     ((volatile PNGSOF_bit_view_st *)\
N(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSOF(ch)     ((volatile PNGSOF_bit_view_st *)(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSOF(ch)     ((volatile PNGSOF_byte_view_st *)\
N(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSOF(ch)     ((volatile PNGSOF_byte_view_st *)(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSOF(ch)     ((volatile PNGSOF_halfword_view_st *)\
N(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSOF(ch)     ((volatile PNGSOF_halfword_view_st *)(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSOF(ch)     ((volatile u32PNGSOF_word_view *)\
N(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSOF(ch)     ((volatile u32PNGSOF_word_view *)(PNGSOF_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSOF_FSEL(ch) (pst_bitPNGSOF(ch) -> FSEL)
N#define vSetPNGSOF_FSEL(ch,ParValue)  (pst_bitPNGSOF(ch) -> FSEL=(ParValue))            
N#define biGetPNGSOF_RSRVD3(ch) (pst_bitPNGSOF(ch) -> RSRVD3)
N            
N/* LL-struct byte access */
N#define vSetPNGSOFLL(ch,ParValue) (pst_u8PNGSOF(ch) -> u8LL = (ParValue))
N#define u8GetPNGSOFLL(ch) (pst_u8PNGSOF(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSOFLH(ch,ParValue) (pst_u8PNGSOF(ch) -> u8LH = (ParValue))
N#define u8GetPNGSOFLH(ch) (pst_u8PNGSOF(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSOFHL(ch,ParValue) (pst_u8PNGSOF(ch) -> u8HL = (ParValue))
N#define u8GetPNGSOFHL(ch) (pst_u8PNGSOF(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSOFHH(ch,ParValue) (pst_u8PNGSOF(ch) -> u8HH = (ParValue))
N#define u8GetPNGSOFHH(ch) (pst_u8PNGSOF(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSOFL(ch,ParValue) (pst_u16PNGSOF(ch) -> u16L = (ParValue))
N#define u16GetPNGSOFL(ch) (pst_u16PNGSOF(ch) -> u16L)
N#define vSetPNGSOFH(ch,ParValue) (pst_u16PNGSOF(ch) -> u16H = (ParValue))
N#define u16GetPNGSOFH(ch) (pst_u16PNGSOF(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSOF(ch,ParValue)  (*pu32PNGSOF(ch) = (ParValue))
N#define u32GetPNGSOF(ch)  (*pu32PNGSOF(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSSTAT                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04088                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSSTAT_REG__       0xC0C04088U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PHASE	:1; 	 /* 0..0  bit(s) R */
N  uint32_t   PTL	:1; 	 /* 1..1  bit(s) R */
N  uint32_t   CHUNK	:2; 	 /* 2..3  bit(s) R */
N  uint32_t   RSRVD4	:3; 	 /* 4..6  bit(s) R */
N  uint32_t   NPE	:9; 	 /* 7..15  bit(s) R */
N  uint32_t   NIDAT	:12; 	 /* 16..27  bit(s) R */ 
N  uint32_t   RSRVD28	:4; 	 /* 28..31  bit(s) R */                    
N} PNGSSTAT_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSSTAT_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSSTAT_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSSTAT_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSSTAT(ch)     ((volatile PNGSSTAT_bit_view_st *)\
N(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSSTAT(ch)     ((volatile PNGSSTAT_bit_view_st *)(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSSTAT(ch)     ((volatile PNGSSTAT_byte_view_st *)\
N(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSSTAT(ch)     ((volatile PNGSSTAT_byte_view_st *)(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSSTAT(ch)     ((volatile PNGSSTAT_halfword_view_st *)\
N(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSSTAT(ch)     ((volatile PNGSSTAT_halfword_view_st *)(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSSTAT(ch)     ((volatile u32PNGSSTAT_word_view *)\
N(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSSTAT(ch)     ((volatile u32PNGSSTAT_word_view *)(PNGSSTAT_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSSTAT_PHASE(ch) (pst_bitPNGSSTAT(ch) -> PHASE)            
N#define biGetPNGSSTAT_PTL(ch) (pst_bitPNGSSTAT(ch) -> PTL)            
N#define biGetPNGSSTAT_CHUNK(ch) (pst_bitPNGSSTAT(ch) -> CHUNK)            
N#define biGetPNGSSTAT_RSRVD4(ch) (pst_bitPNGSSTAT(ch) -> RSRVD4)            
N#define biGetPNGSSTAT_NPE(ch) (pst_bitPNGSSTAT(ch) -> NPE)            
N#define biGetPNGSSTAT_NIDAT(ch) (pst_bitPNGSSTAT(ch) -> NIDAT)            
N#define biGetPNGSSTAT_RSRVD28(ch) (pst_bitPNGSSTAT(ch) -> RSRVD28)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSSTATLL(ch) (pst_u8PNGSSTAT(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSSTATLH(ch) (pst_u8PNGSSTAT(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSSTATHL(ch) (pst_u8PNGSSTAT(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSSTATHH(ch) (pst_u8PNGSSTAT(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSSTATL(ch) (pst_u16PNGSSTAT(ch) -> u16L)
N
N#define u16GetPNGSSTATH(ch) (pst_u16PNGSSTAT(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSSTAT(ch)  (*pu32PNGSSTAT(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSIHDR                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C0408C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSIHDR_REG__       0xC0C0408CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   BITDEPTH	:5; 	 /* 0..4  bit(s) R */
N  uint32_t   CLRTYP	:3; 	 /* 5..7  bit(s) R */
N  uint32_t   CMPMTH	:8; 	 /* 8..15  bit(s) R */
N  uint32_t   FLTMTH	:8; 	 /* 16..23  bit(s) R */ 
N  uint32_t   INTMTH	:8; 	 /* 24..31  bit(s) R */                    
N} PNGSIHDR_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSIHDR_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSIHDR_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSIHDR_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSIHDR(ch)     ((volatile PNGSIHDR_bit_view_st *)\
N(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSIHDR(ch)     ((volatile PNGSIHDR_bit_view_st *)(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSIHDR(ch)     ((volatile PNGSIHDR_byte_view_st *)\
N(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSIHDR(ch)     ((volatile PNGSIHDR_byte_view_st *)(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSIHDR(ch)     ((volatile PNGSIHDR_halfword_view_st *)\
N(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSIHDR(ch)     ((volatile PNGSIHDR_halfword_view_st *)(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSIHDR(ch)     ((volatile u32PNGSIHDR_word_view *)\
N(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSIHDR(ch)     ((volatile u32PNGSIHDR_word_view *)(PNGSIHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSIHDR_BITDEPTH(ch) (pst_bitPNGSIHDR(ch) -> BITDEPTH)            
N#define biGetPNGSIHDR_CLRTYP(ch) (pst_bitPNGSIHDR(ch) -> CLRTYP)            
N#define biGetPNGSIHDR_CMPMTH(ch) (pst_bitPNGSIHDR(ch) -> CMPMTH)            
N#define biGetPNGSIHDR_FLTMTH(ch) (pst_bitPNGSIHDR(ch) -> FLTMTH)            
N#define biGetPNGSIHDR_INTMTH(ch) (pst_bitPNGSIHDR(ch) -> INTMTH)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSIHDRLL(ch) (pst_u8PNGSIHDR(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSIHDRLH(ch) (pst_u8PNGSIHDR(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSIHDRHL(ch) (pst_u8PNGSIHDR(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSIHDRHH(ch) (pst_u8PNGSIHDR(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSIHDRL(ch) (pst_u16PNGSIHDR(ch) -> u16L)
N
N#define u16GetPNGSIHDRH(ch) (pst_u16PNGSIHDR(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSIHDR(ch)  (*pu32PNGSIHDR(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSZHDR                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04090                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSZHDR_REG__       0xC0C04090U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   CM	:4; 	 /* 0..3  bit(s) R */
N  uint32_t   CINFO	:4; 	 /* 4..7  bit(s) R */
N  uint32_t   FCHECK	:5; 	 /* 8..12  bit(s) R */
N  uint32_t   FDICT	:1; 	 /* 13..13  bit(s) R */
N  uint32_t   FLEVEL	:2; 	 /* 14..15  bit(s) R */ 
N  uint32_t   RSRVD16	:16; 	 /* 16..31  bit(s) R */                    
N} PNGSZHDR_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSZHDR_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSZHDR_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSZHDR_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSZHDR(ch)     ((volatile PNGSZHDR_bit_view_st *)\
N(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSZHDR(ch)     ((volatile PNGSZHDR_bit_view_st *)(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSZHDR(ch)     ((volatile PNGSZHDR_byte_view_st *)\
N(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSZHDR(ch)     ((volatile PNGSZHDR_byte_view_st *)(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSZHDR(ch)     ((volatile PNGSZHDR_halfword_view_st *)\
N(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSZHDR(ch)     ((volatile PNGSZHDR_halfword_view_st *)(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSZHDR(ch)     ((volatile u32PNGSZHDR_word_view *)\
N(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSZHDR(ch)     ((volatile u32PNGSZHDR_word_view *)(PNGSZHDR_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSZHDR_CM(ch) (pst_bitPNGSZHDR(ch) -> CM)            
N#define biGetPNGSZHDR_CINFO(ch) (pst_bitPNGSZHDR(ch) -> CINFO)            
N#define biGetPNGSZHDR_FCHECK(ch) (pst_bitPNGSZHDR(ch) -> FCHECK)            
N#define biGetPNGSZHDR_FDICT(ch) (pst_bitPNGSZHDR(ch) -> FDICT)            
N#define biGetPNGSZHDR_FLEVEL(ch) (pst_bitPNGSZHDR(ch) -> FLEVEL)            
N#define biGetPNGSZHDR_RSRVD16(ch) (pst_bitPNGSZHDR(ch) -> RSRVD16)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSZHDRLL(ch) (pst_u8PNGSZHDR(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSZHDRLH(ch) (pst_u8PNGSZHDR(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSZHDRHL(ch) (pst_u8PNGSZHDR(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSZHDRHH(ch) (pst_u8PNGSZHDR(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSZHDRL(ch) (pst_u16PNGSZHDR(ch) -> u16L)
N
N#define u16GetPNGSZHDRH(ch) (pst_u16PNGSZHDR(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSZHDR(ch)  (*pu32PNGSZHDR(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSH                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04094                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSH_REG__       0xC0C04094U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   HEIGHT	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSH_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSH_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSH_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSH_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSH(ch)     ((volatile PNGSH_bit_view_st *)\
N(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSH(ch)     ((volatile PNGSH_bit_view_st *)(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSH(ch)     ((volatile PNGSH_byte_view_st *)\
N(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSH(ch)     ((volatile PNGSH_byte_view_st *)(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSH(ch)     ((volatile PNGSH_halfword_view_st *)\
N(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSH(ch)     ((volatile PNGSH_halfword_view_st *)(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSH(ch)     ((volatile u32PNGSH_word_view *)\
N(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSH(ch)     ((volatile u32PNGSH_word_view *)(PNGSH_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSH_HEIGHT(ch) (pst_bitPNGSH(ch) -> HEIGHT)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSHLL(ch) (pst_u8PNGSH(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSHLH(ch) (pst_u8PNGSH(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSHHL(ch) (pst_u8PNGSH(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSHHH(ch) (pst_u8PNGSH(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSHL(ch) (pst_u16PNGSH(ch) -> u16L)
N
N#define u16GetPNGSHH(ch) (pst_u16PNGSH(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSH(ch)  (*pu32PNGSH(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSW                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04098                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSW_REG__       0xC0C04098U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   WIDTH	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSW_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSW_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSW_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSW_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSW(ch)     ((volatile PNGSW_bit_view_st *)\
N(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSW(ch)     ((volatile PNGSW_bit_view_st *)(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSW(ch)     ((volatile PNGSW_byte_view_st *)\
N(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSW(ch)     ((volatile PNGSW_byte_view_st *)(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSW(ch)     ((volatile PNGSW_halfword_view_st *)\
N(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSW(ch)     ((volatile PNGSW_halfword_view_st *)(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSW(ch)     ((volatile u32PNGSW_word_view *)\
N(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSW(ch)     ((volatile u32PNGSW_word_view *)(PNGSW_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSW_WIDTH(ch) (pst_bitPNGSW(ch) -> WIDTH)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSWLL(ch) (pst_u8PNGSW(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSWLH(ch) (pst_u8PNGSW(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSWHL(ch) (pst_u8PNGSW(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSWHH(ch) (pst_u8PNGSW(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSWL(ch) (pst_u16PNGSW(ch) -> u16L)
N
N#define u16GetPNGSWH(ch) (pst_u16PNGSW(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSW(ch)  (*pu32PNGSW(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGDSFLVL                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C0409C                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGDSFLVL_REG__       0xC0C0409CU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   DSFLEVEL	:8; 	 /* 0..7  bit(s) R */ 
N  uint32_t   RSRVD8	:24; 	 /* 8..31  bit(s) R */                    
N} PNGDSFLVL_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGDSFLVL_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGDSFLVL_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGDSFLVL_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGDSFLVL(ch)     ((volatile PNGDSFLVL_bit_view_st *)\
N(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGDSFLVL(ch)     ((volatile PNGDSFLVL_bit_view_st *)(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGDSFLVL(ch)     ((volatile PNGDSFLVL_byte_view_st *)\
N(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGDSFLVL(ch)     ((volatile PNGDSFLVL_byte_view_st *)(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGDSFLVL(ch)     ((volatile PNGDSFLVL_halfword_view_st *)\
N(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGDSFLVL(ch)     ((volatile PNGDSFLVL_halfword_view_st *)(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGDSFLVL(ch)     ((volatile u32PNGDSFLVL_word_view *)\
N(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGDSFLVL(ch)     ((volatile u32PNGDSFLVL_word_view *)(PNGDSFLVL_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGDSFLVL_DSFLEVEL(ch) (pst_bitPNGDSFLVL(ch) -> DSFLEVEL)            
N#define biGetPNGDSFLVL_RSRVD8(ch) (pst_bitPNGDSFLVL(ch) -> RSRVD8)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGDSFLVLLL(ch) (pst_u8PNGDSFLVL(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGDSFLVLLH(ch) (pst_u8PNGDSFLVL(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGDSFLVLHL(ch) (pst_u8PNGDSFLVL(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGDSFLVLHH(ch) (pst_u8PNGDSFLVL(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGDSFLVLL(ch) (pst_u16PNGDSFLVL(ch) -> u16L)
N
N#define u16GetPNGDSFLVLH(ch) (pst_u16PNGDSFLVL(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGDSFLVL(ch)  (*pu32PNGDSFLVL(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSSBSA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040A0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSSBSA_REG__       0xC0C040A0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   SA	:32; 	 /* 0..31  bit(s) R/W */                    
N} PNGSSBSA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSSBSA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSSBSA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSSBSA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSSBSA(ch)     ((volatile PNGSSBSA_bit_view_st *)\
N(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSSBSA(ch)     ((volatile PNGSSBSA_bit_view_st *)(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSSBSA(ch)     ((volatile PNGSSBSA_byte_view_st *)\
N(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSSBSA(ch)     ((volatile PNGSSBSA_byte_view_st *)(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSSBSA(ch)     ((volatile PNGSSBSA_halfword_view_st *)\
N(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSSBSA(ch)     ((volatile PNGSSBSA_halfword_view_st *)(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSSBSA(ch)     ((volatile u32PNGSSBSA_word_view *)\
N(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSSBSA(ch)     ((volatile u32PNGSSBSA_word_view *)(PNGSSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSSBSA_SA(ch) (pst_bitPNGSSBSA(ch) -> SA)
N#define vSetPNGSSBSA_SA(ch,ParValue)  (pst_bitPNGSSBSA(ch) -> SA=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNGSSBSALL(ch,ParValue) (pst_u8PNGSSBSA(ch) -> u8LL = (ParValue))
N#define u8GetPNGSSBSALL(ch) (pst_u8PNGSSBSA(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSSBSALH(ch,ParValue) (pst_u8PNGSSBSA(ch) -> u8LH = (ParValue))
N#define u8GetPNGSSBSALH(ch) (pst_u8PNGSSBSA(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSSBSAHL(ch,ParValue) (pst_u8PNGSSBSA(ch) -> u8HL = (ParValue))
N#define u8GetPNGSSBSAHL(ch) (pst_u8PNGSSBSA(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSSBSAHH(ch,ParValue) (pst_u8PNGSSBSA(ch) -> u8HH = (ParValue))
N#define u8GetPNGSSBSAHH(ch) (pst_u8PNGSSBSA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSSBSAL(ch,ParValue) (pst_u16PNGSSBSA(ch) -> u16L = (ParValue))
N#define u16GetPNGSSBSAL(ch) (pst_u16PNGSSBSA(ch) -> u16L)
N#define vSetPNGSSBSAH(ch,ParValue) (pst_u16PNGSSBSA(ch) -> u16H = (ParValue))
N#define u16GetPNGSSBSAH(ch) (pst_u16PNGSSBSA(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSSBSA(ch,ParValue)  (*pu32PNGSSBSA(ch) = (ParValue))
N#define u32GetPNGSSBSA(ch)  (*pu32PNGSSBSA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSWBSA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040A4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSWBSA_REG__       0xC0C040A4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   SA	:32; 	 /* 0..31  bit(s) R/W */                    
N} PNGSWBSA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSWBSA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSWBSA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSWBSA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSWBSA(ch)     ((volatile PNGSWBSA_bit_view_st *)\
N(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSWBSA(ch)     ((volatile PNGSWBSA_bit_view_st *)(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSWBSA(ch)     ((volatile PNGSWBSA_byte_view_st *)\
N(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSWBSA(ch)     ((volatile PNGSWBSA_byte_view_st *)(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSWBSA(ch)     ((volatile PNGSWBSA_halfword_view_st *)\
N(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSWBSA(ch)     ((volatile PNGSWBSA_halfword_view_st *)(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSWBSA(ch)     ((volatile u32PNGSWBSA_word_view *)\
N(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSWBSA(ch)     ((volatile u32PNGSWBSA_word_view *)(PNGSWBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSWBSA_SA(ch) (pst_bitPNGSWBSA(ch) -> SA)
N#define vSetPNGSWBSA_SA(ch,ParValue)  (pst_bitPNGSWBSA(ch) -> SA=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNGSWBSALL(ch,ParValue) (pst_u8PNGSWBSA(ch) -> u8LL = (ParValue))
N#define u8GetPNGSWBSALL(ch) (pst_u8PNGSWBSA(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSWBSALH(ch,ParValue) (pst_u8PNGSWBSA(ch) -> u8LH = (ParValue))
N#define u8GetPNGSWBSALH(ch) (pst_u8PNGSWBSA(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSWBSAHL(ch,ParValue) (pst_u8PNGSWBSA(ch) -> u8HL = (ParValue))
N#define u8GetPNGSWBSAHL(ch) (pst_u8PNGSWBSA(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSWBSAHH(ch,ParValue) (pst_u8PNGSWBSA(ch) -> u8HH = (ParValue))
N#define u8GetPNGSWBSAHH(ch) (pst_u8PNGSWBSA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSWBSAL(ch,ParValue) (pst_u16PNGSWBSA(ch) -> u16L = (ParValue))
N#define u16GetPNGSWBSAL(ch) (pst_u16PNGSWBSA(ch) -> u16L)
N#define vSetPNGSWBSAH(ch,ParValue) (pst_u16PNGSWBSA(ch) -> u16H = (ParValue))
N#define u16GetPNGSWBSAH(ch) (pst_u16PNGSWBSA(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSWBSA(ch,ParValue)  (*pu32PNGSWBSA(ch) = (ParValue))
N#define u32GetPNGSWBSA(ch)  (*pu32PNGSWBSA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGFSBSA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040A8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGFSBSA_REG__       0xC0C040A8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   SA	:32; 	 /* 0..31  bit(s) R/W */                    
N} PNGFSBSA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGFSBSA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGFSBSA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGFSBSA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGFSBSA(ch)     ((volatile PNGFSBSA_bit_view_st *)\
N(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGFSBSA(ch)     ((volatile PNGFSBSA_bit_view_st *)(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGFSBSA(ch)     ((volatile PNGFSBSA_byte_view_st *)\
N(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGFSBSA(ch)     ((volatile PNGFSBSA_byte_view_st *)(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGFSBSA(ch)     ((volatile PNGFSBSA_halfword_view_st *)\
N(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGFSBSA(ch)     ((volatile PNGFSBSA_halfword_view_st *)(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGFSBSA(ch)     ((volatile u32PNGFSBSA_word_view *)\
N(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGFSBSA(ch)     ((volatile u32PNGFSBSA_word_view *)(PNGFSBSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGFSBSA_SA(ch) (pst_bitPNGFSBSA(ch) -> SA)
N#define vSetPNGFSBSA_SA(ch,ParValue)  (pst_bitPNGFSBSA(ch) -> SA=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNGFSBSALL(ch,ParValue) (pst_u8PNGFSBSA(ch) -> u8LL = (ParValue))
N#define u8GetPNGFSBSALL(ch) (pst_u8PNGFSBSA(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGFSBSALH(ch,ParValue) (pst_u8PNGFSBSA(ch) -> u8LH = (ParValue))
N#define u8GetPNGFSBSALH(ch) (pst_u8PNGFSBSA(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGFSBSAHL(ch,ParValue) (pst_u8PNGFSBSA(ch) -> u8HL = (ParValue))
N#define u8GetPNGFSBSAHL(ch) (pst_u8PNGFSBSA(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGFSBSAHH(ch,ParValue) (pst_u8PNGFSBSA(ch) -> u8HH = (ParValue))
N#define u8GetPNGFSBSAHH(ch) (pst_u8PNGFSBSA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGFSBSAL(ch,ParValue) (pst_u16PNGFSBSA(ch) -> u16L = (ParValue))
N#define u16GetPNGFSBSAL(ch) (pst_u16PNGFSBSA(ch) -> u16L)
N#define vSetPNGFSBSAH(ch,ParValue) (pst_u16PNGFSBSA(ch) -> u16H = (ParValue))
N#define u16GetPNGFSBSAH(ch) (pst_u16PNGFSBSA(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGFSBSA(ch,ParValue)  (*pu32PNGFSBSA(ch) = (ParValue))
N#define u32GetPNGFSBSA(ch)  (*pu32PNGFSBSA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGDSVSA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040AC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGDSVSA_REG__       0xC0C040ACU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   SA	:32; 	 /* 0..31  bit(s) R/W */                    
N} PNGDSVSA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGDSVSA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGDSVSA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGDSVSA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGDSVSA(ch)     ((volatile PNGDSVSA_bit_view_st *)\
N(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGDSVSA(ch)     ((volatile PNGDSVSA_bit_view_st *)(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGDSVSA(ch)     ((volatile PNGDSVSA_byte_view_st *)\
N(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGDSVSA(ch)     ((volatile PNGDSVSA_byte_view_st *)(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGDSVSA(ch)     ((volatile PNGDSVSA_halfword_view_st *)\
N(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGDSVSA(ch)     ((volatile PNGDSVSA_halfword_view_st *)(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGDSVSA(ch)     ((volatile u32PNGDSVSA_word_view *)\
N(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGDSVSA(ch)     ((volatile u32PNGDSVSA_word_view *)(PNGDSVSA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGDSVSA_SA(ch) (pst_bitPNGDSVSA(ch) -> SA)
N#define vSetPNGDSVSA_SA(ch,ParValue)  (pst_bitPNGDSVSA(ch) -> SA=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNGDSVSALL(ch,ParValue) (pst_u8PNGDSVSA(ch) -> u8LL = (ParValue))
N#define u8GetPNGDSVSALL(ch) (pst_u8PNGDSVSA(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGDSVSALH(ch,ParValue) (pst_u8PNGDSVSA(ch) -> u8LH = (ParValue))
N#define u8GetPNGDSVSALH(ch) (pst_u8PNGDSVSA(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGDSVSAHL(ch,ParValue) (pst_u8PNGDSVSA(ch) -> u8HL = (ParValue))
N#define u8GetPNGDSVSAHL(ch) (pst_u8PNGDSVSA(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGDSVSAHH(ch,ParValue) (pst_u8PNGDSVSA(ch) -> u8HH = (ParValue))
N#define u8GetPNGDSVSAHH(ch) (pst_u8PNGDSVSA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGDSVSAL(ch,ParValue) (pst_u16PNGDSVSA(ch) -> u16L = (ParValue))
N#define u16GetPNGDSVSAL(ch) (pst_u16PNGDSVSA(ch) -> u16L)
N#define vSetPNGDSVSAH(ch,ParValue) (pst_u16PNGDSVSA(ch) -> u16H = (ParValue))
N#define u16GetPNGDSVSAH(ch) (pst_u16PNGDSVSA(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGDSVSA(ch,ParValue)  (*pu32PNGDSVSA(ch) = (ParValue))
N#define u32GetPNGDSVSA(ch)  (*pu32PNGDSVSA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGDSVEA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040B0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGDSVEA_REG__       0xC0C040B0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   EA	:32; 	 /* 0..31  bit(s) R/W */                    
N} PNGDSVEA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGDSVEA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGDSVEA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGDSVEA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGDSVEA(ch)     ((volatile PNGDSVEA_bit_view_st *)\
N(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGDSVEA(ch)     ((volatile PNGDSVEA_bit_view_st *)(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGDSVEA(ch)     ((volatile PNGDSVEA_byte_view_st *)\
N(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGDSVEA(ch)     ((volatile PNGDSVEA_byte_view_st *)(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGDSVEA(ch)     ((volatile PNGDSVEA_halfword_view_st *)\
N(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGDSVEA(ch)     ((volatile PNGDSVEA_halfword_view_st *)(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGDSVEA(ch)     ((volatile u32PNGDSVEA_word_view *)\
N(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGDSVEA(ch)     ((volatile u32PNGDSVEA_word_view *)(PNGDSVEA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGDSVEA_EA(ch) (pst_bitPNGDSVEA(ch) -> EA)
N#define vSetPNGDSVEA_EA(ch,ParValue)  (pst_bitPNGDSVEA(ch) -> EA=(ParValue))
N            
N/* LL-struct byte access */
N#define vSetPNGDSVEALL(ch,ParValue) (pst_u8PNGDSVEA(ch) -> u8LL = (ParValue))
N#define u8GetPNGDSVEALL(ch) (pst_u8PNGDSVEA(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGDSVEALH(ch,ParValue) (pst_u8PNGDSVEA(ch) -> u8LH = (ParValue))
N#define u8GetPNGDSVEALH(ch) (pst_u8PNGDSVEA(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGDSVEAHL(ch,ParValue) (pst_u8PNGDSVEA(ch) -> u8HL = (ParValue))
N#define u8GetPNGDSVEAHL(ch) (pst_u8PNGDSVEA(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGDSVEAHH(ch,ParValue) (pst_u8PNGDSVEA(ch) -> u8HH = (ParValue))
N#define u8GetPNGDSVEAHH(ch) (pst_u8PNGDSVEA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGDSVEAL(ch,ParValue) (pst_u16PNGDSVEA(ch) -> u16L = (ParValue))
N#define u16GetPNGDSVEAL(ch) (pst_u16PNGDSVEA(ch) -> u16L)
N#define vSetPNGDSVEAH(ch,ParValue) (pst_u16PNGDSVEA(ch) -> u16H = (ParValue))
N#define u16GetPNGDSVEAH(ch) (pst_u16PNGDSVEA(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGDSVEA(ch,ParValue)  (*pu32PNGDSVEA(ch) = (ParValue))
N#define u32GetPNGDSVEA(ch)  (*pu32PNGDSVEA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSSBCA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040B4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSSBCA_REG__       0xC0C040B4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   CA	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSSBCA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSSBCA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSSBCA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSSBCA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSSBCA(ch)     ((volatile PNGSSBCA_bit_view_st *)\
N(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSSBCA(ch)     ((volatile PNGSSBCA_bit_view_st *)(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSSBCA(ch)     ((volatile PNGSSBCA_byte_view_st *)\
N(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSSBCA(ch)     ((volatile PNGSSBCA_byte_view_st *)(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSSBCA(ch)     ((volatile PNGSSBCA_halfword_view_st *)\
N(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSSBCA(ch)     ((volatile PNGSSBCA_halfword_view_st *)(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSSBCA(ch)     ((volatile u32PNGSSBCA_word_view *)\
N(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSSBCA(ch)     ((volatile u32PNGSSBCA_word_view *)(PNGSSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSSBCA_CA(ch) (pst_bitPNGSSBCA(ch) -> CA)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSSBCALL(ch) (pst_u8PNGSSBCA(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSSBCALH(ch) (pst_u8PNGSSBCA(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSSBCAHL(ch) (pst_u8PNGSSBCA(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSSBCAHH(ch) (pst_u8PNGSSBCA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSSBCAL(ch) (pst_u16PNGSSBCA(ch) -> u16L)
N
N#define u16GetPNGSSBCAH(ch) (pst_u16PNGSSBCA(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSSBCA(ch)  (*pu32PNGSSBCA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSWBCA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040B8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSWBCA_REG__       0xC0C040B8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   CA	:32; 	 /* 0..31  bit(s) R */                    
N} PNGSWBCA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSWBCA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSWBCA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSWBCA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSWBCA(ch)     ((volatile PNGSWBCA_bit_view_st *)\
N(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSWBCA(ch)     ((volatile PNGSWBCA_bit_view_st *)(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSWBCA(ch)     ((volatile PNGSWBCA_byte_view_st *)\
N(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSWBCA(ch)     ((volatile PNGSWBCA_byte_view_st *)(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSWBCA(ch)     ((volatile PNGSWBCA_halfword_view_st *)\
N(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSWBCA(ch)     ((volatile PNGSWBCA_halfword_view_st *)(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSWBCA(ch)     ((volatile u32PNGSWBCA_word_view *)\
N(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSWBCA(ch)     ((volatile u32PNGSWBCA_word_view *)(PNGSWBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSWBCA_CA(ch) (pst_bitPNGSWBCA(ch) -> CA)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSWBCALL(ch) (pst_u8PNGSWBCA(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSWBCALH(ch) (pst_u8PNGSWBCA(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSWBCAHL(ch) (pst_u8PNGSWBCA(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSWBCAHH(ch) (pst_u8PNGSWBCA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSWBCAL(ch) (pst_u16PNGSWBCA(ch) -> u16L)
N
N#define u16GetPNGSWBCAH(ch) (pst_u16PNGSWBCA(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSWBCA(ch)  (*pu32PNGSWBCA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGFSBCA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040BC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGFSBCA_REG__       0xC0C040BCU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   CA	:32; 	 /* 0..31  bit(s) R */                    
N} PNGFSBCA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGFSBCA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGFSBCA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGFSBCA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGFSBCA(ch)     ((volatile PNGFSBCA_bit_view_st *)\
N(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGFSBCA(ch)     ((volatile PNGFSBCA_bit_view_st *)(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGFSBCA(ch)     ((volatile PNGFSBCA_byte_view_st *)\
N(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGFSBCA(ch)     ((volatile PNGFSBCA_byte_view_st *)(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGFSBCA(ch)     ((volatile PNGFSBCA_halfword_view_st *)\
N(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGFSBCA(ch)     ((volatile PNGFSBCA_halfword_view_st *)(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGFSBCA(ch)     ((volatile u32PNGFSBCA_word_view *)\
N(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGFSBCA(ch)     ((volatile u32PNGFSBCA_word_view *)(PNGFSBCA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGFSBCA_CA(ch) (pst_bitPNGFSBCA(ch) -> CA)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGFSBCALL(ch) (pst_u8PNGFSBCA(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGFSBCALH(ch) (pst_u8PNGFSBCA(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGFSBCAHL(ch) (pst_u8PNGFSBCA(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGFSBCAHH(ch) (pst_u8PNGFSBCA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGFSBCAL(ch) (pst_u16PNGFSBCA(ch) -> u16L)
N
N#define u16GetPNGFSBCAH(ch) (pst_u16PNGFSBCA(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGFSBCA(ch)  (*pu32PNGFSBCA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGDSCVA                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040C0                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGDSCVA_REG__       0xC0C040C0U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{ 
N  uint32_t   CA	:32; 	 /* 0..31  bit(s) R */                    
N} PNGDSCVA_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGDSCVA_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGDSCVA_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGDSCVA_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGDSCVA(ch)     ((volatile PNGDSCVA_bit_view_st *)\
N(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGDSCVA(ch)     ((volatile PNGDSCVA_bit_view_st *)(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGDSCVA(ch)     ((volatile PNGDSCVA_byte_view_st *)\
N(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGDSCVA(ch)     ((volatile PNGDSCVA_byte_view_st *)(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGDSCVA(ch)     ((volatile PNGDSCVA_halfword_view_st *)\
N(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGDSCVA(ch)     ((volatile PNGDSCVA_halfword_view_st *)(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGDSCVA(ch)     ((volatile u32PNGDSCVA_word_view *)\
N(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGDSCVA(ch)     ((volatile u32PNGDSCVA_word_view *)(PNGDSCVA_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGDSCVA_CA(ch) (pst_bitPNGDSCVA(ch) -> CA)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGDSCVALL(ch) (pst_u8PNGDSCVA(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGDSCVALH(ch) (pst_u8PNGDSCVA(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGDSCVAHL(ch) (pst_u8PNGDSCVA(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGDSCVAHH(ch) (pst_u8PNGDSCVA(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGDSCVAL(ch) (pst_u16PNGDSCVA(ch) -> u16L)
N
N#define u16GetPNGDSCVAH(ch) (pst_u16PNGDSCVA(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGDSCVA(ch)  (*pu32PNGDSCVA(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSINTE                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040C4                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSINTE_REG__       0xC0C040C4U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   BJMPEIE	:1; 	 /* 0..0  bit(s) R/W */
N  uint32_t   UFMTEIE	:1; 	 /* 1..1  bit(s) R/W */
N  uint32_t   OOCEIE	:1; 	 /* 2..2  bit(s) R/W */
N  uint32_t   CHSEIE	:1; 	 /* 3..3  bit(s) R/W */
N  uint32_t   EYEOSEIE	:1; 	 /* 4..4  bit(s) R/W */
N  uint32_t   NOEOSEIE	:1; 	 /* 5..5  bit(s) R/W */
N  uint32_t   CMPEIE	:1; 	 /* 6..6  bit(s) R/W */
N  uint32_t   BTYPEEIE	:1; 	 /* 7..7  bit(s) R/W */
N  uint32_t   DISTEIE	:1; 	 /* 8..8  bit(s) R/W */
N  uint32_t   NCBSEIE	:1; 	 /* 9..9  bit(s) R/W */
N  uint32_t   DECEIE	:1; 	 /* 10..10  bit(s) R/W */
N  uint32_t   RSRVD11	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   FJMPWIE	:1; 	 /* 16..16  bit(s) R/W */
N  uint32_t   UCHNKWIE	:1; 	 /* 17..17  bit(s) R/W */
N  uint32_t   PDICTWIE	:1; 	 /* 18..18  bit(s) R/W */
N  uint32_t   ULLWIE	:1; 	 /* 19..19  bit(s) R/W */
N  uint32_t   UDISTWIE	:1; 	 /* 20..20  bit(s) R/W */
N  uint32_t   OFCWIE	:1; 	 /* 21..21  bit(s) R/W */
N  uint32_t   RSRVD22	:2; 	 /* 22..23  bit(s) R */
N  uint32_t   IHDRDIE	:1; 	 /* 24..24  bit(s) R/W */
N  uint32_t   PLTEDIE	:1; 	 /* 25..25  bit(s) R/W */
N  uint32_t   IDATDIE	:1; 	 /* 26..26  bit(s) R/W */
N  uint32_t   IENDDIE	:1; 	 /* 27..27  bit(s) R/W */
N  uint32_t   DCDSIE	:1; 	 /* 28..28  bit(s) R/W */
N  uint32_t   SIDLEIE	:1; 	 /* 29..29  bit(s) R/W */
N  uint32_t   DSFFULLIE	:1; 	 /* 30..30  bit(s) R/W */ 
N  uint32_t   RSRVD31	:1; 	 /* 31..31  bit(s) R */                    
N} PNGSINTE_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSINTE_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSINTE_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSINTE_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSINTE(ch)     ((volatile PNGSINTE_bit_view_st *)\
N(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSINTE(ch)     ((volatile PNGSINTE_bit_view_st *)(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSINTE(ch)     ((volatile PNGSINTE_byte_view_st *)\
N(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSINTE(ch)     ((volatile PNGSINTE_byte_view_st *)(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSINTE(ch)     ((volatile PNGSINTE_halfword_view_st *)\
N(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSINTE(ch)     ((volatile PNGSINTE_halfword_view_st *)(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSINTE(ch)     ((volatile u32PNGSINTE_word_view *)\
N(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSINTE(ch)     ((volatile u32PNGSINTE_word_view *)(PNGSINTE_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSINTE_BJMPEIE(ch) (pst_bitPNGSINTE(ch) -> BJMPEIE)
N#define vSetPNGSINTE_BJMPEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> BJMPEIE=(ParValue))
N#define biGetPNGSINTE_UFMTEIE(ch) (pst_bitPNGSINTE(ch) -> UFMTEIE)
N#define vSetPNGSINTE_UFMTEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> UFMTEIE=(ParValue))
N#define biGetPNGSINTE_OOCEIE(ch) (pst_bitPNGSINTE(ch) -> OOCEIE)
N#define vSetPNGSINTE_OOCEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> OOCEIE=(ParValue))
N#define biGetPNGSINTE_CHSEIE(ch) (pst_bitPNGSINTE(ch) -> CHSEIE)
N#define vSetPNGSINTE_CHSEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> CHSEIE=(ParValue))
N#define biGetPNGSINTE_EYEOSEIE(ch) (pst_bitPNGSINTE(ch) -> EYEOSEIE)
N#define vSetPNGSINTE_EYEOSEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> EYEOSEIE=(ParValue))
N#define biGetPNGSINTE_NOEOSEIE(ch) (pst_bitPNGSINTE(ch) -> NOEOSEIE)
N#define vSetPNGSINTE_NOEOSEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> NOEOSEIE=(ParValue))
N#define biGetPNGSINTE_CMPEIE(ch) (pst_bitPNGSINTE(ch) -> CMPEIE)
N#define vSetPNGSINTE_CMPEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> CMPEIE=(ParValue))
N#define biGetPNGSINTE_BTYPEEIE(ch) (pst_bitPNGSINTE(ch) -> BTYPEEIE)
N#define vSetPNGSINTE_BTYPEEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> BTYPEEIE=(ParValue))
N#define biGetPNGSINTE_DISTEIE(ch) (pst_bitPNGSINTE(ch) -> DISTEIE)
N#define vSetPNGSINTE_DISTEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> DISTEIE=(ParValue))
N#define biGetPNGSINTE_NCBSEIE(ch) (pst_bitPNGSINTE(ch) -> NCBSEIE)
N#define vSetPNGSINTE_NCBSEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> NCBSEIE=(ParValue))
N#define biGetPNGSINTE_DECEIE(ch) (pst_bitPNGSINTE(ch) -> DECEIE)
N#define vSetPNGSINTE_DECEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> DECEIE=(ParValue))            
N#define biGetPNGSINTE_RSRVD11(ch) (pst_bitPNGSINTE(ch) -> RSRVD11)
N#define biGetPNGSINTE_FJMPWIE(ch) (pst_bitPNGSINTE(ch) -> FJMPWIE)
N#define vSetPNGSINTE_FJMPWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> FJMPWIE=(ParValue))
N#define biGetPNGSINTE_UCHNKWIE(ch) (pst_bitPNGSINTE(ch) -> UCHNKWIE)
N#define vSetPNGSINTE_UCHNKWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> UCHNKWIE=(ParValue))
N#define biGetPNGSINTE_PDICTWIE(ch) (pst_bitPNGSINTE(ch) -> PDICTWIE)
N#define vSetPNGSINTE_PDICTWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> PDICTWIE=(ParValue))
N#define biGetPNGSINTE_ULLWIE(ch) (pst_bitPNGSINTE(ch) -> ULLWIE)
N#define vSetPNGSINTE_ULLWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> ULLWIE=(ParValue))
N#define biGetPNGSINTE_UDISTWIE(ch) (pst_bitPNGSINTE(ch) -> UDISTWIE)
N#define vSetPNGSINTE_UDISTWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> UDISTWIE=(ParValue))
N#define biGetPNGSINTE_OFCWIE(ch) (pst_bitPNGSINTE(ch) -> OFCWIE)
N#define vSetPNGSINTE_OFCWIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> OFCWIE=(ParValue))            
N#define biGetPNGSINTE_RSRVD22(ch) (pst_bitPNGSINTE(ch) -> RSRVD22)
N#define biGetPNGSINTE_IHDRDIE(ch) (pst_bitPNGSINTE(ch) -> IHDRDIE)
N#define vSetPNGSINTE_IHDRDIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> IHDRDIE=(ParValue))
N#define biGetPNGSINTE_PLTEDIE(ch) (pst_bitPNGSINTE(ch) -> PLTEDIE)
N#define vSetPNGSINTE_PLTEDIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> PLTEDIE=(ParValue))
N#define biGetPNGSINTE_IDATDIE(ch) (pst_bitPNGSINTE(ch) -> IDATDIE)
N#define vSetPNGSINTE_IDATDIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> IDATDIE=(ParValue))
N#define biGetPNGSINTE_IENDDIE(ch) (pst_bitPNGSINTE(ch) -> IENDDIE)
N#define vSetPNGSINTE_IENDDIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> IENDDIE=(ParValue))
N#define biGetPNGSINTE_DCDSIE(ch) (pst_bitPNGSINTE(ch) -> DCDSIE)
N#define vSetPNGSINTE_DCDSIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> DCDSIE=(ParValue))
N#define biGetPNGSINTE_SIDLEIE(ch) (pst_bitPNGSINTE(ch) -> SIDLEIE)
N#define vSetPNGSINTE_SIDLEIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> SIDLEIE=(ParValue))
N#define biGetPNGSINTE_DSFFULLIE(ch) (pst_bitPNGSINTE(ch) -> DSFFULLIE)
N#define vSetPNGSINTE_DSFFULLIE(ch,ParValue)  (pst_bitPNGSINTE(ch) -> DSFFULLIE=(ParValue))            
N#define biGetPNGSINTE_RSRVD31(ch) (pst_bitPNGSINTE(ch) -> RSRVD31)
N            
N/* LL-struct byte access */
N#define vSetPNGSINTELL(ch,ParValue) (pst_u8PNGSINTE(ch) -> u8LL = (ParValue))
N#define u8GetPNGSINTELL(ch) (pst_u8PNGSINTE(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSINTELH(ch,ParValue) (pst_u8PNGSINTE(ch) -> u8LH = (ParValue))
N#define u8GetPNGSINTELH(ch) (pst_u8PNGSINTE(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSINTEHL(ch,ParValue) (pst_u8PNGSINTE(ch) -> u8HL = (ParValue))
N#define u8GetPNGSINTEHL(ch) (pst_u8PNGSINTE(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSINTEHH(ch,ParValue) (pst_u8PNGSINTE(ch) -> u8HH = (ParValue))
N#define u8GetPNGSINTEHH(ch) (pst_u8PNGSINTE(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSINTEL(ch,ParValue) (pst_u16PNGSINTE(ch) -> u16L = (ParValue))
N#define u16GetPNGSINTEL(ch) (pst_u16PNGSINTE(ch) -> u16L)
N#define vSetPNGSINTEH(ch,ParValue) (pst_u16PNGSINTE(ch) -> u16H = (ParValue))
N#define u16GetPNGSINTEH(ch) (pst_u16PNGSINTE(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSINTE(ch,ParValue)  (*pu32PNGSINTE(ch) = (ParValue))
N#define u32GetPNGSINTE(ch)  (*pu32PNGSINTE(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSINTS                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040C8                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSINTS_REG__       0xC0C040C8U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   BJMPEIS	:1; 	 /* 0..0  bit(s) R */
N  uint32_t   UFMTEIS	:1; 	 /* 1..1  bit(s) R */
N  uint32_t   OOCEIS	:1; 	 /* 2..2  bit(s) R */
N  uint32_t   CHSEIS	:1; 	 /* 3..3  bit(s) R */
N  uint32_t   EYEOSEIS	:1; 	 /* 4..4  bit(s) R */
N  uint32_t   NOEOSEIS	:1; 	 /* 5..5  bit(s) R */
N  uint32_t   CMPEIS	:1; 	 /* 6..6  bit(s) R */
N  uint32_t   BTYPEEIS	:1; 	 /* 7..7  bit(s) R */
N  uint32_t   DISTEIS	:1; 	 /* 8..8  bit(s) R */
N  uint32_t   NCBSEIS	:1; 	 /* 9..9  bit(s) R */
N  uint32_t   DECEIS	:1; 	 /* 10..10  bit(s) R */
N  uint32_t   RSRVD11	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   FJMPWIS	:1; 	 /* 16..16  bit(s) R */
N  uint32_t   UCHNKWIS	:1; 	 /* 17..17  bit(s) R */
N  uint32_t   PDICTWIS	:1; 	 /* 18..18  bit(s) R */
N  uint32_t   ULLWIS	:1; 	 /* 19..19  bit(s) R */
N  uint32_t   UDISTWIS	:1; 	 /* 20..20  bit(s) R */
N  uint32_t   OFCWIS	:1; 	 /* 21..21  bit(s) R */
N  uint32_t   RSRVD22	:2; 	 /* 22..23  bit(s) R */
N  uint32_t   IHDRDIS	:1; 	 /* 24..24  bit(s) R */
N  uint32_t   PLTEDIS	:1; 	 /* 25..25  bit(s) R */
N  uint32_t   IDATDIS	:1; 	 /* 26..26  bit(s) R */
N  uint32_t   IENDDIS	:1; 	 /* 27..27  bit(s) R */
N  uint32_t   DCDSIS	:1; 	 /* 28..28  bit(s) R */
N  uint32_t   SIDLEIS	:1; 	 /* 29..29  bit(s) R */
N  uint32_t   DSFFULLIS	:1; 	 /* 30..30  bit(s) R */ 
N  uint32_t   RSRVD31	:1; 	 /* 31..31  bit(s) R */                    
N} PNGSINTS_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSINTS_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSINTS_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSINTS_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSINTS(ch)     ((volatile PNGSINTS_bit_view_st *)\
N(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSINTS(ch)     ((volatile PNGSINTS_bit_view_st *)(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSINTS(ch)     ((volatile PNGSINTS_byte_view_st *)\
N(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSINTS(ch)     ((volatile PNGSINTS_byte_view_st *)(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSINTS(ch)     ((volatile PNGSINTS_halfword_view_st *)\
N(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSINTS(ch)     ((volatile PNGSINTS_halfword_view_st *)(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSINTS(ch)     ((volatile u32PNGSINTS_word_view *)\
N(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSINTS(ch)     ((volatile u32PNGSINTS_word_view *)(PNGSINTS_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */            
N#define biGetPNGSINTS_BJMPEIS(ch) (pst_bitPNGSINTS(ch) -> BJMPEIS)            
N#define biGetPNGSINTS_UFMTEIS(ch) (pst_bitPNGSINTS(ch) -> UFMTEIS)            
N#define biGetPNGSINTS_OOCEIS(ch) (pst_bitPNGSINTS(ch) -> OOCEIS)            
N#define biGetPNGSINTS_CHSEIS(ch) (pst_bitPNGSINTS(ch) -> CHSEIS)            
N#define biGetPNGSINTS_EYEOSEIS(ch) (pst_bitPNGSINTS(ch) -> EYEOSEIS)            
N#define biGetPNGSINTS_NOEOSEIS(ch) (pst_bitPNGSINTS(ch) -> NOEOSEIS)            
N#define biGetPNGSINTS_CMPEIS(ch) (pst_bitPNGSINTS(ch) -> CMPEIS)            
N#define biGetPNGSINTS_BTYPEEIS(ch) (pst_bitPNGSINTS(ch) -> BTYPEEIS)            
N#define biGetPNGSINTS_DISTEIS(ch) (pst_bitPNGSINTS(ch) -> DISTEIS)            
N#define biGetPNGSINTS_NCBSEIS(ch) (pst_bitPNGSINTS(ch) -> NCBSEIS)            
N#define biGetPNGSINTS_DECEIS(ch) (pst_bitPNGSINTS(ch) -> DECEIS)            
N#define biGetPNGSINTS_RSRVD11(ch) (pst_bitPNGSINTS(ch) -> RSRVD11)            
N#define biGetPNGSINTS_FJMPWIS(ch) (pst_bitPNGSINTS(ch) -> FJMPWIS)            
N#define biGetPNGSINTS_UCHNKWIS(ch) (pst_bitPNGSINTS(ch) -> UCHNKWIS)            
N#define biGetPNGSINTS_PDICTWIS(ch) (pst_bitPNGSINTS(ch) -> PDICTWIS)            
N#define biGetPNGSINTS_ULLWIS(ch) (pst_bitPNGSINTS(ch) -> ULLWIS)            
N#define biGetPNGSINTS_UDISTWIS(ch) (pst_bitPNGSINTS(ch) -> UDISTWIS)            
N#define biGetPNGSINTS_OFCWIS(ch) (pst_bitPNGSINTS(ch) -> OFCWIS)            
N#define biGetPNGSINTS_RSRVD22(ch) (pst_bitPNGSINTS(ch) -> RSRVD22)            
N#define biGetPNGSINTS_IHDRDIS(ch) (pst_bitPNGSINTS(ch) -> IHDRDIS)            
N#define biGetPNGSINTS_PLTEDIS(ch) (pst_bitPNGSINTS(ch) -> PLTEDIS)            
N#define biGetPNGSINTS_IDATDIS(ch) (pst_bitPNGSINTS(ch) -> IDATDIS)            
N#define biGetPNGSINTS_IENDDIS(ch) (pst_bitPNGSINTS(ch) -> IENDDIS)            
N#define biGetPNGSINTS_DCDSIS(ch) (pst_bitPNGSINTS(ch) -> DCDSIS)            
N#define biGetPNGSINTS_SIDLEIS(ch) (pst_bitPNGSINTS(ch) -> SIDLEIS)            
N#define biGetPNGSINTS_DSFFULLIS(ch) (pst_bitPNGSINTS(ch) -> DSFFULLIS)            
N#define biGetPNGSINTS_RSRVD31(ch) (pst_bitPNGSINTS(ch) -> RSRVD31)
N            
N/* LL-struct byte access */
N
N#define u8GetPNGSINTSLL(ch) (pst_u8PNGSINTS(ch) -> u8LL)
N/* LH-struct byte access */
N
N#define u8GetPNGSINTSLH(ch) (pst_u8PNGSINTS(ch) -> u8LH)
N/* HL-struct byte access */
N
N#define u8GetPNGSINTSHL(ch) (pst_u8PNGSINTS(ch) -> u8HL)
N/* HH-struct byte access */
N
N#define u8GetPNGSINTSHH(ch) (pst_u8PNGSINTS(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N
N#define u16GetPNGSINTSL(ch) (pst_u16PNGSINTS(ch) -> u16L)
N
N#define u16GetPNGSINTSH(ch) (pst_u16PNGSINTS(ch) -> u16H)
N            
N/* Word access */
N
N#define u32GetPNGSINTS(ch)  (*pu32PNGSINTS(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGSINTC                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C040CC                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGSINTC_REG__       0xC0C040CCU
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   BJMPEIC	:1; 	 /* 0..0  bit(s) R/W1C */
N  uint32_t   UFMTEIC	:1; 	 /* 1..1  bit(s) R/W1C */
N  uint32_t   OOCEIC	:1; 	 /* 2..2  bit(s) R/W1C */
N  uint32_t   CHSEIC	:1; 	 /* 3..3  bit(s) R/W1C */
N  uint32_t   EYEOSEIC	:1; 	 /* 4..4  bit(s) R/W1C */
N  uint32_t   NOEOSEIC	:1; 	 /* 5..5  bit(s) R/W1C */
N  uint32_t   CMPEIC	:1; 	 /* 6..6  bit(s) R/W1C */
N  uint32_t   BTYPEEIC	:1; 	 /* 7..7  bit(s) R/W1C */
N  uint32_t   DISTEIC	:1; 	 /* 8..8  bit(s) R/W1C */
N  uint32_t   NCBSEIC	:1; 	 /* 9..9  bit(s) R/W1C */
N  uint32_t   DECEIC	:1; 	 /* 10..10  bit(s) R/W1C */
N  uint32_t   RSRVD11	:5; 	 /* 11..15  bit(s) R */
N  uint32_t   FJMPWIC	:1; 	 /* 16..16  bit(s) R/W1C */
N  uint32_t   UCHNKWIC	:1; 	 /* 17..17  bit(s) R/W1C */
N  uint32_t   PDICTWIC	:1; 	 /* 18..18  bit(s) R/W1C */
N  uint32_t   ULLWIC	:1; 	 /* 19..19  bit(s) R/W1C */
N  uint32_t   UDISTWIC	:1; 	 /* 20..20  bit(s) R/W1C */
N  uint32_t   OFCWIC	:1; 	 /* 21..21  bit(s) R/W1C */
N  uint32_t   RSRVD22	:2; 	 /* 22..23  bit(s) R */
N  uint32_t   IHDRDIC	:1; 	 /* 24..24  bit(s) R/W1C */
N  uint32_t   PLTEDIC	:1; 	 /* 25..25  bit(s) R/W1C */
N  uint32_t   IDATDIC	:1; 	 /* 26..26  bit(s) R/W1C */
N  uint32_t   IENDDIC	:1; 	 /* 27..27  bit(s) R/W1C */
N  uint32_t   DCDSIC	:1; 	 /* 28..28  bit(s) R/W1C */
N  uint32_t   SIDLEIC	:1; 	 /* 29..29  bit(s) R/W1C */
N  uint32_t   DSFFULLIC	:1; 	 /* 30..30  bit(s) R/W1C */ 
N  uint32_t   RSRVD31	:1; 	 /* 31..31  bit(s) R */                    
N} PNGSINTC_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGSINTC_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGSINTC_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGSINTC_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGSINTC(ch)     ((volatile PNGSINTC_bit_view_st *)\
N(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_bitPNGSINTC(ch)     ((volatile PNGSINTC_bit_view_st *)(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGSINTC(ch)     ((volatile PNGSINTC_byte_view_st *)\
N(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u8PNGSINTC(ch)     ((volatile PNGSINTC_byte_view_st *)(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGSINTC(ch)     ((volatile PNGSINTC_halfword_view_st *)\
N(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pst_u16PNGSINTC(ch)     ((volatile PNGSINTC_halfword_view_st *)(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGSINTC(ch)     ((volatile u32PNGSINTC_word_view *)\
N(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
X#define pu32PNGSINTC(ch)     ((volatile u32PNGSINTC_word_view *)(PNGSINTC_REG__  + ((uint16_t)(ch) * 0x0100U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGSINTC_BJMPEIC(ch) (pst_bitPNGSINTC(ch) -> BJMPEIC)
N#define vClrPNGSINTC_BJMPEIC(ch) (pst_bitPNGSINTC(ch) -> BJMPEIC = (1))
N#define biGetPNGSINTC_UFMTEIC(ch) (pst_bitPNGSINTC(ch) -> UFMTEIC)
N#define vClrPNGSINTC_UFMTEIC(ch) (pst_bitPNGSINTC(ch) -> UFMTEIC = (1))
N#define biGetPNGSINTC_OOCEIC(ch) (pst_bitPNGSINTC(ch) -> OOCEIC)
N#define vClrPNGSINTC_OOCEIC(ch) (pst_bitPNGSINTC(ch) -> OOCEIC = (1))
N#define biGetPNGSINTC_CHSEIC(ch) (pst_bitPNGSINTC(ch) -> CHSEIC)
N#define vClrPNGSINTC_CHSEIC(ch) (pst_bitPNGSINTC(ch) -> CHSEIC = (1))
N#define biGetPNGSINTC_EYEOSEIC(ch) (pst_bitPNGSINTC(ch) -> EYEOSEIC)
N#define vClrPNGSINTC_EYEOSEIC(ch) (pst_bitPNGSINTC(ch) -> EYEOSEIC = (1))
N#define biGetPNGSINTC_NOEOSEIC(ch) (pst_bitPNGSINTC(ch) -> NOEOSEIC)
N#define vClrPNGSINTC_NOEOSEIC(ch) (pst_bitPNGSINTC(ch) -> NOEOSEIC = (1))
N#define biGetPNGSINTC_CMPEIC(ch) (pst_bitPNGSINTC(ch) -> CMPEIC)
N#define vClrPNGSINTC_CMPEIC(ch) (pst_bitPNGSINTC(ch) -> CMPEIC = (1))
N#define biGetPNGSINTC_BTYPEEIC(ch) (pst_bitPNGSINTC(ch) -> BTYPEEIC)
N#define vClrPNGSINTC_BTYPEEIC(ch) (pst_bitPNGSINTC(ch) -> BTYPEEIC = (1))
N#define biGetPNGSINTC_DISTEIC(ch) (pst_bitPNGSINTC(ch) -> DISTEIC)
N#define vClrPNGSINTC_DISTEIC(ch) (pst_bitPNGSINTC(ch) -> DISTEIC = (1))
N#define biGetPNGSINTC_NCBSEIC(ch) (pst_bitPNGSINTC(ch) -> NCBSEIC)
N#define vClrPNGSINTC_NCBSEIC(ch) (pst_bitPNGSINTC(ch) -> NCBSEIC = (1))
N#define biGetPNGSINTC_DECEIC(ch) (pst_bitPNGSINTC(ch) -> DECEIC)
N#define vClrPNGSINTC_DECEIC(ch) (pst_bitPNGSINTC(ch) -> DECEIC = (1))            
N#define biGetPNGSINTC_RSRVD11(ch) (pst_bitPNGSINTC(ch) -> RSRVD11)
N#define biGetPNGSINTC_FJMPWIC(ch) (pst_bitPNGSINTC(ch) -> FJMPWIC)
N#define vClrPNGSINTC_FJMPWIC(ch) (pst_bitPNGSINTC(ch) -> FJMPWIC = (1))
N#define biGetPNGSINTC_UCHNKWIC(ch) (pst_bitPNGSINTC(ch) -> UCHNKWIC)
N#define vClrPNGSINTC_UCHNKWIC(ch) (pst_bitPNGSINTC(ch) -> UCHNKWIC = (1))
N#define biGetPNGSINTC_PDICTWIC(ch) (pst_bitPNGSINTC(ch) -> PDICTWIC)
N#define vClrPNGSINTC_PDICTWIC(ch) (pst_bitPNGSINTC(ch) -> PDICTWIC = (1))
N#define biGetPNGSINTC_ULLWIC(ch) (pst_bitPNGSINTC(ch) -> ULLWIC)
N#define vClrPNGSINTC_ULLWIC(ch) (pst_bitPNGSINTC(ch) -> ULLWIC = (1))
N#define biGetPNGSINTC_UDISTWIC(ch) (pst_bitPNGSINTC(ch) -> UDISTWIC)
N#define vClrPNGSINTC_UDISTWIC(ch) (pst_bitPNGSINTC(ch) -> UDISTWIC = (1))
N#define biGetPNGSINTC_OFCWIC(ch) (pst_bitPNGSINTC(ch) -> OFCWIC)
N#define vClrPNGSINTC_OFCWIC(ch) (pst_bitPNGSINTC(ch) -> OFCWIC = (1))            
N#define biGetPNGSINTC_RSRVD22(ch) (pst_bitPNGSINTC(ch) -> RSRVD22)
N#define biGetPNGSINTC_IHDRDIC(ch) (pst_bitPNGSINTC(ch) -> IHDRDIC)
N#define vClrPNGSINTC_IHDRDIC(ch) (pst_bitPNGSINTC(ch) -> IHDRDIC = (1))
N#define biGetPNGSINTC_PLTEDIC(ch) (pst_bitPNGSINTC(ch) -> PLTEDIC)
N#define vClrPNGSINTC_PLTEDIC(ch) (pst_bitPNGSINTC(ch) -> PLTEDIC = (1))
N#define biGetPNGSINTC_IDATDIC(ch) (pst_bitPNGSINTC(ch) -> IDATDIC)
N#define vClrPNGSINTC_IDATDIC(ch) (pst_bitPNGSINTC(ch) -> IDATDIC = (1))
N#define biGetPNGSINTC_IENDDIC(ch) (pst_bitPNGSINTC(ch) -> IENDDIC)
N#define vClrPNGSINTC_IENDDIC(ch) (pst_bitPNGSINTC(ch) -> IENDDIC = (1))
N#define biGetPNGSINTC_DCDSIC(ch) (pst_bitPNGSINTC(ch) -> DCDSIC)
N#define vClrPNGSINTC_DCDSIC(ch) (pst_bitPNGSINTC(ch) -> DCDSIC = (1))
N#define biGetPNGSINTC_SIDLEIC(ch) (pst_bitPNGSINTC(ch) -> SIDLEIC)
N#define vClrPNGSINTC_SIDLEIC(ch) (pst_bitPNGSINTC(ch) -> SIDLEIC = (1))
N#define biGetPNGSINTC_DSFFULLIC(ch) (pst_bitPNGSINTC(ch) -> DSFFULLIC)
N#define vClrPNGSINTC_DSFFULLIC(ch) (pst_bitPNGSINTC(ch) -> DSFFULLIC = (1))            
N#define biGetPNGSINTC_RSRVD31(ch) (pst_bitPNGSINTC(ch) -> RSRVD31)
N            
N/* LL-struct byte access */
N#define vSetPNGSINTCLL(ch,ParValue) (pst_u8PNGSINTC(ch) -> u8LL = (ParValue))
N#define u8GetPNGSINTCLL(ch) (pst_u8PNGSINTC(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGSINTCLH(ch,ParValue) (pst_u8PNGSINTC(ch) -> u8LH = (ParValue))
N#define u8GetPNGSINTCLH(ch) (pst_u8PNGSINTC(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGSINTCHL(ch,ParValue) (pst_u8PNGSINTC(ch) -> u8HL = (ParValue))
N#define u8GetPNGSINTCHL(ch) (pst_u8PNGSINTC(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGSINTCHH(ch,ParValue) (pst_u8PNGSINTC(ch) -> u8HH = (ParValue))
N#define u8GetPNGSINTCHH(ch) (pst_u8PNGSINTC(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGSINTCL(ch,ParValue) (pst_u16PNGSINTC(ch) -> u16L = (ParValue))
N#define u16GetPNGSINTCL(ch) (pst_u16PNGSINTC(ch) -> u16L)
N#define vSetPNGSINTCH(ch,ParValue) (pst_u16PNGSINTC(ch) -> u16H = (ParValue))
N#define u16GetPNGSINTCH(ch) (pst_u16PNGSINTC(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGSINTC(ch,ParValue)  (*pu32PNGSINTC(ch) = (ParValue))
N#define u32GetPNGSINTC(ch)  (*pu32PNGSINTC(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT0                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C04C00                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT0_REG__       0xC0C04C00U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL0	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT0_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT0_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT0_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT0_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT0(ch)     ((volatile PNGPLT0_bit_view_st *)\
N(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT0(ch)     ((volatile PNGPLT0_bit_view_st *)(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT0(ch)     ((volatile PNGPLT0_byte_view_st *)\
N(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT0(ch)     ((volatile PNGPLT0_byte_view_st *)(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT0(ch)     ((volatile PNGPLT0_halfword_view_st *)\
N(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT0(ch)     ((volatile PNGPLT0_halfword_view_st *)(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT0(ch)     ((volatile u32PNGPLT0_word_view *)\
N(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT0(ch)     ((volatile u32PNGPLT0_word_view *)(PNGPLT0_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT0_PLTVAL0(ch) (pst_bitPNGPLT0(ch) -> PLTVAL0)
N#define vSetPNGPLT0_PLTVAL0(ch,ParValue)  (pst_bitPNGPLT0(ch) -> PLTVAL0=(ParValue))            
N#define biGetPNGPLT0_RSRVD24(ch) (pst_bitPNGPLT0(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT0LL(ch,ParValue) (pst_u8PNGPLT0(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT0LL(ch) (pst_u8PNGPLT0(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT0LH(ch,ParValue) (pst_u8PNGPLT0(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT0LH(ch) (pst_u8PNGPLT0(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT0HL(ch,ParValue) (pst_u8PNGPLT0(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT0HL(ch) (pst_u8PNGPLT0(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT0HH(ch,ParValue) (pst_u8PNGPLT0(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT0HH(ch) (pst_u8PNGPLT0(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT0L(ch,ParValue) (pst_u16PNGPLT0(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT0L(ch) (pst_u16PNGPLT0(ch) -> u16L)
N#define vSetPNGPLT0H(ch,ParValue) (pst_u16PNGPLT0(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT0H(ch) (pst_u16PNGPLT0(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT0(ch,ParValue)  (*pu32PNGPLT0(ch) = (ParValue))
N#define u32GetPNGPLT0(ch)  (*pu32PNGPLT0(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT1                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C05000                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT1_REG__       0xC0C05000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL1	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT1_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT1_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT1_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT1_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT1(ch)     ((volatile PNGPLT1_bit_view_st *)\
N(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT1(ch)     ((volatile PNGPLT1_bit_view_st *)(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT1(ch)     ((volatile PNGPLT1_byte_view_st *)\
N(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT1(ch)     ((volatile PNGPLT1_byte_view_st *)(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT1(ch)     ((volatile PNGPLT1_halfword_view_st *)\
N(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT1(ch)     ((volatile PNGPLT1_halfword_view_st *)(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT1(ch)     ((volatile u32PNGPLT1_word_view *)\
N(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT1(ch)     ((volatile u32PNGPLT1_word_view *)(PNGPLT1_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT1_PLTVAL1(ch) (pst_bitPNGPLT1(ch) -> PLTVAL1)
N#define vSetPNGPLT1_PLTVAL1(ch,ParValue)  (pst_bitPNGPLT1(ch) -> PLTVAL1=(ParValue))            
N#define biGetPNGPLT1_RSRVD24(ch) (pst_bitPNGPLT1(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT1LL(ch,ParValue) (pst_u8PNGPLT1(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT1LL(ch) (pst_u8PNGPLT1(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT1LH(ch,ParValue) (pst_u8PNGPLT1(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT1LH(ch) (pst_u8PNGPLT1(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT1HL(ch,ParValue) (pst_u8PNGPLT1(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT1HL(ch) (pst_u8PNGPLT1(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT1HH(ch,ParValue) (pst_u8PNGPLT1(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT1HH(ch) (pst_u8PNGPLT1(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT1L(ch,ParValue) (pst_u16PNGPLT1(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT1L(ch) (pst_u16PNGPLT1(ch) -> u16L)
N#define vSetPNGPLT1H(ch,ParValue) (pst_u16PNGPLT1(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT1H(ch) (pst_u16PNGPLT1(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT1(ch,ParValue)  (*pu32PNGPLT1(ch) = (ParValue))
N#define u32GetPNGPLT1(ch)  (*pu32PNGPLT1(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT2                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C05400                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT2_REG__       0xC0C05400U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL2	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT2_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT2_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT2_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT2_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT2(ch)     ((volatile PNGPLT2_bit_view_st *)\
N(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT2(ch)     ((volatile PNGPLT2_bit_view_st *)(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT2(ch)     ((volatile PNGPLT2_byte_view_st *)\
N(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT2(ch)     ((volatile PNGPLT2_byte_view_st *)(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT2(ch)     ((volatile PNGPLT2_halfword_view_st *)\
N(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT2(ch)     ((volatile PNGPLT2_halfword_view_st *)(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT2(ch)     ((volatile u32PNGPLT2_word_view *)\
N(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT2(ch)     ((volatile u32PNGPLT2_word_view *)(PNGPLT2_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT2_PLTVAL2(ch) (pst_bitPNGPLT2(ch) -> PLTVAL2)
N#define vSetPNGPLT2_PLTVAL2(ch,ParValue)  (pst_bitPNGPLT2(ch) -> PLTVAL2=(ParValue))            
N#define biGetPNGPLT2_RSRVD24(ch) (pst_bitPNGPLT2(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT2LL(ch,ParValue) (pst_u8PNGPLT2(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT2LL(ch) (pst_u8PNGPLT2(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT2LH(ch,ParValue) (pst_u8PNGPLT2(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT2LH(ch) (pst_u8PNGPLT2(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT2HL(ch,ParValue) (pst_u8PNGPLT2(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT2HL(ch) (pst_u8PNGPLT2(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT2HH(ch,ParValue) (pst_u8PNGPLT2(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT2HH(ch) (pst_u8PNGPLT2(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT2L(ch,ParValue) (pst_u16PNGPLT2(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT2L(ch) (pst_u16PNGPLT2(ch) -> u16L)
N#define vSetPNGPLT2H(ch,ParValue) (pst_u16PNGPLT2(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT2H(ch) (pst_u16PNGPLT2(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT2(ch,ParValue)  (*pu32PNGPLT2(ch) = (ParValue))
N#define u32GetPNGPLT2(ch)  (*pu32PNGPLT2(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT3                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C05800                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT3_REG__       0xC0C05800U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL3	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT3_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT3_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT3_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT3_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT3(ch)     ((volatile PNGPLT3_bit_view_st *)\
N(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT3(ch)     ((volatile PNGPLT3_bit_view_st *)(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT3(ch)     ((volatile PNGPLT3_byte_view_st *)\
N(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT3(ch)     ((volatile PNGPLT3_byte_view_st *)(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT3(ch)     ((volatile PNGPLT3_halfword_view_st *)\
N(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT3(ch)     ((volatile PNGPLT3_halfword_view_st *)(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT3(ch)     ((volatile u32PNGPLT3_word_view *)\
N(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT3(ch)     ((volatile u32PNGPLT3_word_view *)(PNGPLT3_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT3_PLTVAL3(ch) (pst_bitPNGPLT3(ch) -> PLTVAL3)
N#define vSetPNGPLT3_PLTVAL3(ch,ParValue)  (pst_bitPNGPLT3(ch) -> PLTVAL3=(ParValue))            
N#define biGetPNGPLT3_RSRVD24(ch) (pst_bitPNGPLT3(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT3LL(ch,ParValue) (pst_u8PNGPLT3(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT3LL(ch) (pst_u8PNGPLT3(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT3LH(ch,ParValue) (pst_u8PNGPLT3(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT3LH(ch) (pst_u8PNGPLT3(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT3HL(ch,ParValue) (pst_u8PNGPLT3(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT3HL(ch) (pst_u8PNGPLT3(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT3HH(ch,ParValue) (pst_u8PNGPLT3(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT3HH(ch) (pst_u8PNGPLT3(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT3L(ch,ParValue) (pst_u16PNGPLT3(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT3L(ch) (pst_u16PNGPLT3(ch) -> u16L)
N#define vSetPNGPLT3H(ch,ParValue) (pst_u16PNGPLT3(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT3H(ch) (pst_u16PNGPLT3(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT3(ch,ParValue)  (*pu32PNGPLT3(ch) = (ParValue))
N#define u32GetPNGPLT3(ch)  (*pu32PNGPLT3(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT4                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C05C00                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT4_REG__       0xC0C05C00U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL4	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT4_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT4_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT4_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT4_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT4(ch)     ((volatile PNGPLT4_bit_view_st *)\
N(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT4(ch)     ((volatile PNGPLT4_bit_view_st *)(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT4(ch)     ((volatile PNGPLT4_byte_view_st *)\
N(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT4(ch)     ((volatile PNGPLT4_byte_view_st *)(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT4(ch)     ((volatile PNGPLT4_halfword_view_st *)\
N(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT4(ch)     ((volatile PNGPLT4_halfword_view_st *)(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT4(ch)     ((volatile u32PNGPLT4_word_view *)\
N(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT4(ch)     ((volatile u32PNGPLT4_word_view *)(PNGPLT4_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT4_PLTVAL4(ch) (pst_bitPNGPLT4(ch) -> PLTVAL4)
N#define vSetPNGPLT4_PLTVAL4(ch,ParValue)  (pst_bitPNGPLT4(ch) -> PLTVAL4=(ParValue))            
N#define biGetPNGPLT4_RSRVD24(ch) (pst_bitPNGPLT4(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT4LL(ch,ParValue) (pst_u8PNGPLT4(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT4LL(ch) (pst_u8PNGPLT4(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT4LH(ch,ParValue) (pst_u8PNGPLT4(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT4LH(ch) (pst_u8PNGPLT4(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT4HL(ch,ParValue) (pst_u8PNGPLT4(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT4HL(ch) (pst_u8PNGPLT4(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT4HH(ch,ParValue) (pst_u8PNGPLT4(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT4HH(ch) (pst_u8PNGPLT4(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT4L(ch,ParValue) (pst_u16PNGPLT4(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT4L(ch) (pst_u16PNGPLT4(ch) -> u16L)
N#define vSetPNGPLT4H(ch,ParValue) (pst_u16PNGPLT4(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT4H(ch) (pst_u16PNGPLT4(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT4(ch,ParValue)  (*pu32PNGPLT4(ch) = (ParValue))
N#define u32GetPNGPLT4(ch)  (*pu32PNGPLT4(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT5                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C06000                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT5_REG__       0xC0C06000U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL5	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT5_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT5_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT5_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT5_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT5(ch)     ((volatile PNGPLT5_bit_view_st *)\
N(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT5(ch)     ((volatile PNGPLT5_bit_view_st *)(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT5(ch)     ((volatile PNGPLT5_byte_view_st *)\
N(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT5(ch)     ((volatile PNGPLT5_byte_view_st *)(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT5(ch)     ((volatile PNGPLT5_halfword_view_st *)\
N(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT5(ch)     ((volatile PNGPLT5_halfword_view_st *)(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT5(ch)     ((volatile u32PNGPLT5_word_view *)\
N(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT5(ch)     ((volatile u32PNGPLT5_word_view *)(PNGPLT5_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT5_PLTVAL5(ch) (pst_bitPNGPLT5(ch) -> PLTVAL5)
N#define vSetPNGPLT5_PLTVAL5(ch,ParValue)  (pst_bitPNGPLT5(ch) -> PLTVAL5=(ParValue))            
N#define biGetPNGPLT5_RSRVD24(ch) (pst_bitPNGPLT5(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT5LL(ch,ParValue) (pst_u8PNGPLT5(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT5LL(ch) (pst_u8PNGPLT5(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT5LH(ch,ParValue) (pst_u8PNGPLT5(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT5LH(ch) (pst_u8PNGPLT5(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT5HL(ch,ParValue) (pst_u8PNGPLT5(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT5HL(ch) (pst_u8PNGPLT5(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT5HH(ch,ParValue) (pst_u8PNGPLT5(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT5HH(ch) (pst_u8PNGPLT5(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT5L(ch,ParValue) (pst_u16PNGPLT5(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT5L(ch) (pst_u16PNGPLT5(ch) -> u16L)
N#define vSetPNGPLT5H(ch,ParValue) (pst_u16PNGPLT5(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT5H(ch) (pst_u16PNGPLT5(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT5(ch,ParValue)  (*pu32PNGPLT5(ch) = (ParValue))
N#define u32GetPNGPLT5(ch)  (*pu32PNGPLT5(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT6                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C06400                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT6_REG__       0xC0C06400U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL6	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT6_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT6_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT6_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT6_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT6(ch)     ((volatile PNGPLT6_bit_view_st *)\
N(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT6(ch)     ((volatile PNGPLT6_bit_view_st *)(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT6(ch)     ((volatile PNGPLT6_byte_view_st *)\
N(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT6(ch)     ((volatile PNGPLT6_byte_view_st *)(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT6(ch)     ((volatile PNGPLT6_halfword_view_st *)\
N(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT6(ch)     ((volatile PNGPLT6_halfword_view_st *)(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT6(ch)     ((volatile u32PNGPLT6_word_view *)\
N(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT6(ch)     ((volatile u32PNGPLT6_word_view *)(PNGPLT6_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT6_PLTVAL6(ch) (pst_bitPNGPLT6(ch) -> PLTVAL6)
N#define vSetPNGPLT6_PLTVAL6(ch,ParValue)  (pst_bitPNGPLT6(ch) -> PLTVAL6=(ParValue))            
N#define biGetPNGPLT6_RSRVD24(ch) (pst_bitPNGPLT6(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT6LL(ch,ParValue) (pst_u8PNGPLT6(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT6LL(ch) (pst_u8PNGPLT6(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT6LH(ch,ParValue) (pst_u8PNGPLT6(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT6LH(ch) (pst_u8PNGPLT6(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT6HL(ch,ParValue) (pst_u8PNGPLT6(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT6HL(ch) (pst_u8PNGPLT6(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT6HH(ch,ParValue) (pst_u8PNGPLT6(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT6HH(ch) (pst_u8PNGPLT6(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT6L(ch,ParValue) (pst_u16PNGPLT6(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT6L(ch) (pst_u16PNGPLT6(ch) -> u16L)
N#define vSetPNGPLT6H(ch,ParValue) (pst_u16PNGPLT6(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT6H(ch) (pst_u16PNGPLT6(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT6(ch,ParValue)  (*pu32PNGPLT6(ch) = (ParValue))
N#define u32GetPNGPLT6(ch)  (*pu32PNGPLT6(ch) )
N                 
N    
N/****************************************************************************   
N*                                                                               
N*       REGISTER: PNGPLT7                                
N*       SIZE    : 32-bits                        
N*       ADDRESS : 0xC0C06800                             
N*       ACCESS  : 8, 16, 32, BIT-level                       
N*                                                                               
N*****************************************************************************/
N/* Assign Register address: */
N#define PNGPLT7_REG__       0xC0C06800U
N     
N/************************       STRUCTURES        ***************************/
N         
N        
N/* BIT View */
Ntypedef struct{
N  uint32_t   PLTVAL7	:24; 	 /* 0..23  bit(s) R/W */ 
N  uint32_t   RSRVD24	:8; 	 /* 24..31  bit(s) R */                    
N} PNGPLT7_bit_view_st;
N        
N
N/* BYTE View */
Ntypedef struct{      
N  uint8_t u8LL;      
N  uint8_t u8LH;      
N  uint8_t u8HL;      
N  uint8_t u8HH;      
N} PNGPLT7_byte_view_st;
N            
N/* HALFWORD View */
Ntypedef struct{      
N  uint16_t u16L;     
N  uint16_t u16H;     
N} PNGPLT7_halfword_view_st;
N            
N/* WORD View */
Ntypedef uint32_t u32PNGPLT7_word_view;
N                 
N
N
N/************************     ACCESS POINTERS    ****************************/
N        
N/* Pointer to BIT-struct */
N#define pst_bitPNGPLT7(ch)     ((volatile PNGPLT7_bit_view_st *)\
N(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_bitPNGPLT7(ch)     ((volatile PNGPLT7_bit_view_st *)(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
N        
N/* Pointer to BYTE-struct  */
N#define pst_u8PNGPLT7(ch)     ((volatile PNGPLT7_byte_view_st *)\
N(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u8PNGPLT7(ch)     ((volatile PNGPLT7_byte_view_st *)(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to HALFWORD-struct */
N#define pst_u16PNGPLT7(ch)     ((volatile PNGPLT7_halfword_view_st *)\
N(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pst_u16PNGPLT7(ch)     ((volatile PNGPLT7_halfword_view_st *)(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
N            
N/* Pointer to WORD  */ 
N#define pu32PNGPLT7(ch)     ((volatile u32PNGPLT7_word_view *)\
N(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
X#define pu32PNGPLT7(ch)     ((volatile u32PNGPLT7_word_view *)(PNGPLT7_REG__  + ((uint16_t)(ch) * 0x4U)))
N                 
N
N/************************ REGISTER ACCESS MACROS ****************************/
N            
N/* ACCESS MACROS - ATTENTION: REGISTER SHADOW TECHNIQUE MIGHT BE APPLIED */
N/* Bit-struct access */
N#define biGetPNGPLT7_PLTVAL7(ch) (pst_bitPNGPLT7(ch) -> PLTVAL7)
N#define vSetPNGPLT7_PLTVAL7(ch,ParValue)  (pst_bitPNGPLT7(ch) -> PLTVAL7=(ParValue))            
N#define biGetPNGPLT7_RSRVD24(ch) (pst_bitPNGPLT7(ch) -> RSRVD24)
N            
N/* LL-struct byte access */
N#define vSetPNGPLT7LL(ch,ParValue) (pst_u8PNGPLT7(ch) -> u8LL = (ParValue))
N#define u8GetPNGPLT7LL(ch) (pst_u8PNGPLT7(ch) -> u8LL)
N/* LH-struct byte access */
N#define vSetPNGPLT7LH(ch,ParValue) (pst_u8PNGPLT7(ch) -> u8LH = (ParValue))
N#define u8GetPNGPLT7LH(ch) (pst_u8PNGPLT7(ch) -> u8LH)
N/* HL-struct byte access */
N#define vSetPNGPLT7HL(ch,ParValue) (pst_u8PNGPLT7(ch) -> u8HL = (ParValue))
N#define u8GetPNGPLT7HL(ch) (pst_u8PNGPLT7(ch) -> u8HL)
N/* HH-struct byte access */
N#define vSetPNGPLT7HH(ch,ParValue) (pst_u8PNGPLT7(ch) -> u8HH = (ParValue))
N#define u8GetPNGPLT7HH(ch) (pst_u8PNGPLT7(ch) -> u8HH)
N            
N            
N/* Half-word struct access */ 
N#define vSetPNGPLT7L(ch,ParValue) (pst_u16PNGPLT7(ch) -> u16L = (ParValue))
N#define u16GetPNGPLT7L(ch) (pst_u16PNGPLT7(ch) -> u16L)
N#define vSetPNGPLT7H(ch,ParValue) (pst_u16PNGPLT7(ch) -> u16H = (ParValue))
N#define u16GetPNGPLT7H(ch) (pst_u16PNGPLT7(ch) -> u16H)
N            
N/* Word access */
N#define vSetPNGPLT7(ch,ParValue)  (*pu32PNGPLT7(ch) = (ParValue))
N#define u32GetPNGPLT7(ch)  (*pu32PNGPLT7(ch) )
N            
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#endif /* PNGDeIO_H */ 
N    
N/************************** BEGIN of DISCLAIMER   ************************* 
N
N- TOSHIBA is continually working to improve the quality and reliability of 
N  its products. Nevertheless, semiconductor devices in general can 
N  malfunction or fail due to their inherent electrical sensitivity and  
N  vulnerability to physical stress. It is the responsibility of the buyer, 
N  when utilizing TOSHIBA products, to comply with the standards of safety 
N  in making a safe design for the entire system, and to avoid situations in 
N  which a malfunction or failure of such TOSHIBA products could cause loss of 
N  human life, bodily injury or damage to property. 
N  
N  In developing your designs, please ensure that TOSHIBA products are used 
N  within specified operating ranges as set forth in the most recent TOSHIBA 
N  products specifications. 
N  Also, please keep in mind the precautions and conditions set forth in the 
N  Handling Guide for Semiconductor Devices, or 
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in 
N  general electronics applications (computer, personal equipment, office 
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). 
N  These Toshiba products are neither intended nor warranted for usage in 
N  equipment that requires extraordinarily high quality and/or reliability or 
N  a malfunction or failure of which may cause loss of human life or bodily 
N  injury (Unintended Usage). Unintended Usage include atomic energy control 
N  instruments, airplane or spaceship instruments, transportation instruments, 
N  traffic signal instruments, combustion control instruments, medical 
N  instruments, all types of safety devices, etc.. 
N  Unintended Usage of Toshiba products listed in this document shall be 
N  made at the customers own risk. 
N
N- Toshiba assumes no liability for any damage or losses (including but not 
N  limited to, loss of business profit,business interruption, loss of business 
N  information,and other pecuniary losses) occurring 
N  from the use of, or inability to use, this product. 
N
N- The products described in this document are subject to the foreign exchange 
N  and foreign trade laws. 
N
N- The products described in this document contain components made in the 
N  United States and subject to export control of the U.S. authorities. 
N  Diversion contrary to the U.S. law is prohibited. 
N
N- The information contained herein is presented only as a guide for the 
N  applications of our products. 
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements 
N  of intellectual property or other rights of the third parties which may 
N  result from its use.  
N  No license is granted by implication or otherwise under any intellectual 
N  property or other rights of TOSHIBA CORPORATION or others. 
N
N- The information contained herein is subject to change without notice. 
N
N****************************  END of DISCLAIMER ****************************/ 
N
L 23 "..\..\..\..\lldd\src\png.c" 2
N#include "png.h"                      /* Own definitions */
L 1 "..\..\..\..\lldd\inc\png.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : PNG-decoder low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : PNG
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.13 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef PNG_H
N#define PNG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S
N#endif
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_PNG_H_REVISION     "$Revision: 1.13 $"
N#define LLDD_PNG_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N
N#define PNG_VIRTUAL_START_ADDRESS           (0x70000000)
N#define PNG_VIRTUAL_STREAM_LENGTH           (0x00800000)
N
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_0  (PNG_VIRTUAL_START_ADDRESS + 0x0*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_1  (PNG_VIRTUAL_START_ADDRESS + 0x1*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_2  (PNG_VIRTUAL_START_ADDRESS + 0x2*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_3  (PNG_VIRTUAL_START_ADDRESS + 0x3*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_4  (PNG_VIRTUAL_START_ADDRESS + 0x4*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_5  (PNG_VIRTUAL_START_ADDRESS + 0x5*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_6  (PNG_VIRTUAL_START_ADDRESS + 0x6*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_7  (PNG_VIRTUAL_START_ADDRESS + 0x7*PNG_VIRTUAL_STREAM_LENGTH)
N
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_0    (PNG_VIRTUAL_START_ADDRESS_STREAM_0 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_1    (PNG_VIRTUAL_START_ADDRESS_STREAM_1 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_2    (PNG_VIRTUAL_START_ADDRESS_STREAM_2 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_3    (PNG_VIRTUAL_START_ADDRESS_STREAM_3 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_4    (PNG_VIRTUAL_START_ADDRESS_STREAM_4 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_5    (PNG_VIRTUAL_START_ADDRESS_STREAM_5 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_6    (PNG_VIRTUAL_START_ADDRESS_STREAM_6 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_7    (PNG_VIRTUAL_START_ADDRESS_STREAM_7 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* stream */
Ntypedef enum tag_png_stream_e
N{
N   PNG_STREAM_0 = 0,                      /* stream 0 */
N   PNG_STREAM_1 = 1,                      /* stream 1 */
N   PNG_STREAM_2 = 2,                      /* stream 2 */
N   PNG_STREAM_3 = 3,                      /* stream 3 */
N   PNG_STREAM_4 = 4,                      /* stream 4 */
N   PNG_STREAM_5 = 5,                      /* stream 5 */
N   PNG_STREAM_6 = 6,                      /* stream 6 */
N   PNG_STREAM_7 = 7                       /* stream 7 */
N} png_stream_e;
N
N/* enable/disable */
Ntypedef enum tag_png_enable_e
N{
N   PNG_DIS = 0,                           /* disable */
N   PNG_EN  = 1                            /* enable  */
N} png_enable_e;
N
N/* interrupt type */
Ntypedef enum tag_png_int_type_e
N{
N   PNG_INT_LEVEL = 0,                     /* level interrupt */
N   PNG_INT_PULSE = 1                      /* pulse interrupt  */
N} png_int_type_e;
N
N/* interrupts */
Ntypedef enum tag_png_int_e
N{
N   PNG_INT_VSWAEI    = 0,                 /* VSWAEI interrupt */
N   PNG_INT_VSUAEI    = 1,                 /* VSUAEI interrupt  */
N   PNG_INT_CW2ROEI   = 2,                 /* CW2ROEI interrupt */
N   PNG_INT_CRSVAEI   = 3,                 /* CRSVAEI interrupt  */
N   PNG_INT_CPEI      = 4,                 /* CPEI interrupt */
N   PNG_INT_SWBEI     = 5,                 /* SWBEI interrupt  */
N   PNG_INT_SSBEI     = 6,                 /* SSBEI interrupt  */
N   /*********************************/
N   PNG_INT_BJMPEI    = 7,                 /* BJMPEI interrupt */
N   PNG_INT_UFMTEI    = 8,                 /* UFMTEI interrupt */
N   PNG_INT_OOCEI     = 9,                 /* OOCEI interrupt */
N   PNG_INT_CHSEI     = 10,                /* CHSEI interrupt */
N   PNG_INT_EYEOSEI   = 11,                /* EYEOSEI interrupt */
N   PNG_INT_NOEOSEI   = 12,                /* NOEOSEI interrupt */
N   PNG_INT_CMPEI     = 13,                /* CMPEI interrupt */
N   PNG_INT_BTYPEEI   = 14,                /* BTYPEEI interrupt */
N   PNG_INT_DISTEI    = 15,                /* DISTEI interrupt */
N   PNG_INT_NCBSEI    = 16,                /* NCBSEI interrupt */
N   PNG_INT_DECEI     = 17,                /* DECEI interrupt */
N   PNG_INT_FJMPWI    = 18,                /* FJMPWI interrupt */
N   PNG_INT_UCHNKWI   = 19,                /* UCHNKWI interrupt */
N   PNG_INT_PDICTWI   = 20,                /* PDICTWI interrupt */
N   PNG_INT_ULLWI     = 21,                /* ULLWI interrupt */
N   PNG_INT_UDISTWI   = 22,                /* UDISTWI interrupt */
N   PNG_INT_OFCWI     = 23,                /* OFCWI interrupt */
N   PNG_INT_IHDRDI    = 24,                /* IHDRDI interrupt */
N   PNG_INT_PLTEDI    = 25,                /* PLTEDI interrupt */
N   PNG_INT_IDATDI    = 26,                /* IDATDI interrupt */
N   PNG_INT_IENDDI    = 27,                /* IENDDI interrupt */
N   PNG_INT_DCDSI     = 28,                /* DCDSI interrupt */
N   PNG_INT_SIDLEI    = 29,                /* SIDLEI interrupt */
N   PNG_INT_DSFFULLIE = 30                 /* DSFFULLIE interrupt */
N} png_int_e;
N
N/* interrupt status */
Ntypedef enum tag_png_int_status_e
N{
N   PNG_INT_NOT_PENDING = 0,               /* interrupt is not pending */
N   PNG_INT_PENDING     = 1                /* interrupt is pending */
N} png_int_status_e;
N
N/* transfer type */
Ntypedef enum tag_png_transfer_type_e
N{
N    PNG_READ_TRANSFER  = 0,               /* read transfer */
N    PNG_WRITE_TRANSFER = 1                /* write transfer */
N} png_transfer_type_e;
N
N/* burst type */
Ntypedef enum tag_png_burst_type_e
N{
N    PNG_FIXED_BURST = 0,                  /* fixed burst */
N    PNG_INCR_BURST  = 1                   /* increment burst */
N} png_burst_type_e;
N
N/* response type */
Ntypedef enum tag_png_response_type_e
N{
N    PNG_RESPONSE_OKAY   = 0,              /* OKAY */
N    PNG_RESPONSE_EXOKAY = 1,              /* EXOKAY */
N    PNG_RESPONSE_SLVERR = 2,              /* SLVERR */
N    PNG_RESPONSE_DECERR = 3               /* DECERR */
N} png_response_type_e;
N
N/* decode mode */
Ntypedef enum tag_png_decode_mode_e
N{
N    PNG_SINGLE_DECODE_MODE = 0,           /* single decode mode */
N    PNG_LOOP_DECODE_MODE   = 1            /* loop decode mode */
N} png_decode_mode_e;
N
N/* decoded output format */
Ntypedef enum tag_png_decoded_output_format_e
N{
N    PNG_OUTPUT_FORMAT_RGBA32 = 0x4,       /* RGBA32 */
N    PNG_OUTPUT_FORMAT_RGB24  = 0x2,       /* RGB24 */
N    PNG_OUTPUT_FORMAT_A8     = 0x1        /* A8 */
N} png_decoded_output_format_e;
N
N/* stream phase status */
Ntypedef enum tag_png_phase_status_e
N{
N   PNG_IDLE_PHASE   = 0,                  /* stream in idle phase */
N   PNG_DECODE_PHASE = 1                   /* stream in decode phase  */
N} png_phase_status_e;
N
N/* palette table loaded */
Ntypedef enum tag_png_pt_loaded_e
N{
N   PNG_PALETTE_TABLE_NOT_LOADED = 0,      /* palette table not loaded */
N   PNG_PALETTE_TABLE_LOADED     = 1       /* palette table loaded  */
N} png_pt_loaded_e;
N
N/* current chunk */
Ntypedef enum tag_png_chunk_e
N{
N    PNG_CHUNK_IHDR  = 0,                  /* IHDR */
N    PNG_CHUNK_IPLTE = 1,                  /* IPLTE */
N    PNG_CHUNK_IDAT  = 2,                  /* IDAT */
N    PNG_CHUNK_IEND  = 3                   /* IEND */
N} png_chunk_e;
N
N/* bit depth */
Ntypedef enum tag_png_bit_depth_e
N{
N    PNG_BIT_DEPTH_1  = 0x1,               /* bit depth 1 */
N    PNG_BIT_DEPTH_2  = 0x2,               /* bit depth 2 */
N    PNG_BIT_DEPTH_4  = 0x4,               /* bit depth 4 */
N    PNG_BIT_DEPTH_8  = 0x8,               /* bit depth 8 */
N    PNG_BIT_DEPTH_16 = 0x10               /* bit depth 16 */
N} png_bit_depth_e;
N
N/* color format */
Ntypedef enum tag_png_color_format_e
N{
N    PNG_COLOR_FORMAT_GRAY     = 0,        /* gray */
N    PNG_COLOR_FORMAT_RGB888   = 2,        /* truecolor */
N    PNG_COLOR_FORMAT_CLUT     = 3,        /* indexed */
N    PNG_COLOR_FORMAT_GRAYA    = 4,        /* gray with alpha */
N    PNG_COLOR_FORMAT_RGBA8888 = 6         /* truecolor with alpha */
N} png_color_format_e;
N
N/* color format */
Ntypedef enum tag_png_burst_size_e
N{
N    PNG_BURST_1_BYTE     = 0,  /* 1 byte burst size   */
N    PNG_BURST_2_BYTE     = 1,  /* 2 byte burst size   */
N    PNG_BURST_4_BYTE     = 2,  /* 4 byte burst size   */
N    PNG_BURST_8_BYTE     = 3,  /* 8 byte burst size   */
N    PNG_BURST_16_BYTE    = 4,  /* 16 byte burst size  */
N    PNG_BURST_32_BYTE    = 5,  /* 32 byte burst size  */
N    PNG_BURST_64_BYTE    = 6,  /* 64 byte burst size  */
N    PNG_BURST_128_BYTE   = 7   /* 128 byte burst size */
N} png_burst_size_e;
N
N/* color format */
Ntypedef enum tag_png_bus_error_type_e
N{
N    PNG_SLIDING_WINDOW_ERR  = 0,  /* Sliding window bus error   */
N    PNG_SOURCE_STREAM_ERR   = 1  /* source stream bus error    */
N} png_bus_error_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* PNG Bus error */
Ntypedef struct tag_png_bus_error_st
N{
N    uint32_t             u32ErrAddress;  /* Bus error address    */
N    png_transfer_type_e  eRWdir;         /* Read/Write Direction */
N    png_burst_type_e     eBurstType;     /* Burst Type           */
N    png_burst_size_e     eBurstSize;     /* Burst Size           */
N    png_response_type_e  eRespType;      /* Response Type        */
N    png_enable_e         eByteEnable;    /* Byte Enables         */
N    uint8_t              u8ID;           /* ID Tag               */
N    uint8_t              u8BurstLen;     /* Burst Length         */
N} png_bus_error_st;
N
N/* Stream status */
Ntypedef struct tag_png_stream_status_st
N{
N    png_phase_status_e   ePhase;          /* stream phase                  */
N    png_pt_loaded_e      ePalTableLoad;   /* palette table loaded          */
N    png_chunk_e          eTypeOfChunk;    /* Type of chunk being processed */
N    uint16_t             u16NoPalEntries; /* No. of palette entries        */
N    uint8_t              u8NoIdatChunks;  /* No. of IDAT chunks            */
N} png_stream_status_st;
N
N/* Stream IHDR Information */
Ntypedef struct tag_png_stream_ihdr_info_st
N{
N    png_bit_depth_e      eBitDepth;       /* number of bits per sample or number of bits per 
N                                             palette index, as determined from the IHDR chunk.*/
N    png_color_format_e   eColorType;      /* Color Type                     */
N    uint8_t              u8ComprMethod;   /* Compression Method             */
N    uint8_t              u8FilterMethod;  /* Filter Method                  */
N    uint8_t              u8InterlMethod;  /* Interlace Method               */
N} png_stream_ihdr_info_st;
N
N/* Stream ZLIB Information */
Ntypedef struct tag_png_stream_zlib_info_st
N{
N    uint8_t   u8ComprMethod;    /* CMF.CF (Compression Method) filed from the ZLIB stream.      */
N    uint8_t   u8ComprInfo;      /* CMF.CINFO (Compression Info) field from the ZLIB stream.     */
N    uint8_t   u8CheckBits;      /* Check bits for CMF and FLG, as received from the ZLIB stream */
N    uint8_t   u8Fdict;          /* FLG.FDICT (i.e. Preset Dictionary) flag received in the ZLIB stream. */
N    uint8_t   u8Flevel;         /* Compression Level” flags received in the ZLIB stream.         */
N} png_stream_zlib_info_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vPNG_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      vPNG_Init
N *
N * Purpose:       Initialisation of PNG-decoder.
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_Init(void);
N
N/****************************************************************************
N *
N * Function:      i32PNG_SetUpStream
N *
N * Purpose:       Configure png-stream and start
N *
N * Inputs:        eStream            Stream
N *                u32StartAddress    Start address of input image
N *                eDecodeMode        Loop decode mode
N *                eOutputFormat      Color output format
N *                u32Width           Image width
N *                u32Height          Image height
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on stream running
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_SetUpStream(png_stream_e eStream, uint32_t u32StartAddress, png_decode_mode_e eDecodeMode,
N                           png_decoded_output_format_e eOutputFormat, uint32_t u32Width, uint32_t u32Height);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetModuleVersion
N *
N * Purpose:       Return module version
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: module version
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetModuleVersion(void);
N
N/****************************************************************************
N *
N * Function:      vPNG_SetIntType
N *
N * Purpose:       Set PNG-interrupt type
N *
N * Inputs:        eIntType    Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_SetIntType(png_int_type_e eIntType);
N
N/****************************************************************************
N *
N * Function:      i32PNG_EnableGlobalInterruptSingle
N *
N * Purpose:       Enable or disable single interrupt
N *
N * Inputs:        eInt    Interrupt type
N *                eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_EnableGlobalInterruptSingle(png_int_e eInt, png_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32PNG_EnableStreamInterruptSingle
N *
N * Purpose:       Enable or disable single interrupt
N *
N * Inputs:        eStream    Stream
N *                eInt       Interrupt type
N *                eEn        Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_EnableStreamInterruptSingle(png_stream_e eStream, png_int_e eInt, png_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vPNG_EnableGlobalInterruptAll
N *
N * Purpose:       Enable or disable all interrupt
N *
N * Inputs:        u8Value    Interrupt enable or disable value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_EnableGlobalInterruptAll(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vPNG_EnableStreamInterruptAll
N *
N * Purpose:       Enable or disable all interrupt
N *
N * Inputs:        eStream    Stream
N *                u8Value    Interrupt enable or disable value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_EnableStreamInterruptAll(png_stream_e eStream, uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32PNG_GetGlobalInterruptStatusSingle
N *
N * Purpose:       Get single interrupt status
N *
N * Inputs:        eInt          Interrupt type
N *
N * Outputs:       peIntStatus   pointer to Interrupt status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_GetGlobalInterruptStatusSingle(png_int_e eInt, png_int_status_e * peIntStatus);
N
N/****************************************************************************
N *
N * Function:      i32PNG_GetStreamInterruptStatusSingle
N *
N * Purpose:       Get single interrupt status
N *
N * Inputs:        eStream       Stream
N *                eInt          Interrupt type
N *
N * Outputs:       peIntStatus   pointer to Interrupt status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_GetStreamInterruptStatusSingle(png_stream_e eStream, png_int_e eInt, png_int_status_e * peIntStatus);
N
N/****************************************************************************
N *
N * Function:      u8PNG_GetGlobalInterruptStatusAll
N *
N * Purpose:       Get interrupt status of all interrupt
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint8_t u8PNG_GetGlobalInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetStreamInterruptStatusAll
N *
N * Purpose:       Get interrupt status of all interrupt
N *
N * Inputs:        eStream    Stream
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetStreamInterruptStatusAll(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      i32PNG_ClearGlobalInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInt    Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_ClearGlobalInterruptSingle(png_int_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32PNG_ClearStreamInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eStream    Stream
N *                eInt       Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_ClearStreamInterruptSingle(png_stream_e eStream, png_int_e eInt);
N
N/****************************************************************************
N *
N * Function:      vPNG_ClearGlobalInterruptAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ClearGlobalInterruptAll(void);
N
N/****************************************************************************
N *
N * Function:      vPNG_ClearStreamInterruptAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        eStream    Stream
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ClearStreamInterruptAll(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      vPNG_ResetStream
N *
N * Purpose:       Reset png stream
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ResetStream(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetBusError
N *
N * Purpose:       Get information about bus error for sliding window or
N *                source stream including bus error address.
N *
N * Inputs:        eErrType         Type of error to get its information
N *
N * Outputs:       pstBussError     Pointer to structue to get error information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetBusError(png_bus_error_type_e eErrType, png_bus_error_st *pstBussError);
N
N/****************************************************************************
N *
N * Function:      ePNG_GetStreamPhaseStatus
N *
N * Purpose:       Get information about stream phase status
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: Stream phase status(IDLE/DECODE)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Npng_phase_status_e ePNG_GetStreamPhaseStatus (png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamStatus
N *
N * Purpose:       Get information about stream status
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamStatus  Pointer to structue to get stream status
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamStatus (png_stream_e eStream, png_stream_status_st *pstStreamStatus);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamIhdrInfo
N *
N * Purpose:       Get information about stream IHDR
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamIhdrInfo  Pointer to structue to get stream IHDR information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamIhdrInfo (png_stream_e eStream, png_stream_ihdr_info_st *pstStreamIhdrInfo);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamZlibInfo
N *
N * Purpose:       Get information about stream ZLIB information
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamZlibInfo  Pointer to structue to get stream ZLIB information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamZlibInfo (png_stream_e eStream, png_stream_zlib_info_st *pstStreamZlibInfo);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetImageSize
N *
N * Purpose:       Get width and height of image
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pu32Width   Pointer to width variable
N *                pu32Height  Pointer to height variable
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetImageSize(png_stream_e eStream, uint32_t *pu32Width, uint32_t *pu32Height);
N
N/****************************************************************************
N *
N * Function:      u8PNG_GetDecodedStreamFIFOFillLevel
N *
N * Purpose:       Read current fill level of the FIFO for decoded stream
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: FIFO fill level
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint8_t u8PNG_GetDecodedStreamFIFOFillLevel(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetSSBCurrentAddress
N *
N * Purpose:       Read SSB current address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: SSB current address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetSSBCurrentAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetSWBCurrentAddress
N *
N * Purpose:       Read SWB current address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: SWB current address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetSWBCurrentAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetFSBStartAddress
N *
N * Purpose:       Read FSB start address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: FSB start address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetFSBStartAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetCurrentVirtualOffset
N *
N * Purpose:       Read current virtual offset
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: current virtual offset
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetCurrentVirtualOffset(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      i32PNG_SetPaletteTable
N *
N * Purpose:       Set palette table
N *
N * Inputs:        eStream             stream
N *                pu32PaletteTable    Pointer to palette table
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_SetPaletteTable(png_stream_e eStream, uint32_t * pu32PaletteTable);
N
N/****************************************************************************/
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#endif /* PNG_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 24 "..\..\..\..\lldd\src\png.c" 2
N#include "png_memory.h"               /* buffer length definitions */
L 1 "..\..\..\..\lldd\inc\png_memory.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : PNG-decoder low level driver memory size definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : PNG
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef PNG_MEMORY_H
N#define PNG_MEMORY_H
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N#define SLIDING_WINDOW_SIZE          (0x8000)
N#define FILTER_STREAM_BUFFER_LENGTH  (0x4000)
N
N/****************************************************************************/
N
N
N#endif /* PNG_MEMORY_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 25 "..\..\..\..\lldd\src\png.c" 2
N
N/*********************************************/
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1752  /* Rule 17.4 [R] : pointer arithmetic not allowed */  
S  #pragma ghs nowarning 1847  /* Rule 10.3 [R] : cast of complex integer expression with underlying type "type" to non-integer type "type" not allowed */
S  #pragma ghs nowarning 1864  /* Rule 10.1 [R] : implicit conversion from underlying type, "type", to narrower underlying type, "type", not allowed */
S  #pragma ghs nowarning 1865  /* Rule 10.1 [R] : conversion from underlying type, "int", to same width underlying type, "uint32_t", not allowed */
S  #pragma ghs nowarning 1866  /* Rule 10.1 [R] : implicit conversion from underlying type, "type", to underlying type, "type", changes signedness */
S  #pragma ghs nowarning 1867  /* Rule 10.1 [R] : implicit conversion of complex expression from underlying type, "type", to underlying type, "type", not allowed
S */
S  
S  #pragma ghs nowarning 1737  /* Rule 12.1 [A] : expression may not depend on operator precedence rules */  
S  #pragma ghs nowarning 1834  /* Rule 11.3 [A] : disable casting error */  
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S  #pragma ghs nowarning 1877  /* Rule 11.3 [A] : disable casting error */
N#endif
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_PNG_C_REVISION     "$Revision: 1.19 $"
N#define LLDD_PNG_C_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N#define PNG_GLOBAL_ALLINTR_MASK  0x7FU
N#define PNG_STREAM_ALLINTR_MASK  0xFFFFFFFFU
N/**********************************************
N*  Static variables and forward declarations  *
N**********************************************/ 
N
Nstatic uint8_t au8LLDD_PNG_C_REVISION[]    = LLDD_PNG_C_REVISION;
Xstatic uint8_t au8LLDD_PNG_C_REVISION[]    = "$Revision: 1.19 $";
Nstatic uint8_t au8LLDD_PNG_C_TAG[]         = LLDD_PNG_C_TAG;
Xstatic uint8_t au8LLDD_PNG_C_TAG[]         = "$Name: LLDD_1_7_GFX $";
Nstatic uint8_t au8LLDD_PNG_H_REVISION[]    = LLDD_PNG_H_REVISION;
Xstatic uint8_t au8LLDD_PNG_H_REVISION[]    = "$Revision: 1.13 $";
Nstatic uint8_t au8LLDD_PNG_H_TAG[]         = LLDD_PNG_H_TAG;
Xstatic uint8_t au8LLDD_PNG_H_TAG[]         = "$Name: LLDD_1_7_GFX $";
Nstatic uint8_t au8LLDD_PNG_IO_H_REVISION[] = LLDD_PNG_IO_H_REVISION;
Xstatic uint8_t au8LLDD_PNG_IO_H_REVISION[] = "$Revision: 1.11 $";
Nstatic uint8_t au8LLDD_PNG_IO_H_TAG[]      = LLDD_PNG_IO_H_TAG;
Xstatic uint8_t au8LLDD_PNG_IO_H_TAG[]      = "$Name: LLDD_1_7_GFX $";
N
N/*********************************************/
N
N/**********************************************
N*              Global variables               *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section bss = ".PNGBuffer"
S#define ALIGNED
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#if defined (__KEIL__)
X#if 1L
N#pragma arm section zidata = ".PNGBuffer"
N#else
S#pragma arm section rwdata = ".PNGBuffer"
N#endif
N#define ALIGNED __align(8)
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N/* SST buffer: 32k byte, 64-bit aligned */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_0[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_0[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_1[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_1[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_2[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_2[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_3[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_3[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_4[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_4[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_5[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_5[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_6[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_6[(0x8000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_SWB_Buffer_Stream_7[SLIDING_WINDOW_SIZE];
X__align(8) uint8_t u8PNG_SWB_Buffer_Stream_7[(0x8000)];
N
N/* SST buffer: 16k byte, 64-bit aligned */
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_0[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_0[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_1[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_1[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_2[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_2[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_3[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_3[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_4[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_4[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_5[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_5[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_6[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_6[(0x4000)];
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma alignvar(8)
N#endif /* defined(__GHS__) || defined(__ghs__) */
NALIGNED uint8_t u8PNG_FSB_Buffer_Stream_7[FILTER_STREAM_BUFFER_LENGTH];
X__align(8) uint8_t u8PNG_FSB_Buffer_Stream_7[(0x4000)];
N
Nuint32_t u32SWBBufferStartAddress[8];
Nuint32_t u32FSBBufferStartAddress[8];
Nuint32_t u32VirtualMemoryStartAddress[8];
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S#pragma ghs section bss = default
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#if defined(__arm__) && defined(__ARMCC_VERSION)
X#if 1L && 1L
N#if defined (__KEIL__)
X#if 1L
N#pragma arm section zidata
N#else
S#pragma arm section rwdata
N#endif
N#endif /* defined(__arm__) && defined(__ARMCC_VERSION) */
N
N/*********************************************/
N
N/**********************************************
N*             Function definition             *
N**********************************************/
N
Nvoid vPNG_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag)
N{
N   *pau8ModuleRevision = &au8LLDD_PNG_C_REVISION[0];
N   *pau8ModuleTag      = &au8LLDD_PNG_C_TAG[0];
N   *pau8HeaderRevision = &au8LLDD_PNG_H_REVISION[0];
N   *pau8HeaderTag      = &au8LLDD_PNG_H_TAG[0];
N   *pau8IORevision     = &au8LLDD_PNG_IO_H_REVISION[0];
N   *pau8IOTag          = &au8LLDD_PNG_IO_H_TAG[0];
N}
N
N/****************************************************************************/
N
Nvoid vPNG_Init(void)
N{
N    /* SWB buffer */
N    u32SWBBufferStartAddress[0] = (uint32_t)&u8PNG_SWB_Buffer_Stream_0[0];
N    u32SWBBufferStartAddress[1] = (uint32_t)&u8PNG_SWB_Buffer_Stream_1[0];
N    u32SWBBufferStartAddress[2] = (uint32_t)&u8PNG_SWB_Buffer_Stream_2[0];
N    u32SWBBufferStartAddress[3] = (uint32_t)&u8PNG_SWB_Buffer_Stream_3[0];
N    u32SWBBufferStartAddress[4] = (uint32_t)&u8PNG_SWB_Buffer_Stream_4[0];
N    u32SWBBufferStartAddress[5] = (uint32_t)&u8PNG_SWB_Buffer_Stream_5[0];
N    u32SWBBufferStartAddress[6] = (uint32_t)&u8PNG_SWB_Buffer_Stream_6[0];
N    u32SWBBufferStartAddress[7] = (uint32_t)&u8PNG_SWB_Buffer_Stream_7[0];
N
N    /* FSB buffer */
N    u32FSBBufferStartAddress[0] = (uint32_t)&u8PNG_FSB_Buffer_Stream_0[0];
N    u32FSBBufferStartAddress[1] = (uint32_t)&u8PNG_FSB_Buffer_Stream_1[0];
N    u32FSBBufferStartAddress[2] = (uint32_t)&u8PNG_FSB_Buffer_Stream_2[0];
N    u32FSBBufferStartAddress[3] = (uint32_t)&u8PNG_FSB_Buffer_Stream_3[0];
N    u32FSBBufferStartAddress[4] = (uint32_t)&u8PNG_FSB_Buffer_Stream_4[0];
N    u32FSBBufferStartAddress[5] = (uint32_t)&u8PNG_FSB_Buffer_Stream_5[0];
N    u32FSBBufferStartAddress[6] = (uint32_t)&u8PNG_FSB_Buffer_Stream_6[0];
N    u32FSBBufferStartAddress[7] = (uint32_t)&u8PNG_FSB_Buffer_Stream_7[0];
N
N    /* Decoded Stream Virtual Start Address */
N    u32VirtualMemoryStartAddress[0] = PNG_VIRTUAL_START_ADDRESS_STREAM_0;
X    u32VirtualMemoryStartAddress[0] = ((0x70000000) + 0x0*(0x00800000));
N    u32VirtualMemoryStartAddress[1] = PNG_VIRTUAL_START_ADDRESS_STREAM_1;
X    u32VirtualMemoryStartAddress[1] = ((0x70000000) + 0x1*(0x00800000));
N    u32VirtualMemoryStartAddress[2] = PNG_VIRTUAL_START_ADDRESS_STREAM_2;
X    u32VirtualMemoryStartAddress[2] = ((0x70000000) + 0x2*(0x00800000));
N    u32VirtualMemoryStartAddress[3] = PNG_VIRTUAL_START_ADDRESS_STREAM_3;
X    u32VirtualMemoryStartAddress[3] = ((0x70000000) + 0x3*(0x00800000));
N    u32VirtualMemoryStartAddress[4] = PNG_VIRTUAL_START_ADDRESS_STREAM_4;
X    u32VirtualMemoryStartAddress[4] = ((0x70000000) + 0x4*(0x00800000));
N    u32VirtualMemoryStartAddress[5] = PNG_VIRTUAL_START_ADDRESS_STREAM_5;
X    u32VirtualMemoryStartAddress[5] = ((0x70000000) + 0x5*(0x00800000));
N    u32VirtualMemoryStartAddress[6] = PNG_VIRTUAL_START_ADDRESS_STREAM_6;
X    u32VirtualMemoryStartAddress[6] = ((0x70000000) + 0x6*(0x00800000));
N    u32VirtualMemoryStartAddress[7] = PNG_VIRTUAL_START_ADDRESS_STREAM_7;
X    u32VirtualMemoryStartAddress[7] = ((0x70000000) + 0x7*(0x00800000));
N}   
N
N/****************************************************************************/
N
Nint32_t i32PNG_SetUpStream(png_stream_e eStream, uint32_t u32StartAddress, png_decode_mode_e eDecodeMode, png_decoded_output_format_e eOutputFormat, uint32_t u32Width, uint32_t u32Height)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    /* check if the stream is in allowed range: */
N    if (eStream > PNG_STREAM_7)
N    {
N        i32Res = C_FAILED;
X        i32Res = (-1);
N    }
N    else
N    {
N        /* reset png-decoder */
N        vSetPNGSCTRL_SRST(eStream);
X        (((volatile PNGSCTRL_bit_view_st *)(0xC0C04080U + ((uint16_t)(eStream) * 0x0100U))) -> SRST=(1));
N
N        if (biGetPNGSSTAT_PHASE(eStream) == 0)
X        if ((((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> PHASE) == 0)
N        {
N            /* SWB buffer */
N            vSetPNGSWBSA_SA(eStream, u32SWBBufferStartAddress[eStream]);
X            (((volatile PNGSWBSA_bit_view_st *)(0xC0C040A4U + ((uint16_t)(eStream) * 0x0100U))) -> SA=(u32SWBBufferStartAddress[eStream]));
N
N            /* FSB buffer */
N            vSetPNGFSBSA_SA(eStream, u32FSBBufferStartAddress[eStream]);
X            (((volatile PNGFSBSA_bit_view_st *)(0xC0C040A8U + ((uint16_t)(eStream) * 0x0100U))) -> SA=(u32FSBBufferStartAddress[eStream]));
N
N            /* Decoded Stream Virtual Start Address */
N            vSetPNGDSVSA_SA(eStream, u32VirtualMemoryStartAddress[eStream]);
X            (((volatile PNGDSVSA_bit_view_st *)(0xC0C040ACU + ((uint16_t)(eStream) * 0x0100U))) -> SA=(u32VirtualMemoryStartAddress[eStream]));
N
N            /* set start address of input stream */
N            vSetPNGSSBSA_SA(eStream, u32StartAddress);
X            (((volatile PNGSSBSA_bit_view_st *)(0xC0C040A0U + ((uint16_t)(eStream) * 0x0100U))) -> SA=(u32StartAddress));
N
N            /* decoded output format */
N            vSetPNGSOF_FSEL(eStream, eOutputFormat);
X            (((volatile PNGSOF_bit_view_st *)(0xC0C04084U + ((uint16_t)(eStream) * 0x0100U))) -> FSEL=(eOutputFormat));
N
N            /* set virtual memory end address */
N            vSetPNGDSVEA_EA(eStream, u32VirtualMemoryStartAddress[eStream] + 4 * u32Width * u32Height);
X            (((volatile PNGDSVEA_bit_view_st *)(0xC0C040B0U + ((uint16_t)(eStream) * 0x0100U))) -> EA=(u32VirtualMemoryStartAddress[eStream] + 4 * u32Width * u32Height));
N
N            /* set decode mode */
N            vSetPNGSCTRL_LOOP(eStream, eDecodeMode);
X            (((volatile PNGSCTRL_bit_view_st *)(0xC0C04080U + ((uint16_t)(eStream) * 0x0100U))) -> LOOP=(eDecodeMode));
N         
N            /* start stream */
N            vSetPNGSCTRL_TRIG(eStream, 0x1U);
X            (((volatile PNGSCTRL_bit_view_st *)(0xC0C04080U + ((uint16_t)(eStream) * 0x0100U))) -> TRIG=(0x1U));
N        }
N        else
N        {
N            i32Res = C_FAILED;
X            i32Res = (-1);
N        }
N    }
N
N
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetModuleVersion(void)
N{
N   return biGetPNGVER_VERSION();
X   return (((volatile PNGVER_bit_view_st *)(0xC0C04000U )) -> VERSION);
N}
N
N/****************************************************************************/
N
Nvoid vPNG_SetIntType(png_int_type_e eIntType)
N{
N    vSetPNGGCTRL_IPRE(eIntType);
X    (((volatile PNGGCTRL_bit_view_st *)(0xC0C04004U )) -> IPRE=(eIntType));
N}
N
N/****************************************************************************/
N
Nint32_t i32PNG_EnableGlobalInterruptSingle(png_int_e eInt, png_enable_e eEn)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    switch (eInt)
N    {
N        case PNG_INT_VSWAEI:
N            {
N                vSetPNGGINTE_VSWAEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> VSWAEIE=(eEn));
N            }
N            break;
N        case PNG_INT_VSUAEI:
N            {
N                vSetPNGGINTE_VSUAEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> VSUAEIE=(eEn));
N            }
N            break;
N        case PNG_INT_CW2ROEI:
N            {
N                vSetPNGGINTE_CW2ROEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> CW2ROEIE=(eEn));
N            }
N            break;
N        case PNG_INT_CRSVAEI:
N            {
N                vSetPNGGINTE_CRSVAEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> CRSVAEIE=(eEn));
N            }
N            break;
N        case PNG_INT_CPEI:
N            {
N                vSetPNGGINTE_CPEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> CPEIE=(eEn));
N            }
N            break;
N        case PNG_INT_SWBEI:
N            {
N                vSetPNGGINTE_SWBEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> SWBEIE=(eEn));
N            }
N            break;
N        case PNG_INT_SSBEI:
N            {
N                vSetPNGGINTE_SSBEIE(eEn);
X                (((volatile PNGGINTE_bit_view_st *)(0xC0C04008U )) -> SSBEIE=(eEn));
N            }
N            break;
N        default:
N            {
N                i32Res = C_FAILED;
X                i32Res = (-1);
N            }
N            break;
N    }
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
Nint32_t i32PNG_EnableStreamInterruptSingle(png_stream_e eStream, png_int_e eInt, png_enable_e eEn)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    switch (eInt)
N    {
N        case PNG_INT_BJMPEI:
N            {
N                vSetPNGSINTE_BJMPEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> BJMPEIE=(eEn));
N            }
N            break;
N        case PNG_INT_UFMTEI:
N            {
N                vSetPNGSINTE_UFMTEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> UFMTEIE=(eEn));
N            }
N            break;
N        case PNG_INT_OOCEI:
N            {
N                vSetPNGSINTE_OOCEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> OOCEIE=(eEn));
N            }
N            break;
N        case PNG_INT_CHSEI:
N            {
N                vSetPNGSINTE_CHSEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> CHSEIE=(eEn));
N            }
N            break;
N        case PNG_INT_EYEOSEI:
N            {
N                vSetPNGSINTE_EYEOSEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> EYEOSEIE=(eEn));
N            }
N            break;
N        case PNG_INT_NOEOSEI:
N            {
N                vSetPNGSINTE_NOEOSEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> NOEOSEIE=(eEn));
N            }
N            break;
N        case PNG_INT_CMPEI:
N            {
N                vSetPNGSINTE_CMPEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> CMPEIE=(eEn));
N            }
N            break;
N        case PNG_INT_BTYPEEI:
N            {
N                vSetPNGSINTE_BTYPEEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> BTYPEEIE=(eEn));
N            }
N            break;
N        case PNG_INT_DISTEI:
N            {
N                vSetPNGSINTE_DISTEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> DISTEIE=(eEn));
N            }
N            break;
N        case PNG_INT_NCBSEI:
N            {
N                vSetPNGSINTE_NCBSEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> NCBSEIE=(eEn));
N            }
N            break;
N        case PNG_INT_DECEI:
N            {
N                vSetPNGSINTE_DECEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> DECEIE=(eEn));
N            }
N            break;
N        case PNG_INT_FJMPWI:
N            {
N                vSetPNGSINTE_FJMPWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> FJMPWIE=(eEn));
N            }
N            break;
N        case PNG_INT_UCHNKWI:
N            {
N                vSetPNGSINTE_UCHNKWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> UCHNKWIE=(eEn));
N            }
N            break;
N        case PNG_INT_PDICTWI:
N            {
N                vSetPNGSINTE_PDICTWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> PDICTWIE=(eEn));
N            }
N            break;
N        case PNG_INT_ULLWI:
N            {
N                vSetPNGSINTE_ULLWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> ULLWIE=(eEn));
N            }
N            break;
N        case PNG_INT_UDISTWI:
N            {
N                vSetPNGSINTE_UDISTWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> UDISTWIE=(eEn));
N            }
N            break;
N        case PNG_INT_OFCWI:
N            {
N                vSetPNGSINTE_OFCWIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> OFCWIE=(eEn));
N            }
N            break;
N        case PNG_INT_IHDRDI:
N            {
N                vSetPNGSINTE_IHDRDIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> IHDRDIE=(eEn));
N            }
N            break;
N        case PNG_INT_PLTEDI:
N            {
N                vSetPNGSINTE_PLTEDIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> PLTEDIE=(eEn));
N            }
N            break;
N        case PNG_INT_IDATDI:
N            {
N                vSetPNGSINTE_IDATDIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> IDATDIE=(eEn));
N            }
N            break;
N        case PNG_INT_IENDDI:
N            {
N                vSetPNGSINTE_IENDDIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> IENDDIE=(eEn));
N            }
N            break;
N        case PNG_INT_DCDSI:
N            {
N                vSetPNGSINTE_DCDSIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> DCDSIE=(eEn));
N            }
N            break;
N        case PNG_INT_SIDLEI:
N            {
N                vSetPNGSINTE_SIDLEIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> SIDLEIE=(eEn));
N            }
N            break;
N        case PNG_INT_DSFFULLIE:
N            {
N                vSetPNGSINTE_DSFFULLIE(eStream, eEn);
X                (((volatile PNGSINTE_bit_view_st *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) -> DSFFULLIE=(eEn));
N            }
N            break;
N        default:
N            {
N                i32Res = C_FAILED;
X                i32Res = (-1);
N            }
N            break;
N    }
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
Nvoid vPNG_EnableGlobalInterruptAll(uint8_t u8Value)
N{
N    vSetPNGGINTELL(u8Value);
X    (((volatile PNGGINTE_byte_view_st *)(0xC0C04008U )) -> u8LL = (u8Value));
N}
N
N/****************************************************************************/
N
Nvoid vPNG_EnableStreamInterruptAll(png_stream_e eStream, uint32_t u32Value)
N{
N    vSetPNGSINTE(eStream, u32Value);
X    (*((volatile u32PNGSINTE_word_view *)(0xC0C040C4U + ((uint16_t)(eStream) * 0x0100U))) = (u32Value));
N}
N
N/****************************************************************************/
N
Nint32_t i32PNG_GetGlobalInterruptStatusSingle(png_int_e eInt, png_int_status_e * peIntStatus)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    if (0x00 != peIntStatus)
N    {
N        switch (eInt)
N        {
N            case PNG_INT_VSWAEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_VSWAEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> VSWAEIS);
N                }
N                break;
N            case PNG_INT_VSUAEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_VSUAEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> VSUAEIS);
N                }
N                break;
N            case PNG_INT_CW2ROEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_CW2ROEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> CW2ROEIS);
N                }
N                break;
N            case PNG_INT_CRSVAEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_CRSVAEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> CRSVAEIS);
N                }
N                break;
N            case PNG_INT_CPEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_CPEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> CPEIS);
N                }
N                break;
N            case PNG_INT_SWBEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_SWBEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> SWBEIS);
N                }
N                break;
N            case PNG_INT_SSBEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGGINTS_SSBEIS();
X                    *peIntStatus = (png_int_status_e)(((volatile PNGGINTS_bit_view_st *)(0xC0C0400CU )) -> SSBEIS);
N                }
N                break;
N            default:
N                {
N                    i32Res = C_FAILED;
X                    i32Res = (-1);
N                }
N                break;
N        }
N    }
N    else
N    {
N        i32Res = C_FAILED;
X        i32Res = (-1);
N    }
N
N    return i32Res;
N}
N/****************************************************************************/
N
Nint32_t i32PNG_GetStreamInterruptStatusSingle(png_stream_e eStream, png_int_e eInt, png_int_status_e * peIntStatus)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N
N    if (0x00 != peIntStatus)
N    {
N        switch (eInt)
N        {
N            case PNG_INT_BJMPEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_BJMPEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> BJMPEIS);
N                }
N                break;
N            case PNG_INT_UFMTEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_UFMTEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> UFMTEIS);
N                }
N                break;
N            case PNG_INT_OOCEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_OOCEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> OOCEIS);
N                }
N                break;
N            case PNG_INT_CHSEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_CHSEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> CHSEIS);
N                }
N                break;
N            case PNG_INT_EYEOSEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_EYEOSEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> EYEOSEIS);
N                }
N                break;
N            case PNG_INT_NOEOSEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_NOEOSEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> NOEOSEIS);
N                }
N                break;
N            case PNG_INT_CMPEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_CMPEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> CMPEIS);
N                }
N                break;
N            case PNG_INT_BTYPEEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_BTYPEEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> BTYPEEIS);
N                }
N                break;
N            case PNG_INT_DISTEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_DISTEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> DISTEIS);
N                }
N                break;
N            case PNG_INT_NCBSEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_NCBSEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> NCBSEIS);
N                }
N                break;
N            case PNG_INT_DECEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_DECEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> DECEIS);
N                }
N                break;
N            case PNG_INT_FJMPWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_FJMPWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> FJMPWIS);
N                }
N                break;
N            case PNG_INT_UCHNKWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_UCHNKWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> UCHNKWIS);
N                }
N                break;
N            case PNG_INT_PDICTWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_PDICTWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> PDICTWIS);
N                }
N                break;
N            case PNG_INT_ULLWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_ULLWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> ULLWIS);
N                }
N                break;
N            case PNG_INT_UDISTWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_UDISTWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> UDISTWIS);
N                }
N                break;
N            case PNG_INT_OFCWI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_OFCWIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> OFCWIS);
N                }
N                break;
N            case PNG_INT_IHDRDI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_IHDRDIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> IHDRDIS);
N                }
N                break;
N            case PNG_INT_PLTEDI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_PLTEDIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> PLTEDIS);
N                }
N                break;
N            case PNG_INT_IDATDI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_IDATDIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> IDATDIS);
N                }
N                break;
N            case PNG_INT_IENDDI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_IENDDIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> IENDDIS);
N                }
N                break;
N            case PNG_INT_DCDSI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_DCDSIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> DCDSIS);
N                }
N                break;
N            case PNG_INT_SIDLEI:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_SIDLEIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> SIDLEIS);
N                }
N                break;
N            case PNG_INT_DSFFULLIE:
N                {
N                    *peIntStatus = (png_int_status_e)biGetPNGSINTS_DSFFULLIS(eStream);
X                    *peIntStatus = (png_int_status_e)(((volatile PNGSINTS_bit_view_st *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) -> DSFFULLIS);
N                }
N                break;
N            default:
N                {
N                    i32Res = C_FAILED;
X                    i32Res = (-1);
N                }
N                break;
N        }
N    }
N    else
N    {
N        i32Res = C_FAILED;
X        i32Res = (-1);
N    }
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
Nuint8_t u8PNG_GetGlobalInterruptStatusAll(void)
N{
N    return u8GetPNGGINTSLL();
X    return (((volatile PNGGINTS_byte_view_st *)(0xC0C0400CU )) -> u8LL);
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetStreamInterruptStatusAll(png_stream_e eStream)
N{
N    return u32GetPNGSINTS(eStream);
X    return (*((volatile u32PNGSINTS_word_view *)(0xC0C040C8U + ((uint16_t)(eStream) * 0x0100U))) );
N}
N
N/****************************************************************************/
N
Nint32_t i32PNG_ClearGlobalInterruptSingle(png_int_e eInt)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    switch (eInt)
N    {
N        case PNG_INT_VSWAEI:
N            {
N                vClrPNGGINTC_VSWAEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> VSWAEIC = (1));
N            }
N            break;
N        case PNG_INT_VSUAEI:
N            {
N                vClrPNGGINTC_VSUAEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> VSUAEIC = (1));
N            }
N            break;
N        case PNG_INT_CW2ROEI:
N            {
N                vClrPNGGINTC_CW2ROEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> CW2ROEIC = (1));
N            }
N            break;
N        case PNG_INT_CRSVAEI:
N            {
N                vClrPNGGINTC_CRSVAEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> CRSVAEIC = (1));
N            }
N            break;
N        case PNG_INT_CPEI:
N            {
N                vClrPNGGINTC_CPEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> CPEIC = (1));
N            }
N            break;
N        case PNG_INT_SWBEI:
N            {
N                vClrPNGGINTC_SWBEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> SWBEIC = (1));
N            }
N            break;
N        case PNG_INT_SSBEI:
N            {
N                vClrPNGGINTC_SSBEIC();
X                (((volatile PNGGINTC_bit_view_st *)(0xC0C04010U )) -> SSBEIC = (1));
N            }
N            break;
N        default:
N            {
N                i32Res = C_FAILED;
X                i32Res = (-1);
N            }
N            break;
N    }
N
N    return i32Res;
N}
N/****************************************************************************/
N
Nint32_t i32PNG_ClearStreamInterruptSingle(png_stream_e eStream, png_int_e eInt)
N{
N    int32_t i32Res = C_SUCCESS;
X    int32_t i32Res = (0);
N
N    switch (eInt)
N    {
N        case PNG_INT_BJMPEI:
N            {
N                vClrPNGSINTC_BJMPEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> BJMPEIC = (1));
N            }
N            break;
N        case PNG_INT_UFMTEI:
N            {
N                vClrPNGSINTC_UFMTEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> UFMTEIC = (1));
N            }
N            break;
N        case PNG_INT_OOCEI:
N            {
N                vClrPNGSINTC_OOCEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> OOCEIC = (1));
N            }
N            break;
N        case PNG_INT_CHSEI:
N            {
N                vClrPNGSINTC_CHSEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> CHSEIC = (1));
N            }
N            break;
N        case PNG_INT_EYEOSEI:
N            {
N                vClrPNGSINTC_EYEOSEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> EYEOSEIC = (1));
N            }
N            break;
N        case PNG_INT_NOEOSEI:
N            {
N                vClrPNGSINTC_NOEOSEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> NOEOSEIC = (1));
N            }
N            break;
N        case PNG_INT_CMPEI:
N            {
N                vClrPNGSINTC_CMPEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> CMPEIC = (1));
N            }
N            break;
N        case PNG_INT_BTYPEEI:
N            {
N                vClrPNGSINTC_BTYPEEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> BTYPEEIC = (1));
N            }
N            break;
N        case PNG_INT_DISTEI:
N            {
N                vClrPNGSINTC_DISTEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> DISTEIC = (1));
N            }
N            break;
N        case PNG_INT_NCBSEI:
N            {
N                vClrPNGSINTC_NCBSEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> NCBSEIC = (1));
N            }
N            break;
N        case PNG_INT_DECEI:
N            {
N                vClrPNGSINTC_DECEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> DECEIC = (1));
N            }
N            break;
N        case PNG_INT_FJMPWI:
N            {
N                vClrPNGSINTC_FJMPWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> FJMPWIC = (1));
N            }
N            break;
N        case PNG_INT_UCHNKWI:
N            {
N                vClrPNGSINTC_UCHNKWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> UCHNKWIC = (1));
N            }
N            break;
N        case PNG_INT_PDICTWI:
N            {
N                vClrPNGSINTC_PDICTWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> PDICTWIC = (1));
N            }
N            break;
N        case PNG_INT_ULLWI:
N            {
N                vClrPNGSINTC_ULLWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> ULLWIC = (1));
N            }
N            break;
N        case PNG_INT_UDISTWI:
N            {
N                vClrPNGSINTC_UDISTWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> UDISTWIC = (1));
N            }
N            break;
N        case PNG_INT_OFCWI:
N            {
N                vClrPNGSINTC_OFCWIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> OFCWIC = (1));
N            }
N            break;
N        case PNG_INT_IHDRDI:
N            {
N                vClrPNGSINTC_IHDRDIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> IHDRDIC = (1));
N            }
N            break;
N        case PNG_INT_PLTEDI:
N            {
N                vClrPNGSINTC_PLTEDIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> PLTEDIC = (1));
N            }
N            break;
N        case PNG_INT_IDATDI:
N            {
N                vClrPNGSINTC_IDATDIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> IDATDIC = (1));
N            }
N            break;
N        case PNG_INT_IENDDI:
N            {
N                vClrPNGSINTC_IENDDIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> IENDDIC = (1));
N            }
N            break;
N        case PNG_INT_DCDSI:
N            {
N                vClrPNGSINTC_DCDSIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> DCDSIC = (1));
N            }
N            break;
N        case PNG_INT_SIDLEI:
N            {
N                vClrPNGSINTC_SIDLEIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> SIDLEIC = (1));
N            }
N            break;
N        case PNG_INT_DSFFULLIE:
N            {
N                vClrPNGSINTC_DSFFULLIC(eStream);
X                (((volatile PNGSINTC_bit_view_st *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) -> DSFFULLIC = (1));
N            }
N            break;
N        default:
N            {
N                i32Res = C_FAILED;
X                i32Res = (-1);
N            }
N            break;
N    }
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
Nvoid vPNG_ClearGlobalInterruptAll(void)
N{
N    vSetPNGGINTCLL(PNG_GLOBAL_ALLINTR_MASK);
X    (((volatile PNGGINTC_byte_view_st *)(0xC0C04010U )) -> u8LL = (0x7FU));
N}
N
N/****************************************************************************/
N
Nvoid vPNG_ClearStreamInterruptAll(png_stream_e eStream)
N{
N    vSetPNGSINTC(eStream, PNG_STREAM_ALLINTR_MASK);
X    (*((volatile u32PNGSINTC_word_view *)(0xC0C040CCU + ((uint16_t)(eStream) * 0x0100U))) = (0xFFFFFFFFU));
N}
N
N/****************************************************************************/
Nvoid vPNG_ResetStream(png_stream_e eStream)
N{
N    vSetPNGSCTRL_SRST(eStream);
X    (((volatile PNGSCTRL_bit_view_st *)(0xC0C04080U + ((uint16_t)(eStream) * 0x0100U))) -> SRST=(1));
N}
N
N/****************************************************************************/
Nbool_t boPNG_GetBusError(png_bus_error_type_e eErrType, png_bus_error_st *pstBussError)
N{
N    bool_t boResult = C_TRUE;
X    bool_t boResult = (1);
N
N    if ((0x00 == pstBussError) || (eErrType > PNG_SOURCE_STREAM_ERR))
N    {
N        boResult = C_FALSE;
X        boResult = (0);
N    }
N    else
N    {
N        if (PNG_SLIDING_WINDOW_ERR == eErrType)
N        {
N            pstBussError->u32ErrAddress = (uint32_t)            biGetPNGSWBEA_ADDR();
X            pstBussError->u32ErrAddress = (uint32_t)            (((volatile PNGSWBEA_bit_view_st *)(0xC0C04014U )) -> ADDR);
N            pstBussError->eRWdir        = (png_transfer_type_e) biGetPNGSWBEC_WR();
X            pstBussError->eRWdir        = (png_transfer_type_e) (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> WR);
N            pstBussError->eBurstType    = (png_burst_type_e)    biGetPNGSWBEC_BTYPE();
X            pstBussError->eBurstType    = (png_burst_type_e)    (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> BTYPE);
N            pstBussError->eBurstSize    = (png_burst_size_e)    biGetPNGSWBEC_BSIZE();
X            pstBussError->eBurstSize    = (png_burst_size_e)    (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> BSIZE);
N            pstBussError->eRespType     = (png_response_type_e) biGetPNGSWBEC_RTYPE();
X            pstBussError->eRespType     = (png_response_type_e) (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> RTYPE);
N            pstBussError->eByteEnable   = (png_enable_e)        biGetPNGSWBEC_BEN();
X            pstBussError->eByteEnable   = (png_enable_e)        (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> BEN);
N            pstBussError->u8ID          = (uint8_t)             biGetPNGSWBEC_ID();
X            pstBussError->u8ID          = (uint8_t)             (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> ID);
N            pstBussError->u8BurstLen    = (uint8_t)             biGetPNGSWBEC_LEN();
X            pstBussError->u8BurstLen    = (uint8_t)             (((volatile PNGSWBEC_bit_view_st *)(0xC0C04018U )) -> LEN);
N        }
N        else
N        {
N            pstBussError->u32ErrAddress = (uint32_t)            biGetPNGSSBEA_ADDR();
X            pstBussError->u32ErrAddress = (uint32_t)            (((volatile PNGSSBEA_bit_view_st *)(0xC0C0401CU )) -> ADDR);
N            pstBussError->eRWdir        = (png_transfer_type_e) biGetPNGSSBEC_WR();
X            pstBussError->eRWdir        = (png_transfer_type_e) (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> WR);
N            pstBussError->eBurstType    = (png_burst_type_e)    biGetPNGSSBEC_BTYPE();
X            pstBussError->eBurstType    = (png_burst_type_e)    (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> BTYPE);
N            pstBussError->eBurstSize    = (png_burst_size_e)    biGetPNGSSBEC_BSIZE();
X            pstBussError->eBurstSize    = (png_burst_size_e)    (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> BSIZE);
N            pstBussError->eRespType     = (png_response_type_e) biGetPNGSSBEC_RTYPE();
X            pstBussError->eRespType     = (png_response_type_e) (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> RTYPE);
N            pstBussError->eByteEnable   = (png_enable_e)        biGetPNGSSBEC_BEN();
X            pstBussError->eByteEnable   = (png_enable_e)        (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> BEN);
N            pstBussError->u8ID          = (uint8_t)             biGetPNGSSBEC_ID();
X            pstBussError->u8ID          = (uint8_t)             (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> ID);
N            pstBussError->u8BurstLen    = (uint8_t)             biGetPNGSSBEC_LEN();
X            pstBussError->u8BurstLen    = (uint8_t)             (((volatile PNGSSBEC_bit_view_st *)(0xC0C04020U )) -> LEN);
N        }
N    }
N    return boResult;
N}
N
N/****************************************************************************/
Npng_phase_status_e ePNG_GetStreamPhaseStatus (png_stream_e eStream)
N{
N    return ((png_phase_status_e)biGetPNGSSTAT_PHASE(eStream));
X    return ((png_phase_status_e)(((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> PHASE));
N}
N
N/****************************************************************************/
Nbool_t boPNG_GetStreamStatus (png_stream_e eStream, png_stream_status_st *pstStreamStatus)
N{
N    bool_t boResult = C_TRUE;
X    bool_t boResult = (1);
N
N    if ( (0x00 == pstStreamStatus) || (eStream > PNG_STREAM_7) )
N    {
N        boResult = C_FALSE;
X        boResult = (0);
N    }
N    else
N    {
N        pstStreamStatus->ePhase          = (png_phase_status_e) biGetPNGSSTAT_PHASE(eStream);
X        pstStreamStatus->ePhase          = (png_phase_status_e) (((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> PHASE);
N        pstStreamStatus->ePalTableLoad   = (png_pt_loaded_e) biGetPNGSSTAT_PTL(eStream);
X        pstStreamStatus->ePalTableLoad   = (png_pt_loaded_e) (((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> PTL);
N        pstStreamStatus->eTypeOfChunk    = (png_chunk_e) biGetPNGSSTAT_CHUNK(eStream);
X        pstStreamStatus->eTypeOfChunk    = (png_chunk_e) (((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> CHUNK);
N        pstStreamStatus->u16NoPalEntries  = (uint16_t) biGetPNGSSTAT_NPE(eStream);
X        pstStreamStatus->u16NoPalEntries  = (uint16_t) (((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> NPE);
N        pstStreamStatus->u8NoIdatChunks  = (uint8_t) biGetPNGSSTAT_NIDAT(eStream);
X        pstStreamStatus->u8NoIdatChunks  = (uint8_t) (((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> NIDAT);
N    }
N    return boResult;
N}
N
N/****************************************************************************/
Nbool_t boPNG_GetStreamIhdrInfo (png_stream_e eStream, png_stream_ihdr_info_st *pstStreamIhdrInfo)
N{
N    bool_t boResult = C_TRUE;
X    bool_t boResult = (1);
N
N    if ( (0x00 == pstStreamIhdrInfo) || (eStream > PNG_STREAM_7) )
N    {
N        boResult = C_FALSE;
X        boResult = (0);
N    }
N    else
N    {
N        pstStreamIhdrInfo->eBitDepth       = (png_bit_depth_e) biGetPNGSIHDR_BITDEPTH(eStream);
X        pstStreamIhdrInfo->eBitDepth       = (png_bit_depth_e) (((volatile PNGSIHDR_bit_view_st *)(0xC0C0408CU + ((uint16_t)(eStream) * 0x0100U))) -> BITDEPTH);
N        pstStreamIhdrInfo->eColorType      = (png_color_format_e) biGetPNGSIHDR_CLRTYP(eStream);
X        pstStreamIhdrInfo->eColorType      = (png_color_format_e) (((volatile PNGSIHDR_bit_view_st *)(0xC0C0408CU + ((uint16_t)(eStream) * 0x0100U))) -> CLRTYP);
N        pstStreamIhdrInfo->u8ComprMethod   = (uint8_t) biGetPNGSIHDR_CMPMTH(eStream);
X        pstStreamIhdrInfo->u8ComprMethod   = (uint8_t) (((volatile PNGSIHDR_bit_view_st *)(0xC0C0408CU + ((uint16_t)(eStream) * 0x0100U))) -> CMPMTH);
N        pstStreamIhdrInfo->u8FilterMethod  = (uint8_t) biGetPNGSIHDR_FLTMTH(eStream);
X        pstStreamIhdrInfo->u8FilterMethod  = (uint8_t) (((volatile PNGSIHDR_bit_view_st *)(0xC0C0408CU + ((uint16_t)(eStream) * 0x0100U))) -> FLTMTH);
N        pstStreamIhdrInfo->u8InterlMethod  = (uint8_t) biGetPNGSIHDR_INTMTH(eStream);
X        pstStreamIhdrInfo->u8InterlMethod  = (uint8_t) (((volatile PNGSIHDR_bit_view_st *)(0xC0C0408CU + ((uint16_t)(eStream) * 0x0100U))) -> INTMTH);
N    }
N    return boResult;
N}
N
N/****************************************************************************/
N
Nbool_t boPNG_GetStreamZlibInfo (png_stream_e eStream, png_stream_zlib_info_st *pstStreamZlibInfo)
N{
N    bool_t boResult = C_TRUE;
X    bool_t boResult = (1);
N
N    if ( (0x00 == pstStreamZlibInfo) || (eStream > PNG_STREAM_7) )
N    {
N        boResult = C_FALSE;
X        boResult = (0);
N    }
N    else
N    {
N        pstStreamZlibInfo->u8ComprMethod = (uint8_t) biGetPNGSZHDR_CM(eStream);
X        pstStreamZlibInfo->u8ComprMethod = (uint8_t) (((volatile PNGSZHDR_bit_view_st *)(0xC0C04090U + ((uint16_t)(eStream) * 0x0100U))) -> CM);
N        pstStreamZlibInfo->u8ComprInfo   = (uint8_t) biGetPNGSZHDR_CINFO(eStream);
X        pstStreamZlibInfo->u8ComprInfo   = (uint8_t) (((volatile PNGSZHDR_bit_view_st *)(0xC0C04090U + ((uint16_t)(eStream) * 0x0100U))) -> CINFO);
N        pstStreamZlibInfo->u8CheckBits   = (uint8_t) biGetPNGSZHDR_FCHECK(eStream);
X        pstStreamZlibInfo->u8CheckBits   = (uint8_t) (((volatile PNGSZHDR_bit_view_st *)(0xC0C04090U + ((uint16_t)(eStream) * 0x0100U))) -> FCHECK);
N        pstStreamZlibInfo->u8Fdict       = (uint8_t) biGetPNGSZHDR_FDICT(eStream);
X        pstStreamZlibInfo->u8Fdict       = (uint8_t) (((volatile PNGSZHDR_bit_view_st *)(0xC0C04090U + ((uint16_t)(eStream) * 0x0100U))) -> FDICT);
N        pstStreamZlibInfo->u8Flevel      = (uint8_t) biGetPNGSZHDR_FLEVEL(eStream);
X        pstStreamZlibInfo->u8Flevel      = (uint8_t) (((volatile PNGSZHDR_bit_view_st *)(0xC0C04090U + ((uint16_t)(eStream) * 0x0100U))) -> FLEVEL);
N    }
N    return boResult;
N}
N
N/****************************************************************************/
Nbool_t boPNG_GetImageSize(png_stream_e eStream, uint32_t *pu32Width, uint32_t *pu32Height)
N{
N    bool_t boRes = C_TRUE;
X    bool_t boRes = (1);
N    if ( (0x00 != pu32Width) && (0x00 != pu32Height))
N    {
N        *pu32Width  = biGetPNGSW_WIDTH(eStream);
X        *pu32Width  = (((volatile PNGSW_bit_view_st *)(0xC0C04098U + ((uint16_t)(eStream) * 0x0100U))) -> WIDTH);
N        *pu32Height = biGetPNGSH_HEIGHT(eStream);
X        *pu32Height = (((volatile PNGSH_bit_view_st *)(0xC0C04094U + ((uint16_t)(eStream) * 0x0100U))) -> HEIGHT);
N    }
N    else
N    {
N        boRes = C_FALSE;
X        boRes = (0);
N    }
N    return boRes;
N}
N
N/****************************************************************************/
Nuint8_t u8PNG_GetDecodedStreamFIFOFillLevel(png_stream_e eStream)
N{
N    return ((uint8_t)biGetPNGDSFLVL_DSFLEVEL(eStream));
X    return ((uint8_t)(((volatile PNGDSFLVL_bit_view_st *)(0xC0C0409CU + ((uint16_t)(eStream) * 0x0100U))) -> DSFLEVEL));
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetSSBCurrentAddress(png_stream_e eStream)
N{
N    return ((uint32_t)biGetPNGSSBCA_CA(eStream));
X    return ((uint32_t)(((volatile PNGSSBCA_bit_view_st *)(0xC0C040B4U + ((uint16_t)(eStream) * 0x0100U))) -> CA));
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetSWBCurrentAddress(png_stream_e eStream)
N{
N    return ((uint32_t)biGetPNGSWBCA_CA(eStream));
X    return ((uint32_t)(((volatile PNGSWBCA_bit_view_st *)(0xC0C040B8U + ((uint16_t)(eStream) * 0x0100U))) -> CA));
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetFSBStartAddress(png_stream_e eStream)
N{
N    return ((uint32_t)biGetPNGFSBCA_CA(eStream));
X    return ((uint32_t)(((volatile PNGFSBCA_bit_view_st *)(0xC0C040BCU + ((uint16_t)(eStream) * 0x0100U))) -> CA));
N}
N
N/****************************************************************************/
N
Nuint32_t u32PNG_GetCurrentVirtualOffset(png_stream_e eStream)
N{
N    return ((uint32_t)biGetPNGDSCVA_CA(eStream));
X    return ((uint32_t)(((volatile PNGDSCVA_bit_view_st *)(0xC0C040C0U + ((uint16_t)(eStream) * 0x0100U))) -> CA));
N}
N
N/****************************************************************************/
N
Nint32_t i32PNG_SetPaletteTable(png_stream_e eStream, uint32_t * pu32PaletteTable)
N{
N    uint32_t u32Count;
N    int32_t  i32Res = C_SUCCESS;
X    int32_t  i32Res = (0);
N
N    /* check for valid data buffer pointer */
N    if (C_NULL == pu32PaletteTable)
X    if (((void*)0) == pu32PaletteTable)
N    {
N        i32Res = C_FAILED;
X        i32Res = (-1);
N    }
N    else
N    {
N        /* check if stream is idle */
N        if (biGetPNGSSTAT_PHASE(eStream) == 0)
X        if ((((volatile PNGSSTAT_bit_view_st *)(0xC0C04088U + ((uint16_t)(eStream) * 0x0100U))) -> PHASE) == 0)
N        {
N            switch (eStream)
N            {
N                case PNG_STREAM_0:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT0_PLTVAL0(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT0_bit_view_st *)(0xC0C04C00U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL0=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_1:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT1_PLTVAL1(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT1_bit_view_st *)(0xC0C05000U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL1=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_2:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT2_PLTVAL2(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT2_bit_view_st *)(0xC0C05400U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL2=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_3:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT3_PLTVAL3(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT3_bit_view_st *)(0xC0C05800U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL3=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_4:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT4_PLTVAL4(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT4_bit_view_st *)(0xC0C05C00U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL4=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_5:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT5_PLTVAL5(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT5_bit_view_st *)(0xC0C06000U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL5=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_6:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT6_PLTVAL6(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT6_bit_view_st *)(0xC0C06400U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL6=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                case PNG_STREAM_7:
N                    {
N                        for (u32Count=0; u32Count<256; u32Count++)
N                        {
N                            vSetPNGPLT7_PLTVAL7(u32Count, *(pu32PaletteTable + 4*u32Count));
X                            (((volatile PNGPLT7_bit_view_st *)(0xC0C06800U + ((uint16_t)(u32Count) * 0x4U))) -> PLTVAL7=(*(pu32PaletteTable + 4*u32Count)));
N                        }
N                    }
N                    break;
N                default:
N                    {
N                        i32Res = C_FAILED;
X                        i32Res = (-1);
N                    }
N                    break;
N            }
N        }
N        else
N        {
N            i32Res = C_FAILED;
X            i32Res = (-1);
N        }
N    }
N
N    return i32Res;
N}
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: png.c
N**  $Revision: 1.19 $
N**  $Date: 2015/05/04 09:07:15 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1752 / 17.4 - pointer arithmetic not allowed
N** | CONS.  : allow
N** | REASON : to increment command list pointer 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1847 / 10.3 - cast of complex integer expression with underlying type
N** |                        "type" to non-integer type "type" not allowed 
N** | CONS.  : disable
N** | REASON : to use macros from i/o header files, unavoidable when addressing 
N** |          memory mapped registers 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1864 /10.1  - implicit conversion from underlying type, "type", 
N** |                        to narrower underlying type, "type", not allowed
N** | CONS.  : allow
N** | REASON : to use macros from i/o header files 
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1865 /10.1  -  implicit conversion from underlying type, "type", 
N** |                         to same width underlying type, "type", not allowed
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1866 /10.1  -  implicit conversion from underlying type, "type",  
N** |                         to underlying type, "type", changes signedness
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 1867 /10.1  -  implicit conversion from underlying type, "type", 
N** |                         to underlying type, "type", changes signedness
N** | CONS.  : allow
N** | REASON : for usage of macros from io header files or assign parameters
N** |
N**  ------------------------------------------------------------------------
N*****************************************************************************
N****************************************************************************/
N
N/****************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
