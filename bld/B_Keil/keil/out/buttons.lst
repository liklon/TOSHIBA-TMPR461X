L 1 "..\..\usecases\src\buttons.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: buttons.c,v $
N*   Description : Button handling
N*****************************************************************************
N*   PROJECT     : FPK-demo
N*   MODULE      : Buttons
N*   TAG         : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.5 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/12/17 15:17:49 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Demo_7inch/usecases/src/buttons.c,v $
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "buttons.h"
L 1 "..\..\usecases\inc\buttons.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N*****************************************************************************
N*   File Name   : $RCSfile: buttons.h,v $
N*   Description : Button handling
N*****************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : Buttons
N*   TAG         : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N*****************************************************************************
N*   VERSION     : $Revision: 1.2 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/12/17 15:17:49 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Demo_7inch/usecases/inc/buttons.h,v $
N****************************************************************************/
N#ifndef _BUTTONS_H
N#define _BUTTONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 27 "..\..\usecases\inc\buttons.h" 2
N#include "config.h"
L 1 "..\..\inc\config.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: config.h,v $
N*   Description :
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : config
N*               : $Name:  $
N*   LIBRARIES   :
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/config.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef CONFIG_H
N#define CONFIG_H
N
N/*****************************************************************************************
N*                Include files
N*****************************************************************************************/
N#include "mw_definitions.h"
L 1 "..\..\..\..\mw\inc\mw_definitions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : MW specific definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.17 $
N*   DATE        : $Date: 2015/07/03 09:11:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef MW_DEFINITIONS_H
N#define MW_DEFINITIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_DEFINITIONS_H_REVISION     "$Revision: 1.17 $"
N#define MW_DEFINITIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/* general */
N#define ON      1
N#define OFF	    0
N
N/* Resolution Parameters  */
N#define QVGA_RES_50                   (0)
N#define QVGA_RES_60                   (1)
N#define HNTSC_RES_60                  (2)
N#define HVGA_RES_50                   (3)
N#define HVGA_RES_60                   (4)
N#define WIDE_RES_50                   (5)
N#define WIDE_RES_60                   (6)
N#define VGA_RES_50                    (7)
N#define VGA_RES_60                    (8)
N#define WVGA_RES_45                   (9)
N#define WVGA_RES_50                  (10)
N#define WVGA_RES_55                  (11)
N#define WVGA_RES_60                  (12)
N#define SVGA_RES_50                  (13)
N#define SVGA_RES_60                  (14)
N#define DVGA_RES_50                  (15)
N#define DVGA_RES_60                  (16)
N#define DVGA_1_RES_50                (17)
N#define DVGA_1_RES_60                (18)
N#define XGA_RES_50                   (19)
N#define XGA_RES_60                   (20)
N#define SXGA_RES_50                  (21)
N#define SXGA_RES_60                  (22)
N#define HD_RES                       (23)
N#define HITACHI_TX31D06VM2AAA_RES_50 (24)
N#define HITACHI_TX31D06VM2AAA_RES_60 (25)
N#define SHARP_1280_422_50            (26)
N#define SHARP_1280_422_60            (27)
N#define TX18D35VM0AAA_50             (28)
N#define TX18D35VM0AAA_60             (29)
N#define RES_960_720_50               (30) 
N#define AT070TN94_50             (31)
N#define AT070TN94_60             (32)
N#define  TC90195_60   (33)
N#define  CLAA121WB   (34) 
N#define	CLAA088WA	(35)
N/* definition if layer is not used */
N#define FMT_OFF         (0)
N
N/* Data Formats */
N#define FMT_RGBA32      (1)
N#define FMT_RGBA24      (2)
N#define FMT_RGB24       (3)
N#define FMT_RGB16       (4)
N
N#define FMT_GRAY8A     (10)
N#define FMT_GRAY8      (11)
N#define FMT_GRAY2      (12)
N#define FMT_GRAY1      (13)
N#define FMT_A          (14)
N
N#define FMT_RLERGBA32  (15)
N#define FMT_RLERGBA24  (16)
N#define FMT_RLERGB24   (17)
N#define FMT_RLERGB16   (18)
N#define FMT_RLECLUT8   (19)
N#define FMT_RLECLUT6   (20)
N#define FMT_RLECLUT4   (21)
N#define FMT_RLECLUT2   (22)
N#define FMT_RLECLUT1   (23)
N#define FMT_RLEGRAY8A  (24)
N#define FMT_RLEGRAY8   (25)
N#define FMT_RLEGRAY2   (26)
N#define FMT_RLEGRAY1   (27)
N#define FMT_RLEA       (28)
N
N#define FMT_PNGRGBA32  (29)
N#define FMT_PNGRGB24   (30)
N#define FMT_PNGCLUT8   (31)
N#define FMT_PNGCLUT4   (32)
N#define FMT_PNGCLUT2   (33)
N#define FMT_PNGCLUT1   (34)
N#define FMT_PNGGRAY8A  (35)
N#define FMT_PNGGRAY8   (36)
N#define FMT_PNGGRAY4   (37)
N#define FMT_PNGGRAY2   (38)
N#define FMT_PNGGRAY1   (39)
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/*********************************************/
N
N#endif /* MW_DEFINITIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\inc\config.h" 2
N#include "qspi.h"
L 1 "..\..\..\..\hldd\inc\qspi.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     : TSM-Driver
N*   MODULE      : General
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/06/24 15:14:52 $
N*   TAG         : $Name: HLDD_1_1 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _QSPI_H
N#define _QSPI_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "qspic.h"
L 1 "..\..\..\..\lldd\inc\qspic.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI controler low level register access
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : QSPI
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.35 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef QSPIC_H
N#define QSPIC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_QSPIC_H_REVISION     "$Revision: 1.35 $"
N#define LLDD_QSPIC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : disable No reuse of identifiers */
N#endif
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
Ntypedef enum tag_qspic_cntrl_e
N{
N#ifdef FPGA
S  QSPIC_CNTRL_0 = 0x0U,
S  QSPIC_CNTRL_1 = 0x800U,
S  QSPIC_CNTRL_2 = 0x1000
N#else
N  QSPIC_CNTRL_0 = 0,
N  QSPIC_CNTRL_1 = 0xAF8000,  
N  QSPIC_CNTRL_2 = 0x1000
N#endif   
N} qspic_cntrl_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
Nextern void    read_burst4(int32_t i32addr, uint32_t * pu32Data);
Nextern void    read_burst8(int32_t i32addr, uint32_t * pu32Data);
Nextern void    word_write(int32_t i32addr, int32_t data);
Nextern void    hword_write(int32_t i32addr, int32_t data);
Nextern void    byte_write(int32_t i32addr, int32_t data);
Nextern int32_t word_read(int32_t i32addr);
Nextern int32_t hword_read(int32_t i32addr);
Nextern int32_t byte_read(int32_t i32addr);
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* Command Operation Code */
Ntypedef enum tag_qspic_CmdOp_e
N{
N  QSPI_CMD_READ_SINGLE        = 0x03,
N  QSPI_CMD_FAST_READ_SINGLE   = 0x0B,
N  QSPI_CMD_FAST_READ_DUAL_OUT = 0x3B,
N  QSPI_CMD_FAST_READ_DUAL_IO  = 0xBB,
N  QSPI_CMD_FAST_READ_QUAD_OUT = 0x6B,
N  QSPI_CMD_FAST_READ_QUAD_IO  = 0xEB
N} qspi_CmdOp_e;
N
N/* SPI I/O Control */
Ntypedef enum tag_qspic_IOCtrl_e
N{
N  QSPI_SINGLE = 0,
N  QSPI_DUAL   = 1,
N  QSPI_QUAD   = 2
N} qspi_IOCtrl_e;
N
N/* Address byte count */
Ntypedef enum tag_qspic_AddrByte_e
N{
N  QSPI_ADDR_3BYTE = 0,
N  QSPI_ADDR_4BYTE = 1
N} qspi_AddrByte_e;
N
N/* QSPI flash device no. */
Ntypedef enum tag_qspic_dev_e
N{
N    QSPIC_DEV_0 = 0,                         /* QSPI flash on CS0 */
N    QSPIC_DEV_1 = 1                          /* QSPI flash on CS1 */
N} qspic_dev_e;
N
N/* SPI flash density */
Ntypedef enum tag_qspic_density_e
N{
N    /* dependant on SI_AddrByte */
N    /* SI_AddrByte = 0 */
N    QSPIC_64KB   = 0,                         /*  64 KB */
N    QSPIC_128KB  = 1,                         /* 128 KB */
N    QSPIC_256KB  = 2,                         /* 256 KB */
N    QSPIC_512KB  = 3,                         /* 512 KB */
N    QSPIC_1MB    = 4,                         /*   1 MB */
N    QSPIC_2MB    = 5,                         /*   2 MB */
N    QSPIC_4MB    = 6,                         /*   4 MB */
N    QSPIC_8MB    = 7,                         /*   8 MB */
N    QSPIC_16MB   = 8,                         /*  16 MB */
N    /* SI_AddrByte = 1 */
N    QSPIC_32MB   = 9,                         /*  32 MB */
N    QSPIC_64MB   = 10,                        /*  64 MB */
N    QSPIC_128MB  = 11,                        /* 128 MB */
N    QSPIC_256MB  = 12                         /* 256 MB */
N} qspic_density_e;
N
N/* SPI data capture edge */
Ntypedef enum tag_qspic_sdce_e
N{
N    QSPIC_1ST_POS_EDGE = 0x00,              /* data capture @ 1st positive edge */
N    QSPIC_1ST_NEG_EDGE = 0x01,              /* data capture @ 1st negative edge */ 
N    QSPIC_2ND_POS_EDGE = 0x02,              /* data capture @ 2nd positive edge */
N    QSPIC_2ND_NEG_EDGE = 0x03               /* data capture @ 2nd negative edge */ 
N} qspic_sdce_e;
N
N/* SPI program access opcode */
Ntypedef enum tag_qspic_opcode_e
N{
N    /* read */
N    QSPIC_OPCODE_FAST_READ   = 0x0B,            /* Fast READ opcode */
N    QSPIC_OPCODE_READ_ID     = 0x90,            /* Read ID */   
N    QSPIC_OPCODE_READ_EXTID  = 0x9F,            /* Read Extended ID */
N    /* write control */
N    QSPIC_OPCODE_WRITE_EN    = 0x06,            /* WRITE enable */
N    QSPIC_OPCODE_WRITE_DIS   = 0x04,            /* WRITE disable */
N    /* erase */
N    QSPIC_OPCODE_4KBS_ERASE  = 0x20,            /* 4kB sector ERASE */
N    QSPIC_OPCODE_8KBS_ERASE  = 0x40,            /* 8kB sector ERASE */
N    QSPIC_OPCODE_64KBS_ERASE = 0xD8,            /* 64kB sector ERASE */
N    QSPIC_OPCODE_CHIP_ERASE  = 0xC7,            /* full chip ERASE opcode */
N    /* program */
N    QSPIC_OPCODE_PAGE_PGRM   = 0x02,            /* Page PROGRAM opcode */
N    /* Status */
N    QSPIC_OPCODE_RFST_READ   = 0x70,            /* Read Flag status register */
N    QSPIC_OPCODE_STS_READ    = 0x05,            /* Status read opcode */
N    QSPIC_OPCODE_STS_CLEAR   = 0x30,            /* Status clear */
N    /* Configuration read */
N    QSPIC_OPCODE_CFG_READ    = 0x35,            /* Configuration register read */
N    QSPIC_OPCODE_CFGM_READ   = 0x15,            /* Configuration register read */
N    /* Register write */
N    QSPIC_OPCODE_WRITE_REG   = 0x01,            /* Write Configuration & Status register opcode */
N    /* Release deep power down */
N    QSPIC_OPCODE_RELEASE_DP  = 0xAB,            /* Release from deep power down mode */
N    /* set 3/4 byte mode */
N    QSPIC_OPCODE_3_BYTE_MODE  = 0xE9,           /* Enable 3-byte mode */
N    QSPIC_OPCODE_4_BYTE_MODE  = 0xB7            /* Enable 4-byte mode */
N} qspic_opcode_e;
N
N/* Enable/disable */
Ntypedef enum tag_qspic_en_e
N{
N    QSPIC_DISABLE = 0x0U,                       /* Disable */
N    QSPIC_ENABLE  = 0x1U                        /* Enable */
N} qspic_en_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/* SPI direct read control strucutre */
Ntypedef struct tag_qspic_direct_rd_ctrl_st
N{
N    qspi_CmdOp_e     eCmd;                  /* Quad-SPI command code   */
N    uint32_t         u32DummyByteCnt;       /* Number of dummy bytes   */
N    qspi_AddrByte_e  eAddrByteCnt;          /* Address mode 3-/4-Byte  */
N    qspi_IOCtrl_e    eSpiDatIOCtrl;         /* SPI Data I/O control    */
N    qspi_IOCtrl_e    eSpiDmyIOCtrl;         /* SPI Dummy I/O control   */
N    qspi_IOCtrl_e    eSpiAdrIOCtrl;         /* SPI Address I/O control */
N} qspic_direct_rd_ctrl_st;
N
Ntypedef struct tag_qspic_directconfig_st
N{
N    uint16_t                u16FlashBaseAddress;   /* physical base address (bits [31:16]), upper 4 bits are fixed and don't care */
N    qspic_density_e         eFlashDensity;         /* flash density */
N    qspic_en_e              eEnableMemMapRd;       /* enable memory map read */
N    qspic_direct_rd_ctrl_st stRdCtrl;              /* SPI mode read */
N    qspic_en_e              eWIPEnable;            /* WIP bit enable */
N    uint8_t                 u8CSTime;              /* deassertion time */
N    qspic_sdce_e            eEdge;                 /* capture edge */
N} qspic_directconfig_st;
N
Ntypedef struct tag_qspic_prgconfig_st
N{
N    uint8_t             u8CSTime;           /* deassertion time */
N    qspic_sdce_e        eEdge;              /* capture edge */
N    qspi_AddrByte_e     eAddrByteCnt;       /* Address mode 3-/4-Byte  */
N} qspic_prgconfig_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vQSPIC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigureDirectControl
N *
N * Purpose:       does complete configuration for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                pstDirConf     pointer to configuration for direct access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   The base address must be aligned on a boundary that is an integer
N *                 multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigureDirectControl(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_directconfig_st *pstDirConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigurePrgControl
N *
N * Purpose:       does complete configuration for program access
N *
N * Inputs:        eController     flash controller no.
N *                pstPrgConf      pointer to configuration for program access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigurePrgControl(qspic_cntrl_e eController, qspic_prgconfig_st *pstPrgConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashBaseAddress
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController           flash controller no.
N *                eDevice               device no.
N *                u16FlashBaseAddress   physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashBaseAddress 
N *
N * Purpose:       Reads memory base address of flash.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t * u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashDensity
N *
N * Purpose:       set flash size
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eFlashDensity    flash density (size)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashDensity 
N *
N * Purpose:       Reads flash density.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *
N * Outputs:       flash density (size)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e * eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableDirectMemMapRd 
N *
N * Purpose:       Enables and disables read access.
N *                If disabled, the SPI Flash device is not memory-mapped.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eEnableMemMap    enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableDirectMemMapRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectMemMapStatusRd 
N *
N * Purpose:       Reads status of direct memory map read.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectMemMapStatusRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashMemMap
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController            flash controller no.
N *                eDevice                device no.
N *                u16FlashBaseAddress    physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *                eFlashDensity          flash density (size)
N *                eEnableMemMapRd        enable/disable read
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashMemMap(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress,
N                                      qspic_density_e eFlashDensity, qspic_en_e eEnableMemMapRd);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetReadCtrl  
N *
N * Purpose:       specifies the configuration of the read command 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u32Ctrl        read control value 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   specifies the configuration of the read command
N *                that the hardware sequencer should issue to an
N *                SPI Flash device for direct read accesses.
N *                It affects Dual I/O and Quad I/O reads
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetReadCtrl 
N *
N * Purpose:       Reads the configuration of the read command.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       read control value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t * u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectEnableWIPPolling      
N *
N * Purpose:       Enables and disables the polling of the WIP bit of the
N *                status register in the SPI Flash (until the SPI Flash write
N *                is completed) before issuing a read command to it. 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectEnableWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetStatusWIPPolling 
N *
N * Purpose:       Reads Status of WIP polling bit.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetStatusWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetCSDeassertionTime
N *
N * Purpose:       Specifies the deassertion time of SPI_CS_N for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetCSDeassertionTime 
N *
N * Purpose:       Reads Direct Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetCSDeassertionTime
N *
N * Purpose:       specifies the deassertion time of SPI_CS_0/1 for program access
N *
N * Inputs:        eController    flash controller no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time) 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetCSDeassertionTime(qspic_cntrl_e eController, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetCSDeassertionTime 
N *
N * Purpose:       Reads Program Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetCSDeassertionTime(qspic_cntrl_e eController, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEdge          1st pos. edge / 1st neg. edge 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetDataCaptureEdge 
N *
N * Purpose:       Reads Direct Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for programm access
N *
N * Inputs:        eController    flash controller no.
N *                eEdge          capture edge: 1st pos. edge / 1st neg. edge
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetDataCaptureEdge 
N *
N * Purpose:       Reads Program Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Capture edge: 1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableInterrupt      
N *
N * Purpose:       Enables and disables SPI interrupts generated on completion
N *                of a program register access cycle 
N *
N * Inputs:        eController    flash controller no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   If enabled, generates an interrupt when the
N *                SPI Cycle Done bit is set to 1.
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableInterrupt(qspic_cntrl_e eController, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetInterruptStatus 
N *
N * Purpose:       Reads Interrupt status.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Interrupt Status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetInterruptStatus(qspic_cntrl_e eController, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       C_TRUE or C_FALSE
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_IsSpiCycleDone(qspic_cntrl_e eController, bool_t * bResult);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleInPgrs 
N *
N * Purpose:       checks if SPI cycle is in progress 
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleInPgrs(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: CC_TRUE or C_FALSE
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleDone(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WaitForCompletion 
N *
N * Purpose:       Wait for cycle completion of previous program access
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WaitForCompletion(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusFlagRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device for Micron
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusFlagRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmClearStatus 
N *
N * Purpose:       Clear the status register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmClearStatus(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmReleaseDP 
N *
N * Purpose:       Release from deep sleep power mode
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmReleaseDP(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationRead 
N *
N * Purpose:       Retrieve the current value of the configuration register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Configuration);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationWrite 
N *
N * Purpose:       Modify the value of the Status and Configuration registers
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8Status       Desired value of the Status register  
N *                u8Conf         Desired value of the Configuration register  
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationWrite(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Status,  uint8_t u8Conf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteEnable
N *
N * Purpose:       Enable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteEnable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteDisable
N *
N * Purpose:       Disable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteDisable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSectErase
N *
N * Purpose:       SPI Flash Sector Erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                eOpcode           Sector erase opcode
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSectErase(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_opcode_e eOpcode, uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmChipErase
N *
N * Purpose:       Full Chip Erase
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmChipErase(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmPagePgrm
N *
N * Purpose:       Programming 256 bytes of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer to be written into
N *                                  flash device
N *
N * Outputs:       
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmPagePgrm(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmFastRead 
N *
N * Purpose:       Perform fast reading of 256 byte of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *
N * Outputs:       pu8Data           pointer to data buffer 
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmFastRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetID 
N *
N * Purpose:       Retrieve device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8ManID          Manufacturer ID
N *                pu8DevID          Device ID
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8ManID, uint8_t* const pu8DevID);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetExtendedID 
N *
N * Purpose:       Retrieve extended device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetExtendedID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WriteByte 
N *
N * Purpose:       Write one Byte to the device
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Value           value to be send
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WriteByte(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetRegister 
N *
N * Purpose:       Retrieve content of register
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteRegister 
N *
N * Purpose:       Write data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *                pu8Information    Handle to the infromation buffer
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      u32QSPIC_DirectReadWord
N *
N * Purpose:       Perform reading of one word from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: read word
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32QSPIC_DirectReadWord(uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst4
N *
N * Purpose:       Perform reading 4 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst4(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst8
N *
N * Purpose:       Perform reading 8 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst8(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************/
N
N
N#endif /* QSPIC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "ccr.h"
L 1 "..\..\..\..\lldd\inc\ccr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : CCR Low-level register
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : CCR
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.22 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CCR_LLDD_H
N#define CCR_LLDD_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_CCR_H_REVISION     "$Revision: 1.22 $"
N#define LLDD_CCR_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N/* CCR unlock key value */
N#define CCR_KEY_VAL 0xA5C0F17BU
N
N/* CCR PDS unlock macro */
N#define vCCR_PDS_UNLOCK()(vSetCCR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/* CCR PDH unlock macro */
N#define vCCR_PDH_UNLOCK()(vSetPDHR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
Ntypedef enum tag_ccr_enable_e
N{
N  CCR_DISABLE = 0,  /* disable */
N  CCR_ENABLE  = 1   /* enable  */
N} ccr_enable_e;
N
Ntypedef enum tag_ccr_alarm_no_e
N{
N  CCR_ALARM_0  = 0,   /* Alarm 0 */
N  CCR_ALARM_1  = 1   /* Alarm 1  */
N} ccr_alarm_no_e;
N
N/* Controller selection */
Ntypedef enum tag_ccr_cntrl_e
N{
N    CCR_QSPI_0        =  0,   /* QSPI 0 */
N    CCR_QSPI_1        =  1,   /* QSPI 1 */
N    CCR_QSPI_INT      =  2,   /* QSPI Internal */
N    CCR_SDRAM         =  3,   /* SDRAM */
N    CCR_I2S           =  4,   /* I2S */
N    CCR_GDC_0         =  5,   /* GDC 0 */
N    CCR_GDC_1         =  6,   /* GDC 1 */
N    CCR_DMA           =  7,   /* DMA */
N    CCR_PARFLASH      =  8,   /* Parallel Flash */
N    CCR_DAP           =  9,   /*  */
N    CCR_GA            = 10,   /* GA Engine */
N    CCR_PNG           = 11,   /* PNG Decoder */
N    CCR_FG            = 12,   /* Framegrabber */
N    CCR_MLB           = 13,   /* MLB */
N    CCR_SMC           = 14,   /* Stepper Motor */
N    CCR_HSPWM         = 15,   /* HSPWM */
N    CCR_I2SM          = 16,   /* I2SM */
N    CCR_TSM           = 17,   /* TSM */
N    CCR_TRACE         = 18,   /* Trace */
N    CCR_320MHz        = 19    /* 320MHz */
N} ccr_cntrl_e;
N
N/* Modulation type */
Ntypedef enum tag_ccr_modulated_clk_e
N{
N    CCR_MODULATED     = 0,    /* modulated clock */
N    CCR_NON_MODULATED = 1     /* non modulated clock */
N} ccr_modulated_clk_e;
N
N/*  */
Ntypedef enum tag_ccr_clock_type_e
N{
N    CCR_MODULATED_GDC0       = 0,    /* Modulated clock for GDC0 */
N    CCR_MODULATED_GDC1       = 1,    /* Modulated clock for GDC1 */
N    CCR_NON_MODULATED_GDC0   = 2,    /* Non modulated clock for GDC0 */
N    CCR_NON_MODULATED_GDC1   = 3,    /* Non modulated clock for GDC1 */
N    CCR_DOTCLKIN             = 4,    /* DOTCLKIN for GDC0 or GDC1 */
N    CCR_MODULATED_I2S        = 5,    /* Modulated clock for I2S */
N    CCR_NON_MODULATED_I2S    = 6,    /* Non modulated clock for I2S */
N    CCR_I2SMCLKIN            = 7,    /* I2SMCLKIN for I2S */
N    CCR_MODULATED_320MHZ     = 8,    /* Modulated clock for 320MHz */
N    CCR_NON_MODULATED_320MHZ = 9     /* Non modulated clock for 320MHz */
N} ccr_clock_type_e;
N
N/* Clock divider values (input clock: 900MHz) */
Ntypedef enum tag_ccr_clk_freq_e
N{
N    CCR_CLKDIV_112_5MHz =  8,    /* 112,5 MHz output clk */
N    CCR_CLKDIV_100_0MHz =  9,    /* 100,0 MHz output clk */
N    CCR_CLKDIV_90_0MHz  = 10,    /*  90,0 MHz output clk */
N    CCR_CLKDIV_81_8MHz  = 11,    /*  81,8 MHz output clk */
N    CCR_CLKDIV_75_0MHz  = 12,    /*  75,0 MHz output clk */
N    CCR_CLKDIV_69_2MHz  = 13,    /*  69,2 MHz output clk */
N    CCR_CLKDIV_64_3MHz  = 14,    /*  64,3 MHz output clk */
N    CCR_CLKDIV_60_0MHz  = 15,    /*  60,0 MHz output clk */
N    CCR_CLKDIV_56_3MHz  = 16,    /*  56,3 MHz output clk */
N    CCR_CLKDIV_52_9MHz  = 17,    /*  52,9 MHz output clk */
N    CCR_CLKDIV_50_0MHz  = 18,    /*  50,0 MHz output clk */
N    CCR_CLKDIV_47_4MHz  = 19,    /*  47,4 MHz output clk */
N    CCR_CLKDIV_45_0MHz  = 20,    /*  45,0 MHz output clk */
N    CCR_CLKDIV_42_9MHz  = 21,    /*  42,9 MHz output clk */
N    CCR_CLKDIV_40_9MHz  = 22,    /*  40,9 MHz output clk */
N    CCR_CLKDIV_39_1MHz  = 23,    /*  39,1 MHz output clk */
N    CCR_CLKDIV_37_5MHz  = 24,    /*  37,5 MHz output clk */
N    CCR_CLKDIV_36_0MHz  = 25,    /*  36,0 MHz output clk */
N    CCR_CLKDIV_34_6MHz  = 26,    /*  34,6 MHz output clk */
N    CCR_CLKDIV_33_3MHz  = 27,    /*  33,3 MHz output clk */
N    CCR_CLKDIV_32_1MHz  = 28,    /*  32,1 MHz output clk */
N    CCR_CLKDIV_31_0MHz  = 29,    /*  31,0 MHz output clk */
N    CCR_CLKDIV_30_0MHz  = 30,    /*  30,0 MHz output clk */
N    CCR_CLKDIV_29_0MHz  = 31,    /*  29,0 MHz output clk */
N    CCR_CLKDIV_28_1MHz  = 32,    /*  28,1 MHz output clk */
N    CCR_CLKDIV_27_2MHz  = 33,    /*  27,2 MHz output clk */
N    CCR_CLKDIV_26_4MHz  = 34,    /*  26,4 MHz output clk */
N    CCR_CLKDIV_25_7MHz  = 35,    /*  25,7 MHz output clk */
N    CCR_CLKDIV_25_0MHz  = 36,    /*  25,0 MHz output clk */
N    CCR_CLKDIV_24_3MHz  = 37,    /*  24,3 MHz output clk */
N    CCR_CLKDIV_23_6MHz  = 38,    /*  23,6 MHz output clk */
N    CCR_CLKDIV_23_0MHz  = 39,    /*  23,0 MHz output clk */
N    CCR_CLKDIV_22_5MHz  = 40     /*  22,5 MHz output clk */
N} ccr_clk_freq_e;
N
N/* Clock stability */
Ntypedef enum tag_ccr_clock_stability_e
N{
N    CCR_CLOCK_NOT_STABLE     = 0,    /* Clock is not stable */
N    CCR_CLOCK_STABLE         = 1,    /* Clock is stable */
N    CCR_CLOCK_STABILITY_FAIL = 2     /* Clock stability faild */
N} ccr_clock_stability_e;
N
N/* Clocks */
Ntypedef enum tag_ccr_clocks_e
N{
N    CCR_OSC10M            = 0,    /* 10M clock */
N    CCR_OSC32K            = 1,    /* 32K clock */
N    CCR_RC100K            = 2,    /* RC100K clock */
N    CCR_MODULATED_PLL     = 3,    /* modulated PLL */
N    CCR_NON_MODULATED_PLL = 4     /* non-modulated PLL */
N} ccr_clocks_e;
N
N/* Reset types */
Ntypedef enum tag_reset_type_e
N{
N    CCR_FULL_RST    = 0,    /* Software full reset */
N    CCR_DBG_RST     = 1,    /* Debug reset */
N    CCR_SW_PART_RST = 2     /* Software part reset */
N} ccr_reset_type_e;
N
N/* target device mode */
Ntypedef enum tag_ccr_device_mode_e
N{
N    CCR_DEVICE_MODE_TRANSITION = 0x00000000,    /* M_PLL */
N    CCR_DEVICE_MODE_M_PLL      = 0x005C0001,    /* M_PLL */
N    CCR_DEVICE_MODE_M_OSC10    = 0x005C0002,    /* M_OSC10 */
N    CCR_DEVICE_MODE_STB_OSC10  = 0x005C0004,    /* STB_OSC10 */
N    CCR_DEVICE_MODE_SLP_OSC10  = 0x005C0008,    /* SLP_OSC10 */
N    CCR_DEVICE_MODE_SLP_RC10   = 0x005C0010,    /* SLP_RC10 */
N    CCR_DEVICE_MODE_STOP_R     = 0x005C0020,    /* STOP_R */
N    CCR_DEVICE_MODE_STOP       = 0x005C0040     /* STOP */
N} ccr_device_mode_e;
N
N/* Interupts */
Ntypedef enum tag_ccr_interrupts_e
N{
N    CCR_INTERRUPTS_STATE_CHANGE = 0,    /* state change interrupt*/
N    CCR_INTERRUPTS_ALARM_0      = 1,    /* alarm comparator 0 interrupt */
N    CCR_INTERRUPTS_ALARM_1      = 2,    /* alarm comparator 1 interrupt */
N    CCR_INTERRUPTS_BECC         = 3,    /* backup RAM ECC interrupt */
N    CCR_INTERRUPTS_MECC         = 4     /* main memory ECC interrupt */
N} ccr_interrupts_e;
N
N/* Interrupt occurred */
Ntypedef enum tag_ccr_int_occurred_e
N{
N  CCR_INT_NOT_OCCURRED = 0,  /* interrupt did not occur */
N  CCR_INT_OCCURRED     = 1   /* interrupt occurred */
N} ccr_int_occurred_e;
N
N/* Operation mode type */
Ntypedef enum tag_ccr_operation_mode_type_e
N{
N    CCR_SSCG_MODE_DECIMAL_FACTOR = 0,    /* Decimal factor mode */
N    CCR_SSCG_MODE_INTEGER_FACTOR = 1     /* Integer factor mode */
N} ccr_operation_mode_type_e;
N
N/* Modulation direction */
Ntypedef enum tag_ccr_modulation_direction
N{
N    CCR_SSCG_MD_DOWN_SPREAD   = 0,    /* modulation direction is down spread */
N    CCR_SSCG_MD_CENTER_SPREAD = 1     /* modulation direction is up spread */
N} ccr_modulation_direction;
N
N/* Feedback division ratio prescaler value */
Ntypedef enum tag_ccr_fdr_prescaler_e
N{
N    CCR_FDR_PRESCALER_1 = 0,    /* feedback division ratio not doubled */
N    CCR_FDR_PRESCALER_2 = 1     /* feedback division ratio doubled */
N} ccr_fdr_prescaler_e;
N
N/* Watchdof timer alarm output configuration */
Ntypedef enum tag_ccr_wdt_alarm_type_e
N{
N    CCR_WDT_ALARM_AS_NMI   = 0,    /* watchdog timer alarm as watchdog timer NMI */
N    CCR_WDT_ALARM_AS_RESET = 1     /* watchdog timer alarm as watchdog timer RESET */
N} ccr_wdt_alarm_type_e;
N
N/* CAN modes */
Ntypedef enum tag_ccr_can_mode_e
N{                                     /*             tranceiver , combined channels, sepatate channels, pin pairs, description */
N    CCR_CAN_MODE_T_1_1_1_1  = 0x0,    /* CAN mode  1:     yes   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_T_2_1_1    = 0x1,    /* CAN mode  2:     yes   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_T_2_2      = 0x2,    /* CAN mode  3:     yes   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_T_3_1      = 0x3,    /* CAN mode  4:     yes   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_T_ALL      = 0x4,    /* CAN mode  5:     yes   ,         4        ,         -        ,    1     , all to one  */
N    CCR_CAN_MODE_NT_1_1_1_1 = 0x8,    /* CAN mode  5:      no   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_NT_2_1_1   = 0x9,    /* CAN mode  6:      no   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_NT_2_2     = 0xA,    /* CAN mode  7:      no   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_NT_3_1     = 0xB,    /* CAN mode  8:      no   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_NT_ALL     = 0xC,    /* CAN mode  9:      no   ,         4        ,         -        ,    1     , all to all  */
N    CCR_CAN_MODE_NT_INTER   = 0xF     /* CAN mode 10:      no   ,         -        ,         4        ,    -     , internal    */
N} ccr_can_mode_e;
N
N/* ECC modes */
Ntypedef enum tag_ccr_ecc_mode_e
N{
N    CCR_ECC_MODE_256KB  = 0,    /* 256KB with ECC */
N    CCR_ECC_MODE_128KB  = 2,    /* 128KB with ECC */
N    CCR_ECC_MODE_NO_ECC = 3     /* without ECC */
N} ccr_ecc_mode_e;
N
N/* TBIO channel */
Ntypedef enum tag_ccr_tbio_channel_e
N{
N    CCR_TBIO_0 = 0,    /* TBIO channel 0 */
N    CCR_TBIO_1 = 1,    /* TBIO channel 1 */
N    CCR_TBIO_2 = 2,    /* TBIO channel 2 */
N    CCR_TBIO_3 = 3,    /* TBIO channel 3 */
N    CCR_TBIO_4 = 4,    /* TBIO channel 4 */
N    CCR_TBIO_5 = 5,    /* TBIO channel 5 */
N    CCR_TBIO_6 = 6,    /* TBIO channel 6 */
N    CCR_TBIO_7 = 7,    /* TBIO channel 7 */
N    CCR_TBIO_8 = 8,    /* TBIO channel 8 */
N    CCR_TBIO_9 = 9     /* TBIO channel 9 */
N} ccr_tbio_channel_e;
N
N/* TBIO port direction */
Ntypedef enum tag_ccr_tbio_direction_e
N{
N    CCR_TBIO_IN  = 0,    /* TBIO pin as input */
N    CCR_TBIO_OUT = 1     /* TBIO pin as output */
N} ccr_tbio_direction_e;
N
N/* TBIN0 signal select for Complex Timer 4 */
Ntypedef enum tag_ccr_tbin_source_ctimer4_e
N{
N    CCR_TBIN_CTIMER4_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER4_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER4_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER4_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER4_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER4_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER4_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER4_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER4_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER4_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER4_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER4_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER4_GDC_PWMOUT0    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is SIN_PLUS0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is SIN_MINUS0 */
N} ccr_tbin_source_ctimer4_e;
N
N/* TBIN0 signal select for Complex Timer 5 */
Ntypedef enum tag_ccr_tbin_source_ctimer5_e
N{
N    CCR_TBIN_CTIMER5_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER5_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER5_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER5_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER5_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER5_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER5_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER5_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER5_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER5_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER5_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER5_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER5_GDC_PWMOUT1    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT1 */
N    CCR_TBIN_CTIMER5_GDC_COS_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is COS_PLUS0 */
N    CCR_TBIN_CTIMER5_GDC_COS_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is COS_MINUS0 */
N} ccr_tbin_source_ctimer5_e;
N
N/* Synchronisation between GDC0 and GDC1 */
Ntypedef enum tag_ccr_gdc_sync_e
N{
N    CCR_GDC_SYNC_INDEPENDANT   = 0,    /* independant operation of GDC1 */
N    CCR_GDC_SYNC_GDC1_USE_GDC0 = 1     /* GDC1 uses GDC0 synchronisation signals */
N} ccr_gdc_sync_e;
N
N/* NOR channel */
Ntypedef enum tag_ccr_nor_channel_e
N{
N    CCR_NOR_CHANNEL_0 = 0,    /* NOR channel 0 */
N    CCR_NOR_CHANNEL_1 = 1     /* NOR channel 1 */
N} ccr_nor_channel_e;
N
N/* NAND channel */
Ntypedef enum tag_ccr_nand_channel_e
N{
N    CCR_NAND_CHANNEL_0 = 0,    /* NAND channel 0 */
N    CCR_NAND_CHANNEL_1 = 1     /* NAND channel 1 */
N} ccr_nand_channel_e;
N
N/* SRAM channel */
Ntypedef enum tag_ccr_sram_channel_e
N{
N    CCR_SRAM_CHANNEL_0 = 0,    /* SRAM channel 0 */
N    CCR_SRAM_CHANNEL_1 = 1,    /* SRAM channel 1 */
N    CCR_SRAM_CHANNEL_2 = 2,    /* SRAM channel 2 */
N    CCR_SRAM_CHANNEL_3 = 3     /* SRAM channel 3 */
N} ccr_sram_channel_e;
N
N/* Complex timer */
Ntypedef enum tag_ccr_complex_timer_e
N{
N    CCR_COMPLEX_TIMER_0_TO_5 = 0,    /* Complex timer 0 to 5 */
N    CCR_COMPLEX_TIMER_6_TO_9 = 1     /* Complex timer 6 to 9 */
N} ccr_complex_timer_e;
N
N/* Device version */
Ntypedef enum tag_ccr_device_version_e
N{
N    DEVICE_CAP_BT_1  = 0,    /* TMPR461XBG-300 (BGA-328, no SIP Flash)   */
N    DEVICE_CAP_C     = 1,    /* TMPR462XBG-300 (BGA-328, with SIP Flash) */
N    DEVICE_CAP_BT_0  = 2,    /* TMPR460XBG-300 (BGA-244, no SIP Flash)   */
N    DEVICE_INVALID   = 3     /* Reserved   */
N} ccr_device_version_e;
N
N/* SIP Flash size */
Ntypedef enum tag_ccr_SIPflash_size_e
N{
N    CCR_SIP_FLASH_SIZE_2MB  = 0,    /*  2MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_4MB  = 1,    /*  4MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_8MB  = 2,    /*  8MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_16MB = 3     /* 16MB SIP FLASH size */
N} ccr_SIPflash_size_e;
N
Ntypedef enum tag_processor_device_e
N{
N    CCR_CR4 = 0,    /* processor R4 */
N    CCR_M3  = 1     /* processor M3 */
N} ccr_processor_device_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_current_trim_e
N{
N    CCR_VREG_CURRENT_TRIM_M_40_PROZ = 4,    /* -40% */
N    CCR_VREG_CURRENT_TRIM_M_30_PROZ = 5,    /* -30% */
N    CCR_VREG_CURRENT_TRIM_M_20_PROZ = 6,    /* -20% */
N    CCR_VREG_CURRENT_TRIM_M_10_PROZ = 7,    /* -10% */
N    CCR_VREG_CURRENT_TRIM_0_PROZ    = 0,    /*   0% */
N    CCR_VREG_CURRENT_TRIM_P_10_PROZ = 1,    /*  10% */
N    CCR_VREG_CURRENT_TRIM_P_20_PROZ = 2,    /*  20% */
N    CCR_VREG_CURRENT_TRIM_P_30_PROZ = 3     /*  30% */
N} ccr_vreg_current_trim_e;
N
N/* Voltage regulator reference voltage trim */
Ntypedef enum tag_vreg_ref_voltage_trim_e
N{
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_5_PROZ = 15,    /* -7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_0_PROZ = 14,    /* -7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_5_PROZ = 13,    /* -6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_0_PROZ = 12,    /* -6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_5_PROZ = 11,    /* -5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_0_PROZ = 10,    /* -5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_5_PROZ =  9,    /* -4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_0_PROZ =  8,    /* -4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_5_PROZ =  7,    /* -3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_0_PROZ =  6,    /* -3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_5_PROZ =  5,    /* -2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_0_PROZ =  4,    /* -2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_5_PROZ =  3,    /* -1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_0_PROZ =  2,    /* -1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_0_5_PROZ =  1,    /* -0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_0_PROZ     =  0,    /*    0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_0_5_PROZ = 31,    /* 0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_0_PROZ = 30,    /* 1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_5_PROZ = 29,    /* 1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_0_PROZ = 28,    /* 2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_5_PROZ = 27,    /* 2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_0_PROZ = 26,    /* 3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_5_PROZ = 25,    /* 3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_0_PROZ = 24,    /* 4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_5_PROZ = 23,    /* 4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_0_PROZ = 22,    /* 5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_5_PROZ = 21,    /* 5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_0_PROZ = 20,    /* 6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_5_PROZ = 19,    /* 6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_0_PROZ = 18,    /* 7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_5_PROZ = 17,    /* 7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_8_0_PROZ = 16     /* 8.0% */
N} ccr_vreg_ref_voltage_trim_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_temperature_trim_e
N{
N    CCR_VREG_TEMPERATURE_TRIM_M_60_DEGC = 4,    /* -60degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_50_DEGC = 5,    /* -50degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_40_DEGC = 6,    /* -40degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_25_DEGC = 7,    /* -25degC */
N    CCR_VREG_TEMPERATURE_TRIM_0_DEGC    = 0,    /*   0degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_25_DEGC = 1,    /*  25degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_50_DEGC = 2,    /*  50degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_70_DEGC = 3     /*  70degC */
N} ccr_vreg_temperature_trim_e;
N
N/* Oscillator adjustment */
Ntypedef enum tag_osc_adjustment_e
N{
N    CCR_OSC_ADJUSTMENT_M_8 =  8,    /* -8 */
N    CCR_OSC_ADJUSTMENT_M_7 =  9,    /* -7 */
N    CCR_OSC_ADJUSTMENT_M_6 = 10,    /* -6 */
N    CCR_OSC_ADJUSTMENT_M_5 = 11,    /* -5 */
N    CCR_OSC_ADJUSTMENT_M_4 = 12,    /* -4 */
N    CCR_OSC_ADJUSTMENT_M_3 = 13,    /* -3 */
N    CCR_OSC_ADJUSTMENT_M_2 = 14,    /* -2 */
N    CCR_OSC_ADJUSTMENT_M_1 = 15,    /* -1 */
N    CCR_OSC_ADJUSTMENT_0   =  0,    /*  0 */
N    CCR_OSC_ADJUSTMENT_P_1 =  1,    /*  1 */
N    CCR_OSC_ADJUSTMENT_P_2 =  2,    /*  2 */
N    CCR_OSC_ADJUSTMENT_P_3 =  3,    /*  3 */
N    CCR_OSC_ADJUSTMENT_P_4 =  4,    /*  4 */
N    CCR_OSC_ADJUSTMENT_P_5 =  5,    /*  5 */
N    CCR_OSC_ADJUSTMENT_P_6 =  6,    /*  6 */
N    CCR_OSC_ADJUSTMENT_P_7 =  7     /*  7 */
N} ccr_osc_adjustment_e;
N
N/* Threshold for power-good sensing */
Ntypedef enum tag_threshold_power_good_sensing_e
N{
N    CCR_POWER_GOOD_SENSING_0 = 0,    /* threshold 0 */
N    CCR_POWER_GOOD_SENSING_1 = 1,    /* threshold 1 */
N    CCR_POWER_GOOD_SENSING_2 = 2,    /* threshold 2 */
N    CCR_POWER_GOOD_SENSING_3 = 3,    /* threshold 3 */
N    CCR_POWER_GOOD_SENSING_4 = 7,    /* threshold 4 */
N    CCR_POWER_GOOD_SENSING_5 = 6,    /* threshold 5 */
N    CCR_POWER_GOOD_SENSING_6 = 5,    /* threshold 6 */
N    CCR_POWER_GOOD_SENSING_7 = 4     /* threshold 7 */
N} ccr_threshold_power_good_sensing_e;
N
N/* SMC IO level */
Ntypedef enum tag_smc_io_level_e
N{
N    CCR_SMC_IO_LEVEL_5V0 = 0,    /* operate with 5V */
N    CCR_SMC_IO_LEVEL_3V3 = 1     /* operate with 3.3V */
N} ccr_smc_io_level_e;
N
N/* Interrupts */
Ntypedef enum tag_system_interrupt_e
N{
N    CCR_OSC10M_CLOCK_MISSING_INT = 0x00000001,    /* OSC10MHz */
N    CCR_OSC32K_CLOCK_MISSING_INT = 0x00000100,    /* OSC32KHz */
N    CCR_EROR_INT_0               = 0x00010000,    /* Error interrupt 0 */
N    CCR_EROR_INT_1               = 0x00020000,    /* Error interrupt 1 */
N    CCR_EROR_INT_2               = 0x00040000,    /* Error interrupt 2 */
N    CCR_BACKUP_ECC_RAM_INT       = 0x01000000,    /* Backup ECC-RAM */
N    CCR_MAIN_MEMORY_ECC_RAM_INT  = 0x02000000,    /* Main memory ECC-RAM */
N    CCR_STPU_INT                 = 0x04000000,    /* STPU */
N    CCR_WDT_INT                  = 0x08000000,    /* WDT */
N    CCR_IO_INT                   = 0x10000000     /* IO */
N} ccr_system_interrupt_e;
N
N/* ECC */
Ntypedef enum tag_ecc_e
N{
N    CCR_BACKUP_RAM_ECC  = 0,    /* Backup RAM ECC */
N    CCR_MAIN_MEMORY_ECC = 1     /* Main memory ECC */
N} ccr_ecc_e;
N
N/* ECC interrupt type */
Ntypedef enum tag_ecc_interrupt_type_e
N{
N    CCR_ECC_SYSC_INTR    = 0,    /* SYSC_INTR will be generated */
N    CCR_ECC_SYSC_NMI     = 1,    /* SYSC_NMI will be generated */
N    CCR_ECC_SW_FULL_RSTN = 2     /* SW_FULL_RSTN will be generated */
N} ccr_ecc_interrupt_type_e;
N
N/* Modes */
Ntypedef enum tag_modes_e
N{
N    CCR_STB_MODE      = 0,    /* mission state entered from STB_ISC10 */
N    CCR_SLPOSC10_MODE = 1,    /* mission state entered from SLP_OSC10 */
N    CCR_SLPRCOSC_MODE = 2,    /* mission state entered from SLP_RD100K */
N    CCR_STOPR_MODE    = 3,    /* mission state entered from STOP_R */
N    CCR_STOP_MODE     = 4     /* mission state entered from STOP */
N} ccr_modes_e;
N
N/* Wakeup attributes */
Ntypedef enum tag_wakeup_attribute_e
N{
N    CCR_LOW_LEVEL  = 0,    /* low level wakeup */
N    CCR_HIGH_LEVEL = 1,    /* high level wakeup */
N    CCR_FALL_EDGE  = 2,    /* falling edge wakeup */
N    CCR_RISE_EDGE  = 3     /* rising edge wakeup */
N} ccr_wakeup_attribute_e;
N
N/* Wakeup sources */
Ntypedef enum tag_wakeup_source_e
N{
N    CCR_WAKEUP_SOURCE_0     =  0,    /* wakeup source 0 */
N    CCR_WAKEUP_SOURCE_1     =  1,    /* wakeup source 1 */
N    CCR_WAKEUP_SOURCE_2     =  2,    /* wakeup source 2 */
N    CCR_WAKEUP_SOURCE_3     =  3,    /* wakeup source 3 */
N    CCR_WAKEUP_SOURCE_4     =  4,    /* wakeup source 4 */
N    CCR_WAKEUP_SOURCE_5     =  5,    /* wakeup source 5 */
N    CCR_WAKEUP_SOURCE_6     =  6,    /* wakeup source 6 */
N    CCR_WAKEUP_SOURCE_7     =  7,    /* wakeup source 7 */
N    CCR_WAKEUP_SOURCE_NMI   =  8,    /* wakeup source NMI */
N    CCR_WAKEUP_SOURCE_ALARM =  9,    /* wakeup source ALARM */
N    CCR_WAKEUP_SOURCE_RTC   = 10     /* wakeup source RTC */
N} ccr_wakeup_source_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* SSCG configuration structure */
Ntypedef struct tag_ccr_sscg_congig_st
N{
N    ccr_modulation_direction  eModulationDirection;
N    uint8_t                   u8ModulationCycleLengthFractionalN;
N    uint16_t                  u16ModulationDegree;
N} ccr_sscg_congig_st;
N
N/* SRAM bit error inspection configuration */
Ntypedef struct tag_ccr_sram_bit_error_insp_config_st
N{
N    uint8_t u8PosFirstError;     /* Position of first bit error to be injected in SRAM */
N    uint8_t u8PosSecondError;    /* Position of second bit error to be injected in SRAM */
N    uint8_t u8ByteSelect;        /* Byte select for bit error injection in SRAM */
N} ccr_sram_bit_error_insp_config_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vCCR_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IOPDHRevision  - pointer to PDH IO header revision string
N *                pau8IOPDHTag       - pointer to PDH IO header tag string
N *                pau8IOPDSRevision  - pointer to PDS IO header revision string
N *                pau8IOPDSTag       - pointer to PDS IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCCR_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IOPDHRevision, uint8_t** pau8IOPDHTag,
N                     uint8_t** pau8IOPDSRevision, uint8_t** pau8IOPDSTag);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eEn        CCR_Enable if clock should be enabled
N *                           CCR_Disable if clock should be disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetEnabledModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                peEn       status of module clock
N *                           CCR_Enable clock is enabled
N *                           CCR_Disable clock is disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetEnabledModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockFreq
N *
N * Purpose:       Configures clock frequency
N *                Clock frequency can be changed every time because no glitch
N *                should occur during switching. To be on the save side every
N *                action of the module should be finished.
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eFreq      Target frequency
N *                eModulated modulation type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockFreq(ccr_cntrl_e eCntrl, ccr_clk_freq_e eFreq, ccr_modulated_clk_e eModulated);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SelectClockType
N *
N * Purpose:       Select clock type
N *
N * Inputs:        eCntrl        Controller
N *                eClockType    Clock type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SelectClockType(ccr_cntrl_e eCntrl, ccr_clock_type_e eClockType);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPllClockStabilizationCompareValue
N *
N * Purpose:       Set Pll clock stabilization compare value
N *
N * Inputs:        u8Value    Stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPllClockStabilizationCompareValue(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      eCCR_ReadClockStability
N *
N * Purpose:       Read stability value of different oscillators and PLLs
N *
N * Inputs:        eClk        Clock or PLL
N *
N * Outputs:       none
N *
N * Return Values: clock stability value
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_clock_stability_e eCCR_ReadClockStability(ccr_clocks_e eClk);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GenerateReset
N *
N * Purpose:       Generate different types of reset
N *
N * Inputs:        eResetType     Reset type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GenerateReset(ccr_reset_type_e eResetType);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetDeviceMode
N *
N * Purpose:       Set device mode
N *
N * Inputs:        eMode     Device mode
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Transitions to STB_OSC10, SLP_OSC10, SLP_RC10, STOP_R
N *                and STOP are only possible in rom2ram-project without
N *                any probe connected.
N *
N ***************************************************************************/
Nint32_t i32CCR_SetDeviceMode(ccr_device_mode_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableInterrupt
N *
N * Purpose:       Enable interrupts
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableInterrupt(ccr_interrupts_e eInterrupt, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetInterruptStatusAll
N *
N * Purpose:       Read status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetInterruptStatus
N *
N * Purpose:       Read interrupt status
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       peIntOccurred  Status of interrupt
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetInterruptStatusSingle(ccr_interrupts_e eInterrupt, ccr_int_occurred_e * peIntOccurred);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearInterruptsAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearInterruptsAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearInterruptSingle(ccr_interrupts_e eInterrupt);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetCurrentDeviceMode
N *
N * Purpose:       Read current device mode
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Device mode
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_mode_e eCCR_GetCurrentDeviceMode(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSSCG
N *
N * Purpose:       Configure the SSCG and start it with new settings
N *
N * Inputs:        pstSSCGConfig    Pointer to SSCG-configuration
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSSCG(ccr_sscg_congig_st * pstSSCGConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetWDTAlarmType
N *
N * Purpose:       Configure WDT alarm type
N *
N * Inputs:        eAlarmType    WDT alarm type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetWDTAlarmType(ccr_wdt_alarm_type_e eAlarmType);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableBitErrorInjectionInRAM
N *
N * Purpose:       Enable or disable error injection in Back-up RAM
N *
N * Inputs:        eEn    Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableBitErrorInjectionInRAM(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPositionOfBitErrorInjectionInRAM
N *
N * Purpose:       Set bit positions to be injected in Back-up RAM
N *
N * Inputs:        u8FirstPosition     first position
N *                u8SecondPosition    second position
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPositionOfBitErrorInjectionInRAM(uint8_t u8FirstPosition, uint8_t u8SecondPosition);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetCANMode
N *
N * Purpose:       Set CAN mode
N *
N * Inputs:        eCANMode     CAN mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetCANMode(ccr_can_mode_e eCANMode);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetECCMode
N *
N * Purpose:       Set ECC mode
N *
N * Inputs:        eECCMode     ECC mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetECCMode(ccr_ecc_mode_e eECCMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetTBIODirection
N *
N * Purpose:       Set TBIO port direction
N *
N * Inputs:        eTBIOChannel     TBIO channel
N *                eDirection       Pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetTBIODirection(ccr_tbio_channel_e eTBIOChannel, ccr_tbio_direction_e eDirection);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer4
N *
N * Purpose:       Set signal for Complex Timer 4
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer4(ccr_tbin_source_ctimer4_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer5
N *
N * Purpose:       Set signal for Complex Timer 5
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer5(ccr_tbin_source_ctimer5_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC0Interface
N *
N * Purpose:       Enable/disable GDC0 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC0Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC1Interface
N *
N * Purpose:       Enable/disable GDC1 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC1Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDCPanelInterface
N *
N * Purpose:       Enable/disable GDC panel interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDCPanelInterface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetGDCSynchronisation
N *
N * Purpose:       Set synchronisation type between GDC0 and GDC1
N *
N * Inputs:        eGDCSync     GDC synchronisation type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetGDCSynchronisation(ccr_gdc_sync_e eGDCSync);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMask
N *
N * Purpose:       Set NOR-interface address mask
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMask(ccr_nor_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMatch
N *
N * Purpose:       Set NOR-interface address match
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMatch(ccr_nor_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMask
N *
N * Purpose:       Set NAND-interface address mask
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMask(ccr_nand_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMatch
N *
N * Purpose:       Set NAND-interface address match
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMatch(ccr_nand_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNORChipSelect
N *
N * Purpose:       Set NAND-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:   value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNORChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNANDChipSelect
N *
N * Purpose:       Set NOR-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:  value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNANDChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableSRAMBitErrorInspection
N *
N * Purpose:       Enable or disable SRAM bit error inspection
N *
N * Inputs:        eChannel    SRAM-channel
N *                eEn         Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableSRAMBitErrorInspection(ccr_sram_channel_e eChannel, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetSRAMBitErrorInspectionConfiguration
N *
N * Purpose:       Set SRAM bit error inspection configuration
N *
N * Inputs:        eChannel    SRAM-channel
N *                pstConfig   Pointer to configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetSRAMBitErrorInspectionConfiguration(ccr_sram_channel_e eChannel, ccr_sram_bit_error_insp_config_st * pstConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWDTAlarm
N *
N * Purpose:       Clear WDT alarm bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWDTAlarm(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearErrorIrgFlagOfBackupRAM
N *
N * Purpose:       Clear error IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearErrorIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWarningIrgFlagOfBackupRAM
N *
N * Purpose:       Clear warning IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWarningIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearErrorIrgFlagOfSRAM
N *
N * Purpose:       Clear error IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearErrorIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWarningIrgFlagOfSRAM
N *
N * Purpose:       Clear warning IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWarningIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_IssueSynchronPulseToCTimer
N *
N * Purpose:       Issue synchronous pulse to complex timer 0 to 5 or  to 9
N *
N * Inputs:        eComplexTimer    Complex timers
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_IssueSynchronPulseToCTimer(ccr_complex_timer_e eComplexTimer);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWDTAlarmStatusBit
N *
N * Purpose:       Get WDT alarm status bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWDTAlarmStatusBit(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQErrorFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for error condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQErrorFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQWarningFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for warning condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQWarningFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetPosOfBitErrorInBackupRAM
N *
N * Purpose:       Get position of bit error for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetPosOfBitErrorInBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetLastCheckResultForBackupRAM
N *
N * Purpose:       Get last check result for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetLastCheckResultForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDebuggerCR4PowerDownRequestStatus
N *
N * Purpose:       Get status of debugger CR4 power down request
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDebuggerCR4PowerDownRequestStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgErrorCondition
N *
N * Purpose:       Get IRQ flag error condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgErrorCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgWarningCondition
N *
N * Purpose:       Get IRQ flag warning condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgWarningCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMPositionOfBitError
N *
N * Purpose:       Get position of bit error for SRAM
N *
N * Inputs:        eChannel      SRAM-channel
N *                pu8Position   Pointer to position
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMPositionOfBitError(ccr_sram_channel_e eChannel, uint8_t * pu8Position);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMLastCheckResult
N *
N * Purpose:       Get last check result for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMLastCheckResult(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceVersion
N *
N * Purpose:       Read device version
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: device version
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_version_e eCCR_GetDeviceVersion(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSIPFlashSize
N *
N * Purpose:       Read size of SIP flash
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: SIP flash size
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_SIPflash_size_e eCCR_GetSIPFlashSize(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GeCR4DebugStatus
N *
N * Purpose:       Provides information about the availability of the debug port.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: CCR_DISABLE - Debug Port DISABLED
N *                CCR_ENABLE  - Debug Port ENABLED
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GeCR4DebugStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableR4DebugPort
N *
N * Purpose:       Enable or disable debug port of processors
N *
N * Inputs:        eProcessorType     Processor type
N *                eEn                Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableR4DebugPort(ccr_processor_device_e eProcessorType, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegCurrentTrim
N *
N * Purpose:       Set voltage regulator current trim value
N *
N * Inputs:        eValue     voltage regulator current trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegCurrentTrim(ccr_vreg_current_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegRefVoltageTrim
N *
N * Purpose:       Set voltage regulator reference voltage trim value
N *
N * Inputs:        eValue     voltage regulator reference voltage trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegRefVoltageTrim(ccr_vreg_ref_voltage_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegTemperatureTrim
N *
N * Purpose:       Set voltage regulator temperature trim value
N *
N * Inputs:        eValue     voltage regulator temperature trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegTemperatureTrim(ccr_vreg_temperature_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetOscAdjustment
N *
N * Purpose:       Set oscillator adjustment value
N *
N * Inputs:        eValue     oscillator adjustment value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetOscAdjustment(ccr_osc_adjustment_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetThresholdPowerGoodSensing
N *
N * Purpose:       Set threshold for power good sensing
N *
N * Inputs:        eValue     threshold for power good sensing
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetThresholdPowerGoodSensing(ccr_threshold_power_good_sensing_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetAlarmComparatorThreshold
N *
N * Purpose:       Set alarm comparator threshold for Alarm 0 or 1
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                u8Value     alarm comparator threshold setting (0..31)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetAlarmComparatorThreshold(ccr_alarm_no_e eAlarmNo, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableAlarm
N *
N * Purpose:       Enables/Disables CCR alarm comparator
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                eEn      :  enable/disbale alarm
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableAlarm(ccr_alarm_no_e eAlarmNo, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableClockSupervisor
N *
N * Purpose:       Enable/disable clock supervisor
N *
N * Inputs:        eClocks    clock type
N *                eEN        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableClockSupervisor(ccr_clocks_e eClocks, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC10MClockSupervisorOutputResetFunction
N *
N * Purpose:       Enable/disable OSC10M clock supervisor output reset function
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC10MClockSupervisorOutputResetFunction(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC32KHz
N *
N * Purpose:       Enable/disable OSC32KHz
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC32KHz(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSmcIOLevel
N *
N * Purpose:       Set SMC IO level
N *
N * Inputs:        eLevel     SMC IO level
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSmcIOLevel(ccr_smc_io_level_e eLevel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Set Clock Stabilization Compare Value
N *
N * Inputs:        eClocks    clock type
N *                u8Value    clock stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockStabilizationCompareValue(ccr_clocks_e eClocks, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      u16CCR_getBootOptions
N *
N * Purpose:       Read boot options
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Boot options
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetBootOptions(void);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetSystemIntStatusAll
N *
N * Purpose:       Read interrupt status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetSystemIntStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSystemIntStatusSingle
N *
N * Purpose:       Read interrupt status of a singe interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Clear interrupt status of a single interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableECCInterrupt
N *
N * Purpose:       Enable ECC interrupt
N *
N * Inputs:        eEccType      ECC type
N *                eEccIntType   ECC inte3rrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableECCInterrupt(ccr_ecc_e eEccType, ccr_ecc_interrupt_type_e eEccIntType);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetDeviceModesAll
N *
N * Purpose:       Read all device modes
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetDeviceModesAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceModesSingle
N *
N * Purpose:       read single device mode
N *
N * Inputs:        eMode      Device mode
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDeviceModesSingle(ccr_modes_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableWakeupSource
N *
N * Purpose:       Enable or disable wakeup source
N *
N * Inputs:        eSource    wakeup source
N *                eEn        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableWakeupSource(ccr_wakeup_source_e eSource, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetWakeupAttribute
N *
N * Purpose:       Set wakeup attribute
N *
N * Inputs:        eSource       wakeup source
N *                eAttribute    wakeup attribute
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetWakeupAttribute(ccr_wakeup_source_e eSource, ccr_wakeup_attribute_e eAttribute);
N
N/****************************************************************************
N *
N * Function:      u16CCR_GetWakeupSourceInterruptAll
N *
N * Purpose:       Read all wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: wakeup source interrupt status vector
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetWakeupSourceInterruptAll(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWakeupSourceInterruptSingle
N *
N * Purpose:       Read single wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWakeupSourceInterruptSingle(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWakeupInterruptSource
N *
N * Purpose:       Clear wakeup interrupt source
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWakeupInterruptSource(ccr_wakeup_source_e eSource);
N
N/****************************************************************************/
N
N
N#endif /* CCR_LLDD_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 27 "..\..\..\..\hldd\inc\qspi.h" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define QSPI_WIP      0x1
N#define QSPI_WE       0x80
N#define SIZE_64KB     0x10000
N#define SIZE_256B     0x100
N#define MASK_64KB     0xFFFF0000
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* qspi devices */
Ntypedef enum qspi_dev_type_e
N{
N    DEV_MX25L3235E            =  1,   /* QSPI Device Type Micronix  - MX25L3235E */
N    DEV_MX25L6435E            =  2,   /* QSPI Device Type Micronix  - MX25L6435E */
N    DEV_MX25L12835F           =  3,   /* QSPI Device Type Micronix  - MX25L12835F */
N    DEV_MX66L51239F_3BYTE_ADR =  4,   /* QSPI Device Type Micronix  - MX66L51239F 3 Byte Addressing */
N    DEV_MX66L51239F_4BYTE_ADR =  5,   /* QSPI Device Type Micronix  - MX66L51239F 4 Byte Addressing */
N    DEV_N25Q064A              =  6,   /* QSPI Device Type Micron    - DEV_N25Q064A new */
N    DEV_N25Q512A_3BYTE_ADR    =  7,   /* QSPI Device Type Micron    - DEV_N25Q512A 3 Byte Addressing */
N    DEV_N25Q512A_4BYTE_ADR    =  8,   /* QSPI Device Type Micron    - DEV_N25Q512A 4 Byte Addressing */
N    DEV_S25FL032P             =  9,   /* QSPI Device Type Spansion  - S25FL032P */
N    DEV_S25FL064P             = 10,   /* QSPI Device Type Spansion  - S25FL064P */
N    DEV_S25FL127P             = 11,   /* QSPI Device Type Spansion  - S25FL127P */
N    DEV_S25FL116KIF01         = 12,   /* QSPI Device Type Spansion  - DEV_S25FL116KIF01 */
N    DEV_S25FL132KIF01         = 13,   /* QSPI Device Type Spansion  - DEV_S25FL132KIF01 */
N    DEV_S25FL164KIF01         = 14,   /* QSPI Device Type Spansion  - DEV_S25FL164KIF01 */
N    DEV_W25Q32B               = 15,   /* QSPI Device Type Winbond   - W25Q32B */
N    DEV_W25Q64C               = 16,   /* QSPI Device Type Winbond   - W25Q64C */
N    DEV_W25Q256F_3BYTE_ADR    = 17,   /* QSPI Device Type Winbond   - W25Q256F 3 Byte Addressing */
N    DEV_W25Q256F_4BYTE_ADR    = 18,   /* QSPI Device Type Winbond   - W25Q256F 4 Byte Addressing */
N    DEV_INTERNAL_32MBIT       = 19,   /* Internal QSPI (MX25L3235E) - 32MBit */
N    DEV_INTERNAL_64MBIT       = 20,   /* Internal QSPI (MX25L6435E) - 64MBit */
N    DEV_TYPE_INVALID          = 21    /* Device Invalid */
N} qspi_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vAssignQSPISettings
N *
N * Purpose:       assign settings dependant on
N *
N * Inputs:        u32QSPI_DeviceType   QSPI device selection (0 uses config in qspi_settings.h)
N *                u16BaseAddress       physical base address
N *
N * Outputs:       peClocFreq           pointer to clock frequence
N *                peModulationType     pointer to clock modulation type
N *                pstDirectConfig      pointer to direct interface configuration
N *                pstProgConfig        pointer to program interface configuration
N *
N * Return Values: C_SUCCESS/C_FAILED (parameter error)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32AssignQSPISettings(qspi_dev_type_e eQSPI_DeviceType, uint16_t u16BaseAddress,
N                              ccr_clk_freq_e * peClocFreq, ccr_modulated_clk_e * peModulationType,
N                              qspic_directconfig_st * pstDirectConfig, qspic_prgconfig_st * pstProgConfig);
N
N/****************************************************************************
N *
N * Function:      i32ClearFlash
N *
N * Purpose:       clears flash sector by sector
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32SectorCount    number of sectors to be erased
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32ClearFlash(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32SectorCount);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWOE
N *
N * Purpose:       Perform program of Flash without erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWOE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWE
N *
N * Purpose:       Perform program of Flash with erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N
N#endif /* _QSPI_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 29 "..\..\inc\config.h" 2
N
N/*****************************************************************************************
N* select Drehbuch
N* 0: 600-450, 1: 440, 2: 325, 3: 225
N*****************************************************************************************/
N#define DREHBUCH    (2)
N/* select output device
N* 0: monitor
N* 1: displays
N*****************************************************************************************/
N#define OUTPUT_DEVICE    0
N
N/*****************************************************************************************
N* QSPI
N* 1: S25FL032P
N* 2: S25FL064P
N*****************************************************************************************/
N#define QSPI_DEVICE      (DEV_S25FL127P)
N
N/*****************************************************************************************
N* Parallel NOR
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NOR_DEVICE      1
N
N/*****************************************************************************************
N* NAND
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NAND_DEVICE      1
N
N/*****************************************************************************************
N* RAM
N*  1: MT46H8M32LFB5-6
N*  2: MT46H16M32LFB5-6
N*  3: IS42S32800D-6
N*****************************************************************************************/
N#define RAM_DEVICE    2
N
N/*****************************************************************************************
N*                 D I S P L A Y   -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* enable GDC0 and / or GDC1 */
N#define GDCx0		ON
N#define GDCx1		OFF
N
N/* TO DO: Set Resolution (QVGA_RES / HNTSC_RES / HVGA_RES / VGA_RES / WVGA_RES / WVGA_1_RES /
N                          SVGA_RES / DVGA_RES / DVGA_1_RES / DVGA_1_RES_60) */
N#define DISPLAY_RESOLUTION_0 CLAA121WB//WVGA_RES_50 //DAL 20151221
N#define DISPLAY_RESOLUTION_1 QVGA_RES_60
N
N/****************************************************************************************
N*                        G D C 0  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC0 */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A 	ON
N#define GDC0_LAYER_B 	OFF
N#define GDC0_LAYER_C 	OFF
N#define GDC0_LAYER_D 	OFF
N#define GDC0_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF (only possible for layer A) / FMT_RGB16 / FMT_RGBA32 */
N#define GDC0_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_D_DOUBLEFUFFERING		OFF
N#define GDC0_LAYER_E_DOUBLEFUFFERING		OFF
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC0_LAYERA_WIDTH     1280
N#define GDC0_LAYERA_HEIGHT    420
N#define GDC0_LAYERA_STARTX      0
N#define GDC0_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC0_LAYERB_WIDTH     400
N#define GDC0_LAYERB_HEIGHT    400
N#define GDC0_LAYERB_STARTX    550
N#define GDC0_LAYERB_STARTY    20
N
N/* Layer C */
N#define GDC0_LAYERC_WIDTH     800
N#define GDC0_LAYERC_HEIGHT    480
N#define GDC0_LAYERC_STARTX      0
N#define GDC0_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC0_LAYERD_WIDTH     800
N#define GDC0_LAYERD_HEIGHT    480
N#define GDC0_LAYERD_STARTX      0
N#define GDC0_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC0_LAYERE_WIDTH     800
N#define GDC0_LAYERE_HEIGHT    480
N#define GDC0_LAYERE_STARTX      0
N#define GDC0_LAYERE_STARTY      0
N
N
N/****************************************************************************************
N*                        G D C 1  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC1 */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A 	OFF
N#define GDC1_LAYER_B 	OFF
N#define GDC1_LAYER_C 	OFF
N#define GDC1_LAYER_D 	OFF
N#define GDC1_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF / FMT_RGB16 / FMT_RGBA32 */
N#define GDC1_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_D_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_E_DOUBLEFUFFERING		ON
N
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC1_LAYERA_WIDTH     320
N#define GDC1_LAYERA_HEIGHT    240
N#define GDC1_LAYERA_STARTX      0
N#define GDC1_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC1_LAYERB_WIDTH     640
N#define GDC1_LAYERB_HEIGHT    480
N#define GDC1_LAYERB_STARTX      0
N#define GDC1_LAYERB_STARTY      0
N
N/* Layer C */
N#define GDC1_LAYERC_WIDTH	    640
N#define GDC1_LAYERC_HEIGHT    480
N#define GDC1_LAYERC_STARTX      0
N#define GDC1_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC1_LAYERD_WIDTH     640
N#define GDC1_LAYERD_HEIGHT    480
N#define GDC1_LAYERD_STARTX      0
N#define GDC1_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC1_LAYERE_WIDTH     640
N#define GDC1_LAYERE_HEIGHT    480
N#define GDC1_LAYERE_STARTX      0
N#define GDC1_LAYERE_STARTY      0
N
N#endif /* CONFIG_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: config.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 28 "..\..\usecases\inc\buttons.h" 2
N
N/**********************************************
N*               Defs                          *
N**********************************************/
N
N
N/**********************************************
N*               Structs                       *
N**********************************************/
N
N
N/**********************************************
N*         External variables                  *
N**********************************************/
N
N
N/**********************************************
N*               Functions                     *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vInitPushbuttons
N *
N * Purpose:       Initialisation of bushbuttons
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N * Precondition:  none
N *
N ***************************************************************************/
Nvoid vInitPushbuttons(void);
N
N/****************************************************************************
N *
N * Function:      vUpdatePushbuttons
N *
N * Purpose:       periodic update of button variables
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N * Precondition:  vInitPushbuttons has to be called before
N *
N ***************************************************************************/
Nvoid vUpdatePushbuttons(void);
N
N/****************************************************************************
N *
N * Function:      vEvalPushbuttons
N *
N * Purpose:       periodic evaluation of button variables
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N * Precondition:  vInitPushbuttons has to be called before
N *
N ***************************************************************************/
Nvoid vEvalPushbuttons(void);
N
Nvoid vAOBInstallEncPollTimer(uint8_t n);
N#endif /* _BUTTONS_H */
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 25 "..\..\usecases\src\buttons.c" 2
N#include "gpio.h"
L 1 "..\..\..\..\lldd\inc\gpio.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : General Purpose Input Output Port Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : General Purpose Input Output Port (GPIO)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.12 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GPIO_H
N#define GPIO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_GPIO_H_REVISION     "$Revision: 1.12 $"
N#define LLDD_GPIO_H_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N
N#define PORT_DDR_DQ0_AS_GPIO               0
N#define PORT_DDR_DQ0_AS_ESEI1MISO          1
N#define PORT_DDR_DQ0_AS_PWMOUT00           2
N
N#define PORT_DDR_DQ1_AS_GPIO               0
N#define PORT_DDR_DQ1_AS_ESEI1MOSI          1
N#define PORT_DDR_DQ1_AS_PWMOUT01           2
N
N#define PORT_DDR_DQ2_AS_GPIO               0
N#define PORT_DDR_DQ2_AS_ESEI1SCLK          1
N#define PORT_DDR_DQ2_AS_PWMOUT02           2
N
N#define PORT_DDR_DQ3_AS_GPIO               0
N#define PORT_DDR_DQ3_AS_ESEI1SSOI          1
N#define PORT_DDR_DQ3_AS_PWMOUR03           2
N
N#define PORT_DDR_DQ4_AS_GPIO               0
N#define PORT_DDR_DQ4_AS_PWMOUT04           1
N#define PORT_DDR_DQ4_AS_TBIO0              2
N
N#define PORT_DDR_DQ5_AS_GPIO               0
N#define PORT_DDR_DQ5_AS_PWMOUT05           1
N#define PORT_DDR_DQ5_AS_TBIO1              2
N
N#define PORT_DDR_DQ6_AS_GPIO               0
N#define PORT_DDR_DQ6_AS_PWMOUT06           1
N#define PORT_DDR_DQ6_AS_TBIO2              2
N
N#define PORT_DDR_DQ7_AS_GPIO               0
N#define PORT_DDR_DQ7_AS_PWMOUT07           1
N#define PORT_DDR_DQ7_AS_TBIO3              2
N
N#define PORT_DDR_DQ8_AS_GPIO               0
N#define PORT_DDR_DQ8_AS_PWMOUT08           1
N#define PORT_DDR_DQ8_AS_TBIO6              2
N
N#define PORT_DDR_DQ9_AS_GPIO               0
N#define PORT_DDR_DQ9_AS_PWMOUT09           1
N#define PORT_DDR_DQ9_AS_TBIO7              2
N
N#define PORT_DDR_DQ10_AS_GPIO              0
N#define PORT_DDR_DQ10_AS_PWMOUT10          1
N#define PORT_DDR_DQ10_AS_TBIO8             2
N
N#define PORT_DDR_DQ11_AS_GPIO              0
N#define PORT_DDR_DQ11_AS_PWMOUT11          1
N#define PORT_DDR_DQ11_AS_TBIO9             2
N
N#define PORT_DDR_DQ12_AS_GPIO              0
N#define PORT_DDR_DQ12_AS_UART0RX           1
N#define PORT_DDR_DQ12_AS_PWMOUT12          2
N
N#define PORT_DDR_DQ13_AS_GPIO              0
N#define PORT_DDR_DQ13_AS_UART0TX           1
N#define PORT_DDR_DQ13_AS_PWMOUT13          2
N
N#define PORT_DDR_DQ14_AS_GPIO              0
N#define PORT_DDR_DQ14_AS_UART1RX           1
N#define PORT_DDR_DQ14_AS_PWMOUT14          2
N
N#define PORT_DDR_DQ15_AS_GPIO              0
N#define PORT_DDR_DQ15_AS_UART1TX           1
N#define PORT_DDR_DQ15_AS_PWMOUT15          2
N
N#define PORT_DDR_DM0_AS_GPIO               0
N#define PORT_DDR_DM0_AS_PWMOUT16           1
N
N#define PORT_DDR_DM1_AS_GPIO               0
N#define PORT_DDR_DM1_AS_PWMOUT17           1
N
N#define PORT_DDR_WE_AS_GPIO                0
N#define PORT_DDR_WE_AS_PWMOUT18            1
N
N#define PORT_DDR_RAS_AS_GPIO               0
N#define PORT_DDR_RAS_AS_PWMOUT19           1
N
N#define PORT_DDR_CAS_AS_GPIO               0
N#define PORT_DDR_CAS_AS_PWMOUT20           1
N
N#define PORT_DDR_CS_AS_GPIO                0
N#define PORT_DDR_CS_AS_PWMOUT21            1
N
N#define PORT_DDR_CKE_AS_GPIO               0
N#define PORT_DDR_CKE_AS_PWMOUT22           1
N
N#define PORT_DDR_BA0_AS_GPIO               0
N#define PORT_DDR_BA0_AS_QSPI1_SCLK         1
N#define PORT_DDR_BA0_AS_PWMOUT23           2
N
N#define PORT_DDR_BA1_AS_GPIO               0
N#define PORT_DDR_BA1_AS_QSPI1_SIO0         1
N#define PORT_DDR_BA1_AS_HSPWM0             2
N
N#define PORT_DDR_A0_AS_GPIO                0
N#define PORT_DDR_A0_AS_QSPI1_SIO1          1
N#define PORT_DDR_A0_AS_HSPWM0N             2
N
N#define PORT_DDR_A1_AS_GPIO                0
N#define PORT_DDR_A1_AS_QSPI1_SIO2          1
N#define PORT_DDR_A1_AS_HSPWM1              2
N
N#define PORT_DDR_A2_AS_GPIO                0
N#define PORT_DDR_A2_AS_QSPI1_SIO3          1
N#define PORT_DDR_A2_AS_HSPWM1N             2
N
N#define PORT_DDR_A3_AS_GPIO                0
N#define PORT_DDR_A3_AS_QSPI1_CS0           1
N#define PORT_DDR_A3_AS_HSPWM2              2
N
N#define PORT_DDR_A4_AS_GPIO                0
N#define PORT_DDR_A4_AS_QSPI1_CS1           1
N#define PORT_DDR_A4_AS_HSPWM2N             2
N
N#define PORT_DDR_A5_AS_GPIO                0
N#define PORT_DDR_A5_AS_IRQ0                1
N#define PORT_DDR_A5_AS_HSPWM3              2
N
N#define PORT_DDR_A6_AS_GPIO                0
N#define PORT_DDR_A6_AS_EBIF_AD08           1
N#define PORT_DDR_A6_AS_HSPWM3N             2
N
N#define PORT_DDR_A7_AS_GPIO                0
N#define PORT_DDR_A7_AS_CMRGB0              1
N#define PORT_DDR_A7_AS_EBIF_AD09           2
N
N#define PORT_DDR_A8_AS_GPIO                0
N#define PORT_DDR_A8_AS_CMRGB1              1
N#define PORT_DDR_A8_AS_EBIF_AD10           2
N
N#define PORT_DDR_A9_AS_GPIO                0
N#define PORT_DDR_A9_AS_CMRGB2              1
N#define PORT_DDR_A9_AS_EBIF_AD11           2
N
N#define PORT_DDR_A10_AS_GPIO               0
N#define PORT_DDR_A10_AS_CMRGB3             1
N#define PORT_DDR_A10_AS_EBIF_AD12          2
N
N#define PORT_DDR_A11_AS_GPIO               0
N#define PORT_DDR_A11_AS_CMRGB4             1
N#define PORT_DDR_A11_AS_EBIF_AD13          2
N
N#define PORT_DDR_A12_AS_GPIO               0
N#define PORT_DDR_A12_AS_CMRGB5             1
N#define PORT_DDR_A12_AS_EBIF_AD14          2
N
N#define PORT_DDR_A13_AS_GPIO               0
N#define PORT_DDR_A13_AS_CMRGB6             1
N#define PORT_DDR_A13_AS_EBIF_AD15          2
N#define PORT_DDR_A13_AS_IRQ1               3
N
N#define PORT_DDR_DQS0_AS_GPIO              0
N#define PORT_DDR_DQS0_AS_GDC0_PWM          1
N#define PORT_DDR_DQS0_AS_CMRGB7            2
N#define PORT_DDR_DQS0_AS_EBIF_CS1          3
N#define PORT_DDR_DQS0_AS_IRQ5              4
N
N#define PORT_DDR_DQS1_AS_GPIO              0
N#define PORT_DDR_DQS1_AS_GDC1_PWM          1
N#define PORT_DDR_DQS1_AS_CMFOOD            2
N#define PORT_DDR_DQS1_AS_IRQ4              3
N
N#define PORT_DDR_DQS2_AS_GPIO              0
N#define PORT_DDR_DQS2_AS_CMCBCR0           1
N#define PORT_DDR_DQS2_AS_EBIF_AD00         2
N#define PORT_DDR_DQS2_AS_NF_DATA0          3
N#define PORT_DDR_DQS2_AS_IRQ3              4
N#define PORT_DDR_DQS2_AS_PWMOUT04          5
N#define PORT_DDR_DQS2_AS_HSPWM1            6
N
N#define PORT_DDR_DQS3_AS_GPIO              0
N#define PORT_DDR_DQS3_AS_CMCBCR1           1
N#define PORT_DDR_DQS3_AS_EBIF_AD01         2
N#define PORT_DDR_DQS3_AS_NF_DATA1          3
N#define PORT_DDR_DQS3_AS_IRQ2              4
N#define PORT_DDR_DQS3_AS_PWMOUT05          5
N#define PORT_DDR_DQS3_AS_HSPWM1N           6
N
N#define PORT_DDR_DM2_AS_GPIO               0
N#define PORT_DDR_DM2_AS_D0RGB0             1
N#define PORT_DDR_DM2_AS_CMCBCR2            2
N#define PORT_DDR_DM2_AS_EBIF_AD02          3
N#define PORT_DDR_DM2_AS_NF_DATA2           4
N#define PORT_DDR_DM2_AS_PWMOUT06           5
N
N#define PORT_DDR_DM3_AS_GPIO               0
N#define PORT_DDR_DM3_AS_D0RGB1             1
N#define PORT_DDR_DM3_AS_CMCBCR3            2
N#define PORT_DDR_DM3_AS_EBIF_AD03          3
N#define PORT_DDR_DM3_AS_NF_DATA3           4
N#define PORT_DDR_DM3_AS_PWMOUT07           5
N
N#define PORT_DDR_DQ16_AS_GPIO              0
N#define PORT_DDR_DQ16_AS_D0RGB8            1
N#define PORT_DDR_DQ16_AS_CMCBCR4           2
N#define PORT_DDR_DQ16_AS_EBIF_AD04         3
N#define PORT_DDR_DQ16_AS_NF_DATA4          4
N#define PORT_DDR_DQ16_AS_PWMOUT08          5
N
N#define PORT_DDR_DQ17_AS_GPIO              0
N#define PORT_DDR_DQ17_AS_D0RGB9            1
N#define PORT_DDR_DQ17_AS_CMCBCR5           2
N#define PORT_DDR_DQ17_AS_EBIF_AD05         3
N#define PORT_DDR_DQ17_AS_NF_DATA5          4
N#define PORT_DDR_DQ17_AS_PWMOUT09          5
N
N#define PORT_DDR_DQ18_AS_GPIO              0
N#define PORT_DDR_DQ18_AS_D0RGB16           1
N#define PORT_DDR_DQ18_AS_CMCBCR6           2
N#define PORT_DDR_DQ18_AS_EBIF_AD06         3
N#define PORT_DDR_DQ18_AS_NF_DATA6          4
N#define PORT_DDR_DQ18_AS_PWMOUT10          5
N
N#define PORT_DDR_DQ19_AS_GPIO              0
N#define PORT_DDR_DQ19_AS_D0RGB17           1
N#define PORT_DDR_DQ19_AS_CMCBCR7           2
N#define PORT_DDR_DQ19_AS_EBIF_AD07         3
N#define PORT_DDR_DQ19_AS_NF_DATA7          4
N#define PORT_DDR_DQ19_AS_PWMOUT11          5
N
N#define PORT_DDR_DQ20_AS_GPIO              0
N#define PORT_DDR_DQ20_AS_CMCLK             1
N#define PORT_DDR_DQ20_AS_EBIF_ALE          2
N#define PORT_DDR_DQ20_AS_NF_ALE            3
N#define PORT_DDR_DQ20_AS_PWMOUT12          4
N
N#define PORT_DDR_DQ21_AS_GPIO              0
N#define PORT_DDR_DQ21_AS_CMHDISP           1
N#define PORT_DDR_DQ21_AS_EBIF_CS0          2
N#define PORT_DDR_DQ21_AS_NF_CLE            3
N#define PORT_DDR_DQ21_AS_PWMOUT13          4
N
N#define PORT_DDR_DQ22_AS_GPIO              0
N#define PORT_DDR_DQ22_AS_CMHSYNC           1
N#define PORT_DDR_DQ22_AS_EBIF_OE           2
N#define PORT_DDR_DQ22_AS_NF_RE             3
N#define PORT_DDR_DQ22_AS_PWMOUT14          4
N
N#define PORT_DDR_DQ23_AS_GPIO              0
N#define PORT_DDR_DQ23_AS_CMVSYNC           1
N#define PORT_DDR_DQ23_AS_EBIF_WE           2
N#define PORT_DDR_DQ23_AS_NF_WE             3
N#define PORT_DDR_DQ23_AS_PWMOUT15          4
N
N#define PORT_DDR_DQ24_AS_GPIO              0
N#define PORT_DDR_DQ24_AS_CMY0              1
N#define PORT_DDR_DQ24_AS_EBIF_AEX0         2
N#define PORT_DDR_DQ24_AS_NF_BUSYN          3
N#define PORT_DDR_DQ24_AS_PWMOUT16          4
N
N#define PORT_DDR_DQ25_AS_GPIO              0
N#define PORT_DDR_DQ25_AS_CMY1              1
N#define PORT_DDR_DQ25_AS_EBIF_AEX1         2
N#define PORT_DDR_DQ25_AS_NF_CSN            3
N#define PORT_DDR_DQ25_AS_PWMOUT17          4
N
N#define PORT_DDR_DQ26_AS_GPIO              0
N#define PORT_DDR_DQ26_AS_CMY2              1
N#define PORT_DDR_DQ26_AS_EBIF_AEX2         2
N#define PORT_DDR_DQ26_AS_NF_CSN2           3
N#define PORT_DDR_DQ26_AS_PWMOUT18          4
N
N#define PORT_DDR_DQ27_AS_GPIO              0
N#define PORT_DDR_DQ27_AS_CMY3              1
N#define PORT_DDR_DQ27_AS_EBIF_AEX3         2
N#define PORT_DDR_DQ27_AS_PWMOUT19          3
N
N#define PORT_DDR_DQ28_AS_GPIO              0
N#define PORT_DDR_DQ28_AS_CMY4              1
N#define PORT_DDR_DQ28_AS_EBIF_AEX4         2
N#define PORT_DDR_DQ28_AS_ESEI1MISO         3
N#define PORT_DDR_DQ28_AS_PWMOUT20          4
N
N#define PORT_DDR_DQ29_AS_GPIO              0
N#define PORT_DDR_DQ29_AS_CMY5              1
N#define PORT_DDR_DQ29_AS_EBIF_AEX5         2
N#define PORT_DDR_DQ29_AS_ESEI1MOSI         3
N#define PORT_DDR_DQ29_AS_PWMOUT21          4
N
N#define PORT_DDR_DQ30_AS_GPIO              0
N#define PORT_DDR_DQ30_AS_CMY6              1
N#define PORT_DDR_DQ30_RESERVED             2
N#define PORT_DDR_DQ30_AS_ESEI1_SCLK        3
N#define PORT_DDR_DQ30_AS_PWMOUT22          4
N
N#define PORT_DDR_DQ31_AS_GPIO              0
N#define PORT_DDR_DQ31_AS_CMY7              1
N#define PORT_DDR_DQ31_AS_ESEI1SSOI         2
N#define PORT_DDR_DQ31_AS_PWMOUT23          3
N
N#define PORT_QSPI0_SIO0_AS_GPIO            0
N#define PORT_QSPI0_SIO0_AS_QSPI0_SIO0      1
N#define PORT_QSPI0_SIO0_AS_QSPI1_SIO0      2
N#define PORT_QSPI0_SIO0_AS_EBIF_WAITN      3
N#define PORT_QSPI0_SIO0_AS_NF_BUSYN        4
N
N#define PORT_QSPI0_SIO1_AS_GPIO            0
N#define PORT_QSPI0_SIO1_AS_QSPI0_SIO1      1
N#define PORT_QSPI0_SIO1_AS_QSPI1_SIO1      2
N#define PORT_QSPI0_SIO1_AS_EBIF_OE         3
N#define PORT_QSPI0_SIO1_AS_NF_RE           4
N
N#define PORT_QSPI0_SIO2_AS_GPIO            0
N#define PORT_QSPI0_SIO2_AS_QSPI0_SIO2      1
N#define PORT_QSPI0_SIO2_AS_QSPI1_SIO2      2
N#define PORT_QSPI0_SIO2_AS_EBIF_WE         3
N#define PORT_QSPI0_SIO2_AS_NF_WE           4
N
N#define PORT_QSPI0_SIO3_AS_GPIO            0
N#define PORT_QSPI0_SIO3_AS_QSPI0_SIO3      1
N#define PORT_QSPI0_SIO3_AS_QSPI1_SIO3      2
N#define PORT_QSPI0_SIO3_AS_EBIF_ALE        3
N#define PORT_QSPI0_SIO3_AS_NF_ALE          4
N
N#define PORT_QSPI0_CS0_AS_GPIO             0
N#define PORT_QSPI0_CS0_AS_QSPI0_CS0        1
N#define PORT_QSPI0_CS0_AS_QSPI1_CS0        2
N#define PORT_QSPI0_CS0_AS_EBIF_CS0         3
N#define PORT_QSPI0_CS0_AS_NF_CSN           4
N
N#define PORT_QSPI0_SCLK_AS_GPIO            0
N#define PORT_QSPI0_SCLK_AS_QSPI0_SCLK      1
N#define PORT_QSPI0_SCLK_AS_QSPI1_SCLK      2
N#define PORT_QSPI0_SCLK_AS_EBIF_SYSCLK0    3
N#define PORT_QSPI0_SCLK_AS_NF_CLE          4
N
N#define PORT_D0HDISP_AS_GPIO               0
N#define PORT_D0HDISP_AS_D0HDISP            1
N
N#define PORT_D0HSYNC_AS_GPIO               0
N#define PORT_D0HSYNC_AS_D0HSYNC            1
N
N#define PORT_D0VSYNC_AS_GPIO               0
N#define PORT_D0VSYNC_AS_D0VSYNC            1
N
N#define PORT_D0DOTCLK_AS_GPIO              0
N#define PORT_D0DOTCLK_AS_D0DOTCLK          1
N
N#define PORT_D0RGB0_AS_GPIO                0
N#define PORT_D0RGB0_AS_D0RGB0              1
N#define PORT_D0RGB0_AS_GDC0PWM             2
N
N#define PORT_D0RGB1_AS_GPIO                0
N#define PORT_D0RGB1_AS_D0RGB1              1
N
N#define PORT_D0RGB2_AS_GPIO                0
N#define PORT_D0RGB2_AS_D0RGB2              1
N#define PORT_D0RGB2_AS_DSU_TRACED08        2
N
N#define PORT_D0RGB3_AS_GPIO                0
N#define PORT_D0RGB3_AS_D0RGB3              1
N#define PORT_D0RGB3_AS_DSU_TRACED11        2
N
N#define PORT_D0RGB4_AS_GPIO                0
N#define PORT_D0RGB4_AS_D0RGB4              1
N#define PORT_D0RGB4_AS_DSU_TRACECLK        2
N
N#define PORT_D0RGB5_AS_GPIO                0
N#define PORT_D0RGB5_AS_D0RGB5              1
N#define PORT_D0RGB5_AS_DSU_TRACED02        2
N
N#define PORT_D0RGB6_AS_GPIO                0
N#define PORT_D0RGB6_AS_D0RGB6              1
N#define PORT_D0RGB6_AS_DSU_TRACE05         2
N
N#define PORT_D0RGB7_AS_GPIO                0
N#define PORT_D0RGB7_AS_D0RGB7              1
N#define PORT_D0RGB7_AS_DSU_TRACED14        2
N
N#define PORT_D0RGB8_AS_GPIO                0
N#define PORT_D0RGB8_AS_D0RGB8              1
N
N#define PORT_D0RGB9_AS_GPIO                0
N#define PORT_D0RGB9_AS_D0RGB9              1
N
N#define PORT_D0RGB10_AS_GPIO               0
N#define PORT_D0RGB10_AS_D0RGB10            1
N#define PORT_D0RGB10_AS_DSU_TRACED09       2
N
N#define PORT_D0RGB11_AS_GPIO               0
N#define PORT_D0RGB11_AS_D0RGB11            1
N#define PORT_D0RGB11_AS_DSU_TRACED12       2
N
N#define PORT_D0RGB12_AS_GPIO               0
N#define PORT_D0RGB12_AS_D0RGB12            1
N#define PORT_D0RGB12_AS_DSU_TRACED00       2
N
N#define PORT_D0RGB13_AS_GPIO               0
N#define PORT_D0RGB13_AS_D0RGB13            1
N#define PORT_D0RGB13_AS_DSU_TRACED03       2
N
N#define PORT_D0RGB14_AS_GPIO               0
N#define PORT_D0RGB14_AS_D0RGB14            1
N#define PORT_D0RGB14_AS_DSU_TRACED06       2
N
N#define PORT_D0RGB15_AS_TSM_TPC0_GTDO      0
N#define PORT_D0RGB15_AS_D0RGB15            1
N#define PORT_D0RGB15_AS_DSU_TRACED15       2
N#define PORT_D0RGB15_AS_GPIO               3
N
N#define PORT_D0RGB16_AS_GPIO               0
N#define PORT_D0RGB16_AS_D0RGB16            1
N
N#define PORT_D0RGB17_AS_GPIO               0
N#define PORT_D0RGB17_AS_D0RGB17            1
N
N#define PORT_D0RGB18_AS_GPIO               0
N#define PORT_D0RGB18_AS_D0RGB18            1
N#define PORT_D0RGB18_AS_DSU_TRACED10       2
N
N#define PORT_D0RGB19_AS_GPIO               0
N#define PORT_D0RGB19_AS_D0RGB19            1
N#define PORT_D0RGB19_AS_DSU_TRACED13       2
N
N#define PORT_D0RGB20_AS_GPIO               0
N#define PORT_D0RGB20_AS_D0RGB20            1
N#define PORT_D0RGB20_AS_DSU_TRACED01       2
N
N#define PORT_D0RGB21_AS_GPIO               0
N#define PORT_D0RGB21_AS_D0RGB21            1
N#define PORT_D0RGB21_AS_DSU_TRACECTL       2
N
N#define PORT_D0RGB22_AS_GPIO               0
N#define PORT_D0RGB22_AS_D0RGB22            1
N#define PORT_D0RGB22_AS_DSU_TRACED07       2
N
N#define PORT_D0RGB23_AS_GPIO               0
N#define PORT_D0RGB23_AS_D0RGB23            1
N#define PORT_D0RGB23_AS_DSU_TRACED04       2
N
N#define PORT_DOTCLKIN_AS_GPIO              0
N#define PORT_DOTCLKIN_AS_DOTCLKIN          1
N#define PORT_DOTCLKIN_AS_QSPI1_CS1         2
N#define PORT_DOTCLKIN_AS_EBIF_CS1          3
N#define PORT_DOTCLKIN_AS_NF_CSN2           4
N
N#define PORT_PNLGPP0_AS_TSM_GTMS           0
N#define PORT_PNLGPP0_AS_PNLGPP0            1
N#define PORT_PNLGPP0_AS_QSPI1_CS0          2
N#define PORT_PNLGPP0_AS_EBIF_AD08          3
N#define PORT_PNLGPP0_AS_NF_DATA8           4
N#define PORT_PNLGPP0_AS_I2S0SD             5
N#define PORT_PNLGPP0_AS_ESEI0MISO          6
N#define PORT_PNLGPP0_AS_TBIO0              7
N
N#define PORT_PNLGPP1_AS_TSM_GTDI           0
N#define PORT_PNLGPP1_AS_PNLGPP1            1
N#define PORT_PNLGPP1_AS_QSPI1_SIO0         2
N#define PORT_PNLGPP1_AS_EBIF_AD09          3
N#define PORT_PNLGPP1_AS_NF_DATA9           4
N#define PORT_PNLGPP1_AS_I2S0WS             5
N#define PORT_PNLGPP1_AS_ESEI0MOSI          6
N#define PORT_PNLGPP1_AS_TBIO1              7
N
N#define PORT_PNLGPP2_AS_TSM_GTCK           0
N#define PORT_PNLGPP2_AS_PNLGPP2            1
N#define PORT_PNLGPP2_AS_QSPI1_SCLK         2
N#define PORT_PNLGPP2_AS_EBIF_AD10          3
N#define PORT_PNLGPP2_AS_NF_DATA10          4
N#define PORT_PNLGPP2_AS_I2S0CLK            5
N#define PORT_PNLGPP2_AS_ESEI0SCLK          6
N#define PORT_PNLGPP2_AS_TBIO6              7
N
N#define PORT_PNLGPP3_AS_TSM_GTRST          0
N#define PORT_PNLGPP3_AS_PNLGPP3            1
N#define PORT_PNLGPP3_AS_QSPI1_SIO1         2
N#define PORT_PNLGPP3_AS_EBIF_AD11          3
N#define PORT_PNLGPP3_AS_NF_DATA11          4
N#define PORT_PNLGPP3_AS_I2SMCLK            5
N#define PORT_PNLGPP3_AS_ESEI0SSOI          6
N#define PORT_PNLGPP3_AS_TBIO7              4
N
N#define PORT_PNLGPP4_AS_GPIO               0
N#define PORT_PNLGPP4_AS_PNLGPP4            1
N#define PORT_PNLGPP4_AS_QSPI1_SIO2         2
N#define PORT_PNLGPP4_AS_EBIF_AD12          3
N#define PORT_PNLGPP4_AS_NF_DATA12          4
N#define PORT_PNLGPP4_AS_PWMOUT18           5
N
N#define PORT_PNLGPP5_AS_GPIO               0
N#define PORT_PNLGPP5_AS_PNLGPP5            1
N#define PORT_PNLGPP5_AS_QSPI1_SIO3         2
N#define PORT_PNLGPP5_AS_EBIF_AD13          3
N#define PORT_PNLGPP5_AS_NF_DATA13          4
N#define PORT_PNLGPP5_AS_PWMOUT19           5
N
N#define PORT_PNLGPP6_AS_GPIO               0
N#define PORT_PNLGPP6_AS_PNLGPP6            1
N#define PORT_PNLGPP6_AS_GDC0PWM            2
N#define PORT_PNLGPP6_AS_EBIF_AD14          3
N#define PORT_PNLGPP6_AS_NF_DATA14          4
N#define PORT_PNLGPP6_AS_PWMOUT20           5
N
N#define PORT_PNLGPP7_AS_GPIO               0
N#define PORT_PNLGPP7_AS_PNLGPP7            1
N#define PORT_PNLGPP7_AS_GDC1PWM            2
N#define PORT_PNLGPP7_AS_EBIF_AD15          3
N#define PORT_PNLGPP7_AS_NF_DATA15          4
N#define PORT_PNLGPP7_AS_PWMOUT21           5
N
N#define PORT_D1HDISP_AS_GPIO               0
N#define PORT_D1HDISP_AS_D1HDISP            1
N#define PORT_D1HDISP_AS_EBIF_AEX3          2
N
N#define PORT_D1HSYNC_AS_GPIO               0
N#define PORT_D1HSYNC_AS_D1HSYNC            1
N#define PORT_D1HSYNC_AS_EBIF_AEX4          2
N
N#define PORT_D1VSYNC_AS_GPIO               0
N#define PORT_D1VSYNC_AS_D1VSYNC            1
N#define PORT_D1VSYNC_AS_EBIF_AEX5          2
N#define PORT_D1VSYNC_AS_DMA_REQ            3
N#define PORT_D1VSYNC_AS_DSU_TRACED08       4
N
N#define PORT_D1DOTCLK_AS_GPIO              0
N#define PORT_D1DOTCLK_AS_D1DOTCLK          1
N#define PORT_D1DOTCLK_AS_DMA_ACK           2
N#define PORT_D1DOTCLK_AS_DSU_TRACED11      3
N
N#define PORT_D1RGB0_AS_GPIO                0
N#define PORT_D1RGB0_AS_D1RGB0              1
N#define PORT_D1RGB0_AS_GDC1PWM             2
N#define PORT_D1RGB0_AS_EBIF_ALE            3
N#define PORT_D1RGB0_AS_EBIF_AEX0           4
N#define PORT_D1RGB0_AS_NF_BUSYN            5
N#define PORT_D1RGB0_AS_HSPWM1              6
N#define PORT_D1RGB0_AS_DSU_TRACECLK        7
N
N#define PORT_D1RGB1_AS_GPIO                0
N#define PORT_D1RGB1_AS_D1RGB1              1
N#define PORT_D1RGB1_AS_EBIF_CS0            2
N#define PORT_D1RGB1_AS_EBIF_AEX1           3
N#define PORT_D1RGB1_AS_NF_CSN              4
N#define PORT_D1RGB1_AS_PWMOUT11            5
N#define PORT_D1RGB1_AS_HSPWM1N             6
N#define PORT_D1RGB1_AS_DSU_TRACED02        7
N
N#define PORT_D1RGB2_AS_GPIO                0
N#define PORT_D1RGB2_AS_D1RGB2              1
N#define PORT_D1RGB2_AS_RESERVED            2
N#define PORT_D1RGB2_AS_NF_ALE              3
N#define PORT_D1RGB2_AS_DSU_TRACED05        4
N
N#define PORT_D1RGB3_AS_GPIO                0
N#define PORT_D1RGB3_AS_D1RGB3              1
N#define PORT_D1RGB3_AS_EBIF_OE             2
N#define PORT_D1RGB3_AS_NF_CLE              3
N#define PORT_D1RGB3_AS_DSU_TRACED14        4
N
N#define PORT_D1RGB4_AS_GPIO                0
N#define PORT_D1RGB4_AS_D1RGB4              1
N#define PORT_D1RGB4_AS_EBIF_WE             2
N#define PORT_D1RGB4_AS_NF_WE               3
N
N#define PORT_D1RGB5_AS_GPIO                0
N#define PORT_D1RGB5_AS_D1RGB5              1
N#define PORT_D1RGB5_AS_EBIF_AD00           2
N#define PORT_D1RGB5_AS_NF_RE               3
N
N#define PORT_D1RGB6_AS_GPIO                0
N#define PORT_D1RGB6_AS_D1RGB6              1
N#define PORT_D1RGB6_AS_EBIF_AD01           2
N#define PORT_D1RGB6_AS_NF_DATA0            3
N#define PORT_D1RGB6_AS_DSU_TRACED09        4
N
N#define PORT_D1RGB7_AS_GPIO                0
N#define PORT_D1RGB7_AS_D1RGB7              1
N#define PORT_D1RGB7_AS_EBIF_AD02           2
N#define PORT_D1RGB7_AS_NF_DATA1            3
N#define PORT_D1RGB7_AS_DSU_TRACED12        4
N
N#define PORT_D1RGB8_AS_GPIO                0
N#define PORT_D1RGB8_AS_D1RGB8              1
N#define PORT_D1RGB8_AS_EBIF_AD03           2
N#define PORT_D1RGB8_AS_EBIF_AEX2           3
N#define PORT_D1RGB8_AS_NFDATA2             4
N#define PORT_D1RGB8_AS_HSPWM2              5
N#define PORT_D1RGB8_AS_DSU_TRACED00        6
N
N#define PORT_D1RGB9_AS_GPIO                0
N#define PORT_D1RGB9_AS_D1RGB9              1
N#define PORT_D1RGB9_AS_EBIF_AD04           2
N#define PORT_D1RGB9_AS_EBIF_AEX3           3
N#define PORT_D1RGB9_AS_NF_DATA3            4
N#define PORT_D1RGB9_AS_PWMOUT12            5
N#define PORT_D1RGB9_AS_HSPWM2N             6
N#define PORT_D1RGB9_AS_DSU_TRACED03        7
N
N#define PORT_D1RGB10_AS_GPIO               0
N#define PORT_D1RGB10_AS_D1RGB10            1
N#define PORT_D1RGB10_AS_EBIF_AD05          2
N#define PORT_D1RGB10_AS_NF_DATA4           3
N#define PORT_D1RGB10_AS_DSU_TRACED06       4
N
N#define PORT_D1RGB11_AS_GPIO               0
N#define PORT_D1RGB11_AS_D1RGB11            1
N#define PORT_D1RGB11_AS_EBIF_AD06          2
N#define PORT_D1RGB11_AS_NF_DATA5           3
N#define PORT_D1RGB11_AS_DSU_TRACED15       4
N
N#define PORT_D1RGB12_AS_GPIO               0
N#define PORT_D1RGB12_AS_D1RGB12            1
N#define PORT_D1RGB12_AS_EBIF_AD07          2
N#define PORT_D1RGB12_AS_NF_DATA6           3
N
N#define PORT_D1RGB13_AS_GPIO               0
N#define PORT_D1RGB13_AS_D1RGB13            1
N#define PORT_D1RGB13_AS_EBIF_AD08          2
N#define PORT_D1RGB13_AS_NF_DATA7           3
N
N#define PORT_D1RGB14_AS_GPIO               0
N#define PORT_D1RGB14_AS_D1RGB14            1
N#define PORT_D1RGB14_AS_EBIF_AD09          2
N#define PORT_D1RGB14_AS_NF_DATA8           3
N#define PORT_D1RGB14_AS_DSU_TRACED10       4
N
N#define PORT_D1RGB15_AS_GPIO               0
N#define PORT_D1RGB15_AS_D1RGB15            1
N#define PORT_D1RGB15_AS_EBIF_AD10          2
N#define PORT_D1RGB15_AS_NF_DATA9           3
N#define PORT_D1RGB15_AS_DSU_TRACED13       4
N
N#define PORT_D1RGB16_AS_GPIO               0
N#define PORT_D1RGB16_AS_D1RGB16            1
N#define PORT_D1RGB16_AS_EBIF_AD11          2
N#define PORT_D1RGB16_AS_EBIF_AEX4          3
N#define PORT_D1RGB16_AS_NF_DATA10          4
N#define PORT_D1RGB16_AS_HSPWM3             5
N#define PORT_D1RGB16_AS_DSU_TRACED01       6
N
N#define PORT_D1RGB17_AS_GPIO               0
N#define PORT_D1RGB17_AS_D1RGB17            1
N#define PORT_D1RGB17_AS_EBIF_AD12          2
N#define PORT_D1RGB17_AS_EBIF_AEX5          3
N#define PORT_D1RGB17_AS_NF_DATA11          4
N#define PORT_D1RGB17_AS_PWMOUT13           5
N#define PORT_D1RGB17_AS_HSPWM3N            6
N#define PORT_D1RGB17_AS_DSU_TRACETL        7
N
N#define PORT_D1RGB18_AS_GPIO               0
N#define PORT_D1RGB18_AS_D1RGB18            1
N#define PORT_D1RGB18_AS_EBIF_AD13          2
N#define PORT_D1RGB18_AS_NF_DATA12          3
N#define PORT_D1RGB18_AS_DSU_TRACED07       4
N
N#define PORT_D1RGB19_AS_GPIO               0
N#define PORT_D1RGB19_AS_D1RGB19            1
N#define PORT_D1RGB19_AS_EBIF_AD14          2
N#define PORT_D1RGB19_AS_NF_DATA13          3
N#define PORT_D1RGB19_AS_DSU_TRACED04       4
N
N#define PORT_D1RGB20_AS_GPIO               0
N#define PORT_D1RGB20_AS_D1RGB20            1
N#define PORT_D1RGB20_AS_EBIF_AD15          2
N#define PORT_D1RGB20_AS_NF_DATA14          3
N
N#define PORT_D1RGB21_AS_GPIO               0
N#define PORT_D1RGB21_AS_D1RGB21            1
N#define PORT_D1RGB21_AS_EBIF_AEX0          2
N#define PORT_D1RGB21_AS_NF_DATA15          3
N
N#define PORT_D1RGB22_AS_GPIO               0
N#define PORT_D1RGB22_AS_D1RGB22            1
N#define PORT_D1RGB22_AS_EBIF_AEX1          2
N#define PORT_D1RGB22_AS_NF_CSN2            3
N
N#define PORT_D1RGB23_AS_GPIO               0
N#define PORT_D1RGB23_AS_D1RGB23            1
N#define PORT_D1RGB23_AS_EBIF_AEX2          2
N
N#define PORT_CMCBCR0_AS_CMCBCR0            0
N#define PORT_CMCBCR0_AS_EBIF_AD08          1
N#define PORT_CMCBCR0_AS_PWMOUT01           2
N#define PORT_CMCBCR0_AS_GPIO               3
N
N#define PORT_CMCBCR1_AS_CMCBCR1            0
N#define PORT_CMCBCR1_AS_EBIF_AD09          1
N#define PORT_CMCBCR1_AS_NF_CSN2            2
N#define PORT_CMCBCR1_AS_PWMOUT02           3
N#define PORT_CMCBCR1_AS_GPIO               4
N
N#define PORT_CMCBCR2_AS_CMCBCR2            0
N#define PORT_CMCBCR2_AS_EBIF_AD10          1
N#define PORT_CMCBCR2_AS_NF_BUSYN           2
N#define PORT_CMCBCR2_AS_PWMOUT03           3
N#define PORT_CMCBCR2_AS_GPIO               4
N
N#define PORT_CMCBCR3_AS_CMCBCR3            0
N#define PORT_CMCBCR3_AS_EBIF_AD11          1
N#define PORT_CMCBCR3_AS_NF_CSN             2
N#define PORT_CMCBCR3_AS_PWMOUT04           3
N#define PORT_CMCBCR3_AS_GPIO               4
N
N#define PORT_CMCBCR4_AS_CMCBCR4            0
N#define PORT_CMCBCR4_AS_EBIF_AD12          1
N#define PORT_CMCBCR4_AS_NF_ALE             2
N#define PORT_CMCBCR4_AS_PWMOUT05           3
N#define PORT_CMCBCR4_AS_GPIO               4
N
N#define PORT_CMCBCR5_AS_CMCBR5             0
N#define PORT_CMCBCR5_AS_EBIF_AD13          1
N#define PORT_CMCBCR5_AS_NF_CLE             2
N#define PORT_CMCBCR5_AS_PWMOUT06           3
N#define PORT_CMCBCR5_AS_GPIO               4
N
N#define PORT_CMCBCR6_AS_CMCBCR6            0
N#define PORT_CMCBCR6_AS_EBIF_AD14          1
N#define PORT_CMCBCR6_AS_NF_WE              2
N#define PORT_CMCBCR6_AS_PWMOUT07           3
N#define PORT_CMCBCR6_AS_GPIO               4
N
N#define PORT_CMCBCR7_AS_CMCBCR7            0
N#define PORT_CMCBCR7_AS_EBIF_AD15          1
N#define PORT_CMCBCR7_AS_NF_RE              2
N#define PORT_CMCBCR7_AS_PWMOUT08           3
N#define PORT_CMCBCR7_AS_GPIO               4
N
N#define PORT_CMCLK_AS_CMCLK                0
N#define PORT_CMCLK_AS_EBIF_ALE             1
N#define PORT_CMCLK_AS_PWMOUT09             2
N#define PORT_CMCLK_AS_GPIO                 3
N
N#define PORT_CMFOOD_AS_CMFOOD              0
N#define PORT_CMFOOD_AS_EBIF_CS0            1
N#define PORT_CMFOOD_AS_PWMOUT10            2
N#define PORT_CMFOOD_AS_GPIO                3
N
N#define PORT_CMHDISP_AS_CMHDISP            0
N#define PORT_CMHDISP_AS_RESERVED           1
N#define PORT_CMHDISP_AS_PWMOUT11           2
N#define PORT_CMHDISP_AS_GPIO               3
N
N#define PORT_CMHSYNC_AS_CMHSYNC            0
N#define PORT_CMHSYNC_AS_EBIF_OE            1
N#define PORT_CMHSYNC_AS_PWMOUT12           2
N#define PORT_CMHSYNC_AS_GPIO               3
N
N#define PORT_CMVSYNC_AS_CMVSYNC            0
N#define PORT_CMVSYNC_AS_EBIF_WE            1
N#define PORT_CMVSYNC_AS_PWMOUT13           2
N#define PORT_CMVSYNC_AS_GPIO               3
N
N#define PORT_CMY0_AS_CMY0                  0
N#define PORT_CMY0_AS_EBIF_AEX0             1
N#define PORT_CMY0_AS_NF_DATA8              2
N#define PORT_CMY0_AS_PWMOUT14              3
N#define PORT_CMY0_AS_GPIO                  4
N
N#define PORT_CMY1_AS_CMY1                  0
N#define PORT_CMY1_AS_EBIF_AEX1             1
N#define PORT_CMY1_AS_NF_DATA9              2
N#define PORT_CMY1_AS_PWMOUT15              3
N#define PORT_CMY1_AS_GPIO                  4
N
N#define PORT_CMY2_AS_CMY2                  0
N#define PORT_CMY2_AS_EBIF_AEX2             1
N#define PORT_CMY2_AS_NF_DATA10             2
N#define PORT_CMY2_AS_PWMOUT16              3
N#define PORT_CMY2_AS_GPIO                  4
N
N#define PORT_CMY3_AS_CMY3                  0
N#define PORT_CMY3_AS_EBIF_AEX3             1
N#define PORT_CMY3_AS_NF_DATA11             2
N#define PORT_CMY3_AS_PWMOUT17              3
N#define PORT_CMY3_AS_GPIO                  4
N
N#define PORT_CMY4_AS_CMY4                  0
N#define PORT_CMY4_AS_EBIF_AEX4             1
N#define PORT_CMY4_AS_NF_DATA12             2
N#define PORT_CMY4_AS_PWMOUT18              3
N#define PORT_CMY4_AS_GPIO                  4
N
N#define PORT_CMY5_AS_CMY5                  0
N#define PORT_CMY5_AS_EBIF_AEX5             1
N#define PORT_CMY5_AS_NF_DATA13             2
N#define PORT_CMY5_AS_PWMOUT19              3
N#define PORT_CMY5_AS_GPIO                  4
N
N#define PORT_CMY6_AS_CMY6                  0
N#define PORT_CMY6_AS_EBIF_CS1              1
N#define PORT_CMY6_AS_NF_DATA14             2
N#define PORT_CMY6_AS_DMA_REQ               3
N#define PORT_CMY6_AS_PWMOUT20              4
N#define PORT_CMY6_AS_GPIO                  5
N
N#define PORT_CMY7_AS_CMY7                  0
N#define PORT_CMY7_AS_NF_DATA15             1
N#define PORT_CMY7_AS_DMA_ACK               2
N#define PORT_CMY7_AS_PWMOUT21              3
N#define PORT_CMY7_AS_GPIO                  4
N
N#define PORT_CMRGB0_AS_CMRGB0              0
N#define PORT_CMRGB0_AS_EBIF_AD00           1
N#define PORT_CMRGB0_AS_EBIF_AD00S          2
N#define PORT_CMRGB0_AS_NF_DATA0            3
N#define PORT_CMRGB0_AS_NF_DATA0S           4
N#define PORT_CMRGB0_AS_IRQ2                5
N#define PORT_CMRGB0_AS_ESEI1MISO           6
N#define PORT_CMRGB0_AS_GPIO                7
N
N#define PORT_CMRGB1_AS_CMRGB1              0
N#define PORT_CMRGB1_AS_EBIF_AD01           1
N#define PORT_CMRGB1_AS_EBIF_AD01S          2
N#define PORT_CMRGB1_AS_NF_DATA1            3
N#define PORT_CMRGB1_AS_NF_DATA1S           4
N#define PORT_CMRGB1_AS_IRQ3                5
N#define PORT_CMRGB1_AS_ESEI1MOSI           6
N#define PORT_CMRGB1_AS_GPIO                7
N
N#define PORT_CMRGB2_AS_CMRGB2              0
N#define PORT_CMRGB2_AS_EBIF_AD02           1
N#define PORT_CMRGB2_AS_EBIF_AD02S          2
N#define PORT_CMRGB2_AS_NF_DATA2            3
N#define PORT_CMRGB2_AS_NF_DATA2S           4
N#define PORT_CMRGB2_AS_IRQ4                5
N#define PORT_CMRGB2_AS_ESEI1SCLK           6
N#define PORT_CMRGB2_AS_GPIO                7
N
N#define PORT_CMRGB3_AS_CMRGB3              0
N#define PORT_CMRGB3_AS_EBIF_AD03           1
N#define PORT_CMRGB3_AS_EBIF_AD03S          2
N#define PORT_CMRGB3_AS_NF_DATA3            3
N#define PORT_CMRGB3_AS_NF_DATA3S           4
N#define PORT_CMRGB3_AS_IRQ5                5
N#define PORT_CMRGB3_AS_ESEI1SSOI           6
N#define PORT_CMRGB3_AS_GPIO                7
N
N#define PORT_CMRGB4_AS_CMRGB4              0
N#define PORT_CMRGB4_AS_EBIF_AD04           1
N#define PORT_CMRGB4_AS_EBIF_AD04S          2
N#define PORT_CMRGB4_AS_NF_DATA4            3
N#define PORT_CMRGB4_AS_NF_DATA4S           4
N#define PORT_CMRGB4_AS_IRQ0                5
N#define PORT_CMRGB4_AS_UART1RX             6
N#define PORT_CMRGB4_AS_GPIO                7
N
N#define PORT_CMRGB5_AS_CMRGB5              0
N#define PORT_CMRGB5_AS_EBIF_AD05           1
N#define PORT_CMRGB5_AS_EBIF_AD05S          2
N#define PORT_CMRGB5_AS_NF_DATA5            3
N#define PORT_CMRGB5_AS_NF_DATA5S           4
N#define PORT_CMRGB5_AS_IRQ1                5
N#define PORT_CMRGB5_AS_UART1TX             6
N#define PORT_CMRGB5_AS_GPIO                7
N
N#define PORT_CMRGB6_AS_CMRGB6              0
N#define PORT_CMRGB6_AS_EBIF_AD06           1
N#define PORT_CMRGB6_AS_EBIF_AD06S          2
N#define PORT_CMRGB6_AS_NF_DATA6            3
N#define PORT_CMRGB6_AS_NF_DATA6S           4
N#define PORT_CMRGB6_AS_CANRX2              5
N#define PORT_CMRGB6_AS_PWMOUT22            6
N#define PORT_CMRGB6_AS_GPIO                7
N
N#define PORT_CMRGB7_AS_CMRGB7              0
N#define PORT_CMRGB7_AS_EBIF_AD07           1
N#define PORT_CMRGB7_AS_EBIF_AD07S          2
N#define PORT_CMRGB7_AS_NF_DATA7            3
N#define PORT_CMRGB7_AS_NF_DATA7S           4
N#define PORT_CMRGB7_AS_CANTX2              5
N#define PORT_CMRGB7_AS_PWMOUT23            6
N#define PORT_CMRGB7_AS_GPIO                7
N
N#define PORT_I2CCLK_AS_GPIO                0
N#define PORT_I2CCLK_AS_DOTCLKIN            1
N#define PORT_I2CCLK_AS_UART1RX             2
N#define PORT_I2CCLK_AS_I2CCLK              3
N
N#define PORT_I2CDATA_AS_GPIO               0
N#define PORT_I2CDATA_AS_UART1TX            1
N#define PORT_I2CDATA_AS_I2CDATA            2
N
N#define PORT_CANRX0_AS_GPIO                0
N#define PORT_CANRX0_AS_DMA_REQ             1
N#define PORT_CANRX0_AS_CANRX0              2
N#define PORT_CANRX0_AS_HSPWM2              3
N
N#define PORT_CANTX0_AS_GPIO                0
N#define PORT_CANTX0_AS_DMA_ACK             1
N#define PORT_CANTX0_AS_CANTX0              2
N#define PORT_CANTX0_AS_HSPWM2N             3
N
N#define PORT_CANRX1_AS_GPIO                0
N#define PORT_CANRX1_AS_UART0RX             1
N#define PORT_CANRX1_AS_CANRX1              2
N#define PORT_CANRX1_AS_PWMOUT17            3
N
N#define PORT_CANTX1_AS_GPIO                0
N#define PORT_CANTX1_AS_UART0TX             1
N#define PORT_CANTX1_AS_CANTX1              2
N#define PORT_CANTX1_AS_PWMOUT18            3
N
N#define PORT_ESEI0MISO_AS_GPIO             0
N#define PORT_ESEI0MISO_AS_ESEI0MISO        1
N#define PORT_ESEI0MISO_AS_TBIO2            2
N
N#define PORT_ESEI0MOSI_AS_GPIO             0
N#define PORT_ESEI0MOSI_AS_ESEI0MOSI        1
N#define PORT_ESEI0MOSI_AS_TBIO3            2
N
N#define PORT_ESEI0SCLK_AS_GPIO             0
N#define PORT_ESEI0SCLK_AS_IRQ0             1
N#define PORT_ESEI0SCLK_AS_ESEI0CLK         2
N#define PORT_ESEI0SCLK_AS_TBIO8            3
N
N#define PORT_ESEI0SSOI_AS_GPIO             0
N#define PORT_ESEI0SSOI_AS_IRQ1             1
N#define PORT_ESEI0SSOI_AS_ESEI0SSOI        2
N#define PORT_ESEI0SSOI_AS_PWMOUT19         3
N#define PORT_ESEI0SSOI_AS_TBIO9            4
N
N#define PORT_I2S0CLK_AS_GPIO               0
N#define PORT_I2S0CLK_AS_IRQ2               1
N#define PORT_I2S0CLK_AS_I2S0CLK            2
N#define PORT_I2S0CLK_AS_ESEI1MISO          3
N#define PORT_I2S0CLK_AS_PWMOUT20           4
N#define PORT_I2S0CLK_AS_TBIO0              5
N
N#define PORT_I2S0WS_AS_GPIO                0
N#define PORT_I2S0WS_AS_IRQ3                1
N#define PORT_I2S0WS_AS_I2S0WS              2
N#define PORT_I2S0WS_AS_ESEI1MOSI           3
N#define PORT_I2S0WS_AS_PWMOUT21            4
N#define PORT_I2S0WS_AS_TBIO1               5
N
N#define PORT_I2S0SD_AS_GPIO                0
N#define PORT_I2S0SD_AS_IRQ4                1
N#define PORT_I2S0SD_AS_I2S0SD              2
N#define PORT_I2S0SD_AS_ESEI1SCLK           3
N#define PORT_I2S0SD_AS_PWMOUT22            4
N#define PORT_I2S0SD_AS_TBIO6               5
N
N#define PORT_I2SMCLK_AS_GPIO               0
N#define PORT_I2SMCLK_AS_I2SMCLK            1
N#define PORT_I2SMCLK_AS_ESEI1SSOI          2
N#define PORT_I2SMCLK_AS_PWMOUT23           3
N#define PORT_I2SMCLK_AS_TBIO7              4
N
N#define PORT_PWMOUT00_AS_GPIO              0
N#define PORT_PWMOUT00_AS_PWMOUT0           1
N
N#define PORT_HSPWM0_AS_GPIO                0
N#define PORT_HSPWM0_AS_GDC0PWM             1
N#define PORT_HSPWM0_AS_IRQ2                2
N#define PORT_HSPWM0_AS_PWMOUT01            3
N#define PORT_HSPWM0_AS_HSPWM0              4
N
N#define PORT_HSPWM0N_AS_GPIO               0
N#define PORT_HSPWM0N_AS_I2S1CLK            1
N#define PORT_HSPWM0N_AS_PWMOUT02           2
N#define PORT_HSPWM0N_AS_HSPWM0N            3
N
N#define PORT_HSPWM1_AS_GPIO                0
N#define PORT_HSPWM1_AS_GDC1PWM             1
N#define PORT_HSPWM1_AS_I2S1WS              2
N#define PORT_HSPWM1_AS_CANRX2              3
N#define PORT_HSPWM1_AS_PWMOUT03            4
N#define PORT_HSPWM1_AS_HSPWM1              5
N
N#define PORT_HSPWM1N_AS_GPIO               0
N#define PORT_HSPWM1N_AS_I2S1SD             1
N#define PORT_HSPWM1N_AS_CANTX2             2
N#define PORT_HSPWM1N_AS_PWMOUT04           3
N#define PORT_HSPWM1N_AS_HSPWM1N            4
N
N#define PORT_UART0RX_AS_GPIO               0
N#define PORT_UART0RX_AS_UART0RX            1
N#define PORT_UART0RX_AS_PWMOUT05           2
N
N#define PORT_UART0TX_AS_GPIO               0
N#define PORT_UART0TX_AS_UART0TX            1
N#define PORT_UART0TX_AS_PWMOUT06           2
N
N#define PORT_ADC_IN0_AS_ADC_IN0            0
N#define PORT_ADC_IN0_AS_IRQ1               1
N#define PORT_ADC_IN0_AS_GPIO               2
N
N#define PORT_ADC_IN1_AS_ADC_IN1            0
N#define PORT_ADC_IN1_AS_IRQ0               1
N#define PORT_ADC_IN1_AS_GPIO               2
N
N#define PORT_ADC_IN2_AS_ADC_IN2            0
N#define PORT_ADC_IN2_AS_IRQ5               1
N#define PORT_ADC_IN2_AS_GPIO               2
N
N#define PORT_ADC_IN3_AS_ADC_IN3            0
N#define PORT_ADC_IN3_AS_IRQ4               1
N#define PORT_ADC_IN3_AS_GPIO               2
N
N#define PORT_ADC_IN4_AS_ADC_IN4            0
N#define PORT_ADC_IN4_AS_IRQ3               1
N#define PORT_ADC_IN4_AS_GPIO               2
N
N#define PORT_ADC_IN5_AS_ADC_IN5            0
N#define PORT_ADC_IN5_AS_IRQ2               1
N#define PORT_ADC_IN5_AS_GPIO               2
N                                    
N#define PORT_ADC_IN6_AS_ADC_IN6            0
N#define PORT_ADC_IN6_AS_IRQ1               1
N#define PORT_ADC_IN6_AS_GPIO               2
N                                    
N#define PORT_ADC_IN7_AS_ADC_IN7            0
N#define PORT_ADC_IN7_AS_IRQ0               1
N#define PORT_ADC_IN7_AS_GPIO               2
N
N#define PORT_SC0_C0_LEFT_AS_SC0_C0_LEFT    0
N#define PORT_SC0_C0_LEFT_AS_PWMOUT11       1
N#define PORT_SC0_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC0_C0_RIGHT_AS_SC0_C0_RIGHT  0
N#define PORT_SC0_C0_RIGHT_AS_PWMOUT10      1
N#define PORT_SC0_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC0_C1_LEFT_AS_SC0_C1_LEFT    0
N#define PORT_SC0_C1_LEFT_AS_PWMOUT09       1
N#define PORT_SC0_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC0_C1_RIGHT_AS_SC0_C1_RIGHT  0
N#define PORT_SC0_C1_RIGHT_AS_PWMOUT08      1
N#define PORT_SC0_C1_RIGHT_AS_GPIO          2
N
N#define PORT_SC1_C0_LEFT_AS_SC1_C0_LEFT    0
N#define PORT_SC1_C0_LEFT_AS_PWMOUT07       1
N#define PORT_SC1_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC1_C0_RIGHT_AS_SC1_C0_RIGHT  0
N#define PORT_SC1_C0_RIGHT_AS_PWMOUT06      1
N#define PORT_SC1_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC1_C1_LEFT_AS_SC1_C1_LEFT    0
N#define PORT_SC1_C1_LEFT_AS_PWMOUT05       1
N#define PORT_SC1_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC1_C1_RIGHT_AS_SC1_C1_RIGHT  0
N#define PORT_SC1_C1_RIGHT_AS_PWMOUT04      1
N#define PORT_SC1_C1_RIGHT_AS_GPIO          2
N
N#define PORT_SC2_C0_LEFT_AS_SC2_C0_LEFT    0
N#define PORT_SC2_C0_LEFT_AS_PWMOUT03       1
N#define PORT_SC2_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC2_C0_RIGHT_AS_SC2_C0_RIGHT  0
N#define PORT_SC2_C0_RIGHT_AS_PWMOUT02      1
N#define PORT_SC2_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC2_C1_LEFT_AS_SC2_C1_LEFT    0
N#define PORT_SC2_C1_LEFT_AS_IRQ5           1
N#define PORT_SC2_C1_LEFT_AS_PWMOUT01       2
N#define PORT_SC2_C1_LEFT_AS_GPIO           3
N
N#define PORT_SC2_C1_RIGHT_AS_SC2_C1_RIGHT  0
N#define PORT_SC2_C1_RIGHT_AS_IRQ4          1
N#define PORT_SC2_C1_RIGHT_AS_PWMOUT00      2
N#define PORT_SC2_C1_RIGHT_AS_GPIO          3
N
N#define PORT_SC3_C0_LEFT_AS_SC3_C0_LEFT    0
N#define PORT_SC3_C0_LEFT_AS_IRQ3           1
N#define PORT_SC3_C0_LEFT_AS_PWMOUT23       2
N#define PORT_SC3_C0_LEFT_AS_TBIO2          3
N#define PORT_SC3_C0_LEFT_AS_GPIO           4
N
N#define PORT_SC3_C0_RIGHT_AS_SC3_C0_RIGHT  0
N#define PORT_SC3_C0_RIGHT_AS_IRQ2          1
N#define PORT_SC3_C0_RIGHT_AS_PWMOUT22      2
N#define PORT_SC3_C0_RIGHT_AS_TBIO3         3
N#define PORT_SC3_C0_RIGHT_AS_GPIO          4
N
N#define PORT_SC3_C1_LEFT_AS_SC3_C1_LEFT    0
N#define PORT_SC3_C1_LEFT_AS_IRQ1           1
N#define PORT_SC3_C1_LEFT_AS_PWMOUT21       2
N#define PORT_SC3_C1_LEFT_AS_TBIO8          3
N#define PORT_SC3_C1_LEFT_AS_GPIO           4
N
N#define PORT_SC3_C1_RIGHT_AS_SC3_C1_RIGHT  0
N#define PORT_SC3_C1_RIGHT_AS_IRQ0          1
N#define PORT_SC3_C1_RIGHT_AS_PWMOUT20      2
N#define PORT_SC3_C1_RIGHT_AS_TBIO9         3
N#define PORT_SC3_C1_RIGHT_AS_GPIO          4
N
N#define PORT_SC4_C0_LEFT_AS_SC4_C0_LEFT    0
N#define PORT_SC4_C0_LEFT_AS_PWMOUT19       1
N#define PORT_SC4_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC4_C0_RIGHT_AS_SC4_C0_RIGHT  0
N#define PORT_SC4_C0_RIGHT_AS_PWMOUT18      1
N#define PORT_SC4_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC4_C1_LEFT_AS_SC4_C1_LEFT    0
N#define PORT_SC4_C1_LEFT_AS_PWMOUT17       1
N#define PORT_SC4_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC4_C1_RIGHT_AS_SC4_C1_RIGHT  0
N#define PORT_SC4_C1_RIGHT_AS_PWMOUT16      1
N#define PORT_SC4_C1_RIGHT_AS_GPIO          2
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/* List of all pins */
Ntypedef enum tag_portpin_e
N{
N    PORT_DDR_DQ0 = 0,
N    PORT_DDR_DQ1,
N    PORT_DDR_DQ2,
N    PORT_DDR_DQ3,
N    PORT_DDR_DQ4,
N    PORT_DDR_DQ5,
N    PORT_DDR_DQ6,
N    PORT_DDR_DQ7,
N    PORT_DDR_DQ8,
N    PORT_DDR_DQ9,
N    PORT_DDR_DQ10,
N    PORT_DDR_DQ11,
N    PORT_DDR_DQ12,
N    PORT_DDR_DQ13,
N    PORT_DDR_DQ14,
N    PORT_DDR_DQ15,
N    PORT_DDR_DM0,
N    PORT_DDR_DM1,
N    PORT_DDR_WE,
N    PORT_DDR_RAS,
N    PORT_DDR_CAS,
N    PORT_DDR_CS,
N    PORT_DDR_CKE,
N    PORT_DDR_CK,
N    PORT_DDR_CKN,
N    PORT_DDR_BA0,
N    PORT_DDR_BA1,
N    PORT_DDR_A0,
N    PORT_DDR_A1,
N    PORT_DDR_A2,
N    PORT_DDR_A3,
N    PORT_DDR_A4,
N    PORT_DDR_A5,
N    PORT_DDR_A6,
N    PORT_DDR_A7,
N    PORT_DDR_A8,
N    PORT_DDR_A9,
N    PORT_DDR_A10,
N    PORT_DDR_A11,
N    PORT_DDR_A12,
N    PORT_DDR_A13,
N    PORT_DDR_DQS0,
N    PORT_DDR_DQS1,
N    PORT_DUMMY_0,
N    PORT_DUMMY_1,
N    PORT_DUMMY_2,
N    PORT_DUMMY_3,
N    PORT_DUMMY_4,
N    PORT_DDR_DQS2,
N    PORT_DDR_DQS3,
N    PORT_DDR_DM2,
N    PORT_DDR_DM3,
N    PORT_DDR_DQ16,
N    PORT_DDR_DQ17,
N    PORT_DDR_DQ18,
N    PORT_DDR_DQ19,
N    PORT_DDR_DQ20,
N    PORT_DDR_DQ21,
N    PORT_DDR_DQ22,
N    PORT_DDR_DQ23,
N    PORT_DDR_DQ24,
N    PORT_DDR_DQ25,
N    PORT_DDR_DQ26,
N    PORT_DDR_DQ27,
N    PORT_DDR_DQ28,
N    PORT_DDR_DQ29,
N    PORT_DDR_DQ30,
N    PORT_DDR_DQ31,
N    PORT_DUMMY_5,
N    PORT_DUMMY_6,
N    PORT_DUMMY_7,
N    PORT_DUMMY_8,
N    PORT_DUMMY_9,
N    PORT_DUMMY_10,
N    PORT_DUMMY_11,
N    PORT_DUMMY_12,
N    PORT_DUMMY_13,
N    PORT_DUMMY_14,
N    PORT_DUMMY_15,
N    PORT_DUMMY_16,
N    PORT_QSPI0_SIO0,
N    PORT_QSPI0_SIO1,
N    PORT_QSPI0_SIO2,
N    PORT_QSPI0_SIO3,
N    PORT_QSPI0_CS0,
N    PORT_QSPI0_SCLK,
N    PORT_DUMMY_17,
N    PORT_DUMMY_18,
N    PORT_DUMMY_19,
N    PORT_DUMMY_20,
N    PORT_DUMMY_21,
N    PORT_DUMMY_22,
N    PORT_DUMMY_23,
N    PORT_DUMMY_24,
N    PORT_DUMMY_25,
N    PORT_DUMMY_26,
N    PORT_D0HDISP,
N    PORT_D0HSYNC,
N    PORT_D0VSYNC,
N    PORT_D0DOTCLK,
N    PORT_D0RGB0,
N    PORT_D0RGB1,
N    PORT_D0RGB2,
N    PORT_D0RGB3,
N    PORT_D0RGB4,
N    PORT_D0RGB5,
N    PORT_D0RGB6,
N    PORT_D0RGB7,
N    PORT_D0RGB8,
N    PORT_D0RGB9,
N    PORT_D0RGB10,
N    PORT_D0RGB11,
N    PORT_D0RGB12,
N    PORT_D0RGB13,
N    PORT_D0RGB14,
N    PORT_D0RGB15,
N    PORT_D0RGB16,
N    PORT_D0RGB17,
N    PORT_D0RGB18,
N    PORT_D0RGB19,
N    PORT_D0RGB20,
N    PORT_D0RGB21,
N    PORT_D0RGB22,
N    PORT_D0RGB23,
N    PORT_DUMMY_27,
N    PORT_DUMMY_28,
N    PORT_DUMMY_29,
N    PORT_DUMMY_30,
N    PORT_DUMMY_31,
N    PORT_DUMMY_32,
N    PORT_DUMMY_33,
N    PORT_DUMMY_34,
N    PORT_DUMMY_35,
N    PORT_DUMMY_36,
N    PORT_DUMMY_37,
N    PORT_DUMMY_38,
N    PORT_DOTCLKIN,
N    PORT_DUMMY_39,
N    PORT_PNLGPP0,
N    PORT_PNLGPP1,
N    PORT_PNLGPP2,
N    PORT_PNLGPP3,
N    PORT_PNLGPP4,
N    PORT_PNLGPP5,
N    PORT_PNLGPP6,
N    PORT_PNLGPP7,
N    PORT_DUMMY_40,
N    PORT_DUMMY_41,
N    PORT_DUMMY_42,
N    PORT_DUMMY_43,
N    PORT_DUMMY_44,
N    PORT_DUMMY_45,
N    PORT_D1HDISP,
N    PORT_D1HSYNC,
N    PORT_D1VSYNC,
N    PORT_D1DOTCLK,
N    PORT_D1RGB0,
N    PORT_D1RGB1,
N    PORT_D1RGB2,
N    PORT_D1RGB3,
N    PORT_D1RGB4,
N    PORT_D1RGB5,
N    PORT_D1RGB6,
N    PORT_D1RGB7,
N    PORT_D1RGB8,
N    PORT_D1RGB9,
N    PORT_D1RGB10,
N    PORT_D1RGB11,
N    PORT_D1RGB12,
N    PORT_D1RGB13,
N    PORT_D1RGB14,
N    PORT_D1RGB15,
N    PORT_D1RGB16,
N    PORT_D1RGB17,
N    PORT_D1RGB18,
N    PORT_D1RGB19,
N    PORT_D1RGB20,
N    PORT_D1RGB21,
N    PORT_D1RGB22,
N    PORT_D1RGB23,
N    PORT_DUMMY_46,
N    PORT_DUMMY_47,
N    PORT_DUMMY_48,
N    PORT_DUMMY_49,
N    PORT_DUMMY_50,
N    PORT_DUMMY_51,
N    PORT_DUMMY_52,
N    PORT_DUMMY_53,
N    PORT_DUMMY_54,
N    PORT_DUMMY_55,
N    PORT_DUMMY_56,
N    PORT_DUMMY_57,
N    PORT_CMCBCR0,
N    PORT_CMCBCR1,
N    PORT_CMCBCR2,
N    PORT_CMCBCR3,
N    PORT_CMCBCR4,
N    PORT_CMCBCR5,
N    PORT_CMCBCR6,
N    PORT_CMCBCR7,
N    PORT_CMCLK,
N    PORT_DUMMY_58,
N    PORT_CMFOOD,
N    PORT_CMHDISP,
N    PORT_CMHSYNC,
N    PORT_CMVSYNC,
N    PORT_CMY0,        
N    PORT_CMY1,        
N    PORT_CMY2,        
N    PORT_CMY3,        
N    PORT_CMY4,        
N    PORT_CMY5,        
N    PORT_CMY6,        
N    PORT_CMY7,        
N    PORT_CMRGB0,        
N    PORT_CMRGB1,        
N    PORT_CMRGB2,        
N    PORT_CMRGB3,        
N    PORT_CMRGB4,        
N    PORT_CMRGB5,        
N    PORT_CMRGB6,        
N    PORT_CMRGB7,        
N    PORT_DUMMY_59,
N    PORT_DUMMY_60,
N    PORT_DUMMY_61,
N    PORT_DUMMY_62,
N    PORT_DUMMY_63,
N    PORT_DUMMY_64,
N    PORT_DUMMY_65,
N    PORT_DUMMY_66,
N    PORT_DUMMY_67,
N    PORT_DUMMY_68,
N    PORT_DUMMY_69,
N    PORT_DUMMY_70,
N    PORT_DUMMY_71,
N    PORT_DUMMY_72,
N    PORT_DUMMY_73,
N    PORT_DUMMY_74,
N    PORT_DUMMY_75,
N    PORT_DUMMY_76,
N    PORT_I2CCLK,
N    PORT_I2CDATA,
N    PORT_CANRX0,
N    PORT_CANTX0,
N    PORT_CANRX1,
N    PORT_CANTX1,
N    PORT_MLBDAT_IO,
N    PORT_MLBSIG_IO,
N    PORT_MLBCLK,
N    PORT_DUMMY_77,
N    PORT_ESEI0MISO,
N    PORT_ESEI0MOSI,
N    PORT_ESEI0SCLK,
N    PORT_ESEI0SSOI,
N    PORT_I2S0CLK,
N    PORT_I2S0WS,
N    PORT_I2S0SD,
N    PORT_I2SMCLK,
N    PORT_PWMOUT00,
N    PORT_DUMMY_78,
N    PORT_HSPWM0,
N    PORT_HSPWM0N,
N    PORT_HSPWM1,
N    PORT_HSPWM1N,
N    PORT_UART0RX,
N    PORT_UART0TX,
N    PORT_DUMMY_79,
N    PORT_DUMMY_80,
N    PORT_DUMMY_81,
N    PORT_DUMMY_82,
N    PORT_DUMMY_83,
N    PORT_DUMMY_84,
N    PORT_SIP_QSPI_SIO0,
N    PORT_SIP_QSPI_SIO1,
N    PORT_SIP_QSPI_SIO2,
N    PORT_SIP_QSPI_SIO3,
N    PORT_SIP_QSPI_CS,
N    PORT_SIP_QSPI_SCLK,
N    PORT_DUMMY_85,
N    PORT_DUMMY_86,
N    PORT_NMI,
N    PORT_RESETN,
N    PORT_DSU_JTAG_SEL,
N    PORT_DSU_GTCK,
N    PORT_DSU_GTDI,
N    PORT_DSU_GTMS,
N    PORT_DSU_GTRST,
N    PORT_DSU_TPC0_GTDO,
N    PORT_DUMMY_87,
N    PORT_DUMMY_88,
N    PORT_DUMMY_89,
N    PORT_DUMMY_90,
N    PORT_DUMMY_91,
N    PORT_DUMMY_92,
N    PORT_DUMMY_93,
N    PORT_DUMMY_94,
N    PORT_ADC_IN0,
N    PORT_ADC_IN1,
N    PORT_ADC_IN2,
N    PORT_ADC_IN3,
N    PORT_ADC_IN4,
N    PORT_ADC_IN5,
N    PORT_ADC_IN6,
N    PORT_ADC_IN7,
N    PORT_ADC_IN8,
N    PORT_ADC_IN9,
N    PORT_ADC_IN10,
N    PORT_ADC_IN11,
N    PORT_ADC_IN12,
N    PORT_ADC_IN13,
N    PORT_DUMMY_95,
N    PORT_DUMMY_96,
N    PORT_DUMMY_97,
N    PORT_DUMMY_98,
N    PORT_DUMMY_99,
N    PORT_DUMMY_100,
N    PORT_DUMMY_101,
N    PORT_DUMMY_102,
N    PORT_DUMMY_103,
N    PORT_DUMMY_104,
N    PORT_SC0_C0_LEFT,
N    PORT_SC0_C0_RIGHT,
N    PORT_SC0_C1_LEFT,
N    PORT_SC0_C1_RIGHT,
N    PORT_SC1_C0_LEFT,
N    PORT_SC1_C0_RIGHT,
N    PORT_SC1_C1_LEFT,
N    PORT_SC1_C1_RIGHT,
N    PORT_SC2_C0_LEFT,
N    PORT_SC2_C0_RIGHT,
N    PORT_SC2_C1_LEFT,
N    PORT_SC2_C1_RIGHT,
N    PORT_SC3_C0_LEFT,
N    PORT_SC3_C0_RIGHT,
N    PORT_SC3_C1_LEFT,
N    PORT_SC3_C1_RIGHT,
N    PORT_SC4_C0_LEFT,
N    PORT_SC4_C0_RIGHT,
N    PORT_SC4_C1_LEFT,
N    PORT_SC4_C1_RIGHT
N} gpio_portpin_e;
N
N/* Enable/disable */
Ntypedef enum tag_gpio_en_e
N{
N    GPIO_DISABLE = 0x0,                       /* Disable */
N    GPIO_ENABLE  = 0x1                        /* Enable */
N} gpio_en_e;
N
N/* Output resistance */
Ntypedef enum tag_gpio_output_resistance_e
N{
N    GPIO_OUTPUT_RESISTANCE_25  = 0x0,         /* Output_resistance 25 Ohm */
N    GPIO_OUTPUT_RESISTANCE_50  = 0x1,         /* Output_resistance 50 Ohm */
N    GPIO_OUTPUT_RESISTANCE_75  = 0x2,         /* Output_resistance 75 Ohm */
N    GPIO_OUTPUT_RESISTANCE_150 = 0x3          /* Output_resistance 150 Ohm */
N} gpio_output_resistance_e;
N
N/* SMC macro */
Ntypedef enum tag_gpio_smcmacro_e
N{
N    GPIO_SMC_MACRO_0 = 0x0,                   /* SMC macro 0 */
N    GPIO_SMC_MACRO_1 = 0x1,                   /* SMC macro 1 */
N    GPIO_SMC_MACRO_2 = 0x2,                   /* SMC macro 2 */
N    GPIO_SMC_MACRO_3 = 0x3,                   /* SMC macro 3 */
N    GPIO_SMC_MACRO_4 = 0x4                    /* SMC macro 4 */
N} gpio_smcmacro_e;
N
N/* Memory configuration */
Ntypedef enum tag_gpio_mem_config_e
N{
N    GPIO_MEM_CONFIG_NO_SDRAM = 0x0,           /* no SDRAM -> GPIO functionality */
N    GPIO_MEM_CONFIG_LPDDR_32 = 0x1,           /* LPDDR 32 bit */
N    GPIO_MEM_CONFIG_SDRAM_32 = 0x2,           /* SDRAM 32 bit */
N    GPIO_MEM_CONFIG_LPDDR_16 = 0x3            /* LPDDR 16 bit */
N} gpio_mem_config_e;
N
N/* Direction */
Ntypedef enum tag_gpio_direction_e
N{
N    GPIO_OUTPUT = 0x0,                        /* Output */
N    GPIO_INPUT  = 0x1                         /* Input */
N} gpio_direction_e;
N
N/* GPIO state */
Ntypedef enum tag_gpio_state_e
N{
N    GPIO_LOW  = 0x0,                          /* Low */
N    GPIO_HIGH = 0x1                           /* High */
N} gpio_state_e;
N
N/****************************************************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vGPIO_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGPIO_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                      uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                      uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnablePullUp
N *
N * Purpose:       Enable/disable pull-up
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnablePullUp(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnablePullDown
N *
N * Purpose:       Enable/disable pull-down
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnablePullDown(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableSchmittTrigger
N *
N * Purpose:       Enable/disable schmitt trigger
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableSchmittTrigger(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetOutputResistance
N *
N * Purpose:       Set output resistance
N *
N * Inputs:        ePin                  Pin type
N *                eOutputResistance     Output resistance
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetOutputResistance(gpio_portpin_e ePin, gpio_output_resistance_e eOutputResistance);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableLatchFunction
N *
N * Purpose:       Enable/disable latch function
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableLatchFunction(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableSMCMacro
N *
N * Purpose:       Enable/disable SMC macro
N *
N * Inputs:        eSMCMacro    SMC macro
N *                eEn          Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableSMCMacro(gpio_smcmacro_e eSMCMacro, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinFunction
N *
N * Purpose:       Set pin function
N *
N * Inputs:        ePin             Pin type
N *                u8PinFunction    Pin function
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinFunction(gpio_portpin_e ePin, uint8_t u8PinFunction);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinDirection
N *
N * Purpose:       Set pin direction
N *
N * Inputs:        ePin             port pin no.
N *                ePinDirection    pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinDirection(gpio_portpin_e ePin, gpio_direction_e ePinDirection);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinState
N *
N * Purpose:       Set pin state
N *
N * Inputs:        ePin         port pin no.
N *                ePinState    pin state
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinState(gpio_portpin_e ePin, gpio_state_e ePinState);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_GetPinState
N *
N * Purpose:       Set pin state
N *
N * Inputs:        ePin         port pin no.
N *
N * Outputs:       ePinState    pin state
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_GetPinState(gpio_portpin_e ePin, gpio_state_e * ePinState);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SelectMemoryInterfaceConfiguration
N *
N * Purpose:       Set memory interface configuration
N *
N * Inputs:        eMemConfig    Memory interface configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SelectMemoryInterfaceConfiguration(gpio_mem_config_e eMemConfig);
N
N/****************************************************************************/
N
N
N#endif /* GPIO_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\usecases\src\buttons.c" 2
N#include "ccr.h"
N#include "intc.h"
L 1 "..\..\..\..\lldd\inc\intc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Reference Interrupt Controller (INTC) Low Level Device Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Interrupt Controller (INTC)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.12 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef INTC_H
N#define INTC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/*********************************************
N*        Disable Misra Warnings/Rules        *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S/* disable warnings for nonstandard type for a bit field */
S#pragma ghs nowarning 230
S#pragma ghs nowarning 79
S/* disable MISRA 2004 Rule 10.5 because for satisfaction this rule violation of rule 10.3 is required */
S#pragma ghs nowarning 1849
N#endif
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_INTC_H_REVISION     "$Revision: 1.12 $"
N#define LLDD_INTC_H_TAG          "$Name: LLDD_1_6 $"
N
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/* Number of possible external interrupt source */
N#define NUM_EXTERNAL_INT_SOURCES     9U
N/* Number of possible internal interrupt source */
N#define NUM_INTERNAL_INT_SOURCES     126U
N/* Number of reserved interrupt source slots */
N#define NUM_RESERVED_INT_SOURCES     57U
N
N/* Total number of interrupt sources */
N#define NUM_INT_SOURCES              (NUM_EXTERNAL_INT_SOURCES + NUM_INTERNAL_INT_SOURCES)
N
N/* Maximum number of interrupt sources */
N#define NUM_INT_SLOTS                (NUM_INT_SOURCES + NUM_RESERVED_INT_SOURCES)
N
N/* Masks for compacting interrupt source information */
N#define INT_VECTOR_MASK              0x000003FFU
N#define IR_OFFSET_MASK               0x000000FFU
N#define REC_MODE_MASK                0x0000000F
N#define LAST_SRC_INDEX               178U
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/* Extract register offset */
N#define INTC_GET_ROFST(val)       (  ((uint32_t)(val)) &  ((uint32_t) IR_OFFSET_MASK ))
N/* Compact register offset */
N#define INTC_SET_ROFST(val)       ( ((uint32_t)(val)) & ((uint32_t) IR_OFFSET_MASK) )
N
N/* Extract vector offset */
N#define INTC_GET_VOFST(val)       ( ( ((uint32_t) (val) ) >> 8 ) & ( (uint32_t) INT_VECTOR_MASK ) )
N/* Compact vector offset */
N#define INTC_SET_VOFST(val)       ( ( ( (uint32_t) (val) ) & ( (uint32_t) INT_VECTOR_MASK )) << 8)
N
N/* Extract recognition mode */
N#define INTC_GET_MODE(val)        (  ( ((uint32_t) (val) ) >> 24 ) & ((uint32_t) REC_MODE_MASK) )
N/* Compact recognition mode */
N#define INTC_SET_MODE(val)        ( ((uint32_t) (val) ) << 24)
N
N/*
N *  Pack register offset, vector offset
N *  and recognition mode in a single word
N */
N#define INTC_CON(roffst, voffst, moffst)    ( INTC_SET_ROFST(roffst) | INTC_SET_VOFST(voffst) | INTC_SET_MODE(moffst) )
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
Ntypedef enum tag_intc_enable_e
N{
N    INTC_DISABLE = 0,                       /* INTC disable */
N    INTC_ENABLE  = 1                        /* INTC enable */
N} intc_enable_e;
N
N/*
N *  IR[00-47] parameter values
N */
N
N/* IR[xx].EIM - Interrupt recognition mode */
Ntypedef enum tag_intc_eim_e
N{
N    INTC_LEVEL_LO   = 0,                    /* Low-level active */
N    INTC_LEVEL_HI   = 1,                    /* High-level active */
N    INTC_EDGE_FALL  = 2,                    /* Falling-edge */
N    INTC_EDGE_RISE  = 3,                    /* Rising-edge */
N    INTC_RM_CONFIG  = 4,                    /* configurable recognition mode */
N    INTC_RM_DEFAULT = 5,                    /* default recognition mode */
N    INTC_NA         = 6                     /* NA for check */
N} intc_eim_e;
N
N/* IR[xx].DRS - Interrupt redirect selection */
Ntypedef enum tag_intc_drs_e
N{
N    INTC_TO_CPU = 0,                        /* IRQ will be carried to the CPU */
N    INTC_TO_DMA = 1                         /* IRQ used as request for DMA */
N} intc_drs_e;
N
N/* IR[xx].ACLR - Interrupt auto clearing */
Ntypedef enum tag_intc_aclr_e
N{
N    INTC_AUTO_CLEAR_DISABLE = 0,            /* IRQ will be carried to the CPU */
N    INTC_AUTO_CLEAR_ENABLE  = 1             /* IRQ used as request for DMA */
N} intc_aclr_e;
N
N/* IR[xx].EXT - Priority of the interrupt source (DRS == 0) / DMA channel (DRS == 1) */
Ntypedef enum tag_intc_ext_e
N{
N    INTC_LEVEL_0 = 0,                       /* Priority level 0 [disabled] / DMA Channel 0 */
N    INTC_LEVEL_1 = 1,                       /* Priority level 1 [lowest]   / DMA Channel 1 */
N    INTC_LEVEL_2 = 2,                       /* Priority level 2            / DMA Channel 2 */
N    INTC_LEVEL_3 = 3,                       /* Priority level 3            / DMA Channel 3 */
N    INTC_LEVEL_4 = 4,                       /* Priority level 4            / DMA Channel 4 */
N    INTC_LEVEL_5 = 5,                       /* Priority level 5            / DMA Channel 5 */
N    INTC_LEVEL_6 = 6,                       /* Priority level 6            / DMA Channel 6 */
N    INTC_LEVEL_7 = 7                        /* Priority level 7 [highest]  / DMA Channel 7 */
N} intc_ext_e;
N
N/* *** */
N
N/*
N *  Word compacting:
N *      - interrupt register number (not offset)
N *      - interrupt vector offset
N *      - default recognition mode
N */
Ntypedef enum tag_intc_src_e
N{
N    INTC_DUMMY_0       = INTC_CON(  0, 0x000, INTC_NA),
X    INTC_DUMMY_0       = ( ( ((uint32_t)(0)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x000) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N
N    INTC_EXTINT0       = INTC_CON(  1, 0x004, INTC_RM_CONFIG),
X    INTC_EXTINT0       = ( ( ((uint32_t)(1)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x004) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_EXTINT1       = INTC_CON(  2, 0x008, INTC_RM_CONFIG),
X    INTC_EXTINT1       = ( ( ((uint32_t)(2)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x008) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_EXTINT2       = INTC_CON(  3, 0x00C, INTC_RM_CONFIG),
X    INTC_EXTINT2       = ( ( ((uint32_t)(3)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x00C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_EXTINT3       = INTC_CON(  4, 0x010, INTC_RM_CONFIG),
X    INTC_EXTINT3       = ( ( ((uint32_t)(4)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x010) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_EXTINT4       = INTC_CON(  5, 0x014, INTC_RM_CONFIG),
X    INTC_EXTINT4       = ( ( ((uint32_t)(5)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x014) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_EXTINT5       = INTC_CON(  6, 0x018, INTC_RM_CONFIG),
X    INTC_EXTINT5       = ( ( ((uint32_t)(6)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x018) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N
N    INTC_DUMMY_1       = INTC_CON(  7, 0x01C, INTC_NA),
X    INTC_DUMMY_1       = ( ( ((uint32_t)(7)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x01C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_2       = INTC_CON(  8, 0x020, INTC_NA),
X    INTC_DUMMY_2       = ( ( ((uint32_t)(8)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x020) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_3       = INTC_CON(  9, 0x024, INTC_NA),
X    INTC_DUMMY_3       = ( ( ((uint32_t)(9)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x024) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_4       = INTC_CON( 10, 0x028, INTC_NA),
X    INTC_DUMMY_4       = ( ( ((uint32_t)(10)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x028) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_5       = INTC_CON( 11, 0x02C, INTC_NA),
X    INTC_DUMMY_5       = ( ( ((uint32_t)(11)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x02C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_6       = INTC_CON( 12, 0x030, INTC_NA),
X    INTC_DUMMY_6       = ( ( ((uint32_t)(12)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x030) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_7       = INTC_CON( 13, 0x034, INTC_NA),
X    INTC_DUMMY_7       = ( ( ((uint32_t)(13)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x034) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_8       = INTC_CON( 14, 0x038, INTC_NA),
X    INTC_DUMMY_8       = ( ( ((uint32_t)(14)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x038) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N
N    INTC_WDT           = INTC_CON( 15, 0x03C, INTC_EDGE_RISE),
X    INTC_WDT           = ( ( ((uint32_t)(15)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x03C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_DUMMY_9       = INTC_CON( 16, 0x040, INTC_NA),
X    INTC_DUMMY_9       = ( ( ((uint32_t)(16)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x040) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N
N    INTC_ECCSRAM       = INTC_CON( 17, 0x044, INTC_LEVEL_HI),
X    INTC_ECCSRAM       = ( ( ((uint32_t)(17)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x044) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_DUMMY_10      = INTC_CON( 18, 0x048, INTC_NA),
X    INTC_DUMMY_10      = ( ( ((uint32_t)(18)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x048) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_ECCBAKRAM     = INTC_CON( 19, 0x04C, INTC_LEVEL_HI),
X    INTC_ECCBAKRAM     = ( ( ((uint32_t)(19)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x04C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_GAMPI         = INTC_CON( 20, 0x050, INTC_LEVEL_HI),
X    INTC_GAMPI         = ( ( ((uint32_t)(20)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x050) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_PINMUX        = INTC_CON( 21, 0x054, INTC_EDGE_RISE),
X    INTC_PINMUX        = ( ( ((uint32_t)(21)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x054) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_IRC           = INTC_CON( 22, 0x058, INTC_LEVEL_HI),
X    INTC_IRC           = ( ( ((uint32_t)(22)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x058) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_TSMRXFIFO     = INTC_CON( 23, 0x05C, INTC_EDGE_RISE),
X    INTC_TSMRXFIFO     = ( ( ((uint32_t)(23)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x05C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_TSMTXFIFO     = INTC_CON( 24, 0x060, INTC_EDGE_RISE),
X    INTC_TSMTXFIFO     = ( ( ((uint32_t)(24)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x060) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_TSMAPERC      = INTC_CON( 25, 0x064, INTC_LEVEL_HI),
X    INTC_TSMAPERC      = ( ( ((uint32_t)(25)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x064) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TSMERCBUSY    = INTC_CON( 26, 0x068, INTC_EDGE_RISE),
X    INTC_TSMERCBUSY    = ( ( ((uint32_t)(26)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x068) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_TSMFW         = INTC_CON( 27, 0x06C, INTC_EDGE_RISE),
X    INTC_TSMFW         = ( ( ((uint32_t)(27)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x06C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_SYSC          = INTC_CON( 28, 0x070, INTC_LEVEL_HI),
X    INTC_SYSC          = ( ( ((uint32_t)(28)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x070) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_RTC           = INTC_CON( 29, 0x074, INTC_EDGE_RISE),
X    INTC_RTC           = ( ( ((uint32_t)(29)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x074) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_APC0          = INTC_CON( 30, 0x078, INTC_LEVEL_HI),
X    INTC_APC0          = ( ( ((uint32_t)(30)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x078) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_APC1          = INTC_CON( 31, 0x07C, INTC_LEVEL_HI),
X    INTC_APC1          = ( ( ((uint32_t)(31)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x07C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_QSPI0         = INTC_CON( 32, 0x080, INTC_LEVEL_HI),
X    INTC_QSPI0         = ( ( ((uint32_t)(32)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x080) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_QSPI1         = INTC_CON( 33, 0x084, INTC_LEVEL_HI),
X    INTC_QSPI1         = ( ( ((uint32_t)(33)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x084) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_QSPI2         = INTC_CON( 34, 0x088, INTC_LEVEL_HI),
X    INTC_QSPI2         = ( ( ((uint32_t)(34)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x088) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_PARFLINT      = INTC_CON( 35, 0x08C, INTC_LEVEL_HI),
X    INTC_PARFLINT      = ( ( ((uint32_t)(35)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x08C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_PARFLINT0     = INTC_CON( 36, 0x090, INTC_LEVEL_HI),
X    INTC_PARFLINT0     = ( ( ((uint32_t)(36)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x090) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_PARFLINT1     = INTC_CON( 37, 0x094, INTC_LEVEL_HI),
X    INTC_PARFLINT1     = ( ( ((uint32_t)(37)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x094) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_PARFLECCINT   = INTC_CON( 38, 0x098, INTC_LEVEL_HI),
X    INTC_PARFLECCINT   = ( ( ((uint32_t)(38)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x098) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_DUMMY_11      = INTC_CON( 39, 0x09C, INTC_NA),
X    INTC_DUMMY_11      = ( ( ((uint32_t)(39)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x09C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_12      = INTC_CON( 40, 0x0A0, INTC_NA),
X    INTC_DUMMY_12      = ( ( ((uint32_t)(40)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0A0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N
N    INTC_SMC           = INTC_CON( 41, 0x0A4, INTC_EDGE_RISE),
X    INTC_SMC           = ( ( ((uint32_t)(41)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0A4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_DUMMY_13      = INTC_CON( 42, 0x0A8, INTC_NA),
X    INTC_DUMMY_13      = ( ( ((uint32_t)(42)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0A8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_14      = INTC_CON( 43, 0x0AC, INTC_NA),
X    INTC_DUMMY_14      = ( ( ((uint32_t)(43)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0AC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N    INTC_DUMMY_15      = INTC_CON( 44, 0x0B0, INTC_NA),
X    INTC_DUMMY_15      = ( ( ((uint32_t)(44)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0B0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_NA) ) << 24) ),
N
N    INTC_GDC0          = INTC_CON( 45, 0x0B4, INTC_LEVEL_HI),
X    INTC_GDC0          = ( ( ((uint32_t)(45)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0B4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_GDC1          = INTC_CON( 46, 0x0B8, INTC_LEVEL_HI),
X    INTC_GDC1          = ( ( ((uint32_t)(46)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0B8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_FG            = INTC_CON( 47, 0x0BC, INTC_LEVEL_HI),
X    INTC_FG            = ( ( ((uint32_t)(47)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0BC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_GA            = INTC_CON( 48, 0x0C0, INTC_LEVEL_HI),
X    INTC_GA            = ( ( ((uint32_t)(48)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0C0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_PNGGIR        = INTC_CON( 49, 0x0C4, INTC_RM_CONFIG),
X    INTC_PNGGIR        = ( ( ((uint32_t)(49)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0C4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR0       = INTC_CON( 50, 0x0C8, INTC_RM_CONFIG),
X    INTC_PNGSIR0       = ( ( ((uint32_t)(50)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0C8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR1       = INTC_CON( 51, 0x0CC, INTC_RM_CONFIG),
X    INTC_PNGSIR1       = ( ( ((uint32_t)(51)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0CC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR2       = INTC_CON( 52, 0x0D0, INTC_RM_CONFIG),
X    INTC_PNGSIR2       = ( ( ((uint32_t)(52)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0D0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR3       = INTC_CON( 53, 0x0D4, INTC_RM_CONFIG),
X    INTC_PNGSIR3       = ( ( ((uint32_t)(53)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0D4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR4       = INTC_CON( 54, 0x0D8, INTC_RM_CONFIG),
X    INTC_PNGSIR4       = ( ( ((uint32_t)(54)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0D8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR5       = INTC_CON( 55, 0x0DC, INTC_RM_CONFIG),
X    INTC_PNGSIR5       = ( ( ((uint32_t)(55)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0DC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR6       = INTC_CON( 56, 0x0E0, INTC_RM_CONFIG),
X    INTC_PNGSIR6       = ( ( ((uint32_t)(56)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0E0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N    INTC_PNGSIR7       = INTC_CON( 57, 0x0E4, INTC_RM_CONFIG),
X    INTC_PNGSIR7       = ( ( ((uint32_t)(57)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0E4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) ),
N
N    INTC_MLBSYS        = INTC_CON( 58, 0x0E8, INTC_LEVEL_HI),
X    INTC_MLBSYS        = ( ( ((uint32_t)(58)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0E8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_MLBCHAN       = INTC_CON( 59, 0x0EC, INTC_LEVEL_HI),
X    INTC_MLBCHAN       = ( ( ((uint32_t)(59)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0EC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_MLBDCHAN0     = INTC_CON( 60, 0x0F0, INTC_EDGE_RISE),
X    INTC_MLBDCHAN0     = ( ( ((uint32_t)(60)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0F0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_MLBDCHAN1     = INTC_CON( 61, 0x0F4, INTC_EDGE_RISE),
X    INTC_MLBDCHAN1     = ( ( ((uint32_t)(61)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0F4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_MLBDCHAN2     = INTC_CON( 62, 0x0F8, INTC_EDGE_RISE),
X    INTC_MLBDCHAN2     = ( ( ((uint32_t)(62)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0F8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_MLBDCHAN3     = INTC_CON( 63, 0x0FC, INTC_EDGE_RISE),
X    INTC_MLBDCHAN3     = ( ( ((uint32_t)(63)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x0FC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_MLBDCHAN4     = INTC_CON( 64, 0x100, INTC_EDGE_RISE),
X    INTC_MLBDCHAN4     = ( ( ((uint32_t)(64)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x100) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_MLBDCHAN5     = INTC_CON( 65, 0x104, INTC_EDGE_RISE),
X    INTC_MLBDCHAN5     = ( ( ((uint32_t)(65)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x104) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N
N    INTC_I2S0          = INTC_CON( 66, 0x108, INTC_LEVEL_HI),
X    INTC_I2S0          = ( ( ((uint32_t)(66)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x108) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_I2S1          = INTC_CON( 67, 0x10C, INTC_LEVEL_HI),
X    INTC_I2S1          = ( ( ((uint32_t)(67)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x10C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_TIM0_MAVAL0   = INTC_CON( 68, 0x110, INTC_EDGE_FALL),
X    INTC_TIM0_MAVAL0   = ( ( ((uint32_t)(68)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x110) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM0_MAVAL1   = INTC_CON( 69, 0x114, INTC_EDGE_FALL),
X    INTC_TIM0_MAVAL1   = ( ( ((uint32_t)(69)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x114) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM0_CMPVAL0  = INTC_CON( 70, 0x118, INTC_EDGE_FALL),
X    INTC_TIM0_CMPVAL0  = ( ( ((uint32_t)(70)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x118) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM0_CMPVAL1  = INTC_CON( 71, 0x11C, INTC_EDGE_FALL),
X    INTC_TIM0_CMPVAL1  = ( ( ((uint32_t)(71)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x11C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM1_MAVAL0   = INTC_CON( 72, 0x120, INTC_EDGE_FALL),
X    INTC_TIM1_MAVAL0   = ( ( ((uint32_t)(72)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x120) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM1_MAVAL1   = INTC_CON( 73, 0x124, INTC_EDGE_FALL),
X    INTC_TIM1_MAVAL1   = ( ( ((uint32_t)(73)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x124) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM1_CMPVAL0  = INTC_CON( 74, 0x128, INTC_EDGE_FALL),
X    INTC_TIM1_CMPVAL0  = ( ( ((uint32_t)(74)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x128) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM1_CMPVAL1  = INTC_CON( 75, 0x12C, INTC_EDGE_FALL),
X    INTC_TIM1_CMPVAL1  = ( ( ((uint32_t)(75)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x12C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM2_MAVAL0   = INTC_CON( 76, 0x130, INTC_EDGE_FALL),
X    INTC_TIM2_MAVAL0   = ( ( ((uint32_t)(76)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x130) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM2_MAVAL1   = INTC_CON( 77, 0x134, INTC_EDGE_FALL),
X    INTC_TIM2_MAVAL1   = ( ( ((uint32_t)(77)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x134) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM2_CMPVAL0  = INTC_CON( 78, 0x138, INTC_EDGE_FALL),
X    INTC_TIM2_CMPVAL0  = ( ( ((uint32_t)(78)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x138) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM2_CMPVAL1  = INTC_CON( 79, 0x13C, INTC_EDGE_FALL),
X    INTC_TIM2_CMPVAL1  = ( ( ((uint32_t)(79)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x13C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM3_MAVAL0   = INTC_CON( 80, 0x140, INTC_EDGE_FALL),
X    INTC_TIM3_MAVAL0   = ( ( ((uint32_t)(80)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x140) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM3_MAVAL1   = INTC_CON( 81, 0x144, INTC_EDGE_FALL),
X    INTC_TIM3_MAVAL1   = ( ( ((uint32_t)(81)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x144) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM3_CMPVAL0  = INTC_CON( 82, 0x148, INTC_EDGE_FALL),
X    INTC_TIM3_CMPVAL0  = ( ( ((uint32_t)(82)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x148) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM3_CMPVAL1  = INTC_CON( 83, 0x14C, INTC_EDGE_FALL),
X    INTC_TIM3_CMPVAL1  = ( ( ((uint32_t)(83)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x14C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM4_MAVAL0   = INTC_CON( 84, 0x150, INTC_EDGE_FALL),
X    INTC_TIM4_MAVAL0   = ( ( ((uint32_t)(84)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x150) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM4_MAVAL1   = INTC_CON( 85, 0x154, INTC_EDGE_FALL),
X    INTC_TIM4_MAVAL1   = ( ( ((uint32_t)(85)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x154) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM4_CMPVAL0  = INTC_CON( 86, 0x158, INTC_EDGE_FALL),
X    INTC_TIM4_CMPVAL0  = ( ( ((uint32_t)(86)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x158) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM4_CMPVAL1  = INTC_CON( 87, 0x15C, INTC_EDGE_FALL),
X    INTC_TIM4_CMPVAL1  = ( ( ((uint32_t)(87)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x15C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM5_MAVAL0   = INTC_CON( 88, 0x160, INTC_EDGE_FALL),
X    INTC_TIM5_MAVAL0   = ( ( ((uint32_t)(88)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x160) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM5_MAVAL1   = INTC_CON( 89, 0x164, INTC_EDGE_FALL),
X    INTC_TIM5_MAVAL1   = ( ( ((uint32_t)(89)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x164) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM5_CMPVAL0  = INTC_CON( 90, 0x168, INTC_EDGE_FALL),
X    INTC_TIM5_CMPVAL0  = ( ( ((uint32_t)(90)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x168) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM5_CMPVAL1  = INTC_CON( 91, 0x16C, INTC_EDGE_FALL),
X    INTC_TIM5_CMPVAL1  = ( ( ((uint32_t)(91)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x16C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM6_MAVAL0   = INTC_CON( 92, 0x170, INTC_EDGE_FALL),
X    INTC_TIM6_MAVAL0   = ( ( ((uint32_t)(92)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x170) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM6_MAVAL1   = INTC_CON( 93, 0x174, INTC_EDGE_FALL),
X    INTC_TIM6_MAVAL1   = ( ( ((uint32_t)(93)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x174) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM6_CMPVAL0  = INTC_CON( 94, 0x178, INTC_EDGE_FALL),
X    INTC_TIM6_CMPVAL0  = ( ( ((uint32_t)(94)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x178) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM6_CMPVAL1  = INTC_CON( 95, 0x17C, INTC_EDGE_FALL),
X    INTC_TIM6_CMPVAL1  = ( ( ((uint32_t)(95)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x17C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM7_MAVAL0   = INTC_CON( 96, 0x180, INTC_EDGE_FALL),
X    INTC_TIM7_MAVAL0   = ( ( ((uint32_t)(96)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x180) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM7_MAVAL1   = INTC_CON( 97, 0x184, INTC_EDGE_FALL),
X    INTC_TIM7_MAVAL1   = ( ( ((uint32_t)(97)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x184) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM7_CMPVAL0  = INTC_CON( 98, 0x188, INTC_EDGE_FALL),
X    INTC_TIM7_CMPVAL0  = ( ( ((uint32_t)(98)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x188) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM7_CMPVAL1  = INTC_CON( 99, 0x18C, INTC_EDGE_FALL),
X    INTC_TIM7_CMPVAL1  = ( ( ((uint32_t)(99)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x18C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM8_MAVAL0   = INTC_CON(100, 0x190, INTC_EDGE_FALL),
X    INTC_TIM8_MAVAL0   = ( ( ((uint32_t)(100)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x190) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM8_MAVAL1   = INTC_CON(101, 0x194, INTC_EDGE_FALL),
X    INTC_TIM8_MAVAL1   = ( ( ((uint32_t)(101)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x194) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM8_CMPVAL0  = INTC_CON(102, 0x198, INTC_EDGE_FALL),
X    INTC_TIM8_CMPVAL0  = ( ( ((uint32_t)(102)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x198) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM8_CMPVAL1  = INTC_CON(103, 0x19C, INTC_EDGE_FALL),
X    INTC_TIM8_CMPVAL1  = ( ( ((uint32_t)(103)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x19C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM9_MAVAL0   = INTC_CON(104, 0x1A0, INTC_EDGE_FALL),
X    INTC_TIM9_MAVAL0   = ( ( ((uint32_t)(104)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1A0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM9_MAVAL1   = INTC_CON(105, 0x1A4, INTC_EDGE_FALL),
X    INTC_TIM9_MAVAL1   = ( ( ((uint32_t)(105)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1A4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM9_CMPVAL0  = INTC_CON(106, 0x1A8, INTC_EDGE_FALL),
X    INTC_TIM9_CMPVAL0  = ( ( ((uint32_t)(106)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1A8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_TIM9_CMPVAL1  = INTC_CON(107, 0x1AC, INTC_EDGE_FALL),
X    INTC_TIM9_CMPVAL1  = ( ( ((uint32_t)(107)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1AC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N
N    INTC_DMACINTR      = INTC_CON(108, 0x1B0, INTC_LEVEL_HI),
X    INTC_DMACINTR      = ( ( ((uint32_t)(108)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1B0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_ESEI_CH0_RX   = INTC_CON(109, 0x1B4, INTC_LEVEL_HI),
X    INTC_ESEI_CH0_RX   = ( ( ((uint32_t)(109)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1B4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_ESEI_CH0_TX   = INTC_CON(110, 0x1B8, INTC_LEVEL_HI),
X    INTC_ESEI_CH0_TX   = ( ( ((uint32_t)(110)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1B8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_ESEI_CH0_ST   = INTC_CON(111, 0x1BC, INTC_LEVEL_HI),
X    INTC_ESEI_CH0_ST   = ( ( ((uint32_t)(111)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1BC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_ESEI_CH1_RX   = INTC_CON(112, 0x1C0, INTC_LEVEL_HI),
X    INTC_ESEI_CH1_RX   = ( ( ((uint32_t)(112)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1C0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_ESEI_CH1_TX   = INTC_CON(113, 0x1C4, INTC_LEVEL_HI),
X    INTC_ESEI_CH1_TX   = ( ( ((uint32_t)(113)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1C4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_ESEI_CH1_ST   = INTC_CON(114, 0x1C8, INTC_LEVEL_HI),
X    INTC_ESEI_CH1_ST   = ( ( ((uint32_t)(114)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1C8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_TXCAN_CH0_RX  = INTC_CON(115, 0x1CC, INTC_LEVEL_HI),
X    INTC_TXCAN_CH0_RX  = ( ( ((uint32_t)(115)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1CC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH0_TX  = INTC_CON(116, 0x1D0, INTC_LEVEL_HI),
X    INTC_TXCAN_CH0_TX  = ( ( ((uint32_t)(116)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1D0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH0_ST  = INTC_CON(117, 0x1D4, INTC_LEVEL_HI),
X    INTC_TXCAN_CH0_ST  = ( ( ((uint32_t)(117)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1D4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH1_RX  = INTC_CON(118, 0x1D8, INTC_LEVEL_HI),
X    INTC_TXCAN_CH1_RX  = ( ( ((uint32_t)(118)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1D8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH1_TX  = INTC_CON(119, 0x1DC, INTC_LEVEL_HI),
X    INTC_TXCAN_CH1_TX  = ( ( ((uint32_t)(119)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1DC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH1_ST  = INTC_CON(120, 0x1E0, INTC_LEVEL_HI),
X    INTC_TXCAN_CH1_ST  = ( ( ((uint32_t)(120)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1E0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH2_RX  = INTC_CON(121, 0x1E4, INTC_LEVEL_HI),
X    INTC_TXCAN_CH2_RX  = ( ( ((uint32_t)(121)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1E4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH2_TX  = INTC_CON(122, 0x1E8, INTC_LEVEL_HI),
X    INTC_TXCAN_CH2_TX  = ( ( ((uint32_t)(122)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1E8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_TXCAN_CH2_ST  = INTC_CON(123, 0x1EC, INTC_LEVEL_HI),
X    INTC_TXCAN_CH2_ST  = ( ( ((uint32_t)(123)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1EC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_I2C           = INTC_CON(124, 0x1F0, INTC_EDGE_FALL),
X    INTC_I2C           = ( ( ((uint32_t)(124)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1F0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N
N    INTC_HSUART0_TX    = INTC_CON(125, 0x1F4, INTC_LEVEL_LO),
X    INTC_HSUART0_TX    = ( ( ((uint32_t)(125)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1F4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N    INTC_HSUART0_RX    = INTC_CON(126, 0x1F8, INTC_LEVEL_LO),
X    INTC_HSUART0_RX    = ( ( ((uint32_t)(126)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1F8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N    INTC_HSUART0_ST    = INTC_CON(127, 0x1FC, INTC_LEVEL_LO),
X    INTC_HSUART0_ST    = ( ( ((uint32_t)(127)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x1FC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N    INTC_HSUART1_TX    = INTC_CON(128, 0x200, INTC_LEVEL_LO),
X    INTC_HSUART1_TX    = ( ( ((uint32_t)(128)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x200) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N    INTC_HSUART1_RX    = INTC_CON(129, 0x204, INTC_LEVEL_LO),
X    INTC_HSUART1_RX    = ( ( ((uint32_t)(129)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x204) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N    INTC_HSUART1_ST    = INTC_CON(130, 0x208, INTC_LEVEL_LO),
X    INTC_HSUART1_ST    = ( ( ((uint32_t)(130)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x208) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_LO) ) << 24) ),
N
N    INTC_BCTRL_TOEC    = INTC_CON(131, 0x20C, INTC_LEVEL_HI),
X    INTC_BCTRL_TOEC    = ( ( ((uint32_t)(131)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x20C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCTRL_DS      = INTC_CON(132, 0x210, INTC_LEVEL_HI),
X    INTC_BCTRL_DS      = ( ( ((uint32_t)(132)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x210) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG0_TOEC    = INTC_CON(133, 0x214, INTC_LEVEL_HI),
X    INTC_BCFG0_TOEC    = ( ( ((uint32_t)(133)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x214) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG0_DS      = INTC_CON(134, 0x218, INTC_LEVEL_HI),
X    INTC_BCFG0_DS      = ( ( ((uint32_t)(134)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x218) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG1_TOEC    = INTC_CON(135, 0x21C, INTC_LEVEL_HI),
X    INTC_BCFG1_TOEC    = ( ( ((uint32_t)(135)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x21C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG1_DS      = INTC_CON(136, 0x220, INTC_LEVEL_HI),
X    INTC_BCFG1_DS      = ( ( ((uint32_t)(136)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x220) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BPERIM_TOEC   = INTC_CON(137, 0x224, INTC_LEVEL_HI),
X    INTC_BPERIM_TOEC   = ( ( ((uint32_t)(137)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x224) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BPERIM_DS     = INTC_CON(138, 0x228, INTC_LEVEL_HI),
X    INTC_BPERIM_DS     = ( ( ((uint32_t)(138)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x228) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BPERINM_TOEC  = INTC_CON(139, 0x22C, INTC_LEVEL_HI),
X    INTC_BPERINM_TOEC  = ( ( ((uint32_t)(139)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x22C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BPERINM_DS    = INTC_CON(140, 0x230, INTC_LEVEL_HI),
X    INTC_BPERINM_DS    = ( ( ((uint32_t)(140)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x230) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG0_GS_TOEC = INTC_CON(141, 0x234, INTC_LEVEL_HI),
X    INTC_BCFG0_GS_TOEC = ( ( ((uint32_t)(141)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x234) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG0_GS_DS   = INTC_CON(142, 0x238, INTC_LEVEL_HI),
X    INTC_BCFG0_GS_DS   = ( ( ((uint32_t)(142)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x238) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG1_GS_TOEC = INTC_CON(143, 0x23C, INTC_LEVEL_HI),
X    INTC_BCFG1_GS_TOEC = ( ( ((uint32_t)(143)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x23C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N    INTC_BCFG1_GS_DS   = INTC_CON(144, 0x240, INTC_LEVEL_HI),
X    INTC_BCFG1_GS_DS   = ( ( ((uint32_t)(144)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x240) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_PWMT0         = INTC_CON(145, 0x244, INTC_EDGE_FALL),
X    INTC_PWMT0         = ( ( ((uint32_t)(145)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x244) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT1         = INTC_CON(146, 0x248, INTC_EDGE_FALL),
X    INTC_PWMT1         = ( ( ((uint32_t)(146)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x248) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT2         = INTC_CON(147, 0x24C, INTC_EDGE_FALL),
X    INTC_PWMT2         = ( ( ((uint32_t)(147)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x24C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT3         = INTC_CON(148, 0x250, INTC_EDGE_FALL),
X    INTC_PWMT3         = ( ( ((uint32_t)(148)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x250) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT4         = INTC_CON(149, 0x254, INTC_EDGE_FALL),
X    INTC_PWMT4         = ( ( ((uint32_t)(149)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x254) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT5         = INTC_CON(150, 0x258, INTC_EDGE_FALL),
X    INTC_PWMT5         = ( ( ((uint32_t)(150)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x258) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT6         = INTC_CON(151, 0x25C, INTC_EDGE_FALL),
X    INTC_PWMT6         = ( ( ((uint32_t)(151)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x25C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT7         = INTC_CON(152, 0x260, INTC_EDGE_FALL),
X    INTC_PWMT7         = ( ( ((uint32_t)(152)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x260) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT8         = INTC_CON(153, 0x264, INTC_EDGE_FALL),
X    INTC_PWMT8         = ( ( ((uint32_t)(153)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x264) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT9         = INTC_CON(154, 0x268, INTC_EDGE_FALL),
X    INTC_PWMT9         = ( ( ((uint32_t)(154)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x268) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT10        = INTC_CON(155, 0x26C, INTC_EDGE_FALL),
X    INTC_PWMT10        = ( ( ((uint32_t)(155)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x26C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT11        = INTC_CON(156, 0x270, INTC_EDGE_FALL),
X    INTC_PWMT11        = ( ( ((uint32_t)(156)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x270) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT12        = INTC_CON(157, 0x274, INTC_EDGE_FALL),
X    INTC_PWMT12        = ( ( ((uint32_t)(157)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x274) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT13        = INTC_CON(158, 0x278, INTC_EDGE_FALL),
X    INTC_PWMT13        = ( ( ((uint32_t)(158)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x278) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT14        = INTC_CON(159, 0x27C, INTC_EDGE_FALL),
X    INTC_PWMT14        = ( ( ((uint32_t)(159)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x27C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT15        = INTC_CON(160, 0x280, INTC_EDGE_FALL),
X    INTC_PWMT15        = ( ( ((uint32_t)(160)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x280) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT16        = INTC_CON(161, 0x284, INTC_EDGE_FALL),
X    INTC_PWMT16        = ( ( ((uint32_t)(161)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x284) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT17        = INTC_CON(162, 0x288, INTC_EDGE_FALL),
X    INTC_PWMT17        = ( ( ((uint32_t)(162)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x288) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT18        = INTC_CON(163, 0x28C, INTC_EDGE_FALL),
X    INTC_PWMT18        = ( ( ((uint32_t)(163)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x28C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT19        = INTC_CON(164, 0x290, INTC_EDGE_FALL),
X    INTC_PWMT19        = ( ( ((uint32_t)(164)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x290) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT20        = INTC_CON(165, 0x294, INTC_EDGE_FALL),
X    INTC_PWMT20        = ( ( ((uint32_t)(165)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x294) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT21        = INTC_CON(166, 0x298, INTC_EDGE_FALL),
X    INTC_PWMT21        = ( ( ((uint32_t)(166)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x298) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT22        = INTC_CON(167, 0x29C, INTC_EDGE_FALL),
X    INTC_PWMT22        = ( ( ((uint32_t)(167)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x29C) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_PWMT23        = INTC_CON(168, 0x2A0, INTC_EDGE_FALL),
X    INTC_PWMT23        = ( ( ((uint32_t)(168)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2A0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N
N    INTC_GPWMT0        = INTC_CON(169, 0x2A4, INTC_EDGE_FALL),
X    INTC_GPWMT0        = ( ( ((uint32_t)(169)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2A4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_GPWMT1        = INTC_CON(170, 0x2A8, INTC_EDGE_FALL),
X    INTC_GPWMT1        = ( ( ((uint32_t)(170)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2A8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N
N    INTC_HSPWMT0       = INTC_CON(171, 0x2AC, INTC_EDGE_FALL),
X    INTC_HSPWMT0       = ( ( ((uint32_t)(171)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2AC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_HSPWMT1       = INTC_CON(172, 0x2B0, INTC_EDGE_FALL),
X    INTC_HSPWMT1       = ( ( ((uint32_t)(172)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2B0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_HSPWMT2       = INTC_CON(173, 0x2B4, INTC_EDGE_FALL),
X    INTC_HSPWMT2       = ( ( ((uint32_t)(173)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2B4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N    INTC_HSPWMT3       = INTC_CON(174, 0x2B8, INTC_EDGE_FALL),
X    INTC_HSPWMT3       = ( ( ((uint32_t)(174)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2B8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_FALL) ) << 24) ),
N
N    INTC_ADC_CC        = INTC_CON(175, 0x2BC, INTC_EDGE_RISE),
X    INTC_ADC_CC        = ( ( ((uint32_t)(175)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2BC) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_ADC_HP        = INTC_CON(176, 0x2C0, INTC_EDGE_RISE),
X    INTC_ADC_HP        = ( ( ((uint32_t)(176)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2C0) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_EDGE_RISE) ) << 24) ),
N    INTC_ADC_COM       = INTC_CON(177, 0x2C4, INTC_LEVEL_HI),
X    INTC_ADC_COM       = ( ( ((uint32_t)(177)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2C4) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_LEVEL_HI) ) << 24) ),
N
N    INTC_WAKEUP        = INTC_CON(178, 0x2C8, INTC_RM_CONFIG)
X    INTC_WAKEUP        = ( ( ((uint32_t)(178)) & ((uint32_t) 0x000000FFU) ) | ( ( ( (uint32_t) (0x2C8) ) & ( (uint32_t) 0x000003FFU )) << 8) | ( ((uint32_t) (INTC_RM_CONFIG) ) << 24) )
N} intc_src_e;
N
N/*
N *  IRST parameter values
N */
N
N/* IRST.RDR[x] - Clear DMA Request channel */
Ntypedef enum tag_intc_req_e
N{
N    INTC_DMA_CH0 = 0,                            /* Clear DMA request to channel 0 */
N    INTC_DMA_CH1 = 1,                            /* Clear DMA request to channel 1 */
N    INTC_DMA_CH2 = 2,                           /* Clear DMA request to channel 2 */
N    INTC_DMA_CH3 = 3,                           /* Clear DMA request to channel 3 */
N    INTC_DMA_CH4 = 4,                           /* Clear DMA request to channel 4 */
N    INTC_DMA_CH5 = 5,                           /* Clear DMA request to channel 5 */
N    INTC_DMA_CH6 = 6,                           /* Clear DMA request to channel 6 */
N    INTC_DMA_CH7 = 7,                           /* Clear DMA request to channel 7 */
N    INTC_DMA_CH_ALL = 0xFF                  /* Clear all requests */
N} intc_irst_e;
N
N
N/*
N *  ILEV parameter values
N */
N
N/* ILEV.MLEV - modify interrupt level */
Ntypedef enum tag_intc_ilev_e
N{
N    INTC_RESTORE_OLD = 0,                   /* Restore old interrupt level */
N    INTC_MODIFY_CURR                        /* Modify current interrupt level */
N} intc_ilev_e;
N
N/* ILEV.PMASK/ILEV.CMAKS - interruüpt levels */
Ntypedef enum tag_intc_level_e
N{
N    INTC_CURRENT = 0,                       /* Current IRQ level */
N    INTC_PREV0,                             /* Previous [0]  IRQ level */
N    INTC_PREV1,
N    INTC_PREV2,
N    INTC_PREV3,
N    INTC_PREV4,
N    INTC_PREV5                              /* Previous [5] IRQ level */
N} intc_level_e;
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vINTC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                      uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                      uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      vSetIR_EXT_ByIndex
N *
N * Purpose:       Set bit fields EXT in IR register for a specific channel
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                u8EXT       value of EXT
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vSetIR_EXT_ByIndex (uint8_t u8SrcIx, uint8_t u8EXT);
N
N/****************************************************************************
N *
N * Function:      vSetIR_DRS_ByIndex
N *
N * Purpose:       Set bit fields DRS in IR register for a specific channel
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                u8DRS       value of DRS
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vSetIR_DRS_ByIndex (uint8_t u8SrcIx, uint8_t u8DRS);
N
N
N/****************************************************************************
N *
N * Function:      vSetIR_EIM_ByIndex
N *
N * Purpose:       Set bit fields EIM in IR register for a specific channel
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                u8EIM       value of EIM
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vSetIR_EIM_ByIndex (uint8_t u8SrcIx, uint8_t u8EIM);
N
N
N/****************************************************************************
N *
N * Function:      vSetIR_ACLR_ByIndex
N *
N * Purpose:       Set bit fields ACLR in IR register for a specific channel
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                u8ACLR      value of ACLR
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vSetIR_ACLR_ByIndex(uint8_t u8SrcIx, uint8_t u8ACLR);
N
N
N/****************************************************************************
N *
N * Function:      vSetIR_ByIndex
N *
N * Purpose:       Set IR register with bit fields EXT, DRS, EIM and ACLR for a 
N *                specific channel
N *
N * Inputs:        u8SrcIx          0 to LAST_SRC_INDEX
N *                u8Value_write    value of EXT
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vSetIR_ByIndex (uint8_t u8SrcIx, uint8_t u8Value_write);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SourceConfig
N *
N * Purpose:       Configure each interrupt source in the INTC
N *
N * Inputs:        eSrc        Interrupt source
N *                eMode       Recognition mode. Please note that if
N *                            INTC_DEFAULT is specified then the it
N *                            is set to the default value for the
N *                            selected module [source]
N *                eDst        Specifies where IRQ request will be routed
N *                            [CPU/DMA/MeP]
N *                eLevel      If the request is routed to the CPU, it
N *                            specifies the priority level, otherwise
N *                            specifies the DMA channel
N *                eAutoClear  Specifies for edge sensitive interrupts
N *                            if the interrupt is cleared automatically
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED on invalid parameters [out of range or not
N *                supported values]. The opeartion will be aborted at
N *                the point of detection, thus some values may not be
N *                set
N *
N * Limitations:   INTC_RM_DEFAULT recognition mode cannot be used for
N *                external interrupt sources (INTC_EINT[0-8]). In such
N *                cases the routine will return C_FAILED and will not
N *                set any value
N *
N *                When routing the IRQ request to DMA the eLevel shall
N *                specify the DMA channel number (0 .. 7). In such cases
N *                the routine will return C_FAILED and will not set any
N *                value
N *
N ***************************************************************************/
Nint32_t i32INTC_SourceConfig(intc_src_e eSrc, intc_drs_e eDst, intc_eim_e eMode, intc_ext_e eLevel, intc_aclr_e eAutoClear);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SetEIM_ByIndex
N *
N * Purpose:       Configure interrupt bits EIM by an source Index
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                eMode       Recognition mode. Please note that only
N *                            following values can be set:
N *                            INTC_LEVEL_LO, , INTC_LEVEL_HI, INTC_EDGE_FALL
N *                            or INTC_EDGE_RISE
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED on invalid parameters [out of range or not
N *                supported values].
N *
N * Limitations:   INTC_RM_DEFAULT recognition mode cannot be used for
N *                external interrupt sources (INTC_EINT[0-8]). In such
N *                cases the routine will return C_FAILED and will not
N *                set any value
N *
N ***************************************************************************/
Nint32_t i32INTC_SetEIM_ByIndex(uint8_t u8SrcIx, intc_eim_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SetDrsByIndex
N *
N * Purpose:       Configure interrupt bits DRS by an source Index
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                eDst        Specifies where IRQ request will be routed
N *                            [CPU/DMA/MeP]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED on invalid parameters [out of range or not
N *                supported values].
N *
N * Limitations:   INTC_RM_DEFAULT recognition mode cannot be used for
N *                external interrupt sources (INTC_EINT[0-8]). In such
N *                cases the routine will return C_FAILED and will not
N *                set any value
N *
N ***************************************************************************/
Nint32_t i32INTC_SetDrsByIndex(uint8_t u8SrcIx, intc_drs_e eDst);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SetExtByIndex
N *
N * Purpose:       Configure interrupt bits EXT by an source Index
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                eLevel      If the request is routed to the CPU, it
N *                            specifies the priority level, otherwise
N *                            specifies the DMA channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED on invalid parameters [out of range or not
N *                supported values].
N *
N * Limitations:   INTC_RM_DEFAULT recognition mode cannot be used for
N *                external interrupt sources (INTC_EINT[0-8]). In such
N *                cases the routine will return C_FAILED and will not
N *                set any value
N *
N ***************************************************************************/
Nint32_t i32INTC_SetExtByIndex(uint8_t u8SrcIx, intc_ext_e eLevel);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SetAclrByIndex
N *
N * Purpose:       Configure interrupt bits ACRL by an source Index
N *
N * Inputs:        u8SrcIx     0 to LAST_SRC_INDEX
N *                eAutoClear  Specifies for edge sensitive interrupts
N *                            if the interrupt is cleared automatically
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED on invalid parameters [out of range or not
N *                supported values].
N *
N * Limitations:   INTC_RM_DEFAULT recognition mode cannot be used for
N *                external interrupt sources (INTC_EINT[0-8]). In such
N *                cases the routine will return C_FAILED and will not
N *                set any value
N *
N ***************************************************************************/
Nint32_t i32INTC_SetAclrByIndex(uint8_t u8SrcIx, intc_aclr_e eAutoClear);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_SetVectBaseAddr
N *
N * Purpose:       Configure the vector base address
N *
N * Inputs:        uiAddr  Virtual vector base address (1024-bytes aligned)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED if address is not aligned
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32INTC_SetVectBaseAddr(uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      u32INTC_GetVectAddr
N *
N * Purpose:       Retrieve the vector offset of the currently pending interrupt
N *                with the highest priority level
N *
N * Inputs:        none
N *
N * Outputs:       Interrupt vector address, relevant to the entry made in IVR
N *
N * Return Values: none
N *
N * Limitations:   Vector base [BVA bits] must be set in advance, otherwise the
N *                the vector address may be invalid
N *
N ***************************************************************************/
Nuint32_t u32INTC_GetVectAddr(void);
N
N
N/****************************************************************************
N *
N * Function:      vINTC_ModifyIrqLevel
N *
N * Purpose:       Modify the masked interrupt level
N *
N * Inputs:        eMode  Specifies whether interrupt level
N *                       will be modified or the old one
N *                       shall be restored
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_ModifyIrqLevel(intc_ilev_e eMode, intc_ext_e eLevel);
N
N
N/****************************************************************************
N *
N * Function:      i32INTC_ClearIrq
N *
N * Purpose:       Clear interrupt source
N *
N * Inputs:        uiVoffset  Vector offset address of the interrupt
N *                           source to be cleared. Internal filtering
N *                           is always applied, so the return value of
N *                           u32INTC_GetVectAddr or inc_voffset_e
N *                           constant can be directly used
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on sucess
N *                C_FAILED if vector offset address is not valid
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32INTC_ClearIrq(uint32_t u32Voffset);
N
N
N/****************************************************************************
N *
N * Function:      vINTC_ClearDmaReq
N *
N * Purpose:       Clear DMA request
N *
N * Inputs:        eReqCh  DMA channel reqest to be cleared
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_ClearDmaReq(intc_irst_e eReqCh);
N
N
N/****************************************************************************
N *
N * Function:      vINTC_BlockVectUpdate
N *
N * Purpose:       Protect the IVR against updates from higher priority
N *                interrupts
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_BlockVectUpdate(void);
N
N
N/****************************************************************************
N *
N * Function:      u8INTC_GetIrqLevel
N *
N * Purpose:       Retrieve nested interrupt level
N *
N *
N * Inputs:        eLevel  Nested interrupt level, whose priority should
N *                        be retrieved
N *
N * Outputs:       The priority of the requested level
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint8_t u8INTC_GetIrqLevel(intc_level_e eLevel);
N
N
N/****************************************************************************
N *
N * Function:      u32INTC_GetIrqStatus
N *
N * Purpose:       Retrieve interrupt request status
N *
N *
N * Inputs:        eSrc  Interrupt source
N *
N * Outputs:       0 - not pending
N *                1 - interrupt requested
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32INTC_GetIrqStatus(intc_src_e eSrc);
N
N
N/****************************************************************************
N *
N * Function:      vINTC_EnableInterrupts
N *
N * Purpose:       Enable interrupts
N *
N *
N * Inputs:        eEnable  INTC_DISABLE or INTC_ENABLE
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_EnableInterrupts(intc_enable_e eEnable);
N
N
N/****************************************************************************
N *
N * Function:      eINTC_GetEnabled
N *
N * Purpose:       returns interrupts status
N *
N *
N * Inputs:        none
N *
N * Outputs:       INTC_DISABLE or INTC_ENABLE
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nintc_enable_e eINTC_GetEnabled( void );
N
N
N/****************************************************************************
N *
N * Function:      vINTC_ClearInterrupt
N *
N * Purpose:       Clear interrupts
N *
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_ClearInterrupt(void);
N
N
N/****************************************************************************
N *
N * Function:      vINTC_SetISRStartAddress
N *
N * Purpose:       Set ISR start address
N *
N *
N * Inputs:        eSrc        Interrupt source
N *                u32Address  ISR start address
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vINTC_SetISRStartAddress(intc_src_e eSrc, uint32_t u32Address);
N
N
N/****************************************************************************
N *
N * Function:      u32INTC_GetISRStartAddress
N *
N * Purpose:       Get ISR start address
N *
N *
N * Inputs:        eSrc  Interrupt source
N *
N * Outputs:       ISR start address
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32INTC_GetISRStartAddress(intc_src_e eSrc);
N
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S/* enable warnings 230 and 79 for nonstandard type for a bit field */
S#pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#endif /* _INTC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 28 "..\..\usecases\src\buttons.c" 2
N#include "statevariables.h"
L 1 "..\..\usecases\inc\statevariables.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: statevariables.h,v $
N*   Description : Statevariables
N******************************************************************************
N*   PROJECT     : Capricorn_Bt
N*   MODULE      : System
N*               : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:52 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/usecases/inc/statevariables.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef STATEVARIABLE_H
N#define STATEVARIABLE_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N#include "config.h"
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
Ntypedef struct tag_statevariables
N{
N		uint8_t   u8Animate;
N
N    uint8_t   u8GearToggle;                // update of front and back buffer
N    uint16_t  u16GearType;                 // type of gear
N    uint16_t  u16GearTypeold;              // old type of gear
N
N    uint16_t  u16IndicatorleftAlpha;       // alpha of indicator left
N    uint8_t   u8IndicatorleftType;         // type of indicator left
N    uint16_t  u16IndicatorrightAlpha;      // alpha of indicator right
N    uint8_t   u8IndicatorrightType;        // type of indicator right
N
N    uint16_t  u16BatteryAlpha;             // alpha for battery
N    uint8_t   u8BatteryOn;                 // battery on or off
N    uint16_t  u16LightAlpha;               // alpha for light
N    uint8_t   u8LightOn;                   // light on or off
N    uint8_t   u8LightType;                 // light type
N    uint16_t  u16OilAlpha;                 // alpha for oil
N    uint8_t   u8OilOn;                     // oil on or off
N   
N    int8_t      i8EncoderInc;
N    uint16_t    u16Button_1;
N    uint16_t    u16Button_2;
N    uint16_t    u16Button_3;
N    uint16_t    u16Button_4;
N    uint16_t    u16Button_enc;   
N} statevariables_st;
N
N
N/**********************************************
N*                Variables                    *
N**********************************************/
Nextern statevariables_st stStatevariables;
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N/****************************************************************************
N *
N * Function:      vInitStatevariables
N *
N * Purpose:       Initialisation of statevariables
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vInitStatevariables(void);
N
N
N#endif  /* STATEVARIABLE_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: statevariables.h,v $
N* Revision 1.1  2014/05/09 14:05:52  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 29 "..\..\usecases\src\buttons.c" 2
N#include "pinconfig.h"
L 1 "..\..\inc\pinconfig.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: pinconfig.h,v $
N*   Description : Port configuration header file
N******************************************************************************
N*   PROJECT     : Capricorn-Bt/C
N*   MODULE      : System
N*               : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/pinconfig.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef _PINCONFIG_H
N#define _PINCONFIG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC0
N *
N * Purpose:       Configure pins of GDC0
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC0(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC1
N *
N * Purpose:       Configure pins of GDC1
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC1(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_Buttons
N *
N * Purpose:       Configure pins of Buttons
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_Buttons(void);
N
N/****************************************************************************/
N
N
N#endif /* _PINCONFIG_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG *****************************
N*
N* $Log: pinconfig.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG *****************************/
L 30 "..\..\usecases\src\buttons.c" 2
N#include "timer_cmplx.h"
L 1 "..\..\..\..\lldd\inc\timer_cmplx.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : TIMER_CMPLX low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : TIMER_CMPLX
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef TIMER_CMPLX_H
N#define TIMER_CMPLX_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_TIMER_CMPLX_H_REVISION     "$Revision: 1.8 $"
N#define LLDD_TIMER_CMPLX_H_TAG          "$Name: LLDD_1_6 $"
N
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
N 
Ntypedef enum tag_timer_cmplx_ch_e
N{
N  TIMER_CMPLX_PM_0 =0,
N  TIMER_CMPLX_PM_1 =0x1000,  
N  TIMER_CMPLX_PM_2 =0x2000,  
N  TIMER_CMPLX_PM_3 =0x3000,  
N  TIMER_CMPLX_PM_4 =0x4000,  
N  TIMER_CMPLX_PM_5 =0x5000 
N} timer_cmplx_ch_e;
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/* *** */
N
N/*
N *  TBRUN parameter values
N */
N
N/* TBRUN.DBE / TBRUN.SYNC / TBRUN.OFI - double buffer/synchronous reset/overflow interrupt selection */
Ntypedef enum tag_timer_cmplx_en_e
N{
N    TIMER_CMPLX_DISABLE = 0x0,                    /* Double buffer disabled */
N    TIMER_CMPLX_ENABLE  = 0x1                     /* Double buffering enabled */
N} timer_cmplx_en_e;
N
N/* TBRUN.IDL - idle state */
Ntypedef enum tag_timer_cmplx_idl_e
N{
N    TIMER_CMPLX_IDLE   = 0x0,                     /* Timer stops and goes to idle state */
N    TIMER_CMPLX_NORMAL = 0x1                      /* Normal operation */
N} timer_cmplx_idl_e;
N
N/* TBRUN.PRUN / TBRUN.TRUN / PWMCR.TRUN / HSPWMCR.TRUN / GPWMCR.TRUN - prescaler/timer start/stop */
Ntypedef enum tag_timer_cmplx_run_e
N{
N    TIMER_CMPLX_STOP  = 0x0,                      /* Timer stop */
N    TIMER_CMPLX_START = 0x1                       /* Timer start */
N} timer_cmplx_run_e;
N
N/* *** */
N
N/*
N *  TBMOD parameter values
N */
N
N/* TBMOD.CP0 - software capture control */
Ntypedef enum tag_timer_cmplx_cp0_e
N{
N    TIMER_CMPLX_LATCH    = 0x0,                   /* Latch the counter value into TB0CP0 */
N    TIMER_CMPLX_NO_LATCH = 0x1                    /* Do not care */
N} timer_cmplx_cp0_e;
N
N/* TBMOD.CLE - up-counter control */
Ntypedef enum tag_timer_cmplx_cle_e
N{
N    TIMER_CMPLX_FREE_RUN = 0x0,                   /* On match of compare value 1 do count */
N    TIMER_CMPLX_ONE_SHOT = 0x1                    /* On match of compare value 1 reset the counter */
N} timer_cmplx_cle_e;
N
N/* TBMOD.CPM - capture timing */
Ntypedef enum tag_timer_cmplx_cpm_e
N{
N    TIMER_CMPLX_CPM_DIS    = 0x0,                 /* Latch disabled */
N    TIMER_CMPLX_TBIN01_RR  = 0x1,                 /* Latch at rise of TBIN0 [TBxCAP0] and rise of TBIN1 [TBxCAP1] */
N    TIMER_CMPLX_TBIN00_RF  = 0x2,                 /* Latch at rise of TBIN0 [TBxCAP0] and fall of TBIN0 [TBxCAP1] */
N    TIMER_CMPLX_TBOUTIN_RF = 0x3                  /* Latch at rise of TB0UTIN [TBxCAP0] and rise of TB0UTIN [TBxCAP1] */
N} timer_cmplx_cpm_e;
N
N/* Source Clock Selection (TBMOD.CLK) */
Ntypedef enum tag_timer_cmplx_clk_e
N{
N    TIMER_CMPLX_CLK_EXT   = 0x0,                  /* External input (TBIN0) */
N    TIMER_CMPLX_CLK_DIV1  = 0x1,                  /* Peripheral clock frequency [35MHz] */
N    TIMER_CMPLX_CLK_DIV2  = 0x2,                  /* Peripheral clock frequency / 2 */
N    TIMER_CMPLX_CLK_DIV4  = 0x3,                  /* Peripheral clock frequency / 4 */
N    TIMER_CMPLX_CLK_DIV8  = 0x4,                  /* Peripheral clock frequency / 8 */
N    TIMER_CMPLX_CLK_DIV16 = 0x5,                  /* Peripheral clock frequency / 16 */
N    TIMER_CMPLX_CLK_DIV32 = 0x6,                  /* Peripheral clock frequency / 32 */
N    TIMER_CMPLX_CLK_DIV64 = 0x7                   /* Peripheral clock frequency / 64 */
N} timer_cmplx_clk_e;
N
N/* *** */
N
N/*
N *  TBFF parameter values
N */
N
N/* TBFF.INVL0 / TBFF.INVL1 / TBFF.INVC0 / TBFF.INVC1 - TBOUT inversion */
Ntypedef enum tag_timer_cmplx_ffinv_e
N{
N    TIMER_CMPLX_FF_NOINV = 0x0,                   /* Do not invert */
N    TIMER_CMPLX_FF_INV   = 0x1                    /* Inversion enabled */
N} timer_cmplx_ffinv_e;
N
N/* TBFF.MOD - output flip-flop mode */
Ntypedef enum tag_timer_cmplx_mod_e
N{
N    TIMER_CMPLX_TBFF_INV      = 0x0,              /* Invert TBFF value */
N    TIMER_CMPLX_TBFF_SET      = 0x1,              /* Set TBFF value */
N    TIMER_CMPLX_TBFF_CLR      = 0x2,              /* Clear TBFF value */
N    TIMER_CMPLX_TBFF_DONTCARE = 0x3               /* Do not care */
N} timer_cmplx_mod_e;
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* 16-bit timer_cmplx configuration */
Ntypedef struct tag_timer_cmplx_genCfg_st
N{
N    timer_cmplx_en_e  eDblBuffEn;                 /* Double-buffer on/off */
N    timer_cmplx_en_e  eSyncRstEn;                 /* Synchronous reset acceptance */
N    timer_cmplx_idl_e eIdle;                      /* Idle state */
N    timer_cmplx_run_e ePresclStart;               /* Prescaler start/stop */
N    timer_cmplx_en_e  eOvrflwIrqEn;               /* Overflow interrupt on/off */
N    timer_cmplx_clk_e eClkSource;                 /* Clock source selection */
N    timer_cmplx_cle_e eCountCtrl;                 /* Mode selection [free-run or one-shot] */
N    timer_cmplx_run_e eTimerStart;                /* Timer start/stop */
N} timer_cmplx_genCfg_st;
N
N/* 16-bit timer_cmplx Flip-Flop configuration */
Ntypedef struct tag_timer_cmplx_ffCfg_st
N{
N    timer_cmplx_ffinv_e eInvl1;                   /* Invert when counter value is latched in TB0CP1 */
N    timer_cmplx_ffinv_e eInvl0;                   /* Invert when counter value is latched in TB0CP0 */
N    timer_cmplx_ffinv_e eInvc1;                   /* Invert when up-counter value is equal to TB1REG */
N    timer_cmplx_ffinv_e eInvc0;                   /* Invert when up-counter value is equal to TB0REG */
N    timer_cmplx_mod_e   eFfMode;                  /* Flip-Flop mode */
N} timer_cmplx_ffCfg_st;
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_Config
N *
N * Purpose:       Configure the 16-bit complex timer
N *
N * Inputs:        eCh    Timer channel
N *                stCfg  Target configuration
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_Config(timer_cmplx_ch_e eCh, timer_cmplx_genCfg_st stCfg);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetCountCtrl
N *
N * Purpose:       Set up-counter behavior on match with TB1REG value
N *
N * Inputs:        eCh         Timer channel
N *                eCountCtrl  Control request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetCountCtrl(timer_cmplx_ch_e eCh, timer_cmplx_cle_e eCountCtrl);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetCaptureTiming
N *
N * Purpose:       Set capture event selection
N *
N * Inputs:        eCh         Timer channel
N *                eCapTiming  Capture timing 
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetCaptureTiming(timer_cmplx_ch_e eCh, timer_cmplx_cpm_e eCapTiming);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_FlipFlopConfig
N *
N * Purpose:       Timer 16-bit Flip-Flop configuration
N *
N * Inputs:        eCh      Timer channel
N *                stFfCfg  Flip-flop configuration
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_FlipFlopConfig(timer_cmplx_ch_e eCh, timer_cmplx_ffCfg_st stFfCfg);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetStateIdle
N *
N * Purpose:       Change to IDLE state mode
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetStateIdle(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetStateNormal
N *
N * Purpose:       Change to NORMAL state mode.
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetStateNormal(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_Start
N *
N * Purpose:       Start the 16-bit timer/up-counter
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_Start(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_Stop
N *
N * Purpose:       Stop the 16-bit timer/up-counter
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_Stop(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetOvflowIrqEnable
N *
N * Purpose:       Enable/disable the overflow interrupt
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetOvflowIrqEnable(timer_cmplx_ch_e eCh, timer_cmplx_en_e eIrqEn);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetSyncRstEnable
N *
N * Purpose:       Enable/disable the synchronous reset
N *
N * Inputs:        eCh          Timer channel
N *                eSyncRstEn   Sync Reset Enable parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetSyncRstEnable(timer_cmplx_ch_e eCh, timer_cmplx_en_e eSyncRstEn);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_StartPrescaler
N *
N * Purpose:       Start the prescaler
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_StartPrescaler(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_StopPrescaler
N *
N * Purpose:       Stops the prescaler
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_StopPrescaler(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetDblBuffEnable
N *
N * Purpose:       Enable/disable double buffering
N *
N * Inputs:        eCh      Timer channel
N *                eBuffEn  Double buffer enable parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetDblBuffEnable(timer_cmplx_ch_e eCh, timer_cmplx_en_e eBuffEn);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_LatchCounter
N *
N * Purpose:       Latch the current counter value into TB0CP0 register
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_LatchCounter(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetFfInvl1
N *
N * Purpose:       Set the inversion mode for TBOUT flip-flop upon up-counter 
N *                latch into TB0CP1
N *
N * Inputs:        eCh      Timer channel
N *                eInvert  Inversion parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetFfInvl1(timer_cmplx_ch_e eCh, timer_cmplx_ffinv_e eInvert);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetFfInvl0
N *
N * Purpose:       Set the inversion mode for TBOUT flip-flop upon up-counter 
N *                latch into TB0CP0
N *
N * Inputs:        eCh      Timer channel
N *                eInvert  Inversion parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetFfInvl0(timer_cmplx_ch_e eCh, timer_cmplx_ffinv_e eInvert);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetFfInvc1
N *
N * Purpose:       Set the inversion mode for TBOUT flip-flop upon up-counter 
N *                match with TB1REG
N *
N * Inputs:        eCh  Timer channel
N *                eInvert - Inversion parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetFfInvc1(timer_cmplx_ch_e eCh, timer_cmplx_ffinv_e eInvert);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetFfInvc0
N *
N * Purpose:       Set the inversion mode for TBOUT flip-flop upon up-counter 
N *                match with TB0REG
N *
N * Inputs:        eCh      Timer channel
N *                eInvert  Inversion parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetFfInvc0(timer_cmplx_ch_e eCh, timer_cmplx_ffinv_e eInvert);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetCompareVal0
N *
N * Purpose:       Set first compare value
N *
N * Inputs:        eCh        Timer channel
N *                usCompVal  First compare value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetCompareVal0(timer_cmplx_ch_e eCh, uint16_t u16CompVal);
N
N
N/****************************************************************************
N *
N * Function:      u16TIMER_CMPLX_GetCompareVal0
N *
N * Purpose:       Retrieve the value of TB0REG register
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: first compare value
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint16_t u16TIMER_CMPLX_GetCompareVal0(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      vTIMER_CMPLX_SetCompareVal1
N *
N * Purpose:       Set second compare value 
N *
N * Inputs:        eCh        Timer channel
N *                usCompVal  Second compare calue
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTIMER_CMPLX_SetCompareVal1(timer_cmplx_ch_e eCh, uint16_t u16CompVal);
N
N
N/****************************************************************************
N *
N * Function:      u16TIMER_CMPLX_GetCompareVal1
N *
N * Purpose:       Retrieve the value of TB1REG register
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: second compare value
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint16_t u16TIMER_CMPLX_GetCompareVal1(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      u16TIMER_CMPLX_GetCapturedVal0
N *
N * Purpose:       Retrieve the value captured in TB0CP0 register
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: value captured in TB0CP0 register 
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint16_t u16TIMER_CMPLX_GetCapturedVal0(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      u16TIMER_CMPLX_GetCapturedVal1
N *
N * Purpose:       Retrieve the value captured in TB0CP1 register
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: value captured in TB0CP1 register 
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint16_t u16TIMER_CMPLX_GetCapturedVal1(timer_cmplx_ch_e eCh);
N
N
N/****************************************************************************
N *
N * Function:      u16TIMER_CMPLX_GetCounterVal
N *
N * Purpose:       Retrieve the current up-counter value
N *
N * Inputs:        eCh  Timer channel
N *
N * Outputs:       none
N *
N * Return Values: current counter value
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint16_t u16TIMER_CMPLX_GetCounterVal(timer_cmplx_ch_e eCh);
N
N/****************************************************************************/
N
N
N#endif /* TIMER_CMPLX_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 31 "..\..\usecases\src\buttons.c" 2
N#include "mydef.h"
L 1 "..\..\src\mydef.h" 1
N#ifndef __MYDEF_H__
N#define __MYDEF_H__
N
N
N#include "captypes.h" 
N#include "gf.h"
L 1 "..\..\..\..\mw\inc\gf.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronic Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Contains declarations for Image structures
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/07/21 12:38:02 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef GF_H
N#define GF_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GF_H_REVISION     "$Revision: 1.8 $"
N#define MW_GF_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N/*---------------------------------------
N|             MATH LIBRARY USE           |
N ---------------------------------------*/
N/* Enables use of standard math library */
N/* if following define is disabled, LLDD/GA rotation and scaling are using integer instead of float */
N/* and sin/cos lookup table is used instead of math library functions */
N
N#define GA_USE_MATH_LIB
N
N#ifdef GA_USE_MATH_LIB
N/* Pi Constant Value */
N#define GA_CONST_PI 3.1415926535897932384626433
N#endif
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Transformation table structure
N*/
Ntypedef struct tag_table_st
N{
N    uint32_t    u32Address;         /*!< Table source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N} gf_table_st;
N
N
N/**
N* @brief Image description structure
N*/
Ntypedef struct tag_image_st
N{
N    uint32_t    u32Address;         /*!< Image source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N    int16_t     i16CenterX;         /*!< Image rotation center X-coord (optional) */
N    int16_t     i16CenterY;         /*!< Image rotation center Y-coord (optional) */
N    uint8_t     eFormat;            /*!< Image Format */
N    uint32_t    u32Paletteaddress;  /*!< palette address for PNG */
N} gf_image_st;
N
N
N/**
N* @brief CLUT description structure
N*/
Ntypedef struct tag_clut_st
N{
N    uint32_t    u32Address;         /*!< CLUT source address */
N    uint8_t     u8Length;           /*!< CLUT length */
N} gf_clut_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N
N/***************************************************************************/
N
N#endif /* GF_H */
N
N/***************************************************************************/
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 7 "..\..\src\mydef.h" 2
N#include "gpio.h"
N
Ntypedef enum model_e_index
N{
N	POWER_ON_LOGO_INDEX_ee = 0x01,
N	MAIN_SCREEN_INDEX_ee,
N	WAKE_UP_SCREEN_INDEX_ee,
N	POWER_DOWN_INDEX_ee,
N	MOTOR_BATTERY_INFO_INDEX_ee,
N
N	PRNDS_INDEX_ee = 0X11,
N	READY_INDEX_ee,
N	SMALLLIGHT_INDEX_ee,
N	LED_ON_OFF_LEFT_INDEX_ee,
N	LED_ON_OFF_RIGHT_INDEX_ee,
N	F_FOGLAMP_INDEX_ee,
N	A_FOGLAMP_INDEX_ee,
N	HIGHBEAM_INDEX_ee,
N	DIPPEDHEADLIGHT_INDEX_ee,
N	SAFETYBELT_INDEX_ee,
N	AIRBAG_INDEX_ee,
N	ASB_INDEX_ee,
N	BRAKEFLUID_INDEX_ee,
N	PARKING_INDEX_ee,
N	MOTORERR_INDEX_ee,
N	MOTOROT_INDEX_ee,
N	MOTORSPEED_INDEX_ee,
N	POWERBATTERY_INDEX_ee,
N	SOC_INDEX_ee,
N	CHARGE_INDEX_ee,
N	CHARGPLUG_INDEX_ee,
N	DOOR_INDEX_ee,
N	DCDC_INDEX_ee,
N	POWERBATTERYCUT_INDEX_ee,
N	SYSTEMERR_INDEX_ee,
N	EPS_INDEX_ee,
N	PARKING_ERR_INDEX_ee,
N	CARLOCK_INDEX_ee,
N	ERR_WORD_INDEX_ee,
N	INSULATIONERR_INDEX_ee,
N	DOOR_1_OPEN_INDEX_ee,
N	DOOR_2_OPEN_INDEX_ee,
N	ERR_RED_INDEX_ee,
N	ERR_YELLOW_INDEX_ee,
N	BL_ADJ_LEVEL_INDEX_ee,
N	ICON_TOTAL_NUMBER_ee,
N
N    NEEDLE_SPEED_INDEX_ee = 0X41,
N    ROTATE_SPEED_INDEX_ee,
N    MOTOR_POWER_INDEX_ee,
N    TOTAL_VOLTAGE_INDEX_ee,
N	TOTAL_CURRENT_INDEX_ee,
N	SOC_NUMBER_INDEX_ee,
N	BATTERY_VOLTAGE_INDEX_ee,
N	BATTERY_LIFE_INDEX_ee,
N	TOTAL_DISTANCE_INDEX_ee,
N	TRIP_DISTANCE_INDEX_ee,
N	TORQUE_NUMBER_INDEX_ee,
N	MOTOR_TNUMBER_INDEX_ee,
N	CONTROL_TNUMBER_INDEX_ee,
N	BATTERY_MAX_VOLTAGE_INDEX_ee,
N	BATTERY_MIN_VOLTAGE_INDEX_ee,
N	BATTERY_DROPOUT_V_INDEX_ee,
N	BATTERY_DROPOUT_T_INDEX_ee,
N	CHARGE_TIME_INDEX_ee,
N	
N	BATTERY_MAX_T_INDEX_ee,
N	BATTERY_MIN_T_INDEX_ee,
N	CHARGE_TIME_M_INDEX_ee,
N	NEEDLE_ROTATE_INDEX_ee,
N	NEEDLE_KPAA_INDEX_ee,
N	NEEDLE_KPAB_INDEX_ee,
N	NEEDLE_SOC_INDEX_ee,
N	NEEDLE_VOL_INDEX_ee,
N
N	ALPHA_DATA_INDEX_ee,
N	
N	TYPE3_TOTAL_NUMBER_ee,
N	
N}model_index_et;
N
N/**********************************************Êý¾ÝÀàÏÔÊ¾ÅäÖÃ,ÐèÒªÏÔÊ¾µÄÈ¥µôÆÁ±Î**************************************************/
N
N#define _NEEDLE_SPEED_ENABLE      //NEEDLE_SPEED_INDEX_ee
N//#define _SPEED_NUMBER_ENABLE
N
N//#define _ROTATE_SPEED_ENABLE      //ROTATE_SPEED_INDEX_ee,
N#define _NEEDLE_ROTATE_ENABLE      //NEEDLE_ROTATE_INDEX_ee,
N
N
N//#define _MOTOR_POWER_ENABLE       //MOTOR_POWER_INDEX_ee,
N//#define _TOTAL_VOLTAGE_ENABLE     //TOTAL_VOLTAGE_INDEX_ee,
N//#define _TOTAL_CURRENT_ENABLE       //TOTAL_CURRENT_INDEX_ee,
N
N//#define _SOC_NUMBER_ENABLE          //SOC_NUMBER_INDEX_ee,
N#define _NEEDLE_SOC_ENABLE      //NEEDLE_SOC_INDEX_ee,
N
N//#define _BATTERY_VOLTAGE_ENABLE       //BATTERY_VOLTAGE_INDEX_ee,
N#define _NEEDLE_VOL_ENABLE         //NEEDLE_VOL_INDEX_ee,
N
N
N//#define _BATTERY_LIFE_ENABLE      //BATTERY_LIFE_INDEX_ee,
N//#define _TOTAL_DISTANCE_ENABLE      //TOTAL_DISTANCE_INDEX_ee,
N//#define _TRIP_DISTANCE_ENABLE      //TRIP_DISTANCE_INDEX_ee,
N//#define _TORQUE_NUMBER_ENABLE      //TORQUE_NUMBER_INDEX_ee,
N//#define _MOTOR_TNUMBER_ENABLE      //MOTOR_TNUMBER_INDEX_ee,
N//#define _CONTROL_TNUMBER_ENABLE      //CONTROL_TNUMBER_INDEX_ee,
N//#define _BATTERY_MAX_VOLTAGE_ENABLE      //BATTERY_MAX_VOLTAGE_INDEX_ee,
N//#define _BATTERY_MIN_VOLTAGE_ENABLE      //BATTERY_MIN_VOLTAGE_INDEX_ee,
N//#define _BATTERY_DROPOUT_V_ENABLE      //BATTERY_DROPOUT_V_INDEX_ee,
N//#define _BATTERY_DROPOUT_T_ENABLE      //BATTERY_DROPOUT_T_INDEX_ee,
N//#define _CHARGE_TIME_ENABLE      //CHARGE_TIME_INDEX_ee,
N//#define _BATTERY_MAX_T_ENABLE      //BATTERY_MAX_T_INDEX_ee,
N//#define _BATTERY_MIN_T_ENABLE      //BATTERY_MIN_T_INDEX_ee,
N//#define _CHARGE_TIME_M_ENABLE      //CHARGE_TIME_M_INDEX_ee,
N
N
N#define _NEEDLE_KPAA_ENABLE      //NEEDLE_KPAA_INDEX_ee
N#define _NEEDLE_KPAB_ENABLE      //NEEDLE_KPAB_INDEX_ee
N
N
N/**********************************************Í¼±êÀàÏÔÊ¾ÅäÖÃ**************************************************/
N
N#define	PRNDS_CF			(0) 
N#define	READY_CF 			(0) 
N#define	SMALLLIGHT_CF		(0) 
N#define	LED_ON_OFF_LEFT_CF	(1) 
N#define	LED_ON_OFF_RIGHT_CF	(1) 
N#define	F_FOGLAMP_CF		(1) 
N#define	A_FOGLAMP_CF		(1) 
N#define	HIGHBEAM_CF			(1) 
N#define	DIPPEDHEADLIGHT_CF	(1) 
N#define	SAFETYBELT_CF		(1) 
N#define	AIRBAG_CF			(0) 
N#define	ASB_CF				(1) 
N#define	BRAKEFLUID_CF		(1) 
N#define	PARKING_CF			(1) 
N#define	MOTORERR_CF			(1) 
N#define	MOTOROT_CF			(0) 
N#define	MOTORSPEED_CF		(0) 
N#define	POWERBATTERY_CF		(1) 
N#define	SOC_CF				(1) 
N#define	CHARGE_CF			(1) 
N#define	CHARGPLUG_CF		(1) 
N#define	DOOR_CF				(0) 
N#define	DCDC_CF				(1) 
N#define	POWERBATTERYCUT_CF	(0) 
N#define	SYSTEMERR_CF		(0) 
N#define	EPS_CF				(0) 
N#define	PARKING_ERR_CF		(0) 
N#define	CARLOCK_CF			(0) 
N#define	ERR_WORD_CF			(0) 
N#define	INSULATIONERR_CF	(0) 
N#define	DOOR_1_OPEN_CF		(1) 
N#define	DOOR_2_OPEN_CF		(1) 
N#define	ERR_RED_CF			(1) 
N#define	ERR_YELLOW_CF		(1) 
N#define BL_ADJ_LEVEL_CF		(1)
N
N
N#define ICON_OFF_SHOW	(0)
N/************************************************±³¹â¿ØÖÆ²¿·Ö************/
N#define BL_ON_GP_STAT	(1)
N#define BL_EN_PIN		PORT_PNLGPP6
N
N#define BLADJ_ON_GP_STAT	(1)
N#define BL_ADJ_PIN		PORT_PNLGPP5
N
N#define PANEL_ON_GP_STAT	(1)
N#define PANEL_PIN		PORT_PNLGPP7
N
N//#define BL_OFF_ADC0_PIN		PORT_ADC_IN0
N
N#define BL_ADJ_PWM_LEVEL_PARAM	(1171)	
N
N
N
N
N
N
Ntypedef struct model_type1
N{
N	uint8_t u8screenIndex;
N}cmd_type1_t;
N
Ntypedef struct model_type2
N{
N	uint8_t u8modelIndex;
N	uint8_t u8status;
N}cmd_type2_t;
N
N
N
N#define MAX_DATA_LEN	(4)
Ntypedef struct model_type3
N{
N	uint8_t u8modelIndex;
N	uint8_t u8dataLen;
N	uint8_t u8data[MAX_DATA_LEN];
X	uint8_t u8data[(4)];
N	uint8_t u8flag;
N}cmd_type3_t;
N
N
Ntypedef union 
N{
N	cmd_type1_t stCmdType1;
N	cmd_type2_t stCmdType2;
N	cmd_type3_t stCmdType3;
N}model_parameters_ut;
N
Ntypedef struct 
N{
N	model_parameters_ut utmodel;
N	uint8_t u8typex;
N}model_parameters_st;
N
N
N
N
N#define CODE_HEAD	(0XAA)
N#define CODE_END	(0XDD)
N#define CODE_LEN	(0X05)
N
N#define CODE_TYPE1	(0X01)
N#define CODE_TYPE2	(0X02)
N#define CODE_TYPE3	(0X03)
N
N#define CODE_TYPE1_LEN	(0X05)
N#define CODE_TYPE2_LEN	(0X06)
N#define CODE_TYPE3_LEN	(0X07)
N
N
N
N
N
Ntypedef struct 
N{
N	uint32_t u32data;
N	uint8_t u8dp;
N}all_data_st;
N
N
N
N#define TYPE2_NUMBER_BASE	(0X11)
N#define TYPE2_NUMBER	(ICON_TOTAL_NUMBER_ee - TYPE2_NUMBER_BASE)
N
N#define TYPE3_NUMBER_BASE	(0X41)
N#define TYPE3_NUMBER	(TYPE3_TOTAL_NUMBER_ee - TYPE3_NUMBER_BASE)
N
Ntypedef struct model_data
N{
N	uint8_t u8type1Data;
N	uint8_t u8type2DataTable[TYPE2_NUMBER];
X	uint8_t u8type2DataTable[(ICON_TOTAL_NUMBER_ee - (0X11))];
N	all_data_st sttype3DataTable[TYPE3_NUMBER];	
X	all_data_st sttype3DataTable[(TYPE3_TOTAL_NUMBER_ee - (0X41))];	
N}model_data_st;
N
N
Ntypedef void(*vRunFun_t)(void);
N#define FUNCTION_NUMBER	(28)   //º¯ÊýÖ¸ÕëÊý×éµÄÔªËØ¸öÊý
N#define ACK_CONNECT 	(0X55)
N#define POWER_ON_LOGO	(1)   //¿ª»ú½çÃæÐòºÅ
N#define MAIN_SCREEN	(2)   //Ö÷½çÃæÐòºÅ
N#define WAKE_UP_SCREEN	(3)
N#define POWER_DOWN_SCREEN  (4)
N#define MOTOR_BATTERY_INFO_SCREEN	(5)
N/**********************timer****************/
N
N#define TIMERCOMPLX_NUMBER(n)   (n * 75 * (1000 / 64))   //ms
N
N/*******************SPEED NEEDLE**************************/
Ntypedef struct
N{
N	float32_t f32rota_angle;
N	float32_t f32CurrentDAngle;
N	float32_t f32StepAngle;
N}needle_show_st;
N
N
N
N
N#define INIT_ANGLE	(-115)
N#define SPEED_LEVEL	(10)
N#define MAX_STEP	(5)
N#define SPEED_PARAM	(0.61)
N#define SPEED_NUMBER_X	(613)
N#define SPEED_NUMBER_Y	(142)
N
N
N#define INIT_ANGLE_ROTATE	(-115)
N#define SPEED_LEVEL_ROTATE	(10)
N#define MAX_STEP_ROTATE		(5)
N#define SPEED_PARAM_ROTATE	(34.78)
N
N#define INIT_ANGLE_SOC	(-130)
N#define SPEED_LEVEL_SOC	(10)
N#define MAX_STEP_SOC	(5)
N#define SPEED_PARAM_SOC	(1.2)
N
N#define INIT_ANGLE_KPA	(-125)
N#define SPEED_LEVEL_KPA	(10)
N#define MAX_STEP_KPA	(5)
N#define SPEED_PARAM_KPA	(0.14)   //125  71
N
N#define INIT_ANGLE_KPB	(124)
N#define SPEED_LEVEL_KPB	(10)
N#define MAX_STEP_KPB	(5)
N#define SPEED_PARAM_KPB	(0.14)   //124   70
N
N#define INIT_ANGLE_V	(129)
N#define SPEED_LEVEL_V	(10)
N#define MAX_STEP_V	(5)
N#define SPEED_PARAM_V	(0.2)
N
N
N
N/*********************************************************/
N
N/***************************batpro level*************************/
N
Ntypedef struct
N{
N	uint16_t u16Startx;
N	uint16_t u16Starty;
N	uint8_t u8MaxLevel;
N	uint8_t u8CurrentLevel;
N}DiyBar_st;
N
N
Ntypedef enum
N{
N	FONT2418_ee,
N	FONT1115_ee,
N	FONT0816_ee,
N}font_et;
N
Ntypedef union
N{
N	gf_image_st *pstimage_char;
N	uint16_t u16data;
N}battery_message_ut;
N
Ntypedef struct
N{
N	battery_message_ut utdata;
N	uint8_t u8flag;
N	uint8_t u8num;
N}battery_show_st;
N/************************************************************/
N
N
N//#define _AT_RUN
N
N
N/*****************************************************************/
N
Nvoid vMainMenuFunc(void);
N
N
N
N
Nextern uint16_t u16TimerCount;    //Ã»10ms¼ÓÒ»£¬×î´ó10000
Nextern model_data_st gModeData;   //ËùÓÐ¶ÔÏó¹²Ïí
Nextern uint16_t u16Type2XYTable[][2]; 
Nextern uint16_t u16Type3XYTable[][2];
Nextern void vInitAllData(void);
Nextern gf_image_st* stIconTable[][2];
Nextern void vInitIconTable(void);
Nextern DiyBar_st stBatTable[];
Nextern vRunFun_t gRunFunTable[];
Nextern uint8_t u8IconConfigTable[];
Nextern uint16_t u16Timer1SFlag;
Nextern uint16_t u16TimerAlpha;
N#endif
N
N
L 32 "..\..\usecases\src\buttons.c" 2
N/**********************************************
N*               Defs                          *
N**********************************************/
N/* SMC position update ration */
N#define ENCODER_TICK_RATIO   (7 * 75 * (1000 / 64))
N
N#define PB_DELAY		3
N
N#define AOB_ENCODER_POLL_RATE   175000
N
N/**********************************************
N*               Structs                       *
N**********************************************/
N
N
N/**********************************************
N*              Variables                      *
N**********************************************/
N/* button 1 */
Nuint32_t u32Pushbutton1_wait;
Nuint32_t u32Pushbutton1_new;
Nuint32_t u32Pushbutton1_old;
N
N/* button 2 */
Nuint32_t u32Pushbutton2_wait;
Nuint32_t u32Pushbutton2_new;
Nuint32_t u32Pushbutton2_old;
N
N/* button 3 */
Nuint32_t u32Pushbutton3_wait;
Nuint32_t u32Pushbutton3_new;
Nuint32_t u32Pushbutton3_old;
N
N/* button 4 */
Nuint32_t u32Pushbutton4_wait;
Nuint32_t u32Pushbutton4_new;
Nuint32_t u32Pushbutton4_old;
N
N/* button encoder */
Nuint32_t u32Pushbutton5_wait;
Nuint32_t u32Pushbutton5_new;
Nuint32_t u32Pushbutton5_old;
N
Nint8_t i8Graytab[] = { 0,1,-1,0, -1,0,0,1, 1,0,0,-1, 0,-1,1,0 };
Nint8_t i8Enc_delta;              // Encoder inc between two calls in main
N
N/* static variables */
Nint8_t i8Encoder_Rest;
Nuint8_t u8Graycode;
N
N/**********************************************
N*               Functions                     *
N**********************************************/
N
Nint8_t i8GetEncoder(void)
N{
N    int8_t i8Value = 0;
N
N    if (i8Enc_delta != 0)
N    {
N        if (i8Enc_delta > 0)
N        {
N            i8Value = 1;
N        }
N        else
N        {
N            i8Value = -1;
N        }
N        i8Enc_delta = 0;
N    }
N    
N    return i8Value;
N}
N
N/****************************************************************************/
Nuint16_t u16TimerCount = 0;
Nextern uint8_t u8SpeedChangeTimeFlag;
Nuint16_t u16Timer1SFlag = 0;
Nuint16_t u16TimerAlpha = 0;
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S__interrupt void vISREncoder(void)
N#else
N__irq void vISREncoder(void)
N#endif /* defined(__GHS__) || defined(__ghs__) */
N{
N    u16TimerCount++;
N	u8SpeedChangeTimeFlag++;
N	u16Timer1SFlag++;
N	u16TimerAlpha++;
N	if(u8SpeedChangeTimeFlag > 200) u8SpeedChangeTimeFlag = 0;
N	if(u16TimerCount > 10000) u16TimerCount = 0;
N	if(u16Timer1SFlag > 10000) u16Timer1SFlag = 0;
N	if(u16TimerAlpha > 10000) u16TimerAlpha = 0;
N    vINTC_ModifyIrqLevel(INTC_RESTORE_OLD, INTC_LEVEL_7);
N}
N
N/****************************************************************************/
N
N
Nvoid vAOBInstallEncPollTimer(uint8_t n)
N{
N    timer_cmplx_genCfg_st timer_cmplx;
N    uint16_t u16CompVal;
N
N    /* configure complex timer 1 for encoder update */
N    timer_cmplx.eDblBuffEn   = TIMER_CMPLX_DISABLE;    /* do not use double buffer */
N    timer_cmplx.eSyncRstEn   = TIMER_CMPLX_DISABLE;    /* disable synchronous reset acceptance */
N    timer_cmplx.eIdle        = TIMER_CMPLX_NORMAL;     /* Normal operation */
N    timer_cmplx.ePresclStart = TIMER_CMPLX_STOP;       /* Prescaler stop */
N    timer_cmplx.eOvrflwIrqEn = TIMER_CMPLX_DISABLE;    /* Overflow interrupt on/off */
N    timer_cmplx.eClkSource   = TIMER_CMPLX_CLK_DIV64;  /* Peripheral clock frequency [75MHz]/64 */
N    timer_cmplx.eCountCtrl   = TIMER_CMPLX_ONE_SHOT;   /* On match of compare value 1 reset the counter  */
N    timer_cmplx.eTimerStart  = TIMER_CMPLX_STOP;       /* Timer start/stop */
N    vTIMER_CMPLX_Config(TIMER_CMPLX_PM_1, timer_cmplx);
N
N    // calculate counter value
N    u16CompVal = TIMERCOMPLX_NUMBER(n);//ENCODER_TICK_RATIO;
X    u16CompVal = (n * 75 * (1000 / 64));
N    vTIMER_CMPLX_SetCompareVal1(TIMER_CMPLX_PM_1, u16CompVal);
N
N    /* configure interrupt modes */
N    i32INTC_SourceConfig(INTC_TIM1_MAVAL1, INTC_TO_CPU, INTC_EDGE_FALL, INTC_LEVEL_3, INTC_AUTO_CLEAR_ENABLE);
N    
N    /* set callback function for tick timer IRQ */
N    vINTC_SetISRStartAddress(INTC_TIM1_MAVAL1, (uint32_t)&vISREncoder);
N
N    vTIMER_CMPLX_StartPrescaler(TIMER_CMPLX_PM_1);     /* start timer prescaler */
N    vTIMER_CMPLX_Start(TIMER_CMPLX_PM_1);              /* start tick timer */
N}
N
N
N/****************************************************************************/
N
Nvoid vInitPushbuttons(void)
N{
N    i8Encoder_Rest = 0;
N    u8Graycode = 0;
N
N    /* Encoder increment */
N    i8Enc_delta = 0;
N
N   // vPinconfig_Buttons();
N    //vAOBInstallEncPollTimer();
N
N    /* button 1 */
N    u32Pushbutton1_wait = 0;
N    u32Pushbutton1_new  = 0;
N    u32Pushbutton1_old  = 0;    
N
N    /* button 2 */
N    u32Pushbutton2_wait = 0;
N    u32Pushbutton2_new  = 0;
N    u32Pushbutton2_old  = 0;
N
N    /* button 3 */
N    u32Pushbutton3_wait = 0;
N    u32Pushbutton3_new  = 0;
N    u32Pushbutton3_old  = 0;
N
N    /* button 4 */
N    u32Pushbutton4_wait = 0;
N    u32Pushbutton4_new  = 0;
N    u32Pushbutton4_old  = 0;    
N
N    /* button encoder */
N    u32Pushbutton5_wait = 0;
N    u32Pushbutton5_new  = 0;
N    u32Pushbutton5_old  = 0;    
N}
N
N/****************************************************************************/
N
N
Nvoid vUpdatePushbuttons(void)
N{
N    gpio_state_e ePBState = GPIO_LOW;
N
N    /* AOB: encoder increment */
N    stStatevariables.i8EncoderInc = i8GetEncoder();
N
N    /* button 1 */
N    i32GPIO_GetPinState(PORT_I2SMCLK, &ePBState);
N    if( ePBState == 0 )
N    {
N        u32Pushbutton1_wait = u32Pushbutton1_wait + 1;
N        if( u32Pushbutton1_wait > PB_DELAY )
X        if( u32Pushbutton1_wait > 3 )
N        {
N            u32Pushbutton1_new = 1;
N            if( u32Pushbutton1_new != u32Pushbutton1_old )
N            {
N                u32Pushbutton1_old = u32Pushbutton1_new;
N        
N                stStatevariables.u16Button_1 = 1;
N            }
N        }
N    }
N    else
N    {
N        u32Pushbutton1_wait = 0;
N        u32Pushbutton1_new = 0;
N        u32Pushbutton1_old = 0;
N    }
N
N    /* button 2 */
N    i32GPIO_GetPinState(PORT_I2S0CLK, &ePBState);
N    if( ePBState == 0)
N    {
N        u32Pushbutton2_wait = u32Pushbutton2_wait + 1;
N        if( u32Pushbutton2_wait > PB_DELAY )
X        if( u32Pushbutton2_wait > 3 )
N        {
N            u32Pushbutton2_new = 1;
N            if( u32Pushbutton2_new != u32Pushbutton2_old )
N            {
N                u32Pushbutton2_old = u32Pushbutton2_new;
N
N                stStatevariables.u16Button_2 = 1;
N            }
N        }
N    }
N    else
N    {
N        u32Pushbutton2_wait = 0;
N        u32Pushbutton2_new = 0;
N        u32Pushbutton2_old = 0;
N    }
N
N    /* button 3 */
N    i32GPIO_GetPinState(PORT_I2S0WS, &ePBState);
N    if( ePBState == 0)
N    {
N        u32Pushbutton3_wait = u32Pushbutton3_wait + 1;
N        if( u32Pushbutton3_wait > PB_DELAY )
X        if( u32Pushbutton3_wait > 3 )
N        {
N            u32Pushbutton3_new = 1;
N            if( u32Pushbutton3_new != u32Pushbutton3_old )
N            {
N                u32Pushbutton3_old = u32Pushbutton3_new;
N
N                stStatevariables.u16Button_3 = 1;
N            }
N        }
N    }
N    else
N    {
N        u32Pushbutton3_wait = 0;
N        u32Pushbutton3_new = 0;
N        u32Pushbutton3_old = 0;
N    }
N
N    /* button 4 */
N    i32GPIO_GetPinState(PORT_I2S0SD, &ePBState);
N    if( ePBState == 0)
N    {
N        u32Pushbutton4_wait = u32Pushbutton4_wait + 1;
N        if( u32Pushbutton4_wait > PB_DELAY )
X        if( u32Pushbutton4_wait > 3 )
N        {
N            u32Pushbutton4_new = 1;
N            if( u32Pushbutton4_new != u32Pushbutton4_old )
N            {
N                u32Pushbutton4_old = u32Pushbutton4_new;
N
N                stStatevariables.u16Button_4 = 1;
N            }
N        }
N    }
N    else
N    {
N        u32Pushbutton4_wait = 0;
N        u32Pushbutton4_new = 0;
N        u32Pushbutton4_old = 0;
N    }	
N
N    /* button encoder */
N    i32GPIO_GetPinState(PORT_PNLGPP6, &ePBState);
N    if( ePBState == 0)
N    {
N        u32Pushbutton5_wait = u32Pushbutton5_wait + 1;
N        if( u32Pushbutton5_wait > PB_DELAY )
X        if( u32Pushbutton5_wait > 3 )
N        {
N            u32Pushbutton5_new = 1;
N            if( u32Pushbutton5_new != u32Pushbutton5_old )
N            {
N                u32Pushbutton5_old = u32Pushbutton5_new;
N
N                stStatevariables.u16Button_enc = 1;
N            }
N        }
N    }
N    else
N    {
N        u32Pushbutton5_wait = 0;
N        u32Pushbutton5_new = 0;
N        u32Pushbutton5_old = 0;
N    }	
N    stStatevariables.i8EncoderInc  = 0;
N    stStatevariables.u16Button_1   = 0;
N    stStatevariables.u16Button_2   = 0;
N    stStatevariables.u16Button_3   = 0;
N    stStatevariables.u16Button_4   = 0;
N    stStatevariables.u16Button_enc = 0;
N
N}
N
N/****************************************************************************/
N
N
N/****************************************************************************/
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
