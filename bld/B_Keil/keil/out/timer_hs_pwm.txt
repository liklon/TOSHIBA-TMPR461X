; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\timer_hs_pwm.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\timer_hs_pwm.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\timer_hs_pwm.crf ..\..\..\..\lldd\src\timer_hs_pwm.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vTIMER_HS_PWM_GetVersion PROC
;;;72     
;;;73     void vTIMER_HS_PWM_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;74                                   uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;75                                   uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;76     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;77        *pau8ModuleRevision = &au8LLDD_TIMER_HS_PWM_C_REVISION[0];
000008  e59f6544          LDR      r6,|L1.1364|
00000c  e5806000          STR      r6,[r0,#0]
;;;78        *pau8ModuleTag      = &au8LLDD_TIMER_HS_PWM_C_TAG[0];
000010  e59f6540          LDR      r6,|L1.1368|
000014  e5816000          STR      r6,[r1,#0]
;;;79        *pau8HeaderRevision = &au8LLDD_TIMER_HS_PWM_H_REVISION[0];
000018  e59f653c          LDR      r6,|L1.1372|
00001c  e5826000          STR      r6,[r2,#0]
;;;80        *pau8HeaderTag      = &au8LLDD_TIMER_HS_PWM_H_TAG[0];
000020  e59f6538          LDR      r6,|L1.1376|
000024  e5836000          STR      r6,[r3,#0]
;;;81        *pau8IORevision     = &au8LLDD_TIMER_HS_PWM_IO_H_REVISION[0];
000028  e59f6534          LDR      r6,|L1.1380|
00002c  e5846000          STR      r6,[r4,#0]
;;;82        *pau8IOTag          = &au8LLDD_TIMER_HS_PWM_IO_H_TAG[0];
000030  e59f6530          LDR      r6,|L1.1384|
000034  e5856000          STR      r6,[r5,#0]
;;;83     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;84     
                          ENDP

                  boTIMER_HS_PWM_Config PROC
;;;87     
;;;88     bool_t boTIMER_HS_PWM_Config(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_Cfg_st stCfg)
00003c  e92d4003          PUSH     {r0,r1,lr}
;;;89     {
000040  e1a02000          MOV      r2,r0
;;;90         bool_t boResult = C_FALSE;
000044  e3a00000          MOV      r0,#0
;;;91     
;;;92         /* High-speed (HS) PWM timers */
;;;93         vSetHSPWMCR_SCLK(eCntrl, stCfg.ePrescalClk);
000048  e5dd3004          LDRB     r3,[sp,#4]
00004c  e1a01c02          LSL      r1,r2,#24
000050  e1a01621          LSR      r1,r1,#12
000054  e24115fe          SUB      r1,r1,#0x3f800000
000058  e24119fe          SUB      r1,r1,#0x3f8000
00005c  e1d110b0          LDRH     r1,[r1,#0]
000060  e7ce1613          BFI      r1,r3,#12,#3
000064  e1a03c02          LSL      r3,r2,#24
000068  e1a03623          LSR      r3,r3,#12
00006c  e24335fe          SUB      r3,r3,#0x3f800000
000070  e24339fe          SUB      r3,r3,#0x3f8000
000074  e1c310b0          STRH     r1,[r3,#0]
;;;94         vSetHSPWMCR_IE(eCntrl, stCfg.eIrqEn);
000078  e5dd3005          LDRB     r3,[sp,#5]
00007c  e1a01c02          LSL      r1,r2,#24
000080  e1a01621          LSR      r1,r1,#12
000084  e24115fe          SUB      r1,r1,#0x3f800000
000088  e24119fe          SUB      r1,r1,#0x3f8000
00008c  e1d110b0          LDRH     r1,[r1,#0]
000090  e7c61313          BFI      r1,r3,#6,#1
000094  e1a03c02          LSL      r3,r2,#24
000098  e1a03623          LSR      r3,r3,#12
00009c  e24335fe          SUB      r3,r3,#0x3f800000
0000a0  e24339fe          SUB      r3,r3,#0x3f8000
0000a4  e1c310b0          STRH     r1,[r3,#0]
;;;95         vSetHSPWMCR_DB(eCntrl, stCfg.eDblBuffEn);
0000a8  e5dd3006          LDRB     r3,[sp,#6]
0000ac  e1a01c02          LSL      r1,r2,#24
0000b0  e1a01621          LSR      r1,r1,#12
0000b4  e24115fe          SUB      r1,r1,#0x3f800000
0000b8  e24119fe          SUB      r1,r1,#0x3f8000
0000bc  e1d110b0          LDRH     r1,[r1,#0]
0000c0  e7c51293          BFI      r1,r3,#5,#1
0000c4  e1a03c02          LSL      r3,r2,#24
0000c8  e1a03623          LSR      r3,r3,#12
0000cc  e24335fe          SUB      r3,r3,#0x3f800000
0000d0  e24339fe          SUB      r3,r3,#0x3f8000
0000d4  e1c310b0          STRH     r1,[r3,#0]
;;;96         vSetHSPWMCR_OL(eCntrl, stCfg.eOutLevel);
0000d8  e5dd3007          LDRB     r3,[sp,#7]
0000dc  e1a01c02          LSL      r1,r2,#24
0000e0  e1a01621          LSR      r1,r1,#12
0000e4  e24115fe          SUB      r1,r1,#0x3f800000
0000e8  e24119fe          SUB      r1,r1,#0x3f8000
0000ec  e1d110b0          LDRH     r1,[r1,#0]
0000f0  e7c41213          BFI      r1,r3,#4,#1
0000f4  e1a03c02          LSL      r3,r2,#24
0000f8  e1a03623          LSR      r3,r3,#12
0000fc  e24335fe          SUB      r3,r3,#0x3f800000
000100  e24339fe          SUB      r3,r3,#0x3f8000
000104  e1c310b0          STRH     r1,[r3,#0]
;;;97     
;;;98         /* 1: Enable Prescaler */    
;;;99         vSetHSPWMCR_PREEN(eCntrl, 1);
000108  e1a01c02          LSL      r1,r2,#24
00010c  e1a01621          LSR      r1,r1,#12
000110  e24115fe          SUB      r1,r1,#0x3f800000
000114  e24119fe          SUB      r1,r1,#0x3f8000
000118  e1d110b0          LDRH     r1,[r1,#0]
00011c  e3c11004          BIC      r1,r1,#4
000120  e2811004          ADD      r1,r1,#4
000124  e1a03c02          LSL      r3,r2,#24
000128  e1a03623          LSR      r3,r3,#12
00012c  e24335fe          SUB      r3,r3,#0x3f800000
000130  e24339fe          SUB      r3,r3,#0x3f8000
000134  e1c310b0          STRH     r1,[r3,#0]
;;;100        boResult = C_TRUE;
000138  e3a00001          MOV      r0,#1
;;;101    
;;;102        /* Configuration result */
;;;103        return boResult;
;;;104    }
00013c  e8bd800c          POP      {r2,r3,pc}
;;;105    
                          ENDP

                  vTIMER_HS_PWM_SetPeriod PROC
;;;108    
;;;109    void vTIMER_HS_PWM_SetPeriod(timer_hs_pwm_cntrl_e eCntrl, uint16_t u16Period)
000140  e1a02c00          LSL      r2,r0,#24
;;;110    {
;;;111        vSetHSPWMPDR_HSPWMPDR(eCntrl, u16Period);
000144  e1a02622          LSR      r2,r2,#12
000148  e24225fe          SUB      r2,r2,#0x3f800000
00014c  e24229fe          SUB      r2,r2,#0x3f8000
000150  e1d220b4          LDRH     r2,[r2,#4]
000154  e7cf2011          BFI      r2,r1,#0,#16
000158  e1a03c00          LSL      r3,r0,#24
00015c  e1a03623          LSR      r3,r3,#12
000160  e24335fe          SUB      r3,r3,#0x3f800000
000164  e24339fe          SUB      r3,r3,#0x3f8000
000168  e1c320b4          STRH     r2,[r3,#4]
;;;112    }
00016c  e12fff1e          BX       lr
;;;113    
                          ENDP

                  vTIMER_HS_PWM_SetDuty PROC
;;;116    
;;;117    void vTIMER_HS_PWM_SetDuty(timer_hs_pwm_cntrl_e eCntrl, uint16_t u16Duty)
000170  e1a02c00          LSL      r2,r0,#24
;;;118    {
;;;119        vSetHSPWMDDR_HSPWMDDR(eCntrl, u16Duty);
000174  e1a02622          LSR      r2,r2,#12
000178  e24225fe          SUB      r2,r2,#0x3f800000
00017c  e24229fe          SUB      r2,r2,#0x3f8000
000180  e1d220b8          LDRH     r2,[r2,#8]
000184  e7cf2011          BFI      r2,r1,#0,#16
000188  e1a03c00          LSL      r3,r0,#24
00018c  e1a03623          LSR      r3,r3,#12
000190  e24335fe          SUB      r3,r3,#0x3f800000
000194  e24339fe          SUB      r3,r3,#0x3f8000
000198  e1c320b8          STRH     r2,[r3,#8]
;;;120    }
00019c  e12fff1e          BX       lr
;;;121    
                          ENDP

                  u16TIMER_HS_PWM_GetDuty PROC
;;;124    
;;;125    uint16_t u16TIMER_HS_PWM_GetDuty(timer_hs_pwm_cntrl_e eCntrl)
0001a0  e1a01000          MOV      r1,r0
;;;126    {
;;;127        uint16_t u16Res;
;;;128    
;;;129        u16Res = u16GetHSPWMDDR(eCntrl);            
0001a4  e1a02c01          LSL      r2,r1,#24
0001a8  e1a02622          LSR      r2,r2,#12
0001ac  e24225fe          SUB      r2,r2,#0x3f800000
0001b0  e24229fe          SUB      r2,r2,#0x3f8000
0001b4  e1d200b8          LDRH     r0,[r2,#8]
;;;130    
;;;131        return u16Res;
;;;132    }
0001b8  e12fff1e          BX       lr
;;;133    
                          ENDP

                  i32TIMER_HS_PWM_SetWaveform PROC
;;;136    
;;;137    int32_t i32TIMER_HS_PWM_SetWaveform(timer_hs_pwm_cntrl_e eCntrl, uint16_t u16Period, uint16_t u16Duty, timer_hs_pwm_ol_e eOutLevel)
0001bc  e92d5ff0          PUSH     {r4-r12,lr}
;;;138    {
0001c0  e1a04000          MOV      r4,r0
0001c4  e1a07001          MOV      r7,r1
0001c8  e1a05002          MOV      r5,r2
0001cc  e1a08003          MOV      r8,r3
;;;139        int32_t i32Res;
;;;140        uint16_t u16DutyVal;
;;;141        timer_hs_pwm_en_e eCurStat = TIMER_HS_PWM_DISABLE;
0001d0  e3a0a000          MOV      r10,#0
;;;142        timer_hs_pwm_en_e eBuffType = TIMER_HS_PWM_DISABLE;
0001d4  e3a0b000          MOV      r11,#0
;;;143    
;;;144        eCurStat = (timer_hs_pwm_en_e)biGetHSPWMCR_TRUN(eCntrl);
0001d8  e1a00c04          LSL      r0,r4,#24
0001dc  e1a00620          LSR      r0,r0,#12
0001e0  e24005fe          SUB      r0,r0,#0x3f800000
0001e4  e24009fe          SUB      r0,r0,#0x3f8000
0001e8  e1d000b0          LDRH     r0,[r0,#0]
0001ec  e200a001          AND      r10,r0,#1
;;;145        eBuffType = (timer_hs_pwm_en_e)biGetHSPWMCR_DB(eCntrl);
0001f0  e1a00c04          LSL      r0,r4,#24
0001f4  e1a00620          LSR      r0,r0,#12
0001f8  e24005fe          SUB      r0,r0,#0x3f800000
0001fc  e24009fe          SUB      r0,r0,#0x3f8000
000200  e1d000b0          LDRH     r0,[r0,#0]
000204  e7e0b2d0          UBFX     r11,r0,#5,#1
;;;146    
;;;147        /* check if change is allowed */
;;;148        if( ( TIMER_HS_PWM_ENABLE != eCurStat ) || ( TIMER_HS_PWM_DISABLE != eBuffType ) )
000208  e35a0000          CMP      r10,#0
00020c  0a000001          BEQ      |L1.536|
000210  e35b0000          CMP      r11,#0
000214  0a000078          BEQ      |L1.1020|
                  |L1.536|
;;;149        {
;;;150            if(u16Duty <= 100)
000218  e3550064          CMP      r5,#0x64
00021c  ca000074          BGT      |L1.1012|
;;;151            {
;;;152                if ((u16Duty != 0) && (u16Duty != 100))
000220  e3550000          CMP      r5,#0
000224  0a000031          BEQ      |L1.752|
000228  e3550064          CMP      r5,#0x64
00022c  0a00002f          BEQ      |L1.752|
;;;153                {
;;;154                    /* Duty-counter value */
;;;155                    u16DutyVal = (u16Period * u16Duty)/100;
000230  e0000597          MUL      r0,r7,r5
000234  e3a01064          MOV      r1,#0x64
000238  ebfffffe          BL       __aeabi_idiv
00023c  e6ff9070          UXTH     r9,r0
;;;156    
;;;157                    vSetHSPWMPDR_HSPWMPDR(eCntrl, u16Period);
000240  e1a00c04          LSL      r0,r4,#24
000244  e1a00620          LSR      r0,r0,#12
000248  e24005fe          SUB      r0,r0,#0x3f800000
00024c  e24009fe          SUB      r0,r0,#0x3f8000
000250  e1d000b4          LDRH     r0,[r0,#4]
000254  e7cf0017          BFI      r0,r7,#0,#16
000258  e1a01c04          LSL      r1,r4,#24
00025c  e1a01621          LSR      r1,r1,#12
000260  e24115fe          SUB      r1,r1,#0x3f800000
000264  e24119fe          SUB      r1,r1,#0x3f8000
000268  e1c100b4          STRH     r0,[r1,#4]
;;;158                    vSetHSPWMDDR_HSPWMDDR(eCntrl, u16DutyVal);
00026c  e1a00c04          LSL      r0,r4,#24
000270  e1a00620          LSR      r0,r0,#12
000274  e24005fe          SUB      r0,r0,#0x3f800000
000278  e24009fe          SUB      r0,r0,#0x3f8000
00027c  e1d000b8          LDRH     r0,[r0,#8]
000280  e7cf0019          BFI      r0,r9,#0,#16
000284  e1a01c04          LSL      r1,r4,#24
000288  e1a01621          LSR      r1,r1,#12
00028c  e24115fe          SUB      r1,r1,#0x3f800000
000290  e24119fe          SUB      r1,r1,#0x3f8000
000294  e1c100b8          STRH     r0,[r1,#8]
;;;159    
;;;160                    /* enable timer if coming from 0% and 100% */
;;;161                    if (au8HSPWMRunning[eCntrl] == 1U)
000298  e59f02cc          LDR      r0,|L1.1388|
00029c  e7d00004          LDRB     r0,[r0,r4]
0002a0  e3500001          CMP      r0,#1
0002a4  1a00000b          BNE      |L1.728|
;;;162                    {
;;;163                        vSetHSPWMCR_TRUN(eCntrl, TIMER_HS_PWM_ENABLE);
0002a8  e1a00c04          LSL      r0,r4,#24
0002ac  e1a00620          LSR      r0,r0,#12
0002b0  e24005fe          SUB      r0,r0,#0x3f800000
0002b4  e24009fe          SUB      r0,r0,#0x3f8000
0002b8  e1d000b0          LDRH     r0,[r0,#0]
0002bc  e3c00001          BIC      r0,r0,#1
0002c0  e2800001          ADD      r0,r0,#1
0002c4  e1a01c04          LSL      r1,r4,#24
0002c8  e1a01621          LSR      r1,r1,#12
0002cc  e24115fe          SUB      r1,r1,#0x3f800000
0002d0  e24119fe          SUB      r1,r1,#0x3f8000
0002d4  e1c100b0          STRH     r0,[r1,#0]
                  |L1.728|
;;;164                    }
;;;165    
;;;166            /* Achieved Duty-cycle */
;;;167                    i32Res = (u16DutyVal* 100) / u16Period;
0002d8  e3a01064          MOV      r1,#0x64
0002dc  e0000199          MUL      r0,r9,r1
0002e0  e1a01007          MOV      r1,r7
0002e4  ebfffffe          BL       __aeabi_idiv
0002e8  e1a06000          MOV      r6,r0
0002ec  ea000043          B        |L1.1024|
                  |L1.752|
;;;168                }
;;;169                else
;;;170                {
;;;171                    /* special treatment for 0% and 100% */
;;;172                    if (u16Duty == 0)
0002f0  e3550000          CMP      r5,#0
0002f4  1a000017          BNE      |L1.856|
;;;173                    {
;;;174                        /* 0% */
;;;175                        vSetHSPWMCR_TRUN(eCntrl, TIMER_HS_PWM_DISABLE);
0002f8  e1a00c04          LSL      r0,r4,#24
0002fc  e1a00620          LSR      r0,r0,#12
000300  e24005fe          SUB      r0,r0,#0x3f800000
000304  e24009fe          SUB      r0,r0,#0x3f8000
000308  e1d000b0          LDRH     r0,[r0,#0]
00030c  e3c00001          BIC      r0,r0,#1
000310  e1a01c04          LSL      r1,r4,#24
000314  e1a01621          LSR      r1,r1,#12
000318  e24115fe          SUB      r1,r1,#0x3f800000
00031c  e24119fe          SUB      r1,r1,#0x3f8000
000320  e1c100b0          STRH     r0,[r1,#0]
;;;176                        vSetHSPWMCR_OL(eCntrl, eOutLevel);
000324  e1a00c04          LSL      r0,r4,#24
000328  e1a00620          LSR      r0,r0,#12
00032c  e24005fe          SUB      r0,r0,#0x3f800000
000330  e24009fe          SUB      r0,r0,#0x3f8000
000334  e1d000b0          LDRH     r0,[r0,#0]
000338  e7c40218          BFI      r0,r8,#4,#1
00033c  e1a01c04          LSL      r1,r4,#24
000340  e1a01621          LSR      r1,r1,#12
000344  e24115fe          SUB      r1,r1,#0x3f800000
000348  e24119fe          SUB      r1,r1,#0x3f8000
00034c  e1c100b0          STRH     r0,[r1,#0]
;;;177    
;;;178                /* Achieved Duty-cycle */
;;;179                        i32Res = 0;
000350  e3a06000          MOV      r6,#0
000354  ea000029          B        |L1.1024|
                  |L1.856|
;;;180                    }
;;;181                    else
;;;182                    {
;;;183                        /* 100% */
;;;184                        vSetHSPWMCR_TRUN(eCntrl, TIMER_HS_PWM_DISABLE);
000358  e1a00c04          LSL      r0,r4,#24
00035c  e1a00620          LSR      r0,r0,#12
000360  e24005fe          SUB      r0,r0,#0x3f800000
000364  e24009fe          SUB      r0,r0,#0x3f8000
000368  e1d000b0          LDRH     r0,[r0,#0]
00036c  e3c00001          BIC      r0,r0,#1
000370  e1a01c04          LSL      r1,r4,#24
000374  e1a01621          LSR      r1,r1,#12
000378  e24115fe          SUB      r1,r1,#0x3f800000
00037c  e24119fe          SUB      r1,r1,#0x3f8000
000380  e1c100b0          STRH     r0,[r1,#0]
;;;185                        if (TIMER_HS_PWM_LEVEL_HI == eOutLevel)
000384  e3580001          CMP      r8,#1
000388  1a00000b          BNE      |L1.956|
;;;186                        {
;;;187                            vSetHSPWMCR_OL(eCntrl, TIMER_HS_PWM_LEVEL_LO);
00038c  e1a00c04          LSL      r0,r4,#24
000390  e1a00620          LSR      r0,r0,#12
000394  e24005fe          SUB      r0,r0,#0x3f800000
000398  e24009fe          SUB      r0,r0,#0x3f8000
00039c  e1d000b0          LDRH     r0,[r0,#0]
0003a0  e3c00010          BIC      r0,r0,#0x10
0003a4  e1a01c04          LSL      r1,r4,#24
0003a8  e1a01621          LSR      r1,r1,#12
0003ac  e24115fe          SUB      r1,r1,#0x3f800000
0003b0  e24119fe          SUB      r1,r1,#0x3f8000
0003b4  e1c100b0          STRH     r0,[r1,#0]
0003b8  ea00000b          B        |L1.1004|
                  |L1.956|
;;;188                        }
;;;189                        else
;;;190                        {
;;;191                            vSetHSPWMCR_OL(eCntrl, TIMER_HS_PWM_LEVEL_HI);
0003bc  e1a00c04          LSL      r0,r4,#24
0003c0  e1a00620          LSR      r0,r0,#12
0003c4  e24005fe          SUB      r0,r0,#0x3f800000
0003c8  e24009fe          SUB      r0,r0,#0x3f8000
0003cc  e1d000b0          LDRH     r0,[r0,#0]
0003d0  e3c00010          BIC      r0,r0,#0x10
0003d4  e2800010          ADD      r0,r0,#0x10
0003d8  e1a01c04          LSL      r1,r4,#24
0003dc  e1a01621          LSR      r1,r1,#12
0003e0  e24115fe          SUB      r1,r1,#0x3f800000
0003e4  e24119fe          SUB      r1,r1,#0x3f8000
0003e8  e1c100b0          STRH     r0,[r1,#0]
                  |L1.1004|
;;;192                        }
;;;193    
;;;194                /* Achieved Duty-cycle */
;;;195                        i32Res = 100;
0003ec  e3a06064          MOV      r6,#0x64
0003f0  ea000002          B        |L1.1024|
                  |L1.1012|
;;;196                    }
;;;197                }
;;;198            }
;;;199            else
;;;200            {
;;;201                /* Duty Cycle parameter out of range */
;;;202                i32Res = 0xff;
0003f4  e3a060ff          MOV      r6,#0xff
0003f8  ea000000          B        |L1.1024|
                  |L1.1020|
;;;203            }
;;;204        }
;;;205        else
;;;206        {
;;;207            /* PWM Timer running, no change allowed */
;;;208            i32Res = 0xff;
0003fc  e3a060ff          MOV      r6,#0xff
                  |L1.1024|
;;;209        }
;;;210    
;;;211        return i32Res;
000400  e1a00006          MOV      r0,r6
;;;212    }
000404  e8bd9ff0          POP      {r4-r12,pc}
;;;213    
                          ENDP

                  vTIMER_HS_PWM_SetPrescaler PROC
;;;216    
;;;217    void vTIMER_HS_PWM_SetPrescaler(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_sclk_e ePrescal)
000408  e1a02c00          LSL      r2,r0,#24
;;;218    {
;;;219        vSetHSPWMCR_SCLK(eCntrl, ePrescal);
00040c  e1a02622          LSR      r2,r2,#12
000410  e24225fe          SUB      r2,r2,#0x3f800000
000414  e24229fe          SUB      r2,r2,#0x3f8000
000418  e1d220b0          LDRH     r2,[r2,#0]
00041c  e7ce2611          BFI      r2,r1,#12,#3
000420  e1a03c00          LSL      r3,r0,#24
000424  e1a03623          LSR      r3,r3,#12
000428  e24335fe          SUB      r3,r3,#0x3f800000
00042c  e24339fe          SUB      r3,r3,#0x3f8000
000430  e1c320b0          STRH     r2,[r3,#0]
;;;220    }
000434  e12fff1e          BX       lr
;;;221    
                          ENDP

                  vTIMER_HS_PWM_IrqEnable PROC
;;;224    
;;;225    void vTIMER_HS_PWM_IrqEnable(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_en_e eEnable)
000438  e1a02c00          LSL      r2,r0,#24
;;;226    {
;;;227        vSetHSPWMCR_IE(eCntrl, eEnable);
00043c  e1a02622          LSR      r2,r2,#12
000440  e24225fe          SUB      r2,r2,#0x3f800000
000444  e24229fe          SUB      r2,r2,#0x3f8000
000448  e1d220b0          LDRH     r2,[r2,#0]
00044c  e7c62311          BFI      r2,r1,#6,#1
000450  e1a03c00          LSL      r3,r0,#24
000454  e1a03623          LSR      r3,r3,#12
000458  e24335fe          SUB      r3,r3,#0x3f800000
00045c  e24339fe          SUB      r3,r3,#0x3f8000
000460  e1c320b0          STRH     r2,[r3,#0]
;;;228    }
000464  e12fff1e          BX       lr
;;;229    
                          ENDP

                  vTIMER_HS_PWM_DBuffEnable PROC
;;;232    
;;;233    void vTIMER_HS_PWM_DBuffEnable(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_en_e eEnable)
000468  e1a02c00          LSL      r2,r0,#24
;;;234    {
;;;235        vSetHSPWMCR_DB(eCntrl, eEnable);
00046c  e1a02622          LSR      r2,r2,#12
000470  e24225fe          SUB      r2,r2,#0x3f800000
000474  e24229fe          SUB      r2,r2,#0x3f8000
000478  e1d220b0          LDRH     r2,[r2,#0]
00047c  e7c52291          BFI      r2,r1,#5,#1
000480  e1a03c00          LSL      r3,r0,#24
000484  e1a03623          LSR      r3,r3,#12
000488  e24335fe          SUB      r3,r3,#0x3f800000
00048c  e24339fe          SUB      r3,r3,#0x3f8000
000490  e1c320b0          STRH     r2,[r3,#0]
;;;236    }
000494  e12fff1e          BX       lr
;;;237    
                          ENDP

                  i32TIMER_HS_PWM_SetOutLevel PROC
;;;240    
;;;241    int32_t i32TIMER_HS_PWM_SetOutLevel(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_ol_e eLevel)
000498  e92d4030          PUSH     {r4,r5,lr}
;;;242    {
00049c  e1a02000          MOV      r2,r0
;;;243        int32_t i32Res = C_SUCCESS;
0004a0  e3a00000          MOV      r0,#0
;;;244        timer_hs_pwm_en_e eCurStat = TIMER_HS_PWM_DISABLE;
0004a4  e3a03000          MOV      r3,#0
;;;245    
;;;246        eCurStat = (timer_hs_pwm_en_e)biGetHSPWMCR_TRUN(eCntrl);
0004a8  e1a04c02          LSL      r4,r2,#24
0004ac  e1a04624          LSR      r4,r4,#12
0004b0  e24445fe          SUB      r4,r4,#0x3f800000
0004b4  e24449fe          SUB      r4,r4,#0x3f8000
0004b8  e1d440b0          LDRH     r4,[r4,#0]
0004bc  e2043001          AND      r3,r4,#1
;;;247    
;;;248        /* Change allowed only when Timer is not Running */
;;;249        if( TIMER_HS_PWM_ENABLE != eCurStat )
0004c0  e3530000          CMP      r3,#0
0004c4  1a00000b          BNE      |L1.1272|
;;;250        {
;;;251            /* Change Output Level */
;;;252            vSetHSPWMCR_OL(eCntrl, eLevel);
0004c8  e1a04c02          LSL      r4,r2,#24
0004cc  e1a04624          LSR      r4,r4,#12
0004d0  e24445fe          SUB      r4,r4,#0x3f800000
0004d4  e24449fe          SUB      r4,r4,#0x3f8000
0004d8  e1d440b0          LDRH     r4,[r4,#0]
0004dc  e7c44211          BFI      r4,r1,#4,#1
0004e0  e1a05c02          LSL      r5,r2,#24
0004e4  e1a05625          LSR      r5,r5,#12
0004e8  e24555fe          SUB      r5,r5,#0x3f800000
0004ec  e24559fe          SUB      r5,r5,#0x3f8000
0004f0  e1c540b0          STRH     r4,[r5,#0]
0004f4  ea000000          B        |L1.1276|
                  |L1.1272|
;;;253        }
;;;254        else
;;;255        {
;;;256            /* No change allowed (PWM Timer running) */
;;;257            i32Res = C_FAILED;
0004f8  e3e00000          MVN      r0,#0
                  |L1.1276|
;;;258        }
;;;259    
;;;260        return i32Res;
;;;261    }
0004fc  e8bd8030          POP      {r4,r5,pc}
;;;262    
                          ENDP

                  vTIMER_HS_PWM_Enable PROC
;;;265    
;;;266    void vTIMER_HS_PWM_Enable(timer_hs_pwm_cntrl_e eCntrl, timer_hs_pwm_en_e eEnable)
000500  e1a02c00          LSL      r2,r0,#24
;;;267    {
;;;268        vSetHSPWMCR_TRUN(eCntrl, eEnable);
000504  e1a02622          LSR      r2,r2,#12
000508  e24225fe          SUB      r2,r2,#0x3f800000
00050c  e24229fe          SUB      r2,r2,#0x3f8000
000510  e1d220b0          LDRH     r2,[r2,#0]
000514  e7c02011          BFI      r2,r1,#0,#1
000518  e1a03c00          LSL      r3,r0,#24
00051c  e1a03623          LSR      r3,r3,#12
000520  e24335fe          SUB      r3,r3,#0x3f800000
000524  e24339fe          SUB      r3,r3,#0x3f8000
000528  e1c320b0          STRH     r2,[r3,#0]
;;;269        au8HSPWMRunning[eCntrl] = (uint8_t)eEnable;
00052c  e59f2038          LDR      r2,|L1.1388|
000530  e7c21000          STRB     r1,[r2,r0]
;;;270    }
000534  e12fff1e          BX       lr
;;;271    
                          ENDP

                  u16TIMER_HS_PWM_GetCountVal PROC
;;;274    
;;;275    uint16_t u16TIMER_HS_PWM_GetCountVal(timer_hs_pwm_cntrl_e eCntrl)
000538  e1a01000          MOV      r1,r0
;;;276    {
;;;277        return (uint16_t) biGetHSPWMCNT_HSPWMCNT(eCntrl);
00053c  e1a00c01          LSL      r0,r1,#24
000540  e1a00620          LSR      r0,r0,#12
000544  e24005fe          SUB      r0,r0,#0x3f800000
000548  e24009fe          SUB      r0,r0,#0x3f8000
00054c  e1d000bc          LDRH     r0,[r0,#0xc]
;;;278    }
000550  e12fff1e          BX       lr
;;;279    
                          ENDP

                  |L1.1364|
                          DCD      au8LLDD_TIMER_HS_PWM_C_REVISION
                  |L1.1368|
                          DCD      au8LLDD_TIMER_HS_PWM_C_TAG
                  |L1.1372|
                          DCD      au8LLDD_TIMER_HS_PWM_H_REVISION
                  |L1.1376|
                          DCD      au8LLDD_TIMER_HS_PWM_H_TAG
                  |L1.1380|
                          DCD      au8LLDD_TIMER_HS_PWM_IO_H_REVISION
                  |L1.1384|
                          DCD      au8LLDD_TIMER_HS_PWM_IO_H_TAG
                  |L1.1388|
                          DCD      au8HSPWMRunning

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_TIMER_HS_PWM_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313020          DCB      0x2e,0x31,0x30,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_TIMER_HS_PWM_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_TIMER_HS_PWM_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313020          DCB      0x2e,0x31,0x30,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_TIMER_HS_PWM_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_TIMER_HS_PWM_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313220          DCB      0x2e,0x31,0x32,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_TIMER_HS_PWM_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
                  au8HSPWMRunning
00006c  00000000          DCB      0x00,0x00,0x00,0x00
