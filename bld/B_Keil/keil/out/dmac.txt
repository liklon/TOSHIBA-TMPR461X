; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\dmac.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\dmac.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\dmac.crf ..\..\..\..\lldd\src\dmac.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vDMAC_GetVersion PROC
;;;91     
;;;92     void vDMAC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;93                           uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;94                           uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;95     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;96        *pau8ModuleRevision = &au8LLDD_DMAC_C_REVISION[0];
000008  e59f6c34          LDR      r6,|L1.3140|
00000c  e5806000          STR      r6,[r0,#0]
;;;97        *pau8ModuleTag      = &au8LLDD_DMAC_C_TAG[0];
000010  e59f6c30          LDR      r6,|L1.3144|
000014  e5816000          STR      r6,[r1,#0]
;;;98        *pau8HeaderRevision = &au8LLDD_DMAC_H_REVISION[0];
000018  e59f6c2c          LDR      r6,|L1.3148|
00001c  e5826000          STR      r6,[r2,#0]
;;;99        *pau8HeaderTag      = &au8LLDD_DMAC_H_TAG[0];
000020  e59f6c28          LDR      r6,|L1.3152|
000024  e5836000          STR      r6,[r3,#0]
;;;100       *pau8IORevision     = &au8LLDD_DMAC_IO_H_REVISION[0];
000028  e59f6c24          LDR      r6,|L1.3156|
00002c  e5846000          STR      r6,[r4,#0]
;;;101       *pau8IOTag          = &au8LLDD_DMAC_IO_H_TAG[0];
000030  e59f6c20          LDR      r6,|L1.3160|
000034  e5856000          STR      r6,[r5,#0]
;;;102    }
000038  e8bd8070          POP      {r4-r6,pc}
;;;103    
                          ENDP

                  u8DMAC_GetInterruptStatusAll PROC
;;;106    
;;;107    uint8_t u8DMAC_GetInterruptStatusAll(void)
00003c  e59f0c18          LDR      r0,|L1.3164|
;;;108    {
;;;109        return ( (uint8_t)biGetDMACIntStatus_IntStatus() );
000040  e5900000          LDR      r0,[r0,#0]
000044  e20000ff          AND      r0,r0,#0xff
;;;110    }
000048  e12fff1e          BX       lr
;;;111    
                          ENDP

                  eDMAC_GetInterruptStatus PROC
;;;114    
;;;115    dmac_enable_e eDMAC_GetInterruptStatus(dmac_channel_e eDMAChannel)
00004c  e1a02000          MOV      r2,r0
;;;116    {
;;;117        uint8_t u8Status;
;;;118        dmac_enable_e eDmacStatus;
;;;119    
;;;120    
;;;121        u8Status = (uint8_t)biGetDMACIntStatus_IntStatus();
000050  e59f3c04          LDR      r3,|L1.3164|
000054  e5933000          LDR      r3,[r3,#0]
000058  e20310ff          AND      r1,r3,#0xff
;;;122        u8Status = u8Status & u8ChannelMask[eDMAChannel];
00005c  e59f3bfc          LDR      r3,|L1.3168|
000060  e7d33002          LDRB     r3,[r3,r2]
000064  e0011003          AND      r1,r1,r3
;;;123        if (u8Status > 0U)
000068  e3510000          CMP      r1,#0
00006c  0a000001          BEQ      |L1.120|
;;;124        {
;;;125            eDmacStatus = DMAC_ENABLE;
000070  e3a00001          MOV      r0,#1
000074  ea000000          B        |L1.124|
                  |L1.120|
;;;126        }
;;;127        else
;;;128        {
;;;129            eDmacStatus = DMAC_DISABLE;
000078  e3a00000          MOV      r0,#0
                  |L1.124|
;;;130        }
;;;131        return eDmacStatus;
;;;132    }
00007c  e12fff1e          BX       lr
;;;133    
                          ENDP

                  u8DMAC_GetInterruptTCStatusAll PROC
;;;136    
;;;137    uint8_t u8DMAC_GetInterruptTCStatusAll(void)
000080  e59f0bd4          LDR      r0,|L1.3164|
;;;138    {
;;;139        return ( (uint8_t)biGetDMACIntTCStatus_IntTCStatus() ); 
000084  e5900004          LDR      r0,[r0,#4]
000088  e20000ff          AND      r0,r0,#0xff
;;;140    }
00008c  e12fff1e          BX       lr
;;;141    
                          ENDP

                  eDMAC_GetInterruptTCStatus PROC
;;;144    
;;;145    dmac_enable_e eDMAC_GetInterruptTCStatus(dmac_channel_e eDMAChannel)
000090  e1a02000          MOV      r2,r0
;;;146    {
;;;147        uint8_t u8Status;
;;;148        dmac_enable_e eDmacStatus;
;;;149    
;;;150        u8Status = (uint8_t)biGetDMACIntTCStatus_IntTCStatus();
000094  e59f3bc0          LDR      r3,|L1.3164|
000098  e5933004          LDR      r3,[r3,#4]
00009c  e20310ff          AND      r1,r3,#0xff
;;;151        u8Status = u8Status & u8ChannelMask[eDMAChannel];
0000a0  e59f3bb8          LDR      r3,|L1.3168|
0000a4  e7d33002          LDRB     r3,[r3,r2]
0000a8  e0011003          AND      r1,r1,r3
;;;152        if (u8Status > 0U)
0000ac  e3510000          CMP      r1,#0
0000b0  0a000001          BEQ      |L1.188|
;;;153        {
;;;154            eDmacStatus = DMAC_ENABLE;
0000b4  e3a00001          MOV      r0,#1
0000b8  ea000000          B        |L1.192|
                  |L1.188|
;;;155        }
;;;156        else
;;;157        {
;;;158            eDmacStatus = DMAC_DISABLE;
0000bc  e3a00000          MOV      r0,#0
                  |L1.192|
;;;159        }
;;;160        return eDmacStatus;
;;;161    
;;;162    }
0000c0  e12fff1e          BX       lr
;;;163    
                          ENDP

                  vDMAC_ClearInterruptTCStatusAll PROC
;;;166    
;;;167    void vDMAC_ClearInterruptTCStatusAll(void)
0000c4  e3a000ff          MOV      r0,#0xff
;;;168    {
;;;169        vSetDMACIntTCClear(0xFFU);
0000c8  e59f1b8c          LDR      r1,|L1.3164|
0000cc  e5810008          STR      r0,[r1,#8]
;;;170    }
0000d0  e12fff1e          BX       lr
;;;171    
                          ENDP

                  vDMAC_ClearInterruptTCStatus PROC
;;;174    
;;;175    void vDMAC_ClearInterruptTCStatus(dmac_channel_e eDMAChannel)
0000d4  e59f1b84          LDR      r1,|L1.3168|
;;;176    {
;;;177        vSetDMACIntTCClear(u8ChannelMask[eDMAChannel]);
0000d8  e7d11000          LDRB     r1,[r1,r0]
0000dc  e59f2b78          LDR      r2,|L1.3164|
0000e0  e5821008          STR      r1,[r2,#8]
;;;178    }
0000e4  e12fff1e          BX       lr
;;;179    
                          ENDP

                  u8DMAC_GetInterruptErrorStatusAll PROC
;;;182    
;;;183    uint8_t u8DMAC_GetInterruptErrorStatusAll(void)
0000e8  e59f0b6c          LDR      r0,|L1.3164|
;;;184    {
;;;185        return ( (uint8_t)biGetDMACIntErrorStatus_IntErrorStatus() );
0000ec  e590000c          LDR      r0,[r0,#0xc]
0000f0  e20000ff          AND      r0,r0,#0xff
;;;186    }
0000f4  e12fff1e          BX       lr
;;;187    
                          ENDP

                  eDMAC_GetInterruptErrorStatus PROC
;;;190    
;;;191    dmac_enable_e eDMAC_GetInterruptErrorStatus(dmac_channel_e eDMAChannel)
0000f8  e1a02000          MOV      r2,r0
;;;192    {
;;;193        uint8_t u8Status;
;;;194        dmac_enable_e eDmacStatus;
;;;195    
;;;196        u8Status = (uint8_t)biGetDMACIntErrorStatus_IntErrorStatus();
0000fc  e59f3b58          LDR      r3,|L1.3164|
000100  e593300c          LDR      r3,[r3,#0xc]
000104  e20310ff          AND      r1,r3,#0xff
;;;197        u8Status = u8Status & u8ChannelMask[eDMAChannel];
000108  e59f3b50          LDR      r3,|L1.3168|
00010c  e7d33002          LDRB     r3,[r3,r2]
000110  e0011003          AND      r1,r1,r3
;;;198        if (u8Status > 0U)
000114  e3510000          CMP      r1,#0
000118  0a000001          BEQ      |L1.292|
;;;199        {
;;;200            eDmacStatus = DMAC_ENABLE;
00011c  e3a00001          MOV      r0,#1
000120  ea000000          B        |L1.296|
                  |L1.292|
;;;201        }
;;;202        else
;;;203        {
;;;204            eDmacStatus = DMAC_DISABLE;
000124  e3a00000          MOV      r0,#0
                  |L1.296|
;;;205        }
;;;206        return eDmacStatus;
;;;207    }
000128  e12fff1e          BX       lr
;;;208    
                          ENDP

                  vDMAC_ClearInterruptErrorAll PROC
;;;211    
;;;212    void vDMAC_ClearInterruptErrorAll(void)
00012c  e3a000ff          MOV      r0,#0xff
;;;213    {
;;;214        vSetDMACIntErrClr(0xFFU);
000130  e59f1b24          LDR      r1,|L1.3164|
000134  e5810010          STR      r0,[r1,#0x10]
;;;215    }
000138  e12fff1e          BX       lr
;;;216    
                          ENDP

                  vDMAC_ClearInterruptError PROC
;;;219    
;;;220    void vDMAC_ClearInterruptError(dmac_channel_e eDMAChannel)
00013c  e59f1b1c          LDR      r1,|L1.3168|
;;;221    {
;;;222        vSetDMACIntErrClr(u8ChannelMask[eDMAChannel]);
000140  e7d11000          LDRB     r1,[r1,r0]
000144  e59f2b10          LDR      r2,|L1.3164|
000148  e5821010          STR      r1,[r2,#0x10]
;;;223    }
00014c  e12fff1e          BX       lr
;;;224    
                          ENDP

                  u8DMAC_GetRawInterruptTCStatusAll PROC
;;;227    
;;;228    uint8_t u8DMAC_GetRawInterruptTCStatusAll(void)
000150  e59f0b04          LDR      r0,|L1.3164|
;;;229    {
;;;230        return ( (uint8_t)biGetDMACRawIntTCStatus_RawIntTCStatus() );
000154  e5900014          LDR      r0,[r0,#0x14]
000158  e20000ff          AND      r0,r0,#0xff
;;;231    }
00015c  e12fff1e          BX       lr
;;;232    
                          ENDP

                  eDMAC_GetRawInterruptTCStatus PROC
;;;235    
;;;236    dmac_enable_e eDMAC_GetRawInterruptTCStatus(dmac_channel_e eDMAChannel)
000160  e1a02000          MOV      r2,r0
;;;237    {
;;;238        uint8_t u8Status;
;;;239        dmac_enable_e eDmacStatus;
;;;240    
;;;241        u8Status = (uint8_t)biGetDMACRawIntTCStatus_RawIntTCStatus();
000164  e59f3af0          LDR      r3,|L1.3164|
000168  e5933014          LDR      r3,[r3,#0x14]
00016c  e20310ff          AND      r1,r3,#0xff
;;;242        u8Status = u8Status & u8ChannelMask[eDMAChannel];
000170  e59f3ae8          LDR      r3,|L1.3168|
000174  e7d33002          LDRB     r3,[r3,r2]
000178  e0011003          AND      r1,r1,r3
;;;243        if (u8Status > 0U)
00017c  e3510000          CMP      r1,#0
000180  0a000001          BEQ      |L1.396|
;;;244        {
;;;245            eDmacStatus = DMAC_ENABLE;
000184  e3a00001          MOV      r0,#1
000188  ea000000          B        |L1.400|
                  |L1.396|
;;;246        }
;;;247        else
;;;248        {
;;;249            eDmacStatus = DMAC_DISABLE;
00018c  e3a00000          MOV      r0,#0
                  |L1.400|
;;;250        }
;;;251        return eDmacStatus;
;;;252    }
000190  e12fff1e          BX       lr
;;;253    
                          ENDP

                  u8DMAC_GetRawInterruptErrorStatusAll PROC
;;;256    
;;;257    uint8_t u8DMAC_GetRawInterruptErrorStatusAll(void)
000194  e59f0ac0          LDR      r0,|L1.3164|
;;;258    {
;;;259        return ( (uint8_t)biGetDMACRawIntErrorStatus_RawIntErrorStatus() );
000198  e5900018          LDR      r0,[r0,#0x18]
00019c  e20000ff          AND      r0,r0,#0xff
;;;260    }
0001a0  e12fff1e          BX       lr
;;;261    
                          ENDP

                  eDMAC_GetRawInterruptErrorStatus PROC
;;;264    
;;;265    dmac_enable_e eDMAC_GetRawInterruptErrorStatus(dmac_channel_e eDMAChannel)
0001a4  e1a02000          MOV      r2,r0
;;;266    {
;;;267        uint8_t u8Status;
;;;268        dmac_enable_e eDmacStatus;
;;;269    
;;;270        u8Status = (uint8_t)biGetDMACRawIntErrorStatus_RawIntErrorStatus();
0001a8  e59f3aac          LDR      r3,|L1.3164|
0001ac  e5933018          LDR      r3,[r3,#0x18]
0001b0  e20310ff          AND      r1,r3,#0xff
;;;271        u8Status = u8Status & u8ChannelMask[eDMAChannel];
0001b4  e59f3aa4          LDR      r3,|L1.3168|
0001b8  e7d33002          LDRB     r3,[r3,r2]
0001bc  e0011003          AND      r1,r1,r3
;;;272        if (u8Status > 0U)
0001c0  e3510000          CMP      r1,#0
0001c4  0a000001          BEQ      |L1.464|
;;;273        {
;;;274            eDmacStatus = DMAC_ENABLE;
0001c8  e3a00001          MOV      r0,#1
0001cc  ea000000          B        |L1.468|
                  |L1.464|
;;;275        }
;;;276        else
;;;277        {
;;;278            eDmacStatus = DMAC_DISABLE;
0001d0  e3a00000          MOV      r0,#0
                  |L1.468|
;;;279        }
;;;280        return eDmacStatus;
;;;281    
;;;282    }
0001d4  e12fff1e          BX       lr
;;;283    
                          ENDP

                  u8DMAC_GetEnabledChannelAll PROC
;;;286    
;;;287    uint8_t u8DMAC_GetEnabledChannelAll(void)
0001d8  e59f0a7c          LDR      r0,|L1.3164|
;;;288    {
;;;289        return ( (uint8_t)biGetDMACEnbldChns_EnabledChannels() );
0001dc  e590001c          LDR      r0,[r0,#0x1c]
0001e0  e20000ff          AND      r0,r0,#0xff
;;;290    }
0001e4  e12fff1e          BX       lr
;;;291    
                          ENDP

                  eDMAC_GetEnabledChannel PROC
;;;294    
;;;295    dmac_enable_e eDMAC_GetEnabledChannel(dmac_channel_e eDMAChannel)
0001e8  e1a02000          MOV      r2,r0
;;;296    {
;;;297        uint8_t u8Status;
;;;298        dmac_enable_e eDmacStatus;
;;;299    
;;;300        u8Status = (uint8_t)biGetDMACEnbldChns_EnabledChannels();
0001ec  e59f3a68          LDR      r3,|L1.3164|
0001f0  e593301c          LDR      r3,[r3,#0x1c]
0001f4  e20310ff          AND      r1,r3,#0xff
;;;301        u8Status = u8Status & u8ChannelMask[eDMAChannel];
0001f8  e59f3a60          LDR      r3,|L1.3168|
0001fc  e7d33002          LDRB     r3,[r3,r2]
000200  e0011003          AND      r1,r1,r3
;;;302        if (u8Status > 0U)
000204  e3510000          CMP      r1,#0
000208  0a000001          BEQ      |L1.532|
;;;303        {
;;;304             eDmacStatus = DMAC_ENABLE;
00020c  e3a00001          MOV      r0,#1
000210  ea000000          B        |L1.536|
                  |L1.532|
;;;305        }
;;;306        else
;;;307        {
;;;308            eDmacStatus = DMAC_DISABLE;
000214  e3a00000          MOV      r0,#0
                  |L1.536|
;;;309        }
;;;310        return eDmacStatus;
;;;311    }
000218  e12fff1e          BX       lr
;;;312    
                          ENDP

                  eDMAC_GetEnabled PROC
;;;314    
;;;315    dmac_enable_e eDMAC_GetEnabled( void )
00021c  e59f1a38          LDR      r1,|L1.3164|
;;;316    {
;;;317        dmac_enable_e eEnable;
;;;318    
;;;319        if ( biGetDMACConfig_E () )
000220  e5911030          LDR      r1,[r1,#0x30]
000224  e2011001          AND      r1,r1,#1
000228  e3510000          CMP      r1,#0
00022c  0a000001          BEQ      |L1.568|
;;;320        {
;;;321            eEnable = DMAC_ENABLE;
000230  e3a00001          MOV      r0,#1
000234  ea000000          B        |L1.572|
                  |L1.568|
;;;322        }
;;;323        else
;;;324        {
;;;325            eEnable = DMAC_DISABLE;
000238  e3a00000          MOV      r0,#0
                  |L1.572|
;;;326        }
;;;327        return eEnable;
;;;328    }
00023c  e12fff1e          BX       lr
;;;329    
                          ENDP

                  vDMAC_EnableSoftwareBurstRequestAll PROC
;;;331    
;;;332    void vDMAC_EnableSoftwareBurstRequestAll(uint16_t u16Value)
000240  e59f1a14          LDR      r1,|L1.3164|
;;;333    {
;;;334        vSetDMACSoftBReq(u16Value);
000244  e5810020          STR      r0,[r1,#0x20]
;;;335    }
000248  e12fff1e          BX       lr
;;;336    
                          ENDP

                  vDMAC_EnableSoftwareBurstRequest PROC
;;;339    
;;;340    void vDMAC_EnableSoftwareBurstRequest(dmac_request_e eDMARequest)
00024c  e59f1a08          LDR      r1,|L1.3164|
;;;341    {
;;;342        vSetDMACSoftBReq_SoftBReq((uint32_t)eDMARequest);
000250  e5911020          LDR      r1,[r1,#0x20]
000254  e7cf1010          BFI      r1,r0,#0,#16
000258  e59f29fc          LDR      r2,|L1.3164|
00025c  e5821020          STR      r1,[r2,#0x20]
;;;343    }
000260  e12fff1e          BX       lr
;;;344    
                          ENDP

                  u16DMAC_GetEnabledSoftwareBurstRequestAll PROC
;;;347    
;;;348    uint16_t u16DMAC_GetEnabledSoftwareBurstRequestAll(void)
000264  e59f09f0          LDR      r0,|L1.3164|
;;;349    {
;;;350        return ( (uint16_t)biGetDMACSoftBReq_SoftBReq() );
000268  e5900020          LDR      r0,[r0,#0x20]
00026c  e6ff0070          UXTH     r0,r0
;;;351    }
000270  e12fff1e          BX       lr
;;;352    
                          ENDP

                  eDMAC_GetEnabledSoftwareBurstRequest PROC
;;;355    
;;;356    dmac_enable_e eDMAC_GetEnabledSoftwareBurstRequest(dmac_request_e eDMARequest)
000274  e1a01000          MOV      r1,r0
;;;357    {
;;;358        uint16_t u16Request;
;;;359        dmac_enable_e eDmacStatus;
;;;360    
;;;361        u16Request = (uint16_t)biGetDMACSoftBReq_SoftBReq();
000278  e59f39dc          LDR      r3,|L1.3164|
00027c  e5933020          LDR      r3,[r3,#0x20]
000280  e6ff2073          UXTH     r2,r3
;;;362        u16Request = u16Request & (uint16_t)eDMARequest;
000284  e0022001          AND      r2,r2,r1
;;;363        if (u16Request > 0U)
000288  e3520000          CMP      r2,#0
00028c  0a000001          BEQ      |L1.664|
;;;364        {
;;;365            eDmacStatus = DMAC_ENABLE;
000290  e3a00001          MOV      r0,#1
000294  ea000000          B        |L1.668|
                  |L1.664|
;;;366        }
;;;367        else
;;;368        {
;;;369            eDmacStatus = DMAC_DISABLE;
000298  e3a00000          MOV      r0,#0
                  |L1.668|
;;;370        }
;;;371        return eDmacStatus;
;;;372    }
00029c  e12fff1e          BX       lr
;;;373    
                          ENDP

                  vDMAC_EnableSoftwareSingleRequestAll PROC
;;;376    
;;;377    void vDMAC_EnableSoftwareSingleRequestAll(uint16_t u16Value)
0002a0  e59f19b4          LDR      r1,|L1.3164|
;;;378    {
;;;379        vSetDMACSoftSReq_SoftSReq(u16Value);
0002a4  e5911024          LDR      r1,[r1,#0x24]
0002a8  e7cf1010          BFI      r1,r0,#0,#16
0002ac  e59f29a8          LDR      r2,|L1.3164|
0002b0  e5821024          STR      r1,[r2,#0x24]
;;;380    }
0002b4  e12fff1e          BX       lr
;;;381    
                          ENDP

                  vDMAC_EnableSoftwareSingleRequest PROC
;;;384    
;;;385    void vDMAC_EnableSoftwareSingleRequest(dmac_request_e eDMARequest)
0002b8  e59f199c          LDR      r1,|L1.3164|
;;;386    {
;;;387        vSetDMACSoftSReq_SoftSReq((uint16_t)eDMARequest);
0002bc  e5911024          LDR      r1,[r1,#0x24]
0002c0  e7cf1010          BFI      r1,r0,#0,#16
0002c4  e59f2990          LDR      r2,|L1.3164|
0002c8  e5821024          STR      r1,[r2,#0x24]
;;;388    }
0002cc  e12fff1e          BX       lr
;;;389    
                          ENDP

                  u16DMAC_GetEnabledSoftwareSingleRequestAll PROC
;;;392    
;;;393    uint16_t u16DMAC_GetEnabledSoftwareSingleRequestAll(void)
0002d0  e59f0984          LDR      r0,|L1.3164|
;;;394    {
;;;395        return ( (uint16_t)biGetDMACSoftSReq_SoftSReq() );
0002d4  e5900024          LDR      r0,[r0,#0x24]
0002d8  e6ff0070          UXTH     r0,r0
;;;396    }
0002dc  e12fff1e          BX       lr
;;;397    
                          ENDP

                  eDMAC_GetEnabledSoftwareSingleRequest PROC
;;;400    
;;;401    dmac_enable_e eDMAC_GetEnabledSoftwareSingleRequest(dmac_request_e eDMARequest)
0002e0  e1a01000          MOV      r1,r0
;;;402    {
;;;403        uint16_t u16Request;
;;;404        dmac_enable_e eDmacStatus;
;;;405    
;;;406        u16Request = (uint16_t)biGetDMACSoftSReq_SoftSReq();
0002e4  e59f3970          LDR      r3,|L1.3164|
0002e8  e5933024          LDR      r3,[r3,#0x24]
0002ec  e6ff2073          UXTH     r2,r3
;;;407        u16Request = u16Request & (uint16_t)eDMARequest;
0002f0  e0022001          AND      r2,r2,r1
;;;408        if (u16Request > 0U)
0002f4  e3520000          CMP      r2,#0
0002f8  0a000001          BEQ      |L1.772|
;;;409        {
;;;410             eDmacStatus = DMAC_ENABLE;
0002fc  e3a00001          MOV      r0,#1
000300  ea000000          B        |L1.776|
                  |L1.772|
;;;411        }
;;;412        else
;;;413        {
;;;414            eDmacStatus = DMAC_DISABLE;
000304  e3a00000          MOV      r0,#0
                  |L1.776|
;;;415        }
;;;416        return eDmacStatus;
;;;417    }
000308  e12fff1e          BX       lr
;;;418    
                          ENDP

                  vDMAC_EnableSoftwareLastBurstRequestAll PROC
;;;421    
;;;422    void vDMAC_EnableSoftwareLastBurstRequestAll(uint16_t u16Value)
00030c  e59f1948          LDR      r1,|L1.3164|
;;;423    {
;;;424        vSetDMACSoftLBReq_SoftLBReq(u16Value);
000310  e5911028          LDR      r1,[r1,#0x28]
000314  e7cf1010          BFI      r1,r0,#0,#16
000318  e59f293c          LDR      r2,|L1.3164|
00031c  e5821028          STR      r1,[r2,#0x28]
;;;425    }
000320  e12fff1e          BX       lr
;;;426    
                          ENDP

                  vDMAC_EnableSoftwareLastBurstRequest PROC
;;;429    
;;;430    void vDMAC_EnableSoftwareLastBurstRequest(dmac_request_e eDMARequest)
000324  e59f1930          LDR      r1,|L1.3164|
;;;431    {
;;;432        vSetDMACSoftLBReq_SoftLBReq((uint16_t)eDMARequest);
000328  e5911028          LDR      r1,[r1,#0x28]
00032c  e7cf1010          BFI      r1,r0,#0,#16
000330  e59f2924          LDR      r2,|L1.3164|
000334  e5821028          STR      r1,[r2,#0x28]
;;;433    }
000338  e12fff1e          BX       lr
;;;434    
                          ENDP

                  u16DMAC_GetEnabledSoftwareLastBurstRequestAll PROC
;;;437    
;;;438    uint16_t u16DMAC_GetEnabledSoftwareLastBurstRequestAll(void)
00033c  e59f0918          LDR      r0,|L1.3164|
;;;439    {
;;;440        return ( (uint16_t)biGetDMACSoftLBReq_SoftLBReq() );
000340  e5900028          LDR      r0,[r0,#0x28]
000344  e6ff0070          UXTH     r0,r0
;;;441    }
000348  e12fff1e          BX       lr
;;;442    
                          ENDP

                  eDMAC_GetEnabledSoftwareLastBurstRequest PROC
;;;445    
;;;446    dmac_enable_e eDMAC_GetEnabledSoftwareLastBurstRequest(dmac_request_e eDMARequest)
00034c  e1a01000          MOV      r1,r0
;;;447    {
;;;448        uint16_t u16Request;
;;;449        dmac_enable_e eDmacStatus;
;;;450    
;;;451        u16Request = (uint16_t)biGetDMACSoftLBReq_SoftLBReq();
000350  e59f3904          LDR      r3,|L1.3164|
000354  e5933028          LDR      r3,[r3,#0x28]
000358  e6ff2073          UXTH     r2,r3
;;;452        u16Request = u16Request & (uint16_t)eDMARequest;
00035c  e0022001          AND      r2,r2,r1
;;;453        if (u16Request > 0U)
000360  e3520000          CMP      r2,#0
000364  0a000001          BEQ      |L1.880|
;;;454        {
;;;455            eDmacStatus = DMAC_ENABLE;
000368  e3a00001          MOV      r0,#1
00036c  ea000000          B        |L1.884|
                  |L1.880|
;;;456        }
;;;457        else
;;;458        {
;;;459            eDmacStatus = DMAC_DISABLE;
000370  e3a00000          MOV      r0,#0
                  |L1.884|
;;;460        }
;;;461        return eDmacStatus;
;;;462    }
000374  e12fff1e          BX       lr
;;;463    
                          ENDP

                  vDMAC_EnableSoftwareLastSingleRequestAll PROC
;;;466    
;;;467    void vDMAC_EnableSoftwareLastSingleRequestAll(uint16_t u16Value)
000378  e59f18dc          LDR      r1,|L1.3164|
;;;468    {
;;;469        vSetDMACSoftLSReq_SoftLSReq(u16Value);
00037c  e591102c          LDR      r1,[r1,#0x2c]
000380  e7cf1010          BFI      r1,r0,#0,#16
000384  e59f28d0          LDR      r2,|L1.3164|
000388  e582102c          STR      r1,[r2,#0x2c]
;;;470    }
00038c  e12fff1e          BX       lr
;;;471    
                          ENDP

                  vDMAC_EnableSoftwareLastSingleRequest PROC
;;;474    
;;;475    void vDMAC_EnableSoftwareLastSingleRequest(dmac_request_e eDMARequest)
000390  e59f18c4          LDR      r1,|L1.3164|
;;;476    {
;;;477        vSetDMACSoftLSReq_SoftLSReq((uint16_t)eDMARequest);
000394  e591102c          LDR      r1,[r1,#0x2c]
000398  e7cf1010          BFI      r1,r0,#0,#16
00039c  e59f28b8          LDR      r2,|L1.3164|
0003a0  e582102c          STR      r1,[r2,#0x2c]
;;;478    }
0003a4  e12fff1e          BX       lr
;;;479    
                          ENDP

                  u16DMAC_GetEnabledSoftwareLastSingleRequestAll PROC
;;;482    
;;;483    uint16_t u16DMAC_GetEnabledSoftwareLastSingleRequestAll(void)
0003a8  e59f08ac          LDR      r0,|L1.3164|
;;;484    {
;;;485        return ( (uint16_t)biGetDMACSoftLSReq_SoftLSReq() );
0003ac  e590002c          LDR      r0,[r0,#0x2c]
0003b0  e6ff0070          UXTH     r0,r0
;;;486    }
0003b4  e12fff1e          BX       lr
;;;487    
                          ENDP

                  eDMAC_GetEnabledSoftwareLastSingleRequest PROC
;;;490    
;;;491    dmac_enable_e eDMAC_GetEnabledSoftwareLastSingleRequest(dmac_request_e eDMARequest)
0003b8  e1a01000          MOV      r1,r0
;;;492    {
;;;493        uint16_t u16Request;
;;;494        dmac_enable_e eDmacStatus;
;;;495    
;;;496        u16Request = (uint16_t)biGetDMACSoftLSReq_SoftLSReq();
0003bc  e59f3898          LDR      r3,|L1.3164|
0003c0  e593302c          LDR      r3,[r3,#0x2c]
0003c4  e6ff2073          UXTH     r2,r3
;;;497        u16Request = u16Request & (uint16_t)eDMARequest;
0003c8  e0022001          AND      r2,r2,r1
;;;498        if (u16Request > 0U)
0003cc  e3520000          CMP      r2,#0
0003d0  0a000001          BEQ      |L1.988|
;;;499        {
;;;500             eDmacStatus = DMAC_ENABLE;
0003d4  e3a00001          MOV      r0,#1
0003d8  ea000000          B        |L1.992|
                  |L1.988|
;;;501        }
;;;502        else
;;;503        {
;;;504            eDmacStatus = DMAC_DISABLE;
0003dc  e3a00000          MOV      r0,#0
                  |L1.992|
;;;505        }
;;;506        return eDmacStatus;
;;;507    }
0003e0  e12fff1e          BX       lr
;;;508    
                          ENDP

                  vDMAC_Enable PROC
;;;511    
;;;512    void vDMAC_Enable(dmac_enable_e eEnable)
0003e4  e92d4030          PUSH     {r4,r5,lr}
;;;513    {
0003e8  e1a01000          MOV      r1,r0
;;;514        uint8_t u8Channel;
;;;515        uint8_t u8Mask = 0x1U;
0003ec  e3a02001          MOV      r2,#1
;;;516        uint8_t u8Loop;
;;;517    
;;;518        if (eEnable == DMAC_ENABLE)
0003f0  e3510001          CMP      r1,#1
0003f4  1a000006          BNE      |L1.1044|
;;;519        {
;;;520            vSetDMACConfig_E((uint32_t)DMAC_ENABLE);
0003f8  e59f485c          LDR      r4,|L1.3164|
0003fc  e5944030          LDR      r4,[r4,#0x30]
000400  e3c44001          BIC      r4,r4,#1
000404  e2844001          ADD      r4,r4,#1
000408  e59f584c          LDR      r5,|L1.3164|
00040c  e5854030          STR      r4,[r5,#0x30]
000410  ea00002b          B        |L1.1220|
                  |L1.1044|
;;;521        }
;;;522        else
;;;523        {
;;;524            for (u8Loop=0; u8Loop < 8U; u8Loop++)
000414  e3a00000          MOV      r0,#0
000418  ea000022          B        |L1.1192|
                  |L1.1052|
;;;525            {
;;;526                /* read if a DMA channel is enabled */
;;;527                u8Channel = ((uint8_t)biGetDMACEnbldChns_EnabledChannels()) & u8Mask;
00041c  e59f4838          LDR      r4,|L1.3164|
000420  e594401c          LDR      r4,[r4,#0x1c]
000424  e0043002          AND      r3,r4,r2
;;;528    
;;;529                if (u8Channel != 0U)
000428  e3530000          CMP      r3,#0
00042c  0a000019          BEQ      |L1.1176|
;;;530                {
;;;531                    /* halt channel */
;;;532                    vSetDMACC0Config_H(u8Loop, DMAC_DISABLE);
000430  e1a04280          LSL      r4,r0,#5
000434  e24445ff          SUB      r4,r4,#0x3fc00000
000438  e24449bd          SUB      r4,r4,#0x2f4000
00043c  e5944110          LDR      r4,[r4,#0x110]
000440  e3c44701          BIC      r4,r4,#0x40000
000444  e1a05280          LSL      r5,r0,#5
000448  e24555ff          SUB      r5,r5,#0x3fc00000
00044c  e24559bd          SUB      r5,r5,#0x2f4000
000450  e5854110          STR      r4,[r5,#0x110]
;;;533    
;;;534                    /* poll till channel is halted */
;;;535                    while (1U == (uint32_t) biGetDMACC0Config_A(u8Loop))
000454  e320f000          NOP      
                  |L1.1112|
000458  e1a04280          LSL      r4,r0,#5
00045c  e24445ff          SUB      r4,r4,#0x3fc00000
000460  e24449bd          SUB      r4,r4,#0x2f4000
000464  e5944110          LDR      r4,[r4,#0x110]
000468  e7e048d4          UBFX     r4,r4,#17,#1
00046c  e3540000          CMP      r4,#0
000470  1afffff8          BNE      |L1.1112|
;;;536                    {
;;;537                        ;
;;;538                    }
;;;539    
;;;540                    /* disable channel */
;;;541                    vSetDMACC0Config_E(u8Loop, DMAC_DISABLE);
000474  e1a04280          LSL      r4,r0,#5
000478  e24445ff          SUB      r4,r4,#0x3fc00000
00047c  e24449bd          SUB      r4,r4,#0x2f4000
000480  e5944110          LDR      r4,[r4,#0x110]
000484  e3c44001          BIC      r4,r4,#1
000488  e1a05280          LSL      r5,r0,#5
00048c  e24555ff          SUB      r5,r5,#0x3fc00000
000490  e24559bd          SUB      r5,r5,#0x2f4000
000494  e5854110          STR      r4,[r5,#0x110]
                  |L1.1176|
;;;542                }
;;;543    
;;;544                u8Mask = (uint8_t)(u8Mask << 1);
000498  e1a04c82          LSL      r4,r2,#25
00049c  e1a02c24          LSR      r2,r4,#24
0004a0  e2804001          ADD      r4,r0,#1              ;524
0004a4  e20400ff          AND      r0,r4,#0xff           ;524
                  |L1.1192|
0004a8  e3500008          CMP      r0,#8                 ;524
0004ac  3affffda          BCC      |L1.1052|
;;;545            }
;;;546    
;;;547            vSetDMACConfig_E((uint32_t)DMAC_DISABLE);
0004b0  e59f47a4          LDR      r4,|L1.3164|
0004b4  e5944030          LDR      r4,[r4,#0x30]
0004b8  e3c44001          BIC      r4,r4,#1
0004bc  e59f5798          LDR      r5,|L1.3164|
0004c0  e5854030          STR      r4,[r5,#0x30]
                  |L1.1220|
;;;548        }
;;;549    }
0004c4  e8bd8030          POP      {r4,r5,pc}
;;;550    
                          ENDP

                  vDMAC_EnableSynchronisationAll PROC
;;;553    
;;;554    void vDMAC_EnableSynchronisationAll(uint16_t u16Value)
0004c8  e59f178c          LDR      r1,|L1.3164|
;;;555    {
;;;556        vSetDMACSync(u16Value);
0004cc  e5810034          STR      r0,[r1,#0x34]
;;;557    }
0004d0  e12fff1e          BX       lr
;;;558    
                          ENDP

                  vDMAC_EnableSynchronisation PROC
;;;561    
;;;562    void vDMAC_EnableSynchronisation(dmac_request_e eDMARequest)
0004d4  e59f1780          LDR      r1,|L1.3164|
;;;563    {
;;;564        vSetDMACSync((uint16_t)eDMARequest);
0004d8  e5810034          STR      r0,[r1,#0x34]
;;;565    }
0004dc  e12fff1e          BX       lr
;;;566    
                          ENDP

                  u16DMAC_GetSynchronisationAll PROC
;;;569    
;;;570    uint16_t u16DMAC_GetSynchronisationAll(void)
0004e0  e59f0774          LDR      r0,|L1.3164|
;;;571    {
;;;572        return ( (uint16_t)biGetDMACSync_DMACSync() );
0004e4  e5900034          LDR      r0,[r0,#0x34]
0004e8  e6ff0070          UXTH     r0,r0
;;;573    }
0004ec  e12fff1e          BX       lr
;;;574    
                          ENDP

                  eDMAC_GetSynchronisation PROC
;;;577    
;;;578    dmac_enable_e eDMAC_GetSynchronisation(dmac_request_e eDMARequest)
0004f0  e1a01000          MOV      r1,r0
;;;579    {
;;;580        uint16_t u16Sync;
;;;581        dmac_enable_e eDmacStatus;
;;;582    
;;;583        u16Sync = (uint16_t)biGetDMACSync_DMACSync();
0004f4  e59f3760          LDR      r3,|L1.3164|
0004f8  e5933034          LDR      r3,[r3,#0x34]
0004fc  e6ff2073          UXTH     r2,r3
;;;584        u16Sync = u16Sync & (uint16_t)eDMARequest;
000500  e0022001          AND      r2,r2,r1
;;;585        if (u16Sync > 0U)
000504  e3520000          CMP      r2,#0
000508  0a000001          BEQ      |L1.1300|
;;;586        {
;;;587            eDmacStatus = DMAC_ENABLE;
00050c  e3a00001          MOV      r0,#1
000510  ea000000          B        |L1.1304|
                  |L1.1300|
;;;588        }
;;;589        else
;;;590        {
;;;591            eDmacStatus = DMAC_DISABLE;
000514  e3a00000          MOV      r0,#0
                  |L1.1304|
;;;592        }
;;;593        return eDmacStatus;
;;;594    }
000518  e12fff1e          BX       lr
;;;595    
                          ENDP

                  vDMAC_SetSourceAddress PROC
;;;598    
;;;599    void vDMAC_SetSourceAddress(dmac_channel_e eDMAChannel, uint32_t u32Address)
00051c  e1a02280          LSL      r2,r0,#5
;;;600    {
;;;601        vSetDMACC0SrcAddr(eDMAChannel, u32Address);
000520  e24225ff          SUB      r2,r2,#0x3fc00000
000524  e24229bd          SUB      r2,r2,#0x2f4000
000528  e5821100          STR      r1,[r2,#0x100]
;;;602    }
00052c  e12fff1e          BX       lr
;;;603    
                          ENDP

                  u32DMAC_GetSourceAddress PROC
;;;606    
;;;607    uint32_t u32DMAC_GetSourceAddress(dmac_channel_e eDMAChannel)
000530  e1a01000          MOV      r1,r0
;;;608    {
;;;609        return u32GetDMACC0SrcAddr(eDMAChannel);
000534  e1a00281          LSL      r0,r1,#5
000538  e24005ff          SUB      r0,r0,#0x3fc00000
00053c  e24009bd          SUB      r0,r0,#0x2f4000
000540  e5900100          LDR      r0,[r0,#0x100]
;;;610    }
000544  e12fff1e          BX       lr
;;;611    
                          ENDP

                  vDMAC_SetDestinationAddress PROC
;;;614    
;;;615    void vDMAC_SetDestinationAddress(dmac_channel_e eDMAChannel, uint32_t u32Address)
000548  e1a02280          LSL      r2,r0,#5
;;;616    {
;;;617        vSetDMACC0DestAddr(eDMAChannel, u32Address);
00054c  e24225ff          SUB      r2,r2,#0x3fc00000
000550  e24229bd          SUB      r2,r2,#0x2f4000
000554  e5821104          STR      r1,[r2,#0x104]
;;;618    }
000558  e12fff1e          BX       lr
;;;619    
                          ENDP

                  u32DMAC_GetDestinationAddress PROC
;;;622    
;;;623    uint32_t u32DMAC_GetDestinationAddress(dmac_channel_e eDMAChannel)
00055c  e1a01000          MOV      r1,r0
;;;624    {
;;;625        return u32GetDMACC0DestAddr(eDMAChannel);
000560  e1a00281          LSL      r0,r1,#5
000564  e24005ff          SUB      r0,r0,#0x3fc00000
000568  e24009bd          SUB      r0,r0,#0x2f4000
00056c  e5900104          LDR      r0,[r0,#0x104]
;;;626    }
000570  e12fff1e          BX       lr
;;;627    
                          ENDP

                  vDMAC_SetLinkListItem PROC
;;;630    
;;;631    void vDMAC_SetLinkListItem(dmac_channel_e eDMAChannel, dmac_linklistitem_st * stLinkListItem)
000574  e5d13004          LDRB     r3,[r1,#4]
;;;632    {
;;;633        vSetDMACC0LLI_LM(eDMAChannel, stLinkListItem->eAHBMasterSelect);
000578  e1a02280          LSL      r2,r0,#5
00057c  e24225ff          SUB      r2,r2,#0x3fc00000
000580  e24229bd          SUB      r2,r2,#0x2f4000
000584  e5922108          LDR      r2,[r2,#0x108]
000588  e7c02013          BFI      r2,r3,#0,#1
00058c  e1a03280          LSL      r3,r0,#5
000590  e24335ff          SUB      r3,r3,#0x3fc00000
000594  e24339bd          SUB      r3,r3,#0x2f4000
000598  e5832108          STR      r2,[r3,#0x108]
;;;634        vSetDMACC0LLI_LLI(eDMAChannel, (stLinkListItem->u32LLIAddress>>2));
00059c  e5912000          LDR      r2,[r1,#0]
0005a0  e1a03122          LSR      r3,r2,#2
0005a4  e1a02280          LSL      r2,r0,#5
0005a8  e24225ff          SUB      r2,r2,#0x3fc00000
0005ac  e24229bd          SUB      r2,r2,#0x2f4000
0005b0  e5922108          LDR      r2,[r2,#0x108]
0005b4  e7df2113          BFI      r2,r3,#2,#30
0005b8  e1a03280          LSL      r3,r0,#5
0005bc  e24335ff          SUB      r3,r3,#0x3fc00000
0005c0  e24339bd          SUB      r3,r3,#0x2f4000
0005c4  e5832108          STR      r2,[r3,#0x108]
;;;635    }
0005c8  e12fff1e          BX       lr
;;;636    
                          ENDP

                  vDMAC_GetLinkListItem PROC
;;;639    
;;;640    void vDMAC_GetLinkListItem(dmac_channel_e eDMAChannel, dmac_linklistitem_st * stLinkListItem)
0005cc  e1a02280          LSL      r2,r0,#5
;;;641    {
;;;642        stLinkListItem->eAHBMasterSelect = (dmac_AHB_master_sel_e)biGetDMACC0LLI_LM(eDMAChannel);
0005d0  e24225ff          SUB      r2,r2,#0x3fc00000
0005d4  e24229bd          SUB      r2,r2,#0x2f4000
0005d8  e5922108          LDR      r2,[r2,#0x108]
0005dc  e2022001          AND      r2,r2,#1
0005e0  e5c12004          STRB     r2,[r1,#4]
;;;643        stLinkListItem->u32LLIAddress    = (uint32_t)biGetDMACC0LLI_LLI(eDMAChannel);
0005e4  e1a02280          LSL      r2,r0,#5
0005e8  e24225ff          SUB      r2,r2,#0x3fc00000
0005ec  e24229bd          SUB      r2,r2,#0x2f4000
0005f0  e5922108          LDR      r2,[r2,#0x108]
0005f4  e1a02122          LSR      r2,r2,#2
0005f8  e5812000          STR      r2,[r1,#0]
;;;644    }
0005fc  e12fff1e          BX       lr
;;;645    
                          ENDP

                  vDMAC_SetControl PROC
;;;648    
;;;649    void vDMAC_SetControl(dmac_channel_e eDMAChannel, dmac_control_st * stControl)
000600  e5d13000          LDRB     r3,[r1,#0]
;;;650    {
;;;651        vSetDMACC0Control_I(eDMAChannel, stControl->eTCInterruptEnable);
000604  e1a02280          LSL      r2,r0,#5
000608  e24225ff          SUB      r2,r2,#0x3fc00000
00060c  e24229bd          SUB      r2,r2,#0x2f4000
000610  e592210c          LDR      r2,[r2,#0x10c]
000614  e7df2f93          BFI      r2,r3,#31,#1
000618  e1a03280          LSL      r3,r0,#5
00061c  e24335ff          SUB      r3,r3,#0x3fc00000
000620  e24339bd          SUB      r3,r3,#0x2f4000
000624  e583210c          STR      r2,[r3,#0x10c]
;;;652        vSetDMACC0Control_Prot(eDMAChannel, stControl->u8Protection);
000628  e5d13001          LDRB     r3,[r1,#1]
00062c  e1a02280          LSL      r2,r0,#5
000630  e24225ff          SUB      r2,r2,#0x3fc00000
000634  e24229bd          SUB      r2,r2,#0x2f4000
000638  e592210c          LDR      r2,[r2,#0x10c]
00063c  e7de2e13          BFI      r2,r3,#28,#3
000640  e1a03280          LSL      r3,r0,#5
000644  e24335ff          SUB      r3,r3,#0x3fc00000
000648  e24339bd          SUB      r3,r3,#0x2f4000
00064c  e583210c          STR      r2,[r3,#0x10c]
;;;653        vSetDMACC0Control_DI(eDMAChannel, stControl->eDstInc);
000650  e5d13002          LDRB     r3,[r1,#2]
000654  e1a02280          LSL      r2,r0,#5
000658  e24225ff          SUB      r2,r2,#0x3fc00000
00065c  e24229bd          SUB      r2,r2,#0x2f4000
000660  e592210c          LDR      r2,[r2,#0x10c]
000664  e7db2d93          BFI      r2,r3,#27,#1
000668  e1a03280          LSL      r3,r0,#5
00066c  e24335ff          SUB      r3,r3,#0x3fc00000
000670  e24339bd          SUB      r3,r3,#0x2f4000
000674  e583210c          STR      r2,[r3,#0x10c]
;;;654        vSetDMACC0Control_SI(eDMAChannel, stControl->eSourceInc);
000678  e5d13003          LDRB     r3,[r1,#3]
00067c  e1a02280          LSL      r2,r0,#5
000680  e24225ff          SUB      r2,r2,#0x3fc00000
000684  e24229bd          SUB      r2,r2,#0x2f4000
000688  e592210c          LDR      r2,[r2,#0x10c]
00068c  e7da2d13          BFI      r2,r3,#26,#1
000690  e1a03280          LSL      r3,r0,#5
000694  e24335ff          SUB      r3,r3,#0x3fc00000
000698  e24339bd          SUB      r3,r3,#0x2f4000
00069c  e583210c          STR      r2,[r3,#0x10c]
;;;655        vSetDMACC0Control_D(eDMAChannel, stControl->eDstAHBMasterSelect);
0006a0  e5d13004          LDRB     r3,[r1,#4]
0006a4  e1a02280          LSL      r2,r0,#5
0006a8  e24225ff          SUB      r2,r2,#0x3fc00000
0006ac  e24229bd          SUB      r2,r2,#0x2f4000
0006b0  e592210c          LDR      r2,[r2,#0x10c]
0006b4  e7d92c93          BFI      r2,r3,#25,#1
0006b8  e1a03280          LSL      r3,r0,#5
0006bc  e24335ff          SUB      r3,r3,#0x3fc00000
0006c0  e24339bd          SUB      r3,r3,#0x2f4000
0006c4  e583210c          STR      r2,[r3,#0x10c]
;;;656        vSetDMACC0Control_S(eDMAChannel, stControl->eSourceAHBMasterSelect);
0006c8  e5d13005          LDRB     r3,[r1,#5]
0006cc  e1a02280          LSL      r2,r0,#5
0006d0  e24225ff          SUB      r2,r2,#0x3fc00000
0006d4  e24229bd          SUB      r2,r2,#0x2f4000
0006d8  e592210c          LDR      r2,[r2,#0x10c]
0006dc  e7d82c13          BFI      r2,r3,#24,#1
0006e0  e1a03280          LSL      r3,r0,#5
0006e4  e24335ff          SUB      r3,r3,#0x3fc00000
0006e8  e24339bd          SUB      r3,r3,#0x2f4000
0006ec  e583210c          STR      r2,[r3,#0x10c]
;;;657        vSetDMACC0Control_DWidth(eDMAChannel, stControl->eDstTransferWidth);
0006f0  e5d13006          LDRB     r3,[r1,#6]
0006f4  e1a02280          LSL      r2,r0,#5
0006f8  e24225ff          SUB      r2,r2,#0x3fc00000
0006fc  e24229bd          SUB      r2,r2,#0x2f4000
000700  e592210c          LDR      r2,[r2,#0x10c]
000704  e7d72a93          BFI      r2,r3,#21,#3
000708  e1a03280          LSL      r3,r0,#5
00070c  e24335ff          SUB      r3,r3,#0x3fc00000
000710  e24339bd          SUB      r3,r3,#0x2f4000
000714  e583210c          STR      r2,[r3,#0x10c]
;;;658        vSetDMACC0Control_SWidth(eDMAChannel, stControl->eSourceTransferWidth);
000718  e5d13007          LDRB     r3,[r1,#7]
00071c  e1a02280          LSL      r2,r0,#5
000720  e24225ff          SUB      r2,r2,#0x3fc00000
000724  e24229bd          SUB      r2,r2,#0x2f4000
000728  e592210c          LDR      r2,[r2,#0x10c]
00072c  e7d42913          BFI      r2,r3,#18,#3
000730  e1a03280          LSL      r3,r0,#5
000734  e24335ff          SUB      r3,r3,#0x3fc00000
000738  e24339bd          SUB      r3,r3,#0x2f4000
00073c  e583210c          STR      r2,[r3,#0x10c]
;;;659        vSetDMACC0Control_DBSize(eDMAChannel, stControl->eDstBurstLength);
000740  e5d13008          LDRB     r3,[r1,#8]
000744  e1a02280          LSL      r2,r0,#5
000748  e24225ff          SUB      r2,r2,#0x3fc00000
00074c  e24229bd          SUB      r2,r2,#0x2f4000
000750  e592210c          LDR      r2,[r2,#0x10c]
000754  e7d12793          BFI      r2,r3,#15,#3
000758  e1a03280          LSL      r3,r0,#5
00075c  e24335ff          SUB      r3,r3,#0x3fc00000
000760  e24339bd          SUB      r3,r3,#0x2f4000
000764  e583210c          STR      r2,[r3,#0x10c]
;;;660        vSetDMACC0Control_SBSize(eDMAChannel, stControl->eSourceBurstLength);
000768  e5d13009          LDRB     r3,[r1,#9]
00076c  e1a02280          LSL      r2,r0,#5
000770  e24225ff          SUB      r2,r2,#0x3fc00000
000774  e24229bd          SUB      r2,r2,#0x2f4000
000778  e592210c          LDR      r2,[r2,#0x10c]
00077c  e7ce2613          BFI      r2,r3,#12,#3
000780  e1a03280          LSL      r3,r0,#5
000784  e24335ff          SUB      r3,r3,#0x3fc00000
000788  e24339bd          SUB      r3,r3,#0x2f4000
00078c  e583210c          STR      r2,[r3,#0x10c]
;;;661        vSetDMACC0Control_TransferSize(eDMAChannel, stControl->u16TransferSize);
000790  e1d130ba          LDRH     r3,[r1,#0xa]
000794  e1a02280          LSL      r2,r0,#5
000798  e24225ff          SUB      r2,r2,#0x3fc00000
00079c  e24229bd          SUB      r2,r2,#0x2f4000
0007a0  e592210c          LDR      r2,[r2,#0x10c]
0007a4  e7cb2013          BFI      r2,r3,#0,#12
0007a8  e1a03280          LSL      r3,r0,#5
0007ac  e24335ff          SUB      r3,r3,#0x3fc00000
0007b0  e24339bd          SUB      r3,r3,#0x2f4000
0007b4  e583210c          STR      r2,[r3,#0x10c]
;;;662    }
0007b8  e12fff1e          BX       lr
;;;663    
                          ENDP

                  vDMAC_SetTransferSize PROC
;;;666    
;;;667    void vDMAC_SetTransferSize(dmac_channel_e eDMAChannel, uint16_t u16TransferSize)
0007bc  e1a02280          LSL      r2,r0,#5
;;;668    {
;;;669        vSetDMACC0Control_TransferSize(eDMAChannel, u16TransferSize);
0007c0  e24225ff          SUB      r2,r2,#0x3fc00000
0007c4  e24229bd          SUB      r2,r2,#0x2f4000
0007c8  e592210c          LDR      r2,[r2,#0x10c]
0007cc  e7cb2011          BFI      r2,r1,#0,#12
0007d0  e1a03280          LSL      r3,r0,#5
0007d4  e24335ff          SUB      r3,r3,#0x3fc00000
0007d8  e24339bd          SUB      r3,r3,#0x2f4000
0007dc  e583210c          STR      r2,[r3,#0x10c]
;;;670    }
0007e0  e12fff1e          BX       lr
;;;671    
                          ENDP

                  u32DMAC_GenerateControlValue PROC
;;;674    
;;;675    uint32_t u32DMAC_GenerateControlValue(dmac_control_st * stControl)
0007e4  e1a01000          MOV      r1,r0
;;;676    {
;;;677        uint32_t u32Value;
;;;678    
;;;679        u32Value = (((uint32_t) (stControl->eTCInterruptEnable)<<31));
0007e8  e5d12000          LDRB     r2,[r1,#0]
0007ec  e1a00f82          LSL      r0,r2,#31
;;;680    
;;;681        u32Value = (((uint32_t)stControl->eTCInterruptEnable)<<31) + ((uint32_t)(stControl->u8Protection)<<28) + (((uint32_t)stControl->eDstInc)<<27) + (((uint32_t)stControl->eSourceInc)<<26) +
0007f0  e5d12000          LDRB     r2,[r1,#0]
0007f4  e1a02f82          LSL      r2,r2,#31
0007f8  e5d13001          LDRB     r3,[r1,#1]
0007fc  e0822e03          ADD      r2,r2,r3,LSL #28
000800  e5d13002          LDRB     r3,[r1,#2]
000804  e0822d83          ADD      r2,r2,r3,LSL #27
000808  e5d13003          LDRB     r3,[r1,#3]
00080c  e0822d03          ADD      r2,r2,r3,LSL #26
000810  e5d13004          LDRB     r3,[r1,#4]
000814  e0822c83          ADD      r2,r2,r3,LSL #25
000818  e5d13005          LDRB     r3,[r1,#5]
00081c  e0822c03          ADD      r2,r2,r3,LSL #24
000820  e5d13006          LDRB     r3,[r1,#6]
000824  e0822a83          ADD      r2,r2,r3,LSL #21
000828  e5d13007          LDRB     r3,[r1,#7]
00082c  e0822903          ADD      r2,r2,r3,LSL #18
000830  e5d13008          LDRB     r3,[r1,#8]
000834  e0822783          ADD      r2,r2,r3,LSL #15
000838  e5d13009          LDRB     r3,[r1,#9]
00083c  e0822603          ADD      r2,r2,r3,LSL #12
000840  e1d130ba          LDRH     r3,[r1,#0xa]
000844  e0820003          ADD      r0,r2,r3
;;;682                   ((uint32_t)(stControl->eDstAHBMasterSelect) <<25) + (((uint32_t)stControl->eSourceAHBMasterSelect)<<24) + (((uint32_t)stControl->eDstTransferWidth)<<21) +
;;;683                   ((uint32_t)(stControl->eSourceTransferWidth)<<18) + ((uint32_t)(stControl->eDstBurstLength)<<15) + (((uint32_t)stControl->eSourceBurstLength)<<12) + stControl->u16TransferSize;
;;;684    
;;;685        return u32Value;
;;;686    }
000848  e12fff1e          BX       lr
;;;687    
                          ENDP

                  boDMAC_GetControl PROC
;;;690    
;;;691    bool_t boDMAC_GetControl(dmac_channel_e eDMAChannel, dmac_control_st * stControl)
00084c  e92d4030          PUSH     {r4,r5,lr}
;;;692    {
000850  e1a02000          MOV      r2,r0
;;;693        bool_t  boResult = C_FALSE;
000854  e3a00000          MOV      r0,#0
;;;694        uint8_t u8Channel;
;;;695        
;;;696        /* read if related DMA channel is enabled */
;;;697        u8Channel = ((uint8_t)biGetDMACEnbldChns_EnabledChannels()) & u8ChannelMask[eDMAChannel];
000858  e59f43fc          LDR      r4,|L1.3164|
00085c  e594401c          LDR      r4,[r4,#0x1c]
000860  e59f53f8          LDR      r5,|L1.3168|
000864  e7d55002          LDRB     r5,[r5,r2]
000868  e0043005          AND      r3,r4,r5
;;;698        /* register data can be read only if channel is disabled: */
;;;699        if (u8Channel == 0U)
00086c  e3530000          CMP      r3,#0
000870  1a000042          BNE      |L1.2432|
;;;700        {
;;;701            stControl->u16TransferSize        = (uint16_t)biGetDMACC0Control_TransferSize(eDMAChannel);
000874  e1a04282          LSL      r4,r2,#5
000878  e24445ff          SUB      r4,r4,#0x3fc00000
00087c  e24449bd          SUB      r4,r4,#0x2f4000
000880  e594410c          LDR      r4,[r4,#0x10c]
000884  e7df461f          BFC      r4,#12,#20
000888  e1c140ba          STRH     r4,[r1,#0xa]
;;;702            stControl->eSourceBurstLength     = (dmac_burst_length_e)biGetDMACC0Control_SBSize(eDMAChannel);
00088c  e1a04282          LSL      r4,r2,#5
000890  e24445ff          SUB      r4,r4,#0x3fc00000
000894  e24449bd          SUB      r4,r4,#0x2f4000
000898  e594410c          LDR      r4,[r4,#0x10c]
00089c  e7e24654          UBFX     r4,r4,#12,#3
0008a0  e5c14009          STRB     r4,[r1,#9]
;;;703            stControl->eDstBurstLength        = (dmac_burst_length_e)biGetDMACC0Control_DBSize(eDMAChannel);
0008a4  e1a04282          LSL      r4,r2,#5
0008a8  e24445ff          SUB      r4,r4,#0x3fc00000
0008ac  e24449bd          SUB      r4,r4,#0x2f4000
0008b0  e594410c          LDR      r4,[r4,#0x10c]
0008b4  e7e247d4          UBFX     r4,r4,#15,#3
0008b8  e5c14008          STRB     r4,[r1,#8]
;;;704            stControl->eSourceTransferWidth   = (dmac_transfer_width_e)biGetDMACC0Control_SWidth(eDMAChannel);
0008bc  e1a04282          LSL      r4,r2,#5
0008c0  e24445ff          SUB      r4,r4,#0x3fc00000
0008c4  e24449bd          SUB      r4,r4,#0x2f4000
0008c8  e594410c          LDR      r4,[r4,#0x10c]
0008cc  e7e24954          UBFX     r4,r4,#18,#3
0008d0  e5c14007          STRB     r4,[r1,#7]
;;;705            stControl->eDstTransferWidth      = (dmac_transfer_width_e)biGetDMACC0Control_DWidth(eDMAChannel);
0008d4  e1a04282          LSL      r4,r2,#5
0008d8  e24445ff          SUB      r4,r4,#0x3fc00000
0008dc  e24449bd          SUB      r4,r4,#0x2f4000
0008e0  e594410c          LDR      r4,[r4,#0x10c]
0008e4  e7e24ad4          UBFX     r4,r4,#21,#3
0008e8  e5c14006          STRB     r4,[r1,#6]
;;;706            stControl->eSourceAHBMasterSelect = (dmac_AHB_master_sel_e)biGetDMACC0Control_S(eDMAChannel);
0008ec  e1a04282          LSL      r4,r2,#5
0008f0  e24445ff          SUB      r4,r4,#0x3fc00000
0008f4  e24449bd          SUB      r4,r4,#0x2f4000
0008f8  e594410c          LDR      r4,[r4,#0x10c]
0008fc  e7e04c54          UBFX     r4,r4,#24,#1
000900  e5c14005          STRB     r4,[r1,#5]
;;;707            stControl->eDstAHBMasterSelect    = (dmac_AHB_master_sel_e)biGetDMACC0Control_D(eDMAChannel);
000904  e1a04282          LSL      r4,r2,#5
000908  e24445ff          SUB      r4,r4,#0x3fc00000
00090c  e24449bd          SUB      r4,r4,#0x2f4000
000910  e594410c          LDR      r4,[r4,#0x10c]
000914  e7e04cd4          UBFX     r4,r4,#25,#1
000918  e5c14004          STRB     r4,[r1,#4]
;;;708            stControl->eSourceInc             = (dmac_address_inc_e)biGetDMACC0Control_SI(eDMAChannel);
00091c  e1a04282          LSL      r4,r2,#5
000920  e24445ff          SUB      r4,r4,#0x3fc00000
000924  e24449bd          SUB      r4,r4,#0x2f4000
000928  e594410c          LDR      r4,[r4,#0x10c]
00092c  e7e04d54          UBFX     r4,r4,#26,#1
000930  e5c14003          STRB     r4,[r1,#3]
;;;709            stControl->eDstInc                = (dmac_address_inc_e)biGetDMACC0Control_DI(eDMAChannel);
000934  e1a04282          LSL      r4,r2,#5
000938  e24445ff          SUB      r4,r4,#0x3fc00000
00093c  e24449bd          SUB      r4,r4,#0x2f4000
000940  e594410c          LDR      r4,[r4,#0x10c]
000944  e7e04dd4          UBFX     r4,r4,#27,#1
000948  e5c14002          STRB     r4,[r1,#2]
;;;710            stControl->u8Protection           = (uint8_t)biGetDMACC0Control_Prot(eDMAChannel);
00094c  e1a04282          LSL      r4,r2,#5
000950  e24445ff          SUB      r4,r4,#0x3fc00000
000954  e24449bd          SUB      r4,r4,#0x2f4000
000958  e594410c          LDR      r4,[r4,#0x10c]
00095c  e7e24e54          UBFX     r4,r4,#28,#3
000960  e5c14001          STRB     r4,[r1,#1]
;;;711            stControl->eTCInterruptEnable     = (dmac_enable_e)biGetDMACC0Control_I(eDMAChannel);
000964  e1a04282          LSL      r4,r2,#5
000968  e24445ff          SUB      r4,r4,#0x3fc00000
00096c  e24449bd          SUB      r4,r4,#0x2f4000
000970  e594410c          LDR      r4,[r4,#0x10c]
000974  e1a04fa4          LSR      r4,r4,#31
000978  e5c14000          STRB     r4,[r1,#0]
;;;712            
;;;713            boResult = C_TRUE;
00097c  e3a00001          MOV      r0,#1
                  |L1.2432|
;;;714        }
;;;715        return boResult;
;;;716    }
000980  e8bd8030          POP      {r4,r5,pc}
;;;717    
                          ENDP

                  vDMAC_SetConfiguration PROC
;;;720    
;;;721    void vDMAC_SetConfiguration(dmac_channel_e eDMAChannel, dmac_config_st * stConfiguration)
000984  e5d13007          LDRB     r3,[r1,#7]
;;;722    {
;;;723        vSetDMACC0Config_SrcPeripherala(eDMAChannel, stConfiguration->u8SourcePeripheral);
000988  e1a02280          LSL      r2,r0,#5
00098c  e24225ff          SUB      r2,r2,#0x3fc00000
000990  e24229bd          SUB      r2,r2,#0x2f4000
000994  e5922110          LDR      r2,[r2,#0x110]
000998  e7c42093          BFI      r2,r3,#1,#4
00099c  e1a03280          LSL      r3,r0,#5
0009a0  e24335ff          SUB      r3,r3,#0x3fc00000
0009a4  e24339bd          SUB      r3,r3,#0x2f4000
0009a8  e5832110          STR      r2,[r3,#0x110]
;;;724        vSetDMACC0Config_DestPeripherala(eDMAChannel, stConfiguration->u8DstPeripheral);
0009ac  e5d13006          LDRB     r3,[r1,#6]
0009b0  e1a02280          LSL      r2,r0,#5
0009b4  e24225ff          SUB      r2,r2,#0x3fc00000
0009b8  e24229bd          SUB      r2,r2,#0x2f4000
0009bc  e5922110          LDR      r2,[r2,#0x110]
0009c0  e7c92313          BFI      r2,r3,#6,#4
0009c4  e1a03280          LSL      r3,r0,#5
0009c8  e24335ff          SUB      r3,r3,#0x3fc00000
0009cc  e24339bd          SUB      r3,r3,#0x2f4000
0009d0  e5832110          STR      r2,[r3,#0x110]
;;;725        vSetDMACC0Config_FlowCntrl(eDMAChannel, stConfiguration->eFlowControl);
0009d4  e5d13005          LDRB     r3,[r1,#5]
0009d8  e1a02280          LSL      r2,r0,#5
0009dc  e24225ff          SUB      r2,r2,#0x3fc00000
0009e0  e24229bd          SUB      r2,r2,#0x2f4000
0009e4  e5922110          LDR      r2,[r2,#0x110]
0009e8  e7cd2593          BFI      r2,r3,#11,#3
0009ec  e1a03280          LSL      r3,r0,#5
0009f0  e24335ff          SUB      r3,r3,#0x3fc00000
0009f4  e24339bd          SUB      r3,r3,#0x2f4000
0009f8  e5832110          STR      r2,[r3,#0x110]
;;;726        vSetDMACC0Config_IE(eDMAChannel, stConfiguration->eMaskErrorInterrupt);
0009fc  e5d13004          LDRB     r3,[r1,#4]
000a00  e1a02280          LSL      r2,r0,#5
000a04  e24225ff          SUB      r2,r2,#0x3fc00000
000a08  e24229bd          SUB      r2,r2,#0x2f4000
000a0c  e5922110          LDR      r2,[r2,#0x110]
000a10  e7ce2713          BFI      r2,r3,#14,#1
000a14  e1a03280          LSL      r3,r0,#5
000a18  e24335ff          SUB      r3,r3,#0x3fc00000
000a1c  e24339bd          SUB      r3,r3,#0x2f4000
000a20  e5832110          STR      r2,[r3,#0x110]
;;;727        vSetDMACC0Config_ITC(eDMAChannel, stConfiguration->eMaskTCInterrupt);
000a24  e5d13003          LDRB     r3,[r1,#3]
000a28  e1a02280          LSL      r2,r0,#5
000a2c  e24225ff          SUB      r2,r2,#0x3fc00000
000a30  e24229bd          SUB      r2,r2,#0x2f4000
000a34  e5922110          LDR      r2,[r2,#0x110]
000a38  e7cf2793          BFI      r2,r3,#15,#1
000a3c  e1a03280          LSL      r3,r0,#5
000a40  e24335ff          SUB      r3,r3,#0x3fc00000
000a44  e24339bd          SUB      r3,r3,#0x2f4000
000a48  e5832110          STR      r2,[r3,#0x110]
;;;728        vSetDMACC0Config_L(eDMAChannel, stConfiguration->eLockedTransfer);
000a4c  e5d13002          LDRB     r3,[r1,#2]
000a50  e1a02280          LSL      r2,r0,#5
000a54  e24225ff          SUB      r2,r2,#0x3fc00000
000a58  e24229bd          SUB      r2,r2,#0x2f4000
000a5c  e5922110          LDR      r2,[r2,#0x110]
000a60  e7d02813          BFI      r2,r3,#16,#1
000a64  e1a03280          LSL      r3,r0,#5
000a68  e24335ff          SUB      r3,r3,#0x3fc00000
000a6c  e24339bd          SUB      r3,r3,#0x2f4000
000a70  e5832110          STR      r2,[r3,#0x110]
;;;729        vSetDMACC0Config_H(eDMAChannel, stConfiguration->eHalt);
000a74  e5d13000          LDRB     r3,[r1,#0]
000a78  e1a02280          LSL      r2,r0,#5
000a7c  e24225ff          SUB      r2,r2,#0x3fc00000
000a80  e24229bd          SUB      r2,r2,#0x2f4000
000a84  e5922110          LDR      r2,[r2,#0x110]
000a88  e7d22913          BFI      r2,r3,#18,#1
000a8c  e1a03280          LSL      r3,r0,#5
000a90  e24335ff          SUB      r3,r3,#0x3fc00000
000a94  e24339bd          SUB      r3,r3,#0x2f4000
000a98  e5832110          STR      r2,[r3,#0x110]
;;;730    }
000a9c  e12fff1e          BX       lr
;;;731    
                          ENDP

                  u32DMAC_GenerateConfigurationValue PROC
;;;734    
;;;735    uint32_t u32DMAC_GenerateConfigurationValue(dmac_config_st * stConfiguration)
000aa0  e1a01000          MOV      r1,r0
;;;736    {
;;;737        uint32_t u32Value;
;;;738    
;;;739        u32Value = (((uint32_t)stConfiguration->eHalt)<<18) + (((uint32_t)stConfiguration->eActive)<<17) + (((uint32_t)stConfiguration->eLockedTransfer)<<16) +
000aa4  e5d12000          LDRB     r2,[r1,#0]
000aa8  e1a02902          LSL      r2,r2,#18
000aac  e5d13001          LDRB     r3,[r1,#1]
000ab0  e0822883          ADD      r2,r2,r3,LSL #17
000ab4  e5d13002          LDRB     r3,[r1,#2]
000ab8  e0822803          ADD      r2,r2,r3,LSL #16
000abc  e5d13003          LDRB     r3,[r1,#3]
000ac0  e0822783          ADD      r2,r2,r3,LSL #15
000ac4  e5d13004          LDRB     r3,[r1,#4]
000ac8  e0822703          ADD      r2,r2,r3,LSL #14
000acc  e5d13005          LDRB     r3,[r1,#5]
000ad0  e0822583          ADD      r2,r2,r3,LSL #11
000ad4  e5d13006          LDRB     r3,[r1,#6]
000ad8  e0822303          ADD      r2,r2,r3,LSL #6
000adc  e5d13007          LDRB     r3,[r1,#7]
000ae0  e0820083          ADD      r0,r2,r3,LSL #1
;;;740                   ((uint32_t)(stConfiguration->eMaskTCInterrupt)<<15) + ((uint32_t)(stConfiguration->eMaskErrorInterrupt)<<14) + ((uint32_t)(stConfiguration->eFlowControl)<<11) +
;;;741                   ((uint32_t)(stConfiguration->u8DstPeripheral)<<6) + ((uint32_t)(stConfiguration->u8SourcePeripheral)<<1);
;;;742    
;;;743        return u32Value;
;;;744    }
000ae4  e12fff1e          BX       lr
;;;745    
                          ENDP

                  vDMAC_GetConfiguration PROC
;;;748    
;;;749    void vDMAC_GetConfiguration(dmac_channel_e eDMAChannel, dmac_config_st * stConfiguration)
000ae8  e1a02280          LSL      r2,r0,#5
;;;750    {
;;;751        stConfiguration->u8SourcePeripheral  = (uint8_t)biGetDMACC0Config_SrcPeripherala(eDMAChannel);
000aec  e24225ff          SUB      r2,r2,#0x3fc00000
000af0  e24229bd          SUB      r2,r2,#0x2f4000
000af4  e5922110          LDR      r2,[r2,#0x110]
000af8  e7e320d2          UBFX     r2,r2,#1,#4
000afc  e5c12007          STRB     r2,[r1,#7]
;;;752        stConfiguration->u8DstPeripheral     = (uint8_t)biGetDMACC0Config_DestPeripherala(eDMAChannel);
000b00  e1a02280          LSL      r2,r0,#5
000b04  e24225ff          SUB      r2,r2,#0x3fc00000
000b08  e24229bd          SUB      r2,r2,#0x2f4000
000b0c  e5922110          LDR      r2,[r2,#0x110]
000b10  e7e32352          UBFX     r2,r2,#6,#4
000b14  e5c12006          STRB     r2,[r1,#6]
;;;753        stConfiguration->eFlowControl        = (dmac_flow_control_e)biGetDMACC0Config_FlowCntrl(eDMAChannel);
000b18  e1a02280          LSL      r2,r0,#5
000b1c  e24225ff          SUB      r2,r2,#0x3fc00000
000b20  e24229bd          SUB      r2,r2,#0x2f4000
000b24  e5922110          LDR      r2,[r2,#0x110]
000b28  e7e225d2          UBFX     r2,r2,#11,#3
000b2c  e5c12005          STRB     r2,[r1,#5]
;;;754        stConfiguration->eMaskErrorInterrupt = (dmac_enable_e)biGetDMACC0Config_IE(eDMAChannel);
000b30  e1a02280          LSL      r2,r0,#5
000b34  e24225ff          SUB      r2,r2,#0x3fc00000
000b38  e24229bd          SUB      r2,r2,#0x2f4000
000b3c  e5922110          LDR      r2,[r2,#0x110]
000b40  e7e02752          UBFX     r2,r2,#14,#1
000b44  e5c12004          STRB     r2,[r1,#4]
;;;755        stConfiguration->eMaskTCInterrupt    = (dmac_enable_e)biGetDMACC0Config_ITC(eDMAChannel);
000b48  e1a02280          LSL      r2,r0,#5
000b4c  e24225ff          SUB      r2,r2,#0x3fc00000
000b50  e24229bd          SUB      r2,r2,#0x2f4000
000b54  e5922110          LDR      r2,[r2,#0x110]
000b58  e7e027d2          UBFX     r2,r2,#15,#1
000b5c  e5c12003          STRB     r2,[r1,#3]
;;;756        stConfiguration->eLockedTransfer     = (dmac_enable_e)biGetDMACC0Config_L(eDMAChannel);
000b60  e1a02280          LSL      r2,r0,#5
000b64  e24225ff          SUB      r2,r2,#0x3fc00000
000b68  e24229bd          SUB      r2,r2,#0x2f4000
000b6c  e5922110          LDR      r2,[r2,#0x110]
000b70  e7e02852          UBFX     r2,r2,#16,#1
000b74  e5c12002          STRB     r2,[r1,#2]
;;;757        stConfiguration->eActive             = (dmac_enable_e)biGetDMACC0Config_A(eDMAChannel);
000b78  e1a02280          LSL      r2,r0,#5
000b7c  e24225ff          SUB      r2,r2,#0x3fc00000
000b80  e24229bd          SUB      r2,r2,#0x2f4000
000b84  e5922110          LDR      r2,[r2,#0x110]
000b88  e7e028d2          UBFX     r2,r2,#17,#1
000b8c  e5c12001          STRB     r2,[r1,#1]
;;;758        stConfiguration->eHalt               = (dmac_enable_e)biGetDMACC0Config_H(eDMAChannel);
000b90  e1a02280          LSL      r2,r0,#5
000b94  e24225ff          SUB      r2,r2,#0x3fc00000
000b98  e24229bd          SUB      r2,r2,#0x2f4000
000b9c  e5922110          LDR      r2,[r2,#0x110]
000ba0  e7e02952          UBFX     r2,r2,#18,#1
000ba4  e5c12000          STRB     r2,[r1,#0]
;;;759    }
000ba8  e12fff1e          BX       lr
;;;760    
                          ENDP

                  vDMAC_HoldChannel PROC
;;;763    
;;;764    void vDMAC_HoldChannel(dmac_channel_e eDMAChannel, dmac_halt_e eHalt)
000bac  e1a02280          LSL      r2,r0,#5
;;;765    {
;;;766        vSetDMACC0Config_H(eDMAChannel, eHalt);
000bb0  e24225ff          SUB      r2,r2,#0x3fc00000
000bb4  e24229bd          SUB      r2,r2,#0x2f4000
000bb8  e5922110          LDR      r2,[r2,#0x110]
000bbc  e7d22911          BFI      r2,r1,#18,#1
000bc0  e1a03280          LSL      r3,r0,#5
000bc4  e24335ff          SUB      r3,r3,#0x3fc00000
000bc8  e24339bd          SUB      r3,r3,#0x2f4000
000bcc  e5832110          STR      r2,[r3,#0x110]
;;;767    }
000bd0  e12fff1e          BX       lr
;;;768    
                          ENDP

                  vDMAC_StartTransfer PROC
;;;771    
;;;772    void vDMAC_StartTransfer(dmac_channel_e eDMAChannel)
000bd4  e1a01280          LSL      r1,r0,#5
;;;773    {
;;;774        vSetDMACC0Config_E(eDMAChannel, 0x1);
000bd8  e24115ff          SUB      r1,r1,#0x3fc00000
000bdc  e24119bd          SUB      r1,r1,#0x2f4000
000be0  e5911110          LDR      r1,[r1,#0x110]
000be4  e3c11001          BIC      r1,r1,#1
000be8  e2811001          ADD      r1,r1,#1
000bec  e1a02280          LSL      r2,r0,#5
000bf0  e24225ff          SUB      r2,r2,#0x3fc00000
000bf4  e24229bd          SUB      r2,r2,#0x2f4000
000bf8  e5821110          STR      r1,[r2,#0x110]
;;;775    }
000bfc  e12fff1e          BX       lr
;;;776    
                          ENDP

                  vDMAC_StopTransfer PROC
;;;778    
;;;779    void vDMAC_StopTransfer(dmac_channel_e eDMAChannel)
000c00  e1a01280          LSL      r1,r0,#5
;;;780    {
;;;781        vSetDMACC0Config_E(eDMAChannel, 0x0);
000c04  e24115ff          SUB      r1,r1,#0x3fc00000
000c08  e24119bd          SUB      r1,r1,#0x2f4000
000c0c  e5911110          LDR      r1,[r1,#0x110]
000c10  e3c11001          BIC      r1,r1,#1
000c14  e1a02280          LSL      r2,r0,#5
000c18  e24225ff          SUB      r2,r2,#0x3fc00000
000c1c  e24229bd          SUB      r2,r2,#0x2f4000
000c20  e5821110          STR      r1,[r2,#0x110]
;;;782    }
000c24  e12fff1e          BX       lr
;;;783    
                          ENDP

                  eDMACTransferStarted PROC
;;;785    
;;;786    dmac_enable_e eDMACTransferStarted(dmac_channel_e eDMAChannel)
000c28  e1a01000          MOV      r1,r0
;;;787    {
;;;788        return (dmac_enable_e)biGetDMACC0Config_E(eDMAChannel);
000c2c  e1a00281          LSL      r0,r1,#5
000c30  e24005ff          SUB      r0,r0,#0x3fc00000
000c34  e24009bd          SUB      r0,r0,#0x2f4000
000c38  e5900110          LDR      r0,[r0,#0x110]
000c3c  e2000001          AND      r0,r0,#1
;;;789    }
000c40  e12fff1e          BX       lr
;;;790    
                          ENDP

                  |L1.3140|
                          DCD      au8LLDD_DMAC_C_REVISION
                  |L1.3144|
                          DCD      au8LLDD_DMAC_C_TAG
                  |L1.3148|
                          DCD      au8LLDD_DMAC_H_REVISION
                  |L1.3152|
                          DCD      au8LLDD_DMAC_H_TAG
                  |L1.3156|
                          DCD      au8LLDD_DMAC_IO_H_REVISION
                  |L1.3160|
                          DCD      au8LLDD_DMAC_IO_H_TAG
                  |L1.3164|
                          DCD      0xc010c000
                  |L1.3168|
                          DCD      u8ChannelMask

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_DMAC_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e313620          DCB      0x2e,0x31,0x36,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_DMAC_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_DMAC_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313820          DCB      0x2e,0x31,0x38,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_DMAC_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_DMAC_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313120          DCB      0x2e,0x31,0x31,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_DMAC_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
                  u8ChannelMask
00006c  01020408          DCB      0x01,0x02,0x04,0x08
000070  10204080          DCB      0x10,0x20,0x40,0x80
