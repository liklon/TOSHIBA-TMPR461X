<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\out\rom2ram.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\out\rom2ram.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050169: Last Updated: Tue Sep 20 14:57:41 2016
<BR><P>
<H3>Maximum Stack Usage =        600 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vShowTotalCurrent &rArr; vGfLayerRotateBlendBitmapFull &rArr; vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[267]">unhandled_exception</a>
 <LI><a href="#[268]">undef_exception</a>
 <LI><a href="#[269]">svccall_exception</a>
 <LI><a href="#[26a]">pref_exception</a>
 <LI><a href="#[26b]">databort_exception</a>
 <LI><a href="#[26c]">irq_exception</a>
 <LI><a href="#[26d]">fiq_exception</a>
 <LI><a href="#[263]">vASM_Init8WordsInBurst</a>
 <LI><a href="#[26f]">vASM_Copy8WordsInBurst</a>
 <LI><a href="#[270]">vASM_Copy4WordsInBurstMem2FiFo</a>
 <LI><a href="#[271]">vASM_Copy4WordsInBurstFiFo2Mem</a>
 <LI><a href="#[272]">vASM_Copy8WordsInBurstMem2FiFo</a>
 <LI><a href="#[273]">vASM_Copy8WordsInBurstFiFo2Mem</a>
 <LI><a href="#[265]">vASM_Copy_all_areas</a>
 <LI><a href="#[266]">vASM_Init_zi</a>
 <LI><a href="#[512]">u32CR4_GetPMN</a>
 <LI><a href="#[513]">vCR4_PMNConfig</a>
 <LI><a href="#[514]">vCR4_SetCntDivider</a>
 <LI><a href="#[1b8]">vCR4_EnablePMU</a>
 <LI><a href="#[515]">vCR4_DisablePMU</a>
 <LI><a href="#[1b9]">vCR4_EnableCCNT</a>
 <LI><a href="#[516]">vCR4_DisableCCNT</a>
 <LI><a href="#[517]">vCR4_EnablePMN</a>
 <LI><a href="#[518]">vCR4_DisablePMN</a>
 <LI><a href="#[519]">u32CR4_ReadCCNT</a>
 <LI><a href="#[51a]">u32CR4_ReadPMN</a>
 <LI><a href="#[51b]">u32CR4_ReadFlags</a>
 <LI><a href="#[51c]">vCR4_WriteFlags</a>
 <LI><a href="#[51d]">vCR4_EnableCCNTIrq</a>
 <LI><a href="#[51e]">vCR4_DisableCCNTIrq</a>
 <LI><a href="#[51f]">vCR4_EnablePmnIrq</a>
 <LI><a href="#[520]">vCR4_DisablePMNIrq</a>
 <LI><a href="#[521]">vCR4_ResetPMN</a>
 <LI><a href="#[1ba]">vCR4_ResetCCNT</a>
 <LI><a href="#[522]">vCR4_PMUSoftwareIncrement</a>
 <LI><a href="#[523]">vCR4_EnablePMUUserAccess</a>
 <LI><a href="#[524]">vCR4_DisablePMUUserAccess</a>
 <LI><a href="#[198]">asm_copy_word</a>
 <LI><a href="#[53a]">asm_copy_hword</a>
 <LI><a href="#[53b]">asm_copy_byte</a>
 <LI><a href="#[156]">__DSB</a>
 <LI><a href="#[53c]">__ISB</a>
 <LI><a href="#[19c]">asm_enable_core_int</a>
 <LI><a href="#[53d]">asm_disable_core_int</a>
 <LI><a href="#[19d]">asm_enable_core_fast_int</a>
 <LI><a href="#[53e]">asm_disable_core_fast_int</a>
 <LI><a href="#[19b]">asm_enable_core_vic_port</a>
 <LI><a href="#[53f]">asm_disable_core_vic_port</a>
 <LI><a href="#[540]">write_burst4</a>
 <LI><a href="#[184]">read_burst4</a>
 <LI><a href="#[541]">write_burst8</a>
 <LI><a href="#[186]">read_burst8</a>
 <LI><a href="#[542]">word_write</a>
 <LI><a href="#[182]">word_read</a>
 <LI><a href="#[543]">hword_write</a>
 <LI><a href="#[544]">hword_read</a>
 <LI><a href="#[545]">byte_write</a>
 <LI><a href="#[546]">byte_read</a>
 <LI><a href="#[2b]">Reset_Hndlr</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[b]">fputc</a> from main.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[1da]">vADCISR_Func</a> from icons.o(.text) referenced from icons.o(.text)
 <LI><a href="#[1eb]">vCanRxInterrupt</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[1ff]">vCanStatusInterrupt</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[1f3]">vCanTxInterrupt</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[1e3]">vISREncoder</a> from buttons.o(.text) referenced from buttons.o(.text)
 <LI><a href="#[2a]">vRunIconFunction</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[c]">vSetIcons</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[e]">vSetSpeedNeedle</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[25]">vShowAlphaChange</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1f]">vShowBatteryDropT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1e]">vShowBatteryDropV</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[16]">vShowBatteryLife</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[21]">vShowBatteryMaxT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1c]">vShowBatteryMaxV</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[22]">vShowBatteryMinT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1d]">vShowBatteryMinV</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[26]">vShowBatteryT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[15]">vShowBatteryVoltage</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[20]">vShowChargeTime</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1b]">vShowControlT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[29]">vShowCurrentTime</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[27]">vShowDCACT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[d]">vShowInit</a> from myconfig.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[11]">vShowMotorPower</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[1a]">vShowMotorT</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[10]">vShowRotateSpeed</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[13]">vShowSOCNumber</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[f]">vShowSpeedNumber</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[19]">vShowTorque</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[14]">vShowTotalCurrent</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[17]">vShowTotalDistance</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[12]">vShowTotalVoltage</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[18]">vShowTripDistance</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[28]">vShowUPST</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[23]">vShowkpa</a> from icons.o(.text) referenced from myconfig.o(.data)
 <LI><a href="#[24]">vShowkpb</a> from icons.o(.text) referenced from myconfig.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[267]"></a>unhandled_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unhandled_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unhandled_exception
</UL>

<P><STRONG><a name="[268]"></a>undef_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undef_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;undef_exception
</UL>

<P><STRONG><a name="[269]"></a>svccall_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svccall_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svccall_exception
</UL>

<P><STRONG><a name="[26a]"></a>pref_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pref_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pref_exception
</UL>

<P><STRONG><a name="[26b]"></a>databort_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databort_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databort_exception
</UL>

<P><STRONG><a name="[26c]"></a>irq_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_exception
</UL>

<P><STRONG><a name="[26d]"></a>fiq_exception</STRONG> (ARM, 0 bytes, Stack size unknown bytes, excp_hndlr_keil.o(exc_handler), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fiq_exception
</UL>

<P><STRONG><a name="[14b]"></a>vDMC_Init</STRONG> (ARM, 556 bytes, Stack size 0 bytes, dmc.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_ExitDeviceMode (via Veneer)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_Cfg
</UL>

<P><STRONG><a name="[26e]"></a>boGetMemDeviceParams</STRONG> (ARM, 532 bytes, Stack size 0 bytes, dmc_cfg.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_Cfg
</UL>

<P><STRONG><a name="[264]"></a>vDMC_Cfg</STRONG> (ARM, 44 bytes, Stack size 80 bytes, dmc_cfg.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vDMC_Cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_Init
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boGetMemDeviceParams
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Hndlr
</UL>

<P><STRONG><a name="[263]"></a>vASM_Init8WordsInBurst</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Hndlr
</UL>

<P><STRONG><a name="[26f]"></a>vASM_Copy8WordsInBurst</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED)

<P><STRONG><a name="[270]"></a>vASM_Copy4WordsInBurstMem2FiFo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED)

<P><STRONG><a name="[271]"></a>vASM_Copy4WordsInBurstFiFo2Mem</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED)

<P><STRONG><a name="[272]"></a>vASM_Copy8WordsInBurstMem2FiFo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED)

<P><STRONG><a name="[273]"></a>vASM_Copy8WordsInBurstFiFo2Mem</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_burst_access_keil.o(init), UNUSED)

<P><STRONG><a name="[265]"></a>vASM_Copy_all_areas</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rom_copy_keil.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Hndlr
</UL>

<P><STRONG><a name="[266]"></a>vASM_Init_zi</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rom_copy_keil.o(init), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Hndlr
</UL>

<P><STRONG><a name="[2c]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[206]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[274]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[275]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[276]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[277]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[278]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[279]"></a>vGf_Gfunctions_GetVersion</STRONG> (ARM, 80 bytes, Stack size 20 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>vGfBuffDrawTriangle</STRONG> (ARM, 288 bytes, Stack size 56 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrw_DrawTriangle
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerDrawTriangle
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawTriangleSort
</UL>

<P><STRONG><a name="[33]"></a>vGfBuffDrawLine</STRONG> (ARM, 236 bytes, Stack size 56 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDrw_DrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerDrawLine
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawCircleWithEndCaps
</UL>

<P><STRONG><a name="[36]"></a>vGfWaitForVSync</STRONG> (ARM, 80 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGfWaitForVSync
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GDC_GetStatVSync
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBufferSync
</UL>

<P><STRONG><a name="[38]"></a>u32GfGetVSyncStatus</STRONG> (ARM, 28 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GDC_GetStatVSync
</UL>

<P><STRONG><a name="[39]"></a>eGfGetGAStatus</STRONG> (ARM, 40 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GA_GetStatus
</UL>

<P><STRONG><a name="[3b]"></a>vGfWaitForGA</STRONG> (ARM, 28 bytes, Stack size 8 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGfWaitForGA
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8GA_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListWaitToComplete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBufferSync
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBuffer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[3c]"></a>vGfWaitForPNGDecode</STRONG> (ARM, 32 bytes, Stack size 8 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGfWaitForPNGDecode
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ePNG_GetStreamPhaseStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[109]"></a>vGfInitMWStateVariable</STRONG> (ARM, 168 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[27a]"></a>vGfSetNeedleNumber</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[3e]"></a>u32GfGetNeedleNumber</STRONG> (ARM, 24 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[27b]"></a>vGfSetPaletteStream</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[27c]"></a>vGfSetStateRedChanProtect</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>vGfSetStateGreenChanProtect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>vGfSetStateBlueChanProtect</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>vGfSetStateColorChanProtect</STRONG> (ARM, 36 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>stGfGetStateColorChanProtect</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>vGfSetStateAlphaChanProtect</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>eGfGetStateAlphaChanProtect</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>eGfSetStateRedChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>eGfGetStateRedChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[285]"></a>eGfSetStateGreenChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>eGfGetStateGreenChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[287]"></a>eGfSetStateBlueChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[288]"></a>eGfGetStateBlueChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[289]"></a>eGfSetStateAlphaChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>eGfGetStateAlphaChanFading</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>vGfSetStateFilter</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28c]"></a>eGfGetStateFilter</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>vGfSetStateBlendOrder</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28e]"></a>eGfGetStateBlendOrder</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>vGfSetStateFadeMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[290]"></a>eGfGetStateFadeMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[291]"></a>vGfSetStateFadingFactor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[292]"></a>u8GfGetStateFadingFactor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[293]"></a>vGfSetStateTransparentColor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[294]"></a>eGfGetStateTransparentColor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[295]"></a>vGfSetStateTransparencyValues</STRONG> (ARM, 28 bytes, Stack size 12 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[296]"></a>stGfGetStateTransparencyValues</STRONG> (ARM, 40 bytes, Stack size 12 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>vGfSetStateAlphaValues</STRONG> (ARM, 28 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>stGfGetStateAlphaValues</STRONG> (ARM, 40 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>vGfSetStateTransformationMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29a]"></a>eGfGetStateTransformationMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>vGfSetStateTransformationPredefinedColor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>eGfGetStateTransformationPredefinedColor</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29d]"></a>vGfSetStateRasterOperationModeEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>eGfGetStateRasterOperationModeEnable</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>vGfSetStateRasterOperationMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>eGfGetStateRasterOperationMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>vGfSetStateRasterOperationValue</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>eGfGetStateRasterOperationValue</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>vGfSetStateClipWindow</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>eGfGetStateClipWindow</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>vGfSetStateClipWindowCoordinates</STRONG> (ARM, 28 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>vGfSetSubRes</STRONG> (ARM, 124 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[2a6]"></a>f32GfGetSubRes_Position</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>u32GfGetSubRes_Position</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[2a7]"></a>f32GfGetSubRes_CenterPosition</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>u32GfGetSubRes_CenterPosition</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[42]"></a>vGfBuffFillArea</STRONG> (ARM, 272 bytes, Stack size 56 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = vGfBuffFillArea &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteFillRGB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerFillArea
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[44]"></a>vGfBuffBlitBitmapRLE16</STRONG> (ARM, 328 bytes, Stack size 72 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRLEI_RGB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapRLE16
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[46]"></a>vGfBuffBlitBitmapRLE24</STRONG> (ARM, 328 bytes, Stack size 72 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRLEI_RGB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapRLE24
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[47]"></a>vGfBuffBlitBitmapRLE24A</STRONG> (ARM, 292 bytes, Stack size 64 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRLEI_RGBA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapRLE24A
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[49]"></a>vGfBuffBlitBitmapRLE32</STRONG> (ARM, 292 bytes, Stack size 64 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRLEI_RGBA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapRLE32
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[4a]"></a>vGfBuffBlitBitmapFull</STRONG> (ARM, 708 bytes, Stack size 72 bytes, gfunctions.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = vGfBuffBlitBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRGB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32PNG_SetUpStream
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForPNGDecode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapFull
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>

<P><STRONG><a name="[4d]"></a>u32GfBuffBlitBitmapFull</STRONG> (ARM, 368 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE32
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24A
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE16
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlitBitmapFull
</UL>

<P><STRONG><a name="[4e]"></a>vGfBuffBlitBitmapPart</STRONG> (ARM, 836 bytes, Stack size 72 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRGB
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32PNG_SetUpStream
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForPNGDecode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitBitmapPart
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapPart
</UL>

<P><STRONG><a name="[4f]"></a>u32GfBuffBlitBitmapPart</STRONG> (ARM, 204 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlitBitmapPart
</UL>

<P><STRONG><a name="[50]"></a>vGfBuffBlendFillArea</STRONG> (ARM, 568 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendFillRGBA
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendFillRGB
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendFillArea
</UL>

<P><STRONG><a name="[53]"></a>vGfBuffBlendBitmapRLE16</STRONG> (ARM, 424 bytes, Stack size 80 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = vGfBuffBlendBitmapRLE16 &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendRLEI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapRLE16
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[55]"></a>vGfBuffBlendBitmapRLE24</STRONG> (ARM, 424 bytes, Stack size 80 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = vGfBuffBlendBitmapRLE24 &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendRLEI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapRLE24
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[56]"></a>vGfBuffBlendBitmapRLE24A</STRONG> (ARM, 444 bytes, Stack size 80 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = vGfBuffBlendBitmapRLE24A &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendRLEI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapRLE24A
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[57]"></a>vGfBuffBlendBitmapRLE32</STRONG> (ARM, 424 bytes, Stack size 80 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = vGfBuffBlendBitmapRLE32 &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_BlendRLEI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapRLE32
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[58]"></a>vGfBuffBlendBitmapFull</STRONG> (ARM, 804 bytes, Stack size 80 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32PNG_SetUpStream
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32Blit_BlendRGB
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForPNGDecode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapFull
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[5a]"></a>u32GfBuffBlendBitmapFull</STRONG> (ARM, 368 bytes, Stack size 24 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE32
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24A
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE16
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapFull
</UL>

<P><STRONG><a name="[5b]"></a>vGfBuffBlendBitmapPart</STRONG> (ARM, 932 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32PNG_SetUpStream
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32Blit_BlendRGB
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForPNGDecode
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendBitmapPart
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapPart
</UL>

<P><STRONG><a name="[5c]"></a>u32GfBuffBlendBitmapPart</STRONG> (ARM, 204 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapPart
</UL>

<P><STRONG><a name="[68]"></a>vGfBuffRotateBitmapFull</STRONG> (ARM, 524 bytes, Stack size 88 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBitmapFull
</UL>

<P><STRONG><a name="[6f]"></a>vGfBuffRotateBitmapPart</STRONG> (ARM, 624 bytes, Stack size 96 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBitmapPart
</UL>

<P><STRONG><a name="[71]"></a>vGfBuffRotateBitmapOptimized</STRONG> (ARM, 1704 bytes, Stack size 136 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via BLX)
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBitmapOptimized
</UL>

<P><STRONG><a name="[75]"></a>vGfBuffRotateBlendBitmapFull</STRONG> (ARM, 644 bytes, Stack size 96 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBlendBitmapFull
</UL>

<P><STRONG><a name="[77]"></a>vGfBuffRotateBlendBitmapPart</STRONG> (ARM, 716 bytes, Stack size 104 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBlendBitmapPart
</UL>

<P><STRONG><a name="[79]"></a>vGfBuffRotateNeedleFill</STRONG> (ARM, 3656 bytes, Stack size 144 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteFillRGB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxYCoordinate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxXCoordinate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinYCoordinate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinXCoordinate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateNeedleFill
</UL>

<P><STRONG><a name="[7e]"></a>vGfBuffRotateNeedle</STRONG> (ARM, 4916 bytes, Stack size 208 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRGB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32Blit_BlendRGB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxYCoordinate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxXCoordinate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinYCoordinate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinXCoordinate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateNeedle
</UL>

<P><STRONG><a name="[7f]"></a>vGfBuffRotateNeedleTipandBaseFill</STRONG> (ARM, 5620 bytes, Stack size 192 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteFillRGB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxYCoordinate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxXCoordinate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinYCoordinate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinXCoordinate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateNeedleTipandBaseFill
</UL>

<P><STRONG><a name="[81]"></a>vGfBuffRotateNeedleTipandBase</STRONG> (ARM, 7344 bytes, Stack size 256 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_OverwriteRGB
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32Blit_BlendRGB
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxYCoordinate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMaxXCoordinate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinYCoordinate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetMinXCoordinate
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateNeedleTipandBase
</UL>

<P><STRONG><a name="[82]"></a>vGfBuffShearFull</STRONG> (ARM, 340 bytes, Stack size 88 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerShearFull
</UL>

<P><STRONG><a name="[84]"></a>vGfBuffShearBlendFull</STRONG> (ARM, 464 bytes, Stack size 96 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerShearBlendFull
</UL>

<P><STRONG><a name="[86]"></a>vGfBuffScaleFull</STRONG> (ARM, 348 bytes, Stack size 88 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerScaleFull
</UL>

<P><STRONG><a name="[88]"></a>vGfBuffScaleBlendFull</STRONG> (ARM, 456 bytes, Stack size 96 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerScaleBlendFull
</UL>

<P><STRONG><a name="[8a]"></a>vGfBuffPerspectiveBlitFull</STRONG> (ARM, 400 bytes, Stack size 128 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerPerspectiveBlitFull
</UL>

<P><STRONG><a name="[8c]"></a>vGfBuffPerspectiveBlendFull</STRONG> (ARM, 508 bytes, Stack size 144 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerPerspectiveBlendFull
</UL>

<P><STRONG><a name="[8e]"></a>vGfBuffTransformationFull</STRONG> (ARM, 380 bytes, Stack size 64 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransf_ConfigTransfOp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerTransformationFull
</UL>

<P><STRONG><a name="[90]"></a>vGfBuffTransformationFullOptimized</STRONG> (ARM, 1172 bytes, Stack size 112 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransf_ConfigTransfOp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerTransformationFullOptimized
</UL>

<P><STRONG><a name="[91]"></a>vGfBuffTransformationBlendFull</STRONG> (ARM, 472 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTransf_ConfigTransfBlendOp
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerTransformationBlendFull
</UL>

<P><STRONG><a name="[93]"></a>vGfBuffDrawCircle</STRONG> (ARM, 2668 bytes, Stack size 152 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetSubRes_CenterPosition
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetSubRes_Position
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetSubRes
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawTriangle
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawCircleWithEndCaps
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawTriangleSort
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerDrawCircle
</UL>

<P><STRONG><a name="[9e]"></a>vGfBuffDrawPolygon</STRONG> (ARM, 244 bytes, Stack size 56 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawTriangleSort
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerDrawPolygon
</UL>

<P><STRONG><a name="[9f]"></a>vGfInsertList</STRONG> (ARM, 88 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pstGfListGetWrite
</UL>

<P><STRONG><a name="[2a8]"></a>vGfViewport</STRONG> (ARM, 36 bytes, Stack size 20 bytes, gfunctions.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>vGfFrustum</STRONG> (ARM, 524 bytes, Stack size 192 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>

<P><STRONG><a name="[b2]"></a>vGfMatrixMode</STRONG> (ARM, 12 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
</UL>

<P><STRONG><a name="[a8]"></a>vGfLoadIdentity</STRONG> (ARM, 176 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
</UL>

<P><STRONG><a name="[a9]"></a>vGfLoadIP</STRONG> (ARM, 208 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
</UL>

<P><STRONG><a name="[aa]"></a>vGfTranslate</STRONG> (ARM, 200 bytes, Stack size 160 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
</UL>

<P><STRONG><a name="[ab]"></a>vGfScale</STRONG> (ARM, 184 bytes, Stack size 160 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
</UL>

<P><STRONG><a name="[ac]"></a>vGfRotate</STRONG> (ARM, 1144 bytes, Stack size 248 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f64GETMATRIX
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via BLX)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>

<P><STRONG><a name="[af]"></a>iGfProject</STRONG> (ARM, 128 bytes, Stack size 8 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject
</UL>

<P><STRONG><a name="[b0]"></a>iGfUnProject</STRONG> (ARM, 560 bytes, Stack size 376 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMVMUL4x4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
</UL>

<P><STRONG><a name="[b1]"></a>vGfSetIP</STRONG> (ARM, 440 bytes, Stack size 120 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfScale
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfTranslate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLoadIP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLoadIdentity
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfMatrixMode
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
</UL>

<P><STRONG><a name="[b3]"></a>vGfBuffBlitElement</STRONG> (ARM, 288 bytes, Stack size 104 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlitElement
</UL>

<P><STRONG><a name="[b5]"></a>vGfBuffBlendElement</STRONG> (ARM, 396 bytes, Stack size 120 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerBlendElement
</UL>

<P><STRONG><a name="[b7]"></a>vGfLayerFillArea</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = vGfLayerFillArea &rArr; vGfBuffFillArea &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffFillArea
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIcons
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearScreen
</UL>

<P><STRONG><a name="[b8]"></a>u32GfLayerBlitBitmapFull</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[b9]"></a>vGfLayerBlitBitmapFull</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[ba]"></a>vGfLayerBlitBitmapPart</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
</UL>

<P><STRONG><a name="[bb]"></a>u32GfLayerBlitBitmapPart</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlitBitmapPart
</UL>

<P><STRONG><a name="[bc]"></a>vGfLayerBlitBitmapRLE16</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE16
</UL>

<P><STRONG><a name="[bd]"></a>vGfLayerBlitBitmapRLE24</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24
</UL>

<P><STRONG><a name="[be]"></a>vGfLayerBlitBitmapRLE24A</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24A
</UL>

<P><STRONG><a name="[bf]"></a>vGfLayerBlitBitmapRLE32</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE32
</UL>

<P><STRONG><a name="[c0]"></a>vGfLayerBlendFillArea</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendFillArea
</UL>

<P><STRONG><a name="[c1]"></a>u32GfLayerBlendBitmapFull</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowPRNDS
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stShowString
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[c2]"></a>vGfLayerBlendBitmapFull</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[c3]"></a>u32GfLayerBlendBitmapPart</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfBuffBlendBitmapPart
</UL>

<P><STRONG><a name="[c4]"></a>vGfLayerBlendBitmapPart</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
</UL>

<P><STRONG><a name="[c5]"></a>vGfLayerBlendBitmapRLE16</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE16
</UL>

<P><STRONG><a name="[c6]"></a>vGfLayerBlendBitmapRLE24</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24
</UL>

<P><STRONG><a name="[c7]"></a>vGfLayerBlendBitmapRLE24A</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24A
</UL>

<P><STRONG><a name="[c8]"></a>vGfLayerBlendBitmapRLE32</STRONG> (ARM, 44 bytes, Stack size 24 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE32
</UL>

<P><STRONG><a name="[c9]"></a>vGfLayerRotateBitmapFull</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull
</UL>

<P><STRONG><a name="[ca]"></a>vGfLayerRotateBitmapPart</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart
</UL>

<P><STRONG><a name="[cb]"></a>vGfLayerRotateBitmapOptimized</STRONG> (ARM, 56 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized
</UL>

<P><STRONG><a name="[cc]"></a>vGfLayerRotateBlendBitmapFull</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = vGfLayerRotateBlendBitmapFull &rArr; vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSpeedNeedle
</UL>

<P><STRONG><a name="[cd]"></a>vGfLayerRotateBlendBitmapPart</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart
</UL>

<P><STRONG><a name="[ce]"></a>vGfLayerRotateNeedleFill</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
</UL>

<P><STRONG><a name="[cf]"></a>vGfLayerRotateNeedle</STRONG> (ARM, 56 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
</UL>

<P><STRONG><a name="[d0]"></a>vGfLayerRotateNeedleTipandBaseFill</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
</UL>

<P><STRONG><a name="[d1]"></a>vGfLayerRotateNeedleTipandBase</STRONG> (ARM, 56 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
</UL>

<P><STRONG><a name="[d2]"></a>vGfLayerShearFull</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearFull
</UL>

<P><STRONG><a name="[d3]"></a>vGfLayerShearBlendFull</STRONG> (ARM, 52 bytes, Stack size 40 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearBlendFull
</UL>

<P><STRONG><a name="[d4]"></a>vGfLayerScaleFull</STRONG> (ARM, 60 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleFull
</UL>

<P><STRONG><a name="[d5]"></a>vGfLayerScaleBlendFull</STRONG> (ARM, 60 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleBlendFull
</UL>

<P><STRONG><a name="[d6]"></a>vGfLayerPerspectiveBlitFull</STRONG> (ARM, 96 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlitFull
</UL>

<P><STRONG><a name="[d7]"></a>vGfLayerPerspectiveBlendFull</STRONG> (ARM, 96 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlendFull
</UL>

<P><STRONG><a name="[d8]"></a>vGfLayerTransformationFull</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFull
</UL>

<P><STRONG><a name="[d9]"></a>vGfLayerTransformationFullOptimized</STRONG> (ARM, 56 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFullOptimized
</UL>

<P><STRONG><a name="[da]"></a>vGfLayerTransformationBlendFull</STRONG> (ARM, 52 bytes, Stack size 32 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationBlendFull
</UL>

<P><STRONG><a name="[db]"></a>vGfLayerDrawLine</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawLine
</UL>

<P><STRONG><a name="[dc]"></a>vGfLayerDrawTriangle</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawTriangle
</UL>

<P><STRONG><a name="[dd]"></a>vGfLayerDrawCircle</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[de]"></a>vGfLayerDrawPolygon</STRONG> (ARM, 36 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawPolygon
</UL>

<P><STRONG><a name="[df]"></a>vGfLayerBlitElement</STRONG> (ARM, 28 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitElement
</UL>

<P><STRONG><a name="[e0]"></a>vGfLayerBlendElement</STRONG> (ARM, 28 bytes, Stack size 16 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendElement
</UL>

<P><STRONG><a name="[2a9]"></a>vGf_Graphics_Init_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, graphics_init.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>vGfInitGDC0</STRONG> (ARM, 508 bytes, Stack size 32 bytes, graphics_init.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vGfInitGDC0 &rArr; vGfSetLayer &rArr; i32GDC_SetDataFormat &rArr; vUpdateDCR_Special &rArr; vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_GDC0
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRegisterLayers
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SyncConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_Switch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetSyncDir
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetPolHDisp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetLayerOrder
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDotClkPol
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDitheringMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDispConfigType
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetBgrColor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SelDotClkSrc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCCR_EnableGDC0Interface
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDisplayStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDisplaySize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_SetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[f5]"></a>vGfInitGDC1</STRONG> (ARM, 512 bytes, Stack size 32 bytes, graphics_init.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vGfInitGDC1 &rArr; vGfSetLayer &rArr; i32GDC_SetDataFormat &rArr; vUpdateDCR_Special &rArr; vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRegisterLayers
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SyncConfig
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_Switch
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetSyncDir
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetPolHDisp
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetLayerOrder
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDotClkPol
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDitheringMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDispConfigType
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetBgrColor
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SelDotClkSrc
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCCR_SetGDCSynchronisation
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCCR_EnableGDC1Interface
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDisplayStart
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDisplaySize
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_SetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[f8]"></a>vGfInitFG</STRONG> (ARM, 120 bytes, Stack size 8 bytes, graphics_init.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vGfInitFG &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_SetScalingFactors
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_SetOutputMode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_SetInputMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_SetInputCropp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_SetCaptureBuffers
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_FrameGrabberEnable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_EnableMeasurements
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_CroppingEnable
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vFG_ConfigureFgSignal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[102]"></a>vGfInitGA</STRONG> (ARM, 100 bytes, Stack size 264 bytes, graphics_init.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_ReadAheadEnable
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_Enable
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boDrw_SetFilterCoefDrawEngine
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[106]"></a>vGfInitGfxMiddleWare</STRONG> (ARM, 116 bytes, Stack size 16 bytes, graphics_init.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = vGfInitGfxMiddleWare &rArr; vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetEarlyWriteResponse
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPNG_Init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitMWStateVariable
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitGraphicsSystem
</UL>

<P><STRONG><a name="[2aa]"></a>vGf_Layer_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>vGfRegisterLayers</STRONG> (ARM, 2256 bytes, Stack size 0 bytes, layer.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[f0]"></a>vGfSetLayer</STRONG> (ARM, 444 bytes, Stack size 32 bytes, layer.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = vGfSetLayer &rArr; i32GDC_SetDataFormat &rArr; vUpdateDCR_Special &rArr; vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetLayerStart
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetLayerSize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDataFormat
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetCommonAlpha
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_FrameBuffConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[110]"></a>vGfShowLayer</STRONG> (ARM, 32 bytes, Stack size 16 bytes, layer.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vGfShowLayer &rArr; i32GDC_LayerEnable &rArr; vUpdateDCR_HighWord_Special
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_LayerEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
</UL>

<P><STRONG><a name="[112]"></a>vGfHideLayer</STRONG> (ARM, 32 bytes, Stack size 16 bytes, layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_LayerEnable
</UL>

<P><STRONG><a name="[113]"></a>vGfPositionLayer</STRONG> (ARM, 88 bytes, Stack size 24 bytes, layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetLayerStart
</UL>

<P><STRONG><a name="[114]"></a>vGfLayerSwitchBuffer</STRONG> (ARM, 96 bytes, Stack size 32 bytes, layer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetLayerStartAddr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
</UL>

<P><STRONG><a name="[116]"></a>vGfLayerSwitchBufferSync</STRONG> (ARM, 104 bytes, Stack size 32 bytes, layer.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vGfLayerSwitchBufferSync &rArr; i32GDC_SetLayerStartAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetLayerStartAddr
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForVSync
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[2ab]"></a>uiGfGetDispLayerAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[2ac]"></a>uiGfGetWriteLayerAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[2ad]"></a>uiGfGetDispLayerWidth</STRONG> (ARM, 12 bytes, Stack size 0 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[2ae]"></a>uiGfGetWriteLayerWidth</STRONG> (ARM, 12 bytes, Stack size 0 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>eGfGetWriteLayerFormat</STRONG> (ARM, 12 bytes, Stack size 0 bytes, layer.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>vGf_Listmngr_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, listmngr.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>vGfListInit</STRONG> (ARM, 56 bytes, Stack size 8 bytes, listmngr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGfListInit
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_ResetList
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[118]"></a>vGfStartListExecution</STRONG> (ARM, 80 bytes, Stack size 8 bytes, listmngr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_SetCmdListAddr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_ResetList
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_CloseList
</UL>

<P><STRONG><a name="[74]"></a>vGfListExecute</STRONG> (ARM, 84 bytes, Stack size 8 bytes, listmngr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vGfListExecute &rArr; vGA_CloseList
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_SetCmdListAddr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_ResetList
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_CloseList
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFullOptimized
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowPRNDS
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stShowString
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSpeedNeedle
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIcons
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearScreen
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>

<P><STRONG><a name="[11b]"></a>vGfListResetAll</STRONG> (ARM, 32 bytes, Stack size 8 bytes, listmngr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGA_ResetList
</UL>

<P><STRONG><a name="[2b1]"></a>pstGfListGetExec</STRONG> (ARM, 12 bytes, Stack size 0 bytes, listmngr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>pstGfListGetWrite</STRONG> (ARM, 12 bytes, Stack size 0 bytes, listmngr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInsertList
</UL>

<P><STRONG><a name="[11c]"></a>vGfListWaitToComplete</STRONG> (ARM, 12 bytes, Stack size 8 bytes, listmngr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vGfListWaitToComplete &rArr; vGfWaitForGA
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>

<P><STRONG><a name="[2b2]"></a>vRotLib_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, rotation.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>vRotLib_CalculateTransformationMatrix_Rotate</STRONG> (ARM, 372 bytes, Stack size 64 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = vRotLib_CalculateTransformationMatrix_Rotate &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
</UL>

<P><STRONG><a name="[122]"></a>vRotLib_CalculateTransformationMatrix_Shear</STRONG> (ARM, 404 bytes, Stack size 56 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
</UL>

<P><STRONG><a name="[123]"></a>vRotLib_CalculateTransformationMatrix_Scale</STRONG> (ARM, 120 bytes, Stack size 32 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
</UL>

<P><STRONG><a name="[140]"></a>vRotLib_CheckForOverlap</STRONG> (ARM, 152 bytes, Stack size 20 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vRotLib_CheckForOverlap
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
</UL>

<P><STRONG><a name="[134]"></a>round</STRONG> (ARM, 100 bytes, Stack size 24 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor (via BLX)
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
</UL>

<P><STRONG><a name="[6e]"></a>vRotLib_Rotate</STRONG> (ARM, 212 bytes, Stack size 88 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull
</UL>

<P><STRONG><a name="[70]"></a>vRotLib_Rotate_Part</STRONG> (ARM, 256 bytes, Stack size 104 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart
</UL>

<P><STRONG><a name="[76]"></a>vRotLib_RotateBlend</STRONG> (ARM, 220 bytes, Stack size 88 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull
</UL>

<P><STRONG><a name="[78]"></a>vRotLib_RotateBlend_Part</STRONG> (ARM, 256 bytes, Stack size 104 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart
</UL>

<P><STRONG><a name="[83]"></a>vRotLib_Shear</STRONG> (ARM, 316 bytes, Stack size 120 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearFull
</UL>

<P><STRONG><a name="[85]"></a>vRotLib_ShearBlend</STRONG> (ARM, 388 bytes, Stack size 128 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearBlendFull
</UL>

<P><STRONG><a name="[87]"></a>vRotLib_Scale</STRONG> (ARM, 416 bytes, Stack size 128 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Scale
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DOUBLEABS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleFull
</UL>

<P><STRONG><a name="[89]"></a>vRotLib_ScaleBlend</STRONG> (ARM, 488 bytes, Stack size 136 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Scale
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DOUBLEABS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleBlendFull
</UL>

<P><STRONG><a name="[8b]"></a>vRotLib_Perspective</STRONG> (ARM, 2808 bytes, Stack size 704 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_Y
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_X
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlitFull
</UL>

<P><STRONG><a name="[8d]"></a>vRotLib_PerspectiveBlend</STRONG> (ARM, 2940 bytes, Stack size 712 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_Y
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_X
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlendFull
</UL>

<P><STRONG><a name="[b4]"></a>vRotLib_PerspectiveOGL</STRONG> (ARM, 1612 bytes, Stack size 624 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinates
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateCorrectClipWindow
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitElement
</UL>

<P><STRONG><a name="[b6]"></a>vRotLib_PerspectiveBlendOGL</STRONG> (ARM, 1684 bytes, Stack size 632 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRot_RotateBlendMatrix
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForOverlap
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CheckForNegativeCoordinatesBlend
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateCorrectClipWindow
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendElement
</UL>

<P><STRONG><a name="[2b3]"></a>vADC_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>i32ADC_InputChannelSelection</STRONG> (ARM, 108 bytes, Stack size 8 bytes, adc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32ADC_InputChannelSelection
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[2b4]"></a>vADC_CompareInputChannelSelection</STRONG> (ARM, 40 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>vADC_AdcConversionConfig</STRONG> (ARM, 176 bytes, Stack size 12 bytes, adc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vADC_AdcConversionConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[2b5]"></a>vADC_ApplyReset</STRONG> (ARM, 44 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>vADC_StartConversion</STRONG> (ARM, 28 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[2b6]"></a>vADC_WaitForAdcCompletion</STRONG> (ARM, 72 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2b7]"></a>vADC_AdcHpConversionConfig</STRONG> (ARM, 56 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2b8]"></a>i32ADC_CompareConfig</STRONG> (ARM, 192 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2b9]"></a>i32ADC_SetCompareValue</STRONG> (ARM, 68 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2ba]"></a>i32ADC_WaitForCompareCompletion</STRONG> (ARM, 100 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>i8ADC_ReadResult</STRONG> (ARM, 96 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i8ADC_ReadResult
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vADCISR_Func
</UL>

<P><STRONG><a name="[2bb]"></a>i8ADC_ReadHighPriorityResult</STRONG> (ARM, 88 bytes, Stack size 8 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>eADC_GetProcessStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2bd]"></a>eADC_GetEventsCount</STRONG> (ARM, 16 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[2be]"></a>vBlit_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, blit.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>vBlit_SetClippWnd</STRONG> (ARM, 176 bytes, Stack size 20 bytes, blit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vBlit_SetClippWnd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eHandleClipWindowBlit
</UL>

<P><STRONG><a name="[4c]"></a>vBlit_OverwriteRGB</STRONG> (ARM, 944 bytes, Stack size 24 bytes, blit.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vBlit_OverwriteRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[45]"></a>vBlit_OverwriteRLEI_RGB</STRONG> (ARM, 948 bytes, Stack size 24 bytes, blit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE16
</UL>

<P><STRONG><a name="[48]"></a>vBlit_OverwriteRLEI_RGBA</STRONG> (ARM, 652 bytes, Stack size 24 bytes, blit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE32
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24A
</UL>

<P><STRONG><a name="[43]"></a>vBlit_OverwriteFillRGB</STRONG> (ARM, 560 bytes, Stack size 24 bytes, blit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vBlit_OverwriteFillRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffFillArea
</UL>

<P><STRONG><a name="[59]"></a>i32Blit_BlendRGB</STRONG> (ARM, 1580 bytes, Stack size 36 bytes, blit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i32Blit_BlendRGB
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
</UL>

<P><STRONG><a name="[54]"></a>vBlit_BlendRLEI</STRONG> (ARM, 2248 bytes, Stack size 32 bytes, blit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vBlit_BlendRLEI
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE32
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24A
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE16
</UL>

<P><STRONG><a name="[51]"></a>vBlit_BlendFillRGB</STRONG> (ARM, 876 bytes, Stack size 28 bytes, blit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendFillArea
</UL>

<P><STRONG><a name="[52]"></a>vBlit_BlendFillRGBA</STRONG> (ARM, 824 bytes, Stack size 28 bytes, blit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendFillArea
</UL>

<P><STRONG><a name="[2bf]"></a>vCCR_GetVersion</STRONG> (ARM, 80 bytes, Stack size 20 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>i32CCR_EnableModuleClock</STRONG> (ARM, 1556 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32CCR_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[2c0]"></a>i32CCR_GetEnabledModuleClock</STRONG> (ARM, 768 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>i32CCR_SetClockFreq</STRONG> (ARM, 1832 bytes, Stack size 12 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i32CCR_SetClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[2c1]"></a>i32CCR_SelectClockType</STRONG> (ARM, 892 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>vCCR_SetPllClockStabilizationCompareValue</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c3]"></a>eCCR_ReadClockStability</STRONG> (ARM, 256 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c4]"></a>i32CCR_GenerateReset</STRONG> (ARM, 200 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>i32CCR_SetDeviceMode</STRONG> (ARM, 584 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c6]"></a>i32CCR_EnableInterrupt</STRONG> (ARM, 192 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c7]"></a>u32CCR_GetInterruptStatusAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c8]"></a>i32CCR_GetInterruptStatusSingle</STRONG> (ARM, 192 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2c9]"></a>vCCR_ClearInterruptsAll</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>i32CCR_ClearInterruptSingle</STRONG> (ARM, 200 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2cb]"></a>eCCR_GetCurrentDeviceMode</STRONG> (ARM, 184 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2cc]"></a>vCCR_ConfigureSSCG</STRONG> (ARM, 172 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2cd]"></a>vCCR_SetWDTAlarmType</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ce]"></a>vCCR_EnableBitErrorInjectionInRAM</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>vCCR_SetPositionOfBitErrorInjectionInRAM</STRONG> (ARM, 72 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>vCCR_SetCANMode</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[2d0]"></a>vCCR_SetECCMode</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d1]"></a>i32CCR_SetTBIODirection</STRONG> (ARM, 436 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d2]"></a>vCCR_SetInputForComplexTimer4</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d3]"></a>vCCR_SetInputForComplexTimer5</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>vCCR_EnableGDC0Interface</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[f7]"></a>vCCR_EnableGDC1Interface</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
</UL>

<P><STRONG><a name="[2d4]"></a>vCCR_EnableGDCPanelInterface</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>vCCR_SetGDCSynchronisation</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
</UL>

<P><STRONG><a name="[2d5]"></a>i32CCR_SetNORAddressMask</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d6]"></a>i32CCR_SetNORAddressMatch</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>i32CCR_SetNANDAddressMask</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d8]"></a>i32CCR_SetNANDAddressMatch</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2d9]"></a>vCCR_SetNORChipSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2da]"></a>vCCR_SetNANDChipSelect</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2db]"></a>i32CCR_EnableSRAMBitErrorInspection</STRONG> (ARM, 244 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>i32CCR_SetSRAMBitErrorInspectionConfiguration</STRONG> (ARM, 644 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2dd]"></a>vCCR_ClearWDTAlarm</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2de]"></a>vCCR_ClearErrorIrgFlagOfBackupRAM</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>vCCR_ClearWarningIrgFlagOfBackupRAM</STRONG> (ARM, 44 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>i32CCR_ClearErrorIrgFlagOfSRAM</STRONG> (ARM, 312 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>i32CCR_ClearWarningIrgFlagOfSRAM</STRONG> (ARM, 312 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e2]"></a>i32CCR_IssueSynchronPulseToCTimer</STRONG> (ARM, 200 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e3]"></a>eCCR_GetWDTAlarmStatusBit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>eCCR_GetIRQErrorFlafForBackupRAM</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>eCCR_GetIRQWarningFlafForBackupRAM</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e6]"></a>u8CCR_GetPosOfBitErrorInBackupRAM</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e7]"></a>eCCR_GetLastCheckResultForBackupRAM</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e8]"></a>eCCR_GetDebuggerCR4PowerDownRequestStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2e9]"></a>i32CCR_GetSRAMIrgErrorCondition</STRONG> (ARM, 192 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ea]"></a>i32CCR_GetSRAMIrgWarningCondition</STRONG> (ARM, 204 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2eb]"></a>i32CCR_GetSRAMPositionOfBitError</STRONG> (ARM, 204 bytes, Stack size 12 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>i32CCR_GetSRAMLastCheckResult</STRONG> (ARM, 208 bytes, Stack size 12 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>eCCR_GetDeviceVersion</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>eCCR_GetSIPFlashSize</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ef]"></a>eCCR_GeCR4DebugStatus</STRONG> (ARM, 36 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>i32CCR_EnableR4DebugPort</STRONG> (ARM, 116 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>i32CCR_SetVRegCurrentTrim</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>i32CCR_SetVRegRefVoltageTrim</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>i32CCR_SetVRegTemperatureTrim</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f4]"></a>i32CCR_SetOscAdjustment</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f5]"></a>i32CCR_SetThresholdPowerGoodSensing</STRONG> (ARM, 68 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>i32CCR_SetAlarmComparatorThreshold</STRONG> (ARM, 104 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>vCCR_EnableAlarm</STRONG> (ARM, 76 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>i32CCR_EnableClockSupervisor</STRONG> (ARM, 156 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2f9]"></a>vCCR_EnableOSC10MClockSupervisorOutputResetFunction</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>vCCR_EnableOSC32KHz</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>vCCR_ConfigureSmcIOLevel</STRONG> (ARM, 40 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>i32CCR_SetClockStabilizationCompareValue</STRONG> (ARM, 152 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>u16CCR_GetBootOptions</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2fe]"></a>u32CCR_GetSystemIntStatusAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>eCCR_GetSystemIntStatusSingle</STRONG> (ARM, 324 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[300]"></a>i32CCR_ClearSystemIntStatusSingle</STRONG> (ARM, 400 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[301]"></a>i32CCR_EnableECCInterrupt</STRONG> (ARM, 140 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>u8CCR_GetDeviceModesAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[303]"></a>eCCR_GetDeviceModesSingle</STRONG> (ARM, 156 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[304]"></a>i32CCR_EnableWakeupSource</STRONG> (ARM, 460 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[305]"></a>i32CCR_SetWakeupAttribute</STRONG> (ARM, 460 bytes, Stack size 8 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[306]"></a>u16CCR_GetWakeupSourceInterruptAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[307]"></a>eCCR_GetWakeupSourceInterruptSingle</STRONG> (ARM, 300 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[308]"></a>i32CCR_ClearWakeupInterruptSource</STRONG> (ARM, 632 bytes, Stack size 0 bytes, ccr.o(.text), UNUSED)

<P><STRONG><a name="[309]"></a>vDMC_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>vDMC_SetDirectCommand</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_MemoryDeviceInit
</UL>

<P><STRONG><a name="[144]"></a>vDMC_MemoryDeviceInit</STRONG> (ARM, 64 bytes, Stack size 4 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_SetDirectCommand
</UL>

<P><STRONG><a name="[149]"></a>vDMC_SetExternalMemCommand</STRONG> (ARM, 48 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_ExitDeviceMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_EnterDeviceMode
</UL>

<P><STRONG><a name="[148]"></a>eDMC_GetStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_ExitDeviceMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_EnterDeviceMode
</UL>

<P><STRONG><a name="[147]"></a>vDMC_SetMemCntrlCommand</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_ExitDeviceMode
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32DMC_EnterDeviceMode
</UL>

<P><STRONG><a name="[146]"></a>i32DMC_EnterDeviceMode</STRONG> (ARM, 456 bytes, Stack size 20 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_SetMemCntrlCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDMC_GetStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_SetExternalMemCommand
</UL>

<P><STRONG><a name="[14a]"></a>i32DMC_ExitDeviceMode</STRONG> (ARM, 432 bytes, Stack size 20 bytes, dmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_SetMemCntrlCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDMC_GetStatus
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_SetExternalMemCommand
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_Init (via Veneer)
</UL>

<P><STRONG><a name="[30a]"></a>vDMC_GetFixedConfig</STRONG> (ARM, 116 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[30b]"></a>vDMC_SetChipNumber</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[30c]"></a>vDMC_SetBankAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[30d]"></a>vDMC_SetMemoryAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[30e]"></a>vDMC_SetMemConfig</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[30f]"></a>u32DMC_GetMemConfig</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[310]"></a>vDMC_SetMemConfigActiveChips</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[311]"></a>eDMC_GetMemConfigActiveChips</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[312]"></a>vDMC_SetMemConfigQoS</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[313]"></a>eDMC_GetMemConfigQoS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[314]"></a>vDMC_SetMemConfigBurst</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[315]"></a>eDMC_GetMemConfigBurst</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[316]"></a>vDMC_SetMemConfigRowAddr</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>eDMC_GetMemConfigRowAddr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[318]"></a>vDMC_SetMemConfigColAddr</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[319]"></a>eDMC_GetMemConfigColAddr</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>vDMC_SetMemConfigStopClk</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31b]"></a>eDMC_GetMemConfigStopClk</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31c]"></a>vDMC_SetMemConfigAutoPowerDown</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31d]"></a>eDMC_GetMemConfigAutoPowerDown</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31e]"></a>vDMC_SetMemConfigAutoPreCharge</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>eDMC_GetMemConfigAutoPreCharge</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>vDMC_SetMemConfigPwrDownPrd</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[321]"></a>u8DMC_GetMemConfigPwrDownPrd</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[322]"></a>vDMC_SetRefreshPeriod</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[323]"></a>u16DMC_GetRefreshPeriod</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>vDMC_SetCASLatency</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[325]"></a>u8DMC_GetCASLatency</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[326]"></a>vDMC_SetCASHalfCycle</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[327]"></a>eDMC_GetCASHalfCycle</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[328]"></a>vDMC_SetDQSTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>u8DMC_GetDQSTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32a]"></a>vDMC_SetModeRegTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32b]"></a>u8DMC_GetModeRegTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32c]"></a>vDMC_SetActiveToPrechargeTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>u8DMC_GetActiveToPrechargeTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32e]"></a>vDMC_SetActiveToActiveTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[32f]"></a>u8DMC_GetActiveToActiveTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[330]"></a>vDMC_SetActiveToRWTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[331]"></a>u8DMC_GetActiveToRWTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>vDMC_SetScheduleRCD</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[333]"></a>u8DMC_GetScheduleRCD</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[334]"></a>vDMC_Set_T_RCD</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[335]"></a>u8DMC_Get_T_RCD</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[336]"></a>vDMC_SetAutoRefreshTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[337]"></a>u16DMC_GetAutoRefreshTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[338]"></a>vDMC_SetScheduleRFC</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[339]"></a>u8DMC_GetScheduleRFC</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33a]"></a>vDMC_Set_T_RFC</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33b]"></a>u8DMC_Get_T_RFC</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33c]"></a>vDMC_SetPrechargeTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33d]"></a>u8DMC_GetPrechargeTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33e]"></a>vDMC_SetScheduleRP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[33f]"></a>u8DMC_GetScheduleRP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[340]"></a>vDMC_Set_T_RP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[341]"></a>u8DMC_Get_T_RP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[342]"></a>vDMC_SetActiveDiffBankTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[343]"></a>u8DMC_GetActiveDiffBankTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[344]"></a>vDMC_SetWriteToPrechargeTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[345]"></a>u8DMC_GetWriteToPrechargeTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>vDMC_SetWriteToReadTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>u8DMC_GetWriteToReadTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>vDMC_SetExitPowerDownTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[349]"></a>u8DMC_GetExitPowerDownTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34a]"></a>vDMC_SetExitSelfRefreshTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>u8DMC_GetExitSelfRefreshTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34c]"></a>vDMC_SetSelfRefreshTiming</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34d]"></a>u8DMC_GetSelfRefreshTiming</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34e]"></a>vDMC_SetMemConfig2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>u32DMC_GetMemConfig2</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[350]"></a>vDMC_SetMemCfg2ReadDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[351]"></a>u8DMC_GetMemCfg2ReadDelay</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[352]"></a>vDMC_SetMemCfg2MemProtocol</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[353]"></a>eDMC_GetMemCfg2MemProtocol</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[354]"></a>vDMC_SetMemCfg2MemWidth</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[355]"></a>eDMC_GetMemCfg2MemWidth</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[356]"></a>vDMC_SetMemCfg2CkeInit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[357]"></a>eDMC_GetMemCfg2CkeInit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[358]"></a>vDMC_SetMemCfg2DqmInit</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[359]"></a>eDMC_GetMemCfg2DqmInit</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35a]"></a>vDMC_SetMemConfig3</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>u32DMC_GetMemConfig3</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>vDMC_SetMemCfg3PreScale</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35d]"></a>u16DMC_GetMemCfg3PreScale</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>vDMC_SetMemCfg3MaxRefsCmds</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>u8DMC_GetMemCfg3MaxRefsCmds</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>vDMC_SetReadTransferDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>eDMC_GetReadTransferDelay</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[362]"></a>vDMC_SetIdConfig</STRONG> (ARM, 1096 bytes, Stack size 12 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[363]"></a>vDMC_GetIdConfig</STRONG> (ARM, 992 bytes, Stack size 8 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[364]"></a>vDMC_SetChipConfig</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>u32DMC_GetChipConfig</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>vDMC_SetChipConfigAddrFmt</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[367]"></a>eDMC_GetChipConfigAddrFmt</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>vDMC_SetChipConfigAddrMatch</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[369]"></a>u8DMC_GetChipConfigAddrMatch</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36a]"></a>vDMC_SetChipConfigAddrMask</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>u8DMC_GetChipConfigAddrMask</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36c]"></a>eDMC_GetUserStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36d]"></a>vDMC_SetUserConfig</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>vDMC_SetUserConfigGearRatio0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[36f]"></a>vDMC_SetUserConfigGearRatio1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>vDMC_SetUserConfig1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[371]"></a>vDMC_SetUserConfig1GearRatio3</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[372]"></a>vDMC_SetUserConfig1UseMinDelay</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[373]"></a>vDMC_SetUserConfig1ClkModeChange</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[374]"></a>vDMC_SetUserConfig1SignalEn</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[375]"></a>vDMC_SetUserConfig1GearRatio2</STRONG> (ARM, 24 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED)

<P><STRONG><a name="[108]"></a>vSetEarlyWriteResponse</STRONG> (ARM, 60 bytes, Stack size 0 bytes, dmc.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[376]"></a>vDrw_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[377]"></a>vDrw_SetMemDest</STRONG> (ARM, 64 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[378]"></a>vDrw_SetMemDim</STRONG> (ARM, 116 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[379]"></a>vDrw_SetColorRGB16</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37a]"></a>vDrw_SetColorRGBA32</STRONG> (ARM, 68 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37b]"></a>vDrw_SetBgColorRGBA32</STRONG> (ARM, 68 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37c]"></a>vDrw_SetBgColorRGB16</STRONG> (ARM, 72 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37d]"></a>vDrw_SetLineStart</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>vDrw_SetLineEnd</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[37f]"></a>vDrw_SetLineThickness</STRONG> (ARM, 76 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[380]"></a>vDrw_SetTriangle1</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>vDrw_SetTriangle2</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[382]"></a>vDrw_SetTriangle3</STRONG> (ARM, 108 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[383]"></a>vDrw_SetClippWnd</STRONG> (ARM, 216 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>vDrw_SetLineCmd</STRONG> (ARM, 300 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[385]"></a>vDrw_SetTriangleCmd</STRONG> (ARM, 380 bytes, Stack size 20 bytes, draw.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>vDrw_DrawLine</STRONG> (ARM, 1276 bytes, Stack size 28 bytes, draw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawLine
</UL>

<P><STRONG><a name="[2f]"></a>vDrw_DrawTriangle</STRONG> (ARM, 1432 bytes, Stack size 28 bytes, draw.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawTriangle
</UL>

<P><STRONG><a name="[105]"></a>boDrw_SetFilterCoefDrawEngine</STRONG> (ARM, 40 bytes, Stack size 0 bytes, draw.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
</UL>

<P><STRONG><a name="[386]"></a>vFG_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>vFG_FrameGrabberEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[fe]"></a>vFG_CroppingEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[387]"></a>vFG_ColorCorrectEnable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>vFG_ConfigureFgSignal</STRONG> (ARM, 196 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[fa]"></a>vFG_SetInputMode</STRONG> (ARM, 220 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[fb]"></a>vFG_SetOutputMode</STRONG> (ARM, 124 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[388]"></a>vFG_SetInputImageSize</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[fd]"></a>vFG_SetInputCropp</STRONG> (ARM, 148 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[f9]"></a>vFG_SetCaptureBuffers</STRONG> (ARM, 64 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[389]"></a>eFG_GetCurrentCaptureBuffer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[38a]"></a>vFG_ConfigureMemoryWriteProtection</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>vFG_SetScalingFactors</STRONG> (ARM, 40 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[100]"></a>vFG_EnableMeasurements</STRONG> (ARM, 124 bytes, Stack size 0 bytes, fg.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitFG
</UL>

<P><STRONG><a name="[38b]"></a>vFG_EnableMeasurementVCR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[38c]"></a>vFG_EnableMeasurementHCR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[38d]"></a>vFG_EnableMeasurementHDISP</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[38e]"></a>vFG_EnableMeasurementHSPWR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[38f]"></a>vFG_EnableMeasurementVSPWR</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[390]"></a>vFG_GetMeasurements</STRONG> (ARM, 84 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[391]"></a>vFG_GetMeasurementMVCR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>vFG_GetMeasurementMHCR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>vFG_GetMeasurementMHSPWR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[394]"></a>vFG_GetMeasurementMVSPWR</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[395]"></a>vFG_GetMeasurementMHDISP</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[396]"></a>vFG_EnableIrq</STRONG> (ARM, 124 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[397]"></a>vFG_EnableIrqCDI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[398]"></a>vFG_EnableIrqVBTOI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[399]"></a>vFG_EnableIrqVSI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39a]"></a>vFG_EnableIrqMRDYI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39b]"></a>vFG_EnableIrqNVI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>vFG_GetIrqCDS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>vFG_GetIrqVBTOS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>vFG_GetIrqVSS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[39f]"></a>vFG_GetIrqMRDYS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a0]"></a>vFG_GetIrqNVS</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>vFG_IrqClear</STRONG> (ARM, 184 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a2]"></a>vFG_IrqClearCDS</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>vFG_IrqClearVBTOS</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a4]"></a>vFG_IrqClearVSS</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a5]"></a>vFG_IrqClearMRDYS</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>vFG_IrqClearNVS</STRONG> (ARM, 28 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a7]"></a>vFG_SetExchColor</STRONG> (ARM, 76 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a8]"></a>vFG_SetGlobalInputAlpha</STRONG> (ARM, 24 bytes, Stack size 0 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3a9]"></a>vFG_SetClutEntry</STRONG> (ARM, 144 bytes, Stack size 8 bytes, fg.o(.text), UNUSED)

<P><STRONG><a name="[3aa]"></a>vGA_GetVersion</STRONG> (ARM, 80 bytes, Stack size 20 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ab]"></a>vGA_ResetMaxUsedBuffSize</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ac]"></a>u32GA_GetMaxUsedBuffSize</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ad]"></a>i32GA_GetLastCmdBuffStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>u32GA_GetLastCmdSize</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3af]"></a>i32GA_CheckList</STRONG> (ARM, 52 bytes, Stack size 8 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>vGA_ResetList</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ga.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListResetAll
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfStartListExecution
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
</UL>

<P><STRONG><a name="[103]"></a>vGA_Enable</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
</UL>

<P><STRONG><a name="[104]"></a>vGA_ReadAheadEnable</STRONG> (ARM, 60 bytes, Stack size 0 bytes, ga.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
</UL>

<P><STRONG><a name="[119]"></a>vGA_CloseList</STRONG> (ARM, 96 bytes, Stack size 8 bytes, ga.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGA_CloseList
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfStartListExecution
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
</UL>

<P><STRONG><a name="[3b0]"></a>vGA_SyncList</STRONG> (ARM, 80 bytes, Stack size 20 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>vGA_SetUserInt</STRONG> (ARM, 80 bytes, Stack size 20 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b2]"></a>i32GA_Reset</STRONG> (ARM, 88 bytes, Stack size 8 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>vGA_SetCmdListAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfStartListExecution
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
</UL>

<P><STRONG><a name="[3a]"></a>u8GA_GetStatus</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForGA
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eGfGetGAStatus
</UL>

<P><STRONG><a name="[3b3]"></a>boGA_CmdListFinished</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b4]"></a>boGA_CmdListError</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b5]"></a>boGA_CmdReg_IsBusy</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>u32GA_GetIrqCause</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b7]"></a>vGA_ClearIrqCause</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b8]"></a>vGA_SetIrqMask</STRONG> (ARM, 16 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3b9]"></a>vGA_EnableUserIrq</STRONG> (ARM, 92 bytes, Stack size 12 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>vGA_CmdReg_EnableIrqCmdEnd</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>vGA_CmdReg_ClearIrqCmdEnd</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>vGA_EnableIrqCSCEI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>vGA_ClearIrqCSCEI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3be]"></a>vGA_EnableIrqCSLEI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3bf]"></a>vGA_ClearIrqCSLEI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>vGA_SetGADelay</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>vGA_EnableIrqGAWBWI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c2]"></a>vGA_ClearIrqGAWBWI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c3]"></a>vGA_EnableIrqGAWBRI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c4]"></a>vGA_ClearIrqGAWBRI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>vGA_EnableIrqGACBI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c6]"></a>vGA_ClearIrqGACBI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c7]"></a>vGA_EnableIrqGARBI</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>vGA_ClearIrqGARBI</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3c9]"></a>vGA_ClearUserIrq</STRONG> (ARM, 32 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>boGA_GetBusErrAddr</STRONG> (ARM, 164 bytes, Stack size 8 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3cb]"></a>boGA_GetBusErrCtrlStatus</STRONG> (ARM, 556 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>boGA_SetMemoryProtRegionAddr</STRONG> (ARM, 132 bytes, Stack size 12 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3cd]"></a>vGA_EnableMemoryProtecConfigIrq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3ce]"></a>vGA_EnableMemoryProtecAccessIrq</STRONG> (ARM, 24 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>vGA_ClearMemoryProtecConfigIrq</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3d0]"></a>vGA_ClearMemoryProtecAccessIrq</STRONG> (ARM, 28 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>u32GA_GetMemoryProtecErr_CaptAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3d2]"></a>boGA_SetGeneralPurposeRegister</STRONG> (ARM, 64 bytes, Stack size 8 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3d3]"></a>boGA_GetGeneralPurposeRegister</STRONG> (ARM, 56 bytes, Stack size 8 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[3d4]"></a>boGA_SetCommandRegisterLowHigh</STRONG> (ARM, 52 bytes, Stack size 0 bytes, ga.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>vGDC_SetShadowRegUpdateMode</STRONG> (ARM, 64 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_Special
</UL>

<P><STRONG><a name="[3d5]"></a>vGDC_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[e5]"></a>vGDC_Init</STRONG> (ARM, 2664 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vGDC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[f4]"></a>vGDC_Switch</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vGDC_Switch &rArr; vUpdateDCR_HighWord_Special
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[3d6]"></a>eGetShadowRegUpdateStatus</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>vGDC_SetDispConfigType</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vGDC_SetDispConfigType &rArr; vUpdateDCR_HighWord_Special
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[3d7]"></a>vGDC_ADBSEnable</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>vGDC_ColorCorrectEnable</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>

<P><STRONG><a name="[3d8]"></a>vGDC_SetArthMode</STRONG> (ARM, 88 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>vGDC_SetDitheringMode</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vGDC_SetDitheringMode &rArr; vUpdateDCR_HighWord_Special
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[e6]"></a>vGDC_SetBgrColor</STRONG> (ARM, 40 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetBgrColor
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[3d9]"></a>eGDC_GetDispStat</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3da]"></a>eGDC_GetPanelStat</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>u32GDC_GetStatVSync</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetVSyncStatus
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForVSync
</UL>

<P><STRONG><a name="[3db]"></a>u32GDC_GetPolVSync</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3dc]"></a>u32GDC_GetStatHSync</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3dd]"></a>u32GDC_GetStatHDisp</STRONG> (ARM, 24 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[e7]"></a>vGDC_SelDotClkSrc</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SelDotClkSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[e8]"></a>vGDC_SetDotClkPol</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetDotClkPol
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[111]"></a>i32GDC_LayerEnable</STRONG> (ARM, 344 bytes, Stack size 24 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i32GDC_LayerEnable &rArr; vUpdateDCR_HighWord_Special
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfHideLayer
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfShowLayer
</UL>

<P><STRONG><a name="[10b]"></a>i32GDC_SetDataFormat</STRONG> (ARM, 436 bytes, Stack size 24 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = i32GDC_SetDataFormat &rArr; vUpdateDCR_Special &rArr; vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
</UL>

<P><STRONG><a name="[10d]"></a>vGDC_SetLayerStart</STRONG> (ARM, 236 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vGDC_SetLayerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfPositionLayer
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
</UL>

<P><STRONG><a name="[10f]"></a>i32GDC_SetLayerSize</STRONG> (ARM, 272 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32GDC_SetLayerSize
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
</UL>

<P><STRONG><a name="[f2]"></a>vGDC_SetLayerOrder</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetLayerOrder
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[10e]"></a>i32GDC_SetCommonAlpha</STRONG> (ARM, 688 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32GDC_SetCommonAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
</UL>

<P><STRONG><a name="[3de]"></a>i32GDC_GetCommonAlpha</STRONG> (ARM, 376 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>i32GDC_FrameBuffConfig</STRONG> (ARM, 776 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32GDC_FrameBuffConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetLayer
</UL>

<P><STRONG><a name="[3df]"></a>eGDC_GetActiveFrameBuff</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e0]"></a>vGDC_SetMemWidth</STRONG> (ARM, 332 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>i32GDC_SetLayerStartAddr</STRONG> (ARM, 408 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32GDC_SetLayerStartAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBufferSync
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBuffer
</UL>

<P><STRONG><a name="[3e1]"></a>i32GDC_SetScrollVal</STRONG> (ARM, 564 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e2]"></a>vGDC_SetStartAddrCapture</STRONG> (ARM, 168 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e3]"></a>vGDC_InitCorrClut</STRONG> (ARM, 204 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e4]"></a>vGDC_SetSelectCorrCompVal</STRONG> (ARM, 544 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e5]"></a>vGDC_ActivateCorrCompVal</STRONG> (ARM, 544 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>vGDC_EnableSelectiveCorr</STRONG> (ARM, 84 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>

<P><STRONG><a name="[ed]"></a>i32GDC_SetDisplayStart</STRONG> (ARM, 100 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32GDC_SetDisplayStart
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[ee]"></a>i32GDC_SetDisplaySize</STRONG> (ARM, 100 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32GDC_SetDisplaySize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[151]"></a>vGDC_WindowEnable</STRONG> (ARM, 332 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>

<P><STRONG><a name="[3e6]"></a>i32GDC_SetWindowSize</STRONG> (ARM, 424 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e7]"></a>vGDC_SetWindowStartPos</STRONG> (ARM, 236 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3e8]"></a>i32GDC_SetWindowStartAddr</STRONG> (ARM, 228 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>vGDC_SyncConfig</STRONG> (ARM, 260 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SyncConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[e9]"></a>vGDC_SetSyncDir</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetSyncDir
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[3e9]"></a>vGDC_SelectCompSync</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3ea]"></a>vGDC_SetPolVSync</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3eb]"></a>vGDC_SetPolHSync</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[eb]"></a>vGDC_SetPolHDisp</STRONG> (ARM, 56 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vGDC_SetPolHDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC1
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[3ec]"></a>vGDC_SetHSync</STRONG> (ARM, 64 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3ed]"></a>vGDC_SetVSync</STRONG> (ARM, 64 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3ee]"></a>vGDC_IrqConfig</STRONG> (ARM, 188 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3ef]"></a>vGDC_SetIrqMaskAPC</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f0]"></a>vGDC_SetHsyncIrqLine</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>vGDC_SetIrqMaskFifoIn</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>vGDC_SetIrqMaskFifoOut</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>vGDC_SetIrqMaskVSync</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>vGDC_SetIrqMaskHSync</STRONG> (ARM, 36 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f5]"></a>eGDC_IsIrqHSync</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f6]"></a>eGDC_IsIrqVSync</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f7]"></a>eGDC_IsIrqFifoIn</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f8]"></a>eGDC_IsIrqFifoOut</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3f9]"></a>eGDC_IsIrqAPC</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>vGDC_PnlGppOutEnable</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3fb]"></a>vGDC_SetPnlPositiveSyncSelect</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3fc]"></a>boGDC_IsPnlRSPowerUpFinished</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3fd]"></a>boGDC_IsPnlRSReady</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3fe]"></a>vGDC_SetPnlRSDSEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[3ff]"></a>vGDC_SetPnlSyncModeEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[400]"></a>vGDC_SetPnlRSDSOutputCurrentMode</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>vGDC_SetPnlRSDSPreEmphasisMode</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[402]"></a>vGDC_SetPnlRSDSHighImpedanceEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[403]"></a>boGDC_IsPnlInputSync</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[404]"></a>boGDC_IsPnlTimingControlInterfaceEnabled</STRONG> (ARM, 32 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[405]"></a>vGDC_SetAlignData</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[406]"></a>vGDC_SetPnlAlignClock</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[407]"></a>vGDC_PnlAlterEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[408]"></a>vGDC_PnlEvenDataInvEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[409]"></a>vGDC_PnlEvenRgbOutEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40a]"></a>vGDC_PnlOddDataInvEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40b]"></a>vGDC_PnlOddRgbOutEnable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>i32GDC_PnlSyncMode</STRONG> (ARM, 108 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40d]"></a>vGDC_APCConfigure</STRONG> (ARM, 316 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>vGDC_APCEnable</STRONG> (ARM, 60 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[40f]"></a>boGDC_IsAPCError</STRONG> (ARM, 40 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[410]"></a>vGDC_SetAPCCR_PolynomialGen</STRONG> (ARM, 64 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[411]"></a>u32GDC_GetAPCResult</STRONG> (ARM, 28 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[412]"></a>u32GDC_GetAPCPixelVal</STRONG> (ARM, 56 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[413]"></a>vGDC_SetGdcWriteProtection</STRONG> (ARM, 48 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>vGDC_SetApcWriteProtection</STRONG> (ARM, 48 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>boGDC_SetPulseGen</STRONG> (ARM, 452 bytes, Stack size 32 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>boGDC_ConfigPulseGenA_B</STRONG> (ARM, 480 bytes, Stack size 168 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[416]"></a>u16GDC_GetLastGAPIFColAddr</STRONG> (ARM, 20 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>boGDC_GetBusErrAddr</STRONG> (ARM, 48 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[418]"></a>boGDC_GetBusErrCtrlStatus</STRONG> (ARM, 148 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[419]"></a>eGDC_GetDcrBusErrors</STRONG> (ARM, 156 bytes, Stack size 20 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>boGDC_ClrDcrBusErrors</STRONG> (ARM, 448 bytes, Stack size 32 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_Special
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>

<P><STRONG><a name="[154]"></a>vGDC_GAPIFEnable</STRONG> (ARM, 52 bytes, Stack size 16 bytes, gdc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdateDCR_HighWord_Special
</UL>

<P><STRONG><a name="[41a]"></a>boGDC_AccessToGapif</STRONG> (ARM, 48 bytes, Stack size 0 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>eGDC_IsIrqGap</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>eGDC_IsIrqGber</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[41d]"></a>eGDC_IsIrqGpe</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>eGDC_IsIrqDle</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[41f]"></a>eGDC_IsIrqApe</STRONG> (ARM, 72 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>vGPIO_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>i32GPIO_EnablePullUp</STRONG> (ARM, 232 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32GPIO_EnablePullUp
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_GDC0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_CAN
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_Buttons
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_UART
</UL>

<P><STRONG><a name="[1a5]"></a>i32GPIO_EnablePullDown</STRONG> (ARM, 232 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32GPIO_EnablePullDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[421]"></a>i32GPIO_EnableSchmittTrigger</STRONG> (ARM, 108 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>i32GPIO_SetOutputResistance</STRONG> (ARM, 104 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32GPIO_SetOutputResistance
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_GDC0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_CAN
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_UART
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[1a2]"></a>i32GPIO_EnableLatchFunction</STRONG> (ARM, 272 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i32GPIO_EnableLatchFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_GDC0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_CAN
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_Buttons
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_UART
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[422]"></a>i32GPIO_EnableSMCMacro</STRONG> (ARM, 68 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>i32GPIO_SetPinFunction</STRONG> (ARM, 344 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_GDC0
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_CAN
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_Buttons
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_UART
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[1c3]"></a>i32GPIO_SetPinDirection</STRONG> (ARM, 452 bytes, Stack size 20 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32GPIO_SetPinDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_Buttons
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[1cf]"></a>i32GPIO_SetPinState</STRONG> (ARM, 196 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i32GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBLControl
</UL>

<P><STRONG><a name="[1ea]"></a>i32GPIO_GetPinState</STRONG> (ARM, 120 bytes, Stack size 12 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdatePushbuttons
</UL>

<P><STRONG><a name="[423]"></a>i32GPIO_SelectMemoryInterfaceConfiguration</STRONG> (ARM, 48 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[424]"></a>vUART_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>vUART_FifoResetRx</STRONG> (ARM, 64 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[159]"></a>vUART_FifoResetTx</STRONG> (ARM, 64 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[15d]"></a>vUART_DmaIrqConfig</STRONG> (ARM, 452 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[15c]"></a>vUART_DataFmtConfig</STRONG> (ARM, 292 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[15b]"></a>vUART_SetBaudRate</STRONG> (ARM, 20 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[155]"></a>vUART_Reset</STRONG> (ARM, 60 bytes, Stack size 8 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = vUART_Reset &rArr; vUART_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DSB
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
</UL>

<P><STRONG><a name="[158]"></a>vUART_Init</STRONG> (ARM, 152 bytes, Stack size 24 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = vUART_Init &rArr; vUART_Reset &rArr; vUART_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Reset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_SetBaudRate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_DataFmtConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_DmaIrqConfig
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_FifoResetTx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_FifoResetRx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
</UL>

<P><STRONG><a name="[1b4]"></a>vUART_FifoConfig</STRONG> (ARM, 132 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
</UL>

<P><STRONG><a name="[1b5]"></a>vUART_FlowCtrlConfig</STRONG> (ARM, 212 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
</UL>

<P><STRONG><a name="[425]"></a>vUART_SetRTSTerminalLevel</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[426]"></a>eUART_GetCTSTerminalStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[427]"></a>vUART_SetRTSTriggerLevel</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>vUART_GetTransferStat</STRONG> (ARM, 32 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[15e]"></a>i32UART_GetBaudRate</STRONG> (ARM, 232 bytes, Stack size 32 bytes, hsuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
</UL>

<P><STRONG><a name="[160]"></a>u32UART_IsTxFifoReady</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hsuart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32UART_WriteData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UART_WriteByte
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[15f]"></a>i32UART_WriteByte</STRONG> (ARM, 64 bytes, Stack size 8 bytes, hsuart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32UART_IsTxFifoReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[161]"></a>u32UART_WriteData</STRONG> (ARM, 108 bytes, Stack size 16 bytes, hsuart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32UART_IsTxFifoReady
</UL>

<P><STRONG><a name="[1b0]"></a>i32UART_ReadByte</STRONG> (ARM, 100 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[429]"></a>i32UART_ReadData</STRONG> (ARM, 192 bytes, Stack size 20 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[42a]"></a>i32UART_IsTimeOut</STRONG> (ARM, 72 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>u8UART_GetRxDataCnt</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[42b]"></a>u16UART_GetDmaIrqStat</STRONG> (ARM, 24 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[42c]"></a>vUART_ClearDmaIrqFlag</STRONG> (ARM, 64 bytes, Stack size 8 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>u32UART_IsTxFifoFree</STRONG> (ARM, 28 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>vUART_TxRunCtrl</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
</UL>

<P><STRONG><a name="[42e]"></a>vUART_TxBreak</STRONG> (ARM, 40 bytes, Stack size 0 bytes, hsuart.o(.text), UNUSED)

<P><STRONG><a name="[42f]"></a>vINTC_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>vSetIR_ByIndex</STRONG> (ARM, 104 bytes, Stack size 36 bytes, intc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vSetIR_ByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SourceConfig
</UL>

<P><STRONG><a name="[169]"></a>vSetIR_EXT_ByIndex</STRONG> (ARM, 248 bytes, Stack size 12 bytes, intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SetExtByIndex
</UL>

<P><STRONG><a name="[167]"></a>vSetIR_DRS_ByIndex</STRONG> (ARM, 248 bytes, Stack size 12 bytes, intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SetDrsByIndex
</UL>

<P><STRONG><a name="[16b]"></a>vSetIR_ACLR_ByIndex</STRONG> (ARM, 248 bytes, Stack size 12 bytes, intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SetAclrByIndex
</UL>

<P><STRONG><a name="[165]"></a>vSetIR_EIM_ByIndex</STRONG> (ARM, 248 bytes, Stack size 12 bytes, intc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SetEIM_ByIndex
</UL>

<P><STRONG><a name="[162]"></a>i32INTC_SourceConfig</STRONG> (ARM, 228 bytes, Stack size 56 bytes, intc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = i32INTC_SourceConfig &rArr; vSetIR_ByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIR_ByIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[164]"></a>i32INTC_SetEIM_ByIndex</STRONG> (ARM, 60 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIR_EIM_ByIndex
</UL>

<P><STRONG><a name="[166]"></a>i32INTC_SetDrsByIndex</STRONG> (ARM, 60 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIR_DRS_ByIndex
</UL>

<P><STRONG><a name="[168]"></a>i32INTC_SetExtByIndex</STRONG> (ARM, 60 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIR_EXT_ByIndex
</UL>

<P><STRONG><a name="[16a]"></a>i32INTC_SetAclrByIndex</STRONG> (ARM, 60 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetIR_ACLR_ByIndex
</UL>

<P><STRONG><a name="[430]"></a>i32INTC_SetVectBaseAddr</STRONG> (ARM, 44 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>u32INTC_GetVectAddr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, intc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[1dc]"></a>vINTC_ModifyIrqLevel</STRONG> (ARM, 52 bytes, Stack size 8 bytes, intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vINTC_ModifyIrqLevel
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vISREncoder
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vADCISR_Func
</UL>

<P><STRONG><a name="[16c]"></a>i32INTC_ClearIrq</STRONG> (ARM, 64 bytes, Stack size 16 bytes, intc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = i32INTC_ClearIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__DSB
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[431]"></a>vINTC_ClearDmaReq</STRONG> (ARM, 372 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>vINTC_BlockVectUpdate</STRONG> (ARM, 16 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>u8INTC_GetIrqLevel</STRONG> (ARM, 200 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>u32INTC_GetIrqStatus</STRONG> (ARM, 204 bytes, Stack size 16 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[435]"></a>vINTC_EnableInterrupts</STRONG> (ARM, 24 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[436]"></a>eINTC_GetEnabled</STRONG> (ARM, 36 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[437]"></a>vINTC_ClearInterrupt</STRONG> (ARM, 28 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>vINTC_SetISRStartAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, intc.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[438]"></a>u32INTC_GetISRStartAddress</STRONG> (ARM, 28 bytes, Stack size 0 bytes, intc.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>vPNG_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>vPNG_Init</STRONG> (ARM, 208 bytes, Stack size 0 bytes, png.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>

<P><STRONG><a name="[4b]"></a>i32PNG_SetUpStream</STRONG> (ARM, 428 bytes, Stack size 20 bytes, png.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32PNG_SetUpStream
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
</UL>

<P><STRONG><a name="[43a]"></a>u32PNG_GetModuleVersion</STRONG> (ARM, 12 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[43b]"></a>vPNG_SetIntType</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>i32PNG_EnableGlobalInterruptSingle</STRONG> (ARM, 268 bytes, Stack size 8 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>i32PNG_EnableStreamInterruptSingle</STRONG> (ARM, 1200 bytes, Stack size 12 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>vPNG_EnableGlobalInterruptAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[43f]"></a>vPNG_EnableStreamInterruptAll</STRONG> (ARM, 20 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[440]"></a>i32PNG_GetGlobalInterruptStatusSingle</STRONG> (ARM, 248 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[441]"></a>i32PNG_GetStreamInterruptStatusSingle</STRONG> (ARM, 924 bytes, Stack size 8 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[442]"></a>u8PNG_GetGlobalInterruptStatusAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[443]"></a>u32PNG_GetStreamInterruptStatusAll</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[444]"></a>i32PNG_ClearGlobalInterruptSingle</STRONG> (ARM, 396 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[445]"></a>i32PNG_ClearStreamInterruptSingle</STRONG> (ARM, 1296 bytes, Stack size 8 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[446]"></a>vPNG_ClearGlobalInterruptAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[447]"></a>vPNG_ClearStreamInterruptAll</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[448]"></a>vPNG_ResetStream</STRONG> (ARM, 44 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[449]"></a>boPNG_GetBusError</STRONG> (ARM, 296 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[3d]"></a>ePNG_GetStreamPhaseStatus</STRONG> (ARM, 28 bytes, Stack size 0 bytes, png.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfWaitForPNGDecode
</UL>

<P><STRONG><a name="[44a]"></a>boPNG_GetStreamStatus</STRONG> (ARM, 156 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[44b]"></a>boPNG_GetStreamIhdrInfo</STRONG> (ARM, 156 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[44c]"></a>boPNG_GetStreamZlibInfo</STRONG> (ARM, 156 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[44d]"></a>boPNG_GetImageSize</STRONG> (ARM, 80 bytes, Stack size 8 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[44e]"></a>u8PNG_GetDecodedStreamFIFOFillLevel</STRONG> (ARM, 28 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>u32PNG_GetSSBCurrentAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[450]"></a>u32PNG_GetSWBCurrentAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>u32PNG_GetFSBStartAddress</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>u32PNG_GetCurrentVirtualOffset</STRONG> (ARM, 24 bytes, Stack size 0 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>i32PNG_SetPaletteTable</STRONG> (ARM, 668 bytes, Stack size 16 bytes, png.o(.text), UNUSED)

<P><STRONG><a name="[454]"></a>vQSPIC_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>i32QSPIC_ConfigureDirectControl</STRONG> (ARM, 844 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i32QSPIC_ConfigureDirectControl
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[1a1]"></a>i32QSPIC_ConfigurePrgControl</STRONG> (ARM, 128 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = i32QSPIC_ConfigurePrgControl
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[455]"></a>i32QSPIC_SetDirectFlashBaseAddress</STRONG> (ARM, 148 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[456]"></a>i32QSPIC_GetDirectFlashBaseAddress</STRONG> (ARM, 136 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>i32QSPIC_SetDirectFlashDensity</STRONG> (ARM, 148 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>i32QSPIC_GetDirectFlashDensity</STRONG> (ARM, 136 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>i32QSPIC_EnableDirectMemMapRd</STRONG> (ARM, 148 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45a]"></a>i32QSPIC_GetDirectMemMapStatusRd</STRONG> (ARM, 136 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45b]"></a>i32QSPIC_SetDirectFlashMemMap</STRONG> (ARM, 240 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45c]"></a>i32QSPIC_DirectSetReadCtrl</STRONG> (ARM, 124 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45d]"></a>i32QSPIC_DirectGetReadCtrl</STRONG> (ARM, 132 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45e]"></a>i32QSPIC_DirectEnableWIPPolling</STRONG> (ARM, 156 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[45f]"></a>i32QSPIC_DirectGetStatusWIPPolling</STRONG> (ARM, 140 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[460]"></a>i32QSPIC_DirectSetCSDeassertionTime</STRONG> (ARM, 156 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>i32QSPIC_DirectGetCSDeassertionTime</STRONG> (ARM, 140 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[462]"></a>i32QSPIC_PgrmSetCSDeassertionTime</STRONG> (ARM, 80 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[463]"></a>i32QSPIC_PgrmGetCSDeassertionTime</STRONG> (ARM, 68 bytes, Stack size 0 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[464]"></a>i32QSPIC_DirectSetDataCaptureEdge</STRONG> (ARM, 156 bytes, Stack size 12 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>i32QSPIC_DirectGetDataCaptureEdge</STRONG> (ARM, 140 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[466]"></a>i32QSPIC_PgrmSetDataCaptureEdge</STRONG> (ARM, 80 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[467]"></a>i32QSPIC_PgrmGetDataCaptureEdge</STRONG> (ARM, 104 bytes, Stack size 0 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[468]"></a>i32QSPIC_EnableInterrupt</STRONG> (ARM, 80 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[469]"></a>i32QSPIC_GetInterruptStatus</STRONG> (ARM, 68 bytes, Stack size 0 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[46a]"></a>i32QSPIC_IsSpiCycleDone</STRONG> (ARM, 124 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>boQSPIC_IsSpiCycleInPgrs</STRONG> (ARM, 68 bytes, Stack size 0 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteRegister
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetRegister
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WriteByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetExtendedID
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmFastRead
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmPagePgrm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmChipErase
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmSectErase
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteDisable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteEnable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmConfigurationWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmConfigurationRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetID
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmReleaseDP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmClearStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusFlagRead
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusRead
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WaitForCompletion
</UL>

<P><STRONG><a name="[170]"></a>boQSPIC_IsSpiCycleDone</STRONG> (ARM, 96 bytes, Stack size 0 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteRegister
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetRegister
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WriteByte
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetExtendedID
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmFastRead
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmPagePgrm
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmChipErase
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmSectErase
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteDisable
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteEnable
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmConfigurationWrite
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmConfigurationRead
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetID
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmReleaseDP
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmClearStatus
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusFlagRead
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusRead
</UL>

<P><STRONG><a name="[16d]"></a>i32QSPIC_WaitForCompletion</STRONG> (ARM, 76 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWOE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[16f]"></a>i32QSPIC_PgrmStatusRead</STRONG> (ARM, 252 bytes, Stack size 24 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWOE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[171]"></a>i32QSPIC_PgrmStatusFlagRead</STRONG> (ARM, 252 bytes, Stack size 24 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWOE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[172]"></a>i32QSPIC_PgrmClearStatus</STRONG> (ARM, 168 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[173]"></a>i32QSPIC_PgrmReleaseDP</STRONG> (ARM, 168 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[174]"></a>i32QSPIC_PgrmGetID</STRONG> (ARM, 384 bytes, Stack size 36 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmConfigurationRead
</UL>

<P><STRONG><a name="[175]"></a>i32QSPIC_PgrmConfigurationRead</STRONG> (ARM, 444 bytes, Stack size 32 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetID
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[176]"></a>i32QSPIC_PgrmConfigurationWrite</STRONG> (ARM, 204 bytes, Stack size 28 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[177]"></a>i32QSPIC_PgrmWriteEnable</STRONG> (ARM, 152 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWOE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[178]"></a>i32QSPIC_PgrmWriteDisable</STRONG> (ARM, 152 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[179]"></a>i32QSPIC_PgrmSectErase</STRONG> (ARM, 320 bytes, Stack size 32 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[17a]"></a>i32QSPIC_PgrmChipErase</STRONG> (ARM, 168 bytes, Stack size 20 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash
</UL>

<P><STRONG><a name="[17b]"></a>i32QSPIC_PgrmPagePgrm</STRONG> (ARM, 424 bytes, Stack size 44 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWOE
</UL>

<P><STRONG><a name="[17c]"></a>i32QSPIC_PgrmFastRead</STRONG> (ARM, 424 bytes, Stack size 44 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[17d]"></a>i32QSPIC_PgrmGetExtendedID</STRONG> (ARM, 272 bytes, Stack size 24 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[17e]"></a>i32QSPIC_WriteByte</STRONG> (ARM, 168 bytes, Stack size 24 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[17f]"></a>i32QSPIC_PgrmGetRegister</STRONG> (ARM, 324 bytes, Stack size 40 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE
</UL>

<P><STRONG><a name="[180]"></a>i32QSPIC_PgrmWriteRegister</STRONG> (ARM, 312 bytes, Stack size 40 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleDone
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boQSPIC_IsSpiCycleInPgrs
</UL>

<P><STRONG><a name="[181]"></a>u32QSPIC_DirectReadWord</STRONG> (ARM, 20 bytes, Stack size 8 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;word_read
</UL>

<P><STRONG><a name="[183]"></a>vQSPIC_DirectReadBurst4</STRONG> (ARM, 28 bytes, Stack size 16 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_burst4
</UL>

<P><STRONG><a name="[185]"></a>vQSPIC_DirectReadBurst8</STRONG> (ARM, 28 bytes, Stack size 16 bytes, qspic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_burst8
</UL>

<P><STRONG><a name="[46b]"></a>vRot_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[46c]"></a>vRot_SetMemSrc</STRONG> (ARM, 100 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[46d]"></a>vRot_SetMemDest</STRONG> (ARM, 76 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[46e]"></a>vRot_SetMemDim</STRONG> (ARM, 120 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>vRot_SetColorFmt</STRONG> (ARM, 136 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[470]"></a>vRot_SetRotMtrx</STRONG> (ARM, 412 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[471]"></a>vRot_SetFrwdCoord</STRONG> (ARM, 344 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>vRot_SetSrcAddrPos</STRONG> (ARM, 84 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[473]"></a>vRot_SetRotationCmd</STRONG> (ARM, 112 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[474]"></a>vRot_SetClippWnd</STRONG> (ARM, 216 bytes, Stack size 20 bytes, rotation_matrix.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>vRot_RotateMatrix</STRONG> (ARM, 1608 bytes, Stack size 32 bytes, rotation_matrix.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[143]"></a>vRot_RotateBlendMatrix</STRONG> (ARM, 1864 bytes, Stack size 32 bytes, rotation_matrix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vRot_RotateBlendMatrix
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
</UL>

<P><STRONG><a name="[475]"></a>vTIMER_CMPLX_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>vTIMER_CMPLX_Config</STRONG> (ARM, 264 bytes, Stack size 16 bytes, timer_cmplx.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTIMER_CMPLX_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[476]"></a>vTIMER_CMPLX_SetCountCtrl</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[477]"></a>vTIMER_CMPLX_SetCaptureTiming</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>vTIMER_CMPLX_FlipFlopConfig</STRONG> (ARM, 168 bytes, Stack size 16 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[479]"></a>vTIMER_CMPLX_SetStateIdle</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>vTIMER_CMPLX_SetStateNormal</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>vTIMER_CMPLX_Start</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[47b]"></a>vTIMER_CMPLX_Stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[47c]"></a>vTIMER_CMPLX_SetOvflowIrqEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>vTIMER_CMPLX_SetSyncRstEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>vTIMER_CMPLX_StartPrescaler</STRONG> (ARM, 36 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[47e]"></a>vTIMER_CMPLX_StopPrescaler</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[47f]"></a>vTIMER_CMPLX_SetDblBuffEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[480]"></a>vTIMER_CMPLX_LatchCounter</STRONG> (ARM, 64 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[481]"></a>vTIMER_CMPLX_SetFfInvl1</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[482]"></a>vTIMER_CMPLX_SetFfInvl0</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[483]"></a>vTIMER_CMPLX_SetFfInvc1</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[484]"></a>vTIMER_CMPLX_SetFfInvc0</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[485]"></a>vTIMER_CMPLX_SetCompareVal0</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[486]"></a>u16TIMER_CMPLX_GetCompareVal0</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>vTIMER_CMPLX_SetCompareVal1</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
</UL>

<P><STRONG><a name="[487]"></a>u16TIMER_CMPLX_GetCompareVal1</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[488]"></a>u16TIMER_CMPLX_GetCapturedVal0</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[489]"></a>u16TIMER_CMPLX_GetCapturedVal1</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[48a]"></a>u16TIMER_CMPLX_GetCounterVal</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_cmplx.o(.text), UNUSED)

<P><STRONG><a name="[48b]"></a>vTIMER_PWM_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>boTIMER_PWM_Config</STRONG> (ARM, 276 bytes, Stack size 16 bytes, timer_pwm.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = boTIMER_PWM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[1de]"></a>vTIMER_PWM_SetPeriod</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[1d7]"></a>vTIMER_PWM_SetDuty</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetBlPwmFunc
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[48c]"></a>u16TIMER_PWM_GetDuty</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>i32TIMER_PWM_SetWaveform</STRONG> (ARM, 404 bytes, Stack size 40 bytes, timer_pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv (via BLX)
</UL>

<P><STRONG><a name="[48d]"></a>vTIMER_PWM_SetPrescaler</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>vTIMER_PWM_SetRstCondition</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[48f]"></a>vTIMER_PWM_SetDetEdgeVsync</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>vTIMER_PWM_SetDetEdgeHSync</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[491]"></a>vTIMER_PWM_IrqEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[492]"></a>vTIMER_PWM_DBuffEnable</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[493]"></a>i32TIMER_PWM_SetOutLevel</STRONG> (ARM, 80 bytes, Stack size 12 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>vTIMER_PWM_SetClkSource</STRONG> (ARM, 32 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>vTIMER_PWM_Enable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
</UL>

<P><STRONG><a name="[495]"></a>u16TIMER_PWM_GetCountVal</STRONG> (ARM, 20 bytes, Stack size 0 bytes, timer_pwm.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>vTransf_GetVersion</STRONG> (ARM, 40 bytes, Stack size 8 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[497]"></a>vTransf_SetMemSrc</STRONG> (ARM, 108 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>vTransf_SetDstImgSize</STRONG> (ARM, 120 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>vTransf_SetMemDest</STRONG> (ARM, 108 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[49a]"></a>vTransf_ConfigLUT</STRONG> (ARM, 164 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[49b]"></a>vTransf_SetColorFmt</STRONG> (ARM, 136 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[49c]"></a>vTransf_SetPredefColor</STRONG> (ARM, 76 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[49d]"></a>vTransf_SetTransfCmd</STRONG> (ARM, 112 bytes, Stack size 20 bytes, transf.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>vTransf_ConfigTransfOp</STRONG> (ARM, 764 bytes, Stack size 24 bytes, transf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFullOptimized
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFull
</UL>

<P><STRONG><a name="[92]"></a>vTransf_ConfigTransfBlendOp</STRONG> (ARM, 1160 bytes, Stack size 24 bytes, transf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationBlendFull
</UL>

<P><STRONG><a name="[49e]"></a>vTXCAN_GetVersion</STRONG> (ARM, 60 bytes, Stack size 16 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>vTXCAN_SetDatalength</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetDatalength
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[49f]"></a>vTXCAN_GetDatalength</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[18a]"></a>vTXCAN_SetRemoteFrameTransmissionRequest</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetRemoteFrameTransmissionRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4a0]"></a>eTXCAN_GetRemoteFrameTransmissionRequest</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[18b]"></a>vTXCAN_SetTimeStampCounterValue</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetTimeStampCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4a1]"></a>u16TXCAN_GetTimeStampCounterValue</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[18c]"></a>vTXCAN_SetExtID</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetExtID
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[1f1]"></a>u32TXCAN_GetExtID</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[18d]"></a>vTXCAN_SetStdID</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetStdID
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[1f0]"></a>u16TXCAN_GetStdID</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[18e]"></a>vTXCAN_SetRemoteFrameHandling</STRONG> (ARM, 28 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetRemoteFrameHandling
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4a2]"></a>eTXCAN_GetRemoteFrameHandling</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[18f]"></a>vTXCAN_SetGlobalAcceptanceMask</STRONG> (ARM, 28 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetGlobalAcceptanceMask
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4a3]"></a>eTXCAN_GetGlobalAcceptanceMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[190]"></a>vTXCAN_SetFrameType</STRONG> (ARM, 28 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetFrameType
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4a4]"></a>eTXCAN_GetFrameType</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4a5]"></a>vTXCAN_WriteMailboxD0</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4a6]"></a>u8TXCAN_ReadMailboxD0</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4a7]"></a>vTXCAN_WriteMailboxD1</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4a8]"></a>u8TXCAN_ReadMailboxD1</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4a9]"></a>vTXCAN_WriteMailboxD2</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4aa]"></a>u8TXCAN_ReadMailboxD2</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ab]"></a>vTXCAN_WriteMailboxD3</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ac]"></a>u8TXCAN_ReadMailboxD3</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>vTXCAN_WriteMailboxD4</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>u8TXCAN_ReadMailboxD4</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>vTXCAN_WriteMailboxD5</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>u8TXCAN_ReadMailboxD5</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>vTXCAN_WriteMailboxD6</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>u8TXCAN_ReadMailboxD6</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b3]"></a>vTXCAN_WriteMailboxD7</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>u8TXCAN_ReadMailboxD7</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b5]"></a>vTXCAN_WriteMailboxLow</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b6]"></a>u32TXCAN_ReadMailboxLow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b7]"></a>vTXCAN_WriteMailboxHigh</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b8]"></a>u32TXCAN_ReadMailboxHigh</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4b9]"></a>vTXCAN_WriteMailbox</STRONG> (ARM, 32 bytes, Stack size 12 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>u64TXCAN_ReadMailbox</STRONG> (ARM, 64 bytes, Stack size 20 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = u64TXCAN_ReadMailbox
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[4ba]"></a>vTXCAN_MailboxEnableAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>vTXCAN_MailboxDisableAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[192]"></a>vTXCAN_MailboxEnable</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_MailboxEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4bb]"></a>vTXCAN_MailboxDisable</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4bc]"></a>vTXCAN_SetMailboxDirectionAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4bd]"></a>u32TXCAN_GetMailboxDirectionAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>vTXCAN_SetMailboxDirection</STRONG> (ARM, 56 bytes, Stack size 12 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vTXCAN_SetMailboxDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
</UL>

<P><STRONG><a name="[4be]"></a>eGetMailboxDirection</STRONG> (ARM, 52 bytes, Stack size 12 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[188]"></a>vTXCAN_ConfigureMailbox</STRONG> (ARM, 172 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTXCAN_ConfigureMailbox &rArr; vTXCAN_SetMailboxDirection
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetMailboxDirection
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_MailboxEnable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetFrameType
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetGlobalAcceptanceMask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetRemoteFrameHandling
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetStdID
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetExtID
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetTimeStampCounterValue
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetRemoteFrameTransmissionRequest
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetDatalength
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4bf]"></a>vTXCAN_TransmitAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c0]"></a>vTXCAN_Transmit</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c1]"></a>vTXCAN_SendMsg</STRONG> (ARM, 60 bytes, Stack size 16 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>vTXCAN_CancelTransmissionAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>vTXCAN_CancelTransmission</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c4]"></a>vTXCAN_ClearTransmissionAcknowledgeAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>vTXCAN_ClearTransmissionAcknowledge</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_ClearTransmissionAcknowledge
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
</UL>

<P><STRONG><a name="[4c5]"></a>vTXCAN_ClearTransmissionAbortAcknowledgeAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>vTXCAN_ClearTransmissionAbortAcknowledge</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>vTXCAN_SetChangeDataRequestAll</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c8]"></a>vTXCAN_SetChangeDataRequest</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4c9]"></a>u32TXCAN_GetChangeDataRequestAll</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ca]"></a>u8TXCAN_GetChangeDataRequest</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4cb]"></a>u32TXCAN_GetPendingReceiveMessages</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4cc]"></a>u8TXCAN_GetPendingReceiveMessage</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4cd]"></a>vTXCAN_ClearPendingReceiveMessages</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>vTXCAN_ClearPendingReceiveMessage</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_ClearPendingReceiveMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[4ce]"></a>u32TXCAN_GetReceiveMessageLosts</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4cf]"></a>u8TXCAN_GetReceiveMessageLost</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>vTXCAN_ClearReceiveMessageLosts</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>vTXCAN_ClearReceiveMessageLost</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4d2]"></a>u32TXCAN_GetPendingRemoteFrames</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4d3]"></a>u8TXCAN_GetPendingRemoteFrame</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>vSetAcceptanceMaskType</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSetAcceptanceMaskType
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4d4]"></a>eGetAcceptanceMaskType</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>vTXCAN_SetAcceptanceMask</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_SetAcceptanceMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4d5]"></a>u32TXCAN_GetAcceptanceMask</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>vTXCAN_ConfigureChannel</STRONG> (ARM, 324 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4d6]"></a>vTXCAN_GetChannelConfiguration</STRONG> (ARM, 204 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>vTXCAN_ConfigureTiming</STRONG> (ARM, 224 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4d7]"></a>vTXCAN_GetTimingConfiguration</STRONG> (ARM, 100 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>u16TXCAN_GetTimeStampCounter</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>vTXCAN_ClearTimeStampValue</STRONG> (ARM, 36 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[4d9]"></a>vTXCAN_SetTimeStampCounterPrescaler</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4da]"></a>u8TXCAN_GetTimeStampCounterPrescaler</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>u32TXCAN_GetGlobalStatus</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>u8TXCAN_GetWarningStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>u8TXCAN_GetErrorPassiveStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4de]"></a>u8TXCAN_GetBusOffStatus</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4df]"></a>u8TXCAN_GetTimeStampOverflowFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>u8TXCAN_GetSleepModeAcknowledge</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e1]"></a>u8TXCAN_GetChangeConfigurationEnable</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e2]"></a>u8TXCAN_GetSuspendModeAcknowledge</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e3]"></a>u8TXCAN_GetTransmitMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e4]"></a>u8TXCAN_GetReceiveMode</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e5]"></a>u8TXCAN_GetMessageInSlot</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e6]"></a>u8TXCAN_GetReceiveErrorCounter</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e7]"></a>u8TXCAN_GetTransmitErrorCounter</STRONG> (ARM, 72 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e8]"></a>u8TXCAN_GetGlobalInterruptFlags</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4e9]"></a>vTXCAN_ClearGlobalInterruptFlags</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ea]"></a>u8TXCAN_GetWarningLevelInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4eb]"></a>vTXCAN_ClearWarningLevelInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ec]"></a>u8TXCAN_GetErrorPassiveInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ed]"></a>vTXCAN_ClearErrorPassiveInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ee]"></a>u8TXCAN_GetBusOffInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>vTXCAN_ClearBusOffInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f0]"></a>u8TXCAN_GetTimeStampCounterOverflowInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>vTXCAN_ClearTimeStampCounterOverflowInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>u8TXCAN_GetTransmitAbortFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f3]"></a>vTXCAN_ClearTransmitAbortFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>u8TXCAN_GetReceiveMessageLostInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f5]"></a>vTXCAN_ClearReceiveMessageLostInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f6]"></a>u8TXCAN_GetWakeUpInterruptFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f7]"></a>vTXCAN_ClearWakeUpInterruptFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f8]"></a>u8TXCAN_GetRemoteFramePendingFlag</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4f9]"></a>vTXCAN_ClearRemoteFramePendingFlag</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4fa]"></a>u8TXCAN_GetGlobalInterruptMasks</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4fb]"></a>vTXCAN_SetGlobalInterruptMasks</STRONG> (ARM, 24 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>u8TXCAN_GetWarningLevelInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4fd]"></a>vTXCAN_SetWarningLevelInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4fe]"></a>u8TXCAN_GetErrorPassiveInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[4ff]"></a>vTXCAN_SetErrorPassiveInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[500]"></a>u8TXCAN_GetBusOffInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[501]"></a>vTXCAN_SetBusOffInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[502]"></a>u8TXCAN_GetTimeStampCounterOverflowInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[503]"></a>vTXCAN_SetTimeStampCounterOverflowInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[504]"></a>u8TXCAN_GetTransmitAbortMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[505]"></a>vTXCAN_SetTransmitAbortMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[506]"></a>u8TXCAN_GetReceiveMessageLostInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[507]"></a>vTXCAN_SetReceiveMessageLostInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>u8TXCAN_GetWakeUpInterruptMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[509]"></a>vTXCAN_SetWakeUpInterruptMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[50a]"></a>u8TXCAN_GetRemoteFramePendingMask</STRONG> (ARM, 20 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[50b]"></a>vTXCAN_SetRemoteFramePendingMask</STRONG> (ARM, 28 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>vTXCAN_EnableInterrupt</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_EnableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[50c]"></a>vTXCAN_DisableInterrupt</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[50d]"></a>vTXCAN_EnableInterrupts</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>vTXCAN_ClearTransmitInterrupts</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>vTXCAN_ClearTransmitInterrupt</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_ClearTransmitInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
</UL>

<P><STRONG><a name="[50f]"></a>u32TXCAN_GetTransmitInterrupts</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>u8TXCAN_GetTransmitInterrupt</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8TXCAN_GetTransmitInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanTxInterrupt
</UL>

<P><STRONG><a name="[510]"></a>vTXCAN_ClearReceiveInterrupts</STRONG> (ARM, 12 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>vTXCAN_ClearReceiveInterrupt</STRONG> (ARM, 36 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTXCAN_ClearReceiveInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[511]"></a>u32TXCAN_GetReceiveInterrupts</STRONG> (ARM, 16 bytes, Stack size 0 bytes, txcan.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>u8TXCAN_GetReceiveInterrupt</STRONG> (ARM, 52 bytes, Stack size 8 bytes, txcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = u8TXCAN_GetReceiveInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCanRxInterrupt
</UL>

<P><STRONG><a name="[19f]"></a>i32AssignQSPISettings</STRONG> (ARM, 2956 bytes, Stack size 20 bytes, qspi.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i32AssignQSPISettings
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
</UL>

<P><STRONG><a name="[193]"></a>i32ClearFlash</STRONG> (ARM, 388 bytes, Stack size 48 bytes, qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmChipErase
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmSectErase
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteEnable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusFlagRead
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusRead
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WaitForCompletion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via BLX)
</UL>

<P><STRONG><a name="[195]"></a>i32WriteToFlashWOE</STRONG> (ARM, 452 bytes, Stack size 56 bytes, qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmPagePgrm
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteEnable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusFlagRead
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusRead
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WaitForCompletion
</UL>

<P><STRONG><a name="[196]"></a>i32WriteToFlashWE</STRONG> (ARM, 636 bytes, Stack size 80 bytes, qspi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmGetRegister
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmPagePgrm
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmSectErase
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmWriteEnable
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusFlagRead
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_PgrmStatusRead
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_WaitForCompletion
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf (via BLX)
</UL>

<P><STRONG><a name="[512]"></a>u32CR4_GetPMN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>vCR4_PMNConfig</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>vCR4_SetCntDivider</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>vCR4_EnablePMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[515]"></a>vCR4_DisablePMU</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>vCR4_EnableCCNT</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[516]"></a>vCR4_DisableCCNT</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>vCR4_EnablePMN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[518]"></a>vCR4_DisablePMN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[519]"></a>u32CR4_ReadCCNT</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>u32CR4_ReadPMN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51b]"></a>u32CR4_ReadFlags</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51c]"></a>vCR4_WriteFlags</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51d]"></a>vCR4_EnableCCNTIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51e]"></a>vCR4_DisableCCNTIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[51f]"></a>vCR4_EnablePmnIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[520]"></a>vCR4_DisablePMNIrq</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>vCR4_ResetPMN</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>vCR4_ResetCCNT</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[522]"></a>vCR4_PMUSoftwareIncrement</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[523]"></a>vCR4_EnablePMUUserAccess</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>vCR4_DisablePMUUserAccess</STRONG> (ARM, 0 bytes, Stack size unknown bytes, cr4_pmu_keil.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>vGfCopyImagesROMtoRAM</STRONG> (ARM, 5352 bytes, Stack size 24 bytes, images_copy_rom_to_ram.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = vGfCopyImagesROMtoRAM &rArr; vGfBuffBlitBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListWaitToComplete
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_copy_word
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1a9]"></a>vGfInitImages</STRONG> (ARM, 8948 bytes, Stack size 0 bytes, images_init.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[199]"></a>vInitGraphicsSystem</STRONG> (ARM, 548 bytes, Stack size 376 bytes, boardcfg.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = vInitGraphicsSystem &rArr; vGfInitGfxMiddleWare &rArr; vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGfxMiddleWare
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1a6]"></a>vBoardCfg</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boardcfg.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = vBoardCfg &rArr; vConfigureQSPI0ReadAccess &rArr; i32AssignQSPISettings
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vConfigureQSPI0ReadAccess
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1a7]"></a>vInitSytem</STRONG> (ARM, 108 bytes, Stack size 16 bytes, main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = vInitSytem &rArr; vInitGraphicsSystem &rArr; vGfInitGfxMiddleWare &rArr; vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffFillArea
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSystemInitFlib
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitStatevariables
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBoardCfg
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitGraphicsSystem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitImages
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[1ad]"></a>sendchar</STRONG> (ARM, 88 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendchar &rArr; i32UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UART_WriteByte
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32UART_IsTxFifoReady
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1ae]"></a>getkey</STRONG> (ARM, 44 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8UART_GetRxDataCnt
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UART_ReadByte
</UL>

<P><STRONG><a name="[b]"></a>fputc</STRONG> (ARM, 24 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; sendchar &rArr; i32UART_WriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>vPinconfig_UART</STRONG> (ARM, 104 bytes, Stack size 8 bytes, main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPinconfig_UART &rArr; i32GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetOutputResistance
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
</UL>

<P><STRONG><a name="[1b3]"></a>vMyInitUart</STRONG> (ARM, 204 bytes, Stack size 40 bytes, main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = vMyInitUart &rArr; vUART_Init &rArr; vUART_Reset &rArr; vUART_Wait
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_TxRunCtrl
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_FlowCtrlConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_FifoConfig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_UART
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[1b7]"></a>vAppMain</STRONG> (ARM, 572 bytes, Stack size 0 bytes, main.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = vAppMain &rArr; vInitSytem &rArr; vInitGraphicsSystem &rArr; vGfInitGfxMiddleWare &rArr; vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerSwitchBufferSync
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UART_WriteByte
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCR4_ResetCCNT
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCR4_EnableCCNT
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCR4_EnablePMU
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via BLX)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitPanelPin
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitAllData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEvalCAN
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearScreen
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBLControl
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAOBInstallEncPollTimer
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMyInitUart
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Hndlr (via Veneer)
</UL>

<P><STRONG><a name="[e2]"></a>vPinconfig_GDC0</STRONG> (ARM, 1064 bytes, Stack size 8 bytes, pinconfig.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPinconfig_GDC0 &rArr; i32GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetOutputResistance
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullUp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGDC0
</UL>

<P><STRONG><a name="[525]"></a>vPinconfig_GDC1</STRONG> (ARM, 4 bytes, Stack size 0 bytes, pinconfig.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>vPinconfig_Buttons</STRONG> (ARM, 236 bytes, Stack size 8 bytes, pinconfig.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinDirection
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullUp
</UL>

<P><STRONG><a name="[1c4]"></a>vPinconfig_CAN</STRONG> (ARM, 104 bytes, Stack size 8 bytes, pinconfig.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPinconfig_CAN &rArr; i32GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetOutputResistance
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullUp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitCAN
</UL>

<P><STRONG><a name="[d]"></a>vShowInit</STRONG> (ARM, 48 bytes, Stack size 8 bytes, myconfig.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = vShowInit &rArr; vfShowImageAt &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1bf]"></a>vInitAllData</STRONG> (ARM, 208 bytes, Stack size 0 bytes, myconfig.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[1d0]"></a>vInitIconTable</STRONG> (ARM, 484 bytes, Stack size 0 bytes, myconfig.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
</UL>

<P><STRONG><a name="[1ab]"></a>vSystemInitFlib</STRONG> (ARM, 56 bytes, Stack size 8 bytes, myfont.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSystemInitFlib
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1c5]"></a>vfShowImageAt</STRONG> (ARM, 44 bytes, Stack size 16 bytes, myfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = vfShowImageAt &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowErrWord
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowInit
</UL>

<P><STRONG><a name="[1c6]"></a>vNGetNextAngle</STRONG> (ARM, 1376 bytes, Stack size 136 bytes, myfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vNGetNextAngle &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via BLX)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul (via BLX)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSpeedNeedle
</UL>

<P><STRONG><a name="[1cb]"></a>stShowString</STRONG> (ARM, 568 bytes, Stack size 40 bytes, myfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapFull
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>

<P><STRONG><a name="[1cc]"></a>vShowNumberAT</STRONG> (ARM, 1256 bytes, Stack size 112 bytes, myfont.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396 + Unknown Stack Size
<LI>Call Chain = vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via BLX)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf (via BLX)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stShowString
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalVoltage
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTorque
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSpeedNumber
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowRotateSpeed
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowMotorT
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowControlT
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowBatteryMinV
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowBatteryMinT
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowBatteryMaxV
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowBatteryMaxT
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowBatteryDropT
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[1c1]"></a>vClearScreen</STRONG> (ARM, 60 bytes, Stack size 16 bytes, icons.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = vClearScreen &rArr; vGfLayerFillArea &rArr; vGfBuffFillArea &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerFillArea
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[1bc]"></a>vBLControl</STRONG> (ARM, 76 bytes, Stack size 16 bytes, icons.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vBLControl &rArr; i32GPIO_SetPinState
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinState
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIcons
</UL>

<P><STRONG><a name="[1ac]"></a>vInitIcons</STRONG> (ARM, 124 bytes, Stack size 16 bytes, icons.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = vInitIcons &rArr; vGfLayerFillArea &rArr; vGfBuffFillArea &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetCommonAlpha
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfShowLayer
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerFillArea
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitIconTable
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBLControl
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[526]"></a>vShowPowerOnLogo</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>vSetIcons</STRONG> (ARM, 60 bytes, Stack size 16 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = vSetIcons &rArr; vGfLayerFillArea &rArr; vGfBuffFillArea &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerFillArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1d3]"></a>vCreatBatSmall</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode
</UL>

<P><STRONG><a name="[1d1]"></a>vGetNextAngle</STRONG> (ARM, 1032 bytes, Stack size 48 bytes, icons.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple (via BLX)
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple (via BLX)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f (via BLX)
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f (via BLX)
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz (via BLX)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq (via BLX)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv (via BLX)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
</UL>

<P><STRONG><a name="[e]"></a>vSetSpeedNeedle</STRONG> (ARM, 248 bytes, Stack size 16 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = vSetSpeedNeedle &rArr; vGfLayerRotateBlendBitmapFull &rArr; vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBlendBitmapFull
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>vShowSpeedNumber</STRONG> (ARM, 104 bytes, Stack size 40 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = vShowSpeedNumber &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>vShowRotateSpeed</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowRotateSpeed &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>vShowkpa</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>vShowkpb</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>vShowMotorPower</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>vShowTotalVoltage</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowTotalVoltage &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>vShowTotalCurrent</STRONG> (ARM, 424 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = vShowTotalCurrent &rArr; vGfLayerRotateBlendBitmapFull &rArr; vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBlendBitmapFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>vShowSOCNumber</STRONG> (ARM, 372 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = vShowSOCNumber &rArr; vGfLayerRotateBlendBitmapFull &rArr; vGfBuffRotateBlendBitmapFull &rArr; vRotLib_RotateBlend &rArr; vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLayerRotateBlendBitmapFull
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub (via BLX)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd (via BLX)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>vShowBatteryVoltage</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>vShowBatteryLife</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>vShowTotalDistance</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>vShowTripDistance</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>vShowTorque</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowTorque &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>vShowMotorT</STRONG> (ARM, 128 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowMotorT &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>vShowControlT</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowControlT &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>vShowBatteryMaxV</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowBatteryMaxV &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>vShowBatteryMinV</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowBatteryMinV &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>vShowBatteryDropV</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>vShowBatteryDropT</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowBatteryDropT &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>vShowChargeTime</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>vShowBatteryT</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>vShowDCACT</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>vShowUPST</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>vShowBatteryMaxT</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowBatteryMaxT &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>vShowBatteryMinT</STRONG> (ARM, 96 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = vShowBatteryMinT &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>vShowAlphaChange</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>vShowCurrentTime</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1d2]"></a>vChargeMode</STRONG> (ARM, 232 bytes, Stack size 48 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vChargeMode &rArr; __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv (via BLX)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCreatBatSmall
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[1d8]"></a>vShowPowerUse</STRONG> (ARM, 4 bytes, Stack size 0 bytes, icons.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[1d4]"></a>vShowPRNDS</STRONG> (ARM, 96 bytes, Stack size 8 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = vShowPRNDS &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapFull
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[1d5]"></a>vShowErrWord</STRONG> (ARM, 124 bytes, Stack size 16 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = vShowErrWord &rArr; vfShowImageAt &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[1d6]"></a>vSetBlPwmFunc</STRONG> (ARM, 124 bytes, Stack size 8 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vSetBlPwmFunc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_PWM_SetDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRunIconFunction
</UL>

<P><STRONG><a name="[2a]"></a>vRunIconFunction</STRONG> (ARM, 324 bytes, Stack size 48 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = vRunIconFunction &rArr; vShowNumberAT &rArr; stShowString &rArr; u32GfLayerBlendBitmapFull &rArr; u32GfBuffBlendBitmapFull &rArr; vGfBuffBlendBitmapFull &rArr; eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vADC_StartConversion
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfListExecute
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfLayerBlendBitmapFull
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetBlPwmFunc
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowErrWord
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowPRNDS
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowPowerUse
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vfShowImageAt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> myconfig.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>vADCISR_Func</STRONG> (ARM, 64 bytes, Stack size 32 bytes, icons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vADCISR_Func &rArr; i8ADC_ReadResult
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8ADC_ReadResult
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_ModifyIrqLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> icons.o(.text)
</UL>
<P><STRONG><a name="[1bb]"></a>vInitPanelPin</STRONG> (ARM, 512 bytes, Stack size 24 bytes, icons.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vInitPanelPin &rArr; i32INTC_SourceConfig &rArr; vSetIR_ByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vADC_StartConversion
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vADC_AdcConversionConfig
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ADC_InputChannelSelection
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_SetISRStartAddress
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SourceConfig
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinState
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinDirection
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullDown
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullUp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_PWM_Enable
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_PWM_SetDuty
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_PWM_SetPeriod
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boTIMER_PWM_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[1aa]"></a>vInitStatevariables</STRONG> (ARM, 144 bytes, Stack size 0 bytes, statevariables.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1e9]"></a>i8GetEncoder</STRONG> (ARM, 64 bytes, Stack size 0 bytes, buttons.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUpdatePushbuttons
</UL>

<P><STRONG><a name="[1e3]"></a>vISREncoder</STRONG> (ARM, 412 bytes, Stack size 24 bytes, buttons.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vISREncoder &rArr; vINTC_ModifyIrqLevel
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_ModifyIrqLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buttons.o(.text)
</UL>
<P><STRONG><a name="[1bd]"></a>vAOBInstallEncPollTimer</STRONG> (ARM, 164 bytes, Stack size 24 bytes, buttons.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = vAOBInstallEncPollTimer &rArr; i32INTC_SourceConfig &rArr; vSetIR_ByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_SetISRStartAddress
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SourceConfig
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_CMPLX_SetCompareVal1
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_CMPLX_StartPrescaler
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_CMPLX_Start
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTIMER_CMPLX_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[527]"></a>vInitPushbuttons</STRONG> (ARM, 152 bytes, Stack size 0 bytes, buttons.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>vUpdatePushbuttons</STRONG> (ARM, 840 bytes, Stack size 8 bytes, buttons.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_GetPinState
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i8GetEncoder
</UL>

<P><STRONG><a name="[1eb]"></a>vCanRxInterrupt</STRONG> (ARM, 324 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = vCanRxInterrupt &rArr; u64TXCAN_ReadMailbox
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_ClearIrq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_ModifyIrqLevel
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32INTC_GetVectAddr
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8TXCAN_GetReceiveInterrupt
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ClearReceiveInterrupt
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ClearPendingReceiveMessage
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u64TXCAN_ReadMailbox
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u16TXCAN_GetStdID
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32TXCAN_GetExtID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1f3]"></a>vCanTxInterrupt</STRONG> (ARM, 80 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = vCanTxInterrupt &rArr; i32INTC_ClearIrq
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_ClearIrq
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_ModifyIrqLevel
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32INTC_GetVectAddr
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u8TXCAN_GetTransmitInterrupt
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ClearTransmitInterrupt
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ClearTransmissionAcknowledge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>vCanStatusInterrupt</STRONG> (ARM, 8 bytes, Stack size 0 bytes, can.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[1a8]"></a>vInitCAN</STRONG> (ARM, 656 bytes, Stack size 48 bytes, can.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = vInitCAN &rArr; i32INTC_SourceConfig &rArr; vSetIR_ByIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCCR_SetCANMode
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vINTC_SetISRStartAddress
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_SourceConfig
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_EnableInterrupt
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ClearTimeStampValue
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureTiming
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureChannel
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_SetAcceptanceMask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetAcceptanceMaskType
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_ConfigureMailbox
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTXCAN_MailboxDisableAll
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPinconfig_CAN
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInitSytem
</UL>

<P><STRONG><a name="[1c0]"></a>vEvalCAN</STRONG> (ARM, 4 bytes, Stack size 0 bytes, can.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain
</UL>

<P><STRONG><a name="[194]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32WriteToFlashWE (via BLX)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32ClearFlash (via BLX)
</UL>

<P><STRONG><a name="[1ce]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT (via BLX)
</UL>

<P><STRONG><a name="[20b]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[20c]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[2d]"></a>_printf_int_dec</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via BLX)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[204]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1cd]"></a>strlen</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowNumberAT (via BLX)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALEMATRIX
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_Y
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_X
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATESCREENOBJECT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MINSCREENOBJECTTYPE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_3DTO2D
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_VECTORMATRIXMULT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_CREATESCREENOBJECT
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DEG2RAD
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfInitGA
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawTriangleSort
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boGDC_ConfigPulseGenA_B
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>

<P><STRONG><a name="[528]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[529]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[52a]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain (via BLX)
</UL>

<P><STRONG><a name="[208]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[20a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[203]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[201]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[9]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[200]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[52b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[207]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[202]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via BLX)
</UL>

<P><STRONG><a name="[209]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[52c]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[210]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[215]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[211]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[52e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[52f]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[218]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[21e]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[22d]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[530]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[22c]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[531]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[217]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[214]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[212]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[21b]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[216]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[532]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[533]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[535]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[223]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[225]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>

<P><STRONG><a name="[21c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[21a]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[538]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[22b]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[21d]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[22e]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[220]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[21f]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[22f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[226]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, h1_extend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[228]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[539]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[224]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[231]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[232]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[198]"></a>asm_copy_word</STRONG> (ARM, 0 bytes, Stack size unknown bytes, copy_functions.o(copy_function), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfCopyImagesROMtoRAM
</UL>

<P><STRONG><a name="[53a]"></a>asm_copy_hword</STRONG> (ARM, 0 bytes, Stack size unknown bytes, copy_functions.o(copy_function), UNUSED)

<P><STRONG><a name="[53b]"></a>asm_copy_byte</STRONG> (ARM, 0 bytes, Stack size unknown bytes, copy_functions.o(copy_function), UNUSED)

<P><STRONG><a name="[156]"></a>__DSB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32INTC_ClearIrq
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Reset
</UL>

<P><STRONG><a name="[53c]"></a>__ISB</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED)

<P><STRONG><a name="[19c]"></a>asm_enable_core_int</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptEnable
</UL>

<P><STRONG><a name="[53d]"></a>asm_disable_core_int</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED)

<P><STRONG><a name="[19d]"></a>asm_enable_core_fast_int</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptEnable
</UL>

<P><STRONG><a name="[53e]"></a>asm_disable_core_fast_int</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED)

<P><STRONG><a name="[19b]"></a>asm_enable_core_vic_port</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vInterruptEnable
</UL>

<P><STRONG><a name="[53f]"></a>asm_disable_core_vic_port</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core.o(core_function), UNUSED)

<P><STRONG><a name="[238]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[233]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 828 bytes, Stack size 136 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[235]"></a>__kernel_cos</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[236]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[237]"></a>__kernel_sin</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[23a]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[23b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[239]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[205]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[97]"></a>acos</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, acos.o(i.acos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
</UL>

<P><STRONG><a name="[136]"></a>ceil</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, ceil.o(i.ceil), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round (via BLX)
</UL>

<P><STRONG><a name="[9a]"></a>cos</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
</UL>

<P><STRONG><a name="[135]"></a>floor</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, floor.o(i.floor), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round (via BLX)
</UL>

<P><STRONG><a name="[9b]"></a>sin</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
</UL>

<P><STRONG><a name="[ad]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[540]"></a>write_burst4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[184]"></a>read_burst4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQSPIC_DirectReadBurst4
</UL>

<P><STRONG><a name="[541]"></a>write_burst8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[186]"></a>read_burst8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQSPIC_DirectReadBurst8
</UL>

<P><STRONG><a name="[542]"></a>word_write</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[182]"></a>word_read</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32QSPIC_DirectReadWord
</UL>

<P><STRONG><a name="[543]"></a>hword_write</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[544]"></a>hword_read</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[545]"></a>byte_write</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[546]"></a>byte_read</STRONG> (ARM, 0 bytes, Stack size unknown bytes, qspic_rw_support.o(rw_support), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[23d]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round (via BLX)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_3DTO2D (via BLX)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_VECTORMATRIXMULT (via BLX)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX (via BLX)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject (via BLX)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMVMUL4x4 (via BLX)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[240]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[243]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[247]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Scale (via BLX)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear (via BLX)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_3DTO2D (via BLX)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DEG2RAD (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode (via BLX)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[245]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject (via BLX)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
</UL>

<P><STRONG><a name="[246]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[248]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateCorrectClipWindow (via BLX)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[249]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[62]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateCorrectClipWindow (via BLX)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend (via BLX)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[547]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TRUNC (via BLX)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND (via BLX)
</UL>

<P><STRONG><a name="[548]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT (via BLX)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_CREATESCREENOBJECT (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode (via BLX)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[549]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[24a]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[24d]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear (via BLX)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate (via BLX)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALEMATRIX (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_Y (via BLX)
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_X (via BLX)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_VECTORMATRIXMULT (via BLX)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX (via BLX)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DEG2RAD (via BLX)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMVMUL4x4 (via BLX)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMMMUL4x4 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[24b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[23f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[242]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round (via BLX)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MAXMATRIXELEMENT (via BLX)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MINSCREENOBJECTTYPE (via BLX)
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MAX2 (via BLX)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DOUBLEABS (via BLX)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND (via BLX)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend (via BLX)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[24c]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[24e]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[23c]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[64]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT (via BLX)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX (via BLX)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS (via BLX)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATESCREENOBJECT (via BLX)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_CREATESCREENOBJECT (via BLX)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP (via BLX)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject (via BLX)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate (via BLX)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum (via BLX)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfInvertMatrix4x4 (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[250]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale (via BLX)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear (via BLX)
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart (via BLX)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlendFull (via BLX)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffPerspectiveBlitFull (via BLX)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleBlendFull (via BLX)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffScaleFull (via BLX)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearBlendFull (via BLX)
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffShearFull (via BLX)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f32CheckAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[251]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent (via BLX)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber (via BLX)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSpeedNeedle (via BLX)
</UL>

<P><STRONG><a name="[253]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[257]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[255]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1c8]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[256]"></a>_fcmpeq</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
</UL>

<P><STRONG><a name="[258]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[259]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_i2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[54a]"></a>_fflt</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$fflt), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[54b]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[1c7]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[25a]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[25d]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart (via BLX)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart (via BLX)
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[25b]"></a>_fmul</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[252]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[23e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fmul
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[1c9]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[25c]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[25e]"></a>_frsb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, faddsub_clz.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNGetNextAngle (via BLX)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowTotalCurrent (via BLX)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vShowSOCNumber (via BLX)
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSetSpeedNeedle (via BLX)
</UL>

<P><STRONG><a name="[260]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Shear (via BLX)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate (via BLX)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TRUNC (via BLX)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND (via BLX)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL (via BLX)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL (via BLX)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend (via BLX)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective (via BLX)
</UL>

<P><STRONG><a name="[261]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[244]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[234]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acos
</UL>

<P><STRONG><a name="[262]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_idiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$sdiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase (via BLX)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill (via BLX)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32TIMER_PWM_SetWaveform (via BLX)
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_uidiv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$udiv))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationBlendFull (via BLX)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFullOptimized (via BLX)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffTransformationFull (via BLX)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle (via BLX)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill (via BLX)
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u32GfGetNeedleNumber (via BLX)
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32UART_GetBaudRate (via BLX)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vChargeMode (via BLX)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGetNextAngle (via BLX)
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, aeabi_sdiv_cr4.o(x$udivmod), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized (via BLX)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[32]"></a>boIsAntiClockwise</STRONG> (ARM, 104 bytes, Stack size 12 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfDrawTriangleSort
</UL>

<P><STRONG><a name="[30]"></a>vGfDrawTriangleSort</STRONG> (ARM, 784 bytes, Stack size 64 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawTriangle
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boIsAntiClockwise
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawPolygon
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[35]"></a>vGfDrawCircleWithEndCaps</STRONG> (ARM, 124 bytes, Stack size 48 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawLine
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffDrawCircle
</UL>

<P><STRONG><a name="[7a]"></a>u32GfGetMinXCoordinate</STRONG> (ARM, 96 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
</UL>

<P><STRONG><a name="[7b]"></a>u32GfGetMinYCoordinate</STRONG> (ARM, 104 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
</UL>

<P><STRONG><a name="[7c]"></a>u32GfGetMaxXCoordinate</STRONG> (ARM, 92 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
</UL>

<P><STRONG><a name="[7d]"></a>u32GfGetMaxYCoordinate</STRONG> (ARM, 100 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
</UL>

<P><STRONG><a name="[40]"></a>eHandleClipWindowBlit</STRONG> (ARM, 1328 bytes, Stack size 96 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = eHandleClipWindowBlit &rArr; vBlit_SetClippWnd
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBlit_SetClippWnd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapPart
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapFull
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE32
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24A
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE24
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendBitmapRLE16
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlendFillArea
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapPart
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapFull
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE32
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24A
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE24
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffBlitBitmapRLE16
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffFillArea
</UL>

<P><STRONG><a name="[5d]"></a>f32CheckAngle</STRONG> (ARM, 304 bytes, Stack size 64 bytes, gfunctions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = f32CheckAngle &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBase
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleTipandBaseFill
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateNeedleFill
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapPart
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBlendBitmapFull
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapOptimized
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapPart
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfBuffRotateBitmapFull
</UL>

<P><STRONG><a name="[a7]"></a>f64GETMATRIX</STRONG> (ARM, 80 bytes, Stack size 0 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfScale
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfTranslate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLoadIP
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfLoadIdentity
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum
</UL>

<P><STRONG><a name="[a1]"></a>vMMMUL4x4</STRONG> (ARM, 3196 bytes, Stack size 216 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfRotate
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfScale
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfTranslate
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfFrustum
</UL>

<P><STRONG><a name="[a2]"></a>vMVMUL4x4</STRONG> (ARM, 724 bytes, Stack size 120 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iProject
</UL>

<P><STRONG><a name="[a3]"></a>iGfInvertMatrix4x4</STRONG> (ARM, 6020 bytes, Stack size 352 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfUnProject
</UL>

<P><STRONG><a name="[ae]"></a>iProject</STRONG> (ARM, 472 bytes, Stack size 80 bytes, gfunctions.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vMVMUL4x4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGfSetIP
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iGfProject
</UL>

<P><STRONG><a name="[11d]"></a>RE_FLOAT64TOUINT32</STRONG> (ARM, 28 bytes, Stack size 16 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RE_FLOAT64TOUINT32 &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Scale
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
</UL>

<P><STRONG><a name="[11e]"></a>RE_FLOAT64ROUND</STRONG> (ARM, 116 bytes, Stack size 32 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RE_FLOAT64ROUND &rArr; __aeabi_d2lz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateTransformationMatrix_Rotate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT
</UL>

<P><STRONG><a name="[13b]"></a>vSaveGlFwRotCornerCoord</STRONG> (ARM, 72 bytes, Stack size 0 bytes, rotation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Scale
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull
</UL>

<P><STRONG><a name="[124]"></a>RE_DOUBLEABS</STRONG> (ARM, 68 bytes, Stack size 24 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MAXMATRIXELEMENT
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateCorrectClipWindow
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
</UL>

<P><STRONG><a name="[125]"></a>vRotLib_CalculateCorrectClipWindow</STRONG> (ARM, 800 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DOUBLEABS
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
</UL>

<P><STRONG><a name="[126]"></a>RE_DEG2RAD</STRONG> (ARM, 168 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[127]"></a>RE_ROTMATRIX</STRONG> (ARM, 588 bytes, Stack size 176 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[128]"></a>RE_CREATESCREENOBJECT</STRONG> (ARM, 280 bytes, Stack size 176 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[129]"></a>RE_VECTORMATRIXMULT</STRONG> (ARM, 484 bytes, Stack size 96 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[12a]"></a>RE_MAX2</STRONG> (ARM, 76 bytes, Stack size 32 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[12b]"></a>RE_3DTO2D</STRONG> (ARM, 440 bytes, Stack size 48 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[12c]"></a>RE_MINSCREENOBJECTTYPE</STRONG> (ARM, 428 bytes, Stack size 64 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[12d]"></a>RE_TRANSLATESCREENOBJECT</STRONG> (ARM, 516 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
</UL>

<P><STRONG><a name="[12e]"></a>RE_SCALESCREENOBJECT_X</STRONG> (ARM, 180 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[12f]"></a>RE_SCALESCREENOBJECT_Y</STRONG> (ARM, 180 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FORWARDROT
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[130]"></a>RE_FORWARDROT</STRONG> (ARM, 728 bytes, Stack size 528 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_Y
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALESCREENOBJECT_X
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATESCREENOBJECT
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MINSCREENOBJECTTYPE
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_3DTO2D
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MAX2
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_VECTORMATRIXMULT
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_CREATESCREENOBJECT
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_ROTMATRIX
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DEG2RAD
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[131]"></a>RE_SORTCORNERS</STRONG> (ARM, 7260 bytes, Stack size 368 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_CalculateForwardRotatedCornerCoordinates_Shear
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[132]"></a>RE_SCALEMATRIX</STRONG> (ARM, 292 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
</UL>

<P><STRONG><a name="[133]"></a>RE_MAXMATRIXELEMENT</STRONG> (ARM, 528 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_DOUBLEABS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_BACKWARDMATRIX
</UL>

<P><STRONG><a name="[137]"></a>RE_BACKWARDMATRIX</STRONG> (ARM, 34648 bytes, Stack size 376 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_MAXMATRIXELEMENT
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SCALEMATRIX
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[138]"></a>RE_FLOAT64TRUNC</STRONG> (ARM, 36 bytes, Stack size 24 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d (via BLX)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_TRANSLATEOBJECT
</UL>

<P><STRONG><a name="[139]"></a>RE_TRANSLATEOBJECT</STRONG> (ARM, 552 bytes, Stack size 72 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TRUNC
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
</UL>

<P><STRONG><a name="[13a]"></a>vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull</STRONG> (ARM, 2776 bytes, Stack size 152 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = vRotLib_CalculateForwardRotatedCornerCoordinates_RotateFull &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSaveGlFwRotCornerCoord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
</UL>

<P><STRONG><a name="[13c]"></a>vRotLib_CalculateForwardRotatedCornerCoordinates_RotatePart</STRONG> (ARM, 2732 bytes, Stack size 152 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSaveGlFwRotCornerCoord
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64ROUND
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via BLX)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos (via BLX)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv (via BLX)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub (via BLX)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
</UL>

<P><STRONG><a name="[13d]"></a>vRotLib_CalculateForwardRotatedCornerCoordinates_Shear</STRONG> (ARM, 932 bytes, Stack size 216 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_SORTCORNERS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSaveGlFwRotCornerCoord
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
</UL>

<P><STRONG><a name="[13e]"></a>vRotLib_CalculateForwardRotatedCornerCoordinates_Scale</STRONG> (ARM, 1236 bytes, Stack size 120 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSaveGlFwRotCornerCoord
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RE_FLOAT64TOUINT32
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d (via BLX)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple (via BLX)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul (via BLX)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d (via BLX)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d (via BLX)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz (via BLX)
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd (via BLX)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
</UL>

<P><STRONG><a name="[13f]"></a>vRotLib_CheckForNegativeCoordinates</STRONG> (ARM, 960 bytes, Stack size 40 bytes, rotation.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Shear
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Scale
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate_Part
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Rotate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveOGL
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_Perspective
</UL>

<P><STRONG><a name="[142]"></a>vRotLib_CheckForNegativeCoordinatesBlend</STRONG> (ARM, 896 bytes, Stack size 40 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vRotLib_CheckForNegativeCoordinatesBlend
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ShearBlend
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_ScaleBlend
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend_Part
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_RotateBlend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlendOGL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vRotLib_PerspectiveBlend
</UL>

<P><STRONG><a name="[14e]"></a>vUpdateDCR_HighWord_Special</STRONG> (ARM, 84 bytes, Stack size 8 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vUpdateDCR_HighWord_Special
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_LayerEnable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_Switch
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDitheringMode
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetDispConfigType
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_GAPIFEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boGDC_ClrDcrBusErrors
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_WindowEnable
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_EnableSelectiveCorr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_ColorCorrectEnable
</UL>

<P><STRONG><a name="[14c]"></a>vUpdateDCR_Special</STRONG> (ARM, 64 bytes, Stack size 12 bytes, gdc.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vUpdateDCR_Special &rArr; vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vGDC_SetShadowRegUpdateMode
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GDC_SetDataFormat
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boGDC_ClrDcrBusErrors
</UL>

<P><STRONG><a name="[157]"></a>vUART_Wait</STRONG> (ARM, 44 bytes, Stack size 8 bytes, hsuart.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vUART_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUART_Reset
</UL>

<P><STRONG><a name="[2b]"></a>Reset_Hndlr</STRONG> (ARM, 0 bytes, Stack size unknown bytes, core_bootloader_keil.o(init), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Reset_Hndlr &rArr; vAppMain &rArr; vInitSytem &rArr; vInitGraphicsSystem &rArr; vGfInitGfxMiddleWare &rArr; vGfInitGA &rArr; i32CCR_EnableModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vAppMain (via Veneer)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vASM_Init_zi
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vASM_Init8WordsInBurst
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vASM_Copy_all_areas
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vDMC_Cfg
</UL>

<P><STRONG><a name="[19a]"></a>vInterruptEnable</STRONG> (ARM, 20 bytes, Stack size 8 bytes, boardcfg.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = vInterruptEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_enable_core_vic_port
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_enable_core_fast_int
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asm_enable_core_int
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBoardCfg
</UL>

<P><STRONG><a name="[19e]"></a>vConfigureQSPI0ReadAccess</STRONG> (ARM, 404 bytes, Stack size 48 bytes, boardcfg.o(.text), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vConfigureQSPI0ReadAccess &rArr; i32AssignQSPISettings
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_SetClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32CCR_EnableModuleClock
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_ConfigurePrgControl
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32QSPIC_ConfigureDirectControl
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetPinFunction
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnableLatchFunction
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_SetOutputResistance
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32GPIO_EnablePullDown
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i32AssignQSPISettings
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vBoardCfg
</UL>

<P><STRONG><a name="[24f]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[241]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[25f]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[254]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
