; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\esei.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\esei.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\esei.crf ..\..\..\..\lldd\src\esei.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vESEI_GetVersion PROC
;;;66     
;;;67     void vESEI_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;68                           uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;69                           uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;70     {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;71        *pau8ModuleRevision = &au8LLDD_ESEI_C_REVISION[0];
000008  e59f6df0          LDR      r6,|L1.3584|
00000c  e5806000          STR      r6,[r0,#0]
;;;72        *pau8ModuleTag      = &au8LLDD_ESEI_C_TAG[0];
000010  e59f6dec          LDR      r6,|L1.3588|
000014  e5816000          STR      r6,[r1,#0]
;;;73        *pau8HeaderRevision = &au8LLDD_ESEI_H_REVISION[0];
000018  e59f6de8          LDR      r6,|L1.3592|
00001c  e5826000          STR      r6,[r2,#0]
;;;74        *pau8HeaderTag      = &au8LLDD_ESEI_H_TAG[0];
000020  e59f6de4          LDR      r6,|L1.3596|
000024  e5836000          STR      r6,[r3,#0]
;;;75        *pau8IORevision     = &au8LLDD_ESEI_IO_H_REVISION[0];
000028  e59f6de0          LDR      r6,|L1.3600|
00002c  e5846000          STR      r6,[r4,#0]
;;;76        *pau8IOTag          = &au8LLDD_ESEI_IO_H_TAG[0];
000030  e59f6ddc          LDR      r6,|L1.3604|
000034  e5856000          STR      r6,[r5,#0]
;;;77     }
000038  e8bd8070          POP      {r4-r6,pc}
;;;78     
                          ENDP

                  vESEI_Config PROC
;;;80     /****************************************************************************/
;;;81     void vESEI_Config(esei_ch_e eCh, esei_ctrlcfg_st stCfg)
00003c  e92d4007          PUSH     {r0-r2,lr}
;;;82     {
;;;83         esei_opmode_e eOpMode;
;;;84     
;;;85         /* Get current OPMODE */
;;;86         eOpMode = (esei_opmode_e) biGetSEMCR_OPMODE((uint16_t)eCh);
000040  e1a02c00          LSL      r2,r0,#24
000044  e1a02622          LSR      r2,r2,#12
000048  e24225ff          SUB      r2,r2,#0x3fc00000
00004c  e2422ade          SUB      r2,r2,#0xde000
000050  e5d22000          LDRB     r2,[r2,#0]
000054  e1a01322          LSR      r1,r2,#6
;;;87     
;;;88         /* Switch to configuration mode (if neccessary) */
;;;89         if( ESEI_OPM_ACT == eOpMode )
000058  e3510002          CMP      r1,#2
00005c  1a00000b          BNE      |L1.144|
;;;90         {
;;;91             vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
000060  e1a02c00          LSL      r2,r0,#24
000064  e1a02622          LSR      r2,r2,#12
000068  e24225ff          SUB      r2,r2,#0x3fc00000
00006c  e2422ade          SUB      r2,r2,#0xde000
000070  e5d22000          LDRB     r2,[r2,#0]
000074  e3c220c0          BIC      r2,r2,#0xc0
000078  e2822040          ADD      r2,r2,#0x40
00007c  e1a03c00          LSL      r3,r0,#24
000080  e1a03623          LSR      r3,r3,#12
000084  e24335ff          SUB      r3,r3,#0x3fc00000
000088  e2433ade          SUB      r3,r3,#0xde000
00008c  e5c32000          STRB     r2,[r3,#0]
                  |L1.144|
;;;92         }
;;;93     
;;;94         /* Master/Slave mode */
;;;95         vSetSECR0_MSTR(eCh, (uint16_t)stCfg.eMode);
000090  e5dd3004          LDRB     r3,[sp,#4]
000094  e1a02c00          LSL      r2,r0,#24
000098  e1a02622          LSR      r2,r2,#12
00009c  e24225ff          SUB      r2,r2,#0x3fc00000
0000a0  e2422ade          SUB      r2,r2,#0xde000
0000a4  e1d220b4          LDRH     r2,[r2,#4]
0000a8  e7c32193          BFI      r2,r3,#3,#1
0000ac  e1a03c00          LSL      r3,r0,#24
0000b0  e1a03623          LSR      r3,r3,#12
0000b4  e24335ff          SUB      r3,r3,#0x3fc00000
0000b8  e2433ade          SUB      r3,r3,#0xde000
0000bc  e1c320b4          STRH     r2,[r3,#4]
;;;96     
;;;97         /* LSB/MSB Bit Order */
;;;98         vSetSECR0_SBOS(eCh, (uint16_t)stCfg.eBitOrder);
0000c0  e5dd3005          LDRB     r3,[sp,#5]
0000c4  e1a02c00          LSL      r2,r0,#24
0000c8  e1a02622          LSR      r2,r2,#12
0000cc  e24225ff          SUB      r2,r2,#0x3fc00000
0000d0  e2422ade          SUB      r2,r2,#0xde000
0000d4  e1d220b4          LDRH     r2,[r2,#4]
0000d8  e7c22113          BFI      r2,r3,#2,#1
0000dc  e1a03c00          LSL      r3,r0,#24
0000e0  e1a03623          LSR      r3,r3,#12
0000e4  e24335ff          SUB      r3,r3,#0x3fc00000
0000e8  e2433ade          SUB      r3,r3,#0xde000
0000ec  e1c320b4          STRH     r2,[r3,#4]
;;;99     
;;;100        /* SSI valid in Master Mode */
;;;101        vSetSECR0_SSIVAL(eCh, (uint16_t)stCfg.eSsiValid);
0000f0  e5dd3006          LDRB     r3,[sp,#6]
0000f4  e1a02c00          LSL      r2,r0,#24
0000f8  e1a02622          LSR      r2,r2,#12
0000fc  e24225ff          SUB      r2,r2,#0x3fc00000
000100  e2422ade          SUB      r2,r2,#0xde000
000104  e1d220b4          LDRH     r2,[r2,#4]
000108  e7c52293          BFI      r2,r3,#5,#1
00010c  e1a03c00          LSL      r3,r0,#24
000110  e1a03623          LSR      r3,r3,#12
000114  e24335ff          SUB      r3,r3,#0x3fc00000
000118  e2433ade          SUB      r3,r3,#0xde000
00011c  e1c320b4          STRH     r2,[r3,#4]
;;;102    
;;;103        /* SEI Phase selection */
;;;104        vSetSECR0_SPHA(eCh, (uint16_t)stCfg.ePhase);
000120  e5dd3007          LDRB     r3,[sp,#7]
000124  e1a02c00          LSL      r2,r0,#24
000128  e1a02622          LSR      r2,r2,#12
00012c  e24225ff          SUB      r2,r2,#0x3fc00000
000130  e2422ade          SUB      r2,r2,#0xde000
000134  e1d220b4          LDRH     r2,[r2,#4]
000138  e7c12093          BFI      r2,r3,#1,#1
00013c  e1a03c00          LSL      r3,r0,#24
000140  e1a03623          LSR      r3,r3,#12
000144  e24335ff          SUB      r3,r3,#0x3fc00000
000148  e2433ade          SUB      r3,r3,#0xde000
00014c  e1c320b4          STRH     r2,[r3,#4]
;;;105    
;;;106        /* SEI Polarity (TX format) */
;;;107        vSetSECR0_SPOL(eCh, (uint16_t)stCfg.ePolarity);
000150  e5dd3008          LDRB     r3,[sp,#8]
000154  e1a02c00          LSL      r2,r0,#24
000158  e1a02622          LSR      r2,r2,#12
00015c  e24225ff          SUB      r2,r2,#0x3fc00000
000160  e2422ade          SUB      r2,r2,#0xde000
000164  e1d220b4          LDRH     r2,[r2,#4]
000168  e7c02013          BFI      r2,r3,#0,#1
00016c  e1a03c00          LSL      r3,r0,#24
000170  e1a03623          LSR      r3,r3,#12
000174  e24335ff          SUB      r3,r3,#0x3fc00000
000178  e2433ade          SUB      r3,r3,#0xde000
00017c  e1c320b4          STRH     r2,[r3,#4]
;;;108    
;;;109        /* Restore OPMODE (if changed) */
;;;110        if( ESEI_OPM_ACT == eOpMode )
000180  e3510002          CMP      r1,#2
000184  1a00000b          BNE      |L1.440|
;;;111        {
;;;112            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
000188  e1a02c00          LSL      r2,r0,#24
00018c  e1a02622          LSR      r2,r2,#12
000190  e24225ff          SUB      r2,r2,#0x3fc00000
000194  e2422ade          SUB      r2,r2,#0xde000
000198  e5d22000          LDRB     r2,[r2,#0]
00019c  e3c220c0          BIC      r2,r2,#0xc0
0001a0  e2822080          ADD      r2,r2,#0x80
0001a4  e1a03c00          LSL      r3,r0,#24
0001a8  e1a03623          LSR      r3,r3,#12
0001ac  e24335ff          SUB      r3,r3,#0x3fc00000
0001b0  e2433ade          SUB      r3,r3,#0xde000
0001b4  e5c32000          STRB     r2,[r3,#0]
                  |L1.440|
;;;113        }
;;;114    
;;;115    }
0001b8  e8bd800e          POP      {r1-r3,pc}
;;;116    
                          ENDP

                  vESEI_IrqConfig PROC
;;;118    /****************************************************************************/
;;;119    void vESEI_IrqConfig(esei_ch_e eCh, esei_irqcfg_st stCfg)
0001bc  e92d4007          PUSH     {r0-r2,lr}
;;;120    {
;;;121        esei_opmode_e eOpMode;
;;;122    
;;;123        /* Save current OPMODE */
;;;124        eOpMode = (esei_opmode_e)(biGetSEMCR_OPMODE(eCh));
0001c0  e1a02c00          LSL      r2,r0,#24
0001c4  e1a02622          LSR      r2,r2,#12
0001c8  e24225ff          SUB      r2,r2,#0x3fc00000
0001cc  e2422ade          SUB      r2,r2,#0xde000
0001d0  e5d22000          LDRB     r2,[r2,#0]
0001d4  e1a01322          LSR      r1,r2,#6
;;;125    
;;;126        /* Switch to configuration mode (if neccessary) */
;;;127        if( ESEI_OPM_ACT == eOpMode )
0001d8  e3510002          CMP      r1,#2
0001dc  1a00000b          BNE      |L1.528|
;;;128        {
;;;129            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
0001e0  e1a02c00          LSL      r2,r0,#24
0001e4  e1a02622          LSR      r2,r2,#12
0001e8  e24225ff          SUB      r2,r2,#0x3fc00000
0001ec  e2422ade          SUB      r2,r2,#0xde000
0001f0  e5d22000          LDRB     r2,[r2,#0]
0001f4  e3c220c0          BIC      r2,r2,#0xc0
0001f8  e2822040          ADD      r2,r2,#0x40
0001fc  e1a03c00          LSL      r3,r0,#24
000200  e1a03623          LSR      r3,r3,#12
000204  e24335ff          SUB      r3,r3,#0x3fc00000
000208  e2433ade          SUB      r3,r3,#0xde000
00020c  e5c32000          STRB     r2,[r3,#0]
                  |L1.528|
;;;130        }
;;;131    
;;;132        /* IDLE IRQ enable/disable */
;;;133        vSetSECR0_SILIE(eCh, (uint16_t)stCfg.eIdleIrqEn);
000210  e5dd3004          LDRB     r3,[sp,#4]
000214  e1a02c00          LSL      r2,r0,#24
000218  e1a02622          LSR      r2,r2,#12
00021c  e24225ff          SUB      r2,r2,#0x3fc00000
000220  e2422ade          SUB      r2,r2,#0xde000
000224  e1d220b4          LDRH     r2,[r2,#4]
000228  e7cb2593          BFI      r2,r3,#11,#1
00022c  e1a03c00          LSL      r3,r0,#24
000230  e1a03623          LSR      r3,r3,#12
000234  e24335ff          SUB      r3,r3,#0x3fc00000
000238  e2433ade          SUB      r3,r3,#0xde000
00023c  e1c320b4          STRH     r2,[r3,#4]
;;;134        /* Overflow IRQ enable/disable */
;;;135        vSetSECR0_SOEIE(eCh, (uint16_t)stCfg.eOvflowIrqEn);
000240  e5dd3005          LDRB     r3,[sp,#5]
000244  e1a02c00          LSL      r2,r0,#24
000248  e1a02622          LSR      r2,r2,#12
00024c  e24225ff          SUB      r2,r2,#0x3fc00000
000250  e2422ade          SUB      r2,r2,#0xde000
000254  e1d220b4          LDRH     r2,[r2,#4]
000258  e7ca2513          BFI      r2,r3,#10,#1
00025c  e1a03c00          LSL      r3,r0,#24
000260  e1a03623          LSR      r3,r3,#12
000264  e24335ff          SUB      r3,r3,#0x3fc00000
000268  e2433ade          SUB      r3,r3,#0xde000
00026c  e1c320b4          STRH     r2,[r3,#4]
;;;136        /* Underflow IRQ enable/disable */
;;;137        vSetSECR0_SUEIE(eCh, (uint16_t)stCfg.eUndflowIrqEn);
000270  e5dd3006          LDRB     r3,[sp,#6]
000274  e1a02c00          LSL      r2,r0,#24
000278  e1a02622          LSR      r2,r2,#12
00027c  e24225ff          SUB      r2,r2,#0x3fc00000
000280  e2422ade          SUB      r2,r2,#0xde000
000284  e1d220b4          LDRH     r2,[r2,#4]
000288  e7c92493          BFI      r2,r3,#9,#1
00028c  e1a03c00          LSL      r3,r0,#24
000290  e1a03623          LSR      r3,r3,#12
000294  e24335ff          SUB      r3,r3,#0x3fc00000
000298  e2433ade          SUB      r3,r3,#0xde000
00029c  e1c320b4          STRH     r2,[r3,#4]
;;;138        /* TX format error IRQ enable/disable */
;;;139        vSetSECR0_STFIE(eCh, (uint16_t)stCfg.eTransFmtIrqEn);
0002a0  e5dd3007          LDRB     r3,[sp,#7]
0002a4  e1a02c00          LSL      r2,r0,#24
0002a8  e1a02622          LSR      r2,r2,#12
0002ac  e24225ff          SUB      r2,r2,#0x3fc00000
0002b0  e2422ade          SUB      r2,r2,#0xde000
0002b4  e1d220b4          LDRH     r2,[r2,#4]
0002b8  e7c82413          BFI      r2,r3,#8,#1
0002bc  e1a03c00          LSL      r3,r0,#24
0002c0  e1a03623          LSR      r3,r3,#12
0002c4  e24335ff          SUB      r3,r3,#0x3fc00000
0002c8  e2433ade          SUB      r3,r3,#0xde000
0002cc  e1c320b4          STRH     r2,[r3,#4]
;;;140        /* Parity IRQ enable/disbale */
;;;141        vSetSEPR_SPIE(eCh, (uint8_t)stCfg.eParityIrqEn);
0002d0  e5dd3008          LDRB     r3,[sp,#8]
0002d4  e1a02c00          LSL      r2,r0,#24
0002d8  e1a02622          LSR      r2,r2,#12
0002dc  e24225ff          SUB      r2,r2,#0x3fc00000
0002e0  e2422ade          SUB      r2,r2,#0xde000
0002e4  e5d22028          LDRB     r2,[r2,#0x28]
0002e8  e7c12093          BFI      r2,r3,#1,#1
0002ec  e1a03c00          LSL      r3,r0,#24
0002f0  e1a03623          LSR      r3,r3,#12
0002f4  e24335ff          SUB      r3,r3,#0x3fc00000
0002f8  e2433ade          SUB      r3,r3,#0xde000
0002fc  e5c32028          STRB     r2,[r3,#0x28]
;;;142    
;;;143        /* Restore OPMODE (if changed) */
;;;144        if(ESEI_OPM_ACT == eOpMode )
000300  e3510002          CMP      r1,#2
000304  1a00000b          BNE      |L1.824|
;;;145        {
;;;146            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
000308  e1a02c00          LSL      r2,r0,#24
00030c  e1a02622          LSR      r2,r2,#12
000310  e24225ff          SUB      r2,r2,#0x3fc00000
000314  e2422ade          SUB      r2,r2,#0xde000
000318  e5d22000          LDRB     r2,[r2,#0]
00031c  e3c220c0          BIC      r2,r2,#0xc0
000320  e2822080          ADD      r2,r2,#0x80
000324  e1a03c00          LSL      r3,r0,#24
000328  e1a03623          LSR      r3,r3,#12
00032c  e24335ff          SUB      r3,r3,#0x3fc00000
000330  e2433ade          SUB      r3,r3,#0xde000
000334  e5c32000          STRB     r2,[r3,#0]
                  |L1.824|
;;;147        }
;;;148    }
000338  e8bd800e          POP      {r1-r3,pc}
;;;149    
                          ENDP

                  vESEI_SetOpMode PROC
;;;151    /****************************************************************************/
;;;152    void vESEI_SetOpMode(esei_ch_e eCh, esei_opmode_e eMode)
00033c  e1a02c00          LSL      r2,r0,#24
;;;153    {
;;;154        vSetSEMCR_OPMODE(eCh, (uint8_t)eMode);
000340  e1a02622          LSR      r2,r2,#12
000344  e24225ff          SUB      r2,r2,#0x3fc00000
000348  e2422ade          SUB      r2,r2,#0xde000
00034c  e5d22000          LDRB     r2,[r2,#0]
000350  e7c72311          BFI      r2,r1,#6,#2
000354  e1a03c00          LSL      r3,r0,#24
000358  e1a03623          LSR      r3,r3,#12
00035c  e24335ff          SUB      r3,r3,#0x3fc00000
000360  e2433ade          SUB      r3,r3,#0xde000
000364  e5c32000          STRB     r2,[r3,#0]
;;;155    }
000368  e12fff1e          BX       lr
;;;156    
                          ENDP

                  vESEI_SetTransferSize PROC
;;;158    /****************************************************************************/
;;;159    void vESEI_SetTransferSize(esei_ch_e eCh, esei_ssz_e eTxSize)
00036c  e92d4010          PUSH     {r4,lr}
;;;160    {
;;;161        esei_opmode_e eOpMode;
;;;162    
;;;163        /* Get current OPMODE */
;;;164        eOpMode = (esei_opmode_e) (biGetSEMCR_OPMODE((uint16_t)eCh));
000370  e1a03c00          LSL      r3,r0,#24
000374  e1a03623          LSR      r3,r3,#12
000378  e24335ff          SUB      r3,r3,#0x3fc00000
00037c  e2433ade          SUB      r3,r3,#0xde000
000380  e5d33000          LDRB     r3,[r3,#0]
000384  e1a02323          LSR      r2,r3,#6
;;;165    
;;;166        if( ESEI_OPM_ACT == eOpMode )
000388  e3520002          CMP      r2,#2
00038c  1a000023          BNE      |L1.1056|
;;;167        {
;;;168            /* Switch to configuration mode */
;;;169            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
000390  e1a03c00          LSL      r3,r0,#24
000394  e1a03623          LSR      r3,r3,#12
000398  e24335ff          SUB      r3,r3,#0x3fc00000
00039c  e2433ade          SUB      r3,r3,#0xde000
0003a0  e5d33000          LDRB     r3,[r3,#0]
0003a4  e3c330c0          BIC      r3,r3,#0xc0
0003a8  e2833040          ADD      r3,r3,#0x40
0003ac  e1a04c00          LSL      r4,r0,#24
0003b0  e1a04624          LSR      r4,r4,#12
0003b4  e24445ff          SUB      r4,r4,#0x3fc00000
0003b8  e2444ade          SUB      r4,r4,#0xde000
0003bc  e5c43000          STRB     r3,[r4,#0]
;;;170    
;;;171            /* Set Transfer Size */
;;;172            vSetSECR1_SSZ(eCh, (uint16_t)eTxSize);
0003c0  e1a03c00          LSL      r3,r0,#24
0003c4  e1a03623          LSR      r3,r3,#12
0003c8  e24335ff          SUB      r3,r3,#0x3fc00000
0003cc  e2433ade          SUB      r3,r3,#0xde000
0003d0  e1d330b8          LDRH     r3,[r3,#8]
0003d4  e7c43011          BFI      r3,r1,#0,#5
0003d8  e1a04c00          LSL      r4,r0,#24
0003dc  e1a04624          LSR      r4,r4,#12
0003e0  e24445ff          SUB      r4,r4,#0x3fc00000
0003e4  e2444ade          SUB      r4,r4,#0xde000
0003e8  e1c430b8          STRH     r3,[r4,#8]
;;;173    
;;;174            /* Restore Original OPMODE */
;;;175            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
0003ec  e1a03c00          LSL      r3,r0,#24
0003f0  e1a03623          LSR      r3,r3,#12
0003f4  e24335ff          SUB      r3,r3,#0x3fc00000
0003f8  e2433ade          SUB      r3,r3,#0xde000
0003fc  e5d33000          LDRB     r3,[r3,#0]
000400  e3c330c0          BIC      r3,r3,#0xc0
000404  e2833080          ADD      r3,r3,#0x80
000408  e1a04c00          LSL      r4,r0,#24
00040c  e1a04624          LSR      r4,r4,#12
000410  e24445ff          SUB      r4,r4,#0x3fc00000
000414  e2444ade          SUB      r4,r4,#0xde000
000418  e5c43000          STRB     r3,[r4,#0]
00041c  ea00000a          B        |L1.1100|
                  |L1.1056|
;;;176        }
;;;177        else
;;;178        {
;;;179            /* Set Transfer Size */
;;;180            vSetSECR1_SSZ(eCh, (uint16_t)eTxSize);
000420  e1a03c00          LSL      r3,r0,#24
000424  e1a03623          LSR      r3,r3,#12
000428  e24335ff          SUB      r3,r3,#0x3fc00000
00042c  e2433ade          SUB      r3,r3,#0xde000
000430  e1d330b8          LDRH     r3,[r3,#8]
000434  e7c43011          BFI      r3,r1,#0,#5
000438  e1a04c00          LSL      r4,r0,#24
00043c  e1a04624          LSR      r4,r4,#12
000440  e24445ff          SUB      r4,r4,#0x3fc00000
000444  e2444ade          SUB      r4,r4,#0xde000
000448  e1c430b8          STRH     r3,[r4,#8]
                  |L1.1100|
;;;181        }
;;;182    
;;;183    }
00044c  e8bd8010          POP      {r4,pc}
;;;184    
                          ENDP

                  i32ESEI_SetBitRate PROC
;;;185    /****************************************************************************/
;;;186    int32_t i32ESEI_SetBitRate(esei_ch_e eCh, uint32_t u32BitRate)
000450  e92d47f0          PUSH     {r4-r10,lr}
;;;187    {
000454  e1a04000          MOV      r4,r0
000458  e1a05001          MOV      r5,r1
;;;188        uint8_t       u8Ser;
;;;189        esei_opmode_e eOpMode;
;;;190        int32_t       i32Res = C_SUCCESS;
00045c  e3a08000          MOV      r8,#0
;;;191    
;;;192        /* Get current OPMODE */
;;;193        eOpMode = (esei_opmode_e) (biGetSEMCR_OPMODE((uint16_t)eCh));
000460  e1a00c04          LSL      r0,r4,#24
000464  e1a00620          LSR      r0,r0,#12
000468  e24005ff          SUB      r0,r0,#0x3fc00000
00046c  e2400ade          SUB      r0,r0,#0xde000
000470  e5d00000          LDRB     r0,[r0,#0]
000474  e1a07320          LSR      r7,r0,#6
;;;194    
;;;195        if( (u32BitRate > (uint32_t) ESEI_MIN_BITRATE) && (u32BitRate <  (uint32_t) ESEI_MAX_BITRATE) )
000478  e3000111          MOV      r0,#0x111
00047c  e1550000          CMP      r5,r0
000480  9a00003d          BLS      |L1.1404|
000484  e59f098c          LDR      r0,|L1.3608|
000488  e1550000          CMP      r5,r0
00048c  2a00003a          BCS      |L1.1404|
;;;196        {
;;;197            /* Calculate SER parameter SER = (Fsys / 2Fsclk) - 1 */
;;;198            u8Ser = (uint8_t)(((((140U * 1000000U) / u32BitRate)/ 2U) - 1U) / 1000U);
000490  e1a01005          MOV      r1,r5
000494  e59f0980          LDR      r0,|L1.3612|
000498  ebfffffe          BL       __aeabi_uidiv
00049c  e3a01001          MOV      r1,#1
0004a0  e06190a0          RSB      r9,r1,r0,LSR #1
0004a4  e30013e8          MOVW     r1,#0x3e8
0004a8  e1a00009          MOV      r0,r9
0004ac  ebfffffe          BL       __aeabi_uidiv
0004b0  e20060ff          AND      r6,r0,#0xff
;;;199    
;;;200            if( ESEI_OPM_ACT == eOpMode )
0004b4  e3570002          CMP      r7,#2
0004b8  1a000023          BNE      |L1.1356|
;;;201            {
;;;202                /* Switch to configuration mode */
;;;203                vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
0004bc  e1a00c04          LSL      r0,r4,#24
0004c0  e1a00620          LSR      r0,r0,#12
0004c4  e24005ff          SUB      r0,r0,#0x3fc00000
0004c8  e2400ade          SUB      r0,r0,#0xde000
0004cc  e5d00000          LDRB     r0,[r0,#0]
0004d0  e3c000c0          BIC      r0,r0,#0xc0
0004d4  e2800040          ADD      r0,r0,#0x40
0004d8  e1a01c04          LSL      r1,r4,#24
0004dc  e1a01621          LSR      r1,r1,#12
0004e0  e24115ff          SUB      r1,r1,#0x3fc00000
0004e4  e2411ade          SUB      r1,r1,#0xde000
0004e8  e5c10000          STRB     r0,[r1,#0]
;;;204    
;;;205                /* Set SER */
;;;206                vSetSECR1_SER(eCh, u8Ser);
0004ec  e1a00c04          LSL      r0,r4,#24
0004f0  e1a00620          LSR      r0,r0,#12
0004f4  e24005ff          SUB      r0,r0,#0x3fc00000
0004f8  e2400ade          SUB      r0,r0,#0xde000
0004fc  e1d000b8          LDRH     r0,[r0,#8]
000500  e7cf0416          BFI      r0,r6,#8,#8
000504  e1a01c04          LSL      r1,r4,#24
000508  e1a01621          LSR      r1,r1,#12
00050c  e24115ff          SUB      r1,r1,#0x3fc00000
000510  e2411ade          SUB      r1,r1,#0xde000
000514  e1c100b8          STRH     r0,[r1,#8]
;;;207    
;;;208                /* Restore Original OPMODE */
;;;209                vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
000518  e1a00c04          LSL      r0,r4,#24
00051c  e1a00620          LSR      r0,r0,#12
000520  e24005ff          SUB      r0,r0,#0x3fc00000
000524  e2400ade          SUB      r0,r0,#0xde000
000528  e5d00000          LDRB     r0,[r0,#0]
00052c  e3c000c0          BIC      r0,r0,#0xc0
000530  e2800080          ADD      r0,r0,#0x80
000534  e1a01c04          LSL      r1,r4,#24
000538  e1a01621          LSR      r1,r1,#12
00053c  e24115ff          SUB      r1,r1,#0x3fc00000
000540  e2411ade          SUB      r1,r1,#0xde000
000544  e5c10000          STRB     r0,[r1,#0]
000548  ea00000c          B        |L1.1408|
                  |L1.1356|
;;;210            }
;;;211            else
;;;212            {
;;;213                /* Set SER */
;;;214                vSetSECR1_SER(eCh, u8Ser);
00054c  e1a00c04          LSL      r0,r4,#24
000550  e1a00620          LSR      r0,r0,#12
000554  e24005ff          SUB      r0,r0,#0x3fc00000
000558  e2400ade          SUB      r0,r0,#0xde000
00055c  e1d000b8          LDRH     r0,[r0,#8]
000560  e7cf0416          BFI      r0,r6,#8,#8
000564  e1a01c04          LSL      r1,r4,#24
000568  e1a01621          LSR      r1,r1,#12
00056c  e24115ff          SUB      r1,r1,#0x3fc00000
000570  e2411ade          SUB      r1,r1,#0xde000
000574  e1c100b8          STRH     r0,[r1,#8]
000578  ea000000          B        |L1.1408|
                  |L1.1404|
;;;215            }
;;;216        }
;;;217        else
;;;218        {
;;;219            i32Res = C_FAILED;
00057c  e3e08000          MVN      r8,#0
                  |L1.1408|
;;;220        }
;;;221    
;;;222        return i32Res;
000580  e1a00008          MOV      r0,r8
;;;223    }
000584  e8bd87f0          POP      {r4-r10,pc}
;;;224    
                          ENDP

                  vESEI_ParityConfig PROC
;;;226    /****************************************************************************/
;;;227    void vESEI_ParityConfig(esei_ch_e eCh, esei_spp01_e eBitType,
000588  e92d4070          PUSH     {r4-r6,lr}
;;;228                           esei_speo_e eMode, esei_en_e eStopEn)
;;;229    {
00058c  e1a04001          MOV      r4,r1
;;;230        esei_opmode_e eOpMode;
;;;231    
;;;232        eOpMode = (esei_opmode_e)(biGetSEMCR_OPMODE(eCh));
000590  e1a05c00          LSL      r5,r0,#24
000594  e1a05625          LSR      r5,r5,#12
000598  e24555ff          SUB      r5,r5,#0x3fc00000
00059c  e2455ade          SUB      r5,r5,#0xde000
0005a0  e5d55000          LDRB     r5,[r5,#0]
0005a4  e1a01325          LSR      r1,r5,#6
;;;233    
;;;234        /* Switch to configuration mode (if neccessary) */
;;;235        if( ESEI_OPM_ACT == eOpMode )
0005a8  e3510002          CMP      r1,#2
0005ac  1a00000b          BNE      |L1.1504|
;;;236        {
;;;237            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
0005b0  e1a05c00          LSL      r5,r0,#24
0005b4  e1a05625          LSR      r5,r5,#12
0005b8  e24555ff          SUB      r5,r5,#0x3fc00000
0005bc  e2455ade          SUB      r5,r5,#0xde000
0005c0  e5d55000          LDRB     r5,[r5,#0]
0005c4  e3c550c0          BIC      r5,r5,#0xc0
0005c8  e2855040          ADD      r5,r5,#0x40
0005cc  e1a06c00          LSL      r6,r0,#24
0005d0  e1a06626          LSR      r6,r6,#12
0005d4  e24665ff          SUB      r6,r6,#0x3fc00000
0005d8  e2466ade          SUB      r6,r6,#0xde000
0005dc  e5c65000          STRB     r5,[r6,#0]
                  |L1.1504|
;;;238        }
;;;239    
;;;240        /* Parity bit type */
;;;241        vSetSEPR_SPP01(eCh, (uint8_t)eBitType);
0005e0  e1a05c00          LSL      r5,r0,#24
0005e4  e1a05625          LSR      r5,r5,#12
0005e8  e24555ff          SUB      r5,r5,#0x3fc00000
0005ec  e2455ade          SUB      r5,r5,#0xde000
0005f0  e5d55028          LDRB     r5,[r5,#0x28]
0005f4  e7c65294          BFI      r5,r4,#5,#2
0005f8  e1a06c00          LSL      r6,r0,#24
0005fc  e1a06626          LSR      r6,r6,#12
000600  e24665ff          SUB      r6,r6,#0x3fc00000
000604  e2466ade          SUB      r6,r6,#0xde000
000608  e5c65028          STRB     r5,[r6,#0x28]
;;;242    
;;;243        /* Even/Odd type */
;;;244        vSetSEPR_SPEO(eCh, (uint8_t)eOpMode);
00060c  e1a05c00          LSL      r5,r0,#24
000610  e1a05625          LSR      r5,r5,#12
000614  e24555ff          SUB      r5,r5,#0x3fc00000
000618  e2455ade          SUB      r5,r5,#0xde000
00061c  e5d55028          LDRB     r5,[r5,#0x28]
000620  e7c25111          BFI      r5,r1,#2,#1
000624  e1a06c00          LSL      r6,r0,#24
000628  e1a06626          LSR      r6,r6,#12
00062c  e24665ff          SUB      r6,r6,#0x3fc00000
000630  e2466ade          SUB      r6,r6,#0xde000
000634  e5c65028          STRB     r5,[r6,#0x28]
;;;245    
;;;246        /* Parity Stop enable */
;;;247        vSetSEPR_SPISE(eCh, (uint8_t)eStopEn);
000638  e1a05c00          LSL      r5,r0,#24
00063c  e1a05625          LSR      r5,r5,#12
000640  e24555ff          SUB      r5,r5,#0x3fc00000
000644  e2455ade          SUB      r5,r5,#0xde000
000648  e5d55028          LDRB     r5,[r5,#0x28]
00064c  e7c05013          BFI      r5,r3,#0,#1
000650  e1a06c00          LSL      r6,r0,#24
000654  e1a06626          LSR      r6,r6,#12
000658  e24665ff          SUB      r6,r6,#0x3fc00000
00065c  e2466ade          SUB      r6,r6,#0xde000
000660  e5c65028          STRB     r5,[r6,#0x28]
;;;248    
;;;249        /* Restore OPMODE */
;;;250        if( ESEI_OPM_ACT == eOpMode )
000664  e3510002          CMP      r1,#2
000668  1a00000b          BNE      |L1.1692|
;;;251        {
;;;252            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
00066c  e1a05c00          LSL      r5,r0,#24
000670  e1a05625          LSR      r5,r5,#12
000674  e24555ff          SUB      r5,r5,#0x3fc00000
000678  e2455ade          SUB      r5,r5,#0xde000
00067c  e5d55000          LDRB     r5,[r5,#0]
000680  e3c550c0          BIC      r5,r5,#0xc0
000684  e2855080          ADD      r5,r5,#0x80
000688  e1a06c00          LSL      r6,r0,#24
00068c  e1a06626          LSR      r6,r6,#12
000690  e24665ff          SUB      r6,r6,#0x3fc00000
000694  e2466ade          SUB      r6,r6,#0xde000
000698  e5c65000          STRB     r5,[r6,#0]
                  |L1.1692|
;;;253        }
;;;254    }
00069c  e8bd8070          POP      {r4-r6,pc}
;;;255    
                          ENDP

                  vESEI_ParityEnable PROC
;;;257    /****************************************************************************/
;;;258    void vESEI_ParityEnable(esei_ch_e eCh, esei_en_e eEnable)
0006a0  e92d4010          PUSH     {r4,lr}
;;;259    {
;;;260        esei_opmode_e eOpMode;
;;;261    
;;;262        eOpMode = (esei_opmode_e)(biGetSEMCR_OPMODE(eCh));
0006a4  e1a03c00          LSL      r3,r0,#24
0006a8  e1a03623          LSR      r3,r3,#12
0006ac  e24335ff          SUB      r3,r3,#0x3fc00000
0006b0  e2433ade          SUB      r3,r3,#0xde000
0006b4  e5d33000          LDRB     r3,[r3,#0]
0006b8  e1a02323          LSR      r2,r3,#6
;;;263    
;;;264        if( ESEI_OPM_ACT == eOpMode )
0006bc  e3520002          CMP      r2,#2
0006c0  1a000023          BNE      |L1.1876|
;;;265        {
;;;266            /* Switch to configuration mode */
;;;267            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
0006c4  e1a03c00          LSL      r3,r0,#24
0006c8  e1a03623          LSR      r3,r3,#12
0006cc  e24335ff          SUB      r3,r3,#0x3fc00000
0006d0  e2433ade          SUB      r3,r3,#0xde000
0006d4  e5d33000          LDRB     r3,[r3,#0]
0006d8  e3c330c0          BIC      r3,r3,#0xc0
0006dc  e2833040          ADD      r3,r3,#0x40
0006e0  e1a04c00          LSL      r4,r0,#24
0006e4  e1a04624          LSR      r4,r4,#12
0006e8  e24445ff          SUB      r4,r4,#0x3fc00000
0006ec  e2444ade          SUB      r4,r4,#0xde000
0006f0  e5c43000          STRB     r3,[r4,#0]
;;;268    
;;;269            /* Parity enable */
;;;270            vSetSEPR_SPEN(eCh, (uint8_t)eEnable);
0006f4  e1a03c00          LSL      r3,r0,#24
0006f8  e1a03623          LSR      r3,r3,#12
0006fc  e24335ff          SUB      r3,r3,#0x3fc00000
000700  e2433ade          SUB      r3,r3,#0xde000
000704  e5d33028          LDRB     r3,[r3,#0x28]
000708  e7c43211          BFI      r3,r1,#4,#1
00070c  e1a04c00          LSL      r4,r0,#24
000710  e1a04624          LSR      r4,r4,#12
000714  e24445ff          SUB      r4,r4,#0x3fc00000
000718  e2444ade          SUB      r4,r4,#0xde000
00071c  e5c43028          STRB     r3,[r4,#0x28]
;;;271    
;;;272            /* Restore Original OPMODE */
;;;273            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
000720  e1a03c00          LSL      r3,r0,#24
000724  e1a03623          LSR      r3,r3,#12
000728  e24335ff          SUB      r3,r3,#0x3fc00000
00072c  e2433ade          SUB      r3,r3,#0xde000
000730  e5d33000          LDRB     r3,[r3,#0]
000734  e3c330c0          BIC      r3,r3,#0xc0
000738  e2833080          ADD      r3,r3,#0x80
00073c  e1a04c00          LSL      r4,r0,#24
000740  e1a04624          LSR      r4,r4,#12
000744  e24445ff          SUB      r4,r4,#0x3fc00000
000748  e2444ade          SUB      r4,r4,#0xde000
00074c  e5c43000          STRB     r3,[r4,#0]
000750  ea00000a          B        |L1.1920|
                  |L1.1876|
;;;274        }
;;;275        else
;;;276        {
;;;277            /* Parity enable */
;;;278            vSetSEPR_SPEN(eCh, (uint8_t)eEnable);
000754  e1a03c00          LSL      r3,r0,#24
000758  e1a03623          LSR      r3,r3,#12
00075c  e24335ff          SUB      r3,r3,#0x3fc00000
000760  e2433ade          SUB      r3,r3,#0xde000
000764  e5d33028          LDRB     r3,[r3,#0x28]
000768  e7c43211          BFI      r3,r1,#4,#1
00076c  e1a04c00          LSL      r4,r0,#24
000770  e1a04624          LSR      r4,r4,#12
000774  e24445ff          SUB      r4,r4,#0x3fc00000
000778  e2444ade          SUB      r4,r4,#0xde000
00077c  e5c43028          STRB     r3,[r4,#0x28]
                  |L1.1920|
;;;279        }
;;;280    }
000780  e8bd8010          POP      {r4,pc}
;;;281    
                          ENDP

                  vESEI_SetTiming PROC
;;;283    /****************************************************************************/
;;;284    void vESEI_SetTiming(esei_ch_e eCh, esei_en_e ePrescal, uint16_t u16IfCount, 
000784  e92d40f0          PUSH     {r4-r7,lr}
;;;285                         uint8_t u8SSCount)
;;;286    {
;;;287        esei_mstr_e eMsMode;
;;;288        esei_spha_e eCphase;
;;;289    
;;;290        /* Get Master/slave mode: */
;;;291        eMsMode = (esei_mstr_e) biGetSECR0_MSTR(eCh);
000788  e1a06c00          LSL      r6,r0,#24
00078c  e1a06626          LSR      r6,r6,#12
000790  e24665ff          SUB      r6,r6,#0x3fc00000
000794  e2466ade          SUB      r6,r6,#0xde000
000798  e1d660b4          LDRH     r6,[r6,#4]
00079c  e7e041d6          UBFX     r4,r6,#3,#1
;;;292    
;;;293        /* Get clock phase: */
;;;294        eCphase = (esei_spha_e) biGetSECR0_SPHA(eCh);
0007a0  e1a06c00          LSL      r6,r0,#24
0007a4  e1a06626          LSR      r6,r6,#12
0007a8  e24665ff          SUB      r6,r6,#0x3fc00000
0007ac  e2466ade          SUB      r6,r6,#0xde000
0007b0  e1d660b4          LDRH     r6,[r6,#4]
0007b4  e7e050d6          UBFX     r5,r6,#1,#1
;;;295    
;;;296        /* Prescaler */
;;;297        vSetSECR0_IFSPSE(eCh, (uint16_t)ePrescal);
0007b8  e1a06c00          LSL      r6,r0,#24
0007bc  e1a06626          LSR      r6,r6,#12
0007c0  e24665ff          SUB      r6,r6,#0x3fc00000
0007c4  e2466ade          SUB      r6,r6,#0xde000
0007c8  e1d660b4          LDRH     r6,[r6,#4]
0007cc  e7c46211          BFI      r6,r1,#4,#1
0007d0  e1a07c00          LSL      r7,r0,#24
0007d4  e1a07627          LSR      r7,r7,#12
0007d8  e24775ff          SUB      r7,r7,#0x3fc00000
0007dc  e2477ade          SUB      r7,r7,#0xde000
0007e0  e1c760b4          STRH     r6,[r7,#4]
;;;298    
;;;299        /* Inter-Frame Counter set */
;;;300        vSetSEFSR_IFS(eCh, u16IfCount);
0007e4  e1a06c00          LSL      r6,r0,#24
0007e8  e1a06626          LSR      r6,r6,#12
0007ec  e24665ff          SUB      r6,r6,#0x3fc00000
0007f0  e2466ade          SUB      r6,r6,#0xde000
0007f4  e1d660bc          LDRH     r6,[r6,#0xc]
0007f8  e7c96012          BFI      r6,r2,#0,#10
0007fc  e1a07c00          LSL      r7,r0,#24
000800  e1a07627          LSR      r7,r7,#12
000804  e24775ff          SUB      r7,r7,#0x3fc00000
000808  e2477ade          SUB      r7,r7,#0xde000
00080c  e1c760bc          STRH     r6,[r7,#0xc]
;;;301    
;;;302        /* If ESEI in slave mode and SPHA == LO, then SSS must be 4 */
;;;303        if( (ESEI_MODE_SLAVE == eMsMode) && (ESEI_ACT_LO == eCphase) )
000810  e3540000          CMP      r4,#0
000814  1a00000e          BNE      |L1.2132|
000818  e3550001          CMP      r5,#1
00081c  1a00000c          BNE      |L1.2132|
;;;304        {
;;;305            /* Slave Select Space */
;;;306            vSetSSSR_SSS(eCh, 4U);
000820  e1a06c00          LSL      r6,r0,#24
000824  e1a06626          LSR      r6,r6,#12
000828  e24665ff          SUB      r6,r6,#0x3fc00000
00082c  e2466ade          SUB      r6,r6,#0xde000
000830  e5d66010          LDRB     r6,[r6,#0x10]
000834  e3c660ff          BIC      r6,r6,#0xff
000838  e2866004          ADD      r6,r6,#4
00083c  e1a07c00          LSL      r7,r0,#24
000840  e1a07627          LSR      r7,r7,#12
000844  e24775ff          SUB      r7,r7,#0x3fc00000
000848  e2477ade          SUB      r7,r7,#0xde000
00084c  e5c76010          STRB     r6,[r7,#0x10]
000850  ea00000a          B        |L1.2176|
                  |L1.2132|
;;;307        }
;;;308        else
;;;309        {
;;;310            vSetSSSR_SSS(eCh, u8SSCount);
000854  e1a06c00          LSL      r6,r0,#24
000858  e1a06626          LSR      r6,r6,#12
00085c  e24665ff          SUB      r6,r6,#0x3fc00000
000860  e2466ade          SUB      r6,r6,#0xde000
000864  e5d66010          LDRB     r6,[r6,#0x10]
000868  e7c76013          BFI      r6,r3,#0,#8
00086c  e1a07c00          LSL      r7,r0,#24
000870  e1a07627          LSR      r7,r7,#12
000874  e24775ff          SUB      r7,r7,#0x3fc00000
000878  e2477ade          SUB      r7,r7,#0xde000
00087c  e5c76010          STRB     r6,[r7,#0x10]
                  |L1.2176|
;;;311        }
;;;312    }
000880  e8bd80f0          POP      {r4-r7,pc}
;;;313    
                          ENDP

                  i32ESEI_SetRunCtrl PROC
;;;315    /****************************************************************************/
;;;316    int32_t i32ESEI_SetRunCtrl(esei_ch_e eCh, esei_sestp_e eStart)
000884  e92d4070          PUSH     {r4-r6,lr}
;;;317    {
000888  e1a02000          MOV      r2,r0
;;;318        esei_mstr_e   eMsMode;
;;;319        esei_opmode_e eOpMode;
;;;320        int32_t       i32Res = C_SUCCESS;
00088c  e3a00000          MOV      r0,#0
;;;321    
;;;322        /* Get Master/slave mode: */
;;;323        eMsMode = (esei_mstr_e) biGetSECR0_MSTR(eCh);
000890  e1a05c02          LSL      r5,r2,#24
000894  e1a05625          LSR      r5,r5,#12
000898  e24555ff          SUB      r5,r5,#0x3fc00000
00089c  e2455ade          SUB      r5,r5,#0xde000
0008a0  e1d550b4          LDRH     r5,[r5,#4]
0008a4  e7e031d5          UBFX     r3,r5,#3,#1
;;;324        /* Get current OPMODE */
;;;325        eOpMode = (esei_opmode_e) (biGetSEMCR_OPMODE((uint16_t)eCh));
0008a8  e1a05c02          LSL      r5,r2,#24
0008ac  e1a05625          LSR      r5,r5,#12
0008b0  e24555ff          SUB      r5,r5,#0x3fc00000
0008b4  e2455ade          SUB      r5,r5,#0xde000
0008b8  e5d55000          LDRB     r5,[r5,#0]
0008bc  e1a04325          LSR      r4,r5,#6
;;;326    
;;;327        if( (ESEI_MODE_MASTER == eMsMode) && (ESEI_OPM_ACT == eOpMode) )
0008c0  e3530000          CMP      r3,#0
0008c4  0a00000d          BEQ      |L1.2304|
0008c8  e3540002          CMP      r4,#2
0008cc  1a00000b          BNE      |L1.2304|
;;;328        {
;;;329            vSetSEMCR_SESTP(eCh, (uint8_t) eStart);
0008d0  e1a05c02          LSL      r5,r2,#24
0008d4  e1a05625          LSR      r5,r5,#12
0008d8  e24555ff          SUB      r5,r5,#0x3fc00000
0008dc  e2455ade          SUB      r5,r5,#0xde000
0008e0  e5d55000          LDRB     r5,[r5,#0]
0008e4  e7c15091          BFI      r5,r1,#1,#1
0008e8  e1a06c02          LSL      r6,r2,#24
0008ec  e1a06626          LSR      r6,r6,#12
0008f0  e24665ff          SUB      r6,r6,#0x3fc00000
0008f4  e2466ade          SUB      r6,r6,#0xde000
0008f8  e5c65000          STRB     r5,[r6,#0]
0008fc  ea000000          B        |L1.2308|
                  |L1.2304|
;;;330        }
;;;331        else
;;;332        {
;;;333            /* Not possible to change the setting */
;;;334            i32Res = C_FAILED;
000900  e3e00000          MVN      r0,#0
                  |L1.2308|
;;;335        }
;;;336    
;;;337        return i32Res;
;;;338    }
000904  e8bd8070          POP      {r4-r6,pc}
;;;339    
                          ENDP

                  eESEI_GetRunCtrl PROC
;;;341    /****************************************************************************/
;;;342    esei_sestp_e eESEI_GetRunCtrl(esei_ch_e eCh)
000908  e1a01000          MOV      r1,r0
;;;343    {
;;;344        return (esei_sestp_e) biGetSEMCR_SESTP(eCh);
00090c  e1a00c01          LSL      r0,r1,#24
000910  e1a00620          LSR      r0,r0,#12
000914  e24005ff          SUB      r0,r0,#0x3fc00000
000918  e2400ade          SUB      r0,r0,#0xde000
00091c  e5d00000          LDRB     r0,[r0,#0]
000920  e7e000d0          UBFX     r0,r0,#1,#1
;;;345    }
000924  e12fff1e          BX       lr
;;;346    
                          ENDP

                  i32ESEI_ClearBuffer PROC
;;;348    /****************************************************************************/
;;;349    int32_t i32ESEI_ClearBuffer(esei_ch_e eCh)
000928  e92d4070          PUSH     {r4-r6,lr}
;;;350    {
00092c  e1a01000          MOV      r1,r0
;;;351        esei_mstr_e  eMsMode;
;;;352        esei_sestp_e eSeiStop;
;;;353        esei_sidle_e eIdle;
;;;354        int32_t i32Res = C_SUCCESS;
000930  e3a00000          MOV      r0,#0
;;;355    
;;;356        /* Get Master/slave mode: */
;;;357        eMsMode = (esei_mstr_e) biGetSECR0_MSTR(eCh);    
000934  e1a05c01          LSL      r5,r1,#24
000938  e1a05625          LSR      r5,r5,#12
00093c  e24555ff          SUB      r5,r5,#0x3fc00000
000940  e2455ade          SUB      r5,r5,#0xde000
000944  e1d550b4          LDRH     r5,[r5,#4]
000948  e7e021d5          UBFX     r2,r5,#3,#1
;;;358    
;;;359        /* Get SEI stop: */
;;;360        eSeiStop = (esei_sestp_e) biGetSEMCR_SESTP(eCh);    
00094c  e1a05c01          LSL      r5,r1,#24
000950  e1a05625          LSR      r5,r5,#12
000954  e24555ff          SUB      r5,r5,#0x3fc00000
000958  e2455ade          SUB      r5,r5,#0xde000
00095c  e5d55000          LDRB     r5,[r5,#0]
000960  e7e030d5          UBFX     r3,r5,#1,#1
;;;361    
;;;362        /* Get Idle indicator: */
;;;363        eIdle = (esei_sidle_e) biGetSESR_SIDLE(eCh);    
000964  e1a05c01          LSL      r5,r1,#24
000968  e1a05625          LSR      r5,r5,#12
00096c  e24555ff          SUB      r5,r5,#0x3fc00000
000970  e2455ade          SUB      r5,r5,#0xde000
000974  e5955014          LDR      r5,[r5,#0x14]
000978  e7e04155          UBFX     r4,r5,#2,#1
;;;364    
;;;365        /* Check if ESEI master mode, stopped and in IDLE */
;;;366        if( (ESEI_MODE_MASTER == eMsMode) && (ESEI_STOP == eSeiStop) && (ESEI_IDLE == eIdle) )
00097c  e3520000          CMP      r2,#0
000980  0a000010          BEQ      |L1.2504|
000984  e3530001          CMP      r3,#1
000988  1a00000e          BNE      |L1.2504|
00098c  e3540001          CMP      r4,#1
000990  1a00000c          BNE      |L1.2504|
;;;367        {
;;;368            /* Buffer clear */
;;;369            vSetSEMCR_BCLR(eCh, 1U);
000994  e1a05c01          LSL      r5,r1,#24
000998  e1a05625          LSR      r5,r5,#12
00099c  e24555ff          SUB      r5,r5,#0x3fc00000
0009a0  e2455ade          SUB      r5,r5,#0xde000
0009a4  e5d55000          LDRB     r5,[r5,#0]
0009a8  e3c55001          BIC      r5,r5,#1
0009ac  e2855001          ADD      r5,r5,#1
0009b0  e1a06c01          LSL      r6,r1,#24
0009b4  e1a06626          LSR      r6,r6,#12
0009b8  e24665ff          SUB      r6,r6,#0x3fc00000
0009bc  e2466ade          SUB      r6,r6,#0xde000
0009c0  e5c65000          STRB     r5,[r6,#0]
0009c4  ea000000          B        |L1.2508|
                  |L1.2504|
;;;370        }
;;;371        else
;;;372        {
;;;373            /* Safe buffer clear impossible */
;;;374            i32Res = C_FAILED;
0009c8  e3e00000          MVN      r0,#0
                  |L1.2508|
;;;375        }
;;;376    
;;;377        return i32Res;
;;;378    }
0009cc  e8bd8070          POP      {r4-r6,pc}
;;;379    
                          ENDP

                  i32ESEI_DiagLoopEnable PROC
;;;381    /****************************************************************************/
;;;382    int32_t i32ESEI_DiagLoopEnable(esei_ch_e eCh, esei_en_e eEnable)
0009d0  e92d4070          PUSH     {r4-r6,lr}
;;;383    {
0009d4  e1a02000          MOV      r2,r0
;;;384        esei_opmode_e eOpMode;
;;;385        esei_mstr_e eMsMode;
;;;386        int32_t     i32Res = C_SUCCESS;
0009d8  e3a00000          MOV      r0,#0
;;;387    
;;;388        /* Get current OPMODE */
;;;389        eOpMode = (esei_opmode_e) (biGetSEMCR_OPMODE((uint16_t)eCh));
0009dc  e1a05c02          LSL      r5,r2,#24
0009e0  e1a05625          LSR      r5,r5,#12
0009e4  e24555ff          SUB      r5,r5,#0x3fc00000
0009e8  e2455ade          SUB      r5,r5,#0xde000
0009ec  e5d55000          LDRB     r5,[r5,#0]
0009f0  e1a03325          LSR      r3,r5,#6
;;;390        /* Get Master/slave mode: */
;;;391        eMsMode = (esei_mstr_e) biGetSECR0_MSTR(eCh);
0009f4  e1a05c02          LSL      r5,r2,#24
0009f8  e1a05625          LSR      r5,r5,#12
0009fc  e24555ff          SUB      r5,r5,#0x3fc00000
000a00  e2455ade          SUB      r5,r5,#0xde000
000a04  e1d550b4          LDRH     r5,[r5,#4]
000a08  e7e041d5          UBFX     r4,r5,#3,#1
;;;392    
;;;393        /* Check if ESEI master mode and active */
;;;394        if( (ESEI_MODE_MASTER == eMsMode) && (ESEI_OPM_ACT == eOpMode) )
000a0c  e3540000          CMP      r4,#0
000a10  0a00000d          BEQ      |L1.2636|
000a14  e3530002          CMP      r3,#2
000a18  1a00000b          BNE      |L1.2636|
;;;395        {
;;;396            /* Diagnostic loop */
;;;397            vSetSEMCR_DLOOP(eCh, (uint8_t) eEnable);
000a1c  e1a05c02          LSL      r5,r2,#24
000a20  e1a05625          LSR      r5,r5,#12
000a24  e24555ff          SUB      r5,r5,#0x3fc00000
000a28  e2455ade          SUB      r5,r5,#0xde000
000a2c  e5d55000          LDRB     r5,[r5,#0]
000a30  e7c25111          BFI      r5,r1,#2,#1
000a34  e1a06c02          LSL      r6,r2,#24
000a38  e1a06626          LSR      r6,r6,#12
000a3c  e24665ff          SUB      r6,r6,#0x3fc00000
000a40  e2466ade          SUB      r6,r6,#0xde000
000a44  e5c65000          STRB     r5,[r6,#0]
000a48  ea000000          B        |L1.2640|
                  |L1.2636|
;;;398        }
;;;399        else
;;;400        {
;;;401            /* Setting not possible */
;;;402            i32Res = C_FAILED;
000a4c  e3e00000          MVN      r0,#0
                  |L1.2640|
;;;403        }
;;;404    
;;;405        return i32Res;
;;;406    }
000a50  e8bd8070          POP      {r4-r6,pc}
;;;407    
                          ENDP

                  vESEI_SetMode PROC
;;;409    /****************************************************************************/
;;;410    void vESEI_SetMode(esei_ch_e eCh, esei_mstr_e eMode)
000a54  e92d4010          PUSH     {r4,lr}
;;;411    {
;;;412        esei_opmode_e eOpMode;
;;;413    
;;;414        /* Get current OPMODE */
;;;415        eOpMode = (esei_opmode_e) (biGetSEMCR_OPMODE((uint16_t)eCh));
000a58  e1a03c00          LSL      r3,r0,#24
000a5c  e1a03623          LSR      r3,r3,#12
000a60  e24335ff          SUB      r3,r3,#0x3fc00000
000a64  e2433ade          SUB      r3,r3,#0xde000
000a68  e5d33000          LDRB     r3,[r3,#0]
000a6c  e1a02323          LSR      r2,r3,#6
;;;416    
;;;417        /* Swhich to configuration mode (if neccessary) */
;;;418        if( ESEI_OPM_ACT == eOpMode )
000a70  e3520002          CMP      r2,#2
000a74  1a000023          BNE      |L1.2824|
;;;419        {
;;;420            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_CFG);
000a78  e1a03c00          LSL      r3,r0,#24
000a7c  e1a03623          LSR      r3,r3,#12
000a80  e24335ff          SUB      r3,r3,#0x3fc00000
000a84  e2433ade          SUB      r3,r3,#0xde000
000a88  e5d33000          LDRB     r3,[r3,#0]
000a8c  e3c330c0          BIC      r3,r3,#0xc0
000a90  e2833040          ADD      r3,r3,#0x40
000a94  e1a04c00          LSL      r4,r0,#24
000a98  e1a04624          LSR      r4,r4,#12
000a9c  e24445ff          SUB      r4,r4,#0x3fc00000
000aa0  e2444ade          SUB      r4,r4,#0xde000
000aa4  e5c43000          STRB     r3,[r4,#0]
;;;421    
;;;422            /* Master/slave mode */
;;;423            vSetSECR0_MSTR(eCh, (uint16_t)eMode);
000aa8  e1a03c00          LSL      r3,r0,#24
000aac  e1a03623          LSR      r3,r3,#12
000ab0  e24335ff          SUB      r3,r3,#0x3fc00000
000ab4  e2433ade          SUB      r3,r3,#0xde000
000ab8  e1d330b4          LDRH     r3,[r3,#4]
000abc  e7c33191          BFI      r3,r1,#3,#1
000ac0  e1a04c00          LSL      r4,r0,#24
000ac4  e1a04624          LSR      r4,r4,#12
000ac8  e24445ff          SUB      r4,r4,#0x3fc00000
000acc  e2444ade          SUB      r4,r4,#0xde000
000ad0  e1c430b4          STRH     r3,[r4,#4]
;;;424    
;;;425            vSetSEMCR_OPMODE(eCh, (uint8_t)ESEI_OPM_ACT);
000ad4  e1a03c00          LSL      r3,r0,#24
000ad8  e1a03623          LSR      r3,r3,#12
000adc  e24335ff          SUB      r3,r3,#0x3fc00000
000ae0  e2433ade          SUB      r3,r3,#0xde000
000ae4  e5d33000          LDRB     r3,[r3,#0]
000ae8  e3c330c0          BIC      r3,r3,#0xc0
000aec  e2833080          ADD      r3,r3,#0x80
000af0  e1a04c00          LSL      r4,r0,#24
000af4  e1a04624          LSR      r4,r4,#12
000af8  e24445ff          SUB      r4,r4,#0x3fc00000
000afc  e2444ade          SUB      r4,r4,#0xde000
000b00  e5c43000          STRB     r3,[r4,#0]
000b04  ea00000a          B        |L1.2868|
                  |L1.2824|
;;;426        }
;;;427        else
;;;428        {
;;;429            /* Master/slave mode */
;;;430            vSetSECR0_MSTR(eCh, (uint16_t)eMode);
000b08  e1a03c00          LSL      r3,r0,#24
000b0c  e1a03623          LSR      r3,r3,#12
000b10  e24335ff          SUB      r3,r3,#0x3fc00000
000b14  e2433ade          SUB      r3,r3,#0xde000
000b18  e1d330b4          LDRH     r3,[r3,#4]
000b1c  e7c33191          BFI      r3,r1,#3,#1
000b20  e1a04c00          LSL      r4,r0,#24
000b24  e1a04624          LSR      r4,r4,#12
000b28  e24445ff          SUB      r4,r4,#0x3fc00000
000b2c  e2444ade          SUB      r4,r4,#0xde000
000b30  e1c430b4          STRH     r3,[r4,#4]
                  |L1.2868|
;;;431        }
;;;432    }
000b34  e8bd8010          POP      {r4,pc}
;;;433    
                          ENDP

                  i32ESEI_IsTxBuffEmpty PROC
;;;435    /****************************************************************************/
;;;436    int32_t i32ESEI_IsTxBuffEmpty(esei_ch_e eCh)
000b38  e1a01000          MOV      r1,r0
;;;437    {
;;;438        int32_t i32Res = C_TRUE;
000b3c  e3a00001          MOV      r0,#1
;;;439    
;;;440        if( 0U == biGetSESR_TBF(eCh) )
000b40  e1a02c01          LSL      r2,r1,#24
000b44  e1a02622          LSR      r2,r2,#12
000b48  e24225ff          SUB      r2,r2,#0x3fc00000
000b4c  e2422ade          SUB      r2,r2,#0xde000
000b50  e5922014          LDR      r2,[r2,#0x14]
000b54  e7e029d2          UBFX     r2,r2,#19,#1
000b58  e3520000          CMP      r2,#0
000b5c  1a000000          BNE      |L1.2916|
;;;441        {
;;;442            i32Res = C_FALSE;
000b60  e3a00000          MOV      r0,#0
                  |L1.2916|
;;;443        }
;;;444    
;;;445        return i32Res;
;;;446    }
000b64  e12fff1e          BX       lr
;;;447    
                          ENDP

                  i32ESEI_IsRxBuffFull PROC
;;;449    /****************************************************************************/
;;;450    int32_t i32ESEI_IsRxBuffFull(esei_ch_e eCh)
000b68  e1a01000          MOV      r1,r0
;;;451    {
;;;452        int32_t i32Res = C_TRUE;
000b6c  e3a00001          MOV      r0,#1
;;;453    
;;;454        if( 0U == biGetSESR_RBF(eCh) )
000b70  e1a02c01          LSL      r2,r1,#24
000b74  e1a02622          LSR      r2,r2,#12
000b78  e24225ff          SUB      r2,r2,#0x3fc00000
000b7c  e2422ade          SUB      r2,r2,#0xde000
000b80  e5922014          LDR      r2,[r2,#0x14]
000b84  e7e02952          UBFX     r2,r2,#18,#1
000b88  e3520000          CMP      r2,#0
000b8c  1a000000          BNE      |L1.2964|
;;;455        {
;;;456            i32Res = C_FALSE;
000b90  e3a00000          MOV      r0,#0
                  |L1.2964|
;;;457        }
;;;458    
;;;459        return i32Res;
;;;460    }
000b94  e12fff1e          BX       lr
;;;461    
                          ENDP

                  i32ESEI_IsParityErr PROC
;;;463    /****************************************************************************/
;;;464    int32_t i32ESEI_IsParityErr(esei_ch_e eCh)
000b98  e1a01000          MOV      r1,r0
;;;465    {
;;;466        int32_t i32Res = C_TRUE;
000b9c  e3a00001          MOV      r0,#1
;;;467    
;;;468        if( (uint32_t) ESEI_NOERR == biGetSESR_PAR(eCh) )
000ba0  e1a02c01          LSL      r2,r1,#24
000ba4  e1a02622          LSR      r2,r2,#12
000ba8  e24225ff          SUB      r2,r2,#0x3fc00000
000bac  e2422ade          SUB      r2,r2,#0xde000
000bb0  e5922014          LDR      r2,[r2,#0x14]
000bb4  e7e028d2          UBFX     r2,r2,#17,#1
000bb8  e3520000          CMP      r2,#0
000bbc  1a000000          BNE      |L1.3012|
;;;469        {
;;;470            i32Res = C_FALSE;
000bc0  e3a00000          MOV      r0,#0
                  |L1.3012|
;;;471        }
;;;472    
;;;473        return i32Res;
;;;474    }
000bc4  e12fff1e          BX       lr
;;;475    
                          ENDP

                  vESEI_ClearParityErr PROC
;;;477    /****************************************************************************/
;;;478    void vESEI_ClearParityErr(esei_ch_e eCh)
000bc8  e1a01c00          LSL      r1,r0,#24
;;;479    {
;;;480        if( (uint32_t)ESEI_ERROR == biGetSESR_PAR(eCh) )
000bcc  e1a01621          LSR      r1,r1,#12
000bd0  e24115ff          SUB      r1,r1,#0x3fc00000
000bd4  e2411ade          SUB      r1,r1,#0xde000
000bd8  e5911014          LDR      r1,[r1,#0x14]
000bdc  e7e018d1          UBFX     r1,r1,#17,#1
000be0  e3510000          CMP      r1,#0
000be4  0a00000b          BEQ      |L1.3096|
;;;481        {
;;;482            vClrSESR_PAR(eCh);
000be8  e1a01c00          LSL      r1,r0,#24
000bec  e1a01621          LSR      r1,r1,#12
000bf0  e24115ff          SUB      r1,r1,#0x3fc00000
000bf4  e2411ade          SUB      r1,r1,#0xde000
000bf8  e5911014          LDR      r1,[r1,#0x14]
000bfc  e3c11802          BIC      r1,r1,#0x20000
000c00  e2811802          ADD      r1,r1,#0x20000
000c04  e1a02c00          LSL      r2,r0,#24
000c08  e1a02622          LSR      r2,r2,#12
000c0c  e24225ff          SUB      r2,r2,#0x3fc00000
000c10  e2422ade          SUB      r2,r2,#0xde000
000c14  e5821014          STR      r1,[r2,#0x14]
                  |L1.3096|
;;;483        }
;;;484    }
000c18  e12fff1e          BX       lr
;;;485    
                          ENDP

                  vESEI_ClearStatusAll PROC
;;;487    /****************************************************************************/
;;;488    void vESEI_ClearStatusAll(esei_ch_e eCh)
000c1c  e3e01000          MVN      r1,#0
;;;489    {
;;;490        vSetSESR(eCh, 0xFFFFFFFFU);
000c20  e1a02c00          LSL      r2,r0,#24
000c24  e1a02622          LSR      r2,r2,#12
000c28  e24225ff          SUB      r2,r2,#0x3fc00000
000c2c  e2422ade          SUB      r2,r2,#0xde000
000c30  e5821014          STR      r1,[r2,#0x14]
;;;491    }
000c34  e12fff1e          BX       lr
;;;492    
                          ENDP

                  i32ESEI_IsLoopElapsed PROC
;;;494    /****************************************************************************/
;;;495    int32_t i32ESEI_IsLoopElapsed(esei_ch_e eCh)
000c38  e1a01000          MOV      r1,r0
;;;496    {
;;;497        int32_t i32Res = C_TRUE;
000c3c  e3a00001          MOV      r0,#1
;;;498    
;;;499        if( (uint32_t)ESEI_LOOP_NOELPSD == biGetSESR_SEILC(eCh) )
000c40  e1a02c01          LSL      r2,r1,#24
000c44  e1a02622          LSR      r2,r2,#12
000c48  e24225ff          SUB      r2,r2,#0x3fc00000
000c4c  e2422ade          SUB      r2,r2,#0xde000
000c50  e5922014          LDR      r2,[r2,#0x14]
000c54  e7e02852          UBFX     r2,r2,#16,#1
000c58  e3520000          CMP      r2,#0
000c5c  1a000000          BNE      |L1.3172|
;;;500        {
;;;501            i32Res = C_FALSE;
000c60  e3a00000          MOV      r0,#0
                  |L1.3172|
;;;502        }
;;;503    
;;;504        return i32Res;
;;;505    }
000c64  e12fff1e          BX       lr
;;;506    
                          ENDP

                  i32ESEI_IsIRQActTx PROC
;;;508    /****************************************************************************/
;;;509    int32_t i32ESEI_IsIRQActTx(esei_ch_e eCh)
000c68  e1a01000          MOV      r1,r0
;;;510    {
;;;511        int32_t i32Res = C_TRUE;
000c6c  e3a00001          MOV      r0,#1
;;;512    
;;;513        if( (uint32_t)ESEI_IRQ_NONE == biGetSESR_TBSI(eCh) )
000c70  e1a02c01          LSL      r2,r1,#24
000c74  e1a02622          LSR      r2,r2,#12
000c78  e24225ff          SUB      r2,r2,#0x3fc00000
000c7c  e2422ade          SUB      r2,r2,#0xde000
000c80  e5922014          LDR      r2,[r2,#0x14]
000c84  e7e027d2          UBFX     r2,r2,#15,#1
000c88  e3520000          CMP      r2,#0
000c8c  1a000000          BNE      |L1.3220|
;;;514        {
;;;515            i32Res = C_FALSE;
000c90  e3a00000          MOV      r0,#0
                  |L1.3220|
;;;516        }
;;;517    
;;;518        return i32Res;
;;;519    }
000c94  e12fff1e          BX       lr
;;;520    
                          ENDP

                  i32ESEI_IsIRQActRx PROC
;;;522    /****************************************************************************/
;;;523    int32_t i32ESEI_IsIRQActRx(esei_ch_e eCh)
000c98  e1a01000          MOV      r1,r0
;;;524    {
;;;525        int32_t i32Res = C_TRUE;
000c9c  e3a00001          MOV      r0,#1
;;;526    
;;;527        if( (uint32_t)ESEI_IRQ_NONE == biGetSESR_RBSI(eCh) )
000ca0  e1a02c01          LSL      r2,r1,#24
000ca4  e1a02622          LSR      r2,r2,#12
000ca8  e24225ff          SUB      r2,r2,#0x3fc00000
000cac  e2422ade          SUB      r2,r2,#0xde000
000cb0  e5922014          LDR      r2,[r2,#0x14]
000cb4  e7e02752          UBFX     r2,r2,#14,#1
000cb8  e3520000          CMP      r2,#0
000cbc  1a000000          BNE      |L1.3268|
;;;528        {
;;;529            i32Res = C_FALSE;
000cc0  e3a00000          MOV      r0,#0
                  |L1.3268|
;;;530        }
;;;531    
;;;532        return i32Res;
;;;533    }
000cc4  e12fff1e          BX       lr
;;;534    
                          ENDP

                  i32ESEI_IsTxFormatErr PROC
;;;536    /****************************************************************************/
;;;537    int32_t i32ESEI_IsTxFormatErr(esei_ch_e eCh)
000cc8  e1a01000          MOV      r1,r0
;;;538    {
;;;539        int32_t i32Res = C_TRUE;
000ccc  e3a00001          MOV      r0,#1
;;;540    
;;;541        if( (uint32_t)ESEI_NOERR == biGetSESR_SETF(eCh) )
000cd0  e1a02c01          LSL      r2,r1,#24
000cd4  e1a02622          LSR      r2,r2,#12
000cd8  e24225ff          SUB      r2,r2,#0x3fc00000
000cdc  e2422ade          SUB      r2,r2,#0xde000
000ce0  e5922014          LDR      r2,[r2,#0x14]
000ce4  e7e022d2          UBFX     r2,r2,#5,#1
000ce8  e3520000          CMP      r2,#0
000cec  1a000000          BNE      |L1.3316|
;;;542        {
;;;543            i32Res = C_FALSE;
000cf0  e3a00000          MOV      r0,#0
                  |L1.3316|
;;;544        }
;;;545    
;;;546        return i32Res;
;;;547    }
000cf4  e12fff1e          BX       lr
;;;548    
                          ENDP

                  vESEI_ClearTxFormatErr PROC
;;;550    /****************************************************************************/
;;;551    void vESEI_ClearTxFormatErr(esei_ch_e eCh)
000cf8  e1a01c00          LSL      r1,r0,#24
;;;552    {
;;;553        if( (uint32_t)ESEI_ERROR == biGetSESR_SETF(eCh) )
000cfc  e1a01621          LSR      r1,r1,#12
000d00  e24115ff          SUB      r1,r1,#0x3fc00000
000d04  e2411ade          SUB      r1,r1,#0xde000
000d08  e5911014          LDR      r1,[r1,#0x14]
000d0c  e7e012d1          UBFX     r1,r1,#5,#1
000d10  e3510000          CMP      r1,#0
000d14  0a00000b          BEQ      |L1.3400|
;;;554        {
;;;555            vClrSESR_SETF(eCh);
000d18  e1a01c00          LSL      r1,r0,#24
000d1c  e1a01621          LSR      r1,r1,#12
000d20  e24115ff          SUB      r1,r1,#0x3fc00000
000d24  e2411ade          SUB      r1,r1,#0xde000
000d28  e5911014          LDR      r1,[r1,#0x14]
000d2c  e3c11020          BIC      r1,r1,#0x20
000d30  e2811020          ADD      r1,r1,#0x20
000d34  e1a02c00          LSL      r2,r0,#24
000d38  e1a02622          LSR      r2,r2,#12
000d3c  e24225ff          SUB      r2,r2,#0x3fc00000
000d40  e2422ade          SUB      r2,r2,#0xde000
000d44  e5821014          STR      r1,[r2,#0x14]
                  |L1.3400|
;;;556        }
;;;557    }
000d48  e12fff1e          BX       lr
;;;558    
                          ENDP

                  i32ESEI_IsIdle PROC
;;;560    /****************************************************************************/
;;;561    int32_t i32ESEI_IsIdle(esei_ch_e eCh)
000d4c  e1a01000          MOV      r1,r0
;;;562    {
;;;563        int32_t i32Res = C_TRUE;
000d50  e3a00001          MOV      r0,#1
;;;564    
;;;565        if( (uint32_t)ESEI_ACTIVE == biGetSESR_SIDLE(eCh) )
000d54  e1a02c01          LSL      r2,r1,#24
000d58  e1a02622          LSR      r2,r2,#12
000d5c  e24225ff          SUB      r2,r2,#0x3fc00000
000d60  e2422ade          SUB      r2,r2,#0xde000
000d64  e5922014          LDR      r2,[r2,#0x14]
000d68  e7e02152          UBFX     r2,r2,#2,#1
000d6c  e3520000          CMP      r2,#0
000d70  1a000000          BNE      |L1.3448|
;;;566        {
;;;567            i32Res = C_FALSE;
000d74  e3a00000          MOV      r0,#0
                  |L1.3448|
;;;568        }
;;;569    
;;;570        return i32Res;
;;;571    }
000d78  e12fff1e          BX       lr
;;;572    
                          ENDP

                  i32ESEI_IsUnderflowErr PROC
;;;574    /****************************************************************************/
;;;575    int32_t i32ESEI_IsUnderflowErr(esei_ch_e eCh)
000d7c  e1a01000          MOV      r1,r0
;;;576    {
;;;577        int32_t i32Res = C_TRUE;
000d80  e3a00001          MOV      r0,#1
;;;578    
;;;579        if( (uint32_t)ESEI_NOERR == biGetSESR_SEUE(eCh) )
000d84  e1a02c01          LSL      r2,r1,#24
000d88  e1a02622          LSR      r2,r2,#12
000d8c  e24225ff          SUB      r2,r2,#0x3fc00000
000d90  e2422ade          SUB      r2,r2,#0xde000
000d94  e5922014          LDR      r2,[r2,#0x14]
000d98  e7e02352          UBFX     r2,r2,#6,#1
000d9c  e3520000          CMP      r2,#0
000da0  1a000000          BNE      |L1.3496|
;;;580        {
;;;581            i32Res = C_FALSE;
000da4  e3a00000          MOV      r0,#0
                  |L1.3496|
;;;582        }
;;;583    
;;;584        return i32Res;
;;;585    }
000da8  e12fff1e          BX       lr
;;;586    
                          ENDP

                  vESEI_ClearUnderFlowErr PROC
;;;588    /****************************************************************************/
;;;589    void vESEI_ClearUnderFlowErr(esei_ch_e eCh)
000dac  e1a01c00          LSL      r1,r0,#24
;;;590    {
;;;591        if( (uint32_t)ESEI_ERROR == biGetSESR_SEUE(eCh) )
000db0  e1a01621          LSR      r1,r1,#12
000db4  e24115ff          SUB      r1,r1,#0x3fc00000
000db8  e2411ade          SUB      r1,r1,#0xde000
000dbc  e5911014          LDR      r1,[r1,#0x14]
000dc0  e7e01351          UBFX     r1,r1,#6,#1
000dc4  e3510000          CMP      r1,#0
000dc8  0a00000b          BEQ      |L1.3580|
;;;592        {
;;;593            vClrSESR_SEUE(eCh);
000dcc  e1a01c00          LSL      r1,r0,#24
000dd0  e1a01621          LSR      r1,r1,#12
000dd4  e24115ff          SUB      r1,r1,#0x3fc00000
000dd8  e2411ade          SUB      r1,r1,#0xde000
000ddc  e5911014          LDR      r1,[r1,#0x14]
000de0  e3c11040          BIC      r1,r1,#0x40
000de4  e2811040          ADD      r1,r1,#0x40
000de8  e1a02c00          LSL      r2,r0,#24
000dec  e1a02622          LSR      r2,r2,#12
000df0  e24225ff          SUB      r2,r2,#0x3fc00000
000df4  e2422ade          SUB      r2,r2,#0xde000
000df8  e5821014          STR      r1,[r2,#0x14]
                  |L1.3580|
;;;594        }
;;;595    }
000dfc  e12fff1e          BX       lr
                  |L1.3584|
                          DCD      au8LLDD_ESEI_C_REVISION
                  |L1.3588|
                          DCD      au8LLDD_ESEI_C_TAG
                  |L1.3592|
                          DCD      au8LLDD_ESEI_H_REVISION
                  |L1.3596|
                          DCD      au8LLDD_ESEI_H_TAG
                  |L1.3600|
                          DCD      au8LLDD_ESEI_IO_H_REVISION
                  |L1.3604|
                          DCD      au8LLDD_ESEI_IO_H_TAG
                  |L1.3608|
                          DCD      0x00011170
                  |L1.3612|
                          DCD      0x08583b00
                          ENDP

                  i32ESEI_IsOverflowErr PROC
;;;598    /****************************************************************************/
;;;599    int32_t i32ESEI_IsOverflowErr(esei_ch_e eCh)
000e20  e1a01000          MOV      r1,r0
;;;600    {
;;;601        int32_t i32Res = C_TRUE;
000e24  e3a00001          MOV      r0,#1
;;;602    
;;;603        if( (uint32_t)ESEI_NOERR == biGetSESR_SEOE(eCh) )
000e28  e1a02c01          LSL      r2,r1,#24
000e2c  e1a02622          LSR      r2,r2,#12
000e30  e24225ff          SUB      r2,r2,#0x3fc00000
000e34  e2422ade          SUB      r2,r2,#0xde000
000e38  e5922014          LDR      r2,[r2,#0x14]
000e3c  e7e023d2          UBFX     r2,r2,#7,#1
000e40  e3520000          CMP      r2,#0
000e44  1a000000          BNE      |L1.3660|
;;;604        {
;;;605            i32Res = C_FALSE;
000e48  e3a00000          MOV      r0,#0
                  |L1.3660|
;;;606        }
;;;607    
;;;608        return i32Res;
;;;609    }
000e4c  e12fff1e          BX       lr
;;;610    
                          ENDP

                  vESEI_ClearOverFlowErr PROC
;;;612    /****************************************************************************/
;;;613    void vESEI_ClearOverFlowErr(esei_ch_e eCh)
000e50  e1a01c00          LSL      r1,r0,#24
;;;614    {
;;;615        if( (uint32_t)ESEI_ERROR == biGetSESR_SEOE(eCh) )
000e54  e1a01621          LSR      r1,r1,#12
000e58  e24115ff          SUB      r1,r1,#0x3fc00000
000e5c  e2411ade          SUB      r1,r1,#0xde000
000e60  e5911014          LDR      r1,[r1,#0x14]
000e64  e7e013d1          UBFX     r1,r1,#7,#1
000e68  e3510000          CMP      r1,#0
000e6c  0a00000b          BEQ      |L1.3744|
;;;616        {
;;;617            vClrSESR_SEOE(eCh);
000e70  e1a01c00          LSL      r1,r0,#24
000e74  e1a01621          LSR      r1,r1,#12
000e78  e24115ff          SUB      r1,r1,#0x3fc00000
000e7c  e2411ade          SUB      r1,r1,#0xde000
000e80  e5911014          LDR      r1,[r1,#0x14]
000e84  e3c11080          BIC      r1,r1,#0x80
000e88  e2811080          ADD      r1,r1,#0x80
000e8c  e1a02c00          LSL      r2,r0,#24
000e90  e1a02622          LSR      r2,r2,#12
000e94  e24225ff          SUB      r2,r2,#0x3fc00000
000e98  e2422ade          SUB      r2,r2,#0xde000
000e9c  e5821014          STR      r1,[r2,#0x14]
                  |L1.3744|
;;;618        }
;;;619    }
000ea0  e12fff1e          BX       lr
;;;620    
                          ENDP

                  i32ESEI_IsIFCntrRunning PROC
;;;622    /****************************************************************************/
;;;623    int32_t i32ESEI_IsIFCntrRunning(esei_ch_e eCh)
000ea4  e1a01000          MOV      r1,r0
;;;624    {
;;;625        int32_t i32Res = C_TRUE;
000ea8  e3a00001          MOV      r0,#1
;;;626    
;;;627        if( (uint32_t)ESEI_CNT_STOPPED == biGetSESR_IFSD(eCh) )
000eac  e1a02c01          LSL      r2,r1,#24
000eb0  e1a02622          LSR      r2,r2,#12
000eb4  e24225ff          SUB      r2,r2,#0x3fc00000
000eb8  e2422ade          SUB      r2,r2,#0xde000
000ebc  e5922014          LDR      r2,[r2,#0x14]
000ec0  e7e021d2          UBFX     r2,r2,#3,#1
000ec4  e3520000          CMP      r2,#0
000ec8  1a000000          BNE      |L1.3792|
;;;628        {
;;;629            i32Res = C_FALSE;
000ecc  e3a00000          MOV      r0,#0
                  |L1.3792|
;;;630        }
;;;631    
;;;632        return i32Res;
;;;633    }
000ed0  e12fff1e          BX       lr
;;;634    
                          ENDP

                  i32ESEI_IsReadyBuffTx PROC
;;;636    /****************************************************************************/
;;;637    int32_t i32ESEI_IsReadyBuffTx(esei_ch_e eCh)
000ed4  e1a01000          MOV      r1,r0
;;;638    {
;;;639        int32_t i32Res = C_TRUE;
000ed8  e3a00001          MOV      r0,#1
;;;640    
;;;641        if( (uint32_t)ESEI_NOT_READY == biGetSESR_STRDY(eCh) )
000edc  e1a02c01          LSL      r2,r1,#24
000ee0  e1a02622          LSR      r2,r2,#12
000ee4  e24225ff          SUB      r2,r2,#0x3fc00000
000ee8  e2422ade          SUB      r2,r2,#0xde000
000eec  e5922014          LDR      r2,[r2,#0x14]
000ef0  e7e020d2          UBFX     r2,r2,#1,#1
000ef4  e3520000          CMP      r2,#0
000ef8  1a000000          BNE      |L1.3840|
;;;642        {
;;;643            i32Res = C_FALSE;
000efc  e3a00000          MOV      r0,#0
                  |L1.3840|
;;;644        }
;;;645    
;;;646        return i32Res;
;;;647    }
000f00  e12fff1e          BX       lr
;;;648    
                          ENDP

                  i32ESEI_IsReadyBuffRx PROC
;;;650    /****************************************************************************/
;;;651    int32_t i32ESEI_IsReadyBuffRx(esei_ch_e eCh)
000f04  e1a01000          MOV      r1,r0
;;;652    {
;;;653        int32_t i32Res = C_TRUE;
000f08  e3a00001          MOV      r0,#1
;;;654    
;;;655        if( (uint32_t)ESEI_NOT_READY == biGetSESR_SRRDY(eCh) )
000f0c  e1a02c01          LSL      r2,r1,#24
000f10  e1a02622          LSR      r2,r2,#12
000f14  e24225ff          SUB      r2,r2,#0x3fc00000
000f18  e2422ade          SUB      r2,r2,#0xde000
000f1c  e5922014          LDR      r2,[r2,#0x14]
000f20  e2022001          AND      r2,r2,#1
000f24  e3520000          CMP      r2,#0
000f28  1a000000          BNE      |L1.3888|
;;;656        {
;;;657            i32Res = C_FALSE;
000f2c  e3a00000          MOV      r0,#0
                  |L1.3888|
;;;658        }
;;;659    
;;;660        return i32Res;
;;;661    }
000f30  e12fff1e          BX       lr
;;;662    
                          ENDP

                  vESEI_LoopEnable PROC
;;;664    /****************************************************************************/
;;;665    void vESEI_LoopEnable(esei_ch_e eCh, esei_en_e eEnable)
000f34  e1a02c00          LSL      r2,r0,#24
;;;666    {
;;;667        vSetSELCR_SLTB(eCh, (uint8_t)eEnable);
000f38  e1a02622          LSR      r2,r2,#12
000f3c  e24225ff          SUB      r2,r2,#0x3fc00000
000f40  e2422ade          SUB      r2,r2,#0xde000
000f44  e5d2202c          LDRB     r2,[r2,#0x2c]
000f48  e7c12091          BFI      r2,r1,#1,#1
000f4c  e1a03c00          LSL      r3,r0,#24
000f50  e1a03623          LSR      r3,r3,#12
000f54  e24335ff          SUB      r3,r3,#0x3fc00000
000f58  e2433ade          SUB      r3,r3,#0xde000
000f5c  e5c3202c          STRB     r2,[r3,#0x2c]
;;;668    }
000f60  e12fff1e          BX       lr
;;;669    
                          ENDP

                  vESEI_BlockLoop PROC
;;;671    /****************************************************************************/
;;;672    void vESEI_BlockLoop(esei_ch_e eCh, esei_slb_e eBlock)
000f64  e1a02c00          LSL      r2,r0,#24
;;;673    {
;;;674        vSetSELCR_SLB(eCh, (uint8_t)eBlock);
000f68  e1a02622          LSR      r2,r2,#12
000f6c  e24225ff          SUB      r2,r2,#0x3fc00000
000f70  e2422ade          SUB      r2,r2,#0xde000
000f74  e5d2202c          LDRB     r2,[r2,#0x2c]
000f78  e7c02011          BFI      r2,r1,#0,#1
000f7c  e1a03c00          LSL      r3,r0,#24
000f80  e1a03623          LSR      r3,r3,#12
000f84  e24335ff          SUB      r3,r3,#0x3fc00000
000f88  e2433ade          SUB      r3,r3,#0xde000
000f8c  e5c3202c          STRB     r2,[r3,#0x2c]
;;;675    }
000f90  e12fff1e          BX       lr
;;;676    
                          ENDP

                  i32ESEI_SetIrqLevelTx PROC
;;;678    /****************************************************************************/
;;;679    int32_t i32ESEI_SetIrqLevelTx(esei_ch_e eCh, uint8_t u8Level)
000f94  e92d4010          PUSH     {r4,lr}
;;;680    {
000f98  e1a02000          MOV      r2,r0
;;;681        int32_t i32Res = C_SUCCESS;
000f9c  e3a00000          MOV      r0,#0
;;;682    
;;;683        if( u8Level < (uint8_t)ESEI_TXFIFO_DEPTH)
000fa0  e3510014          CMP      r1,#0x14
000fa4  aa00000b          BGE      |L1.4056|
;;;684        {
;;;685            vSetSEILR_TXIFL(eCh, u8Level);
000fa8  e1a03c02          LSL      r3,r2,#24
000fac  e1a03623          LSR      r3,r3,#12
000fb0  e24335ff          SUB      r3,r3,#0x3fc00000
000fb4  e2433ade          SUB      r3,r3,#0xde000
000fb8  e1d332b4          LDRH     r3,[r3,#0x24]
000fbc  e7cc3411          BFI      r3,r1,#8,#5
000fc0  e1a04c02          LSL      r4,r2,#24
000fc4  e1a04624          LSR      r4,r4,#12
000fc8  e24445ff          SUB      r4,r4,#0x3fc00000
000fcc  e2444ade          SUB      r4,r4,#0xde000
000fd0  e1c432b4          STRH     r3,[r4,#0x24]
000fd4  ea000000          B        |L1.4060|
                  |L1.4056|
;;;686        }
;;;687        else
;;;688        {
;;;689            i32Res = C_FAILED;
000fd8  e3e00000          MVN      r0,#0
                  |L1.4060|
;;;690        }
;;;691    
;;;692        return i32Res;
;;;693    }
000fdc  e8bd8010          POP      {r4,pc}
;;;694    
                          ENDP

                  i32ESEI_SetIrqLevelRx PROC
;;;696    /****************************************************************************/
;;;697    int32_t i32ESEI_SetIrqLevelRx(esei_ch_e eCh, uint8_t u8Level)
000fe0  e92d4010          PUSH     {r4,lr}
;;;698    {
000fe4  e1a02000          MOV      r2,r0
;;;699        int32_t i32Res = C_SUCCESS;
000fe8  e3a00000          MOV      r0,#0
;;;700    
;;;701        if( u8Level < (uint8_t)ESEI_RXFIFO_DEPTH )
000fec  e3510014          CMP      r1,#0x14
000ff0  aa00000b          BGE      |L1.4132|
;;;702        {
;;;703            vSetSEILR_RXIFL(eCh, u8Level);
000ff4  e1a03c02          LSL      r3,r2,#24
000ff8  e1a03623          LSR      r3,r3,#12
000ffc  e24335ff          SUB      r3,r3,#0x3fc00000
001000  e2433ade          SUB      r3,r3,#0xde000
001004  e1d332b4          LDRH     r3,[r3,#0x24]
001008  e7c43011          BFI      r3,r1,#0,#5
00100c  e1a04c02          LSL      r4,r2,#24
001010  e1a04624          LSR      r4,r4,#12
001014  e24445ff          SUB      r4,r4,#0x3fc00000
001018  e2444ade          SUB      r4,r4,#0xde000
00101c  e1c432b4          STRH     r3,[r4,#0x24]
001020  ea000000          B        |L1.4136|
                  |L1.4132|
;;;704        }
;;;705        else
;;;706        {
;;;707            i32Res = C_FAILED;
001024  e3e00000          MVN      r0,#0
                  |L1.4136|
;;;708        }
;;;709    
;;;710        return i32Res;
;;;711    }
001028  e8bd8010          POP      {r4,pc}
;;;712    
                          ENDP

                  u8ESEI_GetLevelTx PROC
;;;714    /****************************************************************************/
;;;715    uint8_t u8ESEI_GetLevelTx(esei_ch_e eCh)
00102c  e1a01000          MOV      r1,r0
;;;716    {
;;;717        return (uint8_t)biGetSEFLR_STBFL(eCh);
001030  e1a00c01          LSL      r0,r1,#24
001034  e1a00620          LSR      r0,r0,#12
001038  e24005ff          SUB      r0,r0,#0x3fc00000
00103c  e2400ade          SUB      r0,r0,#0xde000
001040  e1d002b0          LDRH     r0,[r0,#0x20]
001044  e7e40450          UBFX     r0,r0,#8,#5
;;;718    }
001048  e12fff1e          BX       lr
;;;719    
                          ENDP

                  u8ESEI_GetLevelRx PROC
;;;721    /****************************************************************************/
;;;722    uint8_t u8ESEI_GetLevelRx(esei_ch_e eCh)
00104c  e1a01000          MOV      r1,r0
;;;723    {
;;;724        return (uint8_t)biGetSEFLR_SRBFL(eCh);
001050  e1a00c01          LSL      r0,r1,#24
001054  e1a00620          LSR      r0,r0,#12
001058  e24005ff          SUB      r0,r0,#0x3fc00000
00105c  e2400ade          SUB      r0,r0,#0xde000
001060  e1d002b0          LDRH     r0,[r0,#0x20]
001064  e200001f          AND      r0,r0,#0x1f
;;;725    }
001068  e12fff1e          BX       lr
;;;726    
                          ENDP

                  i32ESEI_WriteFrameSingle PROC
;;;728    /****************************************************************************/
;;;729    int32_t i32ESEI_WriteFrameSingle(esei_ch_e eCh, uint16_t u16Data)
00106c  e92d4010          PUSH     {r4,lr}
;;;730    {
001070  e1a02000          MOV      r2,r0
;;;731        int32_t i32Res = C_SUCCESS;
001074  e3a00000          MOV      r0,#0
;;;732    
;;;733        if( (uint32_t) ESEI_READY == biGetSESR_STRDY(eCh) )
001078  e1a03c02          LSL      r3,r2,#24
00107c  e1a03623          LSR      r3,r3,#12
001080  e24335ff          SUB      r3,r3,#0x3fc00000
001084  e2433ade          SUB      r3,r3,#0xde000
001088  e5933014          LDR      r3,[r3,#0x14]
00108c  e7e030d3          UBFX     r3,r3,#1,#1
001090  e3530000          CMP      r3,#0
001094  0a00000b          BEQ      |L1.4296|
;;;734        {
;;;735            vSetSEDR_DR(eCh, u16Data);
001098  e1a03c02          LSL      r3,r2,#24
00109c  e1a03623          LSR      r3,r3,#12
0010a0  e24335ff          SUB      r3,r3,#0x3fc00000
0010a4  e2433ade          SUB      r3,r3,#0xde000
0010a8  e1d331b8          LDRH     r3,[r3,#0x18]
0010ac  e7cf3011          BFI      r3,r1,#0,#16
0010b0  e1a04c02          LSL      r4,r2,#24
0010b4  e1a04624          LSR      r4,r4,#12
0010b8  e24445ff          SUB      r4,r4,#0x3fc00000
0010bc  e2444ade          SUB      r4,r4,#0xde000
0010c0  e1c431b8          STRH     r3,[r4,#0x18]
0010c4  ea000000          B        |L1.4300|
                  |L1.4296|
;;;736        }
;;;737        else
;;;738        {
;;;739            i32Res = C_FAILED;
0010c8  e3e00000          MVN      r0,#0
                  |L1.4300|
;;;740        }
;;;741    
;;;742        return i32Res;
;;;743    }
0010cc  e8bd8010          POP      {r4,pc}
;;;744    
                          ENDP

                  i32ESEI_ReadFrameSingle PROC
;;;746    /****************************************************************************/
;;;747    int32_t i32ESEI_ReadFrameSingle(esei_ch_e eCh, uint16_t* pu16Data)
0010d0  e1a02000          MOV      r2,r0
;;;748    {
;;;749        int32_t i32Res = C_SUCCESS;
0010d4  e3a00000          MOV      r0,#0
;;;750    
;;;751        if( (uint32_t) ESEI_READY == biGetSESR_SRRDY(eCh) )
0010d8  e1a03c02          LSL      r3,r2,#24
0010dc  e1a03623          LSR      r3,r3,#12
0010e0  e24335ff          SUB      r3,r3,#0x3fc00000
0010e4  e2433ade          SUB      r3,r3,#0xde000
0010e8  e5933014          LDR      r3,[r3,#0x14]
0010ec  e2033001          AND      r3,r3,#1
0010f0  e3530000          CMP      r3,#0
0010f4  0a000006          BEQ      |L1.4372|
;;;752        {
;;;753            *pu16Data = biGetSEDR_DR(eCh);
0010f8  e1a03c02          LSL      r3,r2,#24
0010fc  e1a03623          LSR      r3,r3,#12
001100  e24335ff          SUB      r3,r3,#0x3fc00000
001104  e2433ade          SUB      r3,r3,#0xde000
001108  e1d331b8          LDRH     r3,[r3,#0x18]
00110c  e1c130b0          STRH     r3,[r1,#0]
001110  ea000000          B        |L1.4376|
                  |L1.4372|
;;;754        }
;;;755        else
;;;756        {
;;;757            i32Res = C_FAILED;
001114  e3e00000          MVN      r0,#0
                  |L1.4376|
;;;758        }
;;;759    
;;;760        return i32Res;
;;;761    }
001118  e12fff1e          BX       lr
;;;762    
                          ENDP

                  i32ESEI_ReadFrameUni PROC
;;;764    /****************************************************************************/
;;;765    int32_t i32ESEI_ReadFrameUni(esei_ch_e eCh, uint16_t* pu16Data)
00111c  e1a02000          MOV      r2,r0
;;;766    {
;;;767        int32_t i32Res = C_SUCCESS;
001120  e3a00000          MOV      r0,#0
;;;768    
;;;769        if( (uint32_t) ESEI_READY == biGetSESR_SRRDY(eCh) )
001124  e1a03c02          LSL      r3,r2,#24
001128  e1a03623          LSR      r3,r3,#12
00112c  e24335ff          SUB      r3,r3,#0x3fc00000
001130  e2433ade          SUB      r3,r3,#0xde000
001134  e5933014          LDR      r3,[r3,#0x14]
001138  e2033001          AND      r3,r3,#1
00113c  e3530000          CMP      r3,#0
001140  0a000006          BEQ      |L1.4448|
;;;770        {
;;;771            *pu16Data = biGetSERSR_RS(eCh);
001144  e1a03c02          LSL      r3,r2,#24
001148  e1a03623          LSR      r3,r3,#12
00114c  e24335ff          SUB      r3,r3,#0x3fc00000
001150  e2433ade          SUB      r3,r3,#0xde000
001154  e1d331bc          LDRH     r3,[r3,#0x1c]
001158  e1c130b0          STRH     r3,[r1,#0]
00115c  ea000000          B        |L1.4452|
                  |L1.4448|
;;;772        }
;;;773        else
;;;774        {
;;;775            i32Res = C_FAILED;
001160  e3e00000          MVN      r0,#0
                  |L1.4452|
;;;776        }
;;;777    
;;;778        return i32Res;
;;;779    }
001164  e12fff1e          BX       lr
;;;780    
                          ENDP

                  i32ESEI_WriteFrame PROC
;;;782    /****************************************************************************/
;;;783    int32_t i32ESEI_WriteFrame(esei_ch_e eCh, esei_scid_e eCs, esei_en_e eToggleEn,
001168  e92d40f0          PUSH     {r4-r7,lr}
;;;784                               esei_ssz_e eFrameSize, uint16_t u16Data)
;;;785    {
00116c  e1a04000          MOV      r4,r0
001170  e1a05001          MOV      r5,r1
001174  e59d6014          LDR      r6,[sp,#0x14]
;;;786        int32_t i32Res = C_SUCCESS;
001178  e3a00000          MOV      r0,#0
;;;787        uint32_t u32Buff;
;;;788    
;;;789        if( ((uint32_t) ESEI_READY == biGetSESR_STRDY(eCh)) )
00117c  e1a07c04          LSL      r7,r4,#24
001180  e1a07627          LSR      r7,r7,#12
001184  e24775ff          SUB      r7,r7,#0x3fc00000
001188  e2477ade          SUB      r7,r7,#0xde000
00118c  e5977014          LDR      r7,[r7,#0x14]
001190  e7e070d7          UBFX     r7,r7,#1,#1
001194  e3570000          CMP      r7,#0
001198  0a00000d          BEQ      |L1.4564|
;;;790        {
;;;791            /* Word-access only allowed */
;;;792            u32Buff = ((0x1U & (uint32_t)eToggleEn)) << 24;
00119c  e1a07f82          LSL      r7,r2,#31
0011a0  e1a013a7          LSR      r1,r7,#7
;;;793            u32Buff |= ((0x7U & (uint32_t)eCs)) << 21;
0011a4  e2057007          AND      r7,r5,#7
0011a8  e1811a87          ORR      r1,r1,r7,LSL #21
;;;794            u32Buff |= ((0x1fU & (uint32_t)eFrameSize)) << 16;
0011ac  e203701f          AND      r7,r3,#0x1f
0011b0  e1811807          ORR      r1,r1,r7,LSL #16
;;;795            u32Buff |= ((0xffffU & u16Data));
0011b4  e6ff7076          UXTH     r7,r6
0011b8  e1811007          ORR      r1,r1,r7
;;;796    
;;;797            /* Write to Data Extended Register */
;;;798            vSetSEDER_W(eCh, u32Buff);
0011bc  e1a07c04          LSL      r7,r4,#24
0011c0  e1a07627          LSR      r7,r7,#12
0011c4  e24775ff          SUB      r7,r7,#0x3fc00000
0011c8  e2477ade          SUB      r7,r7,#0xde000
0011cc  e5871030          STR      r1,[r7,#0x30]
0011d0  ea000000          B        |L1.4568|
                  |L1.4564|
;;;799        }
;;;800        else
;;;801        {
;;;802            i32Res = C_FAILED;
0011d4  e3e00000          MVN      r0,#0
                  |L1.4568|
;;;803        }
;;;804    
;;;805        return i32Res;
;;;806    }
0011d8  e8bd80f0          POP      {r4-r7,pc}
;;;807    
                          ENDP

                  i32ESEI_ReadFrame PROC
;;;809    /****************************************************************************/
;;;810    int32_t i32ESEI_ReadFrame(esei_ch_e eCh, esei_scid_e* peSlaveId,
0011dc  e92d40f0          PUSH     {r4-r7,lr}
;;;811                              esei_pr_e* peParityRep, uint8_t* pu8FrameSize,
;;;812                              uint16_t* pu16Data)
;;;813    {
0011e0  e1a04000          MOV      r4,r0
0011e4  e1a05001          MOV      r5,r1
0011e8  e59d6014          LDR      r6,[sp,#0x14]
;;;814        int32_t i32Res = C_SUCCESS;
0011ec  e3a00000          MOV      r0,#0
;;;815        uint32_t u32Buff;
;;;816    
;;;817        if( (uint32_t) ESEI_READY == biGetSESR_SRRDY(eCh) )
0011f0  e1a07c04          LSL      r7,r4,#24
0011f4  e1a07627          LSR      r7,r7,#12
0011f8  e24775ff          SUB      r7,r7,#0x3fc00000
0011fc  e2477ade          SUB      r7,r7,#0xde000
001200  e5977014          LDR      r7,[r7,#0x14]
001204  e2077001          AND      r7,r7,#1
001208  e3570000          CMP      r7,#0
00120c  0a00000d          BEQ      |L1.4680|
;;;818        {
;;;819            /* Read Data Extended Register in one word access */
;;;820            u32Buff = u32GetSEDER_R(eCh);
001210  e1a07c04          LSL      r7,r4,#24
001214  e1a07627          LSR      r7,r7,#12
001218  e24775ff          SUB      r7,r7,#0x3fc00000
00121c  e2477ade          SUB      r7,r7,#0xde000
001220  e5971030          LDR      r1,[r7,#0x30]
;;;821            *pu16Data = (uint16_t)(u32Buff & 0xFFFFU);
001224  e1c610b0          STRH     r1,[r6,#0]
;;;822            *pu8FrameSize = (uint8_t)((u32Buff >> 16) & 0x1FU);
001228  e7e47851          UBFX     r7,r1,#16,#5
00122c  e5c37000          STRB     r7,[r3,#0]
;;;823            *peSlaveId = (esei_scid_e)((u32Buff >> 21U) & 0x7U);
001230  e7e27ad1          UBFX     r7,r1,#21,#3
001234  e5c57000          STRB     r7,[r5,#0]
;;;824            *peParityRep = (esei_pr_e)((u32Buff >> 31) & 0x1U);
001238  e3a07001          MOV      r7,#1
00123c  e0077fa1          AND      r7,r7,r1,LSR #31
001240  e5c27000          STRB     r7,[r2,#0]
001244  ea000000          B        |L1.4684|
                  |L1.4680|
;;;825        }
;;;826        else
;;;827        {
;;;828            i32Res = C_FAILED;
001248  e3e00000          MVN      r0,#0
                  |L1.4684|
;;;829        }
;;;830    
;;;831        return i32Res;
;;;832    }
00124c  e8bd80f0          POP      {r4-r7,pc}
;;;833    
                          ENDP

                  i32ESEI_ReadWriteFrame PROC
;;;835    /****************************************************************************/
;;;836    int32_t i32ESEI_ReadWriteFrame(esei_ch_e eCh, esei_dSEntry_st stSend,
001250  e92d40ff          PUSH     {r0-r7,lr}
;;;837                                   esei_dREntry_st* pstRecv, esei_en_e eToggleEn)
;;;838    {
001254  e1a04000          MOV      r4,r0
001258  e1a05003          MOV      r5,r3
;;;839        int32_t i32Res = C_SUCCESS;
00125c  e3a00000          MOV      r0,#0
;;;840        uint32_t u32Buff;
;;;841        uint32_t u32TimCnt =0;
001260  e3a03000          MOV      r3,#0
;;;842        esei_rdy_e eReady;
;;;843        esei_ssz_e eTsize;
;;;844    
;;;845        eReady = (esei_rdy_e) biGetSESR_STRDY(eCh);
001264  e1a0cc04          LSL      r12,r4,#24
001268  e1a0c62c          LSR      r12,r12,#12
00126c  e24cc5ff          SUB      r12,r12,#0x3fc00000
001270  e24ccade          SUB      r12,r12,#0xde000
001274  e59cc014          LDR      r12,[r12,#0x14]
001278  e7e060dc          UBFX     r6,r12,#1,#1
;;;846        eTsize = (esei_ssz_e) biGetSECR1_SSZ(eCh);
00127c  e1a0cc04          LSL      r12,r4,#24
001280  e1a0c62c          LSR      r12,r12,#12
001284  e24cc5ff          SUB      r12,r12,#0x3fc00000
001288  e24ccade          SUB      r12,r12,#0xde000
00128c  e1dcc0b8          LDRH     r12,[r12,#8]
001290  e20c701f          AND      r7,r12,#0x1f
;;;847        
;;;848        /* Check whether TX FIFO is ready */
;;;849        if( (ESEI_READY == eReady) && (ESEI_TXSIZE_SFL == eTsize) )
001294  e3560000          CMP      r6,#0
001298  0a000030          BEQ      |L1.4960|
00129c  e3570000          CMP      r7,#0
0012a0  1a00002e          BNE      |L1.4960|
;;;850        {
;;;851            /* Write to Data Extended Register */
;;;852            u32Buff =  ((uint32_t)(0x1U & (uint32_t)(eToggleEn))) << 24;
0012a4  e1a0cf85          LSL      r12,r5,#31
0012a8  e1a013ac          LSR      r1,r12,#7
;;;853            u32Buff |= ((uint32_t)(0x7U & (uint32_t)(stSend.eSlaveId))) << 21;
0012ac  e5ddc004          LDRB     r12,[sp,#4]
0012b0  e20cc007          AND      r12,r12,#7
0012b4  e1811a8c          ORR      r1,r1,r12,LSL #21
;;;854            u32Buff |=  ((uint32_t)(0x1FU & (uint32_t)(stSend.eFrameSize))) << 16;
0012b8  e5ddc005          LDRB     r12,[sp,#5]
0012bc  e20cc01f          AND      r12,r12,#0x1f
0012c0  e181180c          ORR      r1,r1,r12,LSL #16
;;;855            u32Buff |=  ((uint32_t)(0xFFFFU & (uint32_t)stSend.u16Data));
0012c4  e1ddc0b6          LDRH     r12,[sp,#6]
0012c8  e181100c          ORR      r1,r1,r12
;;;856            vSetSEDER_W(eCh, u32Buff);
0012cc  e1a0cc04          LSL      r12,r4,#24
0012d0  e1a0c62c          LSR      r12,r12,#12
0012d4  e24cc5ff          SUB      r12,r12,#0x3fc00000
0012d8  e24ccade          SUB      r12,r12,#0xde000
0012dc  e58c1030          STR      r1,[r12,#0x30]
;;;857    
;;;858            /* Wait for RX buffer ready */
;;;859            while( (biGetSESR_SRRDY(eCh) != (uint32_t)ESEI_READY) && (u32TimCnt < (uint32_t)ESEI_RX_RDY_TIMEOUT) )
0012e0  ea000000          B        |L1.4840|
                  |L1.4836|
;;;860            {
;;;861                u32TimCnt++;
0012e4  e2833001          ADD      r3,r3,#1
                  |L1.4840|
0012e8  e1a0cc04          LSL      r12,r4,#24            ;859
0012ec  e1a0c62c          LSR      r12,r12,#12           ;859
0012f0  e24cc5ff          SUB      r12,r12,#0x3fc00000   ;859
0012f4  e24ccade          SUB      r12,r12,#0xde000      ;859
0012f8  e59cc014          LDR      r12,[r12,#0x14]       ;859
0012fc  e20cc001          AND      r12,r12,#1            ;859
001300  e35c0000          CMP      r12,#0                ;859
001304  1a000002          BNE      |L1.4884|
001308  e59fc0f8          LDR      r12,|L1.5128|
00130c  e153000c          CMP      r3,r12                ;859
001310  3afffff3          BCC      |L1.4836|
                  |L1.4884|
;;;862            }
;;;863    
;;;864            /* Check for timeout */
;;;865            if( u32TimCnt < (uint32_t)ESEI_RX_RDY_TIMEOUT )
001314  e59fc0ec          LDR      r12,|L1.5128|
001318  e153000c          CMP      r3,r12
00131c  2a00000d          BCS      |L1.4952|
;;;866            {
;;;867                /* Read from Data Extended Register */
;;;868                u32Buff = u32GetSEDER_R(eCh);
001320  e1a0cc04          LSL      r12,r4,#24
001324  e1a0c62c          LSR      r12,r12,#12
001328  e24cc5ff          SUB      r12,r12,#0x3fc00000
00132c  e24ccade          SUB      r12,r12,#0xde000
001330  e59c1030          LDR      r1,[r12,#0x30]
;;;869                pstRecv->u16Data = (uint16_t)(u32Buff & 0xFFFFU);
001334  e1c210b4          STRH     r1,[r2,#4]
;;;870                pstRecv->eFrameSize = (esei_ssz_e)((u32Buff >> 16) & 0x1FU);
001338  e7e4c851          UBFX     r12,r1,#16,#5
00133c  e5c2c001          STRB     r12,[r2,#1]
;;;871                pstRecv->eSlaveId = (esei_scid_e)((u32Buff >> 21) & 0x7U);
001340  e7e2cad1          UBFX     r12,r1,#21,#3
001344  e5c2c000          STRB     r12,[r2,#0]
;;;872                pstRecv->eParityErr = (esei_pr_e)((u32Buff >> 31) & 0x1U);
001348  e3a0c001          MOV      r12,#1
00134c  e00ccfa1          AND      r12,r12,r1,LSR #31
001350  e5c2c002          STRB     r12,[r2,#2]
001354  ea000002          B        |L1.4964|
                  |L1.4952|
;;;873            }
;;;874            else
;;;875            {
;;;876                i32Res = C_FAILED;
001358  e3e00000          MVN      r0,#0
00135c  ea000000          B        |L1.4964|
                  |L1.4960|
;;;877            }
;;;878        }
;;;879        else
;;;880        {
;;;881            i32Res = C_FAILED;
001360  e3e00000          MVN      r0,#0
                  |L1.4964|
001364  e28dd010          ADD      sp,sp,#0x10
;;;882        }
;;;883    
;;;884        return i32Res;
;;;885    }
001368  e8bd80f0          POP      {r4-r7,pc}
;;;886    
                          ENDP

                  i32ESEI_ReadWriteData PROC
;;;888    /****************************************************************************/
;;;889    int32_t i32ESEI_ReadWriteData(esei_ch_e eCh, const esei_dSEntry_st* pstSendData,
00136c  e92d4ff8          PUSH     {r3-r11,lr}
;;;890                                  esei_dREntry_st* pstRecvData, uint32_t u32Cnt,
;;;891                                  esei_en_e eToggleEn)
;;;892    {
001370  e1a0a000          MOV      r10,r0
001374  e1a06001          MOV      r6,r1
001378  e1a07002          MOV      r7,r2
00137c  e1a08003          MOV      r8,r3
001380  e59db028          LDR      r11,[sp,#0x28]
;;;893        int32_t i32FrmCnt = 0;
001384  e3a04000          MOV      r4,#0
;;;894        uint32_t u32TimOutCnt = 0;
001388  e3a09000          MOV      r9,#0
;;;895        int32_t i32Res;
;;;896    
;;;897    
;;;898        while((((uint32_t)i32FrmCnt) < u32Cnt) && (u32TimOutCnt < (uint32_t)ESEI_TX_RDY_TIMEOUT))
00138c  ea000015          B        |L1.5096|
                  |L1.5008|
;;;899        {
;;;900            /* Transfer (read/write) one frame */
;;;901            i32Res =  i32ESEI_ReadWriteFrame(eCh, pstSendData[i32FrmCnt],
001390  e0840084          ADD      r0,r4,r4,LSL #1
001394  e0872080          ADD      r2,r7,r0,LSL #1
001398  e0860104          ADD      r0,r6,r4,LSL #2
00139c  e5900000          LDR      r0,[r0,#0]
0013a0  e1a0300b          MOV      r3,r11
0013a4  e58d0000          STR      r0,[sp,#0]
0013a8  e1a01000          MOV      r1,r0
0013ac  e1a0000a          MOV      r0,r10
0013b0  ebfffffe          BL       i32ESEI_ReadWriteFrame
0013b4  e1a05000          MOV      r5,r0
;;;902                                             (esei_dREntry_st*)&pstRecvData[i32FrmCnt], eToggleEn);
;;;903            if( C_SUCCESS == i32Res )
0013b8  e3550000          CMP      r5,#0
0013bc  1a000002          BNE      |L1.5068|
;;;904            {
;;;905                /* Increment frame counter */
;;;906                i32FrmCnt++;         
0013c0  e2844001          ADD      r4,r4,#1
;;;907                /* Reset timeout counter */
;;;908                u32TimOutCnt = 0;    
0013c4  e3a09000          MOV      r9,#0
0013c8  ea000006          B        |L1.5096|
                  |L1.5068|
;;;909            }
;;;910            else
;;;911            {
;;;912                /* Check whether TX buffer is full */
;;;913                if( C_FALSE == i32ESEI_IsReadyBuffTx(eCh) )
0013cc  e1a0000a          MOV      r0,r10
0013d0  ebfffffe          BL       i32ESEI_IsReadyBuffTx
0013d4  e3500000          CMP      r0,#0
0013d8  1a000001          BNE      |L1.5092|
;;;914                {
;;;915                    /* No error - increment timeout counter */
;;;916                    u32TimOutCnt++;
0013dc  e2899001          ADD      r9,r9,#1
0013e0  ea000000          B        |L1.5096|
                  |L1.5092|
;;;917                }
;;;918                else
;;;919                {
;;;920                    /* Error occured */
;;;921                    break;
0013e4  ea000004          B        |L1.5116|
                  |L1.5096|
0013e8  e1540008          CMP      r4,r8                 ;898
0013ec  2a000002          BCS      |L1.5116|
0013f0  e59f0014          LDR      r0,|L1.5132|
0013f4  e1590000          CMP      r9,r0                 ;898
0013f8  3affffe4          BCC      |L1.5008|
                  |L1.5116|
0013fc  e320f000          NOP      
;;;922                }
;;;923            }
;;;924        }
;;;925    
;;;926        return i32FrmCnt;
001400  e1a00004          MOV      r0,r4
;;;927    }
001404  e8bd8ff8          POP      {r3-r11,pc}
;;;928    
                          ENDP

                  |L1.5128|
                          DCD      0x01312d00
                  |L1.5132|
                          DCD      0x001e8480

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_ESEI_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e382024          DCB      0x2e,0x38,0x20,0x24
000010  00                DCB      0x00
                  au8LLDD_ESEI_C_TAG
000011  244e61            DCB      0x24,0x4e,0x61
000014  6d653a20          DCB      0x6d,0x65,0x3a,0x20
000018  4c4c4444          DCB      0x4c,0x4c,0x44,0x44
00001c  5f315f36          DCB      0x5f,0x31,0x5f,0x36
000020  202400            DCB      0x20,0x24,0x00
                  au8LLDD_ESEI_H_REVISION
000023  24                DCB      0x24
000024  52657669          DCB      0x52,0x65,0x76,0x69
000028  73696f6e          DCB      0x73,0x69,0x6f,0x6e
00002c  3a20312e          DCB      0x3a,0x20,0x31,0x2e
000030  39202400          DCB      0x39,0x20,0x24,0x00
                  au8LLDD_ESEI_H_TAG
000034  244e616d          DCB      0x24,0x4e,0x61,0x6d
000038  653a204c          DCB      0x65,0x3a,0x20,0x4c
00003c  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000040  315f3620          DCB      0x31,0x5f,0x36,0x20
000044  2400              DCB      0x24,0x00
                  au8LLDD_ESEI_IO_H_REVISION
000046  2452              DCB      0x24,0x52
000048  65766973          DCB      0x65,0x76,0x69,0x73
00004c  696f6e3a          DCB      0x69,0x6f,0x6e,0x3a
000050  20312e31          DCB      0x20,0x31,0x2e,0x31
000054  31202400          DCB      0x31,0x20,0x24,0x00
                  au8LLDD_ESEI_IO_H_TAG
000058  244e616d          DCB      0x24,0x4e,0x61,0x6d
00005c  653a204c          DCB      0x65,0x3a,0x20,0x4c
000060  4c44445f          DCB      0x4c,0x44,0x44,0x5f
000064  315f3620          DCB      0x31,0x5f,0x36,0x20
000068  2400              DCB      0x24,0x00
