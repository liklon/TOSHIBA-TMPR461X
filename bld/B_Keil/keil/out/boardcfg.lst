L 1 "..\..\src\boardcfg.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Board specific initialization routines
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : System
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.2 $
N*   DATE        : $Date: 2015/10/16 12:19:36 $
N*   TAG         : $Name: Demo_Version_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                       /* Core specific primitive type definitions */
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 23 "..\..\src\boardcfg.c" 2
N#include "boardcfg.h"                       /* Own definitions and prototypes */
L 1 "..\..\inc\boardcfg.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: boardcfg.h,v $
N*   Description : Board specific initialization definitions
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : System
N*               : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/boardcfg.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef BOARDCFG_H
N#define BOARDCFG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N
N/**********************************************
N*                 Definitions                 *
N**********************************************/
N/* base addresses of DVI chips */
N#define BASE_ADDRESS_GDC0                   0x70
N#define BASE_ADDRESS_GDC1                   0x72
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vInitGraphicsSystem
N *
N * Purpose:       Initialization of the graphic system
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vInitGraphicsSystem(void);
N
N
N/****************************************************************************
N *
N * Function:      vBoardCfg
N *
N * Purpose:       Board specific initialization
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vBoardCfg(void);
N
N
N#endif /* BOARDCFG_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: boardcfg.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 24 "..\..\src\boardcfg.c" 2
N#include "ccr.h"                            /* CCR */
L 1 "..\..\..\..\lldd\inc\ccr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : CCR Low-level register
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : CCR
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.22 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CCR_LLDD_H
N#define CCR_LLDD_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_CCR_H_REVISION     "$Revision: 1.22 $"
N#define LLDD_CCR_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N/* CCR unlock key value */
N#define CCR_KEY_VAL 0xA5C0F17BU
N
N/* CCR PDS unlock macro */
N#define vCCR_PDS_UNLOCK()(vSetCCR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/* CCR PDH unlock macro */
N#define vCCR_PDH_UNLOCK()(vSetPDHR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
Ntypedef enum tag_ccr_enable_e
N{
N  CCR_DISABLE = 0,  /* disable */
N  CCR_ENABLE  = 1   /* enable  */
N} ccr_enable_e;
N
Ntypedef enum tag_ccr_alarm_no_e
N{
N  CCR_ALARM_0  = 0,   /* Alarm 0 */
N  CCR_ALARM_1  = 1   /* Alarm 1  */
N} ccr_alarm_no_e;
N
N/* Controller selection */
Ntypedef enum tag_ccr_cntrl_e
N{
N    CCR_QSPI_0        =  0,   /* QSPI 0 */
N    CCR_QSPI_1        =  1,   /* QSPI 1 */
N    CCR_QSPI_INT      =  2,   /* QSPI Internal */
N    CCR_SDRAM         =  3,   /* SDRAM */
N    CCR_I2S           =  4,   /* I2S */
N    CCR_GDC_0         =  5,   /* GDC 0 */
N    CCR_GDC_1         =  6,   /* GDC 1 */
N    CCR_DMA           =  7,   /* DMA */
N    CCR_PARFLASH      =  8,   /* Parallel Flash */
N    CCR_DAP           =  9,   /*  */
N    CCR_GA            = 10,   /* GA Engine */
N    CCR_PNG           = 11,   /* PNG Decoder */
N    CCR_FG            = 12,   /* Framegrabber */
N    CCR_MLB           = 13,   /* MLB */
N    CCR_SMC           = 14,   /* Stepper Motor */
N    CCR_HSPWM         = 15,   /* HSPWM */
N    CCR_I2SM          = 16,   /* I2SM */
N    CCR_TSM           = 17,   /* TSM */
N    CCR_TRACE         = 18,   /* Trace */
N    CCR_320MHz        = 19    /* 320MHz */
N} ccr_cntrl_e;
N
N/* Modulation type */
Ntypedef enum tag_ccr_modulated_clk_e
N{
N    CCR_MODULATED     = 0,    /* modulated clock */
N    CCR_NON_MODULATED = 1     /* non modulated clock */
N} ccr_modulated_clk_e;
N
N/*  */
Ntypedef enum tag_ccr_clock_type_e
N{
N    CCR_MODULATED_GDC0       = 0,    /* Modulated clock for GDC0 */
N    CCR_MODULATED_GDC1       = 1,    /* Modulated clock for GDC1 */
N    CCR_NON_MODULATED_GDC0   = 2,    /* Non modulated clock for GDC0 */
N    CCR_NON_MODULATED_GDC1   = 3,    /* Non modulated clock for GDC1 */
N    CCR_DOTCLKIN             = 4,    /* DOTCLKIN for GDC0 or GDC1 */
N    CCR_MODULATED_I2S        = 5,    /* Modulated clock for I2S */
N    CCR_NON_MODULATED_I2S    = 6,    /* Non modulated clock for I2S */
N    CCR_I2SMCLKIN            = 7,    /* I2SMCLKIN for I2S */
N    CCR_MODULATED_320MHZ     = 8,    /* Modulated clock for 320MHz */
N    CCR_NON_MODULATED_320MHZ = 9     /* Non modulated clock for 320MHz */
N} ccr_clock_type_e;
N
N/* Clock divider values (input clock: 900MHz) */
Ntypedef enum tag_ccr_clk_freq_e
N{
N    CCR_CLKDIV_112_5MHz =  8,    /* 112,5 MHz output clk */
N    CCR_CLKDIV_100_0MHz =  9,    /* 100,0 MHz output clk */
N    CCR_CLKDIV_90_0MHz  = 10,    /*  90,0 MHz output clk */
N    CCR_CLKDIV_81_8MHz  = 11,    /*  81,8 MHz output clk */
N    CCR_CLKDIV_75_0MHz  = 12,    /*  75,0 MHz output clk */
N    CCR_CLKDIV_69_2MHz  = 13,    /*  69,2 MHz output clk */
N    CCR_CLKDIV_64_3MHz  = 14,    /*  64,3 MHz output clk */
N    CCR_CLKDIV_60_0MHz  = 15,    /*  60,0 MHz output clk */
N    CCR_CLKDIV_56_3MHz  = 16,    /*  56,3 MHz output clk */
N    CCR_CLKDIV_52_9MHz  = 17,    /*  52,9 MHz output clk */
N    CCR_CLKDIV_50_0MHz  = 18,    /*  50,0 MHz output clk */
N    CCR_CLKDIV_47_4MHz  = 19,    /*  47,4 MHz output clk */
N    CCR_CLKDIV_45_0MHz  = 20,    /*  45,0 MHz output clk */
N    CCR_CLKDIV_42_9MHz  = 21,    /*  42,9 MHz output clk */
N    CCR_CLKDIV_40_9MHz  = 22,    /*  40,9 MHz output clk */
N    CCR_CLKDIV_39_1MHz  = 23,    /*  39,1 MHz output clk */
N    CCR_CLKDIV_37_5MHz  = 24,    /*  37,5 MHz output clk */
N    CCR_CLKDIV_36_0MHz  = 25,    /*  36,0 MHz output clk */
N    CCR_CLKDIV_34_6MHz  = 26,    /*  34,6 MHz output clk */
N    CCR_CLKDIV_33_3MHz  = 27,    /*  33,3 MHz output clk */
N    CCR_CLKDIV_32_1MHz  = 28,    /*  32,1 MHz output clk */
N    CCR_CLKDIV_31_0MHz  = 29,    /*  31,0 MHz output clk */
N    CCR_CLKDIV_30_0MHz  = 30,    /*  30,0 MHz output clk */
N    CCR_CLKDIV_29_0MHz  = 31,    /*  29,0 MHz output clk */
N    CCR_CLKDIV_28_1MHz  = 32,    /*  28,1 MHz output clk */
N    CCR_CLKDIV_27_2MHz  = 33,    /*  27,2 MHz output clk */
N    CCR_CLKDIV_26_4MHz  = 34,    /*  26,4 MHz output clk */
N    CCR_CLKDIV_25_7MHz  = 35,    /*  25,7 MHz output clk */
N    CCR_CLKDIV_25_0MHz  = 36,    /*  25,0 MHz output clk */
N    CCR_CLKDIV_24_3MHz  = 37,    /*  24,3 MHz output clk */
N    CCR_CLKDIV_23_6MHz  = 38,    /*  23,6 MHz output clk */
N    CCR_CLKDIV_23_0MHz  = 39,    /*  23,0 MHz output clk */
N    CCR_CLKDIV_22_5MHz  = 40     /*  22,5 MHz output clk */
N} ccr_clk_freq_e;
N
N/* Clock stability */
Ntypedef enum tag_ccr_clock_stability_e
N{
N    CCR_CLOCK_NOT_STABLE     = 0,    /* Clock is not stable */
N    CCR_CLOCK_STABLE         = 1,    /* Clock is stable */
N    CCR_CLOCK_STABILITY_FAIL = 2     /* Clock stability faild */
N} ccr_clock_stability_e;
N
N/* Clocks */
Ntypedef enum tag_ccr_clocks_e
N{
N    CCR_OSC10M            = 0,    /* 10M clock */
N    CCR_OSC32K            = 1,    /* 32K clock */
N    CCR_RC100K            = 2,    /* RC100K clock */
N    CCR_MODULATED_PLL     = 3,    /* modulated PLL */
N    CCR_NON_MODULATED_PLL = 4     /* non-modulated PLL */
N} ccr_clocks_e;
N
N/* Reset types */
Ntypedef enum tag_reset_type_e
N{
N    CCR_FULL_RST    = 0,    /* Software full reset */
N    CCR_DBG_RST     = 1,    /* Debug reset */
N    CCR_SW_PART_RST = 2     /* Software part reset */
N} ccr_reset_type_e;
N
N/* target device mode */
Ntypedef enum tag_ccr_device_mode_e
N{
N    CCR_DEVICE_MODE_TRANSITION = 0x00000000,    /* M_PLL */
N    CCR_DEVICE_MODE_M_PLL      = 0x005C0001,    /* M_PLL */
N    CCR_DEVICE_MODE_M_OSC10    = 0x005C0002,    /* M_OSC10 */
N    CCR_DEVICE_MODE_STB_OSC10  = 0x005C0004,    /* STB_OSC10 */
N    CCR_DEVICE_MODE_SLP_OSC10  = 0x005C0008,    /* SLP_OSC10 */
N    CCR_DEVICE_MODE_SLP_RC10   = 0x005C0010,    /* SLP_RC10 */
N    CCR_DEVICE_MODE_STOP_R     = 0x005C0020,    /* STOP_R */
N    CCR_DEVICE_MODE_STOP       = 0x005C0040     /* STOP */
N} ccr_device_mode_e;
N
N/* Interupts */
Ntypedef enum tag_ccr_interrupts_e
N{
N    CCR_INTERRUPTS_STATE_CHANGE = 0,    /* state change interrupt*/
N    CCR_INTERRUPTS_ALARM_0      = 1,    /* alarm comparator 0 interrupt */
N    CCR_INTERRUPTS_ALARM_1      = 2,    /* alarm comparator 1 interrupt */
N    CCR_INTERRUPTS_BECC         = 3,    /* backup RAM ECC interrupt */
N    CCR_INTERRUPTS_MECC         = 4     /* main memory ECC interrupt */
N} ccr_interrupts_e;
N
N/* Interrupt occurred */
Ntypedef enum tag_ccr_int_occurred_e
N{
N  CCR_INT_NOT_OCCURRED = 0,  /* interrupt did not occur */
N  CCR_INT_OCCURRED     = 1   /* interrupt occurred */
N} ccr_int_occurred_e;
N
N/* Operation mode type */
Ntypedef enum tag_ccr_operation_mode_type_e
N{
N    CCR_SSCG_MODE_DECIMAL_FACTOR = 0,    /* Decimal factor mode */
N    CCR_SSCG_MODE_INTEGER_FACTOR = 1     /* Integer factor mode */
N} ccr_operation_mode_type_e;
N
N/* Modulation direction */
Ntypedef enum tag_ccr_modulation_direction
N{
N    CCR_SSCG_MD_DOWN_SPREAD   = 0,    /* modulation direction is down spread */
N    CCR_SSCG_MD_CENTER_SPREAD = 1     /* modulation direction is up spread */
N} ccr_modulation_direction;
N
N/* Feedback division ratio prescaler value */
Ntypedef enum tag_ccr_fdr_prescaler_e
N{
N    CCR_FDR_PRESCALER_1 = 0,    /* feedback division ratio not doubled */
N    CCR_FDR_PRESCALER_2 = 1     /* feedback division ratio doubled */
N} ccr_fdr_prescaler_e;
N
N/* Watchdof timer alarm output configuration */
Ntypedef enum tag_ccr_wdt_alarm_type_e
N{
N    CCR_WDT_ALARM_AS_NMI   = 0,    /* watchdog timer alarm as watchdog timer NMI */
N    CCR_WDT_ALARM_AS_RESET = 1     /* watchdog timer alarm as watchdog timer RESET */
N} ccr_wdt_alarm_type_e;
N
N/* CAN modes */
Ntypedef enum tag_ccr_can_mode_e
N{                                     /*             tranceiver , combined channels, sepatate channels, pin pairs, description */
N    CCR_CAN_MODE_T_1_1_1_1  = 0x0,    /* CAN mode  1:     yes   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_T_2_1_1    = 0x1,    /* CAN mode  2:     yes   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_T_2_2      = 0x2,    /* CAN mode  3:     yes   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_T_3_1      = 0x3,    /* CAN mode  4:     yes   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_T_ALL      = 0x4,    /* CAN mode  5:     yes   ,         4        ,         -        ,    1     , all to one  */
N    CCR_CAN_MODE_NT_1_1_1_1 = 0x8,    /* CAN mode  5:      no   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_NT_2_1_1   = 0x9,    /* CAN mode  6:      no   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_NT_2_2     = 0xA,    /* CAN mode  7:      no   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_NT_3_1     = 0xB,    /* CAN mode  8:      no   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_NT_ALL     = 0xC,    /* CAN mode  9:      no   ,         4        ,         -        ,    1     , all to all  */
N    CCR_CAN_MODE_NT_INTER   = 0xF     /* CAN mode 10:      no   ,         -        ,         4        ,    -     , internal    */
N} ccr_can_mode_e;
N
N/* ECC modes */
Ntypedef enum tag_ccr_ecc_mode_e
N{
N    CCR_ECC_MODE_256KB  = 0,    /* 256KB with ECC */
N    CCR_ECC_MODE_128KB  = 2,    /* 128KB with ECC */
N    CCR_ECC_MODE_NO_ECC = 3     /* without ECC */
N} ccr_ecc_mode_e;
N
N/* TBIO channel */
Ntypedef enum tag_ccr_tbio_channel_e
N{
N    CCR_TBIO_0 = 0,    /* TBIO channel 0 */
N    CCR_TBIO_1 = 1,    /* TBIO channel 1 */
N    CCR_TBIO_2 = 2,    /* TBIO channel 2 */
N    CCR_TBIO_3 = 3,    /* TBIO channel 3 */
N    CCR_TBIO_4 = 4,    /* TBIO channel 4 */
N    CCR_TBIO_5 = 5,    /* TBIO channel 5 */
N    CCR_TBIO_6 = 6,    /* TBIO channel 6 */
N    CCR_TBIO_7 = 7,    /* TBIO channel 7 */
N    CCR_TBIO_8 = 8,    /* TBIO channel 8 */
N    CCR_TBIO_9 = 9     /* TBIO channel 9 */
N} ccr_tbio_channel_e;
N
N/* TBIO port direction */
Ntypedef enum tag_ccr_tbio_direction_e
N{
N    CCR_TBIO_IN  = 0,    /* TBIO pin as input */
N    CCR_TBIO_OUT = 1     /* TBIO pin as output */
N} ccr_tbio_direction_e;
N
N/* TBIN0 signal select for Complex Timer 4 */
Ntypedef enum tag_ccr_tbin_source_ctimer4_e
N{
N    CCR_TBIN_CTIMER4_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER4_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER4_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER4_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER4_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER4_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER4_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER4_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER4_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER4_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER4_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER4_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER4_GDC_PWMOUT0    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is SIN_PLUS0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is SIN_MINUS0 */
N} ccr_tbin_source_ctimer4_e;
N
N/* TBIN0 signal select for Complex Timer 5 */
Ntypedef enum tag_ccr_tbin_source_ctimer5_e
N{
N    CCR_TBIN_CTIMER5_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER5_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER5_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER5_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER5_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER5_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER5_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER5_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER5_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER5_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER5_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER5_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER5_GDC_PWMOUT1    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT1 */
N    CCR_TBIN_CTIMER5_GDC_COS_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is COS_PLUS0 */
N    CCR_TBIN_CTIMER5_GDC_COS_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is COS_MINUS0 */
N} ccr_tbin_source_ctimer5_e;
N
N/* Synchronisation between GDC0 and GDC1 */
Ntypedef enum tag_ccr_gdc_sync_e
N{
N    CCR_GDC_SYNC_INDEPENDANT   = 0,    /* independant operation of GDC1 */
N    CCR_GDC_SYNC_GDC1_USE_GDC0 = 1     /* GDC1 uses GDC0 synchronisation signals */
N} ccr_gdc_sync_e;
N
N/* NOR channel */
Ntypedef enum tag_ccr_nor_channel_e
N{
N    CCR_NOR_CHANNEL_0 = 0,    /* NOR channel 0 */
N    CCR_NOR_CHANNEL_1 = 1     /* NOR channel 1 */
N} ccr_nor_channel_e;
N
N/* NAND channel */
Ntypedef enum tag_ccr_nand_channel_e
N{
N    CCR_NAND_CHANNEL_0 = 0,    /* NAND channel 0 */
N    CCR_NAND_CHANNEL_1 = 1     /* NAND channel 1 */
N} ccr_nand_channel_e;
N
N/* SRAM channel */
Ntypedef enum tag_ccr_sram_channel_e
N{
N    CCR_SRAM_CHANNEL_0 = 0,    /* SRAM channel 0 */
N    CCR_SRAM_CHANNEL_1 = 1,    /* SRAM channel 1 */
N    CCR_SRAM_CHANNEL_2 = 2,    /* SRAM channel 2 */
N    CCR_SRAM_CHANNEL_3 = 3     /* SRAM channel 3 */
N} ccr_sram_channel_e;
N
N/* Complex timer */
Ntypedef enum tag_ccr_complex_timer_e
N{
N    CCR_COMPLEX_TIMER_0_TO_5 = 0,    /* Complex timer 0 to 5 */
N    CCR_COMPLEX_TIMER_6_TO_9 = 1     /* Complex timer 6 to 9 */
N} ccr_complex_timer_e;
N
N/* Device version */
Ntypedef enum tag_ccr_device_version_e
N{
N    DEVICE_CAP_BT_1  = 0,    /* TMPR461XBG-300 (BGA-328, no SIP Flash)   */
N    DEVICE_CAP_C     = 1,    /* TMPR462XBG-300 (BGA-328, with SIP Flash) */
N    DEVICE_CAP_BT_0  = 2,    /* TMPR460XBG-300 (BGA-244, no SIP Flash)   */
N    DEVICE_INVALID   = 3     /* Reserved   */
N} ccr_device_version_e;
N
N/* SIP Flash size */
Ntypedef enum tag_ccr_SIPflash_size_e
N{
N    CCR_SIP_FLASH_SIZE_2MB  = 0,    /*  2MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_4MB  = 1,    /*  4MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_8MB  = 2,    /*  8MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_16MB = 3     /* 16MB SIP FLASH size */
N} ccr_SIPflash_size_e;
N
Ntypedef enum tag_processor_device_e
N{
N    CCR_CR4 = 0,    /* processor R4 */
N    CCR_M3  = 1     /* processor M3 */
N} ccr_processor_device_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_current_trim_e
N{
N    CCR_VREG_CURRENT_TRIM_M_40_PROZ = 4,    /* -40% */
N    CCR_VREG_CURRENT_TRIM_M_30_PROZ = 5,    /* -30% */
N    CCR_VREG_CURRENT_TRIM_M_20_PROZ = 6,    /* -20% */
N    CCR_VREG_CURRENT_TRIM_M_10_PROZ = 7,    /* -10% */
N    CCR_VREG_CURRENT_TRIM_0_PROZ    = 0,    /*   0% */
N    CCR_VREG_CURRENT_TRIM_P_10_PROZ = 1,    /*  10% */
N    CCR_VREG_CURRENT_TRIM_P_20_PROZ = 2,    /*  20% */
N    CCR_VREG_CURRENT_TRIM_P_30_PROZ = 3     /*  30% */
N} ccr_vreg_current_trim_e;
N
N/* Voltage regulator reference voltage trim */
Ntypedef enum tag_vreg_ref_voltage_trim_e
N{
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_5_PROZ = 15,    /* -7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_0_PROZ = 14,    /* -7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_5_PROZ = 13,    /* -6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_0_PROZ = 12,    /* -6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_5_PROZ = 11,    /* -5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_0_PROZ = 10,    /* -5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_5_PROZ =  9,    /* -4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_0_PROZ =  8,    /* -4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_5_PROZ =  7,    /* -3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_0_PROZ =  6,    /* -3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_5_PROZ =  5,    /* -2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_0_PROZ =  4,    /* -2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_5_PROZ =  3,    /* -1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_0_PROZ =  2,    /* -1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_0_5_PROZ =  1,    /* -0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_0_PROZ     =  0,    /*    0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_0_5_PROZ = 31,    /* 0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_0_PROZ = 30,    /* 1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_5_PROZ = 29,    /* 1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_0_PROZ = 28,    /* 2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_5_PROZ = 27,    /* 2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_0_PROZ = 26,    /* 3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_5_PROZ = 25,    /* 3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_0_PROZ = 24,    /* 4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_5_PROZ = 23,    /* 4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_0_PROZ = 22,    /* 5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_5_PROZ = 21,    /* 5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_0_PROZ = 20,    /* 6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_5_PROZ = 19,    /* 6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_0_PROZ = 18,    /* 7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_5_PROZ = 17,    /* 7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_8_0_PROZ = 16     /* 8.0% */
N} ccr_vreg_ref_voltage_trim_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_temperature_trim_e
N{
N    CCR_VREG_TEMPERATURE_TRIM_M_60_DEGC = 4,    /* -60degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_50_DEGC = 5,    /* -50degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_40_DEGC = 6,    /* -40degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_25_DEGC = 7,    /* -25degC */
N    CCR_VREG_TEMPERATURE_TRIM_0_DEGC    = 0,    /*   0degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_25_DEGC = 1,    /*  25degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_50_DEGC = 2,    /*  50degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_70_DEGC = 3     /*  70degC */
N} ccr_vreg_temperature_trim_e;
N
N/* Oscillator adjustment */
Ntypedef enum tag_osc_adjustment_e
N{
N    CCR_OSC_ADJUSTMENT_M_8 =  8,    /* -8 */
N    CCR_OSC_ADJUSTMENT_M_7 =  9,    /* -7 */
N    CCR_OSC_ADJUSTMENT_M_6 = 10,    /* -6 */
N    CCR_OSC_ADJUSTMENT_M_5 = 11,    /* -5 */
N    CCR_OSC_ADJUSTMENT_M_4 = 12,    /* -4 */
N    CCR_OSC_ADJUSTMENT_M_3 = 13,    /* -3 */
N    CCR_OSC_ADJUSTMENT_M_2 = 14,    /* -2 */
N    CCR_OSC_ADJUSTMENT_M_1 = 15,    /* -1 */
N    CCR_OSC_ADJUSTMENT_0   =  0,    /*  0 */
N    CCR_OSC_ADJUSTMENT_P_1 =  1,    /*  1 */
N    CCR_OSC_ADJUSTMENT_P_2 =  2,    /*  2 */
N    CCR_OSC_ADJUSTMENT_P_3 =  3,    /*  3 */
N    CCR_OSC_ADJUSTMENT_P_4 =  4,    /*  4 */
N    CCR_OSC_ADJUSTMENT_P_5 =  5,    /*  5 */
N    CCR_OSC_ADJUSTMENT_P_6 =  6,    /*  6 */
N    CCR_OSC_ADJUSTMENT_P_7 =  7     /*  7 */
N} ccr_osc_adjustment_e;
N
N/* Threshold for power-good sensing */
Ntypedef enum tag_threshold_power_good_sensing_e
N{
N    CCR_POWER_GOOD_SENSING_0 = 0,    /* threshold 0 */
N    CCR_POWER_GOOD_SENSING_1 = 1,    /* threshold 1 */
N    CCR_POWER_GOOD_SENSING_2 = 2,    /* threshold 2 */
N    CCR_POWER_GOOD_SENSING_3 = 3,    /* threshold 3 */
N    CCR_POWER_GOOD_SENSING_4 = 7,    /* threshold 4 */
N    CCR_POWER_GOOD_SENSING_5 = 6,    /* threshold 5 */
N    CCR_POWER_GOOD_SENSING_6 = 5,    /* threshold 6 */
N    CCR_POWER_GOOD_SENSING_7 = 4     /* threshold 7 */
N} ccr_threshold_power_good_sensing_e;
N
N/* SMC IO level */
Ntypedef enum tag_smc_io_level_e
N{
N    CCR_SMC_IO_LEVEL_5V0 = 0,    /* operate with 5V */
N    CCR_SMC_IO_LEVEL_3V3 = 1     /* operate with 3.3V */
N} ccr_smc_io_level_e;
N
N/* Interrupts */
Ntypedef enum tag_system_interrupt_e
N{
N    CCR_OSC10M_CLOCK_MISSING_INT = 0x00000001,    /* OSC10MHz */
N    CCR_OSC32K_CLOCK_MISSING_INT = 0x00000100,    /* OSC32KHz */
N    CCR_EROR_INT_0               = 0x00010000,    /* Error interrupt 0 */
N    CCR_EROR_INT_1               = 0x00020000,    /* Error interrupt 1 */
N    CCR_EROR_INT_2               = 0x00040000,    /* Error interrupt 2 */
N    CCR_BACKUP_ECC_RAM_INT       = 0x01000000,    /* Backup ECC-RAM */
N    CCR_MAIN_MEMORY_ECC_RAM_INT  = 0x02000000,    /* Main memory ECC-RAM */
N    CCR_STPU_INT                 = 0x04000000,    /* STPU */
N    CCR_WDT_INT                  = 0x08000000,    /* WDT */
N    CCR_IO_INT                   = 0x10000000     /* IO */
N} ccr_system_interrupt_e;
N
N/* ECC */
Ntypedef enum tag_ecc_e
N{
N    CCR_BACKUP_RAM_ECC  = 0,    /* Backup RAM ECC */
N    CCR_MAIN_MEMORY_ECC = 1     /* Main memory ECC */
N} ccr_ecc_e;
N
N/* ECC interrupt type */
Ntypedef enum tag_ecc_interrupt_type_e
N{
N    CCR_ECC_SYSC_INTR    = 0,    /* SYSC_INTR will be generated */
N    CCR_ECC_SYSC_NMI     = 1,    /* SYSC_NMI will be generated */
N    CCR_ECC_SW_FULL_RSTN = 2     /* SW_FULL_RSTN will be generated */
N} ccr_ecc_interrupt_type_e;
N
N/* Modes */
Ntypedef enum tag_modes_e
N{
N    CCR_STB_MODE      = 0,    /* mission state entered from STB_ISC10 */
N    CCR_SLPOSC10_MODE = 1,    /* mission state entered from SLP_OSC10 */
N    CCR_SLPRCOSC_MODE = 2,    /* mission state entered from SLP_RD100K */
N    CCR_STOPR_MODE    = 3,    /* mission state entered from STOP_R */
N    CCR_STOP_MODE     = 4     /* mission state entered from STOP */
N} ccr_modes_e;
N
N/* Wakeup attributes */
Ntypedef enum tag_wakeup_attribute_e
N{
N    CCR_LOW_LEVEL  = 0,    /* low level wakeup */
N    CCR_HIGH_LEVEL = 1,    /* high level wakeup */
N    CCR_FALL_EDGE  = 2,    /* falling edge wakeup */
N    CCR_RISE_EDGE  = 3     /* rising edge wakeup */
N} ccr_wakeup_attribute_e;
N
N/* Wakeup sources */
Ntypedef enum tag_wakeup_source_e
N{
N    CCR_WAKEUP_SOURCE_0     =  0,    /* wakeup source 0 */
N    CCR_WAKEUP_SOURCE_1     =  1,    /* wakeup source 1 */
N    CCR_WAKEUP_SOURCE_2     =  2,    /* wakeup source 2 */
N    CCR_WAKEUP_SOURCE_3     =  3,    /* wakeup source 3 */
N    CCR_WAKEUP_SOURCE_4     =  4,    /* wakeup source 4 */
N    CCR_WAKEUP_SOURCE_5     =  5,    /* wakeup source 5 */
N    CCR_WAKEUP_SOURCE_6     =  6,    /* wakeup source 6 */
N    CCR_WAKEUP_SOURCE_7     =  7,    /* wakeup source 7 */
N    CCR_WAKEUP_SOURCE_NMI   =  8,    /* wakeup source NMI */
N    CCR_WAKEUP_SOURCE_ALARM =  9,    /* wakeup source ALARM */
N    CCR_WAKEUP_SOURCE_RTC   = 10     /* wakeup source RTC */
N} ccr_wakeup_source_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* SSCG configuration structure */
Ntypedef struct tag_ccr_sscg_congig_st
N{
N    ccr_modulation_direction  eModulationDirection;
N    uint8_t                   u8ModulationCycleLengthFractionalN;
N    uint16_t                  u16ModulationDegree;
N} ccr_sscg_congig_st;
N
N/* SRAM bit error inspection configuration */
Ntypedef struct tag_ccr_sram_bit_error_insp_config_st
N{
N    uint8_t u8PosFirstError;     /* Position of first bit error to be injected in SRAM */
N    uint8_t u8PosSecondError;    /* Position of second bit error to be injected in SRAM */
N    uint8_t u8ByteSelect;        /* Byte select for bit error injection in SRAM */
N} ccr_sram_bit_error_insp_config_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vCCR_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IOPDHRevision  - pointer to PDH IO header revision string
N *                pau8IOPDHTag       - pointer to PDH IO header tag string
N *                pau8IOPDSRevision  - pointer to PDS IO header revision string
N *                pau8IOPDSTag       - pointer to PDS IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCCR_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IOPDHRevision, uint8_t** pau8IOPDHTag,
N                     uint8_t** pau8IOPDSRevision, uint8_t** pau8IOPDSTag);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eEn        CCR_Enable if clock should be enabled
N *                           CCR_Disable if clock should be disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetEnabledModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                peEn       status of module clock
N *                           CCR_Enable clock is enabled
N *                           CCR_Disable clock is disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetEnabledModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockFreq
N *
N * Purpose:       Configures clock frequency
N *                Clock frequency can be changed every time because no glitch
N *                should occur during switching. To be on the save side every
N *                action of the module should be finished.
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eFreq      Target frequency
N *                eModulated modulation type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockFreq(ccr_cntrl_e eCntrl, ccr_clk_freq_e eFreq, ccr_modulated_clk_e eModulated);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SelectClockType
N *
N * Purpose:       Select clock type
N *
N * Inputs:        eCntrl        Controller
N *                eClockType    Clock type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SelectClockType(ccr_cntrl_e eCntrl, ccr_clock_type_e eClockType);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPllClockStabilizationCompareValue
N *
N * Purpose:       Set Pll clock stabilization compare value
N *
N * Inputs:        u8Value    Stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPllClockStabilizationCompareValue(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      eCCR_ReadClockStability
N *
N * Purpose:       Read stability value of different oscillators and PLLs
N *
N * Inputs:        eClk        Clock or PLL
N *
N * Outputs:       none
N *
N * Return Values: clock stability value
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_clock_stability_e eCCR_ReadClockStability(ccr_clocks_e eClk);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GenerateReset
N *
N * Purpose:       Generate different types of reset
N *
N * Inputs:        eResetType     Reset type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GenerateReset(ccr_reset_type_e eResetType);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetDeviceMode
N *
N * Purpose:       Set device mode
N *
N * Inputs:        eMode     Device mode
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Transitions to STB_OSC10, SLP_OSC10, SLP_RC10, STOP_R
N *                and STOP are only possible in rom2ram-project without
N *                any probe connected.
N *
N ***************************************************************************/
Nint32_t i32CCR_SetDeviceMode(ccr_device_mode_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableInterrupt
N *
N * Purpose:       Enable interrupts
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableInterrupt(ccr_interrupts_e eInterrupt, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetInterruptStatusAll
N *
N * Purpose:       Read status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetInterruptStatus
N *
N * Purpose:       Read interrupt status
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       peIntOccurred  Status of interrupt
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetInterruptStatusSingle(ccr_interrupts_e eInterrupt, ccr_int_occurred_e * peIntOccurred);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearInterruptsAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearInterruptsAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearInterruptSingle(ccr_interrupts_e eInterrupt);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetCurrentDeviceMode
N *
N * Purpose:       Read current device mode
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Device mode
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_mode_e eCCR_GetCurrentDeviceMode(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSSCG
N *
N * Purpose:       Configure the SSCG and start it with new settings
N *
N * Inputs:        pstSSCGConfig    Pointer to SSCG-configuration
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSSCG(ccr_sscg_congig_st * pstSSCGConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetWDTAlarmType
N *
N * Purpose:       Configure WDT alarm type
N *
N * Inputs:        eAlarmType    WDT alarm type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetWDTAlarmType(ccr_wdt_alarm_type_e eAlarmType);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableBitErrorInjectionInRAM
N *
N * Purpose:       Enable or disable error injection in Back-up RAM
N *
N * Inputs:        eEn    Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableBitErrorInjectionInRAM(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPositionOfBitErrorInjectionInRAM
N *
N * Purpose:       Set bit positions to be injected in Back-up RAM
N *
N * Inputs:        u8FirstPosition     first position
N *                u8SecondPosition    second position
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPositionOfBitErrorInjectionInRAM(uint8_t u8FirstPosition, uint8_t u8SecondPosition);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetCANMode
N *
N * Purpose:       Set CAN mode
N *
N * Inputs:        eCANMode     CAN mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetCANMode(ccr_can_mode_e eCANMode);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetECCMode
N *
N * Purpose:       Set ECC mode
N *
N * Inputs:        eECCMode     ECC mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetECCMode(ccr_ecc_mode_e eECCMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetTBIODirection
N *
N * Purpose:       Set TBIO port direction
N *
N * Inputs:        eTBIOChannel     TBIO channel
N *                eDirection       Pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetTBIODirection(ccr_tbio_channel_e eTBIOChannel, ccr_tbio_direction_e eDirection);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer4
N *
N * Purpose:       Set signal for Complex Timer 4
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer4(ccr_tbin_source_ctimer4_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer5
N *
N * Purpose:       Set signal for Complex Timer 5
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer5(ccr_tbin_source_ctimer5_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC0Interface
N *
N * Purpose:       Enable/disable GDC0 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC0Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC1Interface
N *
N * Purpose:       Enable/disable GDC1 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC1Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDCPanelInterface
N *
N * Purpose:       Enable/disable GDC panel interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDCPanelInterface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetGDCSynchronisation
N *
N * Purpose:       Set synchronisation type between GDC0 and GDC1
N *
N * Inputs:        eGDCSync     GDC synchronisation type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetGDCSynchronisation(ccr_gdc_sync_e eGDCSync);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMask
N *
N * Purpose:       Set NOR-interface address mask
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMask(ccr_nor_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMatch
N *
N * Purpose:       Set NOR-interface address match
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMatch(ccr_nor_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMask
N *
N * Purpose:       Set NAND-interface address mask
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMask(ccr_nand_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMatch
N *
N * Purpose:       Set NAND-interface address match
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMatch(ccr_nand_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNORChipSelect
N *
N * Purpose:       Set NAND-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:   value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNORChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNANDChipSelect
N *
N * Purpose:       Set NOR-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:  value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNANDChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableSRAMBitErrorInspection
N *
N * Purpose:       Enable or disable SRAM bit error inspection
N *
N * Inputs:        eChannel    SRAM-channel
N *                eEn         Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableSRAMBitErrorInspection(ccr_sram_channel_e eChannel, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetSRAMBitErrorInspectionConfiguration
N *
N * Purpose:       Set SRAM bit error inspection configuration
N *
N * Inputs:        eChannel    SRAM-channel
N *                pstConfig   Pointer to configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetSRAMBitErrorInspectionConfiguration(ccr_sram_channel_e eChannel, ccr_sram_bit_error_insp_config_st * pstConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWDTAlarm
N *
N * Purpose:       Clear WDT alarm bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWDTAlarm(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearErrorIrgFlagOfBackupRAM
N *
N * Purpose:       Clear error IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearErrorIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWarningIrgFlagOfBackupRAM
N *
N * Purpose:       Clear warning IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWarningIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearErrorIrgFlagOfSRAM
N *
N * Purpose:       Clear error IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearErrorIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWarningIrgFlagOfSRAM
N *
N * Purpose:       Clear warning IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWarningIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_IssueSynchronPulseToCTimer
N *
N * Purpose:       Issue synchronous pulse to complex timer 0 to 5 or  to 9
N *
N * Inputs:        eComplexTimer    Complex timers
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_IssueSynchronPulseToCTimer(ccr_complex_timer_e eComplexTimer);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWDTAlarmStatusBit
N *
N * Purpose:       Get WDT alarm status bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWDTAlarmStatusBit(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQErrorFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for error condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQErrorFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQWarningFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for warning condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQWarningFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetPosOfBitErrorInBackupRAM
N *
N * Purpose:       Get position of bit error for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetPosOfBitErrorInBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetLastCheckResultForBackupRAM
N *
N * Purpose:       Get last check result for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetLastCheckResultForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDebuggerCR4PowerDownRequestStatus
N *
N * Purpose:       Get status of debugger CR4 power down request
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDebuggerCR4PowerDownRequestStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgErrorCondition
N *
N * Purpose:       Get IRQ flag error condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgErrorCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgWarningCondition
N *
N * Purpose:       Get IRQ flag warning condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgWarningCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMPositionOfBitError
N *
N * Purpose:       Get position of bit error for SRAM
N *
N * Inputs:        eChannel      SRAM-channel
N *                pu8Position   Pointer to position
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMPositionOfBitError(ccr_sram_channel_e eChannel, uint8_t * pu8Position);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMLastCheckResult
N *
N * Purpose:       Get last check result for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMLastCheckResult(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceVersion
N *
N * Purpose:       Read device version
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: device version
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_version_e eCCR_GetDeviceVersion(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSIPFlashSize
N *
N * Purpose:       Read size of SIP flash
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: SIP flash size
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_SIPflash_size_e eCCR_GetSIPFlashSize(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GeCR4DebugStatus
N *
N * Purpose:       Provides information about the availability of the debug port.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: CCR_DISABLE - Debug Port DISABLED
N *                CCR_ENABLE  - Debug Port ENABLED
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GeCR4DebugStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableR4DebugPort
N *
N * Purpose:       Enable or disable debug port of processors
N *
N * Inputs:        eProcessorType     Processor type
N *                eEn                Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableR4DebugPort(ccr_processor_device_e eProcessorType, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegCurrentTrim
N *
N * Purpose:       Set voltage regulator current trim value
N *
N * Inputs:        eValue     voltage regulator current trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegCurrentTrim(ccr_vreg_current_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegRefVoltageTrim
N *
N * Purpose:       Set voltage regulator reference voltage trim value
N *
N * Inputs:        eValue     voltage regulator reference voltage trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegRefVoltageTrim(ccr_vreg_ref_voltage_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegTemperatureTrim
N *
N * Purpose:       Set voltage regulator temperature trim value
N *
N * Inputs:        eValue     voltage regulator temperature trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegTemperatureTrim(ccr_vreg_temperature_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetOscAdjustment
N *
N * Purpose:       Set oscillator adjustment value
N *
N * Inputs:        eValue     oscillator adjustment value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetOscAdjustment(ccr_osc_adjustment_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetThresholdPowerGoodSensing
N *
N * Purpose:       Set threshold for power good sensing
N *
N * Inputs:        eValue     threshold for power good sensing
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetThresholdPowerGoodSensing(ccr_threshold_power_good_sensing_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetAlarmComparatorThreshold
N *
N * Purpose:       Set alarm comparator threshold for Alarm 0 or 1
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                u8Value     alarm comparator threshold setting (0..31)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetAlarmComparatorThreshold(ccr_alarm_no_e eAlarmNo, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableAlarm
N *
N * Purpose:       Enables/Disables CCR alarm comparator
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                eEn      :  enable/disbale alarm
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableAlarm(ccr_alarm_no_e eAlarmNo, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableClockSupervisor
N *
N * Purpose:       Enable/disable clock supervisor
N *
N * Inputs:        eClocks    clock type
N *                eEN        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableClockSupervisor(ccr_clocks_e eClocks, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC10MClockSupervisorOutputResetFunction
N *
N * Purpose:       Enable/disable OSC10M clock supervisor output reset function
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC10MClockSupervisorOutputResetFunction(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC32KHz
N *
N * Purpose:       Enable/disable OSC32KHz
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC32KHz(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSmcIOLevel
N *
N * Purpose:       Set SMC IO level
N *
N * Inputs:        eLevel     SMC IO level
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSmcIOLevel(ccr_smc_io_level_e eLevel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Set Clock Stabilization Compare Value
N *
N * Inputs:        eClocks    clock type
N *                u8Value    clock stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockStabilizationCompareValue(ccr_clocks_e eClocks, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      u16CCR_getBootOptions
N *
N * Purpose:       Read boot options
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Boot options
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetBootOptions(void);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetSystemIntStatusAll
N *
N * Purpose:       Read interrupt status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetSystemIntStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSystemIntStatusSingle
N *
N * Purpose:       Read interrupt status of a singe interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Clear interrupt status of a single interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableECCInterrupt
N *
N * Purpose:       Enable ECC interrupt
N *
N * Inputs:        eEccType      ECC type
N *                eEccIntType   ECC inte3rrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableECCInterrupt(ccr_ecc_e eEccType, ccr_ecc_interrupt_type_e eEccIntType);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetDeviceModesAll
N *
N * Purpose:       Read all device modes
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetDeviceModesAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceModesSingle
N *
N * Purpose:       read single device mode
N *
N * Inputs:        eMode      Device mode
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDeviceModesSingle(ccr_modes_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableWakeupSource
N *
N * Purpose:       Enable or disable wakeup source
N *
N * Inputs:        eSource    wakeup source
N *                eEn        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableWakeupSource(ccr_wakeup_source_e eSource, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetWakeupAttribute
N *
N * Purpose:       Set wakeup attribute
N *
N * Inputs:        eSource       wakeup source
N *                eAttribute    wakeup attribute
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetWakeupAttribute(ccr_wakeup_source_e eSource, ccr_wakeup_attribute_e eAttribute);
N
N/****************************************************************************
N *
N * Function:      u16CCR_GetWakeupSourceInterruptAll
N *
N * Purpose:       Read all wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: wakeup source interrupt status vector
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetWakeupSourceInterruptAll(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWakeupSourceInterruptSingle
N *
N * Purpose:       Read single wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWakeupSourceInterruptSingle(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWakeupInterruptSource
N *
N * Purpose:       Clear wakeup interrupt source
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWakeupInterruptSource(ccr_wakeup_source_e eSource);
N
N/****************************************************************************/
N
N
N#endif /* CCR_LLDD_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 25 "..\..\src\boardcfg.c" 2
N#include "config.h"                         
L 1 "..\..\inc\config.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: config.h,v $
N*   Description :
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : config
N*               : $Name:  $
N*   LIBRARIES   :
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/config.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef CONFIG_H
N#define CONFIG_H
N
N/*****************************************************************************************
N*                Include files
N*****************************************************************************************/
N#include "mw_definitions.h"
L 1 "..\..\..\..\mw\inc\mw_definitions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : MW specific definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.17 $
N*   DATE        : $Date: 2015/07/03 09:11:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef MW_DEFINITIONS_H
N#define MW_DEFINITIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_DEFINITIONS_H_REVISION     "$Revision: 1.17 $"
N#define MW_DEFINITIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/* general */
N#define ON      1
N#define OFF	    0
N
N/* Resolution Parameters  */
N#define QVGA_RES_50                   (0)
N#define QVGA_RES_60                   (1)
N#define HNTSC_RES_60                  (2)
N#define HVGA_RES_50                   (3)
N#define HVGA_RES_60                   (4)
N#define WIDE_RES_50                   (5)
N#define WIDE_RES_60                   (6)
N#define VGA_RES_50                    (7)
N#define VGA_RES_60                    (8)
N#define WVGA_RES_45                   (9)
N#define WVGA_RES_50                  (10)
N#define WVGA_RES_55                  (11)
N#define WVGA_RES_60                  (12)
N#define SVGA_RES_50                  (13)
N#define SVGA_RES_60                  (14)
N#define DVGA_RES_50                  (15)
N#define DVGA_RES_60                  (16)
N#define DVGA_1_RES_50                (17)
N#define DVGA_1_RES_60                (18)
N#define XGA_RES_50                   (19)
N#define XGA_RES_60                   (20)
N#define SXGA_RES_50                  (21)
N#define SXGA_RES_60                  (22)
N#define HD_RES                       (23)
N#define HITACHI_TX31D06VM2AAA_RES_50 (24)
N#define HITACHI_TX31D06VM2AAA_RES_60 (25)
N#define SHARP_1280_422_50            (26)
N#define SHARP_1280_422_60            (27)
N#define TX18D35VM0AAA_50             (28)
N#define TX18D35VM0AAA_60             (29)
N#define RES_960_720_50               (30) 
N#define AT070TN94_50             (31)
N#define AT070TN94_60             (32)
N#define  TC90195_60   (33)
N#define  CLAA121WB   (34) 
N#define	CLAA088WA	(35)
N/* definition if layer is not used */
N#define FMT_OFF         (0)
N
N/* Data Formats */
N#define FMT_RGBA32      (1)
N#define FMT_RGBA24      (2)
N#define FMT_RGB24       (3)
N#define FMT_RGB16       (4)
N
N#define FMT_GRAY8A     (10)
N#define FMT_GRAY8      (11)
N#define FMT_GRAY2      (12)
N#define FMT_GRAY1      (13)
N#define FMT_A          (14)
N
N#define FMT_RLERGBA32  (15)
N#define FMT_RLERGBA24  (16)
N#define FMT_RLERGB24   (17)
N#define FMT_RLERGB16   (18)
N#define FMT_RLECLUT8   (19)
N#define FMT_RLECLUT6   (20)
N#define FMT_RLECLUT4   (21)
N#define FMT_RLECLUT2   (22)
N#define FMT_RLECLUT1   (23)
N#define FMT_RLEGRAY8A  (24)
N#define FMT_RLEGRAY8   (25)
N#define FMT_RLEGRAY2   (26)
N#define FMT_RLEGRAY1   (27)
N#define FMT_RLEA       (28)
N
N#define FMT_PNGRGBA32  (29)
N#define FMT_PNGRGB24   (30)
N#define FMT_PNGCLUT8   (31)
N#define FMT_PNGCLUT4   (32)
N#define FMT_PNGCLUT2   (33)
N#define FMT_PNGCLUT1   (34)
N#define FMT_PNGGRAY8A  (35)
N#define FMT_PNGGRAY8   (36)
N#define FMT_PNGGRAY4   (37)
N#define FMT_PNGGRAY2   (38)
N#define FMT_PNGGRAY1   (39)
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/*********************************************/
N
N#endif /* MW_DEFINITIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\inc\config.h" 2
N#include "qspi.h"
L 1 "..\..\..\..\hldd\inc\qspi.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     : TSM-Driver
N*   MODULE      : General
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/06/24 15:14:52 $
N*   TAG         : $Name: HLDD_1_1 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _QSPI_H
N#define _QSPI_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "qspic.h"
L 1 "..\..\..\..\lldd\inc\qspic.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI controler low level register access
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : QSPI
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.35 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef QSPIC_H
N#define QSPIC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_QSPIC_H_REVISION     "$Revision: 1.35 $"
N#define LLDD_QSPIC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : disable No reuse of identifiers */
N#endif
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
Ntypedef enum tag_qspic_cntrl_e
N{
N#ifdef FPGA
S  QSPIC_CNTRL_0 = 0x0U,
S  QSPIC_CNTRL_1 = 0x800U,
S  QSPIC_CNTRL_2 = 0x1000
N#else
N  QSPIC_CNTRL_0 = 0,
N  QSPIC_CNTRL_1 = 0xAF8000,  
N  QSPIC_CNTRL_2 = 0x1000
N#endif   
N} qspic_cntrl_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
Nextern void    read_burst4(int32_t i32addr, uint32_t * pu32Data);
Nextern void    read_burst8(int32_t i32addr, uint32_t * pu32Data);
Nextern void    word_write(int32_t i32addr, int32_t data);
Nextern void    hword_write(int32_t i32addr, int32_t data);
Nextern void    byte_write(int32_t i32addr, int32_t data);
Nextern int32_t word_read(int32_t i32addr);
Nextern int32_t hword_read(int32_t i32addr);
Nextern int32_t byte_read(int32_t i32addr);
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* Command Operation Code */
Ntypedef enum tag_qspic_CmdOp_e
N{
N  QSPI_CMD_READ_SINGLE        = 0x03,
N  QSPI_CMD_FAST_READ_SINGLE   = 0x0B,
N  QSPI_CMD_FAST_READ_DUAL_OUT = 0x3B,
N  QSPI_CMD_FAST_READ_DUAL_IO  = 0xBB,
N  QSPI_CMD_FAST_READ_QUAD_OUT = 0x6B,
N  QSPI_CMD_FAST_READ_QUAD_IO  = 0xEB
N} qspi_CmdOp_e;
N
N/* SPI I/O Control */
Ntypedef enum tag_qspic_IOCtrl_e
N{
N  QSPI_SINGLE = 0,
N  QSPI_DUAL   = 1,
N  QSPI_QUAD   = 2
N} qspi_IOCtrl_e;
N
N/* Address byte count */
Ntypedef enum tag_qspic_AddrByte_e
N{
N  QSPI_ADDR_3BYTE = 0,
N  QSPI_ADDR_4BYTE = 1
N} qspi_AddrByte_e;
N
N/* QSPI flash device no. */
Ntypedef enum tag_qspic_dev_e
N{
N    QSPIC_DEV_0 = 0,                         /* QSPI flash on CS0 */
N    QSPIC_DEV_1 = 1                          /* QSPI flash on CS1 */
N} qspic_dev_e;
N
N/* SPI flash density */
Ntypedef enum tag_qspic_density_e
N{
N    /* dependant on SI_AddrByte */
N    /* SI_AddrByte = 0 */
N    QSPIC_64KB   = 0,                         /*  64 KB */
N    QSPIC_128KB  = 1,                         /* 128 KB */
N    QSPIC_256KB  = 2,                         /* 256 KB */
N    QSPIC_512KB  = 3,                         /* 512 KB */
N    QSPIC_1MB    = 4,                         /*   1 MB */
N    QSPIC_2MB    = 5,                         /*   2 MB */
N    QSPIC_4MB    = 6,                         /*   4 MB */
N    QSPIC_8MB    = 7,                         /*   8 MB */
N    QSPIC_16MB   = 8,                         /*  16 MB */
N    /* SI_AddrByte = 1 */
N    QSPIC_32MB   = 9,                         /*  32 MB */
N    QSPIC_64MB   = 10,                        /*  64 MB */
N    QSPIC_128MB  = 11,                        /* 128 MB */
N    QSPIC_256MB  = 12                         /* 256 MB */
N} qspic_density_e;
N
N/* SPI data capture edge */
Ntypedef enum tag_qspic_sdce_e
N{
N    QSPIC_1ST_POS_EDGE = 0x00,              /* data capture @ 1st positive edge */
N    QSPIC_1ST_NEG_EDGE = 0x01,              /* data capture @ 1st negative edge */ 
N    QSPIC_2ND_POS_EDGE = 0x02,              /* data capture @ 2nd positive edge */
N    QSPIC_2ND_NEG_EDGE = 0x03               /* data capture @ 2nd negative edge */ 
N} qspic_sdce_e;
N
N/* SPI program access opcode */
Ntypedef enum tag_qspic_opcode_e
N{
N    /* read */
N    QSPIC_OPCODE_FAST_READ   = 0x0B,            /* Fast READ opcode */
N    QSPIC_OPCODE_READ_ID     = 0x90,            /* Read ID */   
N    QSPIC_OPCODE_READ_EXTID  = 0x9F,            /* Read Extended ID */
N    /* write control */
N    QSPIC_OPCODE_WRITE_EN    = 0x06,            /* WRITE enable */
N    QSPIC_OPCODE_WRITE_DIS   = 0x04,            /* WRITE disable */
N    /* erase */
N    QSPIC_OPCODE_4KBS_ERASE  = 0x20,            /* 4kB sector ERASE */
N    QSPIC_OPCODE_8KBS_ERASE  = 0x40,            /* 8kB sector ERASE */
N    QSPIC_OPCODE_64KBS_ERASE = 0xD8,            /* 64kB sector ERASE */
N    QSPIC_OPCODE_CHIP_ERASE  = 0xC7,            /* full chip ERASE opcode */
N    /* program */
N    QSPIC_OPCODE_PAGE_PGRM   = 0x02,            /* Page PROGRAM opcode */
N    /* Status */
N    QSPIC_OPCODE_RFST_READ   = 0x70,            /* Read Flag status register */
N    QSPIC_OPCODE_STS_READ    = 0x05,            /* Status read opcode */
N    QSPIC_OPCODE_STS_CLEAR   = 0x30,            /* Status clear */
N    /* Configuration read */
N    QSPIC_OPCODE_CFG_READ    = 0x35,            /* Configuration register read */
N    QSPIC_OPCODE_CFGM_READ   = 0x15,            /* Configuration register read */
N    /* Register write */
N    QSPIC_OPCODE_WRITE_REG   = 0x01,            /* Write Configuration & Status register opcode */
N    /* Release deep power down */
N    QSPIC_OPCODE_RELEASE_DP  = 0xAB,            /* Release from deep power down mode */
N    /* set 3/4 byte mode */
N    QSPIC_OPCODE_3_BYTE_MODE  = 0xE9,           /* Enable 3-byte mode */
N    QSPIC_OPCODE_4_BYTE_MODE  = 0xB7            /* Enable 4-byte mode */
N} qspic_opcode_e;
N
N/* Enable/disable */
Ntypedef enum tag_qspic_en_e
N{
N    QSPIC_DISABLE = 0x0U,                       /* Disable */
N    QSPIC_ENABLE  = 0x1U                        /* Enable */
N} qspic_en_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/* SPI direct read control strucutre */
Ntypedef struct tag_qspic_direct_rd_ctrl_st
N{
N    qspi_CmdOp_e     eCmd;                  /* Quad-SPI command code   */
N    uint32_t         u32DummyByteCnt;       /* Number of dummy bytes   */
N    qspi_AddrByte_e  eAddrByteCnt;          /* Address mode 3-/4-Byte  */
N    qspi_IOCtrl_e    eSpiDatIOCtrl;         /* SPI Data I/O control    */
N    qspi_IOCtrl_e    eSpiDmyIOCtrl;         /* SPI Dummy I/O control   */
N    qspi_IOCtrl_e    eSpiAdrIOCtrl;         /* SPI Address I/O control */
N} qspic_direct_rd_ctrl_st;
N
Ntypedef struct tag_qspic_directconfig_st
N{
N    uint16_t                u16FlashBaseAddress;   /* physical base address (bits [31:16]), upper 4 bits are fixed and don't care */
N    qspic_density_e         eFlashDensity;         /* flash density */
N    qspic_en_e              eEnableMemMapRd;       /* enable memory map read */
N    qspic_direct_rd_ctrl_st stRdCtrl;              /* SPI mode read */
N    qspic_en_e              eWIPEnable;            /* WIP bit enable */
N    uint8_t                 u8CSTime;              /* deassertion time */
N    qspic_sdce_e            eEdge;                 /* capture edge */
N} qspic_directconfig_st;
N
Ntypedef struct tag_qspic_prgconfig_st
N{
N    uint8_t             u8CSTime;           /* deassertion time */
N    qspic_sdce_e        eEdge;              /* capture edge */
N    qspi_AddrByte_e     eAddrByteCnt;       /* Address mode 3-/4-Byte  */
N} qspic_prgconfig_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vQSPIC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigureDirectControl
N *
N * Purpose:       does complete configuration for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                pstDirConf     pointer to configuration for direct access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   The base address must be aligned on a boundary that is an integer
N *                 multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigureDirectControl(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_directconfig_st *pstDirConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigurePrgControl
N *
N * Purpose:       does complete configuration for program access
N *
N * Inputs:        eController     flash controller no.
N *                pstPrgConf      pointer to configuration for program access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigurePrgControl(qspic_cntrl_e eController, qspic_prgconfig_st *pstPrgConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashBaseAddress
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController           flash controller no.
N *                eDevice               device no.
N *                u16FlashBaseAddress   physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashBaseAddress 
N *
N * Purpose:       Reads memory base address of flash.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t * u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashDensity
N *
N * Purpose:       set flash size
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eFlashDensity    flash density (size)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashDensity 
N *
N * Purpose:       Reads flash density.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *
N * Outputs:       flash density (size)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e * eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableDirectMemMapRd 
N *
N * Purpose:       Enables and disables read access.
N *                If disabled, the SPI Flash device is not memory-mapped.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eEnableMemMap    enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableDirectMemMapRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectMemMapStatusRd 
N *
N * Purpose:       Reads status of direct memory map read.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectMemMapStatusRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashMemMap
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController            flash controller no.
N *                eDevice                device no.
N *                u16FlashBaseAddress    physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *                eFlashDensity          flash density (size)
N *                eEnableMemMapRd        enable/disable read
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashMemMap(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress,
N                                      qspic_density_e eFlashDensity, qspic_en_e eEnableMemMapRd);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetReadCtrl  
N *
N * Purpose:       specifies the configuration of the read command 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u32Ctrl        read control value 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   specifies the configuration of the read command
N *                that the hardware sequencer should issue to an
N *                SPI Flash device for direct read accesses.
N *                It affects Dual I/O and Quad I/O reads
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetReadCtrl 
N *
N * Purpose:       Reads the configuration of the read command.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       read control value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t * u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectEnableWIPPolling      
N *
N * Purpose:       Enables and disables the polling of the WIP bit of the
N *                status register in the SPI Flash (until the SPI Flash write
N *                is completed) before issuing a read command to it. 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectEnableWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetStatusWIPPolling 
N *
N * Purpose:       Reads Status of WIP polling bit.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetStatusWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetCSDeassertionTime
N *
N * Purpose:       Specifies the deassertion time of SPI_CS_N for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetCSDeassertionTime 
N *
N * Purpose:       Reads Direct Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetCSDeassertionTime
N *
N * Purpose:       specifies the deassertion time of SPI_CS_0/1 for program access
N *
N * Inputs:        eController    flash controller no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time) 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetCSDeassertionTime(qspic_cntrl_e eController, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetCSDeassertionTime 
N *
N * Purpose:       Reads Program Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetCSDeassertionTime(qspic_cntrl_e eController, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEdge          1st pos. edge / 1st neg. edge 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetDataCaptureEdge 
N *
N * Purpose:       Reads Direct Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for programm access
N *
N * Inputs:        eController    flash controller no.
N *                eEdge          capture edge: 1st pos. edge / 1st neg. edge
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetDataCaptureEdge 
N *
N * Purpose:       Reads Program Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Capture edge: 1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableInterrupt      
N *
N * Purpose:       Enables and disables SPI interrupts generated on completion
N *                of a program register access cycle 
N *
N * Inputs:        eController    flash controller no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   If enabled, generates an interrupt when the
N *                SPI Cycle Done bit is set to 1.
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableInterrupt(qspic_cntrl_e eController, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetInterruptStatus 
N *
N * Purpose:       Reads Interrupt status.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Interrupt Status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetInterruptStatus(qspic_cntrl_e eController, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       C_TRUE or C_FALSE
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_IsSpiCycleDone(qspic_cntrl_e eController, bool_t * bResult);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleInPgrs 
N *
N * Purpose:       checks if SPI cycle is in progress 
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleInPgrs(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: CC_TRUE or C_FALSE
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleDone(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WaitForCompletion 
N *
N * Purpose:       Wait for cycle completion of previous program access
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WaitForCompletion(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusFlagRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device for Micron
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusFlagRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmClearStatus 
N *
N * Purpose:       Clear the status register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmClearStatus(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmReleaseDP 
N *
N * Purpose:       Release from deep sleep power mode
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmReleaseDP(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationRead 
N *
N * Purpose:       Retrieve the current value of the configuration register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Configuration);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationWrite 
N *
N * Purpose:       Modify the value of the Status and Configuration registers
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8Status       Desired value of the Status register  
N *                u8Conf         Desired value of the Configuration register  
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationWrite(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Status,  uint8_t u8Conf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteEnable
N *
N * Purpose:       Enable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteEnable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteDisable
N *
N * Purpose:       Disable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteDisable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSectErase
N *
N * Purpose:       SPI Flash Sector Erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                eOpcode           Sector erase opcode
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSectErase(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_opcode_e eOpcode, uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmChipErase
N *
N * Purpose:       Full Chip Erase
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmChipErase(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmPagePgrm
N *
N * Purpose:       Programming 256 bytes of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer to be written into
N *                                  flash device
N *
N * Outputs:       
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmPagePgrm(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmFastRead 
N *
N * Purpose:       Perform fast reading of 256 byte of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *
N * Outputs:       pu8Data           pointer to data buffer 
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmFastRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetID 
N *
N * Purpose:       Retrieve device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8ManID          Manufacturer ID
N *                pu8DevID          Device ID
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8ManID, uint8_t* const pu8DevID);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetExtendedID 
N *
N * Purpose:       Retrieve extended device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetExtendedID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WriteByte 
N *
N * Purpose:       Write one Byte to the device
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Value           value to be send
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WriteByte(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetRegister 
N *
N * Purpose:       Retrieve content of register
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteRegister 
N *
N * Purpose:       Write data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *                pu8Information    Handle to the infromation buffer
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      u32QSPIC_DirectReadWord
N *
N * Purpose:       Perform reading of one word from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: read word
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32QSPIC_DirectReadWord(uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst4
N *
N * Purpose:       Perform reading 4 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst4(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst8
N *
N * Purpose:       Perform reading 8 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst8(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************/
N
N
N#endif /* QSPIC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "ccr.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define QSPI_WIP      0x1
N#define QSPI_WE       0x80
N#define SIZE_64KB     0x10000
N#define SIZE_256B     0x100
N#define MASK_64KB     0xFFFF0000
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* qspi devices */
Ntypedef enum qspi_dev_type_e
N{
N    DEV_MX25L3235E            =  1,   /* QSPI Device Type Micronix  - MX25L3235E */
N    DEV_MX25L6435E            =  2,   /* QSPI Device Type Micronix  - MX25L6435E */
N    DEV_MX25L12835F           =  3,   /* QSPI Device Type Micronix  - MX25L12835F */
N    DEV_MX66L51239F_3BYTE_ADR =  4,   /* QSPI Device Type Micronix  - MX66L51239F 3 Byte Addressing */
N    DEV_MX66L51239F_4BYTE_ADR =  5,   /* QSPI Device Type Micronix  - MX66L51239F 4 Byte Addressing */
N    DEV_N25Q064A              =  6,   /* QSPI Device Type Micron    - DEV_N25Q064A new */
N    DEV_N25Q512A_3BYTE_ADR    =  7,   /* QSPI Device Type Micron    - DEV_N25Q512A 3 Byte Addressing */
N    DEV_N25Q512A_4BYTE_ADR    =  8,   /* QSPI Device Type Micron    - DEV_N25Q512A 4 Byte Addressing */
N    DEV_S25FL032P             =  9,   /* QSPI Device Type Spansion  - S25FL032P */
N    DEV_S25FL064P             = 10,   /* QSPI Device Type Spansion  - S25FL064P */
N    DEV_S25FL127P             = 11,   /* QSPI Device Type Spansion  - S25FL127P */
N    DEV_S25FL116KIF01         = 12,   /* QSPI Device Type Spansion  - DEV_S25FL116KIF01 */
N    DEV_S25FL132KIF01         = 13,   /* QSPI Device Type Spansion  - DEV_S25FL132KIF01 */
N    DEV_S25FL164KIF01         = 14,   /* QSPI Device Type Spansion  - DEV_S25FL164KIF01 */
N    DEV_W25Q32B               = 15,   /* QSPI Device Type Winbond   - W25Q32B */
N    DEV_W25Q64C               = 16,   /* QSPI Device Type Winbond   - W25Q64C */
N    DEV_W25Q256F_3BYTE_ADR    = 17,   /* QSPI Device Type Winbond   - W25Q256F 3 Byte Addressing */
N    DEV_W25Q256F_4BYTE_ADR    = 18,   /* QSPI Device Type Winbond   - W25Q256F 4 Byte Addressing */
N    DEV_INTERNAL_32MBIT       = 19,   /* Internal QSPI (MX25L3235E) - 32MBit */
N    DEV_INTERNAL_64MBIT       = 20,   /* Internal QSPI (MX25L6435E) - 64MBit */
N    DEV_TYPE_INVALID          = 21    /* Device Invalid */
N} qspi_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vAssignQSPISettings
N *
N * Purpose:       assign settings dependant on
N *
N * Inputs:        u32QSPI_DeviceType   QSPI device selection (0 uses config in qspi_settings.h)
N *                u16BaseAddress       physical base address
N *
N * Outputs:       peClocFreq           pointer to clock frequence
N *                peModulationType     pointer to clock modulation type
N *                pstDirectConfig      pointer to direct interface configuration
N *                pstProgConfig        pointer to program interface configuration
N *
N * Return Values: C_SUCCESS/C_FAILED (parameter error)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32AssignQSPISettings(qspi_dev_type_e eQSPI_DeviceType, uint16_t u16BaseAddress,
N                              ccr_clk_freq_e * peClocFreq, ccr_modulated_clk_e * peModulationType,
N                              qspic_directconfig_st * pstDirectConfig, qspic_prgconfig_st * pstProgConfig);
N
N/****************************************************************************
N *
N * Function:      i32ClearFlash
N *
N * Purpose:       clears flash sector by sector
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32SectorCount    number of sectors to be erased
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32ClearFlash(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32SectorCount);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWOE
N *
N * Purpose:       Perform program of Flash without erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWOE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWE
N *
N * Purpose:       Perform program of Flash with erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N
N#endif /* _QSPI_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 29 "..\..\inc\config.h" 2
N
N/*****************************************************************************************
N* select Drehbuch
N* 0: 600-450, 1: 440, 2: 325, 3: 225
N*****************************************************************************************/
N#define DREHBUCH    (2)
N/* select output device
N* 0: monitor
N* 1: displays
N*****************************************************************************************/
N#define OUTPUT_DEVICE    0
N
N/*****************************************************************************************
N* QSPI
N* 1: S25FL032P
N* 2: S25FL064P
N*****************************************************************************************/
N#define QSPI_DEVICE      (DEV_S25FL127P)
N
N/*****************************************************************************************
N* Parallel NOR
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NOR_DEVICE      1
N
N/*****************************************************************************************
N* NAND
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NAND_DEVICE      1
N
N/*****************************************************************************************
N* RAM
N*  1: MT46H8M32LFB5-6
N*  2: MT46H16M32LFB5-6
N*  3: IS42S32800D-6
N*****************************************************************************************/
N#define RAM_DEVICE    2
N
N/*****************************************************************************************
N*                 D I S P L A Y   -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* enable GDC0 and / or GDC1 */
N#define GDCx0		ON
N#define GDCx1		OFF
N
N/* TO DO: Set Resolution (QVGA_RES / HNTSC_RES / HVGA_RES / VGA_RES / WVGA_RES / WVGA_1_RES /
N                          SVGA_RES / DVGA_RES / DVGA_1_RES / DVGA_1_RES_60) */
N#define DISPLAY_RESOLUTION_0 CLAA121WB//WVGA_RES_50 //DAL 20151221
N#define DISPLAY_RESOLUTION_1 QVGA_RES_60
N
N/****************************************************************************************
N*                        G D C 0  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC0 */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A 	ON
N#define GDC0_LAYER_B 	OFF
N#define GDC0_LAYER_C 	OFF
N#define GDC0_LAYER_D 	OFF
N#define GDC0_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF (only possible for layer A) / FMT_RGB16 / FMT_RGBA32 */
N#define GDC0_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_D_DOUBLEFUFFERING		OFF
N#define GDC0_LAYER_E_DOUBLEFUFFERING		OFF
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC0_LAYERA_WIDTH     1280
N#define GDC0_LAYERA_HEIGHT    420
N#define GDC0_LAYERA_STARTX      0
N#define GDC0_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC0_LAYERB_WIDTH     400
N#define GDC0_LAYERB_HEIGHT    400
N#define GDC0_LAYERB_STARTX    550
N#define GDC0_LAYERB_STARTY    20
N
N/* Layer C */
N#define GDC0_LAYERC_WIDTH     800
N#define GDC0_LAYERC_HEIGHT    480
N#define GDC0_LAYERC_STARTX      0
N#define GDC0_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC0_LAYERD_WIDTH     800
N#define GDC0_LAYERD_HEIGHT    480
N#define GDC0_LAYERD_STARTX      0
N#define GDC0_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC0_LAYERE_WIDTH     800
N#define GDC0_LAYERE_HEIGHT    480
N#define GDC0_LAYERE_STARTX      0
N#define GDC0_LAYERE_STARTY      0
N
N
N/****************************************************************************************
N*                        G D C 1  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC1 */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A 	OFF
N#define GDC1_LAYER_B 	OFF
N#define GDC1_LAYER_C 	OFF
N#define GDC1_LAYER_D 	OFF
N#define GDC1_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF / FMT_RGB16 / FMT_RGBA32 */
N#define GDC1_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_D_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_E_DOUBLEFUFFERING		ON
N
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC1_LAYERA_WIDTH     320
N#define GDC1_LAYERA_HEIGHT    240
N#define GDC1_LAYERA_STARTX      0
N#define GDC1_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC1_LAYERB_WIDTH     640
N#define GDC1_LAYERB_HEIGHT    480
N#define GDC1_LAYERB_STARTX      0
N#define GDC1_LAYERB_STARTY      0
N
N/* Layer C */
N#define GDC1_LAYERC_WIDTH	    640
N#define GDC1_LAYERC_HEIGHT    480
N#define GDC1_LAYERC_STARTX      0
N#define GDC1_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC1_LAYERD_WIDTH     640
N#define GDC1_LAYERD_HEIGHT    480
N#define GDC1_LAYERD_STARTX      0
N#define GDC1_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC1_LAYERE_WIDTH     640
N#define GDC1_LAYERE_HEIGHT    480
N#define GDC1_LAYERE_STARTX      0
N#define GDC1_LAYERE_STARTY      0
N
N#endif /* CONFIG_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: config.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 26 "..\..\src\boardcfg.c" 2
N#include "ccr.h"                            
N#include "dmc.h"     
L 1 "..\..\..\..\lldd\inc\dmc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef DMC_H
N#define DMC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_DMC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1 : disable identifier too long */  
N#endif 
N/*********************************************/
N
N#define SDRAM_ADDRESS_BASE (0x40000000)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*!< enable/disable */
Ntypedef enum tag_dmc_enable_e
N{
N    DMC_DISABLE = 0U,   /*!< Disable */
N    DMC_ENABLE  = 1U    /*!< Enable */
N} dmc_enable_e;
N
N/*!< Low/High */
Ntypedef enum tag_dmc_high_e
N{
N    DMC_LOW     = 0U,   /*!< Low */
N    DMC_HIGH    = 1U    /*!< High */
N} dmc_high_e;
N
N/*!< Status definitions */
Ntypedef enum tag_dmc_status_e
N{
N    DMC_STATUS_CONFIG    = 0U,   /*!< STATUS_CONFIG */
N    DMC_STATUS_READY     = 1U,   /*!< STATUS_READY */
N    DMC_STATUS_PAUSED    = 2U,   /*!< STATUS_PAUSED */
N    DMC_STATUS_LOW_POWER = 3U    /*!< STATUS_LOW_POWER */
N} dmc_status_e;
N
N/*!< Commands */
Ntypedef enum tag_dmc_cmd_e
N{
N    DMC_CMD_GO           = 0U,   /*!< Command GO */
N    DMC_CMD_SLEEP        = 1U,   /*!< Command SLEEP */
N    DMC_CMD_WAKEUP       = 2U,   /*!< Command WAKEUP */
N    DMC_CMD_PAUSE        = 3U,   /*!< Command PAUSE */
N    DMC_CMD_CONFIGURE    = 4U,   /*!< Command CONFIGURE */
N    DMC_CMD_ACTIVE_PAUSE = 7U    /*!< Command ACTIVE_PAUSE */
N} dmc_cmd_e;
N
N/*!< Memory type */
Ntypedef enum tag_dmc_type_e
N{
N    DMC_TYPE_SDRAM       = 0U,   /*!< SDR SDRAM */
N    DMC_TYPE_LPDDR       = 3U,   /*!< LPDDR */
N    DMC_TYPE_LPDDR_SDRAM = 4U   /*!< Combined SDR-LPDDR SDRAM */
N} dmc_type_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_chips_e
N{
N    DMC_ONE_CHIP       = 0U,   /*!< 1 Chip  */
N    DMC_TWO_CHIPS      = 1U,   /*!< 2 Chips */
N    DMC_THREE_CHIPS    = 2U,   /*!< 3 Chips */
N    DMC_FOUR_CHIPS     = 3U    /*!< 4 Chips */
N} dmc_mem_chips_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_banks_e
N{
N    DMC_FOUR_BANKS     = 0U,   /*!< Four Banks */
N    DMC_TWO_BANKS      = 1U    /*!< Two Banks  */
N} dmc_mem_banks_e;
N
N/*!< Access Monitor resources */
Ntypedef enum tag_dmc_monitors_e
N{
N    DMC_ZERO_MONITOR   = 0U,   /*!< 0 Monitors */
N    DMC_ONE_MONITOR    = 1U,   /*!< 1 Monitor  */
N    DMC_TWO_MONITORS   = 2U,   /*!< 2 Monitors */
N    DMC_FOUR_MONITORS  = 3U    /*!< 4 Monitors */
N} dmc_monitors_e;
N
N/*!< DMC Device commands */
Ntypedef enum tag_dmc_direct_cmd_e
N{
N    DMC_PRECHARGEALL   = 0U,   /*!< PRECHARGEALL Command */
N    DMC_AUTO_REFRESH   = 1U,   /*!< AUTO REFRESH Command */
N    DMC_MODEREG        = 2U,   /*!< MODEREG/Extended MODEREG Command */
N    DMC_NOP            = 3U,   /*!< NOP Command */
N    DMC_DPD            = 4U    /*!< DPD Command */
N} dmc_direct_cmd_e;
N
N/*!< DMC Memory Configs */
Ntypedef enum tag_dmc_mem_config_e
N{
N    DMC_MEM_ZERO       = 0U,   /*!< Config value: Zero */
N    DMC_MEM_ONE        = 1U,   /*!< Config value: One */
N    DMC_MEM_TWO        = 2U,   /*!< Config value: Two */
N    DMC_MEM_THREE      = 3U,   /*!< Config value: Three */
N    DMC_MEM_FOUR       = 4U,   /*!< Config value: Four */
N    DMC_MEM_FIVE       = 5U   /*!< Config value: Five */
N} dmc_mem_config_e;
N
N/*!< Auto Precharge */
Ntypedef enum tag_dmc_auto_precharge_e
N{
N    DMC_ADDR_BIT_10    = 0U,   /*!< address bit 10 */
N    DMC_ADDR_BIT_8     = 1U   /*!< address bit 8  */
N} dmc_auto_precharge_e;
N
N/*!< Memory Protocol */
Ntypedef enum tag_dmc_mem_protocol_e
N{
N    DMC_SDR_PROTOCOL   = 0U,   /*!< SDR Protocol */
N    DMC_LPDDR_PROTOCOL = 3U   /*!< LPDDR Protocol */
N} dmc_mem_protocol_e;
N
N/*!< Read Delay Cycles */
Ntypedef enum tag_dmc_read_delay_e
N{
N    DMC_DELAY_ONE_CYCLE   = 1U,   /*!< One Idle Cycle */
N    DMC_DELAY_TWO_CYCLE   = 2U   /*!< Two Idle Cycle */
N} dmc_read_delay_e;
N
N/*!< AXI Address format */
Ntypedef enum tag_dmc_addr_format_e
N{
N    DMC_ADDR_RBC   = 0U,   /*!< One Idle Cycle */
N    DMC_ADDR_BRC   = 1U   /*!< Two Idle Cycle */
N} dmc_addr_format_e;
N
N/*!< Clock rate */
Ntypedef enum tag_dmc_clock_rate_e
N{
N    DMC_CLOCK_RATE_166MHz = 0U,   /*!< 166 MHz */
N    DMC_CLOCK_RATE_133MHz = 1U    /*!< 133 MHz */
N} dmc_clock_rate_e;
N
N/*!< Memory density */
Ntypedef enum tag_dmc_density_e
N{
N    DMC_DENSITY_128Mbit = 0U,   /*!< 128 Mbit */
N    DMC_DENSITY_256Mbit = 1U,   /*!< 256 Mbit */
N    DMC_DENSITY_1Gbit   = 2U,   /*!< 1 Gbit */
N    DMC_DENSITY_2Gbit   = 3U    /*!< 2 Gbit */
N} dmc_density_e;
N
N/*!< Bus width */
Ntypedef enum tag_dmc_width_e
N{
N    DMC_BUSWIDTH_16BIT = 0U,   /*!< 16 Bit */
N    DMC_BUSWIDTH_32BIT = 1U    /*!< 32 Bit */
N} dmc_width_e;
N
N/*!< SDRAM/LPDDR state */
Ntypedef enum tag_dmc_mem_device_state_e
N{
N    DMC_DEV_STATE_POWER_UP        = 0U,   /*!< State POWER_UP */
N    DMC_DEV_STATE_SELF_REFRESH    = 1U,   /*!< State SELF_REFRESH */
N    DMC_DEV_STATE_POWER_DOWN      = 2U,   /*!< State POWER_DOWN */
N    DMC_DEV_STATE_DEEP_POWER_DOWN = 3U    /*!< State DEEP_POWER_DOWN */
N} dmc_mem_device_state_e;
N
N/*!< System Controller Operating mode */
Ntypedef enum tag_sys_ctrl_op_mode_e
N{
N    SYS_STATE_FULL_MODE           = 0U,   /*!< State POWER_UP */
N    SYS_STATE_STOP_MODE           = 1U,   /*!< State POWER_DOWN */
N    SYS_STATE_SLEEP_MODE          = 2U,   /*!< State SLEEP */
N    SYS_STATE_STANDBY_MODE        = 3U   /*!< State STAND BY */
N} sys_ctrl_op_mode_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/*!< DMC status structure */
Ntypedef struct tag_dmc_memc_status_st
N{
N    dmc_status_e    eMemcStatus;        /*!< Status of DMC */
N    dmc_width_e     eMemoryWidth;       /*!< Memory data bus width */
N    dmc_type_e      eMemoryType;        /*!< Type of SDRAM that the DMC Supports */
N    dmc_mem_chips_e eMemChips;          /*!< Number of chip selects that the DMC supports */
N    dmc_mem_banks_e eMemBanks;          /*!< Number of banks that the DMC supports */
N    dmc_monitors_e  eMonitors;          /*!< Number of exclusive access monitor resources */
N} dmc_memc_status_st;
N
N/*!< register description for register user_config */
Ntypedef struct tag_dmc_user_config_bit_view_st
N{
N    uint32_t   gear_ratio0       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 5;   /*!< 11..15 bit(s) */
N    uint32_t   gear_ratio1       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config_bit_view_st;
N
N/*!< register description for register user_config1 */
Ntypedef struct tag_dmc_user_config1_bit_view_st
N{
N    uint32_t   gear_ratio2       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 1;   /*!< 11  bit(s)    */
N    uint32_t   enable            : 1;   /*!< 12  bit(s)    */
N    uint32_t   clock_mode_change : 1;   /*!< 13  bit(s)    */
N    uint32_t   use_min_delay     : 1;   /*!< 14  bit(s)    */
N    uint32_t                     : 1;   /*!< 15 bit(s)     */
N    uint32_t   gear_ratio3       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config1_bit_view_st;
N
N/* Memory device stucture */
Ntypedef struct tag_mem_device_st
N{
N    dmc_type_e        eType;  /* MEMORY_TYPE */
N    dmc_width_e       eWidth;   /* MEMORY_WIDTH */
N    dmc_clock_rate_e  eClock_rate;  /* MEMORY_CLOCK_RATE */
N    uint32_t          u32GearRatio_0;  /* GEAR_RATIO_0  */
N    uint32_t          u32GearRatio_1;  /* GEAR_RATIO_1  */
N    uint32_t          u32GearRatio_2;  /* GEAR_RATIO_2  */
N    uint32_t          u32GearRatio_3;  /* GEAR_RATIO_3  */
N    uint32_t          u32T_CAS;  /* MEMORY_T_CAS */
N    uint32_t          u32T_RAS;  /* MEMORY_T_RAS */
N    uint32_t          u32T_MRD;  /* MEMORY_T_MRD */
N    uint32_t          u32T_RC;   /* MEMORY_T_RC  */
N    uint32_t          u32T_RCD;  /* MEMORY_T_RCD */
N    uint32_t          u32T_RFC;  /* MEMORY_T_RFC */
N    uint32_t          u32T_RP;   /* MEMORY_T_RP  */
N    uint32_t          u32T_RRD;  /* MEMORY_T_RRD */
N    uint32_t          u32T_WR;   /* MEMORY_T_WR  */
N    uint32_t          u32T_WTR;  /* MEMORY_T_WTR */
N    uint32_t          u32T_XP;   /* MEMORY_T_XP  */
N    uint32_t          u32T_XSR;  /* MEMORY_T_XSR */
N    uint32_t          u32T_ESR;  /* MEMORY_T_ESR */
N} mem_device_st;
N
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vDMC_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vDMC_Init
N*
N* Initialisation of memory controller for LPDDR/SDRAM
N*
N* @note No Limitations
N*
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_Init(mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function vDMC_MemoryDeviceInit
N*
N* Initializes the memory device
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_MemoryDeviceInit(void);
N
N
N/**
N* @brief Implementation of function i32DMC_EnterDeviceMode
N*
N* Changes the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                               mem_device_st *pstDeviceParams)
N;
N
N
N/**
N* @brief Implementation of function i32DMC_ExitDeviceMode
N*
N* Exit from the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                              mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function eDMC_GetStatus
N*
N* Reads the status bits of the Memory Controller Status Register to 
N* determine the current state of the memory controller
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return dma status
N*/
Ndmc_status_e eDMC_GetStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_GetFixedConfig
N*
N* Reads the configuration and current state of the DMC
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pstMemcStatus - Pointer to DMC configuration and status
N*
N* @return void
N*/
Nvoid vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCntrlCommand
N*
N* Sets the operating state of the DMC
N*
N* @note Setting is not accessible in the Reset or Power-On Reset
N*
N* @param[in] eCmd - DMC Operating state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetDirectCommand
N*
N* Writes data to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u32Value    - Memory device command information
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDirectCommand(uint32_t u32Value);
N
N/**
N* @brief Implementation of function vDMC_SetExternalMemCommand
N*
N* Writes command to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] eDirCmd    - Memory device command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipNumber
N*
N* Sets the external memory chip select
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8ChipNo   - Chip Select
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipNumber(uint8_t u8ChipNo);
N
N
N/**
N* @brief Implementation of function vDMC_SetBankAddress
N*
N* Sets external memory bank address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8BankAddr - External memory bank address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetBankAddress(uint8_t u8BankAddr);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemoryAddress
N*
N* Sets external memory address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u16Address - Mapped external memory address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemoryAddress(uint16_t u16Address);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig
N*
N* Sets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config  - Memory configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig
N*
N* Gets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] void
N*
N* @param[in,out] void
N*
N* @return memory configuration
N*/
Nuint32_t u32DMC_GetMemConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigActiveChips
N*
N* Sets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eActChips  - active chip
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigActiveChips
N*
N* Gets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of active chips
N*/
Ndmc_mem_chips_e eDMC_GetMemConfigActiveChips(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigQoS
N*
N* Sets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eQoS  - qos value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigQoS
N*
N* Gets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return qos value
N*/
Ndmc_mem_config_e eDMC_GetMemConfigQoS(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigBurst
N*
N* Sets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eBurst  - number of data accesses
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigBurst
N*
N* Gets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of data accesses
N*/
Ndmc_mem_config_e eDMC_GetMemConfigBurst(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigRowAddr
N*
N* Sets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eRowAddr  - Row address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigRowAddr
N*
N* Gets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return row address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigRowAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigColAddr
N*
N* Sets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigColAddr
N*
N* Gets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Column address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigColAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigStopClk
N*
N* Enable/Disable the memory clock to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigStopClk
N*
N* Gets memory clock state whether its enabled/disabled to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock state
N*/
Ndmc_enable_e eDMC_GetMemConfigStopClk(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPowerDown
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePoweDown  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPowerDown
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Ndmc_enable_e eDMC_GetMemConfigAutoPowerDown(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPreCharge
N*
N* Sets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePrecharge  - auto-precharge bit position
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPreCharge
N*
N* Gets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the position of the auto-precharge bit
N*/
Ndmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigPwrDownPrd
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8PwrDownPrd  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemConfigPwrDownPrd
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Nuint8_t u8DMC_GetMemConfigPwrDownPrd(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetRefreshPeriod
N*
N* Sets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16RefPrd  - Refresh period
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetRefreshPeriod(uint16_t u16RefPrd);
N
N
N/**
N* @brief Implementation of function u16DMC_GetRefreshPeriod
N*
N* Gets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the refresh period
N*/
Nuint16_t u16DMC_GetRefreshPeriod(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASLatency
N*
N* Sets the CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASLatency(uint8_t u8CASLatency);
N
N
N/**
N* @brief Implementation of function u8DMC_GetCASLatency
N*
N* Gets CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency time
N*/
Nuint8_t u8DMC_GetCASLatency(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASHalfCycle
N*
N* Sets the CAS latency time as 2.5
N*
N* @note Only accessible when DMC is in Config/Low power state,
N* use only when DMC accesses DDR devices and cas_latency field=2.
N*
N* @param[in] eHalfCycle  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle);
N
N
N/**
N* @brief Implementation of function eDMC_GetCASHalfCycle
N*
N* Checks whether CAS latency half cycle is enabled/disabled or not
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency half cycle enable/disable status
N*/
Ndmc_enable_e eDMC_GetCASHalfCycle(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetDQSTiming
N*
N* Sets the DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDQSTiming(uint8_t u8DQSTiming);
N
N
N/**
N* @brief Implementation of function u8DMC_GetDQSTiming
N*
N* Gets DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the DQS delay
N*/
Nuint8_t u8DMC_GetDQSTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetModeRegTiming
N*
N* Sets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetModeRegTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetModeRegTiming
N*
N* Gets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the MODEREG to command delay
N*/
Nuint8_t u8DMC_GetModeRegTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToPrechargeTiming
N*
N* Sets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToPrechargeTiming
N*
N* Gets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetActiveToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToActiveTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank x delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToActiveTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToActiveTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank x delay
N*/
Nuint8_t u8DMC_GetActiveToActiveTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToRWTiming
N*
N* Sets delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - delay between an ACTIVE command 
N*                       and another memory command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToRWTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToRWTiming
N*
N* Gets the delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the delay between an ACTIVE command and another 
N*         memory command
N*/
Nuint8_t u8DMC_GetActiveToRWTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRCD
N*
N* Sets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRCD
N*
N* Gets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_GetScheduleRCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RCD
N*
N* Sets t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RCD
N*
N* Gets the t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_Get_T_RCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetAutoRefreshTiming
N*
N* Sets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetAutoRefreshTiming(uint16_t u16Timing);
N
N
N/**
N* @brief Implementation of function u16DMC_GetAutoRefreshTiming
N*
N* Gets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint16_t u16DMC_GetAutoRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRFC
N*
N* Sets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_GetScheduleRFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RFC
N*
N* Sets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_Get_T_RFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetPrechargeTiming
N*
N* Sets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetPrechargeTiming
N*
N* Gets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRP
N*
N* Sets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRP
N*
N* Gets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetScheduleRP(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RP
N*
N* Sets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - t_RP
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RP
N*
N* Gets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the t_RP delay
N*/
Nuint8_t u8DMC_Get_T_RP(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveDiffBankTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank y delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveDiffBankTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveDiffBankTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank y delay
N*/
Nuint8_t u8DMC_GetActiveDiffBankTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToPrechargeTiming
N*
N* Sets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToPrechargeTiming
N*
N* Gets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToReadTiming
N*
N* Sets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToReadTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToReadTiming
N*
N* Gets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToReadTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitPowerDownTiming
N*
N* Sets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit power-down to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitPowerDownTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitPowerDownTiming
N*
N* Gets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit power-down to command delay
N*/
Nuint8_t u8DMC_GetExitPowerDownTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitSelfRefreshTiming
N*
N* Sets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitSelfRefreshTiming
N*
N* Gets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit self-refresh to command delay
N*/
Nuint8_t u8DMC_GetExitSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetSelfRefreshTiming
N*
N* Sets self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetSelfRefreshTiming
N*
N* Gets the self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return self-refresh to command delay
N*/
Nuint8_t u8DMC_GetSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig2
N*
N* Sets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - DMC Configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig2(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig2
N*
N* Gets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return DMC Configuration
N*/
Nuint32_t u32DMC_GetMemConfig2(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2ReadDelay
N*
N* Sets the number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Delay - memory clock cycles between 0-2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg2ReadDelay
N*
N* Gets number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock cycles
N*/
Nuint8_t u8DMC_GetMemCfg2ReadDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemProtocol
N*
N* Sets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eProtocol - memory protocal
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemProtocol
N*
N* Gets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory protocal
N*/
Ndmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemWidth
N*
N* Sets memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eWidth - bus width
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemWidth
N*
N* Gets the memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory data bus width
N*/
Ndmc_width_e eDMC_GetMemCfg2MemWidth(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2CkeInit
N*
N* Sets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of cke(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2CkeInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2CkeInit
N*
N* Gets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of cke.
N*/
Ndmc_high_e eDMC_GetMemCfg2CkeInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2DqmInit
N*
N* Sets sets the state of the dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of dqm(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2DqmInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2DqmInit
N*
N* Gets the state of dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of dqm.
N*/
Ndmc_high_e eDMC_GetMemCfg2DqmInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig3
N*
N* Sets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - prescalar and number of 
N*                        outstanding AUTO REFRESH commands.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig3(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig3
N*
N* Gets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar and number of 
N*         outstanding AUTO REFRESH commands.
N*/
Nuint32_t u32DMC_GetMemConfig3(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3PreScale
N*
N* Sets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Prescale - prescalar value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3PreScale(uint16_t u16Prescale);
N
N
N/**
N* @brief Implementation of function u16DMC_GetMemCfg3PreScale
N*
N* Gets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar value
N*/
Nuint16_t u16DMC_GetMemCfg3PreScale(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3MaxRefsCmds
N*
N* Sets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8MaxRefsCmds - number of outstanding 
N*                            AUTO REFRESH commands
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg3MaxRefsCmds
N*
N* Gets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of outstanding AUTO REFRESH commands.
N*/
Nuint8_t u8DMC_GetMemCfg3MaxRefsCmds(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetReadTransferDelay
N*
N* Sets number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eDelay - number of idle cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay);
N
N
N/**
N* @brief Implementation of function eDMC_GetReadTransferDelay
N*
N* Gets the number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of idle cycles.
N*/
Ndmc_read_delay_e eDMC_GetReadTransferDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetIdConfig
N*
N* Sets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID    - Configuration ID, between 0 to 15
N* @param[in] u8QosMax   - maximum QoS value, between 0 to 255
N* @param[in] eQosMin    - minimum QoS value
N* @param[in] eQosEnable - enable/disable applying QoS to read transfer
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
N                      dmc_enable_e eQosMin, dmc_enable_e eQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_GetIdConfig
N*
N* Gets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID  - Configuration ID, between 0 to 15
N*
N* @param[in,out] u8QosMax   - pointer to maximum QoS value
N* @param[in,out] eQosMin    - pointer to minimum QoS value
N* @param[in,out] eQosEnable - pointer to QoS enable/disable state
N*
N* @return void
N*/
Nvoid vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
N                        dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfig
N*
N* Sets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - external memory device configuration 
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetChipConfig
N*
N* Gets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return external memory device configuration 
N*/
Nuint32_t u32DMC_GetChipConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrFmt
N*
N* Sets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eAddrFmt - memory organization format
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt);
N
N
N/**
N* @brief Implementation of function eDMC_GetChipConfigAddrFmt
N*
N* Gets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory organization format
N*/
Ndmc_addr_format_e eDMC_GetChipConfigAddrFmt(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMatch
N*
N* Sets the reference address field to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMatch - reference address field
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMatch
N*
N* Gets the reference address field used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return reference address field
N*/
Nuint8_t u8DMC_GetChipConfigAddrMatch(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMask
N*
N* Sets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMask - address mask
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMask
N*
N* Gets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return address mask
N*/
Nuint8_t u8DMC_GetChipConfigAddrMask(void);
N
N
N/**
N* @brief Implementation of function eDMC_GetUserStatus
N*
N* Gets the status of the user_status inputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return user status inputs
N*/
Ndmc_enable_e eDMC_GetUserStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig
N*
N* Sets the state of the user config outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config state(gear ratio)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio0
N*
N* Sets the user config's gear ratio0.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio0.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio1
N*
N* Sets the user config's gear ratio1.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio1.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1
N*
N* Sets the state of the user config1 outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config1 state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio3
N*
N* Sets the user config1's gear ratio3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio3.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1UseMinDelay
N*
N* Sets the delay to compensate the DLLs minimum Delay in LPDDR mode.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] boDelay - delay.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1UseMinDelay(bool_t boDelay);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1ClkModeChange
N*
N* Sets the Clock Mode Change of Leaf DLL cells.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eModeChange - Clock Mode Change
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1SignalEn
N*
N* Enable/Disable signal for Master DLL.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eEnable - Enable/Disable signal for Master DLL
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio2
N*
N* Sets the user config1's gear ratio2.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vSetEarlyWriteResponse
N*
N* Configure Early Write Response
N*
N* @note No Limitations
N*
N* @param[in] eEnable - enable or disable Early Write Response
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vSetEarlyWriteResponse(dmc_enable_e eEnable);
N
N
N/****************************************************************************/
N
N
N#endif /* DMC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\src\boardcfg.c" 2
N#include "gpio.h"                           
L 1 "..\..\..\..\lldd\inc\gpio.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : General Purpose Input Output Port Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : General Purpose Input Output Port (GPIO)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.12 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GPIO_H
N#define GPIO_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_GPIO_H_REVISION     "$Revision: 1.12 $"
N#define LLDD_GPIO_H_TAG          "$Name: LLDD_1_6 $"
N
N/*********************************************/
N
N#define PORT_DDR_DQ0_AS_GPIO               0
N#define PORT_DDR_DQ0_AS_ESEI1MISO          1
N#define PORT_DDR_DQ0_AS_PWMOUT00           2
N
N#define PORT_DDR_DQ1_AS_GPIO               0
N#define PORT_DDR_DQ1_AS_ESEI1MOSI          1
N#define PORT_DDR_DQ1_AS_PWMOUT01           2
N
N#define PORT_DDR_DQ2_AS_GPIO               0
N#define PORT_DDR_DQ2_AS_ESEI1SCLK          1
N#define PORT_DDR_DQ2_AS_PWMOUT02           2
N
N#define PORT_DDR_DQ3_AS_GPIO               0
N#define PORT_DDR_DQ3_AS_ESEI1SSOI          1
N#define PORT_DDR_DQ3_AS_PWMOUR03           2
N
N#define PORT_DDR_DQ4_AS_GPIO               0
N#define PORT_DDR_DQ4_AS_PWMOUT04           1
N#define PORT_DDR_DQ4_AS_TBIO0              2
N
N#define PORT_DDR_DQ5_AS_GPIO               0
N#define PORT_DDR_DQ5_AS_PWMOUT05           1
N#define PORT_DDR_DQ5_AS_TBIO1              2
N
N#define PORT_DDR_DQ6_AS_GPIO               0
N#define PORT_DDR_DQ6_AS_PWMOUT06           1
N#define PORT_DDR_DQ6_AS_TBIO2              2
N
N#define PORT_DDR_DQ7_AS_GPIO               0
N#define PORT_DDR_DQ7_AS_PWMOUT07           1
N#define PORT_DDR_DQ7_AS_TBIO3              2
N
N#define PORT_DDR_DQ8_AS_GPIO               0
N#define PORT_DDR_DQ8_AS_PWMOUT08           1
N#define PORT_DDR_DQ8_AS_TBIO6              2
N
N#define PORT_DDR_DQ9_AS_GPIO               0
N#define PORT_DDR_DQ9_AS_PWMOUT09           1
N#define PORT_DDR_DQ9_AS_TBIO7              2
N
N#define PORT_DDR_DQ10_AS_GPIO              0
N#define PORT_DDR_DQ10_AS_PWMOUT10          1
N#define PORT_DDR_DQ10_AS_TBIO8             2
N
N#define PORT_DDR_DQ11_AS_GPIO              0
N#define PORT_DDR_DQ11_AS_PWMOUT11          1
N#define PORT_DDR_DQ11_AS_TBIO9             2
N
N#define PORT_DDR_DQ12_AS_GPIO              0
N#define PORT_DDR_DQ12_AS_UART0RX           1
N#define PORT_DDR_DQ12_AS_PWMOUT12          2
N
N#define PORT_DDR_DQ13_AS_GPIO              0
N#define PORT_DDR_DQ13_AS_UART0TX           1
N#define PORT_DDR_DQ13_AS_PWMOUT13          2
N
N#define PORT_DDR_DQ14_AS_GPIO              0
N#define PORT_DDR_DQ14_AS_UART1RX           1
N#define PORT_DDR_DQ14_AS_PWMOUT14          2
N
N#define PORT_DDR_DQ15_AS_GPIO              0
N#define PORT_DDR_DQ15_AS_UART1TX           1
N#define PORT_DDR_DQ15_AS_PWMOUT15          2
N
N#define PORT_DDR_DM0_AS_GPIO               0
N#define PORT_DDR_DM0_AS_PWMOUT16           1
N
N#define PORT_DDR_DM1_AS_GPIO               0
N#define PORT_DDR_DM1_AS_PWMOUT17           1
N
N#define PORT_DDR_WE_AS_GPIO                0
N#define PORT_DDR_WE_AS_PWMOUT18            1
N
N#define PORT_DDR_RAS_AS_GPIO               0
N#define PORT_DDR_RAS_AS_PWMOUT19           1
N
N#define PORT_DDR_CAS_AS_GPIO               0
N#define PORT_DDR_CAS_AS_PWMOUT20           1
N
N#define PORT_DDR_CS_AS_GPIO                0
N#define PORT_DDR_CS_AS_PWMOUT21            1
N
N#define PORT_DDR_CKE_AS_GPIO               0
N#define PORT_DDR_CKE_AS_PWMOUT22           1
N
N#define PORT_DDR_BA0_AS_GPIO               0
N#define PORT_DDR_BA0_AS_QSPI1_SCLK         1
N#define PORT_DDR_BA0_AS_PWMOUT23           2
N
N#define PORT_DDR_BA1_AS_GPIO               0
N#define PORT_DDR_BA1_AS_QSPI1_SIO0         1
N#define PORT_DDR_BA1_AS_HSPWM0             2
N
N#define PORT_DDR_A0_AS_GPIO                0
N#define PORT_DDR_A0_AS_QSPI1_SIO1          1
N#define PORT_DDR_A0_AS_HSPWM0N             2
N
N#define PORT_DDR_A1_AS_GPIO                0
N#define PORT_DDR_A1_AS_QSPI1_SIO2          1
N#define PORT_DDR_A1_AS_HSPWM1              2
N
N#define PORT_DDR_A2_AS_GPIO                0
N#define PORT_DDR_A2_AS_QSPI1_SIO3          1
N#define PORT_DDR_A2_AS_HSPWM1N             2
N
N#define PORT_DDR_A3_AS_GPIO                0
N#define PORT_DDR_A3_AS_QSPI1_CS0           1
N#define PORT_DDR_A3_AS_HSPWM2              2
N
N#define PORT_DDR_A4_AS_GPIO                0
N#define PORT_DDR_A4_AS_QSPI1_CS1           1
N#define PORT_DDR_A4_AS_HSPWM2N             2
N
N#define PORT_DDR_A5_AS_GPIO                0
N#define PORT_DDR_A5_AS_IRQ0                1
N#define PORT_DDR_A5_AS_HSPWM3              2
N
N#define PORT_DDR_A6_AS_GPIO                0
N#define PORT_DDR_A6_AS_EBIF_AD08           1
N#define PORT_DDR_A6_AS_HSPWM3N             2
N
N#define PORT_DDR_A7_AS_GPIO                0
N#define PORT_DDR_A7_AS_CMRGB0              1
N#define PORT_DDR_A7_AS_EBIF_AD09           2
N
N#define PORT_DDR_A8_AS_GPIO                0
N#define PORT_DDR_A8_AS_CMRGB1              1
N#define PORT_DDR_A8_AS_EBIF_AD10           2
N
N#define PORT_DDR_A9_AS_GPIO                0
N#define PORT_DDR_A9_AS_CMRGB2              1
N#define PORT_DDR_A9_AS_EBIF_AD11           2
N
N#define PORT_DDR_A10_AS_GPIO               0
N#define PORT_DDR_A10_AS_CMRGB3             1
N#define PORT_DDR_A10_AS_EBIF_AD12          2
N
N#define PORT_DDR_A11_AS_GPIO               0
N#define PORT_DDR_A11_AS_CMRGB4             1
N#define PORT_DDR_A11_AS_EBIF_AD13          2
N
N#define PORT_DDR_A12_AS_GPIO               0
N#define PORT_DDR_A12_AS_CMRGB5             1
N#define PORT_DDR_A12_AS_EBIF_AD14          2
N
N#define PORT_DDR_A13_AS_GPIO               0
N#define PORT_DDR_A13_AS_CMRGB6             1
N#define PORT_DDR_A13_AS_EBIF_AD15          2
N#define PORT_DDR_A13_AS_IRQ1               3
N
N#define PORT_DDR_DQS0_AS_GPIO              0
N#define PORT_DDR_DQS0_AS_GDC0_PWM          1
N#define PORT_DDR_DQS0_AS_CMRGB7            2
N#define PORT_DDR_DQS0_AS_EBIF_CS1          3
N#define PORT_DDR_DQS0_AS_IRQ5              4
N
N#define PORT_DDR_DQS1_AS_GPIO              0
N#define PORT_DDR_DQS1_AS_GDC1_PWM          1
N#define PORT_DDR_DQS1_AS_CMFOOD            2
N#define PORT_DDR_DQS1_AS_IRQ4              3
N
N#define PORT_DDR_DQS2_AS_GPIO              0
N#define PORT_DDR_DQS2_AS_CMCBCR0           1
N#define PORT_DDR_DQS2_AS_EBIF_AD00         2
N#define PORT_DDR_DQS2_AS_NF_DATA0          3
N#define PORT_DDR_DQS2_AS_IRQ3              4
N#define PORT_DDR_DQS2_AS_PWMOUT04          5
N#define PORT_DDR_DQS2_AS_HSPWM1            6
N
N#define PORT_DDR_DQS3_AS_GPIO              0
N#define PORT_DDR_DQS3_AS_CMCBCR1           1
N#define PORT_DDR_DQS3_AS_EBIF_AD01         2
N#define PORT_DDR_DQS3_AS_NF_DATA1          3
N#define PORT_DDR_DQS3_AS_IRQ2              4
N#define PORT_DDR_DQS3_AS_PWMOUT05          5
N#define PORT_DDR_DQS3_AS_HSPWM1N           6
N
N#define PORT_DDR_DM2_AS_GPIO               0
N#define PORT_DDR_DM2_AS_D0RGB0             1
N#define PORT_DDR_DM2_AS_CMCBCR2            2
N#define PORT_DDR_DM2_AS_EBIF_AD02          3
N#define PORT_DDR_DM2_AS_NF_DATA2           4
N#define PORT_DDR_DM2_AS_PWMOUT06           5
N
N#define PORT_DDR_DM3_AS_GPIO               0
N#define PORT_DDR_DM3_AS_D0RGB1             1
N#define PORT_DDR_DM3_AS_CMCBCR3            2
N#define PORT_DDR_DM3_AS_EBIF_AD03          3
N#define PORT_DDR_DM3_AS_NF_DATA3           4
N#define PORT_DDR_DM3_AS_PWMOUT07           5
N
N#define PORT_DDR_DQ16_AS_GPIO              0
N#define PORT_DDR_DQ16_AS_D0RGB8            1
N#define PORT_DDR_DQ16_AS_CMCBCR4           2
N#define PORT_DDR_DQ16_AS_EBIF_AD04         3
N#define PORT_DDR_DQ16_AS_NF_DATA4          4
N#define PORT_DDR_DQ16_AS_PWMOUT08          5
N
N#define PORT_DDR_DQ17_AS_GPIO              0
N#define PORT_DDR_DQ17_AS_D0RGB9            1
N#define PORT_DDR_DQ17_AS_CMCBCR5           2
N#define PORT_DDR_DQ17_AS_EBIF_AD05         3
N#define PORT_DDR_DQ17_AS_NF_DATA5          4
N#define PORT_DDR_DQ17_AS_PWMOUT09          5
N
N#define PORT_DDR_DQ18_AS_GPIO              0
N#define PORT_DDR_DQ18_AS_D0RGB16           1
N#define PORT_DDR_DQ18_AS_CMCBCR6           2
N#define PORT_DDR_DQ18_AS_EBIF_AD06         3
N#define PORT_DDR_DQ18_AS_NF_DATA6          4
N#define PORT_DDR_DQ18_AS_PWMOUT10          5
N
N#define PORT_DDR_DQ19_AS_GPIO              0
N#define PORT_DDR_DQ19_AS_D0RGB17           1
N#define PORT_DDR_DQ19_AS_CMCBCR7           2
N#define PORT_DDR_DQ19_AS_EBIF_AD07         3
N#define PORT_DDR_DQ19_AS_NF_DATA7          4
N#define PORT_DDR_DQ19_AS_PWMOUT11          5
N
N#define PORT_DDR_DQ20_AS_GPIO              0
N#define PORT_DDR_DQ20_AS_CMCLK             1
N#define PORT_DDR_DQ20_AS_EBIF_ALE          2
N#define PORT_DDR_DQ20_AS_NF_ALE            3
N#define PORT_DDR_DQ20_AS_PWMOUT12          4
N
N#define PORT_DDR_DQ21_AS_GPIO              0
N#define PORT_DDR_DQ21_AS_CMHDISP           1
N#define PORT_DDR_DQ21_AS_EBIF_CS0          2
N#define PORT_DDR_DQ21_AS_NF_CLE            3
N#define PORT_DDR_DQ21_AS_PWMOUT13          4
N
N#define PORT_DDR_DQ22_AS_GPIO              0
N#define PORT_DDR_DQ22_AS_CMHSYNC           1
N#define PORT_DDR_DQ22_AS_EBIF_OE           2
N#define PORT_DDR_DQ22_AS_NF_RE             3
N#define PORT_DDR_DQ22_AS_PWMOUT14          4
N
N#define PORT_DDR_DQ23_AS_GPIO              0
N#define PORT_DDR_DQ23_AS_CMVSYNC           1
N#define PORT_DDR_DQ23_AS_EBIF_WE           2
N#define PORT_DDR_DQ23_AS_NF_WE             3
N#define PORT_DDR_DQ23_AS_PWMOUT15          4
N
N#define PORT_DDR_DQ24_AS_GPIO              0
N#define PORT_DDR_DQ24_AS_CMY0              1
N#define PORT_DDR_DQ24_AS_EBIF_AEX0         2
N#define PORT_DDR_DQ24_AS_NF_BUSYN          3
N#define PORT_DDR_DQ24_AS_PWMOUT16          4
N
N#define PORT_DDR_DQ25_AS_GPIO              0
N#define PORT_DDR_DQ25_AS_CMY1              1
N#define PORT_DDR_DQ25_AS_EBIF_AEX1         2
N#define PORT_DDR_DQ25_AS_NF_CSN            3
N#define PORT_DDR_DQ25_AS_PWMOUT17          4
N
N#define PORT_DDR_DQ26_AS_GPIO              0
N#define PORT_DDR_DQ26_AS_CMY2              1
N#define PORT_DDR_DQ26_AS_EBIF_AEX2         2
N#define PORT_DDR_DQ26_AS_NF_CSN2           3
N#define PORT_DDR_DQ26_AS_PWMOUT18          4
N
N#define PORT_DDR_DQ27_AS_GPIO              0
N#define PORT_DDR_DQ27_AS_CMY3              1
N#define PORT_DDR_DQ27_AS_EBIF_AEX3         2
N#define PORT_DDR_DQ27_AS_PWMOUT19          3
N
N#define PORT_DDR_DQ28_AS_GPIO              0
N#define PORT_DDR_DQ28_AS_CMY4              1
N#define PORT_DDR_DQ28_AS_EBIF_AEX4         2
N#define PORT_DDR_DQ28_AS_ESEI1MISO         3
N#define PORT_DDR_DQ28_AS_PWMOUT20          4
N
N#define PORT_DDR_DQ29_AS_GPIO              0
N#define PORT_DDR_DQ29_AS_CMY5              1
N#define PORT_DDR_DQ29_AS_EBIF_AEX5         2
N#define PORT_DDR_DQ29_AS_ESEI1MOSI         3
N#define PORT_DDR_DQ29_AS_PWMOUT21          4
N
N#define PORT_DDR_DQ30_AS_GPIO              0
N#define PORT_DDR_DQ30_AS_CMY6              1
N#define PORT_DDR_DQ30_RESERVED             2
N#define PORT_DDR_DQ30_AS_ESEI1_SCLK        3
N#define PORT_DDR_DQ30_AS_PWMOUT22          4
N
N#define PORT_DDR_DQ31_AS_GPIO              0
N#define PORT_DDR_DQ31_AS_CMY7              1
N#define PORT_DDR_DQ31_AS_ESEI1SSOI         2
N#define PORT_DDR_DQ31_AS_PWMOUT23          3
N
N#define PORT_QSPI0_SIO0_AS_GPIO            0
N#define PORT_QSPI0_SIO0_AS_QSPI0_SIO0      1
N#define PORT_QSPI0_SIO0_AS_QSPI1_SIO0      2
N#define PORT_QSPI0_SIO0_AS_EBIF_WAITN      3
N#define PORT_QSPI0_SIO0_AS_NF_BUSYN        4
N
N#define PORT_QSPI0_SIO1_AS_GPIO            0
N#define PORT_QSPI0_SIO1_AS_QSPI0_SIO1      1
N#define PORT_QSPI0_SIO1_AS_QSPI1_SIO1      2
N#define PORT_QSPI0_SIO1_AS_EBIF_OE         3
N#define PORT_QSPI0_SIO1_AS_NF_RE           4
N
N#define PORT_QSPI0_SIO2_AS_GPIO            0
N#define PORT_QSPI0_SIO2_AS_QSPI0_SIO2      1
N#define PORT_QSPI0_SIO2_AS_QSPI1_SIO2      2
N#define PORT_QSPI0_SIO2_AS_EBIF_WE         3
N#define PORT_QSPI0_SIO2_AS_NF_WE           4
N
N#define PORT_QSPI0_SIO3_AS_GPIO            0
N#define PORT_QSPI0_SIO3_AS_QSPI0_SIO3      1
N#define PORT_QSPI0_SIO3_AS_QSPI1_SIO3      2
N#define PORT_QSPI0_SIO3_AS_EBIF_ALE        3
N#define PORT_QSPI0_SIO3_AS_NF_ALE          4
N
N#define PORT_QSPI0_CS0_AS_GPIO             0
N#define PORT_QSPI0_CS0_AS_QSPI0_CS0        1
N#define PORT_QSPI0_CS0_AS_QSPI1_CS0        2
N#define PORT_QSPI0_CS0_AS_EBIF_CS0         3
N#define PORT_QSPI0_CS0_AS_NF_CSN           4
N
N#define PORT_QSPI0_SCLK_AS_GPIO            0
N#define PORT_QSPI0_SCLK_AS_QSPI0_SCLK      1
N#define PORT_QSPI0_SCLK_AS_QSPI1_SCLK      2
N#define PORT_QSPI0_SCLK_AS_EBIF_SYSCLK0    3
N#define PORT_QSPI0_SCLK_AS_NF_CLE          4
N
N#define PORT_D0HDISP_AS_GPIO               0
N#define PORT_D0HDISP_AS_D0HDISP            1
N
N#define PORT_D0HSYNC_AS_GPIO               0
N#define PORT_D0HSYNC_AS_D0HSYNC            1
N
N#define PORT_D0VSYNC_AS_GPIO               0
N#define PORT_D0VSYNC_AS_D0VSYNC            1
N
N#define PORT_D0DOTCLK_AS_GPIO              0
N#define PORT_D0DOTCLK_AS_D0DOTCLK          1
N
N#define PORT_D0RGB0_AS_GPIO                0
N#define PORT_D0RGB0_AS_D0RGB0              1
N#define PORT_D0RGB0_AS_GDC0PWM             2
N
N#define PORT_D0RGB1_AS_GPIO                0
N#define PORT_D0RGB1_AS_D0RGB1              1
N
N#define PORT_D0RGB2_AS_GPIO                0
N#define PORT_D0RGB2_AS_D0RGB2              1
N#define PORT_D0RGB2_AS_DSU_TRACED08        2
N
N#define PORT_D0RGB3_AS_GPIO                0
N#define PORT_D0RGB3_AS_D0RGB3              1
N#define PORT_D0RGB3_AS_DSU_TRACED11        2
N
N#define PORT_D0RGB4_AS_GPIO                0
N#define PORT_D0RGB4_AS_D0RGB4              1
N#define PORT_D0RGB4_AS_DSU_TRACECLK        2
N
N#define PORT_D0RGB5_AS_GPIO                0
N#define PORT_D0RGB5_AS_D0RGB5              1
N#define PORT_D0RGB5_AS_DSU_TRACED02        2
N
N#define PORT_D0RGB6_AS_GPIO                0
N#define PORT_D0RGB6_AS_D0RGB6              1
N#define PORT_D0RGB6_AS_DSU_TRACE05         2
N
N#define PORT_D0RGB7_AS_GPIO                0
N#define PORT_D0RGB7_AS_D0RGB7              1
N#define PORT_D0RGB7_AS_DSU_TRACED14        2
N
N#define PORT_D0RGB8_AS_GPIO                0
N#define PORT_D0RGB8_AS_D0RGB8              1
N
N#define PORT_D0RGB9_AS_GPIO                0
N#define PORT_D0RGB9_AS_D0RGB9              1
N
N#define PORT_D0RGB10_AS_GPIO               0
N#define PORT_D0RGB10_AS_D0RGB10            1
N#define PORT_D0RGB10_AS_DSU_TRACED09       2
N
N#define PORT_D0RGB11_AS_GPIO               0
N#define PORT_D0RGB11_AS_D0RGB11            1
N#define PORT_D0RGB11_AS_DSU_TRACED12       2
N
N#define PORT_D0RGB12_AS_GPIO               0
N#define PORT_D0RGB12_AS_D0RGB12            1
N#define PORT_D0RGB12_AS_DSU_TRACED00       2
N
N#define PORT_D0RGB13_AS_GPIO               0
N#define PORT_D0RGB13_AS_D0RGB13            1
N#define PORT_D0RGB13_AS_DSU_TRACED03       2
N
N#define PORT_D0RGB14_AS_GPIO               0
N#define PORT_D0RGB14_AS_D0RGB14            1
N#define PORT_D0RGB14_AS_DSU_TRACED06       2
N
N#define PORT_D0RGB15_AS_TSM_TPC0_GTDO      0
N#define PORT_D0RGB15_AS_D0RGB15            1
N#define PORT_D0RGB15_AS_DSU_TRACED15       2
N#define PORT_D0RGB15_AS_GPIO               3
N
N#define PORT_D0RGB16_AS_GPIO               0
N#define PORT_D0RGB16_AS_D0RGB16            1
N
N#define PORT_D0RGB17_AS_GPIO               0
N#define PORT_D0RGB17_AS_D0RGB17            1
N
N#define PORT_D0RGB18_AS_GPIO               0
N#define PORT_D0RGB18_AS_D0RGB18            1
N#define PORT_D0RGB18_AS_DSU_TRACED10       2
N
N#define PORT_D0RGB19_AS_GPIO               0
N#define PORT_D0RGB19_AS_D0RGB19            1
N#define PORT_D0RGB19_AS_DSU_TRACED13       2
N
N#define PORT_D0RGB20_AS_GPIO               0
N#define PORT_D0RGB20_AS_D0RGB20            1
N#define PORT_D0RGB20_AS_DSU_TRACED01       2
N
N#define PORT_D0RGB21_AS_GPIO               0
N#define PORT_D0RGB21_AS_D0RGB21            1
N#define PORT_D0RGB21_AS_DSU_TRACECTL       2
N
N#define PORT_D0RGB22_AS_GPIO               0
N#define PORT_D0RGB22_AS_D0RGB22            1
N#define PORT_D0RGB22_AS_DSU_TRACED07       2
N
N#define PORT_D0RGB23_AS_GPIO               0
N#define PORT_D0RGB23_AS_D0RGB23            1
N#define PORT_D0RGB23_AS_DSU_TRACED04       2
N
N#define PORT_DOTCLKIN_AS_GPIO              0
N#define PORT_DOTCLKIN_AS_DOTCLKIN          1
N#define PORT_DOTCLKIN_AS_QSPI1_CS1         2
N#define PORT_DOTCLKIN_AS_EBIF_CS1          3
N#define PORT_DOTCLKIN_AS_NF_CSN2           4
N
N#define PORT_PNLGPP0_AS_TSM_GTMS           0
N#define PORT_PNLGPP0_AS_PNLGPP0            1
N#define PORT_PNLGPP0_AS_QSPI1_CS0          2
N#define PORT_PNLGPP0_AS_EBIF_AD08          3
N#define PORT_PNLGPP0_AS_NF_DATA8           4
N#define PORT_PNLGPP0_AS_I2S0SD             5
N#define PORT_PNLGPP0_AS_ESEI0MISO          6
N#define PORT_PNLGPP0_AS_TBIO0              7
N
N#define PORT_PNLGPP1_AS_TSM_GTDI           0
N#define PORT_PNLGPP1_AS_PNLGPP1            1
N#define PORT_PNLGPP1_AS_QSPI1_SIO0         2
N#define PORT_PNLGPP1_AS_EBIF_AD09          3
N#define PORT_PNLGPP1_AS_NF_DATA9           4
N#define PORT_PNLGPP1_AS_I2S0WS             5
N#define PORT_PNLGPP1_AS_ESEI0MOSI          6
N#define PORT_PNLGPP1_AS_TBIO1              7
N
N#define PORT_PNLGPP2_AS_TSM_GTCK           0
N#define PORT_PNLGPP2_AS_PNLGPP2            1
N#define PORT_PNLGPP2_AS_QSPI1_SCLK         2
N#define PORT_PNLGPP2_AS_EBIF_AD10          3
N#define PORT_PNLGPP2_AS_NF_DATA10          4
N#define PORT_PNLGPP2_AS_I2S0CLK            5
N#define PORT_PNLGPP2_AS_ESEI0SCLK          6
N#define PORT_PNLGPP2_AS_TBIO6              7
N
N#define PORT_PNLGPP3_AS_TSM_GTRST          0
N#define PORT_PNLGPP3_AS_PNLGPP3            1
N#define PORT_PNLGPP3_AS_QSPI1_SIO1         2
N#define PORT_PNLGPP3_AS_EBIF_AD11          3
N#define PORT_PNLGPP3_AS_NF_DATA11          4
N#define PORT_PNLGPP3_AS_I2SMCLK            5
N#define PORT_PNLGPP3_AS_ESEI0SSOI          6
N#define PORT_PNLGPP3_AS_TBIO7              4
N
N#define PORT_PNLGPP4_AS_GPIO               0
N#define PORT_PNLGPP4_AS_PNLGPP4            1
N#define PORT_PNLGPP4_AS_QSPI1_SIO2         2
N#define PORT_PNLGPP4_AS_EBIF_AD12          3
N#define PORT_PNLGPP4_AS_NF_DATA12          4
N#define PORT_PNLGPP4_AS_PWMOUT18           5
N
N#define PORT_PNLGPP5_AS_GPIO               0
N#define PORT_PNLGPP5_AS_PNLGPP5            1
N#define PORT_PNLGPP5_AS_QSPI1_SIO3         2
N#define PORT_PNLGPP5_AS_EBIF_AD13          3
N#define PORT_PNLGPP5_AS_NF_DATA13          4
N#define PORT_PNLGPP5_AS_PWMOUT19           5
N
N#define PORT_PNLGPP6_AS_GPIO               0
N#define PORT_PNLGPP6_AS_PNLGPP6            1
N#define PORT_PNLGPP6_AS_GDC0PWM            2
N#define PORT_PNLGPP6_AS_EBIF_AD14          3
N#define PORT_PNLGPP6_AS_NF_DATA14          4
N#define PORT_PNLGPP6_AS_PWMOUT20           5
N
N#define PORT_PNLGPP7_AS_GPIO               0
N#define PORT_PNLGPP7_AS_PNLGPP7            1
N#define PORT_PNLGPP7_AS_GDC1PWM            2
N#define PORT_PNLGPP7_AS_EBIF_AD15          3
N#define PORT_PNLGPP7_AS_NF_DATA15          4
N#define PORT_PNLGPP7_AS_PWMOUT21           5
N
N#define PORT_D1HDISP_AS_GPIO               0
N#define PORT_D1HDISP_AS_D1HDISP            1
N#define PORT_D1HDISP_AS_EBIF_AEX3          2
N
N#define PORT_D1HSYNC_AS_GPIO               0
N#define PORT_D1HSYNC_AS_D1HSYNC            1
N#define PORT_D1HSYNC_AS_EBIF_AEX4          2
N
N#define PORT_D1VSYNC_AS_GPIO               0
N#define PORT_D1VSYNC_AS_D1VSYNC            1
N#define PORT_D1VSYNC_AS_EBIF_AEX5          2
N#define PORT_D1VSYNC_AS_DMA_REQ            3
N#define PORT_D1VSYNC_AS_DSU_TRACED08       4
N
N#define PORT_D1DOTCLK_AS_GPIO              0
N#define PORT_D1DOTCLK_AS_D1DOTCLK          1
N#define PORT_D1DOTCLK_AS_DMA_ACK           2
N#define PORT_D1DOTCLK_AS_DSU_TRACED11      3
N
N#define PORT_D1RGB0_AS_GPIO                0
N#define PORT_D1RGB0_AS_D1RGB0              1
N#define PORT_D1RGB0_AS_GDC1PWM             2
N#define PORT_D1RGB0_AS_EBIF_ALE            3
N#define PORT_D1RGB0_AS_EBIF_AEX0           4
N#define PORT_D1RGB0_AS_NF_BUSYN            5
N#define PORT_D1RGB0_AS_HSPWM1              6
N#define PORT_D1RGB0_AS_DSU_TRACECLK        7
N
N#define PORT_D1RGB1_AS_GPIO                0
N#define PORT_D1RGB1_AS_D1RGB1              1
N#define PORT_D1RGB1_AS_EBIF_CS0            2
N#define PORT_D1RGB1_AS_EBIF_AEX1           3
N#define PORT_D1RGB1_AS_NF_CSN              4
N#define PORT_D1RGB1_AS_PWMOUT11            5
N#define PORT_D1RGB1_AS_HSPWM1N             6
N#define PORT_D1RGB1_AS_DSU_TRACED02        7
N
N#define PORT_D1RGB2_AS_GPIO                0
N#define PORT_D1RGB2_AS_D1RGB2              1
N#define PORT_D1RGB2_AS_RESERVED            2
N#define PORT_D1RGB2_AS_NF_ALE              3
N#define PORT_D1RGB2_AS_DSU_TRACED05        4
N
N#define PORT_D1RGB3_AS_GPIO                0
N#define PORT_D1RGB3_AS_D1RGB3              1
N#define PORT_D1RGB3_AS_EBIF_OE             2
N#define PORT_D1RGB3_AS_NF_CLE              3
N#define PORT_D1RGB3_AS_DSU_TRACED14        4
N
N#define PORT_D1RGB4_AS_GPIO                0
N#define PORT_D1RGB4_AS_D1RGB4              1
N#define PORT_D1RGB4_AS_EBIF_WE             2
N#define PORT_D1RGB4_AS_NF_WE               3
N
N#define PORT_D1RGB5_AS_GPIO                0
N#define PORT_D1RGB5_AS_D1RGB5              1
N#define PORT_D1RGB5_AS_EBIF_AD00           2
N#define PORT_D1RGB5_AS_NF_RE               3
N
N#define PORT_D1RGB6_AS_GPIO                0
N#define PORT_D1RGB6_AS_D1RGB6              1
N#define PORT_D1RGB6_AS_EBIF_AD01           2
N#define PORT_D1RGB6_AS_NF_DATA0            3
N#define PORT_D1RGB6_AS_DSU_TRACED09        4
N
N#define PORT_D1RGB7_AS_GPIO                0
N#define PORT_D1RGB7_AS_D1RGB7              1
N#define PORT_D1RGB7_AS_EBIF_AD02           2
N#define PORT_D1RGB7_AS_NF_DATA1            3
N#define PORT_D1RGB7_AS_DSU_TRACED12        4
N
N#define PORT_D1RGB8_AS_GPIO                0
N#define PORT_D1RGB8_AS_D1RGB8              1
N#define PORT_D1RGB8_AS_EBIF_AD03           2
N#define PORT_D1RGB8_AS_EBIF_AEX2           3
N#define PORT_D1RGB8_AS_NFDATA2             4
N#define PORT_D1RGB8_AS_HSPWM2              5
N#define PORT_D1RGB8_AS_DSU_TRACED00        6
N
N#define PORT_D1RGB9_AS_GPIO                0
N#define PORT_D1RGB9_AS_D1RGB9              1
N#define PORT_D1RGB9_AS_EBIF_AD04           2
N#define PORT_D1RGB9_AS_EBIF_AEX3           3
N#define PORT_D1RGB9_AS_NF_DATA3            4
N#define PORT_D1RGB9_AS_PWMOUT12            5
N#define PORT_D1RGB9_AS_HSPWM2N             6
N#define PORT_D1RGB9_AS_DSU_TRACED03        7
N
N#define PORT_D1RGB10_AS_GPIO               0
N#define PORT_D1RGB10_AS_D1RGB10            1
N#define PORT_D1RGB10_AS_EBIF_AD05          2
N#define PORT_D1RGB10_AS_NF_DATA4           3
N#define PORT_D1RGB10_AS_DSU_TRACED06       4
N
N#define PORT_D1RGB11_AS_GPIO               0
N#define PORT_D1RGB11_AS_D1RGB11            1
N#define PORT_D1RGB11_AS_EBIF_AD06          2
N#define PORT_D1RGB11_AS_NF_DATA5           3
N#define PORT_D1RGB11_AS_DSU_TRACED15       4
N
N#define PORT_D1RGB12_AS_GPIO               0
N#define PORT_D1RGB12_AS_D1RGB12            1
N#define PORT_D1RGB12_AS_EBIF_AD07          2
N#define PORT_D1RGB12_AS_NF_DATA6           3
N
N#define PORT_D1RGB13_AS_GPIO               0
N#define PORT_D1RGB13_AS_D1RGB13            1
N#define PORT_D1RGB13_AS_EBIF_AD08          2
N#define PORT_D1RGB13_AS_NF_DATA7           3
N
N#define PORT_D1RGB14_AS_GPIO               0
N#define PORT_D1RGB14_AS_D1RGB14            1
N#define PORT_D1RGB14_AS_EBIF_AD09          2
N#define PORT_D1RGB14_AS_NF_DATA8           3
N#define PORT_D1RGB14_AS_DSU_TRACED10       4
N
N#define PORT_D1RGB15_AS_GPIO               0
N#define PORT_D1RGB15_AS_D1RGB15            1
N#define PORT_D1RGB15_AS_EBIF_AD10          2
N#define PORT_D1RGB15_AS_NF_DATA9           3
N#define PORT_D1RGB15_AS_DSU_TRACED13       4
N
N#define PORT_D1RGB16_AS_GPIO               0
N#define PORT_D1RGB16_AS_D1RGB16            1
N#define PORT_D1RGB16_AS_EBIF_AD11          2
N#define PORT_D1RGB16_AS_EBIF_AEX4          3
N#define PORT_D1RGB16_AS_NF_DATA10          4
N#define PORT_D1RGB16_AS_HSPWM3             5
N#define PORT_D1RGB16_AS_DSU_TRACED01       6
N
N#define PORT_D1RGB17_AS_GPIO               0
N#define PORT_D1RGB17_AS_D1RGB17            1
N#define PORT_D1RGB17_AS_EBIF_AD12          2
N#define PORT_D1RGB17_AS_EBIF_AEX5          3
N#define PORT_D1RGB17_AS_NF_DATA11          4
N#define PORT_D1RGB17_AS_PWMOUT13           5
N#define PORT_D1RGB17_AS_HSPWM3N            6
N#define PORT_D1RGB17_AS_DSU_TRACETL        7
N
N#define PORT_D1RGB18_AS_GPIO               0
N#define PORT_D1RGB18_AS_D1RGB18            1
N#define PORT_D1RGB18_AS_EBIF_AD13          2
N#define PORT_D1RGB18_AS_NF_DATA12          3
N#define PORT_D1RGB18_AS_DSU_TRACED07       4
N
N#define PORT_D1RGB19_AS_GPIO               0
N#define PORT_D1RGB19_AS_D1RGB19            1
N#define PORT_D1RGB19_AS_EBIF_AD14          2
N#define PORT_D1RGB19_AS_NF_DATA13          3
N#define PORT_D1RGB19_AS_DSU_TRACED04       4
N
N#define PORT_D1RGB20_AS_GPIO               0
N#define PORT_D1RGB20_AS_D1RGB20            1
N#define PORT_D1RGB20_AS_EBIF_AD15          2
N#define PORT_D1RGB20_AS_NF_DATA14          3
N
N#define PORT_D1RGB21_AS_GPIO               0
N#define PORT_D1RGB21_AS_D1RGB21            1
N#define PORT_D1RGB21_AS_EBIF_AEX0          2
N#define PORT_D1RGB21_AS_NF_DATA15          3
N
N#define PORT_D1RGB22_AS_GPIO               0
N#define PORT_D1RGB22_AS_D1RGB22            1
N#define PORT_D1RGB22_AS_EBIF_AEX1          2
N#define PORT_D1RGB22_AS_NF_CSN2            3
N
N#define PORT_D1RGB23_AS_GPIO               0
N#define PORT_D1RGB23_AS_D1RGB23            1
N#define PORT_D1RGB23_AS_EBIF_AEX2          2
N
N#define PORT_CMCBCR0_AS_CMCBCR0            0
N#define PORT_CMCBCR0_AS_EBIF_AD08          1
N#define PORT_CMCBCR0_AS_PWMOUT01           2
N#define PORT_CMCBCR0_AS_GPIO               3
N
N#define PORT_CMCBCR1_AS_CMCBCR1            0
N#define PORT_CMCBCR1_AS_EBIF_AD09          1
N#define PORT_CMCBCR1_AS_NF_CSN2            2
N#define PORT_CMCBCR1_AS_PWMOUT02           3
N#define PORT_CMCBCR1_AS_GPIO               4
N
N#define PORT_CMCBCR2_AS_CMCBCR2            0
N#define PORT_CMCBCR2_AS_EBIF_AD10          1
N#define PORT_CMCBCR2_AS_NF_BUSYN           2
N#define PORT_CMCBCR2_AS_PWMOUT03           3
N#define PORT_CMCBCR2_AS_GPIO               4
N
N#define PORT_CMCBCR3_AS_CMCBCR3            0
N#define PORT_CMCBCR3_AS_EBIF_AD11          1
N#define PORT_CMCBCR3_AS_NF_CSN             2
N#define PORT_CMCBCR3_AS_PWMOUT04           3
N#define PORT_CMCBCR3_AS_GPIO               4
N
N#define PORT_CMCBCR4_AS_CMCBCR4            0
N#define PORT_CMCBCR4_AS_EBIF_AD12          1
N#define PORT_CMCBCR4_AS_NF_ALE             2
N#define PORT_CMCBCR4_AS_PWMOUT05           3
N#define PORT_CMCBCR4_AS_GPIO               4
N
N#define PORT_CMCBCR5_AS_CMCBR5             0
N#define PORT_CMCBCR5_AS_EBIF_AD13          1
N#define PORT_CMCBCR5_AS_NF_CLE             2
N#define PORT_CMCBCR5_AS_PWMOUT06           3
N#define PORT_CMCBCR5_AS_GPIO               4
N
N#define PORT_CMCBCR6_AS_CMCBCR6            0
N#define PORT_CMCBCR6_AS_EBIF_AD14          1
N#define PORT_CMCBCR6_AS_NF_WE              2
N#define PORT_CMCBCR6_AS_PWMOUT07           3
N#define PORT_CMCBCR6_AS_GPIO               4
N
N#define PORT_CMCBCR7_AS_CMCBCR7            0
N#define PORT_CMCBCR7_AS_EBIF_AD15          1
N#define PORT_CMCBCR7_AS_NF_RE              2
N#define PORT_CMCBCR7_AS_PWMOUT08           3
N#define PORT_CMCBCR7_AS_GPIO               4
N
N#define PORT_CMCLK_AS_CMCLK                0
N#define PORT_CMCLK_AS_EBIF_ALE             1
N#define PORT_CMCLK_AS_PWMOUT09             2
N#define PORT_CMCLK_AS_GPIO                 3
N
N#define PORT_CMFOOD_AS_CMFOOD              0
N#define PORT_CMFOOD_AS_EBIF_CS0            1
N#define PORT_CMFOOD_AS_PWMOUT10            2
N#define PORT_CMFOOD_AS_GPIO                3
N
N#define PORT_CMHDISP_AS_CMHDISP            0
N#define PORT_CMHDISP_AS_RESERVED           1
N#define PORT_CMHDISP_AS_PWMOUT11           2
N#define PORT_CMHDISP_AS_GPIO               3
N
N#define PORT_CMHSYNC_AS_CMHSYNC            0
N#define PORT_CMHSYNC_AS_EBIF_OE            1
N#define PORT_CMHSYNC_AS_PWMOUT12           2
N#define PORT_CMHSYNC_AS_GPIO               3
N
N#define PORT_CMVSYNC_AS_CMVSYNC            0
N#define PORT_CMVSYNC_AS_EBIF_WE            1
N#define PORT_CMVSYNC_AS_PWMOUT13           2
N#define PORT_CMVSYNC_AS_GPIO               3
N
N#define PORT_CMY0_AS_CMY0                  0
N#define PORT_CMY0_AS_EBIF_AEX0             1
N#define PORT_CMY0_AS_NF_DATA8              2
N#define PORT_CMY0_AS_PWMOUT14              3
N#define PORT_CMY0_AS_GPIO                  4
N
N#define PORT_CMY1_AS_CMY1                  0
N#define PORT_CMY1_AS_EBIF_AEX1             1
N#define PORT_CMY1_AS_NF_DATA9              2
N#define PORT_CMY1_AS_PWMOUT15              3
N#define PORT_CMY1_AS_GPIO                  4
N
N#define PORT_CMY2_AS_CMY2                  0
N#define PORT_CMY2_AS_EBIF_AEX2             1
N#define PORT_CMY2_AS_NF_DATA10             2
N#define PORT_CMY2_AS_PWMOUT16              3
N#define PORT_CMY2_AS_GPIO                  4
N
N#define PORT_CMY3_AS_CMY3                  0
N#define PORT_CMY3_AS_EBIF_AEX3             1
N#define PORT_CMY3_AS_NF_DATA11             2
N#define PORT_CMY3_AS_PWMOUT17              3
N#define PORT_CMY3_AS_GPIO                  4
N
N#define PORT_CMY4_AS_CMY4                  0
N#define PORT_CMY4_AS_EBIF_AEX4             1
N#define PORT_CMY4_AS_NF_DATA12             2
N#define PORT_CMY4_AS_PWMOUT18              3
N#define PORT_CMY4_AS_GPIO                  4
N
N#define PORT_CMY5_AS_CMY5                  0
N#define PORT_CMY5_AS_EBIF_AEX5             1
N#define PORT_CMY5_AS_NF_DATA13             2
N#define PORT_CMY5_AS_PWMOUT19              3
N#define PORT_CMY5_AS_GPIO                  4
N
N#define PORT_CMY6_AS_CMY6                  0
N#define PORT_CMY6_AS_EBIF_CS1              1
N#define PORT_CMY6_AS_NF_DATA14             2
N#define PORT_CMY6_AS_DMA_REQ               3
N#define PORT_CMY6_AS_PWMOUT20              4
N#define PORT_CMY6_AS_GPIO                  5
N
N#define PORT_CMY7_AS_CMY7                  0
N#define PORT_CMY7_AS_NF_DATA15             1
N#define PORT_CMY7_AS_DMA_ACK               2
N#define PORT_CMY7_AS_PWMOUT21              3
N#define PORT_CMY7_AS_GPIO                  4
N
N#define PORT_CMRGB0_AS_CMRGB0              0
N#define PORT_CMRGB0_AS_EBIF_AD00           1
N#define PORT_CMRGB0_AS_EBIF_AD00S          2
N#define PORT_CMRGB0_AS_NF_DATA0            3
N#define PORT_CMRGB0_AS_NF_DATA0S           4
N#define PORT_CMRGB0_AS_IRQ2                5
N#define PORT_CMRGB0_AS_ESEI1MISO           6
N#define PORT_CMRGB0_AS_GPIO                7
N
N#define PORT_CMRGB1_AS_CMRGB1              0
N#define PORT_CMRGB1_AS_EBIF_AD01           1
N#define PORT_CMRGB1_AS_EBIF_AD01S          2
N#define PORT_CMRGB1_AS_NF_DATA1            3
N#define PORT_CMRGB1_AS_NF_DATA1S           4
N#define PORT_CMRGB1_AS_IRQ3                5
N#define PORT_CMRGB1_AS_ESEI1MOSI           6
N#define PORT_CMRGB1_AS_GPIO                7
N
N#define PORT_CMRGB2_AS_CMRGB2              0
N#define PORT_CMRGB2_AS_EBIF_AD02           1
N#define PORT_CMRGB2_AS_EBIF_AD02S          2
N#define PORT_CMRGB2_AS_NF_DATA2            3
N#define PORT_CMRGB2_AS_NF_DATA2S           4
N#define PORT_CMRGB2_AS_IRQ4                5
N#define PORT_CMRGB2_AS_ESEI1SCLK           6
N#define PORT_CMRGB2_AS_GPIO                7
N
N#define PORT_CMRGB3_AS_CMRGB3              0
N#define PORT_CMRGB3_AS_EBIF_AD03           1
N#define PORT_CMRGB3_AS_EBIF_AD03S          2
N#define PORT_CMRGB3_AS_NF_DATA3            3
N#define PORT_CMRGB3_AS_NF_DATA3S           4
N#define PORT_CMRGB3_AS_IRQ5                5
N#define PORT_CMRGB3_AS_ESEI1SSOI           6
N#define PORT_CMRGB3_AS_GPIO                7
N
N#define PORT_CMRGB4_AS_CMRGB4              0
N#define PORT_CMRGB4_AS_EBIF_AD04           1
N#define PORT_CMRGB4_AS_EBIF_AD04S          2
N#define PORT_CMRGB4_AS_NF_DATA4            3
N#define PORT_CMRGB4_AS_NF_DATA4S           4
N#define PORT_CMRGB4_AS_IRQ0                5
N#define PORT_CMRGB4_AS_UART1RX             6
N#define PORT_CMRGB4_AS_GPIO                7
N
N#define PORT_CMRGB5_AS_CMRGB5              0
N#define PORT_CMRGB5_AS_EBIF_AD05           1
N#define PORT_CMRGB5_AS_EBIF_AD05S          2
N#define PORT_CMRGB5_AS_NF_DATA5            3
N#define PORT_CMRGB5_AS_NF_DATA5S           4
N#define PORT_CMRGB5_AS_IRQ1                5
N#define PORT_CMRGB5_AS_UART1TX             6
N#define PORT_CMRGB5_AS_GPIO                7
N
N#define PORT_CMRGB6_AS_CMRGB6              0
N#define PORT_CMRGB6_AS_EBIF_AD06           1
N#define PORT_CMRGB6_AS_EBIF_AD06S          2
N#define PORT_CMRGB6_AS_NF_DATA6            3
N#define PORT_CMRGB6_AS_NF_DATA6S           4
N#define PORT_CMRGB6_AS_CANRX2              5
N#define PORT_CMRGB6_AS_PWMOUT22            6
N#define PORT_CMRGB6_AS_GPIO                7
N
N#define PORT_CMRGB7_AS_CMRGB7              0
N#define PORT_CMRGB7_AS_EBIF_AD07           1
N#define PORT_CMRGB7_AS_EBIF_AD07S          2
N#define PORT_CMRGB7_AS_NF_DATA7            3
N#define PORT_CMRGB7_AS_NF_DATA7S           4
N#define PORT_CMRGB7_AS_CANTX2              5
N#define PORT_CMRGB7_AS_PWMOUT23            6
N#define PORT_CMRGB7_AS_GPIO                7
N
N#define PORT_I2CCLK_AS_GPIO                0
N#define PORT_I2CCLK_AS_DOTCLKIN            1
N#define PORT_I2CCLK_AS_UART1RX             2
N#define PORT_I2CCLK_AS_I2CCLK              3
N
N#define PORT_I2CDATA_AS_GPIO               0
N#define PORT_I2CDATA_AS_UART1TX            1
N#define PORT_I2CDATA_AS_I2CDATA            2
N
N#define PORT_CANRX0_AS_GPIO                0
N#define PORT_CANRX0_AS_DMA_REQ             1
N#define PORT_CANRX0_AS_CANRX0              2
N#define PORT_CANRX0_AS_HSPWM2              3
N
N#define PORT_CANTX0_AS_GPIO                0
N#define PORT_CANTX0_AS_DMA_ACK             1
N#define PORT_CANTX0_AS_CANTX0              2
N#define PORT_CANTX0_AS_HSPWM2N             3
N
N#define PORT_CANRX1_AS_GPIO                0
N#define PORT_CANRX1_AS_UART0RX             1
N#define PORT_CANRX1_AS_CANRX1              2
N#define PORT_CANRX1_AS_PWMOUT17            3
N
N#define PORT_CANTX1_AS_GPIO                0
N#define PORT_CANTX1_AS_UART0TX             1
N#define PORT_CANTX1_AS_CANTX1              2
N#define PORT_CANTX1_AS_PWMOUT18            3
N
N#define PORT_ESEI0MISO_AS_GPIO             0
N#define PORT_ESEI0MISO_AS_ESEI0MISO        1
N#define PORT_ESEI0MISO_AS_TBIO2            2
N
N#define PORT_ESEI0MOSI_AS_GPIO             0
N#define PORT_ESEI0MOSI_AS_ESEI0MOSI        1
N#define PORT_ESEI0MOSI_AS_TBIO3            2
N
N#define PORT_ESEI0SCLK_AS_GPIO             0
N#define PORT_ESEI0SCLK_AS_IRQ0             1
N#define PORT_ESEI0SCLK_AS_ESEI0CLK         2
N#define PORT_ESEI0SCLK_AS_TBIO8            3
N
N#define PORT_ESEI0SSOI_AS_GPIO             0
N#define PORT_ESEI0SSOI_AS_IRQ1             1
N#define PORT_ESEI0SSOI_AS_ESEI0SSOI        2
N#define PORT_ESEI0SSOI_AS_PWMOUT19         3
N#define PORT_ESEI0SSOI_AS_TBIO9            4
N
N#define PORT_I2S0CLK_AS_GPIO               0
N#define PORT_I2S0CLK_AS_IRQ2               1
N#define PORT_I2S0CLK_AS_I2S0CLK            2
N#define PORT_I2S0CLK_AS_ESEI1MISO          3
N#define PORT_I2S0CLK_AS_PWMOUT20           4
N#define PORT_I2S0CLK_AS_TBIO0              5
N
N#define PORT_I2S0WS_AS_GPIO                0
N#define PORT_I2S0WS_AS_IRQ3                1
N#define PORT_I2S0WS_AS_I2S0WS              2
N#define PORT_I2S0WS_AS_ESEI1MOSI           3
N#define PORT_I2S0WS_AS_PWMOUT21            4
N#define PORT_I2S0WS_AS_TBIO1               5
N
N#define PORT_I2S0SD_AS_GPIO                0
N#define PORT_I2S0SD_AS_IRQ4                1
N#define PORT_I2S0SD_AS_I2S0SD              2
N#define PORT_I2S0SD_AS_ESEI1SCLK           3
N#define PORT_I2S0SD_AS_PWMOUT22            4
N#define PORT_I2S0SD_AS_TBIO6               5
N
N#define PORT_I2SMCLK_AS_GPIO               0
N#define PORT_I2SMCLK_AS_I2SMCLK            1
N#define PORT_I2SMCLK_AS_ESEI1SSOI          2
N#define PORT_I2SMCLK_AS_PWMOUT23           3
N#define PORT_I2SMCLK_AS_TBIO7              4
N
N#define PORT_PWMOUT00_AS_GPIO              0
N#define PORT_PWMOUT00_AS_PWMOUT0           1
N
N#define PORT_HSPWM0_AS_GPIO                0
N#define PORT_HSPWM0_AS_GDC0PWM             1
N#define PORT_HSPWM0_AS_IRQ2                2
N#define PORT_HSPWM0_AS_PWMOUT01            3
N#define PORT_HSPWM0_AS_HSPWM0              4
N
N#define PORT_HSPWM0N_AS_GPIO               0
N#define PORT_HSPWM0N_AS_I2S1CLK            1
N#define PORT_HSPWM0N_AS_PWMOUT02           2
N#define PORT_HSPWM0N_AS_HSPWM0N            3
N
N#define PORT_HSPWM1_AS_GPIO                0
N#define PORT_HSPWM1_AS_GDC1PWM             1
N#define PORT_HSPWM1_AS_I2S1WS              2
N#define PORT_HSPWM1_AS_CANRX2              3
N#define PORT_HSPWM1_AS_PWMOUT03            4
N#define PORT_HSPWM1_AS_HSPWM1              5
N
N#define PORT_HSPWM1N_AS_GPIO               0
N#define PORT_HSPWM1N_AS_I2S1SD             1
N#define PORT_HSPWM1N_AS_CANTX2             2
N#define PORT_HSPWM1N_AS_PWMOUT04           3
N#define PORT_HSPWM1N_AS_HSPWM1N            4
N
N#define PORT_UART0RX_AS_GPIO               0
N#define PORT_UART0RX_AS_UART0RX            1
N#define PORT_UART0RX_AS_PWMOUT05           2
N
N#define PORT_UART0TX_AS_GPIO               0
N#define PORT_UART0TX_AS_UART0TX            1
N#define PORT_UART0TX_AS_PWMOUT06           2
N
N#define PORT_ADC_IN0_AS_ADC_IN0            0
N#define PORT_ADC_IN0_AS_IRQ1               1
N#define PORT_ADC_IN0_AS_GPIO               2
N
N#define PORT_ADC_IN1_AS_ADC_IN1            0
N#define PORT_ADC_IN1_AS_IRQ0               1
N#define PORT_ADC_IN1_AS_GPIO               2
N
N#define PORT_ADC_IN2_AS_ADC_IN2            0
N#define PORT_ADC_IN2_AS_IRQ5               1
N#define PORT_ADC_IN2_AS_GPIO               2
N
N#define PORT_ADC_IN3_AS_ADC_IN3            0
N#define PORT_ADC_IN3_AS_IRQ4               1
N#define PORT_ADC_IN3_AS_GPIO               2
N
N#define PORT_ADC_IN4_AS_ADC_IN4            0
N#define PORT_ADC_IN4_AS_IRQ3               1
N#define PORT_ADC_IN4_AS_GPIO               2
N
N#define PORT_ADC_IN5_AS_ADC_IN5            0
N#define PORT_ADC_IN5_AS_IRQ2               1
N#define PORT_ADC_IN5_AS_GPIO               2
N                                    
N#define PORT_ADC_IN6_AS_ADC_IN6            0
N#define PORT_ADC_IN6_AS_IRQ1               1
N#define PORT_ADC_IN6_AS_GPIO               2
N                                    
N#define PORT_ADC_IN7_AS_ADC_IN7            0
N#define PORT_ADC_IN7_AS_IRQ0               1
N#define PORT_ADC_IN7_AS_GPIO               2
N
N#define PORT_SC0_C0_LEFT_AS_SC0_C0_LEFT    0
N#define PORT_SC0_C0_LEFT_AS_PWMOUT11       1
N#define PORT_SC0_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC0_C0_RIGHT_AS_SC0_C0_RIGHT  0
N#define PORT_SC0_C0_RIGHT_AS_PWMOUT10      1
N#define PORT_SC0_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC0_C1_LEFT_AS_SC0_C1_LEFT    0
N#define PORT_SC0_C1_LEFT_AS_PWMOUT09       1
N#define PORT_SC0_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC0_C1_RIGHT_AS_SC0_C1_RIGHT  0
N#define PORT_SC0_C1_RIGHT_AS_PWMOUT08      1
N#define PORT_SC0_C1_RIGHT_AS_GPIO          2
N
N#define PORT_SC1_C0_LEFT_AS_SC1_C0_LEFT    0
N#define PORT_SC1_C0_LEFT_AS_PWMOUT07       1
N#define PORT_SC1_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC1_C0_RIGHT_AS_SC1_C0_RIGHT  0
N#define PORT_SC1_C0_RIGHT_AS_PWMOUT06      1
N#define PORT_SC1_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC1_C1_LEFT_AS_SC1_C1_LEFT    0
N#define PORT_SC1_C1_LEFT_AS_PWMOUT05       1
N#define PORT_SC1_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC1_C1_RIGHT_AS_SC1_C1_RIGHT  0
N#define PORT_SC1_C1_RIGHT_AS_PWMOUT04      1
N#define PORT_SC1_C1_RIGHT_AS_GPIO          2
N
N#define PORT_SC2_C0_LEFT_AS_SC2_C0_LEFT    0
N#define PORT_SC2_C0_LEFT_AS_PWMOUT03       1
N#define PORT_SC2_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC2_C0_RIGHT_AS_SC2_C0_RIGHT  0
N#define PORT_SC2_C0_RIGHT_AS_PWMOUT02      1
N#define PORT_SC2_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC2_C1_LEFT_AS_SC2_C1_LEFT    0
N#define PORT_SC2_C1_LEFT_AS_IRQ5           1
N#define PORT_SC2_C1_LEFT_AS_PWMOUT01       2
N#define PORT_SC2_C1_LEFT_AS_GPIO           3
N
N#define PORT_SC2_C1_RIGHT_AS_SC2_C1_RIGHT  0
N#define PORT_SC2_C1_RIGHT_AS_IRQ4          1
N#define PORT_SC2_C1_RIGHT_AS_PWMOUT00      2
N#define PORT_SC2_C1_RIGHT_AS_GPIO          3
N
N#define PORT_SC3_C0_LEFT_AS_SC3_C0_LEFT    0
N#define PORT_SC3_C0_LEFT_AS_IRQ3           1
N#define PORT_SC3_C0_LEFT_AS_PWMOUT23       2
N#define PORT_SC3_C0_LEFT_AS_TBIO2          3
N#define PORT_SC3_C0_LEFT_AS_GPIO           4
N
N#define PORT_SC3_C0_RIGHT_AS_SC3_C0_RIGHT  0
N#define PORT_SC3_C0_RIGHT_AS_IRQ2          1
N#define PORT_SC3_C0_RIGHT_AS_PWMOUT22      2
N#define PORT_SC3_C0_RIGHT_AS_TBIO3         3
N#define PORT_SC3_C0_RIGHT_AS_GPIO          4
N
N#define PORT_SC3_C1_LEFT_AS_SC3_C1_LEFT    0
N#define PORT_SC3_C1_LEFT_AS_IRQ1           1
N#define PORT_SC3_C1_LEFT_AS_PWMOUT21       2
N#define PORT_SC3_C1_LEFT_AS_TBIO8          3
N#define PORT_SC3_C1_LEFT_AS_GPIO           4
N
N#define PORT_SC3_C1_RIGHT_AS_SC3_C1_RIGHT  0
N#define PORT_SC3_C1_RIGHT_AS_IRQ0          1
N#define PORT_SC3_C1_RIGHT_AS_PWMOUT20      2
N#define PORT_SC3_C1_RIGHT_AS_TBIO9         3
N#define PORT_SC3_C1_RIGHT_AS_GPIO          4
N
N#define PORT_SC4_C0_LEFT_AS_SC4_C0_LEFT    0
N#define PORT_SC4_C0_LEFT_AS_PWMOUT19       1
N#define PORT_SC4_C0_LEFT_AS_GPIO           2
N
N#define PORT_SC4_C0_RIGHT_AS_SC4_C0_RIGHT  0
N#define PORT_SC4_C0_RIGHT_AS_PWMOUT18      1
N#define PORT_SC4_C0_RIGHT_AS_GPIO          2
N
N#define PORT_SC4_C1_LEFT_AS_SC4_C1_LEFT    0
N#define PORT_SC4_C1_LEFT_AS_PWMOUT17       1
N#define PORT_SC4_C1_LEFT_AS_GPIO           2
N
N#define PORT_SC4_C1_RIGHT_AS_SC4_C1_RIGHT  0
N#define PORT_SC4_C1_RIGHT_AS_PWMOUT16      1
N#define PORT_SC4_C1_RIGHT_AS_GPIO          2
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/* List of all pins */
Ntypedef enum tag_portpin_e
N{
N    PORT_DDR_DQ0 = 0,
N    PORT_DDR_DQ1,
N    PORT_DDR_DQ2,
N    PORT_DDR_DQ3,
N    PORT_DDR_DQ4,
N    PORT_DDR_DQ5,
N    PORT_DDR_DQ6,
N    PORT_DDR_DQ7,
N    PORT_DDR_DQ8,
N    PORT_DDR_DQ9,
N    PORT_DDR_DQ10,
N    PORT_DDR_DQ11,
N    PORT_DDR_DQ12,
N    PORT_DDR_DQ13,
N    PORT_DDR_DQ14,
N    PORT_DDR_DQ15,
N    PORT_DDR_DM0,
N    PORT_DDR_DM1,
N    PORT_DDR_WE,
N    PORT_DDR_RAS,
N    PORT_DDR_CAS,
N    PORT_DDR_CS,
N    PORT_DDR_CKE,
N    PORT_DDR_CK,
N    PORT_DDR_CKN,
N    PORT_DDR_BA0,
N    PORT_DDR_BA1,
N    PORT_DDR_A0,
N    PORT_DDR_A1,
N    PORT_DDR_A2,
N    PORT_DDR_A3,
N    PORT_DDR_A4,
N    PORT_DDR_A5,
N    PORT_DDR_A6,
N    PORT_DDR_A7,
N    PORT_DDR_A8,
N    PORT_DDR_A9,
N    PORT_DDR_A10,
N    PORT_DDR_A11,
N    PORT_DDR_A12,
N    PORT_DDR_A13,
N    PORT_DDR_DQS0,
N    PORT_DDR_DQS1,
N    PORT_DUMMY_0,
N    PORT_DUMMY_1,
N    PORT_DUMMY_2,
N    PORT_DUMMY_3,
N    PORT_DUMMY_4,
N    PORT_DDR_DQS2,
N    PORT_DDR_DQS3,
N    PORT_DDR_DM2,
N    PORT_DDR_DM3,
N    PORT_DDR_DQ16,
N    PORT_DDR_DQ17,
N    PORT_DDR_DQ18,
N    PORT_DDR_DQ19,
N    PORT_DDR_DQ20,
N    PORT_DDR_DQ21,
N    PORT_DDR_DQ22,
N    PORT_DDR_DQ23,
N    PORT_DDR_DQ24,
N    PORT_DDR_DQ25,
N    PORT_DDR_DQ26,
N    PORT_DDR_DQ27,
N    PORT_DDR_DQ28,
N    PORT_DDR_DQ29,
N    PORT_DDR_DQ30,
N    PORT_DDR_DQ31,
N    PORT_DUMMY_5,
N    PORT_DUMMY_6,
N    PORT_DUMMY_7,
N    PORT_DUMMY_8,
N    PORT_DUMMY_9,
N    PORT_DUMMY_10,
N    PORT_DUMMY_11,
N    PORT_DUMMY_12,
N    PORT_DUMMY_13,
N    PORT_DUMMY_14,
N    PORT_DUMMY_15,
N    PORT_DUMMY_16,
N    PORT_QSPI0_SIO0,
N    PORT_QSPI0_SIO1,
N    PORT_QSPI0_SIO2,
N    PORT_QSPI0_SIO3,
N    PORT_QSPI0_CS0,
N    PORT_QSPI0_SCLK,
N    PORT_DUMMY_17,
N    PORT_DUMMY_18,
N    PORT_DUMMY_19,
N    PORT_DUMMY_20,
N    PORT_DUMMY_21,
N    PORT_DUMMY_22,
N    PORT_DUMMY_23,
N    PORT_DUMMY_24,
N    PORT_DUMMY_25,
N    PORT_DUMMY_26,
N    PORT_D0HDISP,
N    PORT_D0HSYNC,
N    PORT_D0VSYNC,
N    PORT_D0DOTCLK,
N    PORT_D0RGB0,
N    PORT_D0RGB1,
N    PORT_D0RGB2,
N    PORT_D0RGB3,
N    PORT_D0RGB4,
N    PORT_D0RGB5,
N    PORT_D0RGB6,
N    PORT_D0RGB7,
N    PORT_D0RGB8,
N    PORT_D0RGB9,
N    PORT_D0RGB10,
N    PORT_D0RGB11,
N    PORT_D0RGB12,
N    PORT_D0RGB13,
N    PORT_D0RGB14,
N    PORT_D0RGB15,
N    PORT_D0RGB16,
N    PORT_D0RGB17,
N    PORT_D0RGB18,
N    PORT_D0RGB19,
N    PORT_D0RGB20,
N    PORT_D0RGB21,
N    PORT_D0RGB22,
N    PORT_D0RGB23,
N    PORT_DUMMY_27,
N    PORT_DUMMY_28,
N    PORT_DUMMY_29,
N    PORT_DUMMY_30,
N    PORT_DUMMY_31,
N    PORT_DUMMY_32,
N    PORT_DUMMY_33,
N    PORT_DUMMY_34,
N    PORT_DUMMY_35,
N    PORT_DUMMY_36,
N    PORT_DUMMY_37,
N    PORT_DUMMY_38,
N    PORT_DOTCLKIN,
N    PORT_DUMMY_39,
N    PORT_PNLGPP0,
N    PORT_PNLGPP1,
N    PORT_PNLGPP2,
N    PORT_PNLGPP3,
N    PORT_PNLGPP4,
N    PORT_PNLGPP5,
N    PORT_PNLGPP6,
N    PORT_PNLGPP7,
N    PORT_DUMMY_40,
N    PORT_DUMMY_41,
N    PORT_DUMMY_42,
N    PORT_DUMMY_43,
N    PORT_DUMMY_44,
N    PORT_DUMMY_45,
N    PORT_D1HDISP,
N    PORT_D1HSYNC,
N    PORT_D1VSYNC,
N    PORT_D1DOTCLK,
N    PORT_D1RGB0,
N    PORT_D1RGB1,
N    PORT_D1RGB2,
N    PORT_D1RGB3,
N    PORT_D1RGB4,
N    PORT_D1RGB5,
N    PORT_D1RGB6,
N    PORT_D1RGB7,
N    PORT_D1RGB8,
N    PORT_D1RGB9,
N    PORT_D1RGB10,
N    PORT_D1RGB11,
N    PORT_D1RGB12,
N    PORT_D1RGB13,
N    PORT_D1RGB14,
N    PORT_D1RGB15,
N    PORT_D1RGB16,
N    PORT_D1RGB17,
N    PORT_D1RGB18,
N    PORT_D1RGB19,
N    PORT_D1RGB20,
N    PORT_D1RGB21,
N    PORT_D1RGB22,
N    PORT_D1RGB23,
N    PORT_DUMMY_46,
N    PORT_DUMMY_47,
N    PORT_DUMMY_48,
N    PORT_DUMMY_49,
N    PORT_DUMMY_50,
N    PORT_DUMMY_51,
N    PORT_DUMMY_52,
N    PORT_DUMMY_53,
N    PORT_DUMMY_54,
N    PORT_DUMMY_55,
N    PORT_DUMMY_56,
N    PORT_DUMMY_57,
N    PORT_CMCBCR0,
N    PORT_CMCBCR1,
N    PORT_CMCBCR2,
N    PORT_CMCBCR3,
N    PORT_CMCBCR4,
N    PORT_CMCBCR5,
N    PORT_CMCBCR6,
N    PORT_CMCBCR7,
N    PORT_CMCLK,
N    PORT_DUMMY_58,
N    PORT_CMFOOD,
N    PORT_CMHDISP,
N    PORT_CMHSYNC,
N    PORT_CMVSYNC,
N    PORT_CMY0,        
N    PORT_CMY1,        
N    PORT_CMY2,        
N    PORT_CMY3,        
N    PORT_CMY4,        
N    PORT_CMY5,        
N    PORT_CMY6,        
N    PORT_CMY7,        
N    PORT_CMRGB0,        
N    PORT_CMRGB1,        
N    PORT_CMRGB2,        
N    PORT_CMRGB3,        
N    PORT_CMRGB4,        
N    PORT_CMRGB5,        
N    PORT_CMRGB6,        
N    PORT_CMRGB7,        
N    PORT_DUMMY_59,
N    PORT_DUMMY_60,
N    PORT_DUMMY_61,
N    PORT_DUMMY_62,
N    PORT_DUMMY_63,
N    PORT_DUMMY_64,
N    PORT_DUMMY_65,
N    PORT_DUMMY_66,
N    PORT_DUMMY_67,
N    PORT_DUMMY_68,
N    PORT_DUMMY_69,
N    PORT_DUMMY_70,
N    PORT_DUMMY_71,
N    PORT_DUMMY_72,
N    PORT_DUMMY_73,
N    PORT_DUMMY_74,
N    PORT_DUMMY_75,
N    PORT_DUMMY_76,
N    PORT_I2CCLK,
N    PORT_I2CDATA,
N    PORT_CANRX0,
N    PORT_CANTX0,
N    PORT_CANRX1,
N    PORT_CANTX1,
N    PORT_MLBDAT_IO,
N    PORT_MLBSIG_IO,
N    PORT_MLBCLK,
N    PORT_DUMMY_77,
N    PORT_ESEI0MISO,
N    PORT_ESEI0MOSI,
N    PORT_ESEI0SCLK,
N    PORT_ESEI0SSOI,
N    PORT_I2S0CLK,
N    PORT_I2S0WS,
N    PORT_I2S0SD,
N    PORT_I2SMCLK,
N    PORT_PWMOUT00,
N    PORT_DUMMY_78,
N    PORT_HSPWM0,
N    PORT_HSPWM0N,
N    PORT_HSPWM1,
N    PORT_HSPWM1N,
N    PORT_UART0RX,
N    PORT_UART0TX,
N    PORT_DUMMY_79,
N    PORT_DUMMY_80,
N    PORT_DUMMY_81,
N    PORT_DUMMY_82,
N    PORT_DUMMY_83,
N    PORT_DUMMY_84,
N    PORT_SIP_QSPI_SIO0,
N    PORT_SIP_QSPI_SIO1,
N    PORT_SIP_QSPI_SIO2,
N    PORT_SIP_QSPI_SIO3,
N    PORT_SIP_QSPI_CS,
N    PORT_SIP_QSPI_SCLK,
N    PORT_DUMMY_85,
N    PORT_DUMMY_86,
N    PORT_NMI,
N    PORT_RESETN,
N    PORT_DSU_JTAG_SEL,
N    PORT_DSU_GTCK,
N    PORT_DSU_GTDI,
N    PORT_DSU_GTMS,
N    PORT_DSU_GTRST,
N    PORT_DSU_TPC0_GTDO,
N    PORT_DUMMY_87,
N    PORT_DUMMY_88,
N    PORT_DUMMY_89,
N    PORT_DUMMY_90,
N    PORT_DUMMY_91,
N    PORT_DUMMY_92,
N    PORT_DUMMY_93,
N    PORT_DUMMY_94,
N    PORT_ADC_IN0,
N    PORT_ADC_IN1,
N    PORT_ADC_IN2,
N    PORT_ADC_IN3,
N    PORT_ADC_IN4,
N    PORT_ADC_IN5,
N    PORT_ADC_IN6,
N    PORT_ADC_IN7,
N    PORT_ADC_IN8,
N    PORT_ADC_IN9,
N    PORT_ADC_IN10,
N    PORT_ADC_IN11,
N    PORT_ADC_IN12,
N    PORT_ADC_IN13,
N    PORT_DUMMY_95,
N    PORT_DUMMY_96,
N    PORT_DUMMY_97,
N    PORT_DUMMY_98,
N    PORT_DUMMY_99,
N    PORT_DUMMY_100,
N    PORT_DUMMY_101,
N    PORT_DUMMY_102,
N    PORT_DUMMY_103,
N    PORT_DUMMY_104,
N    PORT_SC0_C0_LEFT,
N    PORT_SC0_C0_RIGHT,
N    PORT_SC0_C1_LEFT,
N    PORT_SC0_C1_RIGHT,
N    PORT_SC1_C0_LEFT,
N    PORT_SC1_C0_RIGHT,
N    PORT_SC1_C1_LEFT,
N    PORT_SC1_C1_RIGHT,
N    PORT_SC2_C0_LEFT,
N    PORT_SC2_C0_RIGHT,
N    PORT_SC2_C1_LEFT,
N    PORT_SC2_C1_RIGHT,
N    PORT_SC3_C0_LEFT,
N    PORT_SC3_C0_RIGHT,
N    PORT_SC3_C1_LEFT,
N    PORT_SC3_C1_RIGHT,
N    PORT_SC4_C0_LEFT,
N    PORT_SC4_C0_RIGHT,
N    PORT_SC4_C1_LEFT,
N    PORT_SC4_C1_RIGHT
N} gpio_portpin_e;
N
N/* Enable/disable */
Ntypedef enum tag_gpio_en_e
N{
N    GPIO_DISABLE = 0x0,                       /* Disable */
N    GPIO_ENABLE  = 0x1                        /* Enable */
N} gpio_en_e;
N
N/* Output resistance */
Ntypedef enum tag_gpio_output_resistance_e
N{
N    GPIO_OUTPUT_RESISTANCE_25  = 0x0,         /* Output_resistance 25 Ohm */
N    GPIO_OUTPUT_RESISTANCE_50  = 0x1,         /* Output_resistance 50 Ohm */
N    GPIO_OUTPUT_RESISTANCE_75  = 0x2,         /* Output_resistance 75 Ohm */
N    GPIO_OUTPUT_RESISTANCE_150 = 0x3          /* Output_resistance 150 Ohm */
N} gpio_output_resistance_e;
N
N/* SMC macro */
Ntypedef enum tag_gpio_smcmacro_e
N{
N    GPIO_SMC_MACRO_0 = 0x0,                   /* SMC macro 0 */
N    GPIO_SMC_MACRO_1 = 0x1,                   /* SMC macro 1 */
N    GPIO_SMC_MACRO_2 = 0x2,                   /* SMC macro 2 */
N    GPIO_SMC_MACRO_3 = 0x3,                   /* SMC macro 3 */
N    GPIO_SMC_MACRO_4 = 0x4                    /* SMC macro 4 */
N} gpio_smcmacro_e;
N
N/* Memory configuration */
Ntypedef enum tag_gpio_mem_config_e
N{
N    GPIO_MEM_CONFIG_NO_SDRAM = 0x0,           /* no SDRAM -> GPIO functionality */
N    GPIO_MEM_CONFIG_LPDDR_32 = 0x1,           /* LPDDR 32 bit */
N    GPIO_MEM_CONFIG_SDRAM_32 = 0x2,           /* SDRAM 32 bit */
N    GPIO_MEM_CONFIG_LPDDR_16 = 0x3            /* LPDDR 16 bit */
N} gpio_mem_config_e;
N
N/* Direction */
Ntypedef enum tag_gpio_direction_e
N{
N    GPIO_OUTPUT = 0x0,                        /* Output */
N    GPIO_INPUT  = 0x1                         /* Input */
N} gpio_direction_e;
N
N/* GPIO state */
Ntypedef enum tag_gpio_state_e
N{
N    GPIO_LOW  = 0x0,                          /* Low */
N    GPIO_HIGH = 0x1                           /* High */
N} gpio_state_e;
N
N/****************************************************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vGPIO_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGPIO_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                      uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                      uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnablePullUp
N *
N * Purpose:       Enable/disable pull-up
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnablePullUp(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnablePullDown
N *
N * Purpose:       Enable/disable pull-down
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnablePullDown(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableSchmittTrigger
N *
N * Purpose:       Enable/disable schmitt trigger
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableSchmittTrigger(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetOutputResistance
N *
N * Purpose:       Set output resistance
N *
N * Inputs:        ePin                  Pin type
N *                eOutputResistance     Output resistance
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetOutputResistance(gpio_portpin_e ePin, gpio_output_resistance_e eOutputResistance);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableLatchFunction
N *
N * Purpose:       Enable/disable latch function
N *
N * Inputs:        ePin    Pin type
N *                eEn     Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableLatchFunction(gpio_portpin_e ePin, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_EnableSMCMacro
N *
N * Purpose:       Enable/disable SMC macro
N *
N * Inputs:        eSMCMacro    SMC macro
N *                eEn          Enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_EnableSMCMacro(gpio_smcmacro_e eSMCMacro, gpio_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinFunction
N *
N * Purpose:       Set pin function
N *
N * Inputs:        ePin             Pin type
N *                u8PinFunction    Pin function
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinFunction(gpio_portpin_e ePin, uint8_t u8PinFunction);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinDirection
N *
N * Purpose:       Set pin direction
N *
N * Inputs:        ePin             port pin no.
N *                ePinDirection    pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinDirection(gpio_portpin_e ePin, gpio_direction_e ePinDirection);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SetPinState
N *
N * Purpose:       Set pin state
N *
N * Inputs:        ePin         port pin no.
N *                ePinState    pin state
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_SetPinState(gpio_portpin_e ePin, gpio_state_e ePinState);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_GetPinState
N *
N * Purpose:       Set pin state
N *
N * Inputs:        ePin         port pin no.
N *
N * Outputs:       ePinState    pin state
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GPIO_GetPinState(gpio_portpin_e ePin, gpio_state_e * ePinState);
N
N/****************************************************************************
N *
N * Function:      i32GPIO_SelectMemoryInterfaceConfiguration
N *
N * Purpose:       Set memory interface configuration
N *
N * Inputs:        eMemConfig    Memory interface configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32GPIO_SelectMemoryInterfaceConfiguration(gpio_mem_config_e eMemConfig);
N
N/****************************************************************************/
N
N
N#endif /* GPIO_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 29 "..\..\src\boardcfg.c" 2
N#include "qspi.h"                           
N#include "gdc.h"
L 1 "..\..\..\..\lldd\inc\gdc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Reference GDC Low Level Device Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphics Display Controller (GDC)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.20 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GDC_H
N#define GDC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_GDC_H_REVISION     "$Revision: 1.20 $"
N#define LLDD_GDC_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N#define GDC_GAWID_MAX   0x3FF
N#define GDC_GADEL_MAX   0x3FF
N
N/* #define _EXTENDED_GDC_APIS_DISABLED_ */
N/*********************************************/
N
N/* Number of entries in a color look-up table (CLUT) */
N#define GDC_CLUTSIZE_CORR                   256
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/* Graphics display controller (channel) */
Ntypedef enum tag_gdc_ch_e
N{
N    GDC0 = 0,                               /* Controller (channel) 0 */
N    GDC1 = 1                                /* Controller (channel) 1 */
N} gdc_ch_e;
N
N/* Clr Bits in GDCDCR:*/
Ntypedef enum tag_gdc_dcr_err_e
N{
N    GDC_DCR_ERR_NONE            = 0x00U,     /* GBER bit in GDCDCR register   */
N    GDC_DCR_ERR_GBER            = 0x01U,     /* GBER bit in GDCDCR register   */
N    GDC_DCR_ERR_GAPCOL          = 0x02U,     /* GAPCOL bit in GDCDCR register */
N    GDC_DCR_ERR_GBER_AND_GAPCOL = 0x03U      /* GBER and GAPCOL bit in GDCDCR register */
N} gdc_dcr_err_e;
N
N/* Used for Signal status of HDISP, HSYNC, VSYNC */
Ntypedef enum tag_gdc_dithering_e
N{
N    GDC_DITHERING_DSIABLED                  = 0x00U,
N    GDC_DITHERING_SIMPLE_ENABLED            = 0x01U,
N    GDC_DITHERING_MAGIC_SQR_ENABLED         = 0x02U,
N    GDC_DITHERING_MAGIC_SQR_SUBPIX_ENABLED  = 0x03U
N} gdc_dithering_e;
N
N/* Update Control for shadow registers: */
Ntypedef enum tag_gdc_reg_update_mode_e
N{
N    GDC_UPDATE_BY_EVERY_VSYNC          = 0x01,  /* update with every VSYNC (default)   */
N    GDC_UPDATE_BY_NEXT_VSYNC_ONLY      = 0x02   /* manual mode: update once at next VSYNC 
N                                                   (HW will change it to 00 by next V-Sync. 
N                                                   In this case NO Update will happen later) */
N} gdc_reg_update_mode_e;
N
N/* status of Update Control for shadow registers: */
Ntypedef enum tag_gdc_reg_update_status_e
N{
N    GDC_UPDATE_STAT_DISABLED           = 0x00,  /* update is disabled (In case of 2, it will be reset by HW by next v-sync)  */
N    GDC_UPDATE_STAT_EVERY_VSYNC        = 0x01,  /* update is with every VSYNC (default)   */
N    GDC_UPDATE_STAT_NEXT_VSYNC_ONLY    = 0x02   /* update only for 1 vsync */
N} gdc_reg_update_status_e;
N
N/* Graphic Layers */
Ntypedef enum tag_gdc_layer_e
N{
N    GDC_LAYER_A = 0x0U,                     /* Main Layer A */
N    GDC_LAYER_B = 0x1U,                     /* Main Layer B */
N    GDC_LAYER_C = 0x2U,                     /* Main Layer C */
N    GDC_LAYER_D = 0x3U,                     /* Main Layer D */
N    GDC_LAYER_E = 0x4U                      /* Main Layer E */
N} gdc_layer_e;
N
N/* Display Window */
Ntypedef enum tag_gdc_win_e
N{
N    GDC_WIN_A = 0x0U,                       /* Layer A display window */
N    GDC_WIN_B = 0x1U,                       /* Layer B display window */
N    GDC_WIN_C = 0x2U,                       /* Layer C display window */
N    GDC_WIN_D = 0x3U,                       /* Layer D display window */
N    GDC_WIN_E = 0x4U                        /* Layer E display window */
N} gdc_win_e;
N
N/* *** */
N
N/*
N *  GDCSAR parameter values
N */
N
N/* Frame buffers */
Ntypedef enum tag_gdc_frmbuff_e
N{
N    GDC_BUFF_DEFAULT = 0x0U,                /* Default Frame Buffer (must be always defined) */
N    GDC_BUFF_SECOND  = 0x1U                 /* Second buffer is optional (used only during auto buffer switch) */
N} gdc_frmbuff_e;
N
N/* *** */
N
N/*
N *  GDCMSEGR parameter values
N */
N
N/* Memory segments */
Ntypedef enum tag_gdc_seg_e
N{
N    GDC_SEG_LAYER_A = 0x1U,                 /* Layer A segment */
N    GDC_SEG_LAYER_B = 0x2U,                 /* Layer B segment */
N    GDC_SEG_LAYER_C = 0x3U,                 /* Layer C segment */
N    GDC_SEG_LAYER_D = 0x4U,                 /* Layer D segment */
N    GDC_SEG_LAYER_E = 0x5U,                 /* Layer E segment */
N    GDC_SEG_WIN_A   = 0x6U,                 /* Layer A Display Window segment */
N    GDC_SEG_WIN_B   = 0x7U,                 /* Layer B Display Window segment */
N    GDC_SEG_WIN_C   = 0x8U,                 /* Layer C Display Window segment */
N    GDC_SEG_WIN_D   = 0x9U,                 /* Layer D Display Window segment */
N    GDC_SEG_WIN_E   = 0xAU                  /* Layer E Display Window segment */
N} gdc_seg_e;
N
N/* *** */
N
N/*
N * GDCCR parameter values
N */
N
N/* Enable/disable a controller, layer or window */
Ntypedef enum tag_gdc_en_e
N{
N    GDC_DISABLE = 0x0U,                     /* Disable */
N    GDC_ENABLE  = 0x1U                      /* Enable */
N} gdc_en_e;
N
N/* Selective color correction mode */
Ntypedef enum tag_gdc_ccmode_e
N{
N    GDC_EXCEPT_CMPVAL = 0,                  /* No correction of the compare values */
N    GDC_CMPVAL_ONLY   = 1                   /* Correct on match with the compare values only */
N} gdc_ccmode_e;
N
N/* Display config type */
Ntypedef enum tag_disp_config_type_e
N{
N    GDC_USE_DISP_SET_DIRECT  = 0,            /* use direct setting (GDCDSR and GDCDIMR) */
N    GDC_USE_DISP_SET_BY_LAYA = 1             /* use by setting of layer A (GDCLSRA and GDCLDRA) */
N} gdc_disp_config_type_e;
N
N/* GDC output, display, pannel control */
Ntypedef enum tag_gdc_on_e
N{
N    GDC_OFF = 0x0U,                         /* GDC output off */
N    GDC_ON  = 0x1U                          /* GDC output on */
N} gdc_on_e;
N
N/* Layer data format */
Ntypedef enum tag_gdc_dfmt_e
N{
N    GDC_RGBA32 = 0x0U,                      /* RGBA 32-bit */
N    GDC_RGB16  = 0x1U,                      /* RGB 16-bit */
N    GDC_ARGB32 = 0x2U                       /* ARGB 32-bit */
N} gdc_dfmt_e;
N
N/* Frame buffer active status */
Ntypedef enum tag_gdc_fbact_e
N{
N    GDC_BUFF0 = 0x0U,                       /* Frame buffer 0 is used for the next frame */
N    GDC_BUFF1 = 0x1U                        /* Frame buffer 1 is used for the next frame */
N} gdc_fbact_e;
N
N/* Dot-clock Selector */
Ntypedef enum tag_gdc_idc_e
N{
N    GDC_DOTCLK_EXT = 0x0U,                  /* External dot-clock used */
N/* >>> WARNING <<< When using external dot clock, output drivers can be damaged when programming "1" (GDC_DOTCLK_INT) to the related bit >>> WARNING <<< */
N    GDC_DOTCLK_INT = 0x1U                   /* Internal dot-clock used */
N
N} gdc_idc_e;
N
N/* Signal Polarity */
Ntypedef enum tag_gdc_pol_e
N{
N    GDC_NEG = 0x0U,                         /* Negative */
N    GDC_POS = 0x1U                          /* Positive */
N} gdc_pol_e;
N
N/* Artifact handling  */
Ntypedef enum tag_gdc_arth_e
N{
N    GDC_NO_ACTION   = 0x0U,                 /* No Action */
N    GDC_MULTI_BUFF  = 0x1U,                 /* Multi-buffer switching */
N    GDC_VIDEO_BLEND = 0x3U                  /* Display window video blending */
N} gdc_arth_e;
N
N/* Artifact handling location  */
Ntypedef enum tag_gdc_arthcd_e
N{
N    GDC_LAYER_AB = 0x0U,                    /* Display window layers A & B */
N    GDC_LAYER_CD = 0x1U                     /* Display window layers C & D */
N} gdc_arthcd_e;
N
N/* Layer order */
Ntypedef enum tag_gdc_vord_e
N{
N    GDC_ABCDE = 0x0U,                        /* A, B, C, D, E */
N    GDC_ACBDE = 0x1U                         /* A, C, B, D, E */
N} gdc_vord_e;
N
N/* Direction input/output selection */
Ntypedef enum tag_gdc_dir_e
N{
N    GDC_OUTPUT = 0x0U,                      /* Output mode */
N    GDC_INPUT  = 0x1U                       /* Input mode */
N} gdc_dir_e;
N
N/* Composite synchronization */
Ntypedef enum tag_gdc_csync_e
N{
N    GDC_VSYNC = 0x0U,                       /* Output VSync on DISP_vsync pin */
N    GDC_CSYNC = 0x1U                        /* Output CSync on DISP_vsync pin */
N} gdc_csync_e;
N
N/* *** */
N
N/*
N *  GDCINTR parameter values
N */
N
N/* Interrupt status */
Ntypedef enum tag_gdc_irqact_e
N{
N    GDC_IRQ_INACTIVE = 0x0U,                /* IRQ is inactive */
N    GDC_IRQ_ACTIVE   = 0x1U                 /* IRQ is active */
N} gdc_irqact_e;
N
N/* *** */
N
N/*
N *  GDCPTCR parameter values
N */
N
N/* General purpose pin selection */
Ntypedef enum tag_gdc_gpp_e
N{
N    GDC_GPP0 = 0x8U,                        /* General Purpose Pin #0, <GDCPTCR:bit 8> */
N    GDC_GPP1,                               /* General Purpose Pin #1, <GDCPTCR:bit 9> */
N    GDC_GPP2,
N    GDC_GPP3,
N    GDC_GPP4,
N    GDC_GPP5,
N    GDC_GPP6,
N    GDC_GPP7,
N    GDC_GPP8,
N    GDC_GPP9,
N    GDC_GPP10,
N    GDC_GPP11                               /* General Purpose Pin #11 */
N} gdc_gpp_e;
N
N/* Positive panel synchronization select */
Ntypedef enum tag_gdc_ppsync_e
N{
N    GDC_INPUT_LOW  = 0x0U,                    /* input is low active */
N    GDC_INPUT_HIGH = 0x1U                     /* input is high active */
N} gdc_ppsync_e;
N
N/* Reduced Swing Differential Signaling select */
Ntypedef enum tag_gdc_rsdsen_e
N{
N    GDC_RSDSEN_DIGITAL      = 0x0U,                    /* digital output */
N    GDC_RSDSEN_DIFFERENTIAL = 0x1U                     /* differential output */
N} gdc_rsdsen_e;
N
N/* Reduced Swing Differential Signaling Output Mode */
Ntypedef enum tag_gdc_rsdsoutmode_e
N{
N    GDC_RSDSOUT_HIGH      = 0x0U,                    /* high */
N    GDC_RSDSOUT_MEDIUM    = 0x1U,                    /* medium */
N    GDC_RSDSOUT_LOW       = 0x2U,                    /* low */
N    GDC_RSDSOUT_HIZ       = 0x3U                     /* high impedance */
N} gdc_rsdsoutmode_e;
N
N/* Reduced Swing Differential Signaling Pre-Emphasis Mode */
Ntypedef enum tag_gdc_rsdspreemp_e
N{
N    GDC_RSDSPEMD_HIGH      = 0x0U,                    /* high */
N    GDC_RSDSPEMD_MEDIUM    = 0x1U,                    /* medium */
N    GDC_RSDSPEMD_LOW       = 0x2U,                    /* low */
N    GDC_RSDSPEMD_DISABLE   = 0x3U                     /* pre-emp disabled */
N} gdc_rsdspreemp_e;
N
N
N
N/* Data-data alignment */
Ntypedef enum tag_gdc_ddal_e
N{
N    GDC_ALIGNED =  0x0U,                    /* Aligned */
N    GDC_DELAYED =  0x1U                     /* Hal a cycle delayed */
N} gdc_ddal_e;
N
N/* Data-clock Alignment */
Ntypedef enum tag_gdc_dcal_e
N{
N    GDC_RISING  = 0x0U,                     /* Output changes with rising edge */
N    GDC_FALLING = 0x1U                      /* Output changes with falling edge */
N} gdc_dcal_e;
N
N/* *** */
N
N/*
N *  GDCCLUT parameter values
N */
N
N/* Color correction CLUT channel selection */
Ntypedef enum tag_gdc_clut_e
N{
N    GDC_CLUT_RED   = 0x0U,                  /* Red CLUT */
N    GDC_CLUT_GREEN = 0x1U,                  /* Green CLUT */
N    GDC_CLUT_BLUE  = 0x2U                   /* Blue CLUT */
N} gdc_clut_e;
N
N/* *** */
N
N/*
N *  GDCBAR parameter values
N */
N
N/* Capture buffer selection */
Ntypedef enum tag_gdc_cbuff_e
N{
N    GDC_CBUFF1 = 0x0U,                      /* Capture buffer 0 - first */
N    GDC_CBUFF2 = 0x1U,                      /* Capture buffer 1 - second */
N    GDC_CBUFF3 = 0x2U                       /* Capture buffer 2 - third */
N} gdc_cbuff_e;
N
N/* *** */
N
N/*
N * GDCSCVRx parameter values
N */
N
N/* Selective color correction compare activation */
Ntypedef enum tag_gdc_active_e
N{
N    GDC_DEACTIVATED = 0,                    /* Active */
N    GDC_ACTIVATED   = 1                     /* Inactive */
N} gdc_active_e;
N
N/* Selective color correction compare values */
Ntypedef enum tag_gdc_cmp_e
N{
N    GDC_CCVAL0 = 0,                         /* Compare value 0 */
N    GDC_CCVAL1 = 1,                         /* Compare value 1 */
N    GDC_CCVAL2 = 2,                         /* Compare value 2 */
N    GDC_CCVAL3 = 3,                         /* Compare value 3 */
N    GDC_CCVAL4 = 4,                         /* Compare value 4 */
N    GDC_CCVAL5 = 5,                         /* Compare value 5 */
N    GDC_CCVAL6 = 6,                         /* Compare value 6 */
N    GDC_CCVAL7 = 7                          /* Compare value 7 */
N} gdc_cmp_e;
N
N/* *** */
N
N/*
N *  GDCAPCR parameter values
N */
N
N/* APC mode */
Ntypedef enum tag_gdc_apcm_e
N{
N    GDC_CPU_COMP  = 0,                      /* CPU mode */
N    GCD_AUTO_COMP = 1                       /* AUTO mode */
N} gdc_apcm_e;
N
N/* APC pixel value */
Ntypedef enum tag_gdc_apcp_e
N{
N    GDC_CURR_PIXVAL  = 0,                   /* Current mode */
N    GCD_PREV_PIXVAL  = 1                    /* Previous mode */
N} gdc_apcp_e;
N
N
N/* *** */
N
N/*
N *  GDCPROTR parameter values
N */
N
N/* Write protection level for GDC registers */
Ntypedef enum tag_gdc_write_protect_e
N{
N    GDC_WR_PROTECT_NONE            = 0x00U,   /* no protection                         */
N    GDC_WR_PROTECT_DISPL_CONFIG    = 0x01U,   /* display configuration write-protected */
N    GDC_WR_PROTECT_FEATURE_SWITCH  = 0x02U,   /* feature switches write-protected      */
N    GDC_WR_PROTECT_LAYER_PARAMS    = 0x03U    /* ayer parameters write-protected       */
N} gdc_write_protect_e;
N
N
N
N
N/* *** */
N
N/* Display Pulse Generator
N *  GDCGPCR-A, -B, -C parameter values
N */
N
N/* General purpose Pulse Generator: pulse generator selection */
Ntypedef enum tag_gdc_pg_gen_id_e
N{
N    GDC_PULSE_GEN_0  = 0x0U,      /* Pulse #0  Generator */
N    GDC_PULSE_GEN_1  = 0x1U,      /* Pulse #1  Generator */
N    GDC_PULSE_GEN_2  = 0x2U,      /* Pulse #2  Generator */
N    GDC_PULSE_GEN_3  = 0x3U,      /* Pulse #3  Generator */
N    GDC_PULSE_GEN_4  = 0x4U,      /* Pulse #4  Generator */
N    GDC_PULSE_GEN_5  = 0x5U,      /* Pulse #5  Generator */
N    GDC_PULSE_GEN_6  = 0x6U,      /* Pulse #6  Generator */
N    GDC_PULSE_GEN_7  = 0x7U,      /* Pulse #7  Generator */
N    GDC_PULSE_GEN_8  = 0x8U,      /* Pulse #8  Generator */
N    GDC_PULSE_GEN_9  = 0x9U,      /* Pulse #9  Generator */
N    GDC_PULSE_GEN_10 = 0xAU,      /* Pulse #10 Generator */
N    GDC_PULSE_GEN_11 = 0xBU       /* Pulse #11 Generator */
N} gdc_pg_gen_id_e;
N
N
N/* General purpose Pulse Generator: output clock gating enable */
Ntypedef enum tag_gdc_pg_cgsel_e
N{
N    GDC_PULSE = 0x0U,                       /* Output general purpose pulse */
N    GDC_DCLK  = 0x1U                        /* Output dotclock gated with general purpose pulse */
N} gdc_pg_cgsel_e;
N
N/* General purpose Pulse Generator: output combined logic output select */
Ntypedef enum tag_gdc_pg_outsel_e
N{
N    GDC_PGA          = 0x0U,      /* Pulse generator (PGA) */
N    GDC_PGA_AND_PGB  = 0x1U,
N    GDC_PGA_NAND_PGB = 0x2U,
N    GDC_PGA_OR_PGB   = 0x3U,
N    GDC_PGA_NOR_PGB  = 0x4U,
N    GDC_PGA_XOR_PGB  = 0x5U,
N    GDC_PGA_XNOR_PGB = 0x6U,
N    GDC_PGB          = 0x7U        /* Pulse Generator (PGB) */
N} gdc_pg_outsel_e;
N
N/* General purpose Pulse Generator: Trigger selection */
Ntypedef enum tag_gdc_pg_trigger_e
N{
N    GDC_TRIG_VSYNK  = 0x2U,
N    GDC_TRIG_HSYNC  = 0x3U,
N    GDC_TRIG_VDISP  = 0x4U,
N    GDC_TRIG_HDISP  = 0x5U,
N    GDC_TRIG_PNL    = 0x6U
N} gdc_pg_trigger_e;
N
N/* *** */
N
N/* Display Pulse Generator
N *  parameter values for  General purpose Pulse Generator 
N *  GDCPxGxR  Px: P0..P11 /GxR: GAR, GBR
N */
N/* Pulse generator A or B: */
Ntypedef enum tag_gdc_pg_A_B_e
N{
N    GDC_PULSE_GEN_A = 0x0U,
N    GDC_PULSE_GEN_B = 0x1U
N} gdc_pg_A_B_e;
N
N/* Pulse generator input signal select: */
Ntypedef enum tag_gdc_pg_input_e
N{
N    GDC_INP_DOTCLK = 0x1U,
N    GDC_INP_VSYNK  = 0x2U,
N    GDC_INP_HSYNC  = 0x3U,
N    GDC_INP_VDISP  = 0x4U,
N    GDC_INP_HDISP  = 0x5U,
N    GDC_INP_PNL    = 0x6U
N} gdc_pg_input_e;
N
N/* Pulse generator active level select:: */
Ntypedef enum tag_gdc_pg_active_level_e
N{
N    GDC_ACTIVE_LVL_0 = 0x0U,   /* active level is 0 */
N    GDC_ACTIVE_LVL_1 = 0x1U    /* active level is 1 */
N} gdc_pg_active_level_e;
N
N/*Divider value is defined by DIV+1 */
Ntypedef enum tag_gdc_pg_divider_e
N{
N    GDC_DIVIDER_BYPASS   = 0x00U,
N    GDC_DIVIDER_2        = 0x01U,
N    GDC_DIVIDER_3        = 0x02U,
N    GDC_DIVIDER_4        = 0x03U,
N    GDC_DIVIDER_5        = 0x04U,
N    GDC_DIVIDER_6        = 0x05U,
N    GDC_DIVIDER_7        = 0x06U,
N    GDC_DIVIDER_8        = 0x07U,
N    GDC_DIVIDER_9        = 0x08U,
N    GDC_DIVIDER_10       = 0x09U,
N    GDC_DIVIDER_11       = 0x0AU,
N    GDC_DIVIDER_12       = 0x0BU,
N    GDC_DIVIDER_13       = 0x0CU,
N    GDC_DIVIDER_14       = 0x0DU,
N    GDC_DIVIDER_15       = 0x0EU,
N    GDC_DIVIDER_16       = 0x0FU
N} gdc_pg_divider_e;
N
N
N/*
N *  GDCGBECR parameter values
N */
N/* Read / Write Direction */
Ntypedef enum tag_gdc_buserr_dir_e
N{
N    GDC_BUSERR_READ_TRANSF   = 0x0U,
N    GDC_BUSERR_WRITE_TRANSF  = 0x1U
N} gdc_buserr_dir_e;
N
N/* Burst Type */
Ntypedef enum tag_gdc_buserr_bursttype_e
N{
N    GDC_BUSERR_BURST_TYPE_FIXED   = 0x0U,
N    GDC_BUSERR_BURST_TYPE_INCR    = 0x1U
N} gdc_buserr_bursttype_e;
N
N/* Burst Size */
Ntypedef enum tag_gdc_buserr_burstsize_e
N{
N    GDC_BUSERR_BURST_1BYTE     = 0x0U,
N    GDC_BUSERR_BURST_2BYTE     = 0x1U,
N    GDC_BUSERR_BURST_4BYTE     = 0x2U,
N    GDC_BUSERR_BURST_81BYTE    = 0x3U,
N    GDC_BUSERR_BURST_16BYTE    = 0x4U,
N    GDC_BUSERR_BURST_32BYTE    = 0x5U,
N    GDC_BUSERR_BURST_64BYTE    = 0x6U,
N    GDC_BUSERR_BURST_128BYTE   = 0x7U
N} gdc_buserr_burstsize_e;
N
N
N/* Response Type */
Ntypedef enum tag_gdc_buserr_resptype_e
N{
N    GDC_BUSERR_RESP_OK        = 0x0U,
N    GDC_BUSERR_RESP_EXOKAY    = 0x1U,
N    GDC_BUSERR_RESP_SLVERR    = 0x2U,
N    GDC_BUSERR_RESP_DECERR    = 0x3U
N} gdc_buserr_resptype_e;
N
N
N/* *** */
N
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* Frame buffer configuration structure */
Ntypedef struct tag_gdc_fbcfg_st
N{
N    gdc_frmbuff_e eBuff;                    /* Frame buffer selection (default/second) */
N    uint32_t      u32Addr;                  /* Frame buffer physical start address */
N    uint16_t      u16Width;                 /* Frame buffer memory width (line width), limited to 13-bits */
N} gdc_fbcfg_st;
N
N/* Synchronization configuration structure */
Ntypedef struct tag_gdc_sync_st
N{
N    gdc_csync_e eSyncType;                  /* Selects between VSYNC and CSYNC type */
N    gdc_pol_e   eVSyncPol;                  /* Polarity of VSYNC */
N    gdc_pol_e   eHSyncPol;                  /* Polarity of HSYNC */
N    uint8_t     u8HsyncWdth;                /* Width of HSYNC (dot-clocks) */
N    uint8_t     u8VsyncWdth;                /* Width of VSYNC (lines) */
N    uint16_t    u16HLineLen;                /* Horizontal line length (dot-clocks) */
N    uint16_t    u16VFrameLen;               /* Vertical frame length (lines) */
N} gdc_sync_st;
N
N/* IRQ configuration structure */
Ntypedef struct tag_gdc_irqcgf_st
N{
N    gdc_en_e eAPCIrqEn;                     /* Automatic Pixel Checker (APC) Mask */
N    uint16_t u16LineNr;                     /* Line Number HSYNCINT [Range 0x0 - 0x7FF] */
N    gdc_en_e eHSyncIrqEn;                   /* HSYNCINT Mask */
N    gdc_en_e eVSyncIrqEn;                   /* VSYNCINT Mask */
N    gdc_en_e eIfurIrqEn;                    /* IFURINT IRQ Mask */
N    gdc_en_e eOfurIrqEn;                    /* IFURINT IRQ Mask */
N} gdc_irqcgf_st;
N
N/* APC configuration structure */
Ntypedef struct tag_gdc_apccfg_st
N{
N    gdc_apcm_e eMode;                       /* APC Mode */
N    uint8_t    u8Frames;                    /* 7 bits:  Computation interval length [in frames] */
N    uint8_t    u8WWidth;                    /* 8 bits:  Window width */
N    uint8_t    u8WHeight;                   /* 7 bits:  Window height */
N    uint16_t   u16HStart;                   /* 12 bits: Horizontal start position */
N    uint16_t   u16VStart;                   /* 11 bits: Vertical start position */
N    uint32_t   u32AutoChkSum;               /* 22 bits: Expected checksum in AUTO mode */
N} gdc_apccfg_st;
N
N/* GDC bus Error Control Signal-Structure */
Ntypedef struct tag_gdc_bus_err_ctrl_st
N{
N    gdc_buserr_dir_e        eDirection;       /* Read / Write direction */
N    gdc_buserr_bursttype_e  eBurstType;       /* Burst type */
N    gdc_buserr_burstsize_e  eBurstSize;       /* Burst size */
N    gdc_buserr_resptype_e   eRespType;        /* Response Type */
N    uint8_t                 u8ByteEnables;    /* Byte-enables for the erroneous transfer. */
N    uint8_t                 u8ID;             /* ID tag of the read/write transaction that triggered an error response. */
N    uint8_t                 u8BurstLength;    /* Burst length of the read/write transaction that triggered an error response */
N} gdc_bus_err_ctrl_st;
N
N
N/* Structure for General Purpose Pulse Generator Registers (GDCPnGxR) */
Ntypedef struct tag_gdc_pulse_config_st
N{
N    gdc_pg_active_level_e   eActiveLevel;    /* Pulse generator active level select: */
N    gdc_pg_input_e          eSelectedInput;  /* Pulse generator input signal select: */
N    gdc_en_e                eByPassEnb;      /* Pulse generator bypass enable: */
N    uint16_t                u16PulseDelay;   /* Delay of generated pulse */
N    gdc_pg_divider_e        ePulseDivider;   /* Divider value is defined by DIV+1 */
N    gdc_en_e                eInvertEnb;      /* Pulse generator inversion enable: */
N    uint16_t                u16PulseWidth;   /* Width of generated pulse, measured in dot clock cycles for all input sources but VSYNC and VDISP */
N} gdc_pulse_config_st;
N
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N
N/****************************************************************************
N *
N * Function:      vGDC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/***************************************************************************
N*
N*                  G E N E R A L    C O N F I G U R A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_Init
N *
N * Purpose:       Initializes the GDC driver and the register shadow list
N *                for the controller specified
N *
N * Inputs:        eGDC     Controller channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   The clock gating for the controller must be enabled first!
N *                [Please refer to CCRCR register description]
N *
N ***************************************************************************/
Nvoid vGDC_Init(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_Switch
N *
N * Purpose:       Switch GDC output On/Off
N *
N * Inputs:        eGDC     Controller channel
N *                eSwitch  On/off request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_Switch(gdc_ch_e eGDC, gdc_on_e eSwitch);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetShadowRegUpdateMode
N *
N * Purpose:       Set the mechanism of shadow register updating. 
N *
N * Inputs:        eGDC     Controller channel
N *                eCtrl    Updating mechanism
N *                         Important NOTE: 
N *                         GDC_UPDATE_BY_NEXT_VSYNC_ONLY: this mode can be used to 
N *                         disable update shadow register option. In this case
N *                         user application should wait after after the call, until
N *                         update register bit has been set to 0 by HW (eGetShadowRegUpdateStatus()     
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetShadowRegUpdateMode(gdc_ch_e eGDC, gdc_reg_update_mode_e eCtrl);
N
N
N/****************************************************************************
N *
N * Function:      eGetShadowRegUpdateStatus
N *
N * Purpose:       Gets the actual update mode for shadow register from HW. 
N *                NOTE: If last setting was "GDC_UPDATE_BY_NEXT_VSYNC_ONLY", 
N *                      the HW will reset it to "0" by next VSync.
N *
N * Inputs:        eGDC     Controller channel
N *
N * Outputs:       none
N *
N * Return Values: status of shadow register update
N *
N * Limitations:   none
N *
N ***************************************************************************/
Ngdc_reg_update_status_e eGetShadowRegUpdateStatus(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ADBSEnable
N *
N * Purpose:       Enable/disable the "Automatic buffer switching" for all
N *                layers
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_ADBSEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ColorCorrectEnable
N *
N * Purpose:       Enable/disable the per channel color correction
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_ColorCorrectEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetArthMode
N *
N * Purpose:       Select the artifact handling mode
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Artifact handling mode
N *                eLoc   Artifact handling location
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetArthMode(gdc_ch_e eGDC, gdc_arth_e eMode, gdc_arthcd_e eLoc);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDitheringMode
N *
N * Purpose:       Select the artifact handling mode
N *
N * Inputs:        eGDC   Controller channel
N *                eDith  Deithering mode
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDitheringMode(gdc_ch_e eGDC, gdc_dithering_e eDith);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetBgrColor
N *
N * Purpose:       Set the background color
N *
N * Inputs:        eGDC      Controller channel
N *                u32Color  Background color in a RGB16 format:
N *                              Red   : u32Color[23:16]
N *                              Green : u32Color[15:8]
N *                              Blue  : u32Color[7:0]
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   The color data is internally adjusted to the register layout
N *                [shifted left by 8 bits to adjust the bit values]
N *
N ***************************************************************************/
Nvoid vGDC_SetBgrColor(gdc_ch_e eGDC, uint32_t u32Color);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetDispStat
N *
N * Purpose:       Retrieve the display interface status [enabled/disabled]
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Interface enabled/disabled status
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Ngdc_en_e eGDC_GetDispStat(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetPanelStat
N *
N * Purpose:       Retrieve the panel interface status [enabled/disabled]
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Interface enabled/disabled status
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Ngdc_en_e eGDC_GetPanelStat(gdc_ch_e eGDC);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGDC_SetGdcWriteProtection
N *
N * Purpose:       Defines level of Write protection for GDC control registers
N *                a register .
N *
N * Inputs:        eGDC         Controller channel
N *                eProtection  Protection Level
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetGdcWriteProtection(gdc_ch_e eGDC, gdc_write_protect_e eProtection);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_GAPIFEnable
N *
N * Purpose:       Enable/Disable GA-Programming Interface (GAPIF)
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable GAPIF
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_GAPIFEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_AccessToGapif
N *
N * Purpose:       Check if GA-Programming Interface (GAPIF) has been accessed
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Access(C_TRUE)/ No access (C_FALSE)
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_AccessToGapif(gdc_ch_e eGDC);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                             D O T  -  C L O C K
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SelDotClkSrc
N *
N * Purpose:       Configure the dot-clock source [internal/external]
N *
N * Inputs:        eGDC  Controller channel
N *                eSel  Source selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   !!! >>>  ATTENTION  <<< !!!
N *                When using internal clock, please pay attention on output
N *                drivers as they can be damaged. For more information about
N *                this topic, please refer to the Capricorn data-book
N *
N ***************************************************************************/
Nvoid vGDC_SelDotClkSrc(gdc_ch_e eGDC, gdc_idc_e eSel);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDotClkPol
N *
N * Purpose:       Configure the dot-clock polarity [positive/negative]
N *
N * Inputs:        eGDC  Controller channel
N *                ePol  Polarity request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDotClkPol(gdc_ch_e eGDC, gdc_pol_e ePol);
N
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                      L A Y E R    M A N I P U L A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      i32GDC_LayerEnable
N *
N * Purpose:       Enable/disable a layer
N *
N * Inputs:        eGDC    Controller channel
N *                eLayer  Layer selection
N *                eEn     Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_LayerEnable(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDataFormat
N *
N * Purpose:       Set the data format (32-bit RGBA/16-bit RGB/32-bit ARGB)
N *                for a layer
N *
N * Inputs:        eGDC    Controller channel
N *                eLayer  Layer selection
N *                eFmt    Data format (32-bit RGBA/16-bit RGB/32-bit ARGB)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid layer or invalid pixel format
N *
N * Limitations:   The proper operation depends on the bit layout, thus it
N *                it must not to be changed: bit 0 of the eFmt parameter
N *                determines the data bit-width, whereas bit 1 determines
N *                the alpha position, which is not appicable and therefore
N *                ignored in 16-bit mode
N *
N ***************************************************************************/
Nint32_t i32GDC_SetDataFormat(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_dfmt_e eFmt);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetLayerStart
N *
N * Purpose:       Configure the layer start position of a layer [A, B, C,
N *                D or E]
N *
N * Inputs:        eGDC       Controller channel
N *                eLayer     Layer selection
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC, being in the range
N *                           [64 - 2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC, being in
N *                           the range [64 - 1023]
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 11 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetLayerStart(gdc_ch_e eGDC, gdc_layer_e eLayer, uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetLayerSize
N *
N * Purpose:       Set the layer size [width * height] for a layer [A, B,
N *                C, D or E]
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection
N *                u16Width  Horizontal size in the range [64-4095]
N *                u16Height Vertical size in the range [32-2047]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
N int32_t i32GDC_SetLayerSize(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                             uint16_t u16Width, uint16_t u16Height);
N 
N 
N/****************************************************************************
N *
N * Function:      vGDC_SetLayerOrder
N *
N * Purpose:       Select the layer order  [A-B-C-D-E or A-C-B-D-E]
N *
N * Inputs:        eGDC    Controller channel
N *                eOrder  Layer order selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetLayerOrder(gdc_ch_e eGDC, gdc_vord_e eOrder);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetCommonAlpha
N *
N * Purpose:       Set the comon alpha value for a layer or a display window
N *                in the range [A, B, C, D, E]
N *
N * Inputs:        eGDC     Controller channel
N *                eEntity  Layer or display window
N *                u8Alpha  Alpha value in the range [0x00 - 0xFF], where:
N *                             0x00 - transparent
N *                             0xFF - opaque
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer/display window
N *
N * Limitations:   Process one layer/display window at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetCommonAlpha(gdc_ch_e eGDC, gdc_seg_e eEntity, uint8_t u8Alpha);
N
N
N/****************************************************************************
N *
N * Function:      u8GDC_GetCommonAlpha
N *
N * Purpose:       Retrieve the comon alpha value for a layer or a display
N *                window in the range [A, B, C, D, E]
N *
N * Inputs:        eGDC      Controller channel
N *                eEntity   Layer or display window
N *                pu8Alpha  Result destination
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer/display window
N *
N * Limitations:   Process one layer/display window at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_GetCommonAlpha(gdc_ch_e eGDC, gdc_seg_e eEntity, uint8_t* pu8Alpha);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                          F R A M E -  B U F F E R
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      i32GDC_FrameBuffConfig
N *
N * Purpose:       Configure a frame buffer for layer A, B, C, D or E
N *
N * Inputs:        eGDC        Controller channel
N *                eLayer      Layer selection [A, B, C, D or E]
N *                pstBuffCfg  Pointer to frame buffer configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time. The scroll bits will
N *                be modified. All reserved bits are hard-wired to
N *                zero and will not be modified even a different
N *                value is passed!
N *
N ***************************************************************************/
Nint32_t i32GDC_FrameBuffConfig(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_fbcfg_st* pstBuffCfg);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetActiveFrameBuff
N *
N * Purpose:       Check the next active frame buffer for all layers
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Next active buffer
N *
N * Return Values: none
N *
N * Limitations:   Process one layer at a time
N *
N ***************************************************************************/
Ngdc_frmbuff_e eGDC_GetActiveFrameBuff(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetMemWidth
N *
N * Purpose:       Set the image width of the frame buffer memory in number
N *                of dots
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection [A, B, C, D or E]
N *                u16Width  Horizontal line length of the frame buffer image,
N *                          limited to 13-bits for all layers
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one segment at a time. No parameter range check
N *                is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetMemWidth(gdc_ch_e eGDC, gdc_layer_e eLayer, uint16_t u16Width);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetLayerStartAddr
N *
N * Purpose:       Configure the start address of a layer [A, B, C, D or E]
N *
N * Inputs:        eGDC     Controller channel
N *                eLayer   Layer selection
N *                eBuff    Frame Buffer selection [Default or second (in case
N *                         of double buffering only)]
N *                u32Addr  Frame Buffer 32-bit physical start address
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Any previous existing scroll value will be kept. Bit 0 is
N *                hard-wired to zero and will not be modified even a different
N *                value is passed. Process one layer at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetLayerStartAddr(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                                 gdc_frmbuff_e eBuff, uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetScrollVal
N *
N * Purpose:       Set the scroll value of a layer [A, B, C, D or E]
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection
N *                eBuff     Frame Buffer selection [Default or second (in case
N *                         of double buffering only)]
N *                u8ScrVal  Scrolling value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time. Both SSCROLL bits will be
N *                set regardless of the data format mode [32-bit/16-bit],
N *                thus scrolling value validation has to be done by the
N *                caller of this API
N *
N ***************************************************************************/
Nint32_t i32GDC_SetScrollVal(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                            gdc_frmbuff_e eBuff, uint8_t u8ScrVal);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetStartAddrCapture
N *
N * Purpose:       Set the start address of a capture buffer
N *
N * Inputs:        eGDC     Controller channel
N *                eBuff    Capture buffer [0, 1 or 2]
N *                u32Addr  Capture buffer physical start address
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   That last three bits of the address [2:0] are hard-wired
N *                to zero, thus will be ignored
N *
N ***************************************************************************/
Nvoid vGDC_SetStartAddrCapture(gdc_ch_e eGDC, gdc_cbuff_e eBuff, uint32_t u32Addr);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*          P E R    C H A N N E L    C O L O R    C O R R E C T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_InitCorrClut
N *
N * Purpose:       Initialize a color correction look-up table [Red, Green, Blue]
N *
N * Inputs:        eGDC     Controller channel
N *                eClut    CLUT table selection
N *                pu8Data  Pointer to buffer with the 256x 8-bit entries
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Access is based on relative controller offset, as defined
N *                in gdc_ch_e. Process one table at a time
N *
N ***************************************************************************/
Nvoid vGDC_InitCorrClut(gdc_ch_e eGDC, gdc_clut_e eClut, const uint8_t* pu8Data);
N
N
N/****************************************************************************
N *
N * Function:      bovGDC_SetSelectCorrCompVal
N *
N * Purpose:       Set a selective color correction compare value
N *
N * Inputs:        eGDC            Controller channel
N *                eSelection      Selected CCV
N *                u32CorrCompVal  Compare value to be set
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one value at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetSelectCorrCompVal(gdc_ch_e eGDC,  gdc_cmp_e eSelection, uint32_t u32CorrCompVal);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ActivateCorrCompVal
N *
N * Purpose:       Activate a selective color correction compare value
N *
N * Inputs:        eGDC        Controller channel
N *                eSelection  Selected CCV
N *                eActive     Activate/deactivate request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one value at a time
N *
N ***************************************************************************/
Nvoid  vGDC_ActivateCorrCompVal(gdc_ch_e eGDC, gdc_cmp_e eSelection, gdc_active_e eActive);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_EnableSelectiveCorr
N *
N * Purpose:       Enable/disable the selective color correction in a specified
N *                mode
N *
N * Inputs:        eGDC   Controller channel
N *                eEn    Enable/disable request
N *                eMode  Correction mode
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_EnableSelectiveCorr(gdc_ch_e eGDC, gdc_en_e eEn, gdc_ccmode_e eMode);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                               D I S P L A Y
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDispConfigType
N *
N * Purpose:       Set display config type
N *
N * Inputs:        eGDC             Controller channel
N *                eDispConfigType  Display config type
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDispConfigType(gdc_ch_e eGDC, gdc_disp_config_type_e eDispConfigType);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDisplayStart
N *
N * Purpose:       Configure the display start position
N *
N * Inputs:        eGDC       Controller channel
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC, being in the range
N *                           [64 - 2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC, being in
N *                           the range [64 - 1023]
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 10 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nint32_t i32GDC_SetDisplayStart(gdc_ch_e eGDC, uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDisplaySize
N *
N * Purpose:       Set the layer size [width * height]
N *
N * Inputs:        eGDC      Controller channel
N *                u16Width  Horizontal display width using number of dots [64-2047]
N *                u16Height Vertical display height using number of lines [1-1023]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
N int32_t i32GDC_SetDisplaySize(gdc_ch_e eGDC, uint16_t u16Width, uint16_t u16Height);
N
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                                W I N D O W
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_WindowEnable
N *
N * Purpose:       Enable/disable a layer's display window
N *
N * Inputs:        eGDC     Controller channel
N *                eWindow  Window
N *                eEn      Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one window at a time
N *
N ***************************************************************************/
Nvoid vGDC_WindowEnable(gdc_ch_e eGDC, gdc_win_e eWindow, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetWindowSize
N *
N * Purpose:       Set a display window size [width & height]
N *
N * Inputs:        eGDC       Controller channel
N *                eWindow    Window selection [A, B, C, D or E]
N *                u16Width   Horizontal window size in the range [64-4095]
N *                u16Height  Vertical window size in the range [32-2047]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one window at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nint32_t i32GDC_SetWindowSize(gdc_ch_e eGDC, gdc_win_e eWindow,
N                             uint16_t u16Width, uint16_t u16Height);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetWindowStartPos
N *
N * Purpose:       Configure the window start position of a layer [A, B, C,
N *                D or E]
N *
N * Inputs:        eGDC       Controller channel
N *                eWindow    Window selection
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC [64..2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC [64..1023]
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one window at a time. Start position parameters
N *                will be truncated to 11 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetWindowStartPos(gdc_ch_e eGDC, gdc_win_e eWindow,
N                            uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetWindowStartAddr
N *
N * Purpose:       Sets the start address of a window [A, B, C, D or E]
N *
N * Inputs:        eGDC     Controller channel
N *                eWindow  Window selection
N *                u32Addr  Frame buffer physical start address
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid window
N *
N * Limitations:   Bits 2-0 are hard-wired to zero and will not be modified
N *                even a different value is passed. Process one window at
N *                a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetWindowStartAddr(gdc_ch_e eGDC, gdc_win_e eWindow, uint32_t u32Addr);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                       S Y N C H R O N I Z A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SyncConfig
N *
N * Purpose:       Configure the VSYNC and HSYNC signals by setting type,
N *                polarity, signal width, line-length and vertical frame
N *                length for a controller
N *
N * Inputs:        eGDC         Controller channel
N *                pstSyncCfg   Pointer to HSYNC/VSYNC configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter range or
N *                validity checks are performed
N *
N ***************************************************************************/
Nvoid vGDC_SyncConfig(gdc_ch_e eGDC, gdc_sync_st* pstSyncCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetSyncDir
N *
N * Purpose:       Set the direction of VSYNC and HSYNC lines
N *
N * Inputs:        eGDC  Controller channel
N *                eDir  HSYNC/VSYNC signal direction
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N *                                !!! >>>  ATTENTION  <<< !!!
N *                When using external sync signals, the output drivers can
N *                be damaged if the direction is configure to output !!!
N *
N ***************************************************************************/
Nvoid vGDC_SetSyncDir(gdc_ch_e eGDC, gdc_dir_e eDir);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SelectCompSync
N *
N * Purpose:       Set composite signal synchronization
N *
N * Inputs:        eGDC   Controller channel
N *                eSync  VSYNC/CSYNC selection request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SelectCompSync(gdc_ch_e eGDC, gdc_csync_e eSync);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolVSync
N *
N * Purpose:       Select the VSYNC mode [negative/positive], where:
N *                    negative => DISP_vsync is low active
N *                    positive => DISP_vsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolVSync(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolHSync
N *
N * Purpose:       Select the HSYNC mode [negative/positive], where:
N *                    negative => DISP_hsync is low active
N *                    positive => DISP_hsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolHSync(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolHDisp
N *
N * Purpose:       Select the HDISP mode [negative/positive], where:
N *                    negative => DISP_hdisp is low active
N *                    positive => DISP_hdisp is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolHDisp(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetHSync
N *
N * Purpose:       Set the HSYNC pulse width and line length
N *
N * Inputs:        eGDC          Controller channel
N *                u8PulseWidth  Pulse width in number of dot-clocks
N *                u16LineLen    Line length in number of dot-clocks
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter validity
N *                check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetHSync(gdc_ch_e eGDC, uint8_t u8PulseWidth, uint16_t u16LineLen);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetVSync
N *
N * Purpose:       Set the VSYNC pulse width and vertical frame length
N *
N * Inputs:        eGDC           Controller channel
N *                u8PulseWidth   Pulse width in number of lines
N *                u16VFrameLen   Vertical frame length in number of lines
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter validity
N *                check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetVSync(gdc_ch_e eGDC, uint8_t u8PulseWidth, uint16_t u16VFrameLen);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetPolVSync
N *
N * Purpose:       Retrieve the current VSYNC mode [negative/positive], where:
N *                    negative => DISP_vsync is low active
N *                    positive => DISP_vsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *
N * Outputs:       Current mode
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetPolVSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatVSync
N *
N * Purpose:       Retrieve the current vertical synchronization signal status
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatVSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatHSync
N *
N * Purpose:       Retrieve the current horizontal synchronization signal status
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatHSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatHDisp
N *
N * Purpose:       Retrieve the current status of the horizontal display data
N *                ready signal
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatHDisp(gdc_ch_e eGDC);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                             I N T E R R U P T S
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      GDC_IrqConfig
N *
N * Purpose:       Configure all GDC related interrupt sources of a controller
N *
N * Inputs:        eGDC    Controller channel
N *                pstCfg  Pointer to interrupt configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_IrqConfig(gdc_ch_e eGDC, gdc_irqcgf_st* pstCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskAPC
N *
N * Purpose:       Enable/disable the Automatic Pixel Checker Interrupt [APCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskAPC(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetHsyncIrqLine
N *
N * Purpose:       Set the number of lines in which the HSYNCINT should be
N *                generated
N *
N * Inputs:        eGDC        Controller channel
N *                u16LineNr   Line number on which the HSYNC interrupt shall
N *                            be generated. Parameter range is [0x0 - 0x7FF]
N *                            If zero is specified, the interrupt will be
N *                            generated on every line
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetHsyncIrqLine(gdc_ch_e eGDC, uint16_t u16LineNr);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskFifoIn
N *
N * Purpose:       Enable/disable the Input FIFO Underrun Interrupt [IFURINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskFifoIn(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskFifoOut
N *
N * Purpose:       Enable/disable the Output FIFO Underrun Interrupt [OFURINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskFifoOut(gdc_ch_e eGDC, gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskVSync
N *
N * Purpose:       Enable/disable the VSYNC Interrupt [VSYNCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskVSync(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskHSync
N *
N * Purpose:       Enable/disable the HSYNC Interrupt [HSYNCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskHSync(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqHSync
N *
N * Purpose:       Check whether HSYNC Interrupt [HSYNCINT] is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqHSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqVSync
N *
N * Purpose:       Check whether VSYNC Interrupt [VSYNCINT] is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqVSync(gdc_ch_e eGDC);
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqFifoIn
N *
N * Purpose:       Check whether Input FIFO Underrun Interrupt [IFURINT]
N *                is active and clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqFifoIn(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqFifoOut
N *
N * Purpose:       Check whether Output FIFO Underrun Interrupt [OFURINT]
N *                is active and clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqFifoOut(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqAPC
N *
N * Purpose:       Check whether APC Interrupt [APCINT] is active and clear
N *                the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqAPC(gdc_ch_e eGDC);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGap
N *
N * Purpose:       The function checks whether APC interrupt (GAPINT) is active 
N *                and if it is, clears the corresponding flag. 
N *                Note:
N *                     By clearing GAPINT the error bit GAPCOL in GDCDCR register
N *                     will also be cleared.
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqGap(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGber
N *
N * Purpose:       Check whether GBUS error Interrupt (GBERINT)is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqGber(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGpe
N *
N * Purpose:       Check whether GPEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e  eGDC_IsIrqGpe(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqDle
N *
N * Purpose:       Check whether DLEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqDle(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqApe
N *
N * Purpose:       Check whether APEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqApe(gdc_ch_e eGDC);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                        P A N E L   I N T E R F A C E
N*                  A P I' s   V A L I D  O N L Y   F O R   GDC0
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlGppOutEnable
N *
N * Purpose:       Enable/disable the General Purpose Pulse Output
N *                Valid only for GDC0
N *
N * Inputs:        ePin  General purpose pin [GPPx]
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlGppOutEnable(gdc_gpp_e ePin, gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlPositiveSyncSelect
N *
N * Purpose:       Set positive panel synchronization select
N *                Valid only for GDC0
N *
N * Inputs:        eSync    low-/high-active input
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlPositiveSyncSelect(gdc_ppsync_e eSync);
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlRSPowerUpFinished
N *
N * Purpose:       Check if Reduced Swing Power Up sequence is finished
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  RSDS power up sequence not finished
N *                C_TRUE   RSDS power up sequence finished
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlRSPowerUpFinished(void);
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlRSReady
N *
N * Purpose:       Check if Reduced Swing DS is ready to be used
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  RSDS power up and enable sequence not finished
N *                C_TRUE   RSDS is read to be used
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlRSReady(void);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSEnable
N *
N * Purpose:       Enable Reduced Swing Differential Signaling
N *                Valid only for GDC0
N *
N * Inputs:        eOutput  digital / differential output
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSEnable(gdc_rsdsen_e eOutput);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlSyncModeEnable
N *
N * Purpose:       Panel Synchronization Mode Enable
N *                Valid only for GDC0
N *
N * Inputs:        eEn      disable / enable to trigger PNL_syncin
N *                         Panel Timing Control Interface Output
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlSyncModeEnable(gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSOutputCurrentMode
N *
N * Purpose:       Set RSDS output current mode
N *                Valid only for GDC0
N *
N * Inputs:        eOutMode Output Current mode (high, medium, low, HI-Z)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSOutputCurrentMode(gdc_rsdsoutmode_e eOutMode);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSPreEmphasisMode
N *
N * Purpose:       Set RSDS pre-emphasis mode
N *                Valid only for GDC0
N *
N * Inputs:        ePreEmp  pre-emphasis mode (high, medium, low, disabled)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSPreEmphasisMode(gdc_rsdspreemp_e ePreEmp);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSHighImpedanceEnable
N *
N * Purpose:       Enable RSDS high impedance, or select differential output
N *                Valid only for GDC0
N *
N * Inputs:        eEn      enable high impedance
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSHighImpedanceEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlInputSync
N *
N * Purpose:       Check if monitoring bit for synchronization input signal
N *                from panel is set
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  not synchronized
N *                C_TRUE   synchronized
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlInputSync(void);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlTimingControlInterfaceEnabled
N *
N * Purpose:       Check if panel timing control interface is enabled
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  panel timing control interface disabled
N *                C_TRUE   panel timing control interface enabled
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlTimingControlInterfaceEnabled(void);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlAlignData
N *
N * Purpose:       Set the data alignment between DISP_RGB and PNL_ERGB bus
N *                [DISP_RGB and PNL_ERGB can change values at same clock edge
N *                or PNL_ERGB output is delayed by half of PNL_CLOCK cycle]
N *                Valid only for GDC0
N *
N * Inputs:        eAllign  Alignment request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetAlignData(gdc_ddal_e eAllign);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlAlignClock
N *
N * Purpose:       Set the data to clock alignment [DISP_RGB output can change
N *                with rising or falling DISP_dotclk edge]
N *                Valid only for GDC0
N *
N * Inputs:        eEdge  Active DISP_dotclk edge selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlAlignClock(gdc_dcal_e eEdge);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlAlterEnable
N *
N * Purpose:       Enable/disable data alternation [DISP_RGB and PNL_ERGB]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlAlterEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlEvenDataInvEnable
N *
N * Purpose:       Enable/disable the even interface data inversion [RGB out]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Please note that inversion can be only achieved when
N *                GPP1 == 1. Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlEvenDataInvEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlEvenRgbOutEnable
N *
N * Purpose:       Enable/disable PNL_ERGB output [Even RGB interface]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlEvenRgbOutEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlOddDataInvEnable
N *
N * Purpose:       Enable/disable the odd interface data inversion [RGB out]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Please note that inversion can be only achieved when
N *                GPP0 == 1. Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlOddDataInvEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlOddRgbOutEnable
N *
N * Purpose:       Enables/disables output for DISP_RGB (Odd RGB interface)
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlOddRgbOutEnable(gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GDC_PnlSyncMode
N *
N * Purpose:       Affect the delay time between synchronization input and data output.
N *                It is combined out of u16PnlSyncModeDelay  and u16PnlSyncDataDelay.
N *                Valid only for GDC0
N *
N * Inputs:        u16PnlSyncModeDelay:  Panel Synchronization Mode Delay
N *                                        Value may be in the range of 7 to 2047.
N *                u8PnlSyncDataDelay:   Panel Synchronization Mode Data Delay
N *                                        Value may be in the range of 0 to 15.
N * Outputs:       none
N *
N * Return Values: C_SUCCESS : No error
N *                C_FAILED  : parameter range problem
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_PnlSyncMode(uint16_t u16PnlSyncModeDelay, uint8_t u8PnlSyncDataDelay);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      boGDC_SetPulseGen
N *
N * Purpose:       Set Pulse Generator properties
N *
N * Inputs:        eGDC        Controller channel
N *                ePGenID:    Selected pulse generator (0..11) to configure
N *                ePGenOut:   Combinatorial logic output selection
N *                ePGenClk:   Clock-gating enables Output general purpose pulse 
N *                            or Output dot clock gated with general purpose pulse
N *                ePGenTrig:  Trigger signal selection for related general purpose 
N *                            pulse generator
N * 
N * Outputs:       none
N *
N * Return Values: C_TRUE/C_FALSE
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
N bool_t boGDC_SetPulseGen(gdc_ch_e eGDC,
N                          gdc_pg_gen_id_e   ePGenID,
N                          gdc_pg_outsel_e   ePGenOut,
N                          gdc_pg_cgsel_e    ePGenClk,
N                          gdc_pg_trigger_e  ePGenTrig);
N
N/****************************************************************************
N *
N * Function:      boGDC_ConfigPulseGenA_B
N *
N * Purpose:       Configures One Shot Pulsgenerator A or B
N *
N * Inputs:        eGDC         Controller channel
N *                ePGenID:     Selected pulse generator (0..11) to configure 
N *                eGenA_B:     Selected generator A or B to configure
N *                pstConfig:   Pointer to configuration structure for  pulse generator A or B
N * 
N * Outputs:        none
N *
N * Return Values: C_TRUE/C_FALSE
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_ConfigPulseGenA_B(gdc_ch_e eGDC,
N                               gdc_pg_gen_id_e      ePGenID,
N                               gdc_pg_A_B_e         eGenA_B,
N                               gdc_pulse_config_st  *pstConfig);
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*            A U T O M A T I C    P I X E L    C H E C K E R
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_APCConfigure
N *
N * Purpose:       Configure the automatic pixel checker
N *
N * Inputs:        eGDC    Controller channel
N *                pstCfg  Pointer to configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_APCConfigure(gdc_ch_e eGDC, gdc_apccfg_st* pstCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_APCEnable
N *
N * Purpose:       Enable/disable the automatic pixel checker
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_APCEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsAPCError
N *
N * Purpose:       Check whether compare error was detected
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE  if detected
N *                C_FALSE if not detected
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsAPCError(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetAPCCR_PolynomialGen
N *
N * Purpose:       Change Polynomial generator (default: 0x23)
N *                NOTE: Changing this value is not recommended!
N *
N * Inputs:        eGDC      Controller channel
N *                u8PgValue PG-Value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetAPCCR_PolynomialGen(gdc_ch_e eGDC, uint8_t u8PgValue);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetAPCResult
N *
N * Purpose:       Retrieve the result of the last computation
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Last computation result
N *
N * Return Values: none
N *
N * Limitations:   The bits will be automatically cleared after the read.
N *                Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetAPCResult(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetAPCPixelVal
N *
N * Purpose:       Retrieve current/previous pixel value set
N *
N * Inputs:        eGDC  Controller channel
N *                ePix  Pixel set
N *
N * Outputs:       Pixel value set
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetAPCPixelVal(gdc_ch_e eGDC, gdc_apcp_e ePix);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/*+-----------------------------------------------------------------------+*
N *|     START-Extended new APIs                                           |*
N *+-----------------------------------------------------------------------+*/
N
N/****************************************************************************
N *
N * Function:      vGDC_SetApcWriteProtection
N *
N * Purpose:       Defines level of Write protection for APC control registers
N *
N * Inputs:        eGDC         Controller channel
N *                eProtection  Protection Level
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetApcWriteProtection(gdc_ch_e eGDC, gdc_write_protect_e eProtection);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/***************************************************************************
N*
N*                      Bus Errors and Collision Detection
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      u16GDC_GetLastGAPIFColAddr
N *
N * Purpose:       Get last GAPIF colision error address
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: the address
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint16_t u16GDC_GetLastGAPIFColAddr(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_GetBusErrAddr
N *
N * Purpose:       Returns the triggering access’s address after bus error on GB 
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       pu32BusErrAddr: Pointer to bus error address
N *
N * Return Values: Any Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_GetBusErrAddr(gdc_ch_e eGDC, uint32_t* pu32BusErrAddr);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_GetBusErrCtrlStatus
N *
N * Purpose:       Returns the triggering access’s control status after bus error on GB
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       control status structure
N *
N * Return Values: Any Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_GetBusErrCtrlStatus(gdc_ch_e eGDC, gdc_bus_err_ctrl_st* pstCtrlStatus);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetDcrBusErrors
N *
N * Purpose:       Get status of bus error in GDCDCR register
N *
N * Inputs:        eGDC      Controller channel
N *
N * Outputs:       none
N *
N * Return Values: evtl. raised errors
N *
N * Limitations:   none
N *
N ***************************************************************************/
Ngdc_dcr_err_e eGDC_GetDcrBusErrors(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_ClrDcrBusErrors
N *
N * Purpose:       Clears error Bits (GBER, GAPCOL) in GDC register
N *                Note:
N *                     Clear GAPINT by call of function eGDC_IsIrqGap() will also
N *                     clear GAPCOL error bit.
N *
N * Inputs:        eGDC      Controller channel
N *                eClrBits  Clear Bits
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boGDC_ClrDcrBusErrors(gdc_ch_e eGDC, gdc_dcr_err_e eClrBits);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N
N/*+-----------------------------------------------------------------------+*
N *|     END-Extended new APIs                                             |*
N *+-----------------------------------------------------------------------+*/
N
N/****************************************************************************/
N
N#endif /* GDC_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: gdc.h
N**  $Revision: 1.20 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   :
N** |
N** | CONS.  :
N** |
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N*****************************************************************************
N****************************************************************************/
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 31 "..\..\src\boardcfg.c" 2
N#include "fbuffer.h"
L 1 "..\..\..\..\mw\inc\fbuffer.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Middleware Buffer definition
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/06/05 13:48:13 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef FBUFFER_H
N#define FBUFFER_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "config.h"
N#include "gf.h"
L 1 "..\..\..\..\mw\inc\gf.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronic Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Contains declarations for Image structures
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/07/21 12:38:02 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef GF_H
N#define GF_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GF_H_REVISION     "$Revision: 1.8 $"
N#define MW_GF_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N/*---------------------------------------
N|             MATH LIBRARY USE           |
N ---------------------------------------*/
N/* Enables use of standard math library */
N/* if following define is disabled, LLDD/GA rotation and scaling are using integer instead of float */
N/* and sin/cos lookup table is used instead of math library functions */
N
N#define GA_USE_MATH_LIB
N
N#ifdef GA_USE_MATH_LIB
N/* Pi Constant Value */
N#define GA_CONST_PI 3.1415926535897932384626433
N#endif
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Transformation table structure
N*/
Ntypedef struct tag_table_st
N{
N    uint32_t    u32Address;         /*!< Table source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N} gf_table_st;
N
N
N/**
N* @brief Image description structure
N*/
Ntypedef struct tag_image_st
N{
N    uint32_t    u32Address;         /*!< Image source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N    int16_t     i16CenterX;         /*!< Image rotation center X-coord (optional) */
N    int16_t     i16CenterY;         /*!< Image rotation center Y-coord (optional) */
N    uint8_t     eFormat;            /*!< Image Format */
N    uint32_t    u32Paletteaddress;  /*!< palette address for PNG */
N} gf_image_st;
N
N
N/**
N* @brief CLUT description structure
N*/
Ntypedef struct tag_clut_st
N{
N    uint32_t    u32Address;         /*!< CLUT source address */
N    uint8_t     u8Length;           /*!< CLUT length */
N} gf_clut_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N
N/***************************************************************************/
N
N#endif /* GF_H */
N
N/***************************************************************************/
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 27 "..\..\..\..\mw\inc\fbuffer.h" 2
N#include "ga.h"
L 1 "..\..\..\..\lldd\inc\ga.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.19 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_H
N#define GA_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "ga_common.h"
L 1 "..\..\..\..\lldd\inc\ga_common.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/07/21 12:30:20 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_COMMON_H
N#define GA_COMMON_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "captypes.h"
N
N#define LLDD_GA_COMMON_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_GA_COMMON_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*==========================================================================
N|                       GA Configuration Parameters                         |
N ==========================================================================*/
N/*---------------------------------------
N|        GA Sub-Module inclusion         |
N ---------------------------------------*/
N/* Blitting Engine */
N#define GA_USE_BLITTING
N
N/* Transformation Engine */
N#define GA_USE_TRANSFORM
N
N/* Rotation Engine */
N#define GA_USE_ROTATION
N
N/* Drawing Engine */
N#define GA_USE_DRAWING
N
N/*---------------------------------------
N|         GA List Configuration          |
N ---------------------------------------*/
N/* Maximal Number of commands in one list */
N#define GA_CMD_MAX    2048
N
N/*---------------------------------------
N|  Enable/Disable boundary check for     |
N|         GA Command List                |
N ---------------------------------------*/
N/* Enable/Disable boundary check in drivers for command buffer: */
N/* #define GA_CMDSLIST_BOUNDARY_CHECK */
N
N
N/* 1 double word more will be reserved by calculation of needed
N   buffers for GA-API's. This is necesary to add later an END-Command to 
N   finalize the command: 
N*/   
N#define RESERVED_FOR_END_CMD    1
N
N/*======================================
N                Defs
N=======================================*/
N
N/*--------------------------------------
N|     GA General Purpose Registers      |
N --------------------------------------*/
N#define GA_GPR0   0
N#define GA_GPR1   1
N#define GA_GPR2   2
N#define GA_GPR3   3
N#define GA_GPR4   4
N#define GA_GPR5   5
N#define GA_GPR6   6
N#define GA_GPR7   7
N#define GA_GPR8   8
N#define GA_GPR9   9
N#define GA_GPR10  10
N#define GA_GPR11  11
N#define GA_GPR12  12
N#define GA_GPR13  13
N#define GA_GPR14  14
N#define GA_GPR15  15
N#define GA_GPR16  16
N#define GA_GPR17  17
N#define GA_GPR18  18
N#define GA_GPR19  19
N#define GA_GPR20  20
N#define GA_GPR21  21
N#define GA_GPR22  22
N#define GA_GPR23  23
N#define GA_GPR24  24
N#define GA_GPR25  25
N#define GA_GPR26  26
N#define GA_GPR27  27
N#define GA_GPR28  28
N#define GA_GPR29  29
N#define GA_GPR30  30
N#define GA_GPR31  31
N
N
N/*--------------------------------------
N|         GA Command Parameters         |
N --------------------------------------*/
N/* Selection of module to wait on */
Ntypedef enum tag_ga_modul_e
N{
N    GA_GDC0        = 0x0u,
N    GA_FG0         = 0x1u,
N    GA_GDC1        = 0x2u
N} ga_modul_e;
N
N/* Enables/Disables option */
Ntypedef enum tag_ga_en_e
N{
N    GA_DIS         = 0x0u,     /* Disable/off */
N    GA_EN          = 0x1u      /* Enable/on */
N} ga_en_e;
N
N/* Blending Order */
Ntypedef enum tag_blendOrd_e
N{
N    GA_ONTO_DEST   = 0x0u,     /* Onto destination */
N    GA_BEHIND_DEST = 0x1u      /* Behind destination */
N} ga_blendOrd_e;
N
N/* Color format selection */
Ntypedef enum tag_ga_colFmt_e
N{
N    GA_RGB16       = 0x0u,      /* 16-bit RGB format */
N    GA_RGBA32      = 0x1u       /* 32-bit RGBA format */
N} ga_colFmt_e;
N
N/*--------------------------------------
N|        GA Command Construction        |
N --------------------------------------*/
N/* Command Field Masks */
N#define GA_MASK1           0x1u
N#define GA_MASK2           0x3u
N#define GA_MASK3           0x7u
N#define GA_MASK4           0xfu
N#define GA_MASK5           0x1fu
N#define GA_MASK6           0x3fu
N#define GA_MASK7           0x7fu
N#define GA_MASK8           0xffu
N#define GA_MASK9           0x1ffu
N#define GA_MASK10          0x3ffu
N#define GA_MASK12          0xfffu
N#define GA_MASK14          0x3fffu
N#define GA_MASK15          0x7fffu
N#define GA_MASK16          0xffffu
N#define GA_MASK22          0x3fffffu
N#define GA_MASK24          0xffffffu
N#define GA_MASK32          0xffffffffu
N#define GA_MASK36          0xfffffffffull
N#define GA_MASK48          0xffffffffffffull
N#define GA_MASK64          0xffffffffffffffffull
N
N/* GA Unit selection */
N#define GA_SCHED           0x0u
N#define GA_BLITING         0x1u
N#define GA_DRAWING         0x2u
N#define GA_ROTATION        0x3u
N#define GA_TRANSFORM       0x4u
N
N/*** Command Codes ***/
N#define GA_CMC_LGPR        0x1u
N#define GA_CMC_CSWVSYNC    0x2u
N#define GA_CMC_CSUIC	     0x3u
N#define GA_CMC_CSGDC0CC	   0x4u
N#define GA_CMC_CSGDC1CC	   0x5u
N#define GA_CMC_END         0xffu
N
N/* Blitting Engine Command Codes */
N
N#define GA_CMC_BLTO16      0x02u
N#define GA_CMC_BLTO32      0x04u
N#define GA_CMC_BLTORLEI16  0x0au
N#define GA_CMC_BLTORLEI24  0x06u
N#define GA_CMC_BLTORLEI24A 0x0Eu
N#define GA_CMC_BLTORLEI32  0x0cu
N#define GA_CMC_BLTOP16     0x12u
N#define GA_CMC_BLTOP32     0x14u
N#define GA_CMC_BLTB16      0x03u
N#define GA_CMC_BLTB32      0x07u
N#define GA_CMC_BLTBRLEI16  0x0bu
N#define GA_CMC_BLTBRLEI24  0x05u
N#define GA_CMC_BLTBRLEI24A 0x0fu
N#define GA_CMC_BLTBRLEI32  0x0du
N#define GA_CMC_BLTBP16     0x13u
N#define GA_CMC_BLTBP32     0x17u
N
N/* Transformation Engine Command Code */
N#define GA_CMC_TRANSF      0x01u
N#define GA_CMC_TRANSFB     0x00u
N
N/* Rotation Engine Command Code */
N#define GA_CMC_ROT         0x01u
N#define GA_CMC_ROTB        0x00u
N
N/* Drawing Engine Command Codes */
N#define GA_CMC_DE_DLRGBA32 0x03u
N#define GA_CMC_DE_DLRGB16  0x04u
N#define GA_CMC_DE_DTRGBA32 0x05u
N#define GA_CMC_DE_DTRGB16  0x06u
N
N/* Command Field Offsets */
N#define GA_ENG_OFF         60
N#define GA_LEN_OFF         56
N#define GA_CMC_OFF         48
N#define GA_SPC_OFF          0
N
N/* Command Field Masks */
N#define GA_ENG_MSK         (GA_MASK3)
N#define GA_LEN_MSK         (GA_MASK4)
N#define GA_CMC_MSK         (GA_MASK8)
N#define GA_SPC_MSK         (GA_MASK48)
N
N/* Macro for command field positioning */
N#define GA_FP(val, offset, mask) (((uint64_t)(val) & (mask)) << (offset))
N
N/* GA Command Fields (Engine, Length, Command code, Cmd Specific Params.)*/
N#define GA_ENG(Engine) (GA_FP((Engine), GA_ENG_OFF, GA_ENG_MSK))
N#define GA_LEN(Len)    (GA_FP((Len)   , GA_LEN_OFF, GA_LEN_MSK))
N#define GA_CMC(Code)   (GA_FP((Code)  , GA_CMC_OFF, GA_CMC_MSK))
N#define GA_SPC(spec)   (GA_FP((spec)  , GA_SPC_OFF, GA_SPC_MSK))
N
N/* GA Command Construction Macro */
N#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    | \
N                                                GA_ENG((Engine))   | \
N                                                GA_LEN((Len))      | \
N                                                GA_CMC((CmdCode))  | \
N                                                GA_SPC((CmdSpec)))
X#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    |                                                 GA_ENG((Engine))   |                                                 GA_LEN((Len))      |                                                 GA_CMC((CmdCode))  |                                                 GA_SPC((CmdSpec)))
N
N/*=========================================================================
N|                        SCHEDULER OPERATION COMMANDS                      |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load General-Purpose Register Command (LGPR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to configure
N|             one out of the 32 General-Purpose Registers. The command
N|             specific parameter for this command is the number of the
N|             register that should be loaded and the value itself.
N|
N|  Params:    regNr   - The number of the General-Purpose Register that
N|                       should be loaded
N|
N|             uiVal   - Value that should be stored within the selected
N|                       register. If the register does not encapsulate
N|                       32 bits the value within the command has to be right
N|                       aligned.
N|
N -------------------------------------------------------------------------*/
N#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,       \
N                               GA_FP ((regNr), 32, GA_MASK5)      |   \
N                               GA_FP ((uiVal),  0,  GA_MASK32)))
X#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,                                      GA_FP ((regNr), 32, GA_MASK5)      |                                  GA_FP ((uiVal),  0,  GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   END Command (CSEND)
N|
N|  Descr  :   The CSEND command must be placed at the end of every command
N|             list. It signals the Command Scheduler that all commands have
N|             been executed. When the Command Scheduler is detecting this
N|             mark, a flag in the status register signals that the command
N|             list was executed. Optionally an interrupt is generated.
N|
N|  Params:    none
N|
N -------------------------------------------------------------------------*/
N#define GA_END() (GA_CMN(GA_SCHED, 0x1u, GA_CMC_END,0x0u))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Wait VSYNC Command (CSWVSYNC)
N|
N|  Descr  :   The CSWVSYNC command can be used to synchronize parts of the
N|             command list with the vertical synchronization signal VSYNC
N|             from the GDC or the Frame Grabber.
N|
N|             When the Command Scheduler is reading the CSWVSYNC command
N|             it waits until the next vertical synchronization of the
N|             display/camera input takes place before executing the next
N|             command.
N|
N|  Params:    module   -  VSYNC select:
N|                         Use: GA_GDC0     - Wait on GDC0
N|                              GA_FG0      - Wait on FG0
N|                              GA_GDC1     - Wait on GDC1
N|                              GA_FG1      - Wait on FG1
N|
N|
N -------------------------------------------------------------------------*/
N#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,        \
N                         GA_FP ((module), 0, GA_MASK2)))
X#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,                                 GA_FP ((module), 0, GA_MASK2)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   User Interrupt Command (CSUIC)
N|
N|  Descr  :   The CSUIC command can be used to signal the MCU that a
N|             certain part of the Command List is already executed or
N|             will now start execution.
N|
N|  Params:    interrupt number:
N|                          Use: 0 - 23
N|                               values > 23 will be ignored
N|
N -------------------------------------------------------------------------*/
N#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,    \
N                                  GA_FP ((number), 0, GA_MASK6)))
X#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,                                      GA_FP ((number), 0, GA_MASK6)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC0 Configuration Command (CSGDC0CC)
N|
N|  Descr  :   The CSGDC0CC command can be used to change the content of GDC0 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC0 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC1 Configuration Command (CSGDC1CC)
N|
N|  Descr  :   The CSGDC1CC command can be used to change the content of GDC1 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC1 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N
N/*======================================
N              Structures
N=======================================*/
N/* Command List Structure */
Ntypedef struct tag_ga_list_st
N{
N    uint64_t  ullCommands[GA_CMD_MAX] ;
X    uint64_t  ullCommands[2048] ;
N    uint64_t* pu64Current;
N    uint32_t  u32UsedDoubleWords; /* used or needed double words for an  GA-API */
N    int32_t   i32FreeSpaceStat;   /* C_SUCCESS: OK no space free error,
N                                     C_FAILED:  No free space for GA-API */
N} ga_list_st ;
N
N/****************************************************************************/
N
N
N#endif /* GA_COMMON_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: ga_common.h
N**  $Revision: 1.14 $
N**  $Date: 2015/07/21 12:30:20 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** | CONS.  : 
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\lldd\inc\ga.h" 2
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_H_REVISION     "$Revision: 1.19 $"
N#define LLDD_GA_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/* Timeout */
N#define GA_TIMEOUT  10000
N
N/* Size of Draw Engine Filter RAM (in doublewords) */
N#define GA_DE_FILTER_SIZE 64
N
N/* GA Interrupt Masks */
N#define GA_IRQ_MASK_CENDIM  0x00000001U    /* GA Command End Interrupt Mask.                          */
N#define GA_IRQ_MASK_CSCEIM  0x00000004U    /* Command Scheduler Command Error Interrupt Mask          */
N#define GA_IRQ_MASK_CSLEIM  0x00000008U    /* Command Scheduler Command List Executed Interrupt Mask  */
N#define GA_IRQ_MASK_WBWIM   0x00000010U    /* GA Write Buffer Write Bus-Error Interrupt Mask          */
N#define GA_IRQ_MASK_WBRIM   0x00000020U    /* GA Write Buffer Read Bus-Error Interrupt Mask           */
N#define GA_IRQ_MASK_CBIM    0x00000040U    /* GA Cache Buffer Bus-Error Interrupt Mask                */
N#define GA_IRQ_MASK_RBIM    0x00000080U    /* GA Read Buffer Bus-Error Interrupt Mask                 */
N#define GA_IRQ_MASK_CSLUIM  0xFFFFFF00U    /* Command List User Interrupt Mask 0 – 23                 */
N
N/*======================================
N                Enums
N=======================================*/
N/****************************************
N*         GAIMR Param.Values
N****************************************/
N/* IRQ Mask */
Ntypedef enum tag_ga_irqen_e
N{
N    GA_IRQ_EN  = 0x1u,     /* Enable IRQ */
N    GA_IRQ_DIS = 0x0u      /* Disable IRQ */
N} ga_irqen_e;
N
N/* Bus type */
Ntypedef enum tag_ga_bus_type_e
N{
N    GA_READ_BUF_BUS        = 0x00U,
N    GA_CACHE_BUF_BUS       = 0x01U,
N    GA_WRITE_BUF_READ_BUS  = 0x02U,
N    GA_WRITE_BUF_WRITE_BUS = 0x03U,
N    GA_MAX_TYPE_BUS        = 0x04U
N} ga_bus_type_e;
N
N/* Read / Write Direction */
Ntypedef enum tag_ga_buserr_dir_e
N{
N    GA_BUSERR_READ_TRANSF   = 0x0U,
N    GA_BUSERR_WRITE_TRANSF  = 0x1U
N} ga_buserr_dir_e;
N
N/* Burs error Type */
Ntypedef enum tag_ga_buserr_bursttype
N{
N    GA_BUSERR_BURST_TYPE_FIXED   = 0x0U,
N    GA_BUSERR_BURST_TYPE_INCR    = 0x1U
N} ga_buserr_bursttype;
N
N/* Burst Size */
Ntypedef enum tag_ga_buserr_burstsize
N{
N    GA_BUSERR_BURST_1BYTE     = 0x0U,
N    GA_BUSERR_BURST_2BYTE     = 0x1U,
N    GA_BUSERR_BURST_4BYTE     = 0x2U,
N    GA_BUSERR_BURST_81BYTE    = 0x3U,
N    GA_BUSERR_BURST_16BYTE    = 0x4U,
N    GA_BUSERR_BURST_32BYTE    = 0x5U,
N    GA_BUSERR_BURST_64BYTE    = 0x6U,
N    GA_BUSERR_BURST_128BYTE   = 0x7U
N} ga_buserr_burstsize;
N
N
N/* Response Type */
Ntypedef enum tag_ga_buserr_resptype
N{
N    GA_BUSERR_RESP_OK        = 0x0U,
N    GA_BUSERR_RESP_EXOKAY    = 0x1U,
N    GA_BUSERR_RESP_SLVERR    = 0x2U,
N    GA_BUSERR_RESP_DECERR    = 0x3U
N} ga_buserr_resptype;
N
N/* Memory Protection Region */
Ntypedef enum tag_ga_memory_region_e
N{
N    GA_MEMORY_PROT_REGION_0   = 0x0U,
N    GA_MEMORY_PROT_REGION_1   = 0x1U,
N    GA_MEMORY_PROT_REGION_MAX = 0x2U
N} ga_memory_region_e;
N
N/*======================================
N              Structures
N=======================================*/
N/* GA bus Error Control Signal-Structure */
Ntypedef struct tag_ga_bus_err_ctrl_st
N{
N    ga_buserr_dir_e      eDirection;       /* Read / Write direction */
N    ga_buserr_bursttype  eBurstType;       /* Burst type */
N    ga_buserr_burstsize  eBurstSize;       /* Burst size */
N    ga_buserr_resptype   eRespType;        /* Response Type */
N    uint8_t              u8ByteEnables;    /* Byte-enables for the erroneous transfer. */
N    uint8_t              u8ID;             /* ID tag of the read/write transaction that triggered an error response. */
N    uint8_t              u8BurstLength;    /* Burst length of the read/write transaction that triggered an error response */
N} ga_bus_err_ctrl_st;
N
N/*======================================
N      Exported Function Prototypes
N=======================================*/
N
N/****************************************************************************
N *
N * Function:      vGA_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8CommonRevision - pointer to common header revision string
N *                pau8CommonTag      - pointer to common header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                    uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                    uint8_t** pau8CommonRevision, uint8_t** pau8CommonTag,
N                    uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetMaxUsedBuffSize
N *
N * Purpose:       Resets the counter for used buffer of command list
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ResetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      u32Ga_GetMaxUsedBuffSize
N *
N * Purpose:       To get max. used size of command buffer. This API can be
N *                used to optimize the need size of "GA_CMD_MAX" in ga_list_st
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_GetLastCmdBuffStatus
N *
N * Purpose:       returns the information if there was enough space free for
N *                command over API
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: space status for command list
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_GetLastCmdBuffStatus(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetLastCmdSize
N *
N * Purpose:       returns the uesed buffer size for last API call (in case it
N *                was enough memory in buffer) or it returns needed size of buffer
N *                for last API call (if there was not enough memory in command buffer)
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: sized of used buffer
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetLastCmdSize(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_CheckList
N *
N * Purpose:       To check whether there is enough space in command buffer
N *                to wrote some doble words 
N *
N * Inputs:        pstCmdList  - pointer to command list
N *                u32NeededDW - needed double words 
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED  requested number of commands will not fit into list
N *                C_SUCCESS requested number of commands will fit into list   
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_CheckList(ga_list_st* pstCmdList, uint32_t u32NeededDW);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetList
N *
N * Purpose:       Resets the Command List
N *
N * Inputs:        pstCmdList - Pointer to command list
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   The pointer to current list position will be reset, the
N *                content of the list will remain un-touched.
N *
N ***************************************************************************/
Nvoid vGA_ResetList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CloseList
N *
N * Purpose:       Closes the given list by inserting CSEND command
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CloseList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SyncList
N *
N * Purpose:       Inserts the VSYNC command in the command list in order to
N *                synchronize the execution of the list with vertical (VSYNC)
N *                signal from the GDC or Frame Grabber. When the command
N *                sceduler reaches this command it will stop the list
N *                execution until next VSYNC signal.
N *
N * Inputs:        eModul     - Modul selection to wait on (GDC/FG)
N *                pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SyncList(ga_modul_e eModule, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetUserInt
N *
N * Purpose:       defines Interrupt to CPU
N *
N * Inputs:        u8Number   - Interrupt number
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetUserInt(uint8_t u8Number, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_Enable
N *
N * Purpose:       Enables/Disables the Graphic Accelerator
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_Enable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ReadAheadEnable
N *
N * Purpose:       Enables/Disables ReadBuffer Read Ahead feature
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ReadAheadEnable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_Reset
N *
N * Purpose:       Resets the Graphic Accelerator
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS - Reset successful
N *                C_FAILED  - Reset timeout (Reset was not completted in
N *                            predefined time interval)
N *
N * Limitations:   The function will wait the reset to complete (it can take
N *                until recent bus cycle execution is finished)
N *
N ***************************************************************************/
Nint32_t i32GA_Reset(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetCmdListAddr
N *
N * Purpose:       Sets the physical address of the current command list
N *
N * Inputs:        u32Addr  - Physical address of the command list
N *                           (Must be 64-bit alligned -> uiAddr[2:0] = 0x0)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Make sure that when calling this function command scheduler
N *                is NOT executing a command list !!! Please note, that after
N *                the address is once written, the GA will automatically
N *                start the command list execution.
N *
N ***************************************************************************/
Nvoid vGA_SetCmdListAddr(uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      u8GA_GetStatus
N *
N * Purpose:       Reads the Graphic Accelerator Status register
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA Status Register (GASR) value
N *
N * Limitations:   The caller must parse returned status byte. For this
N *                purpose see the description of GASR Register.
N *
N ***************************************************************************/
Nuint8_t u8GA_GetStatus(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListFinished
N *
N * Purpose:       Indicates that the operation of a command list was finished or
N *                the GA was reset. This bit will be set to zero, when a new pointer
N *                is written.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  command List Finished (ready to get new values)
N *                C_FALSE: command List is not Finished (not ready to get new values)
N *
N * Limitations: 
N *
N ***************************************************************************/
Nbool_t boGA_CmdListFinished(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListError
N *
N * Purpose:       This function shows if the Command Scheduler detects an invalid command
N *                or not. The Graphics Accelerator halts its operation and has to be reset
N *                if error is any detected. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  any Error detected by command list
N *                C_FALSE: no error detected
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdListError(void);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      boGA_CmdReg_IsBusy
N *
N * Purpose:       This function shows when any of the GA engines is currently operating.
N *                Then also the write access to many registers is prohibited.
N *                NOTE:
N *                  This function should be used from user by using direct comamnd 
N *                  registers instead of command list, before writing new commands. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  GA engine is busy.
N *                C_FALSE: GA engine is ready (not busy).
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdReg_IsBusy(void);
N#endif
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetIrqCause
N *
N * Purpose:       Reads the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA IRQ Cause value
N *
N * Limitations:   The calling function must parse returned IRQ cause byte.
N *                For this purpose see the GAICR register description.
N *                Please note that the funtion will automatically clear
N *                the interrupt source !!!
N *
N ***************************************************************************/
Nuint32_t u32GA_GetIrqCause(void);
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCause
N *
N * Purpose:       Clears the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        u32CauseMask: Mask to clear the bits ("1" in the mask means clear Bit)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCause(uint32_t u32CauseMask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetIrqMask
N *
N * Purpose:       Sets all GA Interrupt masks in one shot
N *
N * Inputs:        u32Mask - Interrupt Mask. For this purpose you may use defines:
N *                         GA_IRQ_MASK_CENDIM, GA_IRQ_MASK_CSCEIM, GA_IRQ_MASK_CSLEIM,
N *                         GA_IRQ_MASK_WBWIM, GA_IRQ_MASK_WBRIM, GA_IRQ_MASK_CBIM,
N *                         GA_IRQ_MASK_RBIM, GA_IRQ_MASK_CSLUIM   
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetIrqMask(uint32_t u32Mask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableUserIrq
N *
N * Purpose:       Enables/Disables interrupt to CPU
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *		  u8Number - interrupt line to be enabled/disabled
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableUserIrq(uint8_t u8Number, ga_en_e eEn);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_EnableIrqCmdEnd
N *
N * Purpose:       Enables/Disables GA Command End Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_EnableIrqCmdEnd(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_ClearIrqCmdEnd
N *
N * Purpose:       Clears GA Command End Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_ClearIrqCmdEnd(void);
N
N
N#endif
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSLEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command List
N *                Executed Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSLEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSLEI
N *
N * Purpose:       Clears Command Scheduler Command List Executed Interrupt. 
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSLEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSCEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command Error IRQ
N *                Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSCEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSCEI
N *
N * Purpose:       Clears GA Command Scheduler Command Error IRQ
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSCEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetGADelay
N *
N * Purpose:       Sets the minimum delay in System Clock cycles between two
N *                consecutive memory accesses performed by any Graphics 
N *                Accelerator engine
N *
N * Inputs:        u16Delay: Delay Value (0x0000 .. 0xFFFF)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetGADelay(uint16_t u16Delay);
N
N
N/****************************************************************************/
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBWI
N *
N * Purpose:       Enables/Disables GA Write Buffer Write Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBWI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBWI
N *
N * Purpose:       Clears GA Write Buffer Write Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBWI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBRI
N *
N * Purpose:       Enables/Disables GA Write Buffer Read Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBRI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBRI
N *
N * Purpose:       Clears GA Write Buffer Read Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBRI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGACBIM
N *
N * Purpose:       Enables/Disables GA Cache Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGACBI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGACBI
N *
N * Purpose:       Clears GA Cache Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGACBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGARBI
N *
N * Purpose:       Enables/Disables GA Read Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGARBI(ga_en_e eEn);
N
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGARBI
N *
N * Purpose:       Clears GA Read Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGARBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearUserIrq
N *
N * Purpose:       Clears GA Command List User Interrupt 0 - 23
N *
N * Inputs:        u8CmdListIntr: No. of Interruot (0..23) to be cleared
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearUserIrq(uint8_t u8CmdListIntr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrAddr
N *
N * Purpose:       Returns the address after bus error on GA 
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       pu32BusErrAddr: Pointer to bus error address
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrAddr(ga_bus_type_e eBusType, uint32_t* pu32BusErrAddr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrCtrlStatus
N *
N * Purpose:       Returns the triggering access’s control status after bus error on GA
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       control status structure
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrCtrlStatus(ga_bus_type_e eBusType, ga_bus_err_ctrl_st* pstCtrlStatus);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetMemoryProtRegionAddr
N *
N * Purpose:       Defines the lower and upper address of the memory region
N *                0 or 1 (primary, secondary) GA is allowed to perform write accesses.
N *                Write accesses outside the memory regions are discarded.
N *                NOTE:
N *                   The memory regions are defined with a granularity of 4Kbyte.
N *
N * Inputs:        eRegion  Related Region (0/1)
N *                u32LowAddress: Lower protected address
N *                u32HighAddress: Higher protected address
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_SetMemoryProtRegionAddr(ga_memory_region_e eRegion, uint32_t u32LowAddress, uint32_t u32HighAddress);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecConfigIrq
N *
N * Purpose:       Enables/Disables interrupt, set if a non-privileged access 
N *                tries to write to GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR,
N *                or GAMPIMR.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecConfigIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecAccessIrq
N *
N * Purpose:       Enables/Disables interrupt, set if GA tries to write to 
N *                memory outside the address range defined by GAMR0L-GAMR0H 
N *                and GAMR1L-GAMR1H.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecAccessIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecConfigIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to have a non-privileged access 
N *                tries to write to protection control registers
N *                (GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR, or GAMPIMR)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecConfigIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecAccessIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to write to memory 
N *                outside the address range defined by GAMR0L-GAMR0H and GAMR1L-GAMR1H
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecAccessIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetMemoryProtecErr_CaptAddr
N *
N * Purpose:       Get the address of the first write access performed by the 
N *                Write Buffer’s write interface that caused a memory protection
N *                violation. The register is automatically set by the Graphics 
N *                Accelerator in case of a protection violation, it is reset to
N *                zero automatically if the corresponding interrupt bit GAMPI is
N *                cleared in the Graphics Accelerator Interrupt Cause Register (GAMPICR).
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: Address caused portection error
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMemoryProtecErr_CaptAddr(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetGeneralPurposeRegister
N *
N * Purpose:       Set one of 32 Purpose Registers of GA, which are used to define  
N *                the required parameters for the triggered engine.
N *                Read access is possible all the time, write access is only allowed
N *                if no engine is currently operating (GASR.BUSY=0). Nevertheless, 
N *                it is recommended to configure these registers using Command Lists.
N *
N * Inputs:        u8RegNo      No. of Register (0..31)
N *                u32RegValue: Register value to be written
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo or GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t u32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetGeneralPurposeRegister
N *
N * Purpose:       Get content of one of 32 Purpose Registers of GA, which are used   
N *                to define the required parameters for the triggered engine.
N *
N * Inputs:        u8RegNo       No. of Register (0..31)
N *                pu32RegValue: Pointer to Register value to be read
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo NULL pointer 
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_GetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t* pu32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetCommandRegisterLowHigh
N *
N * Purpose:       Set command register directly (as alternative to command List).
N *                For this mode, user should take care that GA should be ready 
N *                (not busy) before writng in registers. 
N *
N * Inputs:        u32LowValue:  Lower 32 bits of 64 bits command (0..31)
N *                u32HighValue: Higher 32 bits of 64 bits command (32..63)
N *                NOTE:
N *                  1) API should write first Lowe Part and then higher Part. 
N *                    By writing of higehr word thorugh API GA will be trigegred 
N *                    to execute command if it was not busy before.
N *                  2) Related general purpose registers for command should be
N *                     written before, 
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetCommandRegisterLowHigh (uint32_t u32LowValue,  uint32_t u32HighValue);
N
N
N#endif /* _EXTENDED_GA_APIS_DISABLED_ */
N
N#endif /* GA_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 28 "..\..\..\..\mw\inc\fbuffer.h" 2
N
N/**********************************************
N*               Defs                          *
N**********************************************/
N
N
N/**********************************************
N*               Structs                       *
N**********************************************/
N
N
N/**********************************************
N*         External variables                  *
N**********************************************/
N/* Command-Lists */
Nextern ga_list_st* pstExecList;
Nextern ga_list_st* pstWriteList;
N
N
N#ifdef LAYERA_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERA_EFF_WIDTH (GDC0_LAYERA_WIDTH + GDC1_LAYERA_WIDTH)
N#else
N    #define GDC0_LAYERA_EFF_WIDTH (GDC0_LAYERA_WIDTH)
N#endif
N
N#ifdef LAYERB_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERB_EFF_WIDTH (GDC0_LAYERB_WIDTH + GDC1_LAYERB_WIDTH)
N#else
N    #define GDC0_LAYERB_EFF_WIDTH (GDC0_LAYERB_WIDTH)
N#endif
N
N#ifdef LAYERC_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERC_EFF_WIDTH (GDC0_LAYERC_WIDTH + GDC1_LAYERC_WIDTH)
N#else
N    #define GDC0_LAYERC_EFF_WIDTH (GDC0_LAYERC_WIDTH)
N#endif
N
N#ifdef LAYERD_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERD_EFF_WIDTH (GDC0_LAYERD_WIDTH + GDC1_LAYERD_WIDTH)
N#else
N    #define GDC0_LAYERD_EFF_WIDTH (GDC0_LAYERD_WIDTH)
N#endif
N
N#ifdef LAYERE_FULL_SIZE
S/* For asymmetric GDC0/1 setup, set the effective layer width */
S    #define GDC0_LAYERE_EFF_WIDTH (GDC0_LAYERE_WIDTH + GDC1_LAYERE_WIDTH)
N#else
N    #define GDC0_LAYERE_EFF_WIDTH (GDC0_LAYERE_WIDTH)
N#endif
N
N/* GDC 0 Frame Buffers */
N#if (GDCx0 == ON)
X#if (1 == 1)
N
N/* GDC0 framebuffer */
N#if (GDC0_LAYER_A == ON)
X#if (1 == 1)
N		#if(GDC0_LAYER_A_COLOR_FORMAT != FMT_OFF)
X		#if((1) != (0))
N				#if(GDC0_LAYER_A_COLOR_FORMAT == FMT_RGB16)
X				#if((1) == (4))
S						extern  uint16_t FBuffRGB_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S						#if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
S								extern  uint16_t FBuffRGB_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
S						#endif
N				#else
N						extern  uint32_t FBuffRGBA_GDC0_A0 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X						extern  uint32_t FBuffRGBA_GDC0_A0 [(1280)*420];
N						#if(GDC0_LAYER_A_DOUBLEFUFFERING == ON)
X						#if(1 == 1)
N								extern  uint32_t FBuffRGBA_GDC0_A1 [GDC0_LAYERA_EFF_WIDTH*GDC0_LAYERA_HEIGHT];
X								extern  uint32_t FBuffRGBA_GDC0_A1 [(1280)*420];
N						#endif
N				#endif
N		#endif
N#endif
N
N#if (GDC0_LAYER_B == ON)
X#if (0 == 1)
S		#if(GDC0_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_B0 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#if(GDC0_LAYER_B_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_B1 [GDC0_LAYERB_EFF_WIDTH*GDC0_LAYERB_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if (GDC0_LAYER_C == ON)
X#if (0 == 1)
S		#if(GDC0_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_C0 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#if(GDC0_LAYER_C_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_C1 [GDC0_LAYERC_EFF_WIDTH*GDC0_LAYERC_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if(GDC0_LAYER_D == ON)
X#if(0 == 1)
S		#if(GDC0_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_D0 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#if(GDC0_LAYER_D_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_D1 [GDC0_LAYERD_EFF_WIDTH*GDC0_LAYERD_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#if(GDC0_LAYER_E == ON)
X#if(0 == 1)
S		#if(GDC0_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FBuffRGB_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S						extern  uint16_t FBuffRGB_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#endif
S		#else
S				extern  uint32_t FBuffRGBA_GDC0_E0 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#if(GDC0_LAYER_E_DOUBLEFUFFERING == ON)
S						extern  uint32_t FBuffRGBA_GDC0_E1 [GDC0_LAYERE_EFF_WIDTH*GDC0_LAYERE_HEIGHT];
S				#endif
S		#endif
N#endif
N
N#endif /* GDC0 */
N
N
N/* GDC 1 Frame Buffers */
N#if (GDCx1 == ON)
X#if (0 == 1)
S
S#ifndef LAYERA_FULL_SIZE
S    /* GDC1 framebuffer */
S    #if(GDC1_LAYER_A == ON)
S            #if(GDC1_LAYER_A_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_A0 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #if(GDC1_LAYER_A_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_A1 [GDC1_LAYERA_HEIGHT*GDC1_LAYERA_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERB_FULL_SIZE
S    #if(GDC1_LAYER_B == ON)
S            #if(GDC1_LAYER_B_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_B0 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #if(GDC1_LAYER_B_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_B1 [GDC1_LAYERB_HEIGHT*GDC1_LAYERB_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERC_FULL_SIZE
S    #if(GDC1_LAYER_C == ON)
S            #if(GDC1_LAYER_C_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_C0 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #if(GDC1_LAYER_C_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_C1 [GDC1_LAYERC_HEIGHT*GDC1_LAYERC_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERD_FULL_SIZE
S    #if(GDC1_LAYER_D == ON)
S            #if(GDC1_LAYER_D_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_D0 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #if(GDC1_LAYER_D_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_D1 [GDC1_LAYERD_HEIGHT*GDC1_LAYERD_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
S
S#ifndef LAYERE_FULL_SIZE
S    #if(GDC1_LAYER_E == ON)
S            #if(GDC1_LAYER_E_COLOR_FORMAT == FMT_RGB16)
S                    extern  uint16_t FBuffRGB_GDC1_E0 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                            extern  uint16_t FBuffRGB_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #endif
S            #else
S                    extern  uint32_t FBuffRGBA_GDC1_E0 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #if(GDC1_LAYER_E_DOUBLEFUFFERING == ON)
S                            extern  uint32_t FBuffRGBA_GDC1_E1 [GDC1_LAYERE_HEIGHT*GDC1_LAYERE_WIDTH];
S                    #endif
S            #endif
S    #endif
S#endif
N#endif /* GDC1 */
N
N/* FG Frame Buffers */
N#if (FRAMEGRABBER == ON)
X#if (FRAMEGRABBER == 1)
S
S#if(FG_BUFFER_1 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_0 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
S#if(FG_BUFFER_2 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_1 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
S#if(FG_BUFFER_3 == ON)
S		#if(FG_BUFFER_COLOR_FORMAT == FMT_RGB16)
S				extern  uint16_t FG_RGBBuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#else
S				extern  uint32_t FG_RGBABuff_3 [FG_BUFFER_HEIGHT*FG_BUFFER_WIDTH];
S		#endif
S#endif
S
N#endif /* FG */
N
N
N#endif /* FBUFFER_H */
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 32 "..\..\src\boardcfg.c" 2
N#include "boardcfg.h"
N#include "core.h"
L 1 "..\..\..\..\common\inc\core.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core access utilities definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Core
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.11 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CORE_H
N#define CORE_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                     /* Core specific primitive type definitions */
N#include "cr4_pmu.h"
L 1 "..\..\..\..\cortex_r4_keil\inc\cr4_pmu.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Performance monitor unit routines based on ARM's V7 sample code
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : TSM-SHE Firmware System Longrun Test (Cortex-R4)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.5 $
N*   DATE        : $Date: 2015/05/04 09:07:16 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _CR4_PMU_H
N#define _CR4_PMU_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                       /* Core specific primitive type definitions */
N
N/*********************************************/
N
N
N/**********************************************
N*             Constants & Macros              *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      u32CR4_GetPMN
N *
N * Purpose:       Returns the number of progammable counters
N *
N * Inputs:        none
N *
N * Outputs:       Programmable counters count
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32CR4_GetPMN(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_PMNConfig
N *
N * Purpose:       Sets the event for a programmable counter to record
N *
N * Inputs:        u32Counter: Which counter to program  (e.g. 0 for PMN0, 1 for PMN1)
N *                u32Even:    The event code (ARM Architecture Reference Manual)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_PMNConfig(uint32_t u32Counter, uint32_t u32Event);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_SetCntDivider
N *
N * Purpose:       Enables/disables the divider (1/64) on CCNT
N *
N * Inputs:        u32Divider: 0 - disable, all others enable
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_SetCntDivider(uint32_t u32Divider);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_EnablePMU
N *
N * Purpose:       Global PMU enable
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnablePMU(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisablePMU
N *
N * Purpose:       Global PMU disable
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisablePMU(void);
N
N
N /****************************************************************************
N *
N * Function:      vCR4_EnableCCNT
N *
N * Purpose:       Enable the cycle counter (CCNT)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnableCCNT(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisableCCNT
N *
N * Purpose:       Disable the cycle counter (CCNT)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisableCCNT(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_EnablePMN
N *
N * Purpose:       Enable PMN{n}
N *
N * Inputs:        u32Counter: The counter to enable (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnablePMN(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisablePMN
N *
N * Purpose:       Disable PMN{n}
N *
N * Inputs:        u32Counter: The counter to disable (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisablePMN(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      uCR4_32ReadCCNT
N *
N * Purpose:       Returns the value of CCNT
N *
N * Inputs:        none
N *
N * Outputs:       Cycle counter value
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32CR4_ReadCCNT(void);
N
N
N/****************************************************************************
N *
N * Function:      u32CR4_ReadPMN
N *
N * Purpose:       Returns the value of PMN{n}
N *
N * Inputs:        u32Counter: The counter to read (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       PMNn counter
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32CR4_ReadPMN(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      u32CR4_ReadFlags
N *
N * Purpose:       Returns the value of the overflow flags
N *
N * Inputs:        none
N *
N * Outputs:       Overflow flags
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32CR4_ReadFlags(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_WriteFlags
N *
N * Purpose:       Writes the overflow flags
N *
N * Inputs:        u32Flags: flags to write
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_WriteFlags(uint32_t u32Flags);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_EnableCCNTIrq
N *
N * Purpose:       Enables interrupt generation on overflow of the CCNT
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnableCCNTIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisableCCNTIrq
N *
N * Purpose:       Disables interrupt generation on overflow of the CCNT
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisableCCNTIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_EnablePmnIrq
N *
N * Purpose:       Enables interrupt generation on overflow of PMN{x}
N *
N * Inputs:        u32Counter: The counter to enable the interrupt for (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnablePmnIrq(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisablePMNIrq
N *
N * Purpose:       Disables interrupt generation on overflow of PMN{x}
N *
N * Inputs:        u32Counter: The counter to disable the interrupt for (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisablePMNIrq(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_ResetPMN
N *
N * Purpose:       Resets the programmable counters
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_ResetPMN(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_ResetPMN
N *
N * Purpose:       Resets the CCNT
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_ResetCCNT(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_ResetPMN
N *
N * Purpose:       Writes to software increment register
N *
N * Inputs:        u32Counter: The counter to increment (e.g. 0 for PMN0, 1 for PMN1)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_PMUSoftwareIncrement(uint32_t u32Counter);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_EnablePMUUserAccess
N *
N * Purpose:       Enables User mode access to the PMU (must be called in a priviledged mode)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_EnablePMUUserAccess(void);
N
N
N/****************************************************************************
N *
N * Function:      vCR4_DisablePMUUserAccess
N *
N * Purpose:       Disables User mode access to the PMU (must be called in a priviledged mode)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCR4_DisablePMUUserAccess(void);
N
N
N#endif /* _CR4_PMU_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\common\inc\core.h" 2
N
N/*********************************************/
N
N
N/**********************************************
N*             Constants & Macros              *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/**********************************************/
N
N/* Physical translation in un-cached area */
N#define PHYSICAL_ADDR_MASK                  0xFFFFFFFFU
N#define PHYSICAL(addr)                      (((uint32_t)(addr) & PHYSICAL_ADDR_MASK))
N
N/* copy function */
N#define asm_copyfunction                    (asm_copy_word)
N#define asm_copyfunction_hword              (asm_copy_hword)
N#define asm_copyfunction_byte               (asm_copy_byte)
N
N/* PMU enable */
N#define PMU_ENABLE()                        (vCR4_EnablePMU())
N
N/* Timer Enable */
N#define TIMER_ENABLE()                      (vCR4_EnableCCNT())
N
N/* Timer Reset */
N#define TIMER_RESET()                       (vCR4_ResetCCNT())
N
N/* Timer Get */
N#define TIMER_GET()                         (u32CR4_ReadCCNT())
N
N/*********************************************/
N
N
N/**********************************************
N*                 Enumerations                *
N**********************************************/
N
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      __DSB
N *
N * Purpose:       Data barrier
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid __DSB(void);
N
N
N/****************************************************************************
N *
N * Function:      __ISB
N *
N * Purpose:       Instruction barrier
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid __ISB(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_enable_core_int
N *
N * Purpose:       Enable core interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_enable_core_int(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_disable_core_int
N *
N * Purpose:       Disable core interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_disable_core_int(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_enable_core_fast_int
N *
N * Purpose:       Enable core fast interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_enable_core_fast_int(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_disable_core_fast_int
N *
N * Purpose:       Disable core fast interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_disable_core_fast_int(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_enable_core_vic_port
N *
N * Purpose:       Enable VIC port
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_enable_core_vic_port(void);
N
N
N/****************************************************************************
N *
N * Function:      asm_disable_core_vic_port
N *
N * Purpose:       Disable VIC port
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid asm_disable_core_vic_port(void);
N
N
N#endif /* CORE_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 34 "..\..\src\boardcfg.c" 2
N#include "dispparams.h"
L 1 "..\..\..\..\mw\inc\dispparams.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Display parameter
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : GDC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.13 $
N*   DATE        : $Date: 2015/06/05 10:52:12 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef DISP_PARAM_H
N#define DISP_PARAM_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "config.h"
N
N
N/*****************************************************************************************
N*
N*                        D I S P L A Y    -    P A R A M E T E R S
N*
N*****************************************************************************************/
N
N/*****************************************************************************************
N* GDC0
N*****************************************************************************************/
N#if(DISPLAY_RESOLUTION_0 == QVGA_RES_50)
X#if((34) == (0))
S#define HPulseWidth_0     (51)      /* Horizontal pulse width */
S#define HPeriod_0        (424)      /* line period            */
S#define HBackPorch_0      (35)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse with    */
S#define VPeriod_0        (262)      /* Vertical period        */
S#define VBackPorch_0      (16)      /* Wait after V-Sync      */
S#define ClockFrequency_0 (162)      /* 5,5 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == QVGA_RES_60)
X#if((34) == (1))
S#define HPulseWidth_0     (51)      /* Horizontal pulse width */
S#define HPeriod_0        (424)      /* line period            */
S#define HBackPorch_0      (35)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse with    */
S#define VPeriod_0        (262)      /* Vertical period        */
S#define VBackPorch_0      (16)      /* Wait after V-Sync      */
S#define ClockFrequency_0 (136)      /* 6,1 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == HNTSC_RES_60)
X#if((34) == (2))
S#define HPulseWidth_0     (20)      /* Horizontal pulse width */
S#define HPeriod_0        (607)      /* line period            */
S#define HBackPorch_0      (15)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (247)      /* Vertical period        */
S#define VBackPorch_0       (2)      /* Wait after V-Sync      */
S#define ClockFrequency_0 (100)      /* 7,4 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == HVGA_RES_50)
X#if((34) == (3))
S#define HPulseWidth_0      (5)      /* Horizontal pulse width */
S#define HPeriod_0        (709)      /* line period            */
S#define HBackPorch_0      (37)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (251)      /* Vertical period        */
S#define VBackPorch_0       (7)      /* Wait after V-Sync      */
S#define ClockFrequency_0 (101)      /* 8,9 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == HVGA_RES_60)
X#if((34) == (4))
S#define HPulseWidth_0      (5)      /* Horizontal pulse width */
S#define HPeriod_0        (709)      /* line period            */
S#define HBackPorch_0      (37)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (251)      /* Vertical period        */
S#define VBackPorch_0       (7)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (85)      /* 10,6 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == WIDE_RES_50)
X#if((34) == (5))
S#define HPulseWidth_0     (96)      /* Horizontal pulse width */
S#define HPeriod_0       (1230)      /* line period            */
S#define HBackPorch_0      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (270)      /* Vertical period        */
S#define VBackPorch_0      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (54)      /* 16,6 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == WIDE_RES_60)
X#if((34) == (6))
S#define HPulseWidth_0     (96)      /* Horizontal pulse width */
S#define HPeriod_0       (1230)      /* line period            */
S#define HBackPorch_0      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (270)      /* Vertical period        */
S#define VBackPorch_0      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (45)      /* 20,0 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == VGA_RES_50)
X#if((34) == (7))
S#define HPulseWidth_0     (96)      /* Horizontal pulse width */
S#define HPeriod_0        (800)      /* line period            */
S#define HBackPorch_0      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (43)      /* 21,0 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_0 == VGA_RES_60)
X#if((34) == (8))
S#define HPulseWidth_0     (96)      /* Horizontal pulse width */
S#define HPeriod_0        (800)      /* line period            */
S#define HBackPorch_0      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (36)      /* 25,0 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == WVGA_RES_45)
X#if ((34) == (9))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1020)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (5)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (37)      /* 24,32 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == WVGA_RES_50)
X#if ((34) == (10))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (5)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (30)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (33)      /* 27,27 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == WVGA_RES_55)
X#if ((34) == (11))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (5)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (29)      /* 31,03 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == WVGA_RES_60)
X#if ((34) == (12))
S#if 1
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (5)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (30)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (27)      /* 33,3 MHz               */
S#else
S#define HPulseWidth_0    (10)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (46)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (23)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (27)      /* 33,3 MHz               */
S#endif
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SVGA_RES_50)
X#if ((34) == (13))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1024)      /* line period            */
S#define HBackPorch_0      (58)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (4)      /* Vertical pulse width   */
S#define VPeriod_0        (625)      /* Vertical period        */
S#define VBackPorch_0      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (28)      /* 32,1 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SVGA_RES_60)
X#if ((34) == (14))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1024)      /* line period            */
S#define HBackPorch_0      (58)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (4)      /* Vertical pulse width   */
S#define VPeriod_0        (625)      /* Vertical period        */
S#define VBackPorch_0      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (23)      /* 39,1 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == DVGA_RES_50)
X#if ((34) == (15))
S#define HPulseWidth_0    (112)	    /* Horizontal pulse width */
S#define HPeriod_0       (1660)	    /* line period           	*/
S#define HBackPorch_0     (249)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)	    /* Vertical pulse width   */
S#define VPeriod_0        (525)	    /* Vertical period        */
S#define VBackPorch_0      (40)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (21)      /* 42,8 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == DVGA_RES_60)
X#if ((34) == (16))
S#define HPulseWidth_0    (112)	    /* Horizontal pulse width */
S#define HPeriod_0       (1660)	    /* line period           	*/
S#define HBackPorch_0     (249)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)	    /* Vertical pulse width   */
S#define VPeriod_0        (525)	    /* Vertical period        */
S#define VBackPorch_0      (40)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (17)      /* 52,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == DVGA_1_RES_50)
X#if ((34) == (17))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1386)	    /* line period           	*/
S#define HBackPorch_0      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)	    /* Vertical pulse width   */
S#define VPeriod_0        (500)	    /* Vertical period        */
S#define VBackPorch_0      (10)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (26)      /* 34,6 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == DVGA_1_RES_60)
X#if ((34) == (18))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1386)	    /* line period           	*/
S#define HBackPorch_0      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)	    /* Vertical pulse width   */
S#define VPeriod_0        (500)	    /* Vertical period        */
S#define VBackPorch_0      (10)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (22)      /* 40,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == XGA_RES_50)
X#if ((34) == (19))
S#define HPulseWidth_0    (136)	    /* Horizontal pulse width */
S#define HPeriod_0       (1344)	    /* line period            */
S#define HBackPorch_0     (160)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)	    /* Vertical pulse width   */
S#define VPeriod_0        (806)	    /* Vertical period        */
S#define VBackPorch_0      (29)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (17)      /* 52,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == XGA_RES_60)
X#if ((34) == (20))
S#define HPulseWidth_0    (136)	    /* Horizontal pulse width */
S#define HPeriod_0       (1344)	    /* line period            */
S#define HBackPorch_0     (160)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)	    /* Vertical pulse width   */
S#define VPeriod_0        (806)	    /* Vertical period        */
S#define VBackPorch_0      (29)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (14)      /* 64,3 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SXGA_RES_50)
X#if ((34) == (21))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1386)	    /* line period           	*/
S#define HBackPorch_0      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)	    /* Vertical pulse width   */
S#define VPeriod_0       (1050)	    /* Vertical period        */
S#define VBackPorch_0      (17)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (13)      /* 69,23 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SXGA_RES_60)
X#if ((34) == (22))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1386)	    /* line period           	*/
S#define HBackPorch_0      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)	    /* Vertical pulse width   */
S#define VPeriod_0       (1050)	    /* Vertical period        */
S#define VBackPorch_0      (17)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (11)      /* 81,81 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == HD_RES)
X#if ((34) == (23))
S#define HPulseWidth_0     (10)      /* Horizontal pulse width */
S#define HPeriod_0       (1386)      /* line period            */
S#define HBackPorch_0      (20)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)      /* Vertical pulse width   */
S#define VPeriod_0        (800)      /* Vertical period        */
S#define VBackPorch_0      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (13/*16*/)      /* 56,25 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == HITACHI_TX31D06VM2AAA_RES_50)
X#if ((34) == (24))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1325)	    /* line period            */
S#define HBackPorch_0      (17)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (1)	    /* Vertical pulse width   */
S#define VPeriod_0        (483)	    /* Vertical period        */
S#define VBackPorch_0       (1)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (28)      /* 32,0 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == HITACHI_TX31D06VM2AAA_RES_60)
X#if ((34) == (25))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1325)	    /* line period            */
S#define HBackPorch_0      (17)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (1)	    /* Vertical pulse width   */
S#define VPeriod_0        (483)	    /* Vertical period        */
S#define VBackPorch_0       (1)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (24)      /* 37,5 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SHARP_1280_422_50)
X#if ((34) == (26))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1536)	    /* line period            */
S#define HBackPorch_0     (194)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (1)	    /* Vertical pulse width   */
S#define VPeriod_0        (480)	    /* Vertical period        */
S#define VBackPorch_0      (35)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (24)      /* 37,5 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == SHARP_1280_422_60)
X#if ((34) == (27))
S#define HPulseWidth_0     (10)	    /* Horizontal pulse width */
S#define HPeriod_0       (1536)	    /* line period            */
S#define HBackPorch_0     (194)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (1)	    /* Vertical pulse width   */
S#define VPeriod_0        (480)	    /* Vertical period        */
S#define VBackPorch_0      (35)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (20)      /* 45 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == TX18D35VM0AAA_50)
X#if ((34) == (28))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (33)      /* 27,27 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == TX18D35VM0AAA_60)
X#if ((34) == (29))
S#define HPulseWidth_0    (128)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (27)      /* 33,3 MHz               */
N#endif
N
N/* Settings obtained from online resources for 960*720 @ 50hz refresh rate*/
N#if (DISPLAY_RESOLUTION_0 == RES_960_720_50)
X#if ((34) == (30))
S#define HPulseWidth_0    (168)	    /* Horizontal pulse width */
S#define HPeriod_0       (1192)	    /* line period            */
S#define HBackPorch_0      (32)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (6)	    /* Vertical pulse width   */
S#define VPeriod_0        (760)	    /* Vertical period        */
S#define VBackPorch_0      (20)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (20)      /* 45,0 MHz              */
N#endif
N#if (DISPLAY_RESOLUTION_0 == AT070TN94_50)
X#if ((34) == (31))
S#define HPulseWidth_0    (10)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (46)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (23)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (33)      /* 27 MHz               */
N#endif
N#if (DISPLAY_RESOLUTION_0 == AT070TN94_60)
X#if ((34) == (32))
S#define HPulseWidth_0    (32)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (46)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (23)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (27)      /* 33,3 MHz               */
N#endif
N#if (DISPLAY_RESOLUTION_0 == TC90195_60)
X#if ((34) == (33))
S#define HPulseWidth_0    (32)      /* Horizontal pulse width */
S#define HPeriod_0       (1056)      /* line period            */
S#define HBackPorch_0      (46)      /* Wait after H-sync.     */
S#define VPulseWidth_0      (2)      /* Vertical pulse width   */
S#define VPeriod_0        (525)      /* Vertical period        */
S#define VBackPorch_0      (23)      /* Wait after V-Sync      */
S#define ClockFrequency_0  (27)      /* 33,3 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_0 == CLAA121WB)
X#if ((34) == (34))
N#define HPulseWidth_0    (112)	    /* Horizontal pulse width */
N#define HPeriod_0       (1660)	    /* line period           	*/
N#define HBackPorch_0     (249)	    /* Wait after H-sync.     */
N#define VPulseWidth_0      (10)	    /* Vertical pulse width   */
N#define VPeriod_0        (525)	    /* Vertical period        */
N#define VBackPorch_0      (40)	    /* Wait after V-Sync      */
N#define ClockFrequency_0  (17)      /* 52,9 MHz               */
N#endif
N
N
N#if (DISPLAY_RESOLUTION_0 == CLAA088WA)
X#if ((34) == (35))
S#define HPulseWidth_0     (133)	    /* Horizontal pulse width */
S#define HPeriod_0       (1486)	    /* line period            */
S#define HBackPorch_0     (67)	    /* Wait after H-sync.     */
S#define VPulseWidth_0      (53)	    /* Vertical pulse width   */
S#define VPeriod_0        (575)	    /* Vertical period        */
S#define VBackPorch_0      (35)	    /* Wait after V-Sync      */
S#define ClockFrequency_0  (20)      /* 45 MHz    */
N#endif
N
N
N/* Set display size */
N#if(DISPLAY_RESOLUTION_0 == QVGA_RES_50)
X#if((34) == (0))
S		#define GDC0_DISPLAY_WIDTH   (320)
S		#define GDC0_DISPLAY_HEIGHT  (240)
S#elif(DISPLAY_RESOLUTION_0 == QVGA_RES_60)
X#elif((34) == (1))
S		#define GDC0_DISPLAY_WIDTH   (320)
S		#define GDC0_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_0 == HNTSC_RES_60)
X#elif ((34) == (2))
S		#define GDC0_DISPLAY_WIDTH   (480)
S		#define GDC0_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_0 == HVGA_RES_50)
X#elif ((34) == (3))
S		#define GDC0_DISPLAY_WIDTH   (640)
S		#define GDC0_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_0 == HVGA_RES_60)
X#elif ((34) == (4))
S		#define GDC0_DISPLAY_WIDTH   (640)
S		#define GDC0_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_0 == WIDE_RES_50)
X#elif ((34) == (5))
S		#define GDC0_DISPLAY_WIDTH  (1074)
S		#define GDC0_DISPLAY_HEIGHT  (224)
S#elif (DISPLAY_RESOLUTION_0 == WIDE_RES_60)
X#elif ((34) == (6))
S		#define GDC0_DISPLAY_WIDTH  (1074)
S		#define GDC0_DISPLAY_HEIGHT  (224)
S#elif (DISPLAY_RESOLUTION_0 == VGA_RES_50)
X#elif ((34) == (7))
S		#define GDC0_DISPLAY_WIDTH   (640)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == VGA_RES_60)
X#elif ((34) == (8))
S		#define GDC0_DISPLAY_WIDTH   (640)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == WVGA_RES_45)
X#elif ((34) == (9))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == WVGA_RES_50)
X#elif ((34) == (10))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == WVGA_RES_55)
X#elif ((34) == (11))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == WVGA_RES_60)
X#elif ((34) == (12))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == SVGA_RES_50)
X#elif ((34) == (13))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (600)
S#elif (DISPLAY_RESOLUTION_0 == SVGA_RES_60)
X#elif ((34) == (14))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (600)
S#elif (DISPLAY_RESOLUTION_0 == DVGA_RES_50)
X#elif ((34) == (15))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == DVGA_RES_60)
X#elif ((34) == (16))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == DVGA_1_RES_50)
X#elif ((34) == (17))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == DVGA_1_RES_60)
X#elif ((34) == (18))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == XGA_RES_50)
X#elif ((34) == (19))
S		#define GDC0_DISPLAY_WIDTH  (1024)
S		#define GDC0_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_0 == XGA_RES_60)
X#elif ((34) == (20))
S		#define GDC0_DISPLAY_WIDTH  (1024)
S		#define GDC0_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_0 == SXGA_RES_50)
X#elif ((34) == (21))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_0 == SXGA_RES_60)
X#elif ((34) == (22))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_0 == HD_RES)
X#elif ((34) == (23))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT ( 720)
S#elif (DISPLAY_RESOLUTION_0 == HITACHI_TX31D06VM2AAA_RES_50)
X#elif ((34) == (24))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == HITACHI_TX31D06VM2AAA_RES_60)
X#elif ((34) == (25))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == SHARP_1280_422_50)
X#elif ((34) == (26))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (422)
S#elif (DISPLAY_RESOLUTION_0 == SHARP_1280_422_60)
X#elif ((34) == (27))
S		#define GDC0_DISPLAY_WIDTH  (1280)
S		#define GDC0_DISPLAY_HEIGHT  (422)
S#elif (DISPLAY_RESOLUTION_0 == TX18D35VM0AAA_50)
X#elif ((34) == (28))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == TX18D35VM0AAA_60)
X#elif ((34) == (29))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == RES_960_720_50)
X#elif ((34) == (30))
S		#define GDC0_DISPLAY_WIDTH  (960)
S		#define GDC0_DISPLAY_HEIGHT (720)
S#elif (DISPLAY_RESOLUTION_0 == AT070TN94_50)
X#elif ((34) == (31))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == AT070TN94_60)
X#elif ((34) == (32))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_0 == TC90195_60)
X#elif ((34) == (33))
S		#define GDC0_DISPLAY_WIDTH   (800)
S		#define GDC0_DISPLAY_HEIGHT  (480)
N#elif (DISPLAY_RESOLUTION_0 == CLAA121WB)
X#elif ((34) == (34))
N		#define GDC0_DISPLAY_WIDTH   (1280)
N		#define GDC0_DISPLAY_HEIGHT  (420)	
N#elif (DISPLAY_RESOLUTION_0 == CLAA088WA)
S		#define GDC0_DISPLAY_WIDTH   (1280)
S		#define GDC0_DISPLAY_HEIGHT  (480)	
S
S#else
S		#error Resolution not Defined and/or not supported !!!
N#endif
N
N
N
N/*****************************************************************************************
N* GDC1
N*****************************************************************************************/
N#if(DISPLAY_RESOLUTION_1 == QVGA_RES_50)
X#if((1) == (0))
S#define HPulseWidth_1     (51)      /* Horizontal pulse width */
S#define HPeriod_1        (424)      /* line period            */
S#define HBackPorch_1      (35)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse with    */
S#define VPeriod_1        (262)      /* Vertical period        */
S#define VBackPorch_1      (16)      /* Wait after V-Sync      */
S#define ClockFrequency_1 (162)      /* 5,5 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == QVGA_RES_60)
X#if((1) == (1))
N#define HPulseWidth_1     (51)      /* Horizontal pulse width */
N#define HPeriod_1        (424)      /* line period            */
N#define HBackPorch_1      (35)      /* Wait after H-sync.     */
N#define VPulseWidth_1      (2)      /* Vertical pulse with    */
N#define VPeriod_1        (262)      /* Vertical period        */
N#define VBackPorch_1      (16)      /* Wait after V-Sync      */
N#define ClockFrequency_1 (136)      /* 6,1 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == HNTSC_RES_60)
X#if((1) == (2))
S#define HPulseWidth_1     (20)      /* Horizontal pulse width */
S#define HPeriod_1        (607)      /* line period            */
S#define HBackPorch_1      (15)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (247)      /* Vertical period        */
S#define VBackPorch_1       (2)      /* Wait after V-Sync      */
S#define ClockFrequency_1 (100)      /* 7,4 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == HVGA_RES_50)
X#if((1) == (3))
S#define HPulseWidth_1      (5)      /* Horizontal pulse width */
S#define HPeriod_1        (709)      /* line period            */
S#define HBackPorch_1      (37)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (251)      /* Vertical period        */
S#define VBackPorch_1       (7)      /* Wait after V-Sync      */
S#define ClockFrequency_1 (101)      /* 8,9 MHz                */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == HVGA_RES_60)
X#if((1) == (4))
S#define HPulseWidth_1      (5)      /* Horizontal pulse width */
S#define HPeriod_1        (709)      /* line period            */
S#define HBackPorch_1      (37)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (251)      /* Vertical period        */
S#define VBackPorch_1       (7)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (85)      /* 10,6 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == WIDE_RES_50)
X#if((1) == (5))
S#define HPulseWidth_1     (96)      /* Horizontal pulse width */
S#define HPeriod_1       (1230)      /* line period            */
S#define HBackPorch_1      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (270)      /* Vertical period        */
S#define VBackPorch_1      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (54)      /* 16,6 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == WIDE_RES_60)
X#if((1) == (6))
S#define HPulseWidth_1     (96)      /* Horizontal pulse width */
S#define HPeriod_1       (1230)      /* line period            */
S#define HBackPorch_1      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (270)      /* Vertical period        */
S#define VBackPorch_1      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (45)      /* 20,0 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == VGA_RES_50)
X#if((1) == (7))
S#define HPulseWidth_1     (96)      /* Horizontal pulse width */
S#define HPeriod_1        (800)      /* line period            */
S#define HBackPorch_1      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (43)      /* 21,0 MHz               */
N#endif
N
N#if(DISPLAY_RESOLUTION_1 == VGA_RES_60)
X#if((1) == (8))
S#define HPulseWidth_1     (96)      /* Horizontal pulse width */
S#define HPeriod_1        (800)      /* line period            */
S#define HBackPorch_1      (48)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (33)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (36)      /* 25,0 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == WVGA_RES_45)
X#if ((1) == (9))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1020)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (5)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (37)      /* 24,32 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == WVGA_RES_50)
X#if ((1) == (10))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1056)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (5)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (30)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (33)      /* 27,27 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == WVGA_RES_55)
X#if ((1) == (11))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1056)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (5)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (29)      /* 31,03 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == WVGA_RES_60)
X#if ((1) == (12))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1056)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (5)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (30)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (27)      /* 33,3 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SVGA_RES_50)
X#if ((1) == (13))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1024)      /* line period            */
S#define HBackPorch_1      (58)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (4)      /* Vertical pulse width   */
S#define VPeriod_1        (625)      /* Vertical period        */
S#define VBackPorch_1      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (28)      /* 32,1 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SVGA_RES_60)
X#if ((1) == (14))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1024)      /* line period            */
S#define HBackPorch_1      (58)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (4)      /* Vertical pulse width   */
S#define VPeriod_1        (625)      /* Vertical period        */
S#define VBackPorch_1      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (23)      /* 39,1 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == DVGA_RES_50)
X#if ((1) == (15))
S#define HPulseWidth_1    (112)	    /* Horizontal pulse width */
S#define HPeriod_1       (1660)	    /* line period           	*/
S#define HBackPorch_1     (249)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)	    /* Vertical pulse width   */
S#define VPeriod_1        (525)	    /* Vertical period        */
S#define VBackPorch_1      (40)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (21)      /* 42,8 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == DVGA_RES_60)
X#if ((1) == (16))
S#define HPulseWidth_1    (112)	    /* Horizontal pulse width */
S#define HPeriod_1       (1660)	    /* line period           	*/
S#define HBackPorch_1     (249)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)	    /* Vertical pulse width   */
S#define VPeriod_1        (525)	    /* Vertical period        */
S#define VBackPorch_1      (40)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (17)      /* 52,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == DVGA_1_RES_50)
X#if ((1) == (17))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1386)	    /* line period           	*/
S#define HBackPorch_1      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)	    /* Vertical pulse width   */
S#define VPeriod_1        (500)	    /* Vertical period        */
S#define VBackPorch_1      (10)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (26)      /* 34,6 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == DVGA_1_RES_60)
X#if ((1) == (18))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1386)	    /* line period           	*/
S#define HBackPorch_1      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)	    /* Vertical pulse width   */
S#define VPeriod_1        (500)	    /* Vertical period        */
S#define VBackPorch_1      (10)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (22)      /* 40,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == XGA_RES_50)
X#if ((1) == (19))
S#define HPulseWidth_1    (136)	    /* Horizontal pulse width */
S#define HPeriod_1       (1344)	    /* line period            */
S#define HBackPorch_1     (160)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)	    /* Vertical pulse width   */
S#define VPeriod_1        (806)	    /* Vertical period        */
S#define VBackPorch_1      (29)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (17)      /* 52,9 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == XGA_RES_60)
X#if ((1) == (20))
S#define HPulseWidth_1    (136)	    /* Horizontal pulse width */
S#define HPeriod_1       (1344)	    /* line period            */
S#define HBackPorch_1     (160)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)	    /* Vertical pulse width   */
S#define VPeriod_1        (806)	    /* Vertical period        */
S#define VBackPorch_1      (29)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (14)      /* 64,3 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SXGA_RES_50)
X#if ((1) == (21))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1386)	    /* line period           	*/
S#define HBackPorch_1      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)	    /* Vertical pulse width   */
S#define VPeriod_1       (1050)	    /* Vertical period        */
S#define VBackPorch_1      (17)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (13)      /* 69,23 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SXGA_RES_60)
X#if ((1) == (22))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1386)	    /* line period           	*/
S#define HBackPorch_1      (20)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)	    /* Vertical pulse width   */
S#define VPeriod_1       (1050)	    /* Vertical period        */
S#define VBackPorch_1      (17)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (11)      /* 81,81 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == HD_RES)
X#if ((1) == (23))
S#define HPulseWidth_1     (10)      /* Horizontal pulse width */
S#define HPeriod_1       (1386)      /* line period            */
S#define HBackPorch_1      (20)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)      /* Vertical pulse width   */
S#define VPeriod_1        (800)      /* Vertical period        */
S#define VBackPorch_1      (17)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (13/*16*/)      /* 56,25 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == HITACHI_TX31D06VM2AAA_RES_50)
X#if ((1) == (24))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1325)	    /* line period            */
S#define HBackPorch_1      (17)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (1)	    /* Vertical pulse width   */
S#define VPeriod_1        (483)	    /* Vertical period        */
S#define VBackPorch_1       (1)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (28)      /* 32,0 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == HITACHI_TX31D06VM2AAA_RES_60)
X#if ((1) == (25))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1325)	    /* line period            */
S#define HBackPorch_1      (17)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (1)	    /* Vertical pulse width   */
S#define VPeriod_1        (483)	    /* Vertical period        */
S#define VBackPorch_1       (1)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (24)      /* 37,5 MHz               */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SHARP_1280_422_50)
X#if ((1) == (26))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1536)	    /* line period            */
S#define HBackPorch_1     (194)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (1)	    /* Vertical pulse width   */
S#define VPeriod_1        (480)	    /* Vertical period        */
S#define VBackPorch_1      (35)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (24)      /* 37,5 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == SHARP_1280_422_60)
X#if ((1) == (27))
S#define HPulseWidth_1     (10)	    /* Horizontal pulse width */
S#define HPeriod_1       (1536)	    /* line period            */
S#define HBackPorch_1     (194)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (1)	    /* Vertical pulse width   */
S#define VPeriod_1        (480)	    /* Vertical period        */
S#define VBackPorch_1      (35)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (20)      /* 45 MHz                 */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == TX18D35VM0AAA_50)
X#if ((1) == (28))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1056)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (33)      /* 27,27 MHz              */
N#endif
N
N#if (DISPLAY_RESOLUTION_1 == TX18D35VM0AAA_60)
X#if ((1) == (29))
S#define HPulseWidth_1    (128)      /* Horizontal pulse width */
S#define HPeriod_1       (1056)      /* line period            */
S#define HBackPorch_1      (88)      /* Wait after H-sync.     */
S#define VPulseWidth_1      (2)      /* Vertical pulse width   */
S#define VPeriod_1        (525)      /* Vertical period        */
S#define VBackPorch_1      (26)      /* Wait after V-Sync      */
S#define ClockFrequency_1  (27)      /* 33,3 MHz               */
N#endif
N
N/* Settings obtained from online resources for 960*720 @ 50hz refresh rate*/
N#if (DISPLAY_RESOLUTION_1 == RES_960_720_50)
X#if ((1) == (30))
S#define HPulseWidth_1    (168)	    /* Horizontal pulse width */
S#define HPeriod_1       (1192)	    /* line period            */
S#define HBackPorch_1      (32)	    /* Wait after H-sync.     */
S#define VPulseWidth_1      (6)	    /* Vertical pulse width   */
S#define VPeriod_1        (760)	    /* Vertical period        */
S#define VBackPorch_1      (20)	    /* Wait after V-Sync      */
S#define ClockFrequency_1  (20)      /* 45,0 MHz                 */
N#endif
N
N
N/* Set display size */
N#if(DISPLAY_RESOLUTION_1 == QVGA_RES_50)
X#if((1) == (0))
S		#define GDC1_DISPLAY_WIDTH   (320)
S		#define GDC1_DISPLAY_HEIGHT  (240)
N#elif(DISPLAY_RESOLUTION_1 == QVGA_RES_60)
X#elif((1) == (1))
N		#define GDC1_DISPLAY_WIDTH   (320)
N		#define GDC1_DISPLAY_HEIGHT  (240)
N#elif (DISPLAY_RESOLUTION_1 == HNTSC_RES_60)
S		#define GDC1_DISPLAY_WIDTH   (480)
S		#define GDC1_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_1 == HVGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH   (640)
S		#define GDC1_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_1 == HVGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH   (640)
S		#define GDC1_DISPLAY_HEIGHT  (240)
S#elif (DISPLAY_RESOLUTION_1 == WIDE_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1074)
S		#define GDC1_DISPLAY_HEIGHT  (224)
S#elif (DISPLAY_RESOLUTION_1 == WIDE_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1074)
S		#define GDC1_DISPLAY_HEIGHT  (224)
S#elif (DISPLAY_RESOLUTION_1 == VGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH   (640)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == VGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH   (640)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == WVGA_RES_45)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == WVGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == WVGA_RES_55)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == WVGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == SVGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (600)
S#elif (DISPLAY_RESOLUTION_1 == SVGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (600)
S#elif (DISPLAY_RESOLUTION_1 == DVGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == DVGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == DVGA_1_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == DVGA_1_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == XGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1024)
S		#define GDC1_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_1 == XGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1024)
S		#define GDC1_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_1 == SXGA_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_1 == SXGA_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (768)
S#elif (DISPLAY_RESOLUTION_1 == HD_RES)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT ( 720)
S#elif (DISPLAY_RESOLUTION_1 == HITACHI_TX31D06VM2AAA_RES_50)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == HITACHI_TX31D06VM2AAA_RES_60)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == SHARP_1280_422_50)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (422)
S#elif (DISPLAY_RESOLUTION_1 == SHARP_1280_422_60)
S		#define GDC1_DISPLAY_WIDTH  (1280)
S		#define GDC1_DISPLAY_HEIGHT  (422)
S#elif (DISPLAY_RESOLUTION_1 == TX18D35VM0AAA_50)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == TX18D35VM0AAA_60)
S		#define GDC1_DISPLAY_WIDTH   (800)
S		#define GDC1_DISPLAY_HEIGHT  (480)
S#elif (DISPLAY_RESOLUTION_1 == RES_960_720_50)
S		#define GDC1_DISPLAY_WIDTH  (960)
S		#define GDC1_DISPLAY_HEIGHT (720)
S#else
S		#error Resolution not Defined and/or not supported !!!
N#endif
N
N
N#endif /* DISP_PARAM_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 35 "..\..\src\boardcfg.c" 2
N#include "graphics_init.h"
L 1 "..\..\..\..\mw\inc\graphics_init.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware graphic initialisation
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/06/10 13:39:31 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GRAPHICS_INIT_H
N#define GRAPHICS_INIT_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "gdc.h"
N#include "fg.h"
L 1 "..\..\..\..\lldd\inc\fg.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : FG Low Level Device Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : FG
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.11 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef FG_H
N#define FG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_FG_H_REVISION     "$Revision: 1.11 $"
N#define LLDD_FG_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/**
N* @brief Frame Grabber Colors
N*/
Ntypedef enum tag_fg_color_e
N{
N    FG_RED   = 0,    /*!< color red   */
N    FG_GREEN = 1,    /*!< color green */    
N    FG_BLUE  = 2     /*!< color blue  */    
N} fg_color_e;
N
N
N/**
N* @brief Enable/disable Frame Grabber. Cropping, Color Correction
N*/
Ntypedef enum tag_fg_en_e
N{
N    FG_DISABLE = 0x0U,    /*!< disable */
N    FG_ENABLE  = 0x1U     /*!< enable */
N} fg_en_e;
N
N
N/**
N* @brief Interrupt detected
N*/
Ntypedef enum tag_fg_ir_detected_e
N{
N    FG_IR_NOT_DETECTED = 0x0U,    /*!< no interrupt detected */
N    FG_IR_DETECTED     = 0x1U     /*!< interrupt detected    */
N} fg_ir_detected_e;
N
N
N/**
N* @brief Interrupt clear
N*/
Ntypedef enum tag_fg_ir_clear_e
N{
N    FG_IR_NO_CLEAR = 0x0U,    /*!< interrupt no change */
N    FG_IR_CLEAR    = 0x1U     /*!< interrupt clear     */
N} fg_ir_clear_e;
N
N
N/**
N* @brief RGB parallel input mode
N*/
Ntypedef enum tag_fg_rgbpa_e
N{
N    FG_TWO8BIT_INPUT = 0x0U,    /*!< two 8-bit input channels are used (normal RGB or YCbCr mode) */
N    FG_RGB_PARALLEL  = 0x1U     /*!< select RGB parallel input mode */
N} fg_rgbpa_e;
N
N
N/**
N* @brief RGB parallel input select
N*/
Ntypedef enum tag_fg_rgb24_e
N{
N    FG_RGB565 = 0x0U,    /*!< 16-bit parallel input is decoded 5:6:5 */
N    FG_RGB888 = 0x1U     /*!< 24-bit parallel input is decoded 8:8:8 */
N} fg_rgb24_e;
N
N
N/**
N* @brief Non-video data input mode
N*/
Ntypedef enum tag_fg_nvmd_e
N{
N    FG_VIDEO_DATA     = 0x0U,    /*!< video data input */
N    FG_NON_VIDEO_DATA = 0x1U     /*!< non-video data is selected as input; data is not interpreted as
N                                      video data. (UDSP and USYNC need to be set to 1) */
N} fg_nvmd_e;
N
N
N/**
N* @brief De-interlace output image: Only valid if INT = 1
N*/
Ntypedef enum tag_fg_deinterlace_e
N{
N    FG_DINT_NO_DEINTERLACED = 0x0U,    /*!< no de-interlacing , therefore interlaced output in each Capture Buffer */
N    FG_DINT_INTERLACED      = 0x1U     /*!< output is de-interlaced (interpreted only if INT = 1)*/
N} fg_deinterlace_e;
N
N
N/**
N* @brief Input image interlaced
N*/
Ntypedef enum tag_fg_interlace_e
N{
N    FG_INT_NORMAL_OPERATION = 0x0U,    /*!< normal operation */
N    FG_INT_INTERLACED       = 0x1U     /*!< input data is interlaced */
N} fg_interlace_e;
N
N
N/**
N* @brief YCbCr output selector
N*/
Ntypedef enum tag_fg_ycbro_e
N{
N    FG_YCBRO_RGB      = 0x0U,    /*!< RGBA or reduced RGB output */
N    FG_YCBRO_YCBCR422 = 0x1U     /*!< YCbCr 4:2:2 output, Only used, if COMD = 1. */
N} fg_ycbro_e;
N
N
N/**
N* @brief Reduced RGB mode - Not used, if COMD=1 and YCBRO=1
N*/
Ntypedef enum tag_fg_rrgb_e
N{
N    FG_RRGB_RGBA32 = 0x0U,    /*!< 32-bit RGBA output (data format RGBA32) */
N    FG_RRGB_RGB16  = 0x1U     /*!< 16-bit reduced RGB output (data format RGB16) */
N} fg_rrgb_e;
N
N
N/**
N* @brief Use input as alpha value - Only used in monochrome mode
N*/
Ntypedef enum tag_fg_bwex_e
N{
N    FG_BWEX_INTERPRET_CAMERAINPUT = 0x0U,    /*!< output is generated by normal interpretation of the camera input */
N    FG_BWEX_INTERPRET_COLOR_CIR   = 0x1U     /*!< output is generated using the colour specified in the CIR register and the input signal as alpha value.*/
N} fg_bwex_e;
N
N
N/**
N* @brief Monochrome output mode
N*/
Ntypedef enum tag_fg_mono_e
N{
N    FG_MONO_COLOUR     = 0x0U,     /*!< color mode */
N    FG_MONO_MONOCHROME = 0x1U      /*!< monochrome mode */
N} fg_mono_e;
N
N
N/**
N* @brief YCbCr input to RGB conversion method
N*/
Ntypedef enum tag_fg_cvmd_e
N{
N    FG_YCBCR2RGB_ITU601 = 0x0U,    /*!< converted using ITU R 601 */
N    FG_YCBCR2RGB_ITU709 = 0x1U     /*!< converted using ITU R 709 */
N} fg_cvmd_e;
N
N
N/**
N* @brief Color mode
N*/
Ntypedef enum tag_fg_comd_e
N{
N    FG_INP_COLORMODE_RGB   = 0x0U,    /*!< RGB input mode */
N    FG_INP_COLORMODE_YCBCR = 0x1U     /*!< YCbCr input mode */
N}   fg_comd_e;
N
N
N/**
N* @brief Swap appearance of chrominance (Cb/Cr) values
N*/
Ntypedef enum tag_fg_scbcr_e
N{
N    FG_SCBCR_CB_CR = 0x0U,    /*!< first pixel is Cb, then Cr */
N    FG_SCBCR_CR_CB = 0x1U     /*!< first pixel is Cr, then Cb */
N} fg_scbcr_e;
N
N
N/**
N* @brief Swap appearance of Y and Cb/Cr
N*/
Ntypedef enum tag_fg_sycbcr_e
N{
N    FG_SYCBCR_Y2Y_CBCR2CBCR_CHANNEL = 0x0U,    /*!< Y is transmitted over Y channel, Cb/Cr over CBCR channel */
N    FG_SYCBCR_Y2CBCR_CBCR2Y_CHANNEL = 0x1U     /*!< Y is transmitted over CBCR channel, Cb/Cr over Y channel */
N} fg_sycbcr_e;
N
N
N/**
N* @brief VSYNC and HSYNC signal usage
N*/
Ntypedef enum tag_fg_usync_e
N{
N    FG_USYNC_HVSYNC_IGNORED = 0x0U,    /*!< HSYNC and VSYNC input is ignored, the field and line
N                                            blanking interval is stored in the data stream (ITU-R 656) */
N    FG_USYNC_HVSYNC_USED    = 0x1U     /*!< VSYNC and HSYNC input is used to select the field and line
N                                            blanking interval */
N} fg_usync_e;
N
N
N/**
N* @brief HDISP input usage
N*/
Ntypedef enum tag_fg_udsp_e
N{
N    FG_UDSP_HDISP_IGNORED = 0x0U,    /*!< HDISP input signal is ignored; FGIDR and FGITR have to be set! */
N    FG_UDSP_HDISP_USED    = 0x1U     /*!< HDISP input signal is used for data capturing */
N} fg_udsp_e;
N
N
N/**
N* @brief Defines the active level of the camera’s HDISP signal
N*/
Ntypedef enum tag_fg_active_level_e
N{
N    FG_LOW_ACTIVE  = 0x0U,    /*!< low active */
N    FG_HIGH_ACTIVE = 0x1U     /*!< high active */
N} fg_active_level_e;
N
N
N/**
N* @brief Defines the active level of the camera’s HSYNC signal
N*/
Ntypedef enum tag_fg_hsact_e
N{
N    FG_HSACT_HSYNC_LOW_ACTIVE  = 0x0U,    /*!< HSYNC low active  */
N    FG_HSACT_HSYNC_HIGH_ACTIVE = 0x1U     /*!< HSYNC high active */
N} fg_hsact_e;
N
N
N/**
N* @brief One input channel
N*/
Ntypedef enum tag_fg_onec_e
N{
N    FG_ONEC_DATA_OVER_BOTH_INPCHANNELS = 0x0U,    /*!< both input channels contain data (normal operation) */
N    FG_ONEC_DATA_OVER_Y_INPCHANNEL     = 0x1U     /*!< only luminance (Y) input contains the data => 8-bit data 
N                                                       (also valid for non-video data) */
N} fg_onec_e;
N
N
N/**
N* @brief Pixel clock active edge
N*/
Ntypedef enum tag_fg_negpc_e
N{
N    FG_NEGPC_POS_EDGE = 0x0U,    /*!< pixel valid on positive edge of Pixel clock */
N    FG_NEGPC_NEG_EDGE = 0x1U     /*!< pixel valid on negative edge of pixel clock */
N} fg_negpc_e;
N
N
N/**
N* @brief Negate Odd field signal
N*/
Ntypedef enum tag_fg_nfodd_e
N{
N    FG_NFODD_LOWSIGNAL_FIRST  = 0x0U,    /*!< low level signals first line */
N    FG_NFODD_HIGHSIGNAL_FIRST = 0x1U     /*!< high level signals first line */
N} fg_nfodd_e;
N
N
N/**
N* @brief Indicates the current capture buffer
N*/
Ntypedef enum tag_fg_cbcur_e
N{
N    FG_CBCUR_BUFFER_1_CURR_USED = 0x1U,    /*!< buffer 1 is currently used */
N    FG_CBCUR_BUFFER_2_CURR_USED = 0x2U,    /*!< buffer 2 is currently used */
N    FG_CBCUR_BUFFER_3_CURR_USED = 0x3U     /*!< buffer 3 is currently used */
N} fg_cbcur_e;
N
N
N/**
N* @brief Selects the number of active capture buffers
N*/
Ntypedef enum tag_fg_cbact_e                
N{                                          
N    FG_CBACT_INVALID           = 0x0U,    /*!< invalid setting   */
N    FG_CBACT_USE_ONE_BUFFER    = 0x1U,    /*!< use one buffer    */
N    FG_CBACT_USE_TWO_BUFFERS   = 0x2U,    /*!< use two buffers   */
N    FG_CBACT_USE_THREE_BUFFERS = 0x3U     /*!< use three buffers */
N} fg_cbact_e;
N
N
N/**
N* @brief Can be used for Non-Video mode interrupt, Measurement ready interrupt, Vertical SYNC interrupt,
N         Video-Bus Timeout interrupt, Corrupted data interrupt
N*/
Ntypedef enum tag_fg_fgimr_enable_e
N{
N    FG_IMR_SOURCE_NONE    = 0x0U,    /*!< not source for interrupt */
N    FG_IMR_SOURCE_ENABLED = 0x1U     /*!< interrupt source enabled    */
N} fg_fgimr_enable_e;
N
N
N/**
N* @brief Can be used for Non-video mode status, Measurement ready status, Vertical SYNC status,
N         Video-Bus Timeout status, Corrupted data status
N*/
Ntypedef enum tag_fg_fgisr_detection_e
N{
N    FG_INTR_NOT_DETECTED = 0x0U,    /*!< no interrupt detected */
N    FG_INTR_DETECTED     = 0x1U     /*!< interrupt detected    */
N} fg_fgisr_detection_e;
N
N
N/**
N* @brief No. of used buffers for frame grabber
N*/
Ntypedef enum tag_fg_used_buffer_e
N{
N    FG_INVALID_SETTING  = 0x0U,    /*!< one buffer used */
N    FG_SINGEL_BUFFERING = 0x1U,    /*!< one buffer used */
N    FG_DOUBLE_BUFFERING = 0x2U,    /*!< double buffering used */
N    FG_TRIPEL_BUFFERING = 0x3U     /*!< tripple buffering used */
N} fg_used_buffer_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Signal configuration
N*/
Ntypedef struct tag_fg_signals_st
N{
N  fg_nfodd_e        eNfOdd;    /*!< negate odd field signal */
N  fg_negpc_e        eNegPc;    /*!< pixel clock active edge */
N  fg_onec_e         eOnec;     /*!< one input channel */
N  fg_active_level_e eHsact;    /*!< defines the active level of the camera’s HSYNC signal */
N  fg_active_level_e eVsact;    /*!< defines the active level of the camera’s VSYNC signal */
N  fg_active_level_e eHdact;    /*!< defines the active level of the camera’s HDISP signal */
N  fg_udsp_e         eUdsp;     /*!< HDISP input usage */
N  fg_usync_e        eUsync;    /*!< VSYNC and HSYNC signal usage */
N} fg_signals_st;
N
N
N/**
N* @brief Color swap configuration
N*/
Ntypedef struct tag_fg_swap_ycbcr_st
N{
N  fg_scbcr_e  eScbCr;     /*!< swap appearance of chrominance (Cb/Cr) values */
N  fg_sycbcr_e eSycbcr;    /*!< swap appearance of Y and Cb/Cr */
N} fg_swap_ycbcr_st;
N
N
N/**
N* @brief Input format structure
N*/
Ntypedef struct tag_fg_input_format_st
N{
N  uint8_t           u8Alpha;        /*!< common alpha value used for all incoming dots */
N  fg_rgbpa_e        eRgbPa;         /*!< RGB parallel input mode   */
N  fg_rgb24_e        eRgb16_24;      /*!< RGB parallel input mode   */
N  fg_nvmd_e         eNvmd;          /*!< non-video data input mode */
N  fg_interlace_e    eInterlMode;    /*!< input image interlaced    */
N  fg_bwex_e         eBwex;          /*!< use input as alpha value  */
N  fg_comd_e         eComd;          /*!< color mode */
N  fg_swap_ycbcr_st  stSwapYcbCr;    /*!< swap appearance of Y, Cb, Cr values */  
N} fg_input_format_st;
N
N
N/**
N* @brief Output format structure
N*/
Ntypedef struct tag_fg_output_format_st
N{
N  fg_deinterlace_e  eDeInterl;          /*!< interlace type */
N  fg_ycbro_e        eOutputSelector;    /*!< YCbCr output selector */
N  fg_rrgb_e         eRgbFormat;         /*!< RGB color output */
N  fg_mono_e         eMonochrome;        /*!< monochrome output mode */
N  fg_cvmd_e         eYcbcr2RgbConv;     /*!< YCbCr input to RGB conversion method */
N} fg_output_format_st;
N
N
N/**
N* @brief Input size structure
N*/
Ntypedef struct tag_fg_input_cropp_st
N{
N  uint16_t u16ItrHorizWait;      /*!< horizontal wait */
N  uint16_t u16ItrVertWait;       /*!< vertical wait */
N  
N  uint16_t u16HcrCroppLeftX;     /*!< horizontal cropp window start position */
N  uint16_t u16HcrCroppWidth;     /*!< cropp window width */
N
N  uint16_t u16VcrCroppTopY;      /*!< vertical cropp window start position */
N  uint16_t u16VcrCroppHeight;    /*!< cropp window height */
N} fg_input_cropp_st;
N
N
N/**
N* @brief Frame buffer configuration structure
N*/
Ntypedef struct tag_fg_capture_buffer_st
N{
N  fg_used_buffer_e  eCbactUsedBuffer;     /*!< no. of used buffers for frame grabber */
N  uint16_t          u16LorLineOffset;     /*!< LOR line offset */
N  uint32_t          u32CbaBufferAddr1;    /*!< buffer address 1 */
N  uint32_t          u32CbaBufferAddr2;    /*!< buffer address 2 */
N  uint32_t          u32CbaBufferAddr3;    /*!< buffer address 3 */
N} fg_capture_buffer_st;
N
N
N/**
N* @brief Color informaton
N*/
Ntypedef struct tag_fg_color_exchange_st
N{
N  uint8_t u8Red;      /*!< red color value */
N  uint8_t u8Green;    /*!< green color value */
N  uint8_t u8Blue;     /*!< blue color value */
N} fg_color_exchange_st;
N
N
N/**
N* @brief Measurement properties of the external synchronization signals
N*/
Ntypedef struct tag_fg_measure_extsync_result_st
N{
N  uint16_t  u16Mhcr;     /*!< measured value of the HCR value of the camera input */
N  uint16_t  u16Mhspwr;   /*!< measured value of the HSPWR value of the camera input */
N  uint16_t  u16Mvcr;     /*!< measured value of the VCR value of the camera input */
N  uint16_t  u16Mvspwr;   /*!< measured value of the VSPWR value of the camera input */
N  uint16_t  u16Mhdisp;   /*!< measured value of the HDISP value of the camera input */
N} fg_measurement_extsync_result_st;
N
N
N/**
N* @brief Measurement control of the external synchronization signals
N*/
Ntypedef struct tag_fg_measurement_extync_control_st
N{
N  fg_en_e  eVcr;      /*!< enable or disable VCR measurement */
N  fg_en_e  eHcr;      /*!< enable or disable HSPWR measurement */
N  fg_en_e  eVspwr;    /*!< enable or disable VSPWR measurement */
N  fg_en_e  eHspwr;    /*!< enable or disable HSPWR measurement */
N  fg_en_e  eHdisp;    /*!< enable or disable HDISP measurement */
N} fg_measure_extsync_control_st;
N
N
N/**
N* @brief Selects the interrupt mask for the generation of the Frame Grabber interrupt
N*/
Ntypedef struct tag_fg_irqcgf_st
N{
N  fg_en_e  eCdi;      /*!< enable or disable CFI */
N  fg_en_e  eVbtoi;    /*!< enable or disable VBTOI */
N  fg_en_e  eVsi;      /*!< enable or disable VSI */
N  fg_en_e  eMrdyi;    /*!< enable or disable MRDYI */
N  fg_en_e  eNvi;      /*!< enable or disable NVI */
N} fg_irqcgf_st;
N
N
N/**
N* @brief Clear interrupts
N*/
Ntypedef struct tag_fg_irqclear_st
N{
N  fg_ir_clear_e  eCds;      /*!< clear CDS */
N  fg_ir_clear_e  eVbtos;    /*!< clear VBTOS */
N  fg_ir_clear_e  eVss;      /*!< clear VSS */
N  fg_ir_clear_e  eMrdys;    /*!< clear MRDYS */
N  fg_ir_clear_e  eNvs;      /*!< clear NVS */
N} fg_irqclear_st;
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vFG_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vFG_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                    uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                    uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vFG_FrameGrabberEnable
N*
N* Enable/Disable Frame grabber
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable the FG
N*
N* @return void
N*/
Nvoid vFG_FrameGrabberEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_CroppingEnable
N*
N* Enable/Disable Cropping function
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable cropping
N*
N* @return void
N*/
Nvoid vFG_CroppingEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_ColorCorrectEnable
N*
N* Enable/Disable color correction
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable color correction
N*
N* @return void
N*/
Nvoid vFG_ColorCorrectEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_ConfigureFgSignal
N*
N* Configure FG-Signal properties
N*
N* @note No Limitations
N*
N* @param[in,out] pstSignal - pointer to FG-signal settings
N*
N* @return void
N*/
Nvoid vFG_ConfigureFgSignal(fg_signals_st * pstSignal);
N
N
N/**
N* @brief Implementation of function vFG_SetInputMode
N*
N* Set properties of FG-input source
N*
N* @note No Limitations
N*
N* @param[in,out] pstMode - pointer to structure of input settings
N*
N* @return void
N*/
Nvoid vFG_SetInputMode(fg_input_format_st * pstMode);
N
N
N/**
N* @brief Implementation of function vFG_SetOutputMode
N*
N* Set properties of FG-output
N*
N* @note No Limitations
N*
N* @param[in,out] pstMode - pointer to structure of output settings
N*
N* @return void
N*/
Nvoid vFG_SetOutputMode(fg_output_format_st * pstMode);
N
N
N/**
N* @brief Implementation of function vFG_SetInputImageSize
N*
N* set width and height of FG-input image
N*
N* @note No Limitations
N*
N* @param[in] u16Width  - width of input image
N* @param[in] u16Height - height of input image 
N*
N* @return void
N*/
Nvoid vFG_SetInputImageSize(uint16_t u16Width,  uint16_t u16Height);
N
N
N/**
N* @brief Implementation of function vFG_SetInputCropp
N*
N* Set properties of cropping
N*
N* @note No Limitations
N*
N* @param[in,out] pstCroppConfig - pointer to cropping properties
N*
N* @return void
N*/
Nvoid vFG_SetInputCropp(fg_input_cropp_st * pstCroppConfig);
N
N
N/**
N* @brief Implementation of function vFG_SetCaptureBuffers
N*
N* Set no. and properties of GH-Capture buffers
N*
N* @note No Limitations
N*
N* @param[in,out] pstCaptureBuffer - pointer to capture settings
N*
N* @return void
N*/
Nvoid vFG_SetCaptureBuffers(fg_capture_buffer_st * pstCaptureBuffer);
N
N
N/**
N* @brief Implementation of function eFG_GetCurrentCaptureBuffer
N*
N* Get number of current capture buffer
N*
N* @note No Limitations
N*
N* @return FG_CBCUR_BUFFER_1_CURR_USED - buffer 1 is currently used
N* @return FG_CBCUR_BUFFER_2_CURR_USED - buffer 2 is currently used
N* @return FG_CBCUR_BUFFER_3_CURR_USED - buffer 3 is currently used
N*/
Nfg_cbcur_e eFG_GetCurrentCaptureBuffer(void);
N
N
N/**
N* @brief Implementation of function vFG_ConfigureMemoryWriteProtection
N*
N* Set lower and upper addresses for memory write protection
N*
N* @note No Limitations
N*
N* @param[in] u32StartAddress - start memory address
N* @param[in] u32EndAddress   - end memory address
N*
N* @return void
N*/
Nvoid vFG_ConfigureMemoryWriteProtection(uint32_t u32StartAddress, uint32_t u32EndAddress);
N
N
N/**
N* @brief Implementation of function vFG_SetScalingFactors
N*
N* Set properties of scaling
N*
N* @note No Limitations
N*
N* @param[in] u16ScaleX - Hoiz. scaling factor
N* @param[in] u16ScaleY - Vert. scaling factor 
N*
N* @return void
N*/
Nvoid vFG_SetScalingFactors(uint16_t u16ScaleX, uint16_t u16ScaleY);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurements
N*
N* Enable several ext. sync measurements together
N*
N* @note No Limitations
N*
N* @param[in,out] pstMeasurement - pointer to propoerties of measurements
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurements(fg_measure_extsync_control_st * pstMeasurement);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementVCR
N*
N* Enable ext. sync measurement VCR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementVCR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHCR
N*
N* Enable ext. sync measurement HCR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHCR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHDISP
N*
N* Enable ext. sync measurement HDISP
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHDISP(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHSPWR
N*
N* Enable ext. sync measurement HSPWR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHSPWR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementVSPWR
N*
N* Enable ext. sync measurement VSPWR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementVSPWR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurements
N*
N* Get results of several ext. sync measurements
N*
N* @note No Limitations
N*
N* @param[in,out] pstMeasurement - pointer to structure for measurements
N*
N* @return void
N*/
Nvoid vFG_GetMeasurements(fg_measurement_extsync_result_st * pstMeasurement);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMVCR
N*
N* Get result ext. sync measurement MVCR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMVCR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHCR
N*
N* Get result ext. sync measurement MHCR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHCR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHSPWR
N*
N* Get result ext. sync measurement MHSPWR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHSPWR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMVSPWR
N*
N* Get result ext. sync measurement MVSPWR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMVSPWR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHDISP
N*
N* Get result ext. sync measurement MHDISP
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHDISP(void);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrq
N*
N* Mask generation of several FG-interrupts
N*
N* @note No Limitations
N*
N* @param[in,out] pstCfg - pointer to IRQ-settings
N*
N* @return void
N*/
Nvoid vFG_EnableIrq(fg_irqcgf_st * pstCfg);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqCDI
N*
N* Mask generation of Fg interrupt CDI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disableirq CDI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqCDI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqVBTOI
N*
N* Mask generation of Fg interrupt VBTOI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq VBTOI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqVBTOI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqVSI
N*
N* Mask generation of Fg interrupt VSI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq VSI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqVSI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqMRDYI
N*
N* Mask generation of Fg interrupt MRDYI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq MRDYI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqMRDYI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqNVI
N*
N* Mask generation of Fg interrupt NVI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq NVI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqNVI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqCDS
N*
N* Allows the MPU to check the source of  interrupt CDS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqCDS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqVBTOS
N*
N* Allows the MPU to check the source of  interrupt VBTOS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqVBTOS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqVSS
N*
N* Allows the MPU to check the source of  interrupt VSS
N*
N* @note No Limitations
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqVSS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqMRDYS
N*
N* Allows the MPU to check the source of  interrupt MRDYS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqMRDYS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqNVS
N*
N* Allows the MPU to check the source of  interrupt NVS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqNVS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClear
N*
N* Clears several interrupts
N*
N* @note No Limitations
N*
N* @param[in,out] pstIrClear - pointer to to be cleared interrupts
N*
N* @return void
N*/
Nvoid vFG_IrqClear(fg_irqclear_st * pstIrClear);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearCDS
N*
N* Clear interrupt CDS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearCDS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearVBTOS
N*
N* Clear interrupt VBTOS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearVBTOS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearVSS
N*
N* Clear interrupt VSS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearVSS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearMRDYS
N*
N* Clear interrupt MRDYS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearMRDYS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearNVS
N*
N* Clear interrupt NVS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearNVS(void);
N
N
N/**
N* @brief Implementation of function vFG_SetExchColor
N*
N* Definition of the exchange colour and common alpha value
N*
N* @note No Limitations
N*
N* @param[in,out] pstColor - pointer to colors for red, green, blue
N*
N* @return void
N*/
Nvoid vFG_SetExchColor(fg_color_exchange_st * pstColor);
N
N
N/**
N* @brief Implementation of function vFG_SetGlobalInputAlpha
N*
N* Set global alpha value
N*
N* @note No Limitations
N*
N* @param[in] u8Alpha - alpha value
N*
N* @return void
N*/
Nvoid vFG_SetGlobalInputAlpha(uint8_t u8Alpha);
N
N
N/**
N* @brief Implementation of function vFG_SetClutEntry
N*
N* Write access to the colour correction look-up tables for each colour component.
N*
N* @note No Limitations
N*
N* @param[in] eColor   - color-channel
N* @param[in] u16Entry - clut index
N* @param[in] u8Color  - color value to be set
N*
N* @return 0 in case of success
N* @return 1 in case of error
N*/
Nuint16_t vFG_SetClutEntry(fg_color_e eColor, uint16_t u16Entry, uint8_t u8Color);
N
N
N/****************************************************************************/
N
N
N#endif /* FG_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 27 "..\..\..\..\mw\inc\graphics_init.h" 2
N#include "ccr.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GRAPHICS_INIT_H_REVISION     "$Revision: 1.8 $"
N#define MW_GRAPHICS_INIT_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Display configuration
N*/
Ntypedef struct tag_disp_config_st
N{
N		uint8_t                 u8DispRes;                /*!< Display resolution */
N    uint16_t                u16DispStartX;            /*!< Display start position in x-direction */
N    uint16_t                u16DispStartY;            /*!< Display start position in y-direction */
N		uint16_t                u16DispWidth;             /*!< Display width */
N		uint16_t                u16DispHeight;            /*!< Display heigt */
N		gdc_disp_config_type_e  eDispConfigType;          /*!<  */
N
N		uint8_t                 u8VSYNCType;              /*!< VSYNC type */
N		uint8_t                 u8VSYNCPol;               /*!< VSYNC polarity */
N		uint16_t                u16VSYNCWidth;            /*!< VSYNC pulse width */
N		uint16_t                u16VPeriod;               /*!< VSYNC period */
N		uint16_t                u16VBackPorch;            /*!< Vertical back porch */
N		
N		uint8_t                 u8HSYNCPol;               /*!< HSYNC polarity */
N		uint16_t                u16HSYNCWidth;            /*!< HSYNC pulse width */
N		uint16_t                u16HPeriod;               /*!< HSYNC period */
N		uint16_t                u16HBackPorch;            /*!< Horizontal back porch */
N
N		uint8_t                 u8HDISPPol;               /*!< HDISP polarity */
N		
N		uint32_t                u32BGColor;               /*!< Background color */
N		uint8_t                 u8SyncDir;                /*!< Synchronisation direction */
N
N		uint8_t                 u8DotClkPol;              /*!< DotClock polarity */
N		uint8_t                 u8ClkSource;              /*!< DotClock source */
N		ccr_clk_freq_e          eClockFrequency;          /*!< DotClock frequency (division factor) */
N		ccr_modulated_clk_e     eModulated;               /*!< DotClock modulation type */
N
N		gdc_dithering_e         eDithering;               /*!< Dithering type */
N		gdc_vord_e              eLayerOrder;              /*!< Layer viewing order */
N
N    ccr_gdc_sync_e          eGDC1Synchronisation;     /*!< GDC0 - GDC1 synchronisation setting */
N} gf_disp_config_st;
N
N
N/**
N* @brief Layer configuration
N*/
Ntypedef struct tag_layer_config_st
N{
N		uint8_t	 u8LayerActive;              /*!< Indication if layer is active */
N		uint8_t  u8DisplayFormat;            /*!< Display color format */
N		uint8_t  u8DoubleBuffer;             /*!< Indication if layer should be double buffered or not */
N		uint8_t  u8Alpha;                    /*!< Layer alpha value */
N		uint16_t u16StartX;                  /*!< Layer start point in x-direction */
N		uint16_t u16StartY;                  /*!< Layer start point in y-direction */
N		uint16_t u16Width;                   /*!< Layer width */
N		uint16_t u16Height;                  /*!< Layer height */
N		uint32_t u32FB0StartAddress;         /*!< Framebuffer 0 start address */
N		uint32_t u32FB1StartAddress;         /*!< Framebuffer 1 start address */
N} gf_layer_config_st;
N
N
N/**
N* @brief GDC-config structure
N*/
Ntypedef struct tag_gdc_config_st
N{
N		uint8_t            u8GDCActive;             /*!< Indication if GDC is active */
N		gf_disp_config_st  stDispConf;              /*!< Display configuration */
N		gf_layer_config_st stLayerConf_A;           /*!< Configuration of layer A */
N		gf_layer_config_st stLayerConf_B;           /*!< Configuration of layer B */
N		gf_layer_config_st stLayerConf_C;           /*!< Configuration of layer C */
N		gf_layer_config_st stLayerConf_D;           /*!< Configuration of layer D */
N		gf_layer_config_st stLayerConf_E;           /*!< Configuration of layer E */
N} gf_gdc_config_st;
N
N
N/**
N* @brief FG-config structure
N*/
Ntypedef struct tag_fg_config_st
N{
N		uint8_t                       u8FGActive;         /*!< Indication if FG is active */
N		fg_en_e                       eFGEnable;          /*!< Enable FG after configuration*/
N    fg_capture_buffer_st          stFgBuffer;         /*!< Capture buffer configuration */
N    fg_input_format_st            stFgInMode;         /*!< Input format configuration */
N    fg_output_format_st           stFgOutMode;        /*!< Output format configuration */
N    fg_swap_ycbcr_st              stFgSwapYcbCr;      /*!< Color conversion configuration */
N    fg_signals_st                 stFgSignal;         /*!< FG-signal configuration */
N    fg_input_cropp_st             stCroppConfig;      /*!< Cropping configuration */
N		fg_en_e                       eCroppingEnable;    /*!< enable/disable cropping */
N    uint32_t                      u32ScaleX;          /*!< Scaling factor in x-direction */
N    uint32_t                      u32ScaleY;          /*!< Scaling factor in y-direction */
N    fg_measure_extsync_control_st stMeasurement;      /*!< Measurement configuration */
N} gf_fg_config_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of function vGf_Graphics_Init_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N*
N* @return void
N*/
Nvoid vGf_Graphics_Init_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                                  uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N
N/**
N* @brief Implementation of function vGfInitGDC0
N*
N* Initializes the GDC0
N*
N* @note none
N*
N* @param[in] pstGDC - pointer to configuration of GDC0
N*
N* @return void
N*/
Nvoid vGfInitGDC0(gf_gdc_config_st* pstGDC);
N
N
N/**
N* @brief Implementation of function vGfInitGDC1
N*
N* Initializes the GDC1
N*
N* @note none
N*
N* @param[in] pstGDC - pointer to configuration of GDC1
N*
N* @return void
N*/
Nvoid vGfInitGDC1(gf_gdc_config_st* pstGDC);
N
N
N/**
N* @brief Implementation of function vGfInitFG
N*
N* Initializes the FG
N*
N* @note none
N*
N* @param[in] pstFG - pointer to configuration of FG
N*
N* @return void
N*/
Nvoid vGfInitFG(gf_fg_config_st* pstFG);
N
N
N/**
N* @brief Implementation of function vGfInitGA
N*
N* Initializes Graphics Accelerator
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfInitGA(void);
N
N
N/**
N* @brief Implementation of function vGfInitGfxMiddleWare
N*
N* Initializes the Graphics middleware
N*
N* @note none
N*
N* @param[in] pstGDC0 - pointer to configuration of GDC0
N* @param[in] pstGDC1 - pointer to configuration of GDC1
N* @param[in] pstFG   - pointer to configuration of FG
N*
N* @return void
N*/
Nvoid vGfInitGfxMiddleWare(gf_gdc_config_st* pstGDC0, gf_gdc_config_st* pstGDC1, gf_fg_config_st* pstFG);
N
N
N/***************************************************************************/
N
N
N#endif /* GRAPHICS_INIT_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 36 "..\..\src\boardcfg.c" 2
N#include "pinconfig.h"
L 1 "..\..\inc\pinconfig.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: pinconfig.h,v $
N*   Description : Port configuration header file
N******************************************************************************
N*   PROJECT     : Capricorn-Bt/C
N*   MODULE      : System
N*               : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/pinconfig.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef _PINCONFIG_H
N#define _PINCONFIG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC0
N *
N * Purpose:       Configure pins of GDC0
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC0(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC1
N *
N * Purpose:       Configure pins of GDC1
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC1(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_Buttons
N *
N * Purpose:       Configure pins of Buttons
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_Buttons(void);
N
N/****************************************************************************/
N
N
N#endif /* _PINCONFIG_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG *****************************
N*
N* $Log: pinconfig.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG *****************************/
L 37 "..\..\src\boardcfg.c" 2
N#include "fg.h"
N
N/*********************************************/
N
N
N/**********************************************
N*             Constants & Macros              *
N**********************************************/
N
N
N/*********************************************/
N
N
N/**********************************************
N*             Function definition             *
N**********************************************/
N
N/***************************************************************************/
Nvoid vInitGraphicsSystem(void)
N{
N    gf_gdc_config_st stGDC0;
N    gf_gdc_config_st stGDC1;
N    gf_fg_config_st  stFG;
N
N    /* configuration for GDC0 */
N    stGDC0.u8GDCActive = GDCx0;
X    stGDC0.u8GDCActive = 1;
N
N    stGDC0.stDispConf.u8DispRes       = DISPLAY_RESOLUTION_0;
X    stGDC0.stDispConf.u8DispRes       = (34);
N    stGDC0.stDispConf.u16DispStartX   = 0;
N    stGDC0.stDispConf.u16DispStartY   = 0;
N    stGDC0.stDispConf.u16DispWidth    = GDC0_DISPLAY_WIDTH;
X    stGDC0.stDispConf.u16DispWidth    = (1280);
N    stGDC0.stDispConf.u16DispHeight   = GDC0_DISPLAY_HEIGHT;
X    stGDC0.stDispConf.u16DispHeight   = (420);
N    stGDC0.stDispConf.eDispConfigType = GDC_USE_DISP_SET_BY_LAYA;
N
N    stGDC0.stDispConf.u8VSYNCType     = GDC_VSYNC;
N#if (OUTPUT_DEVICE == 0)
X#if (0 == 0)
N    stGDC0.stDispConf.u8VSYNCPol      = GDC_POS;
N#else
S    stGDC0.stDispConf.u8VSYNCPol      = GDC_NEG;
N#endif
N    stGDC0.stDispConf.u16VSYNCWidth   = VPulseWidth_0;
X    stGDC0.stDispConf.u16VSYNCWidth   = (10);
N    stGDC0.stDispConf.u16VPeriod      = VPeriod_0;
X    stGDC0.stDispConf.u16VPeriod      = (525);
N    stGDC0.stDispConf.u16VBackPorch   = VBackPorch_0;
X    stGDC0.stDispConf.u16VBackPorch   = (40);
N
N#if (OUTPUT_DEVICE == 0)
X#if (0 == 0)
N    stGDC0.stDispConf.u8HSYNCPol      = GDC_POS;
N#else
S    stGDC0.stDispConf.u8HSYNCPol      = GDC_NEG;
N#endif
N    stGDC0.stDispConf.u16HSYNCWidth   = HPulseWidth_0;
X    stGDC0.stDispConf.u16HSYNCWidth   = (112);
N    stGDC0.stDispConf.u16HPeriod      = HPeriod_0;
X    stGDC0.stDispConf.u16HPeriod      = (1660);
N    stGDC0.stDispConf.u16HBackPorch   = HBackPorch_0;
X    stGDC0.stDispConf.u16HBackPorch   = (249);
N
N    stGDC0.stDispConf.u8HDISPPol      = GDC_POS;
N
N    stGDC0.stDispConf.u32BGColor      = 0x000000;
N    stGDC0.stDispConf.u8SyncDir       = GDC_OUTPUT;
N
N    stGDC0.stDispConf.u8DotClkPol     = GDC_POS;
N    stGDC0.stDispConf.u8ClkSource     = GDC_DOTCLK_INT;
N    stGDC0.stDispConf.eClockFrequency = (ccr_clk_freq_e)ClockFrequency_0;
X    stGDC0.stDispConf.eClockFrequency = (ccr_clk_freq_e)(17);
N    stGDC0.stDispConf.eModulated      = CCR_NON_MODULATED;
N
N    stGDC0.stDispConf.eDithering      = GDC_DITHERING_MAGIC_SQR_SUBPIX_ENABLED;
N    stGDC0.stDispConf.eLayerOrder     = GDC_ABCDE;
N#if GDC0_LAYER_A
X#if 1
N    /* Setting Layer A *******************************************************/
N    stGDC0.stLayerConf_A.u8LayerActive   = GDC0_LAYER_A;
X    stGDC0.stLayerConf_A.u8LayerActive   = 1;
N    stGDC0.stLayerConf_A.u8DisplayFormat = GDC0_LAYER_A_COLOR_FORMAT;
X    stGDC0.stLayerConf_A.u8DisplayFormat = (1);
N    stGDC0.stLayerConf_A.u8DoubleBuffer  = GDC0_LAYER_A_DOUBLEFUFFERING;
X    stGDC0.stLayerConf_A.u8DoubleBuffer  = 1;
N    stGDC0.stLayerConf_A.u8Alpha         = 0xff;
N    stGDC0.stLayerConf_A.u16StartX       = GDC0_LAYERA_STARTX;
X    stGDC0.stLayerConf_A.u16StartX       = 0;
N    stGDC0.stLayerConf_A.u16StartY       = GDC0_LAYERA_STARTY;
X    stGDC0.stLayerConf_A.u16StartY       = 0;
N    stGDC0.stLayerConf_A.u16Width        = GDC0_LAYERA_WIDTH;
X    stGDC0.stLayerConf_A.u16Width        = 1280;
N    stGDC0.stLayerConf_A.u16Height       = GDC0_LAYERA_HEIGHT;
X    stGDC0.stLayerConf_A.u16Height       = 420;
N    stGDC0.stLayerConf_A.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC0_A0[0]);
X    stGDC0.stLayerConf_A.u32FB0StartAddress = (((uint32_t)(&FBuffRGBA_GDC0_A0[0]) & 0xFFFFFFFFU));
N  #if GDC0_LAYER_A_DOUBLEFUFFERING
X  #if 1
N    stGDC0.stLayerConf_A.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC0_A1[0]);
X    stGDC0.stLayerConf_A.u32FB1StartAddress = (((uint32_t)(&FBuffRGBA_GDC0_A1[0]) & 0xFFFFFFFFU));
N  #else
S    stGDC0.stLayerConf_A.u32FB1StartAddress = 0;
N  #endif    
N#endif
N#if GDC0_LAYER_B
X#if 0
S    /* Setting Layer B *******************************************************/
S    stGDC0.stLayerConf_B.u8LayerActive   = GDC0_LAYER_B;
S    stGDC0.stLayerConf_B.u8DisplayFormat = GDC0_LAYER_B_COLOR_FORMAT;
S    stGDC0.stLayerConf_B.u8DoubleBuffer  = GDC0_LAYER_B_DOUBLEFUFFERING;
S    stGDC0.stLayerConf_B.u8Alpha         = 0xFF;
S    stGDC0.stLayerConf_B.u16StartX       = GDC0_LAYERB_STARTX;
S    stGDC0.stLayerConf_B.u16StartY       = GDC0_LAYERB_STARTY;
S    stGDC0.stLayerConf_B.u16Width        = GDC0_LAYERB_WIDTH;
S    stGDC0.stLayerConf_B.u16Height       = GDC0_LAYERB_HEIGHT;
S    stGDC0.stLayerConf_B.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC0_B0[0]);
S  #if GDC0_LAYER_B_DOUBLEFUFFERING
S    stGDC0.stLayerConf_B.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC0_B1[0]);
S  #else
S    stGDC0.stLayerConf_B.u32FB1StartAddress = 0;
S  #endif    
N#endif
N#if GDC0_LAYER_C
X#if 0
S    /* Setting Layer C *******************************************************/
S    stGDC0.stLayerConf_C.u8LayerActive   = GDC0_LAYER_C;
S    stGDC0.stLayerConf_C.u8DisplayFormat = GDC0_LAYER_C_COLOR_FORMAT;
S    stGDC0.stLayerConf_C.u8DoubleBuffer  = GDC0_LAYER_C_DOUBLEFUFFERING;
S    stGDC0.stLayerConf_C.u8Alpha         = 0xFF;
S    stGDC0.stLayerConf_C.u16StartX       = GDC0_LAYERC_STARTX;
S    stGDC0.stLayerConf_C.u16StartY       = GDC0_LAYERC_STARTY;
S    stGDC0.stLayerConf_C.u16Width        = GDC0_LAYERC_WIDTH;
S    stGDC0.stLayerConf_C.u16Height       = GDC0_LAYERC_HEIGHT;
S    stGDC0.stLayerConf_C.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC0_C0[0]);
S  #if GDC0_LAYER_C_DOUBLEFUFFERING
S    stGDC0.stLayerConf_C.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC0_C1[0]);
S  #else
S    stGDC0.stLayerConf_C.u32FB1StartAddress = 0;
S  #endif    
N#endif
N#if GDC0_LAYER_D
X#if 0
S    /* Setting Layer D *******************************************************/
S    stGDC0.stLayerConf_D.u8LayerActive   = GDC0_LAYER_D;
S    stGDC0.stLayerConf_D.u8DisplayFormat = GDC0_LAYER_D_COLOR_FORMAT;
S    stGDC0.stLayerConf_D.u8DoubleBuffer  = GDC0_LAYER_D_DOUBLEFUFFERING;
S    stGDC0.stLayerConf_D.u8Alpha         = 0xFF;
S    stGDC0.stLayerConf_D.u16StartX       = GDC0_LAYERD_STARTX;
S    stGDC0.stLayerConf_D.u16StartY       = GDC0_LAYERD_STARTY;
S    stGDC0.stLayerConf_D.u16Width        = GDC0_LAYERD_WIDTH;
S    stGDC0.stLayerConf_D.u16Height       = GDC0_LAYERD_HEIGHT;
S    stGDC0.stLayerConf_D.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC0_D0[0]);
S  #if GDC0_LAYER_D_DOUBLEFUFFERING
S    stGDC0.stLayerConf_D.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC0_D1[0]);
S  #else
S    stGDC0.stLayerConf_D.u32FB1StartAddress = 0;
S  #endif    
N#endif
N#if GDC0_LAYER_E
X#if 0
S    /* Setting Layer E *******************************************************/
S    stGDC0.stLayerConf_E.u8LayerActive   = GDC0_LAYER_E;
S    stGDC0.stLayerConf_E.u8DisplayFormat = GDC0_LAYER_E_COLOR_FORMAT;
S    stGDC0.stLayerConf_E.u8DoubleBuffer  = GDC0_LAYER_E_DOUBLEFUFFERING;
S    stGDC0.stLayerConf_E.u8Alpha         = 0xFF;
S    stGDC0.stLayerConf_E.u16StartX       = GDC0_LAYERE_STARTX;
S    stGDC0.stLayerConf_E.u16StartY       = GDC0_LAYERE_STARTY;
S    stGDC0.stLayerConf_E.u16Width        = GDC0_LAYERE_WIDTH;
S    stGDC0.stLayerConf_E.u16Height       = GDC0_LAYERE_HEIGHT;
S    stGDC0.stLayerConf_E.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC0_E0[0]);
S  #if GDC0_LAYER_E_DOUBLEFUFFERING
S    stGDC0.stLayerConf_E.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC0_E1[0]);
S  #else
S    stGDC0.stLayerConf_E.u32FB1StartAddress = 0;
S  #endif    
N#endif
N
N    /* configuration for GDC1 */
N    stGDC1.u8GDCActive = GDCx1;
X    stGDC1.u8GDCActive = 0;
N#if GDCx1    
X#if 0    
S    stGDC1.stDispConf.u8DispRes       = DISPLAY_RESOLUTION_1;
S    stGDC1.stDispConf.u16DispStartX   = 64;
S    stGDC1.stDispConf.u16DispStartY   = 64;
S    stGDC1.stDispConf.u16DispWidth    = GDC1_DISPLAY_WIDTH;
S    stGDC1.stDispConf.u16DispHeight   = GDC1_DISPLAY_HEIGHT;
S    stGDC1.stDispConf.eDispConfigType = GDC_USE_DISP_SET_BY_LAYA;
S
S    stGDC1.stDispConf.eGDC1Synchronisation = CCR_GDC_SYNC_INDEPENDANT;
S    
S    stGDC1.stDispConf.u8VSYNCType     = GDC_VSYNC;
S#if (OUTPUT_DEVICE == 0)
S    stGDC1.stDispConf.u8VSYNCPol      = GDC_POS;
S#else
S    stGDC1.stDispConf.u8VSYNCPol      = GDC_NEG;
S#endif
S    stGDC1.stDispConf.u16VSYNCWidth   = VPulseWidth_1;
S    stGDC1.stDispConf.u16VPeriod      = VPeriod_1;
S    stGDC1.stDispConf.u16VBackPorch   = VBackPorch_1;
S
S#if (OUTPUT_DEVICE == 0)
S    stGDC1.stDispConf.u8HSYNCPol      = GDC_POS;
S#else
S    stGDC1.stDispConf.u8HSYNCPol      = GDC_NEG;
S#endif
S    stGDC1.stDispConf.u16HSYNCWidth   = HPulseWidth_1;
S    stGDC1.stDispConf.u16HPeriod      = HPeriod_1;
S    stGDC1.stDispConf.u16HBackPorch   = HBackPorch_1;
S
S    stGDC1.stDispConf.u8HDISPPol      = GDC_POS;
S
S    stGDC1.stDispConf.u32BGColor      = 0x000000;
S    stGDC1.stDispConf.u8SyncDir       = GDC_OUTPUT;
S
S    stGDC1.stDispConf.u8DotClkPol     = GDC_POS;
S    stGDC1.stDispConf.u8ClkSource     = GDC_DOTCLK_INT;
S    stGDC1.stDispConf.eClockFrequency = (ccr_clk_freq_e)ClockFrequency_1;
S    stGDC1.stDispConf.eModulated      = CCR_NON_MODULATED;
S
S    stGDC1.stDispConf.eDithering      = GDC_DITHERING_MAGIC_SQR_SUBPIX_ENABLED;
S    stGDC1.stDispConf.eLayerOrder     = GDC_ABCDE;
S
S    stGDC1.stLayerConf_A.u8LayerActive   = GDC1_LAYER_A;
S    stGDC1.stLayerConf_A.u8DisplayFormat = GDC1_LAYER_A_COLOR_FORMAT;
S    stGDC1.stLayerConf_A.u8DoubleBuffer  = GDC1_LAYER_A_DOUBLEFUFFERING;
S    stGDC1.stLayerConf_A.u8Alpha         = 0xFF;
S    stGDC1.stLayerConf_A.u16StartX       = GDC1_LAYERA_STARTX;
S    stGDC1.stLayerConf_A.u16StartY       = GDC1_LAYERA_STARTY;
S    stGDC1.stLayerConf_A.u16Width        = GDC1_LAYERA_WIDTH;
S    stGDC1.stLayerConf_A.u16Height       = GDC1_LAYERA_HEIGHT;
S    stGDC1.stLayerConf_A.u32FB0StartAddress = PHYSICAL(&FBuffRGBA_GDC1_A0[0]);
S    stGDC1.stLayerConf_A.u32FB1StartAddress = PHYSICAL(&FBuffRGBA_GDC1_A1[0]);
S
S    stGDC1.stLayerConf_B.u8LayerActive   = GDC1_LAYER_B;
S    stGDC1.stLayerConf_B.u8DisplayFormat = GDC1_LAYER_B_COLOR_FORMAT;
S    stGDC1.stLayerConf_B.u8DoubleBuffer  = GDC1_LAYER_B_DOUBLEFUFFERING;
S    stGDC1.stLayerConf_B.u8Alpha         = 0xFF;
S    stGDC1.stLayerConf_B.u16StartX       = GDC1_LAYERB_STARTX;
S    stGDC1.stLayerConf_B.u16StartY       = GDC1_LAYERB_STARTY;
S    stGDC1.stLayerConf_B.u16Width        = GDC1_LAYERB_WIDTH;
S    stGDC1.stLayerConf_B.u16Height       = GDC1_LAYERB_HEIGHT;
S    stGDC1.stLayerConf_B.u32FB0StartAddress = 0;
S    stGDC1.stLayerConf_B.u32FB1StartAddress = 0;
S
S    stGDC1.stLayerConf_C.u8LayerActive   = GDC1_LAYER_C;
S    stGDC1.stLayerConf_C.u8DisplayFormat = GDC1_LAYER_C_COLOR_FORMAT;
S    stGDC1.stLayerConf_C.u8DoubleBuffer  = GDC1_LAYER_C_DOUBLEFUFFERING;
S    stGDC1.stLayerConf_C.u8Alpha         = 0xFF;
S    stGDC1.stLayerConf_C.u16StartX       = GDC1_LAYERC_STARTX;
S    stGDC1.stLayerConf_C.u16StartY       = GDC1_LAYERC_STARTY;
S    stGDC1.stLayerConf_C.u16Width        = GDC1_LAYERC_WIDTH;
S    stGDC1.stLayerConf_C.u16Height       = GDC1_LAYERC_HEIGHT;
S    stGDC1.stLayerConf_C.u32FB0StartAddress = 0;
S    stGDC1.stLayerConf_C.u32FB1StartAddress = 0;
S
S    stGDC1.stLayerConf_D.u8LayerActive   = GDC1_LAYER_D;
S    stGDC1.stLayerConf_D.u8DisplayFormat = GDC1_LAYER_D_COLOR_FORMAT;
S    stGDC1.stLayerConf_D.u8DoubleBuffer  = GDC1_LAYER_D_DOUBLEFUFFERING;
S    stGDC1.stLayerConf_D.u8Alpha         = 0xFF;
S    stGDC1.stLayerConf_D.u16StartX       = GDC1_LAYERD_STARTX;
S    stGDC1.stLayerConf_D.u16StartY       = GDC1_LAYERD_STARTY;
S    stGDC1.stLayerConf_D.u16Width        = GDC1_LAYERD_WIDTH;
S    stGDC1.stLayerConf_D.u16Height       = GDC1_LAYERD_HEIGHT;
S    stGDC1.stLayerConf_D.u32FB0StartAddress = 0;
S    stGDC1.stLayerConf_D.u32FB1StartAddress = 0;
S
S    stGDC1.stLayerConf_E.u8LayerActive   = GDC1_LAYER_E;
S    stGDC1.stLayerConf_E.u8DisplayFormat = GDC1_LAYER_E_COLOR_FORMAT;
S    stGDC1.stLayerConf_E.u8DoubleBuffer  = GDC1_LAYER_E_DOUBLEFUFFERING;
S    stGDC1.stLayerConf_E.u8Alpha         = 0xFF;
S    stGDC1.stLayerConf_E.u16StartX       = GDC1_LAYERE_STARTX;
S    stGDC1.stLayerConf_E.u16StartY       = GDC1_LAYERE_STARTY;
S    stGDC1.stLayerConf_E.u16Width        = GDC1_LAYERE_WIDTH;
S    stGDC1.stLayerConf_E.u16Height       = GDC1_LAYERE_HEIGHT;
S    stGDC1.stLayerConf_E.u32FB0StartAddress = 0;
S    stGDC1.stLayerConf_E.u32FB1StartAddress = 0;
N#endif
N
N    /* configuration of FG */
N    stFG.u8FGActive = GDC_OFF;
N
N    stFG.stFgBuffer.u32CbaBufferAddr1 = 0x0;
N    stFG.stFgBuffer.u32CbaBufferAddr2 = 0x0;
N    stFG.stFgBuffer.u32CbaBufferAddr3 = 0x0;
N    stFG.stFgBuffer.eCbactUsedBuffer  = FG_SINGEL_BUFFERING;
N    stFG.stFgBuffer.u16LorLineOffset  = GDC0_LAYERA_WIDTH;
X    stFG.stFgBuffer.u16LorLineOffset  = 1280;
N
N    stFG.stFgSwapYcbCr.eScbCr   = FG_SCBCR_CB_CR;
N    stFG.stFgSwapYcbCr.eSycbcr  = FG_SYCBCR_Y2Y_CBCR2CBCR_CHANNEL;
N
N    stFG.stFgInMode.eBwex       = FG_BWEX_INTERPRET_CAMERAINPUT;
N    stFG.stFgInMode.eComd       = FG_INP_COLORMODE_RGB;
N    stFG.stFgInMode.eInterlMode = FG_INT_NORMAL_OPERATION;
N    stFG.stFgInMode.eNvmd       = FG_VIDEO_DATA;
N    stFG.stFgInMode.eRgb16_24   = FG_RGB888;
N    stFG.stFgInMode.eRgbPa      = FG_RGB_PARALLEL;
N    stFG.stFgInMode.u8Alpha     = 0xFF;
N
N    stFG.stFgOutMode.eDeInterl       = FG_DINT_NO_DEINTERLACED;
N    stFG.stFgOutMode.eMonochrome     = FG_MONO_COLOUR;
N    stFG.stFgOutMode.eOutputSelector = FG_YCBRO_RGB;
N    stFG.stFgOutMode.eRgbFormat      = FG_RRGB_RGBA32;
N    stFG.stFgOutMode.eYcbcr2RgbConv  = FG_YCBCR2RGB_ITU601;
N
N    stFG.stFgSignal.eHdact = FG_HIGH_ACTIVE;
N    stFG.stFgSignal.eHsact = FG_HIGH_ACTIVE;
N    stFG.stFgSignal.eVsact = FG_HIGH_ACTIVE;
N    stFG.stFgSignal.eNegPc = FG_NEGPC_NEG_EDGE;
N    stFG.stFgSignal.eNfOdd = FG_NFODD_LOWSIGNAL_FIRST;
N    stFG.stFgSignal.eOnec  = FG_ONEC_DATA_OVER_BOTH_INPCHANNELS;
N    stFG.stFgSignal.eUdsp  = FG_UDSP_HDISP_USED;
N    stFG.stFgSignal.eUsync = FG_USYNC_HVSYNC_USED;
N
N    stFG.stCroppConfig.u16ItrHorizWait   = 0;
N    stFG.stCroppConfig.u16ItrVertWait    = 0;
N    stFG.stCroppConfig.u16HcrCroppLeftX  = 0;  
N    stFG.stCroppConfig.u16VcrCroppTopY   = 0;  
N    stFG.stCroppConfig.u16HcrCroppWidth  = 640;
N    stFG.stCroppConfig.u16VcrCroppHeight = 480;
N    stFG.eCroppingEnable                 = FG_ENABLE;
N
N    stFG.u32ScaleX = 0x800;
N    stFG.u32ScaleY = 0x800;
N
N    stFG.stMeasurement.eVcr   = FG_ENABLE;
N    stFG.stMeasurement.eHcr   = FG_ENABLE;
N    stFG.stMeasurement.eVspwr = FG_ENABLE;
N    stFG.stMeasurement.eHspwr = FG_ENABLE;
N    stFG.stMeasurement.eHdisp = FG_ENABLE;
N
N    stFG.eFGEnable = FG_DISABLE;
N
N    // Initialize the middleware
N    vGfInitGfxMiddleWare(&stGDC0, &stGDC1, &stFG);
N}
N
N
N/****************************************************************************/
Nstatic void vInterruptEnable(void)
N{
N    /* Enable the VIC port(code from Init.s of verification ENV) */
N    asm_enable_core_vic_port();
N
N    /* enable interrupts in the core */
N    asm_enable_core_int();
N    asm_enable_core_fast_int();
N}
N
N
N/****************************************************************************/
N#ifndef CAPBT_ROMEXEC
Nstatic void vConfigureQSPI0ReadAccess(void)
N{
N    qspic_directconfig_st stDirConf;
N    ccr_clk_freq_e eClocFreq;
N    ccr_modulated_clk_e eModulationType;
N    qspic_prgconfig_st stPrgConfig;
N
N    i32AssignQSPISettings((qspi_dev_type_e)QSPI_DEVICE, 0x0200, &eClocFreq, &eModulationType, &stDirConf, &stPrgConfig);
X    i32AssignQSPISettings((qspi_dev_type_e)(DEV_S25FL127P), 0x0200, &eClocFreq, &eModulationType, &stDirConf, &stPrgConfig);
N    eClocFreq = CCR_CLKDIV_90_0MHz;
N
N    /* Configure QSPI clock */
N    i32CCR_EnableModuleClock(CCR_QSPI_0, CCR_ENABLE);
N    i32CCR_SetClockFreq(CCR_QSPI_0, eClocFreq, eModulationType);    
N
N    /* Configure direct mode */
N    i32QSPIC_ConfigureDirectControl(QSPIC_CNTRL_0, QSPIC_DEV_0, &stDirConf);
N
N    /* Configure program mode */
N    i32QSPIC_ConfigurePrgControl(QSPIC_CNTRL_0, &stPrgConfig);
N
N    /* Configure the IO pins */
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_SCLK, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_SCLK, PORT_QSPI0_SCLK_AS_QSPI0_SCLK);
X    i32GPIO_SetPinFunction(PORT_QSPI0_SCLK, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_SCLK, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_SCLK, GPIO_DISABLE);
N
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_CS0, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_CS0, PORT_QSPI0_CS0_AS_QSPI0_CS0);
X    i32GPIO_SetPinFunction(PORT_QSPI0_CS0, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_CS0, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_CS0, GPIO_DISABLE);
N
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_SIO0, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_SIO0, PORT_QSPI0_SIO0_AS_QSPI0_SIO0);
X    i32GPIO_SetPinFunction(PORT_QSPI0_SIO0, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_SIO0, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_SIO0, GPIO_DISABLE);
N
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_SIO1, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_SIO1, PORT_QSPI0_SIO1_AS_QSPI0_SIO1);
X    i32GPIO_SetPinFunction(PORT_QSPI0_SIO1, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_SIO1, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_SIO1, GPIO_DISABLE);
N
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_SIO2, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_SIO2, PORT_QSPI0_SIO2_AS_QSPI0_SIO2);
X    i32GPIO_SetPinFunction(PORT_QSPI0_SIO2, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_SIO2, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_SIO2, GPIO_DISABLE);
N
N    i32GPIO_EnableLatchFunction(PORT_QSPI0_SIO3, GPIO_DISABLE);
N    i32GPIO_SetPinFunction(PORT_QSPI0_SIO3, PORT_QSPI0_SIO3_AS_QSPI0_SIO3);
X    i32GPIO_SetPinFunction(PORT_QSPI0_SIO3, 1);
N    i32GPIO_SetOutputResistance(PORT_QSPI0_SIO3, GPIO_OUTPUT_RESISTANCE_25);
N    i32GPIO_EnablePullDown(PORT_QSPI0_SIO3, GPIO_DISABLE);
N}
N
N#endif /* CAPBT_ROMEXEC */
N
N
N/****************************************************************************/
N
Nvoid vBoardCfg(void)
N{   
N#ifndef CAPBT_ROMEXEC
N    /* Graphics need to be copied from QSPI, thus direct mapping is required */
N    vConfigureQSPI0ReadAccess();
N#endif /* CAPBT_ROMEXEC */    
N
N    vInterruptEnable();
N}
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
