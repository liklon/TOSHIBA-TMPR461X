L 1 "..\..\..\..\mw\src\graphics_init.c"
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware graphic initialisation
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware-Bt
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.16 $
N*   DATE        : $Date: 2015/06/10 13:39:12 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "ccr.h"
L 1 "..\..\..\..\lldd\inc\ccr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : CCR Low-level register
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : CCR
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.22 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CCR_LLDD_H
N#define CCR_LLDD_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
L 1 "..\..\..\..\common\inc\captypes.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Standard core definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Capricorn standard C types
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.6 $
N*   DATE        : $Date: 2015/05/04 09:07:19 $
N*   TAG         : $Name:  $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef CAPTYPES_H
N#define CAPTYPES_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N
N/**********************************************
N*                Definitions                  *
N**********************************************/
N/* Simple error codes */
N#define C_SUCCESS                           (0)
N#define C_FAILED                            (-1)
N
N/* Simple boolean value */
N#define C_FALSE                             (0)
N#define C_TRUE                              (1)
N
N/* NULL pointer definition */
N#define C_NULL                              ((void*)0)
N
N/* NULL pointer definition */
N#define TYPES_NULL_PTR   ((void *)0UL)
N
N/*********************************************/
N
N
N/**********************************************
N*            Primitive data types             *
N**********************************************/
N
N/*
N *  MISRA-C & ELDEC MPU/MCU software coding
N *  guideline compliant type definitions
N */
Ntypedef signed char int8_t;                 /* 1 byte,  prefix i8 */
Ntypedef signed short int16_t;               /* 2 bytes, prefix i16 */
Ntypedef signed int int32_t;                 /* 4 bytes, prefix i32 */
Ntypedef signed long long int64_t;           /* 8 bytes, prefix i64 */
Ntypedef unsigned char uint8_t;              /* 1 byte,  prefix u8 */
Ntypedef unsigned short uint16_t;            /* 2 bytes, prefix u16 */
Ntypedef unsigned int uint32_t;              /* 4 bytes, prefix u32 */
Ntypedef unsigned long long uint64_t;        /* 8 bytes, prefix u64 */
Ntypedef int bool_t;                         /* 4 bytes, prefix bo */
Ntypedef float float32_t;                    /* 4 bytes, prefix f32 */
Ntypedef double float64_t;                   /* 8 bytes, prefix f64 */
N
N/*********************************************/
N/*
N Definition for Cortex R4 32-bit memory/registers */
N#define TYPES_REG32 (volatile int32_t*)
N/*
N Definition for Cortex R4 16-bit memory/registers */
N#define TYPES_REG16 (volatile uint16_t*)
N/*
N Definition for Cortex R4 8-bit memory/registers */
N#define TYPES_REG8 (volatile uint8_t*)
N
N
N#endif /* CAPTYPES_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 25 "..\..\..\..\lldd\inc\ccr.h" 2
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_CCR_H_REVISION     "$Revision: 1.22 $"
N#define LLDD_CCR_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1862  /* Rule 19.7 : disable function-like macro not allowed */
N#endif
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N/* CCR unlock key value */
N#define CCR_KEY_VAL 0xA5C0F17BU
N
N/* CCR PDS unlock macro */
N#define vCCR_PDS_UNLOCK()(vSetCCR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/* CCR PDH unlock macro */
N#define vCCR_PDH_UNLOCK()(vSetPDHR_KEYR_KEYVAL(CCR_KEY_VAL))
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
Ntypedef enum tag_ccr_enable_e
N{
N  CCR_DISABLE = 0,  /* disable */
N  CCR_ENABLE  = 1   /* enable  */
N} ccr_enable_e;
N
Ntypedef enum tag_ccr_alarm_no_e
N{
N  CCR_ALARM_0  = 0,   /* Alarm 0 */
N  CCR_ALARM_1  = 1   /* Alarm 1  */
N} ccr_alarm_no_e;
N
N/* Controller selection */
Ntypedef enum tag_ccr_cntrl_e
N{
N    CCR_QSPI_0        =  0,   /* QSPI 0 */
N    CCR_QSPI_1        =  1,   /* QSPI 1 */
N    CCR_QSPI_INT      =  2,   /* QSPI Internal */
N    CCR_SDRAM         =  3,   /* SDRAM */
N    CCR_I2S           =  4,   /* I2S */
N    CCR_GDC_0         =  5,   /* GDC 0 */
N    CCR_GDC_1         =  6,   /* GDC 1 */
N    CCR_DMA           =  7,   /* DMA */
N    CCR_PARFLASH      =  8,   /* Parallel Flash */
N    CCR_DAP           =  9,   /*  */
N    CCR_GA            = 10,   /* GA Engine */
N    CCR_PNG           = 11,   /* PNG Decoder */
N    CCR_FG            = 12,   /* Framegrabber */
N    CCR_MLB           = 13,   /* MLB */
N    CCR_SMC           = 14,   /* Stepper Motor */
N    CCR_HSPWM         = 15,   /* HSPWM */
N    CCR_I2SM          = 16,   /* I2SM */
N    CCR_TSM           = 17,   /* TSM */
N    CCR_TRACE         = 18,   /* Trace */
N    CCR_320MHz        = 19    /* 320MHz */
N} ccr_cntrl_e;
N
N/* Modulation type */
Ntypedef enum tag_ccr_modulated_clk_e
N{
N    CCR_MODULATED     = 0,    /* modulated clock */
N    CCR_NON_MODULATED = 1     /* non modulated clock */
N} ccr_modulated_clk_e;
N
N/*  */
Ntypedef enum tag_ccr_clock_type_e
N{
N    CCR_MODULATED_GDC0       = 0,    /* Modulated clock for GDC0 */
N    CCR_MODULATED_GDC1       = 1,    /* Modulated clock for GDC1 */
N    CCR_NON_MODULATED_GDC0   = 2,    /* Non modulated clock for GDC0 */
N    CCR_NON_MODULATED_GDC1   = 3,    /* Non modulated clock for GDC1 */
N    CCR_DOTCLKIN             = 4,    /* DOTCLKIN for GDC0 or GDC1 */
N    CCR_MODULATED_I2S        = 5,    /* Modulated clock for I2S */
N    CCR_NON_MODULATED_I2S    = 6,    /* Non modulated clock for I2S */
N    CCR_I2SMCLKIN            = 7,    /* I2SMCLKIN for I2S */
N    CCR_MODULATED_320MHZ     = 8,    /* Modulated clock for 320MHz */
N    CCR_NON_MODULATED_320MHZ = 9     /* Non modulated clock for 320MHz */
N} ccr_clock_type_e;
N
N/* Clock divider values (input clock: 900MHz) */
Ntypedef enum tag_ccr_clk_freq_e
N{
N    CCR_CLKDIV_112_5MHz =  8,    /* 112,5 MHz output clk */
N    CCR_CLKDIV_100_0MHz =  9,    /* 100,0 MHz output clk */
N    CCR_CLKDIV_90_0MHz  = 10,    /*  90,0 MHz output clk */
N    CCR_CLKDIV_81_8MHz  = 11,    /*  81,8 MHz output clk */
N    CCR_CLKDIV_75_0MHz  = 12,    /*  75,0 MHz output clk */
N    CCR_CLKDIV_69_2MHz  = 13,    /*  69,2 MHz output clk */
N    CCR_CLKDIV_64_3MHz  = 14,    /*  64,3 MHz output clk */
N    CCR_CLKDIV_60_0MHz  = 15,    /*  60,0 MHz output clk */
N    CCR_CLKDIV_56_3MHz  = 16,    /*  56,3 MHz output clk */
N    CCR_CLKDIV_52_9MHz  = 17,    /*  52,9 MHz output clk */
N    CCR_CLKDIV_50_0MHz  = 18,    /*  50,0 MHz output clk */
N    CCR_CLKDIV_47_4MHz  = 19,    /*  47,4 MHz output clk */
N    CCR_CLKDIV_45_0MHz  = 20,    /*  45,0 MHz output clk */
N    CCR_CLKDIV_42_9MHz  = 21,    /*  42,9 MHz output clk */
N    CCR_CLKDIV_40_9MHz  = 22,    /*  40,9 MHz output clk */
N    CCR_CLKDIV_39_1MHz  = 23,    /*  39,1 MHz output clk */
N    CCR_CLKDIV_37_5MHz  = 24,    /*  37,5 MHz output clk */
N    CCR_CLKDIV_36_0MHz  = 25,    /*  36,0 MHz output clk */
N    CCR_CLKDIV_34_6MHz  = 26,    /*  34,6 MHz output clk */
N    CCR_CLKDIV_33_3MHz  = 27,    /*  33,3 MHz output clk */
N    CCR_CLKDIV_32_1MHz  = 28,    /*  32,1 MHz output clk */
N    CCR_CLKDIV_31_0MHz  = 29,    /*  31,0 MHz output clk */
N    CCR_CLKDIV_30_0MHz  = 30,    /*  30,0 MHz output clk */
N    CCR_CLKDIV_29_0MHz  = 31,    /*  29,0 MHz output clk */
N    CCR_CLKDIV_28_1MHz  = 32,    /*  28,1 MHz output clk */
N    CCR_CLKDIV_27_2MHz  = 33,    /*  27,2 MHz output clk */
N    CCR_CLKDIV_26_4MHz  = 34,    /*  26,4 MHz output clk */
N    CCR_CLKDIV_25_7MHz  = 35,    /*  25,7 MHz output clk */
N    CCR_CLKDIV_25_0MHz  = 36,    /*  25,0 MHz output clk */
N    CCR_CLKDIV_24_3MHz  = 37,    /*  24,3 MHz output clk */
N    CCR_CLKDIV_23_6MHz  = 38,    /*  23,6 MHz output clk */
N    CCR_CLKDIV_23_0MHz  = 39,    /*  23,0 MHz output clk */
N    CCR_CLKDIV_22_5MHz  = 40     /*  22,5 MHz output clk */
N} ccr_clk_freq_e;
N
N/* Clock stability */
Ntypedef enum tag_ccr_clock_stability_e
N{
N    CCR_CLOCK_NOT_STABLE     = 0,    /* Clock is not stable */
N    CCR_CLOCK_STABLE         = 1,    /* Clock is stable */
N    CCR_CLOCK_STABILITY_FAIL = 2     /* Clock stability faild */
N} ccr_clock_stability_e;
N
N/* Clocks */
Ntypedef enum tag_ccr_clocks_e
N{
N    CCR_OSC10M            = 0,    /* 10M clock */
N    CCR_OSC32K            = 1,    /* 32K clock */
N    CCR_RC100K            = 2,    /* RC100K clock */
N    CCR_MODULATED_PLL     = 3,    /* modulated PLL */
N    CCR_NON_MODULATED_PLL = 4     /* non-modulated PLL */
N} ccr_clocks_e;
N
N/* Reset types */
Ntypedef enum tag_reset_type_e
N{
N    CCR_FULL_RST    = 0,    /* Software full reset */
N    CCR_DBG_RST     = 1,    /* Debug reset */
N    CCR_SW_PART_RST = 2     /* Software part reset */
N} ccr_reset_type_e;
N
N/* target device mode */
Ntypedef enum tag_ccr_device_mode_e
N{
N    CCR_DEVICE_MODE_TRANSITION = 0x00000000,    /* M_PLL */
N    CCR_DEVICE_MODE_M_PLL      = 0x005C0001,    /* M_PLL */
N    CCR_DEVICE_MODE_M_OSC10    = 0x005C0002,    /* M_OSC10 */
N    CCR_DEVICE_MODE_STB_OSC10  = 0x005C0004,    /* STB_OSC10 */
N    CCR_DEVICE_MODE_SLP_OSC10  = 0x005C0008,    /* SLP_OSC10 */
N    CCR_DEVICE_MODE_SLP_RC10   = 0x005C0010,    /* SLP_RC10 */
N    CCR_DEVICE_MODE_STOP_R     = 0x005C0020,    /* STOP_R */
N    CCR_DEVICE_MODE_STOP       = 0x005C0040     /* STOP */
N} ccr_device_mode_e;
N
N/* Interupts */
Ntypedef enum tag_ccr_interrupts_e
N{
N    CCR_INTERRUPTS_STATE_CHANGE = 0,    /* state change interrupt*/
N    CCR_INTERRUPTS_ALARM_0      = 1,    /* alarm comparator 0 interrupt */
N    CCR_INTERRUPTS_ALARM_1      = 2,    /* alarm comparator 1 interrupt */
N    CCR_INTERRUPTS_BECC         = 3,    /* backup RAM ECC interrupt */
N    CCR_INTERRUPTS_MECC         = 4     /* main memory ECC interrupt */
N} ccr_interrupts_e;
N
N/* Interrupt occurred */
Ntypedef enum tag_ccr_int_occurred_e
N{
N  CCR_INT_NOT_OCCURRED = 0,  /* interrupt did not occur */
N  CCR_INT_OCCURRED     = 1   /* interrupt occurred */
N} ccr_int_occurred_e;
N
N/* Operation mode type */
Ntypedef enum tag_ccr_operation_mode_type_e
N{
N    CCR_SSCG_MODE_DECIMAL_FACTOR = 0,    /* Decimal factor mode */
N    CCR_SSCG_MODE_INTEGER_FACTOR = 1     /* Integer factor mode */
N} ccr_operation_mode_type_e;
N
N/* Modulation direction */
Ntypedef enum tag_ccr_modulation_direction
N{
N    CCR_SSCG_MD_DOWN_SPREAD   = 0,    /* modulation direction is down spread */
N    CCR_SSCG_MD_CENTER_SPREAD = 1     /* modulation direction is up spread */
N} ccr_modulation_direction;
N
N/* Feedback division ratio prescaler value */
Ntypedef enum tag_ccr_fdr_prescaler_e
N{
N    CCR_FDR_PRESCALER_1 = 0,    /* feedback division ratio not doubled */
N    CCR_FDR_PRESCALER_2 = 1     /* feedback division ratio doubled */
N} ccr_fdr_prescaler_e;
N
N/* Watchdof timer alarm output configuration */
Ntypedef enum tag_ccr_wdt_alarm_type_e
N{
N    CCR_WDT_ALARM_AS_NMI   = 0,    /* watchdog timer alarm as watchdog timer NMI */
N    CCR_WDT_ALARM_AS_RESET = 1     /* watchdog timer alarm as watchdog timer RESET */
N} ccr_wdt_alarm_type_e;
N
N/* CAN modes */
Ntypedef enum tag_ccr_can_mode_e
N{                                     /*             tranceiver , combined channels, sepatate channels, pin pairs, description */
N    CCR_CAN_MODE_T_1_1_1_1  = 0x0,    /* CAN mode  1:     yes   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_T_2_1_1    = 0x1,    /* CAN mode  2:     yes   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_T_2_2      = 0x2,    /* CAN mode  3:     yes   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_T_3_1      = 0x3,    /* CAN mode  4:     yes   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_T_ALL      = 0x4,    /* CAN mode  5:     yes   ,         4        ,         -        ,    1     , all to one  */
N    CCR_CAN_MODE_NT_1_1_1_1 = 0x8,    /* CAN mode  5:      no   ,         -        ,         4        ,    4     ,   1+1+1+1   */
N    CCR_CAN_MODE_NT_2_1_1   = 0x9,    /* CAN mode  6:      no   ,         2        ,         2        ,    3     ,    2+1+1    */
N    CCR_CAN_MODE_NT_2_2     = 0xA,    /* CAN mode  7:      no   ,         4        ,         -        ,    2     ,     2+2     */
N    CCR_CAN_MODE_NT_3_1     = 0xB,    /* CAN mode  8:      no   ,         3        ,         1        ,    2     ,     3+1     */
N    CCR_CAN_MODE_NT_ALL     = 0xC,    /* CAN mode  9:      no   ,         4        ,         -        ,    1     , all to all  */
N    CCR_CAN_MODE_NT_INTER   = 0xF     /* CAN mode 10:      no   ,         -        ,         4        ,    -     , internal    */
N} ccr_can_mode_e;
N
N/* ECC modes */
Ntypedef enum tag_ccr_ecc_mode_e
N{
N    CCR_ECC_MODE_256KB  = 0,    /* 256KB with ECC */
N    CCR_ECC_MODE_128KB  = 2,    /* 128KB with ECC */
N    CCR_ECC_MODE_NO_ECC = 3     /* without ECC */
N} ccr_ecc_mode_e;
N
N/* TBIO channel */
Ntypedef enum tag_ccr_tbio_channel_e
N{
N    CCR_TBIO_0 = 0,    /* TBIO channel 0 */
N    CCR_TBIO_1 = 1,    /* TBIO channel 1 */
N    CCR_TBIO_2 = 2,    /* TBIO channel 2 */
N    CCR_TBIO_3 = 3,    /* TBIO channel 3 */
N    CCR_TBIO_4 = 4,    /* TBIO channel 4 */
N    CCR_TBIO_5 = 5,    /* TBIO channel 5 */
N    CCR_TBIO_6 = 6,    /* TBIO channel 6 */
N    CCR_TBIO_7 = 7,    /* TBIO channel 7 */
N    CCR_TBIO_8 = 8,    /* TBIO channel 8 */
N    CCR_TBIO_9 = 9     /* TBIO channel 9 */
N} ccr_tbio_channel_e;
N
N/* TBIO port direction */
Ntypedef enum tag_ccr_tbio_direction_e
N{
N    CCR_TBIO_IN  = 0,    /* TBIO pin as input */
N    CCR_TBIO_OUT = 1     /* TBIO pin as output */
N} ccr_tbio_direction_e;
N
N/* TBIN0 signal select for Complex Timer 4 */
Ntypedef enum tag_ccr_tbin_source_ctimer4_e
N{
N    CCR_TBIN_CTIMER4_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER4_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER4_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER4_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER4_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER4_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER4_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER4_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER4_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER4_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER4_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER4_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER4_GDC_PWMOUT0    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is SIN_PLUS0 */
N    CCR_TBIN_CTIMER4_GDC_SIN_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is SIN_MINUS0 */
N} ccr_tbin_source_ctimer4_e;
N
N/* TBIN0 signal select for Complex Timer 5 */
Ntypedef enum tag_ccr_tbin_source_ctimer5_e
N{
N    CCR_TBIN_CTIMER5_PWMOUT00       =  0,    /* TBIN0 signal for Complex Timer 4 is PWMOUT00 */
N    CCR_TBIN_CTIMER5_PWMOUT02       =  1,    /* TBIN0 signal for Complex Timer 4 is PWMOUT02 */
N    CCR_TBIN_CTIMER5_PWMOUT04       =  2,    /* TBIN0 signal for Complex Timer 4 is PWMOUT04 */
N    CCR_TBIN_CTIMER5_PWMOUT06       =  3,    /* TBIN0 signal for Complex Timer 4 is PWMOUT06 */
N    CCR_TBIN_CTIMER5_PWMOUT08       =  4,    /* TBIN0 signal for Complex Timer 4 is PWMOUT08 */
N    CCR_TBIN_CTIMER5_PWMOUT10       =  5,    /* TBIN0 signal for Complex Timer 4 is PWMOUT10 */
N    CCR_TBIN_CTIMER5_PWMOUT12       =  6,    /* TBIN0 signal for Complex Timer 4 is PWMOUT12 */
N    CCR_TBIN_CTIMER5_PWMOUT14       =  7,    /* TBIN0 signal for Complex Timer 4 is PWMOUT14 */
N    CCR_TBIN_CTIMER5_PWMOUT16       =  8,    /* TBIN0 signal for Complex Timer 4 is PWMOUT16 */
N    CCR_TBIN_CTIMER5_PWMOUT18       =  9,    /* TBIN0 signal for Complex Timer 4 is PWMOUT18 */
N    CCR_TBIN_CTIMER5_PWMOUT20       = 10,    /* TBIN0 signal for Complex Timer 4 is PWMOUT20 */
N    CCR_TBIN_CTIMER5_PWMOUT22       = 11,    /* TBIN0 signal for Complex Timer 4 is PWMOUT22 */
N    CCR_TBIN_CTIMER5_GDC_PWMOUT1    = 12,    /* TBIN0 signal for Complex Timer 4 is GDC_PWMOUT1 */
N    CCR_TBIN_CTIMER5_GDC_COS_PLUS0  = 13,    /* TBIN0 signal for Complex Timer 4 is COS_PLUS0 */
N    CCR_TBIN_CTIMER5_GDC_COS_MINUS0 = 14     /* TBIN0 signal for Complex Timer 4 is COS_MINUS0 */
N} ccr_tbin_source_ctimer5_e;
N
N/* Synchronisation between GDC0 and GDC1 */
Ntypedef enum tag_ccr_gdc_sync_e
N{
N    CCR_GDC_SYNC_INDEPENDANT   = 0,    /* independant operation of GDC1 */
N    CCR_GDC_SYNC_GDC1_USE_GDC0 = 1     /* GDC1 uses GDC0 synchronisation signals */
N} ccr_gdc_sync_e;
N
N/* NOR channel */
Ntypedef enum tag_ccr_nor_channel_e
N{
N    CCR_NOR_CHANNEL_0 = 0,    /* NOR channel 0 */
N    CCR_NOR_CHANNEL_1 = 1     /* NOR channel 1 */
N} ccr_nor_channel_e;
N
N/* NAND channel */
Ntypedef enum tag_ccr_nand_channel_e
N{
N    CCR_NAND_CHANNEL_0 = 0,    /* NAND channel 0 */
N    CCR_NAND_CHANNEL_1 = 1     /* NAND channel 1 */
N} ccr_nand_channel_e;
N
N/* SRAM channel */
Ntypedef enum tag_ccr_sram_channel_e
N{
N    CCR_SRAM_CHANNEL_0 = 0,    /* SRAM channel 0 */
N    CCR_SRAM_CHANNEL_1 = 1,    /* SRAM channel 1 */
N    CCR_SRAM_CHANNEL_2 = 2,    /* SRAM channel 2 */
N    CCR_SRAM_CHANNEL_3 = 3     /* SRAM channel 3 */
N} ccr_sram_channel_e;
N
N/* Complex timer */
Ntypedef enum tag_ccr_complex_timer_e
N{
N    CCR_COMPLEX_TIMER_0_TO_5 = 0,    /* Complex timer 0 to 5 */
N    CCR_COMPLEX_TIMER_6_TO_9 = 1     /* Complex timer 6 to 9 */
N} ccr_complex_timer_e;
N
N/* Device version */
Ntypedef enum tag_ccr_device_version_e
N{
N    DEVICE_CAP_BT_1  = 0,    /* TMPR461XBG-300 (BGA-328, no SIP Flash)   */
N    DEVICE_CAP_C     = 1,    /* TMPR462XBG-300 (BGA-328, with SIP Flash) */
N    DEVICE_CAP_BT_0  = 2,    /* TMPR460XBG-300 (BGA-244, no SIP Flash)   */
N    DEVICE_INVALID   = 3     /* Reserved   */
N} ccr_device_version_e;
N
N/* SIP Flash size */
Ntypedef enum tag_ccr_SIPflash_size_e
N{
N    CCR_SIP_FLASH_SIZE_2MB  = 0,    /*  2MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_4MB  = 1,    /*  4MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_8MB  = 2,    /*  8MB SIP FLASH size */
N    CCR_SIP_FLASH_SIZE_16MB = 3     /* 16MB SIP FLASH size */
N} ccr_SIPflash_size_e;
N
Ntypedef enum tag_processor_device_e
N{
N    CCR_CR4 = 0,    /* processor R4 */
N    CCR_M3  = 1     /* processor M3 */
N} ccr_processor_device_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_current_trim_e
N{
N    CCR_VREG_CURRENT_TRIM_M_40_PROZ = 4,    /* -40% */
N    CCR_VREG_CURRENT_TRIM_M_30_PROZ = 5,    /* -30% */
N    CCR_VREG_CURRENT_TRIM_M_20_PROZ = 6,    /* -20% */
N    CCR_VREG_CURRENT_TRIM_M_10_PROZ = 7,    /* -10% */
N    CCR_VREG_CURRENT_TRIM_0_PROZ    = 0,    /*   0% */
N    CCR_VREG_CURRENT_TRIM_P_10_PROZ = 1,    /*  10% */
N    CCR_VREG_CURRENT_TRIM_P_20_PROZ = 2,    /*  20% */
N    CCR_VREG_CURRENT_TRIM_P_30_PROZ = 3     /*  30% */
N} ccr_vreg_current_trim_e;
N
N/* Voltage regulator reference voltage trim */
Ntypedef enum tag_vreg_ref_voltage_trim_e
N{
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_5_PROZ = 15,    /* -7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_7_0_PROZ = 14,    /* -7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_5_PROZ = 13,    /* -6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_6_0_PROZ = 12,    /* -6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_5_PROZ = 11,    /* -5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_5_0_PROZ = 10,    /* -5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_5_PROZ =  9,    /* -4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_4_0_PROZ =  8,    /* -4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_5_PROZ =  7,    /* -3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_3_0_PROZ =  6,    /* -3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_5_PROZ =  5,    /* -2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_2_0_PROZ =  4,    /* -2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_5_PROZ =  3,    /* -1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_1_0_PROZ =  2,    /* -1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_M_0_5_PROZ =  1,    /* -0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_0_PROZ     =  0,    /*    0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_0_5_PROZ = 31,    /* 0.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_0_PROZ = 30,    /* 1.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_1_5_PROZ = 29,    /* 1.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_0_PROZ = 28,    /* 2.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_2_5_PROZ = 27,    /* 2.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_0_PROZ = 26,    /* 3.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_3_5_PROZ = 25,    /* 3.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_0_PROZ = 24,    /* 4.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_4_5_PROZ = 23,    /* 4.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_0_PROZ = 22,    /* 5.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_5_5_PROZ = 21,    /* 5.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_0_PROZ = 20,    /* 6.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_6_5_PROZ = 19,    /* 6.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_0_PROZ = 18,    /* 7.0% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_7_5_PROZ = 17,    /* 7.5% */
N    CCR_VREG_REF_VOLTAGE_TRIM_P_8_0_PROZ = 16     /* 8.0% */
N} ccr_vreg_ref_voltage_trim_e;
N
N/* Voltage regulator current trim */
Ntypedef enum tag_vreg_temperature_trim_e
N{
N    CCR_VREG_TEMPERATURE_TRIM_M_60_DEGC = 4,    /* -60degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_50_DEGC = 5,    /* -50degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_40_DEGC = 6,    /* -40degC */
N    CCR_VREG_TEMPERATURE_TRIM_M_25_DEGC = 7,    /* -25degC */
N    CCR_VREG_TEMPERATURE_TRIM_0_DEGC    = 0,    /*   0degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_25_DEGC = 1,    /*  25degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_50_DEGC = 2,    /*  50degC */
N    CCR_VREG_TEMPERATURE_TRIM_P_70_DEGC = 3     /*  70degC */
N} ccr_vreg_temperature_trim_e;
N
N/* Oscillator adjustment */
Ntypedef enum tag_osc_adjustment_e
N{
N    CCR_OSC_ADJUSTMENT_M_8 =  8,    /* -8 */
N    CCR_OSC_ADJUSTMENT_M_7 =  9,    /* -7 */
N    CCR_OSC_ADJUSTMENT_M_6 = 10,    /* -6 */
N    CCR_OSC_ADJUSTMENT_M_5 = 11,    /* -5 */
N    CCR_OSC_ADJUSTMENT_M_4 = 12,    /* -4 */
N    CCR_OSC_ADJUSTMENT_M_3 = 13,    /* -3 */
N    CCR_OSC_ADJUSTMENT_M_2 = 14,    /* -2 */
N    CCR_OSC_ADJUSTMENT_M_1 = 15,    /* -1 */
N    CCR_OSC_ADJUSTMENT_0   =  0,    /*  0 */
N    CCR_OSC_ADJUSTMENT_P_1 =  1,    /*  1 */
N    CCR_OSC_ADJUSTMENT_P_2 =  2,    /*  2 */
N    CCR_OSC_ADJUSTMENT_P_3 =  3,    /*  3 */
N    CCR_OSC_ADJUSTMENT_P_4 =  4,    /*  4 */
N    CCR_OSC_ADJUSTMENT_P_5 =  5,    /*  5 */
N    CCR_OSC_ADJUSTMENT_P_6 =  6,    /*  6 */
N    CCR_OSC_ADJUSTMENT_P_7 =  7     /*  7 */
N} ccr_osc_adjustment_e;
N
N/* Threshold for power-good sensing */
Ntypedef enum tag_threshold_power_good_sensing_e
N{
N    CCR_POWER_GOOD_SENSING_0 = 0,    /* threshold 0 */
N    CCR_POWER_GOOD_SENSING_1 = 1,    /* threshold 1 */
N    CCR_POWER_GOOD_SENSING_2 = 2,    /* threshold 2 */
N    CCR_POWER_GOOD_SENSING_3 = 3,    /* threshold 3 */
N    CCR_POWER_GOOD_SENSING_4 = 7,    /* threshold 4 */
N    CCR_POWER_GOOD_SENSING_5 = 6,    /* threshold 5 */
N    CCR_POWER_GOOD_SENSING_6 = 5,    /* threshold 6 */
N    CCR_POWER_GOOD_SENSING_7 = 4     /* threshold 7 */
N} ccr_threshold_power_good_sensing_e;
N
N/* SMC IO level */
Ntypedef enum tag_smc_io_level_e
N{
N    CCR_SMC_IO_LEVEL_5V0 = 0,    /* operate with 5V */
N    CCR_SMC_IO_LEVEL_3V3 = 1     /* operate with 3.3V */
N} ccr_smc_io_level_e;
N
N/* Interrupts */
Ntypedef enum tag_system_interrupt_e
N{
N    CCR_OSC10M_CLOCK_MISSING_INT = 0x00000001,    /* OSC10MHz */
N    CCR_OSC32K_CLOCK_MISSING_INT = 0x00000100,    /* OSC32KHz */
N    CCR_EROR_INT_0               = 0x00010000,    /* Error interrupt 0 */
N    CCR_EROR_INT_1               = 0x00020000,    /* Error interrupt 1 */
N    CCR_EROR_INT_2               = 0x00040000,    /* Error interrupt 2 */
N    CCR_BACKUP_ECC_RAM_INT       = 0x01000000,    /* Backup ECC-RAM */
N    CCR_MAIN_MEMORY_ECC_RAM_INT  = 0x02000000,    /* Main memory ECC-RAM */
N    CCR_STPU_INT                 = 0x04000000,    /* STPU */
N    CCR_WDT_INT                  = 0x08000000,    /* WDT */
N    CCR_IO_INT                   = 0x10000000     /* IO */
N} ccr_system_interrupt_e;
N
N/* ECC */
Ntypedef enum tag_ecc_e
N{
N    CCR_BACKUP_RAM_ECC  = 0,    /* Backup RAM ECC */
N    CCR_MAIN_MEMORY_ECC = 1     /* Main memory ECC */
N} ccr_ecc_e;
N
N/* ECC interrupt type */
Ntypedef enum tag_ecc_interrupt_type_e
N{
N    CCR_ECC_SYSC_INTR    = 0,    /* SYSC_INTR will be generated */
N    CCR_ECC_SYSC_NMI     = 1,    /* SYSC_NMI will be generated */
N    CCR_ECC_SW_FULL_RSTN = 2     /* SW_FULL_RSTN will be generated */
N} ccr_ecc_interrupt_type_e;
N
N/* Modes */
Ntypedef enum tag_modes_e
N{
N    CCR_STB_MODE      = 0,    /* mission state entered from STB_ISC10 */
N    CCR_SLPOSC10_MODE = 1,    /* mission state entered from SLP_OSC10 */
N    CCR_SLPRCOSC_MODE = 2,    /* mission state entered from SLP_RD100K */
N    CCR_STOPR_MODE    = 3,    /* mission state entered from STOP_R */
N    CCR_STOP_MODE     = 4     /* mission state entered from STOP */
N} ccr_modes_e;
N
N/* Wakeup attributes */
Ntypedef enum tag_wakeup_attribute_e
N{
N    CCR_LOW_LEVEL  = 0,    /* low level wakeup */
N    CCR_HIGH_LEVEL = 1,    /* high level wakeup */
N    CCR_FALL_EDGE  = 2,    /* falling edge wakeup */
N    CCR_RISE_EDGE  = 3     /* rising edge wakeup */
N} ccr_wakeup_attribute_e;
N
N/* Wakeup sources */
Ntypedef enum tag_wakeup_source_e
N{
N    CCR_WAKEUP_SOURCE_0     =  0,    /* wakeup source 0 */
N    CCR_WAKEUP_SOURCE_1     =  1,    /* wakeup source 1 */
N    CCR_WAKEUP_SOURCE_2     =  2,    /* wakeup source 2 */
N    CCR_WAKEUP_SOURCE_3     =  3,    /* wakeup source 3 */
N    CCR_WAKEUP_SOURCE_4     =  4,    /* wakeup source 4 */
N    CCR_WAKEUP_SOURCE_5     =  5,    /* wakeup source 5 */
N    CCR_WAKEUP_SOURCE_6     =  6,    /* wakeup source 6 */
N    CCR_WAKEUP_SOURCE_7     =  7,    /* wakeup source 7 */
N    CCR_WAKEUP_SOURCE_NMI   =  8,    /* wakeup source NMI */
N    CCR_WAKEUP_SOURCE_ALARM =  9,    /* wakeup source ALARM */
N    CCR_WAKEUP_SOURCE_RTC   = 10     /* wakeup source RTC */
N} ccr_wakeup_source_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* SSCG configuration structure */
Ntypedef struct tag_ccr_sscg_congig_st
N{
N    ccr_modulation_direction  eModulationDirection;
N    uint8_t                   u8ModulationCycleLengthFractionalN;
N    uint16_t                  u16ModulationDegree;
N} ccr_sscg_congig_st;
N
N/* SRAM bit error inspection configuration */
Ntypedef struct tag_ccr_sram_bit_error_insp_config_st
N{
N    uint8_t u8PosFirstError;     /* Position of first bit error to be injected in SRAM */
N    uint8_t u8PosSecondError;    /* Position of second bit error to be injected in SRAM */
N    uint8_t u8ByteSelect;        /* Byte select for bit error injection in SRAM */
N} ccr_sram_bit_error_insp_config_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vCCR_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IOPDHRevision  - pointer to PDH IO header revision string
N *                pau8IOPDHTag       - pointer to PDH IO header tag string
N *                pau8IOPDSRevision  - pointer to PDS IO header revision string
N *                pau8IOPDSTag       - pointer to PDS IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vCCR_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IOPDHRevision, uint8_t** pau8IOPDHTag,
N                     uint8_t** pau8IOPDSRevision, uint8_t** pau8IOPDSTag);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eEn        CCR_Enable if clock should be enabled
N *                           CCR_Disable if clock should be disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetEnabledModuleClock
N *
N * Purpose:       Enable or disable module clock
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                peEn       status of module clock
N *                           CCR_Enable clock is enabled
N *                           CCR_Disable clock is disabled
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetEnabledModuleClock(ccr_cntrl_e eCntrl, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockFreq
N *
N * Purpose:       Configures clock frequency
N *                Clock frequency can be changed every time because no glitch
N *                should occur during switching. To be on the save side every
N *                action of the module should be finished.
N *                Normally first the clock frequency should be set. Than the
N *                module should be switched on. Switching off the module is not
N *                necessary before setting the clock frequency.
N *
N * Inputs:        eCntrl     Controller
N *                eFreq      Target frequency
N *                eModulated modulation type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockFreq(ccr_cntrl_e eCntrl, ccr_clk_freq_e eFreq, ccr_modulated_clk_e eModulated);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SelectClockType
N *
N * Purpose:       Select clock type
N *
N * Inputs:        eCntrl        Controller
N *                eClockType    Clock type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SelectClockType(ccr_cntrl_e eCntrl, ccr_clock_type_e eClockType);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPllClockStabilizationCompareValue
N *
N * Purpose:       Set Pll clock stabilization compare value
N *
N * Inputs:        u8Value    Stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPllClockStabilizationCompareValue(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      eCCR_ReadClockStability
N *
N * Purpose:       Read stability value of different oscillators and PLLs
N *
N * Inputs:        eClk        Clock or PLL
N *
N * Outputs:       none
N *
N * Return Values: clock stability value
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_clock_stability_e eCCR_ReadClockStability(ccr_clocks_e eClk);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GenerateReset
N *
N * Purpose:       Generate different types of reset
N *
N * Inputs:        eResetType     Reset type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GenerateReset(ccr_reset_type_e eResetType);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetDeviceMode
N *
N * Purpose:       Set device mode
N *
N * Inputs:        eMode     Device mode
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Transitions to STB_OSC10, SLP_OSC10, SLP_RC10, STOP_R
N *                and STOP are only possible in rom2ram-project without
N *                any probe connected.
N *
N ***************************************************************************/
Nint32_t i32CCR_SetDeviceMode(ccr_device_mode_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableInterrupt
N *
N * Purpose:       Enable interrupts
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableInterrupt(ccr_interrupts_e eInterrupt, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetInterruptStatusAll
N *
N * Purpose:       Read status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetInterruptStatus
N *
N * Purpose:       Read interrupt status
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       peIntOccurred  Status of interrupt
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetInterruptStatusSingle(ccr_interrupts_e eInterrupt, ccr_int_occurred_e * peIntOccurred);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearInterruptsAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearInterruptsAll(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInterrupt     Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearInterruptSingle(ccr_interrupts_e eInterrupt);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetCurrentDeviceMode
N *
N * Purpose:       Read current device mode
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Device mode
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_mode_e eCCR_GetCurrentDeviceMode(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSSCG
N *
N * Purpose:       Configure the SSCG and start it with new settings
N *
N * Inputs:        pstSSCGConfig    Pointer to SSCG-configuration
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSSCG(ccr_sscg_congig_st * pstSSCGConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetWDTAlarmType
N *
N * Purpose:       Configure WDT alarm type
N *
N * Inputs:        eAlarmType    WDT alarm type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetWDTAlarmType(ccr_wdt_alarm_type_e eAlarmType);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableBitErrorInjectionInRAM
N *
N * Purpose:       Enable or disable error injection in Back-up RAM
N *
N * Inputs:        eEn    Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableBitErrorInjectionInRAM(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetPositionOfBitErrorInjectionInRAM
N *
N * Purpose:       Set bit positions to be injected in Back-up RAM
N *
N * Inputs:        u8FirstPosition     first position
N *                u8SecondPosition    second position
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetPositionOfBitErrorInjectionInRAM(uint8_t u8FirstPosition, uint8_t u8SecondPosition);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetCANMode
N *
N * Purpose:       Set CAN mode
N *
N * Inputs:        eCANMode     CAN mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetCANMode(ccr_can_mode_e eCANMode);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetECCMode
N *
N * Purpose:       Set ECC mode
N *
N * Inputs:        eECCMode     ECC mode
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetECCMode(ccr_ecc_mode_e eECCMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetTBIODirection
N *
N * Purpose:       Set TBIO port direction
N *
N * Inputs:        eTBIOChannel     TBIO channel
N *                eDirection       Pin direction
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetTBIODirection(ccr_tbio_channel_e eTBIOChannel, ccr_tbio_direction_e eDirection);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer4
N *
N * Purpose:       Set signal for Complex Timer 4
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer4(ccr_tbin_source_ctimer4_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetInputForComplexTimer5
N *
N * Purpose:       Set signal for Complex Timer 5
N *
N * Inputs:        eSource     Source for timer
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetInputForComplexTimer5(ccr_tbin_source_ctimer5_e eSource);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC0Interface
N *
N * Purpose:       Enable/disable GDC0 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC0Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDC1Interface
N *
N * Purpose:       Enable/disable GDC1 interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDC1Interface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableGDCPanelInterface
N *
N * Purpose:       Enable/disable GDC panel interface
N *
N * Inputs:        eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableGDCPanelInterface(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetGDCSynchronisation
N *
N * Purpose:       Set synchronisation type between GDC0 and GDC1
N *
N * Inputs:        eGDCSync     GDC synchronisation type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_SetGDCSynchronisation(ccr_gdc_sync_e eGDCSync);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMask
N *
N * Purpose:       Set NOR-interface address mask
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMask(ccr_nor_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNORAddressMatch
N *
N * Purpose:       Set NOR-interface address match
N *
N * Inputs:        eChannel          NOR-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNORAddressMatch(ccr_nor_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMask
N *
N * Purpose:       Set NAND-interface address mask
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address maks
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMask(ccr_nand_channel_e eChannel, uint16_t u16AddressMask);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetNANDAddressMatch
N *
N * Purpose:       Set NAND-interface address match
N *
N * Inputs:        eChannel          NAND-channel
N *                u16AddressMask    Address match
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetNANDAddressMatch(ccr_nand_channel_e eChannel, uint16_t u16AddressMatch);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNORChipSelect
N *
N * Purpose:       Set NAND-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:   value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNORChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_SetNANDChipSelect
N *
N * Purpose:       Set NOR-interface address mask & address match as a word
N *                for channel 0 and 1
N *
N * Inputs:        u32Value:  value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid  vCCR_SetNANDChipSelect(uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableSRAMBitErrorInspection
N *
N * Purpose:       Enable or disable SRAM bit error inspection
N *
N * Inputs:        eChannel    SRAM-channel
N *                eEn         Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableSRAMBitErrorInspection(ccr_sram_channel_e eChannel, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetSRAMBitErrorInspectionConfiguration
N *
N * Purpose:       Set SRAM bit error inspection configuration
N *
N * Inputs:        eChannel    SRAM-channel
N *                pstConfig   Pointer to configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetSRAMBitErrorInspectionConfiguration(ccr_sram_channel_e eChannel, ccr_sram_bit_error_insp_config_st * pstConfig);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWDTAlarm
N *
N * Purpose:       Clear WDT alarm bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWDTAlarm(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearErrorIrgFlagOfBackupRAM
N *
N * Purpose:       Clear error IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearErrorIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      vCCR_ClearWarningIrgFlagOfBackupRAM
N *
N * Purpose:       Clear warning IRQ flag of Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ClearWarningIrgFlagOfBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearErrorIrgFlagOfSRAM
N *
N * Purpose:       Clear error IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearErrorIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWarningIrgFlagOfSRAM
N *
N * Purpose:       Clear warning IRQ flag of SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWarningIrgFlagOfSRAM(ccr_sram_channel_e eChannel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_IssueSynchronPulseToCTimer
N *
N * Purpose:       Issue synchronous pulse to complex timer 0 to 5 or  to 9
N *
N * Inputs:        eComplexTimer    Complex timers
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_IssueSynchronPulseToCTimer(ccr_complex_timer_e eComplexTimer);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWDTAlarmStatusBit
N *
N * Purpose:       Get WDT alarm status bit
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWDTAlarmStatusBit(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQErrorFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for error condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQErrorFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetIRQWarningFlafForBackupRAM
N *
N * Purpose:       Get IRQ flag for warning condition for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetIRQWarningFlafForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetPosOfBitErrorInBackupRAM
N *
N * Purpose:       Get position of bit error for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetPosOfBitErrorInBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetLastCheckResultForBackupRAM
N *
N * Purpose:       Get last check result for Back-up RAM
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Enable or disable
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetLastCheckResultForBackupRAM(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDebuggerCR4PowerDownRequestStatus
N *
N * Purpose:       Get status of debugger CR4 power down request
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Status
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDebuggerCR4PowerDownRequestStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgErrorCondition
N *
N * Purpose:       Get IRQ flag error condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgErrorCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMIrgWarningCondition
N *
N * Purpose:       Get IRQ flag warning condition for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMIrgWarningCondition(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMPositionOfBitError
N *
N * Purpose:       Get position of bit error for SRAM
N *
N * Inputs:        eChannel      SRAM-channel
N *                pu8Position   Pointer to position
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMPositionOfBitError(ccr_sram_channel_e eChannel, uint8_t * pu8Position);
N
N/****************************************************************************
N *
N * Function:      i32CCR_GetSRAMLastCheckResult
N *
N * Purpose:       Get last check result for SRAM
N *
N * Inputs:        eChannel    SRAM-channel
N *                peEn        Pointer to bit result
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_GetSRAMLastCheckResult(ccr_sram_channel_e eChannel, ccr_enable_e * peEn);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceVersion
N *
N * Purpose:       Read device version
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: device version
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_device_version_e eCCR_GetDeviceVersion(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSIPFlashSize
N *
N * Purpose:       Read size of SIP flash
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: SIP flash size
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_SIPflash_size_e eCCR_GetSIPFlashSize(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GeCR4DebugStatus
N *
N * Purpose:       Provides information about the availability of the debug port.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: CCR_DISABLE - Debug Port DISABLED
N *                CCR_ENABLE  - Debug Port ENABLED
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GeCR4DebugStatus(void);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableR4DebugPort
N *
N * Purpose:       Enable or disable debug port of processors
N *
N * Inputs:        eProcessorType     Processor type
N *                eEn                Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableR4DebugPort(ccr_processor_device_e eProcessorType, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegCurrentTrim
N *
N * Purpose:       Set voltage regulator current trim value
N *
N * Inputs:        eValue     voltage regulator current trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegCurrentTrim(ccr_vreg_current_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegRefVoltageTrim
N *
N * Purpose:       Set voltage regulator reference voltage trim value
N *
N * Inputs:        eValue     voltage regulator reference voltage trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegRefVoltageTrim(ccr_vreg_ref_voltage_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetVRegTemperatureTrim
N *
N * Purpose:       Set voltage regulator temperature trim value
N *
N * Inputs:        eValue     voltage regulator temperature trim value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetVRegTemperatureTrim(ccr_vreg_temperature_trim_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetOscAdjustment
N *
N * Purpose:       Set oscillator adjustment value
N *
N * Inputs:        eValue     oscillator adjustment value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetOscAdjustment(ccr_osc_adjustment_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetThresholdPowerGoodSensing
N *
N * Purpose:       Set threshold for power good sensing
N *
N * Inputs:        eValue     threshold for power good sensing
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetThresholdPowerGoodSensing(ccr_threshold_power_good_sensing_e eValue);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetAlarmComparatorThreshold
N *
N * Purpose:       Set alarm comparator threshold for Alarm 0 or 1
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                u8Value     alarm comparator threshold setting (0..31)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetAlarmComparatorThreshold(ccr_alarm_no_e eAlarmNo, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableAlarm
N *
N * Purpose:       Enables/Disables CCR alarm comparator
N *
N * Inputs:        eAlarmNo :  alarm comparator 0 or 1
N *                eEn      :  enable/disbale alarm
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableAlarm(ccr_alarm_no_e eAlarmNo, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableClockSupervisor
N *
N * Purpose:       Enable/disable clock supervisor
N *
N * Inputs:        eClocks    clock type
N *                eEN        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableClockSupervisor(ccr_clocks_e eClocks, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC10MClockSupervisorOutputResetFunction
N *
N * Purpose:       Enable/disable OSC10M clock supervisor output reset function
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC10MClockSupervisorOutputResetFunction(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_EnableOSC32KHz
N *
N * Purpose:       Enable/disable OSC32KHz
N *
N * Inputs:        eEN     enable or disable
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_EnableOSC32KHz(ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vCCR_ConfigureSmcIOLevel
N *
N * Purpose:       Set SMC IO level
N *
N * Inputs:        eLevel     SMC IO level
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vCCR_ConfigureSmcIOLevel(ccr_smc_io_level_e eLevel);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Set Clock Stabilization Compare Value
N *
N * Inputs:        eClocks    clock type
N *                u8Value    clock stabilization compare value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetClockStabilizationCompareValue(ccr_clocks_e eClocks, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      u16CCR_getBootOptions
N *
N * Purpose:       Read boot options
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Boot options
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetBootOptions(void);
N
N/****************************************************************************
N *
N * Function:      u32CCR_GetSystemIntStatusAll
N *
N * Purpose:       Read interrupt status of all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status of all interrupts
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint32_t u32CCR_GetSystemIntStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetSystemIntStatusSingle
N *
N * Purpose:       Read interrupt status of a singe interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetClockStabilizationCompareValue
N *
N * Purpose:       Clear interrupt status of a single interrupt
N *
N * Inputs:        eInt    Interrupt
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearSystemIntStatusSingle(ccr_system_interrupt_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableECCInterrupt
N *
N * Purpose:       Enable ECC interrupt
N *
N * Inputs:        eEccType      ECC type
N *                eEccIntType   ECC inte3rrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableECCInterrupt(ccr_ecc_e eEccType, ccr_ecc_interrupt_type_e eEccIntType);
N
N/****************************************************************************
N *
N * Function:      u8CCR_GetDeviceModesAll
N *
N * Purpose:       Read all device modes
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint8_t u8CCR_GetDeviceModesAll(void);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetDeviceModesSingle
N *
N * Purpose:       read single device mode
N *
N * Inputs:        eMode      Device mode
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetDeviceModesSingle(ccr_modes_e eMode);
N
N/****************************************************************************
N *
N * Function:      i32CCR_EnableWakeupSource
N *
N * Purpose:       Enable or disable wakeup source
N *
N * Inputs:        eSource    wakeup source
N *                eEn        enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_EnableWakeupSource(ccr_wakeup_source_e eSource, ccr_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32CCR_SetWakeupAttribute
N *
N * Purpose:       Set wakeup attribute
N *
N * Inputs:        eSource       wakeup source
N *                eAttribute    wakeup attribute
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_SetWakeupAttribute(ccr_wakeup_source_e eSource, ccr_wakeup_attribute_e eAttribute);
N
N/****************************************************************************
N *
N * Function:      u16CCR_GetWakeupSourceInterruptAll
N *
N * Purpose:       Read all wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: wakeup source interrupt status vector
N *
N * Limitations:
N *
N ***************************************************************************/
Nuint16_t u16CCR_GetWakeupSourceInterruptAll(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      eCCR_GetWakeupSourceInterruptSingle
N *
N * Purpose:       Read single wakeup source interrupts
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: enabled or disabled
N *
N * Limitations:
N *
N ***************************************************************************/
Nccr_enable_e eCCR_GetWakeupSourceInterruptSingle(ccr_wakeup_source_e eSource);
N
N/****************************************************************************
N *
N * Function:      i32CCR_ClearWakeupInterruptSource
N *
N * Purpose:       Clear wakeup interrupt source
N *
N * Inputs:        eSource       wakeup source
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:
N *
N ***************************************************************************/
Nint32_t i32CCR_ClearWakeupInterruptSource(ccr_wakeup_source_e eSource);
N
N/****************************************************************************/
N
N
N#endif /* CCR_LLDD_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 23 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "layer.h"
L 1 "..\..\..\..\mw\inc\layer.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware layer handling
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/06/10 13:41:10 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef LAYER_H
N#define LAYER_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "graphics_init.h"
L 1 "..\..\..\..\mw\inc\graphics_init.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware graphic initialisation
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/06/10 13:39:31 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GRAPHICS_INIT_H
N#define GRAPHICS_INIT_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "gdc.h"
L 1 "..\..\..\..\lldd\inc\gdc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Reference GDC Low Level Device Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphics Display Controller (GDC)
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.20 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GDC_H
N#define GDC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_GDC_H_REVISION     "$Revision: 1.20 $"
N#define LLDD_GDC_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N#define GDC_GAWID_MAX   0x3FF
N#define GDC_GADEL_MAX   0x3FF
N
N/* #define _EXTENDED_GDC_APIS_DISABLED_ */
N/*********************************************/
N
N/* Number of entries in a color look-up table (CLUT) */
N#define GDC_CLUTSIZE_CORR                   256
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/* Graphics display controller (channel) */
Ntypedef enum tag_gdc_ch_e
N{
N    GDC0 = 0,                               /* Controller (channel) 0 */
N    GDC1 = 1                                /* Controller (channel) 1 */
N} gdc_ch_e;
N
N/* Clr Bits in GDCDCR:*/
Ntypedef enum tag_gdc_dcr_err_e
N{
N    GDC_DCR_ERR_NONE            = 0x00U,     /* GBER bit in GDCDCR register   */
N    GDC_DCR_ERR_GBER            = 0x01U,     /* GBER bit in GDCDCR register   */
N    GDC_DCR_ERR_GAPCOL          = 0x02U,     /* GAPCOL bit in GDCDCR register */
N    GDC_DCR_ERR_GBER_AND_GAPCOL = 0x03U      /* GBER and GAPCOL bit in GDCDCR register */
N} gdc_dcr_err_e;
N
N/* Used for Signal status of HDISP, HSYNC, VSYNC */
Ntypedef enum tag_gdc_dithering_e
N{
N    GDC_DITHERING_DSIABLED                  = 0x00U,
N    GDC_DITHERING_SIMPLE_ENABLED            = 0x01U,
N    GDC_DITHERING_MAGIC_SQR_ENABLED         = 0x02U,
N    GDC_DITHERING_MAGIC_SQR_SUBPIX_ENABLED  = 0x03U
N} gdc_dithering_e;
N
N/* Update Control for shadow registers: */
Ntypedef enum tag_gdc_reg_update_mode_e
N{
N    GDC_UPDATE_BY_EVERY_VSYNC          = 0x01,  /* update with every VSYNC (default)   */
N    GDC_UPDATE_BY_NEXT_VSYNC_ONLY      = 0x02   /* manual mode: update once at next VSYNC 
N                                                   (HW will change it to 00 by next V-Sync. 
N                                                   In this case NO Update will happen later) */
N} gdc_reg_update_mode_e;
N
N/* status of Update Control for shadow registers: */
Ntypedef enum tag_gdc_reg_update_status_e
N{
N    GDC_UPDATE_STAT_DISABLED           = 0x00,  /* update is disabled (In case of 2, it will be reset by HW by next v-sync)  */
N    GDC_UPDATE_STAT_EVERY_VSYNC        = 0x01,  /* update is with every VSYNC (default)   */
N    GDC_UPDATE_STAT_NEXT_VSYNC_ONLY    = 0x02   /* update only for 1 vsync */
N} gdc_reg_update_status_e;
N
N/* Graphic Layers */
Ntypedef enum tag_gdc_layer_e
N{
N    GDC_LAYER_A = 0x0U,                     /* Main Layer A */
N    GDC_LAYER_B = 0x1U,                     /* Main Layer B */
N    GDC_LAYER_C = 0x2U,                     /* Main Layer C */
N    GDC_LAYER_D = 0x3U,                     /* Main Layer D */
N    GDC_LAYER_E = 0x4U                      /* Main Layer E */
N} gdc_layer_e;
N
N/* Display Window */
Ntypedef enum tag_gdc_win_e
N{
N    GDC_WIN_A = 0x0U,                       /* Layer A display window */
N    GDC_WIN_B = 0x1U,                       /* Layer B display window */
N    GDC_WIN_C = 0x2U,                       /* Layer C display window */
N    GDC_WIN_D = 0x3U,                       /* Layer D display window */
N    GDC_WIN_E = 0x4U                        /* Layer E display window */
N} gdc_win_e;
N
N/* *** */
N
N/*
N *  GDCSAR parameter values
N */
N
N/* Frame buffers */
Ntypedef enum tag_gdc_frmbuff_e
N{
N    GDC_BUFF_DEFAULT = 0x0U,                /* Default Frame Buffer (must be always defined) */
N    GDC_BUFF_SECOND  = 0x1U                 /* Second buffer is optional (used only during auto buffer switch) */
N} gdc_frmbuff_e;
N
N/* *** */
N
N/*
N *  GDCMSEGR parameter values
N */
N
N/* Memory segments */
Ntypedef enum tag_gdc_seg_e
N{
N    GDC_SEG_LAYER_A = 0x1U,                 /* Layer A segment */
N    GDC_SEG_LAYER_B = 0x2U,                 /* Layer B segment */
N    GDC_SEG_LAYER_C = 0x3U,                 /* Layer C segment */
N    GDC_SEG_LAYER_D = 0x4U,                 /* Layer D segment */
N    GDC_SEG_LAYER_E = 0x5U,                 /* Layer E segment */
N    GDC_SEG_WIN_A   = 0x6U,                 /* Layer A Display Window segment */
N    GDC_SEG_WIN_B   = 0x7U,                 /* Layer B Display Window segment */
N    GDC_SEG_WIN_C   = 0x8U,                 /* Layer C Display Window segment */
N    GDC_SEG_WIN_D   = 0x9U,                 /* Layer D Display Window segment */
N    GDC_SEG_WIN_E   = 0xAU                  /* Layer E Display Window segment */
N} gdc_seg_e;
N
N/* *** */
N
N/*
N * GDCCR parameter values
N */
N
N/* Enable/disable a controller, layer or window */
Ntypedef enum tag_gdc_en_e
N{
N    GDC_DISABLE = 0x0U,                     /* Disable */
N    GDC_ENABLE  = 0x1U                      /* Enable */
N} gdc_en_e;
N
N/* Selective color correction mode */
Ntypedef enum tag_gdc_ccmode_e
N{
N    GDC_EXCEPT_CMPVAL = 0,                  /* No correction of the compare values */
N    GDC_CMPVAL_ONLY   = 1                   /* Correct on match with the compare values only */
N} gdc_ccmode_e;
N
N/* Display config type */
Ntypedef enum tag_disp_config_type_e
N{
N    GDC_USE_DISP_SET_DIRECT  = 0,            /* use direct setting (GDCDSR and GDCDIMR) */
N    GDC_USE_DISP_SET_BY_LAYA = 1             /* use by setting of layer A (GDCLSRA and GDCLDRA) */
N} gdc_disp_config_type_e;
N
N/* GDC output, display, pannel control */
Ntypedef enum tag_gdc_on_e
N{
N    GDC_OFF = 0x0U,                         /* GDC output off */
N    GDC_ON  = 0x1U                          /* GDC output on */
N} gdc_on_e;
N
N/* Layer data format */
Ntypedef enum tag_gdc_dfmt_e
N{
N    GDC_RGBA32 = 0x0U,                      /* RGBA 32-bit */
N    GDC_RGB16  = 0x1U,                      /* RGB 16-bit */
N    GDC_ARGB32 = 0x2U                       /* ARGB 32-bit */
N} gdc_dfmt_e;
N
N/* Frame buffer active status */
Ntypedef enum tag_gdc_fbact_e
N{
N    GDC_BUFF0 = 0x0U,                       /* Frame buffer 0 is used for the next frame */
N    GDC_BUFF1 = 0x1U                        /* Frame buffer 1 is used for the next frame */
N} gdc_fbact_e;
N
N/* Dot-clock Selector */
Ntypedef enum tag_gdc_idc_e
N{
N    GDC_DOTCLK_EXT = 0x0U,                  /* External dot-clock used */
N/* >>> WARNING <<< When using external dot clock, output drivers can be damaged when programming "1" (GDC_DOTCLK_INT) to the related bit >>> WARNING <<< */
N    GDC_DOTCLK_INT = 0x1U                   /* Internal dot-clock used */
N
N} gdc_idc_e;
N
N/* Signal Polarity */
Ntypedef enum tag_gdc_pol_e
N{
N    GDC_NEG = 0x0U,                         /* Negative */
N    GDC_POS = 0x1U                          /* Positive */
N} gdc_pol_e;
N
N/* Artifact handling  */
Ntypedef enum tag_gdc_arth_e
N{
N    GDC_NO_ACTION   = 0x0U,                 /* No Action */
N    GDC_MULTI_BUFF  = 0x1U,                 /* Multi-buffer switching */
N    GDC_VIDEO_BLEND = 0x3U                  /* Display window video blending */
N} gdc_arth_e;
N
N/* Artifact handling location  */
Ntypedef enum tag_gdc_arthcd_e
N{
N    GDC_LAYER_AB = 0x0U,                    /* Display window layers A & B */
N    GDC_LAYER_CD = 0x1U                     /* Display window layers C & D */
N} gdc_arthcd_e;
N
N/* Layer order */
Ntypedef enum tag_gdc_vord_e
N{
N    GDC_ABCDE = 0x0U,                        /* A, B, C, D, E */
N    GDC_ACBDE = 0x1U                         /* A, C, B, D, E */
N} gdc_vord_e;
N
N/* Direction input/output selection */
Ntypedef enum tag_gdc_dir_e
N{
N    GDC_OUTPUT = 0x0U,                      /* Output mode */
N    GDC_INPUT  = 0x1U                       /* Input mode */
N} gdc_dir_e;
N
N/* Composite synchronization */
Ntypedef enum tag_gdc_csync_e
N{
N    GDC_VSYNC = 0x0U,                       /* Output VSync on DISP_vsync pin */
N    GDC_CSYNC = 0x1U                        /* Output CSync on DISP_vsync pin */
N} gdc_csync_e;
N
N/* *** */
N
N/*
N *  GDCINTR parameter values
N */
N
N/* Interrupt status */
Ntypedef enum tag_gdc_irqact_e
N{
N    GDC_IRQ_INACTIVE = 0x0U,                /* IRQ is inactive */
N    GDC_IRQ_ACTIVE   = 0x1U                 /* IRQ is active */
N} gdc_irqact_e;
N
N/* *** */
N
N/*
N *  GDCPTCR parameter values
N */
N
N/* General purpose pin selection */
Ntypedef enum tag_gdc_gpp_e
N{
N    GDC_GPP0 = 0x8U,                        /* General Purpose Pin #0, <GDCPTCR:bit 8> */
N    GDC_GPP1,                               /* General Purpose Pin #1, <GDCPTCR:bit 9> */
N    GDC_GPP2,
N    GDC_GPP3,
N    GDC_GPP4,
N    GDC_GPP5,
N    GDC_GPP6,
N    GDC_GPP7,
N    GDC_GPP8,
N    GDC_GPP9,
N    GDC_GPP10,
N    GDC_GPP11                               /* General Purpose Pin #11 */
N} gdc_gpp_e;
N
N/* Positive panel synchronization select */
Ntypedef enum tag_gdc_ppsync_e
N{
N    GDC_INPUT_LOW  = 0x0U,                    /* input is low active */
N    GDC_INPUT_HIGH = 0x1U                     /* input is high active */
N} gdc_ppsync_e;
N
N/* Reduced Swing Differential Signaling select */
Ntypedef enum tag_gdc_rsdsen_e
N{
N    GDC_RSDSEN_DIGITAL      = 0x0U,                    /* digital output */
N    GDC_RSDSEN_DIFFERENTIAL = 0x1U                     /* differential output */
N} gdc_rsdsen_e;
N
N/* Reduced Swing Differential Signaling Output Mode */
Ntypedef enum tag_gdc_rsdsoutmode_e
N{
N    GDC_RSDSOUT_HIGH      = 0x0U,                    /* high */
N    GDC_RSDSOUT_MEDIUM    = 0x1U,                    /* medium */
N    GDC_RSDSOUT_LOW       = 0x2U,                    /* low */
N    GDC_RSDSOUT_HIZ       = 0x3U                     /* high impedance */
N} gdc_rsdsoutmode_e;
N
N/* Reduced Swing Differential Signaling Pre-Emphasis Mode */
Ntypedef enum tag_gdc_rsdspreemp_e
N{
N    GDC_RSDSPEMD_HIGH      = 0x0U,                    /* high */
N    GDC_RSDSPEMD_MEDIUM    = 0x1U,                    /* medium */
N    GDC_RSDSPEMD_LOW       = 0x2U,                    /* low */
N    GDC_RSDSPEMD_DISABLE   = 0x3U                     /* pre-emp disabled */
N} gdc_rsdspreemp_e;
N
N
N
N/* Data-data alignment */
Ntypedef enum tag_gdc_ddal_e
N{
N    GDC_ALIGNED =  0x0U,                    /* Aligned */
N    GDC_DELAYED =  0x1U                     /* Hal a cycle delayed */
N} gdc_ddal_e;
N
N/* Data-clock Alignment */
Ntypedef enum tag_gdc_dcal_e
N{
N    GDC_RISING  = 0x0U,                     /* Output changes with rising edge */
N    GDC_FALLING = 0x1U                      /* Output changes with falling edge */
N} gdc_dcal_e;
N
N/* *** */
N
N/*
N *  GDCCLUT parameter values
N */
N
N/* Color correction CLUT channel selection */
Ntypedef enum tag_gdc_clut_e
N{
N    GDC_CLUT_RED   = 0x0U,                  /* Red CLUT */
N    GDC_CLUT_GREEN = 0x1U,                  /* Green CLUT */
N    GDC_CLUT_BLUE  = 0x2U                   /* Blue CLUT */
N} gdc_clut_e;
N
N/* *** */
N
N/*
N *  GDCBAR parameter values
N */
N
N/* Capture buffer selection */
Ntypedef enum tag_gdc_cbuff_e
N{
N    GDC_CBUFF1 = 0x0U,                      /* Capture buffer 0 - first */
N    GDC_CBUFF2 = 0x1U,                      /* Capture buffer 1 - second */
N    GDC_CBUFF3 = 0x2U                       /* Capture buffer 2 - third */
N} gdc_cbuff_e;
N
N/* *** */
N
N/*
N * GDCSCVRx parameter values
N */
N
N/* Selective color correction compare activation */
Ntypedef enum tag_gdc_active_e
N{
N    GDC_DEACTIVATED = 0,                    /* Active */
N    GDC_ACTIVATED   = 1                     /* Inactive */
N} gdc_active_e;
N
N/* Selective color correction compare values */
Ntypedef enum tag_gdc_cmp_e
N{
N    GDC_CCVAL0 = 0,                         /* Compare value 0 */
N    GDC_CCVAL1 = 1,                         /* Compare value 1 */
N    GDC_CCVAL2 = 2,                         /* Compare value 2 */
N    GDC_CCVAL3 = 3,                         /* Compare value 3 */
N    GDC_CCVAL4 = 4,                         /* Compare value 4 */
N    GDC_CCVAL5 = 5,                         /* Compare value 5 */
N    GDC_CCVAL6 = 6,                         /* Compare value 6 */
N    GDC_CCVAL7 = 7                          /* Compare value 7 */
N} gdc_cmp_e;
N
N/* *** */
N
N/*
N *  GDCAPCR parameter values
N */
N
N/* APC mode */
Ntypedef enum tag_gdc_apcm_e
N{
N    GDC_CPU_COMP  = 0,                      /* CPU mode */
N    GCD_AUTO_COMP = 1                       /* AUTO mode */
N} gdc_apcm_e;
N
N/* APC pixel value */
Ntypedef enum tag_gdc_apcp_e
N{
N    GDC_CURR_PIXVAL  = 0,                   /* Current mode */
N    GCD_PREV_PIXVAL  = 1                    /* Previous mode */
N} gdc_apcp_e;
N
N
N/* *** */
N
N/*
N *  GDCPROTR parameter values
N */
N
N/* Write protection level for GDC registers */
Ntypedef enum tag_gdc_write_protect_e
N{
N    GDC_WR_PROTECT_NONE            = 0x00U,   /* no protection                         */
N    GDC_WR_PROTECT_DISPL_CONFIG    = 0x01U,   /* display configuration write-protected */
N    GDC_WR_PROTECT_FEATURE_SWITCH  = 0x02U,   /* feature switches write-protected      */
N    GDC_WR_PROTECT_LAYER_PARAMS    = 0x03U    /* ayer parameters write-protected       */
N} gdc_write_protect_e;
N
N
N
N
N/* *** */
N
N/* Display Pulse Generator
N *  GDCGPCR-A, -B, -C parameter values
N */
N
N/* General purpose Pulse Generator: pulse generator selection */
Ntypedef enum tag_gdc_pg_gen_id_e
N{
N    GDC_PULSE_GEN_0  = 0x0U,      /* Pulse #0  Generator */
N    GDC_PULSE_GEN_1  = 0x1U,      /* Pulse #1  Generator */
N    GDC_PULSE_GEN_2  = 0x2U,      /* Pulse #2  Generator */
N    GDC_PULSE_GEN_3  = 0x3U,      /* Pulse #3  Generator */
N    GDC_PULSE_GEN_4  = 0x4U,      /* Pulse #4  Generator */
N    GDC_PULSE_GEN_5  = 0x5U,      /* Pulse #5  Generator */
N    GDC_PULSE_GEN_6  = 0x6U,      /* Pulse #6  Generator */
N    GDC_PULSE_GEN_7  = 0x7U,      /* Pulse #7  Generator */
N    GDC_PULSE_GEN_8  = 0x8U,      /* Pulse #8  Generator */
N    GDC_PULSE_GEN_9  = 0x9U,      /* Pulse #9  Generator */
N    GDC_PULSE_GEN_10 = 0xAU,      /* Pulse #10 Generator */
N    GDC_PULSE_GEN_11 = 0xBU       /* Pulse #11 Generator */
N} gdc_pg_gen_id_e;
N
N
N/* General purpose Pulse Generator: output clock gating enable */
Ntypedef enum tag_gdc_pg_cgsel_e
N{
N    GDC_PULSE = 0x0U,                       /* Output general purpose pulse */
N    GDC_DCLK  = 0x1U                        /* Output dotclock gated with general purpose pulse */
N} gdc_pg_cgsel_e;
N
N/* General purpose Pulse Generator: output combined logic output select */
Ntypedef enum tag_gdc_pg_outsel_e
N{
N    GDC_PGA          = 0x0U,      /* Pulse generator (PGA) */
N    GDC_PGA_AND_PGB  = 0x1U,
N    GDC_PGA_NAND_PGB = 0x2U,
N    GDC_PGA_OR_PGB   = 0x3U,
N    GDC_PGA_NOR_PGB  = 0x4U,
N    GDC_PGA_XOR_PGB  = 0x5U,
N    GDC_PGA_XNOR_PGB = 0x6U,
N    GDC_PGB          = 0x7U        /* Pulse Generator (PGB) */
N} gdc_pg_outsel_e;
N
N/* General purpose Pulse Generator: Trigger selection */
Ntypedef enum tag_gdc_pg_trigger_e
N{
N    GDC_TRIG_VSYNK  = 0x2U,
N    GDC_TRIG_HSYNC  = 0x3U,
N    GDC_TRIG_VDISP  = 0x4U,
N    GDC_TRIG_HDISP  = 0x5U,
N    GDC_TRIG_PNL    = 0x6U
N} gdc_pg_trigger_e;
N
N/* *** */
N
N/* Display Pulse Generator
N *  parameter values for  General purpose Pulse Generator 
N *  GDCPxGxR  Px: P0..P11 /GxR: GAR, GBR
N */
N/* Pulse generator A or B: */
Ntypedef enum tag_gdc_pg_A_B_e
N{
N    GDC_PULSE_GEN_A = 0x0U,
N    GDC_PULSE_GEN_B = 0x1U
N} gdc_pg_A_B_e;
N
N/* Pulse generator input signal select: */
Ntypedef enum tag_gdc_pg_input_e
N{
N    GDC_INP_DOTCLK = 0x1U,
N    GDC_INP_VSYNK  = 0x2U,
N    GDC_INP_HSYNC  = 0x3U,
N    GDC_INP_VDISP  = 0x4U,
N    GDC_INP_HDISP  = 0x5U,
N    GDC_INP_PNL    = 0x6U
N} gdc_pg_input_e;
N
N/* Pulse generator active level select:: */
Ntypedef enum tag_gdc_pg_active_level_e
N{
N    GDC_ACTIVE_LVL_0 = 0x0U,   /* active level is 0 */
N    GDC_ACTIVE_LVL_1 = 0x1U    /* active level is 1 */
N} gdc_pg_active_level_e;
N
N/*Divider value is defined by DIV+1 */
Ntypedef enum tag_gdc_pg_divider_e
N{
N    GDC_DIVIDER_BYPASS   = 0x00U,
N    GDC_DIVIDER_2        = 0x01U,
N    GDC_DIVIDER_3        = 0x02U,
N    GDC_DIVIDER_4        = 0x03U,
N    GDC_DIVIDER_5        = 0x04U,
N    GDC_DIVIDER_6        = 0x05U,
N    GDC_DIVIDER_7        = 0x06U,
N    GDC_DIVIDER_8        = 0x07U,
N    GDC_DIVIDER_9        = 0x08U,
N    GDC_DIVIDER_10       = 0x09U,
N    GDC_DIVIDER_11       = 0x0AU,
N    GDC_DIVIDER_12       = 0x0BU,
N    GDC_DIVIDER_13       = 0x0CU,
N    GDC_DIVIDER_14       = 0x0DU,
N    GDC_DIVIDER_15       = 0x0EU,
N    GDC_DIVIDER_16       = 0x0FU
N} gdc_pg_divider_e;
N
N
N/*
N *  GDCGBECR parameter values
N */
N/* Read / Write Direction */
Ntypedef enum tag_gdc_buserr_dir_e
N{
N    GDC_BUSERR_READ_TRANSF   = 0x0U,
N    GDC_BUSERR_WRITE_TRANSF  = 0x1U
N} gdc_buserr_dir_e;
N
N/* Burst Type */
Ntypedef enum tag_gdc_buserr_bursttype_e
N{
N    GDC_BUSERR_BURST_TYPE_FIXED   = 0x0U,
N    GDC_BUSERR_BURST_TYPE_INCR    = 0x1U
N} gdc_buserr_bursttype_e;
N
N/* Burst Size */
Ntypedef enum tag_gdc_buserr_burstsize_e
N{
N    GDC_BUSERR_BURST_1BYTE     = 0x0U,
N    GDC_BUSERR_BURST_2BYTE     = 0x1U,
N    GDC_BUSERR_BURST_4BYTE     = 0x2U,
N    GDC_BUSERR_BURST_81BYTE    = 0x3U,
N    GDC_BUSERR_BURST_16BYTE    = 0x4U,
N    GDC_BUSERR_BURST_32BYTE    = 0x5U,
N    GDC_BUSERR_BURST_64BYTE    = 0x6U,
N    GDC_BUSERR_BURST_128BYTE   = 0x7U
N} gdc_buserr_burstsize_e;
N
N
N/* Response Type */
Ntypedef enum tag_gdc_buserr_resptype_e
N{
N    GDC_BUSERR_RESP_OK        = 0x0U,
N    GDC_BUSERR_RESP_EXOKAY    = 0x1U,
N    GDC_BUSERR_RESP_SLVERR    = 0x2U,
N    GDC_BUSERR_RESP_DECERR    = 0x3U
N} gdc_buserr_resptype_e;
N
N
N/* *** */
N
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* Frame buffer configuration structure */
Ntypedef struct tag_gdc_fbcfg_st
N{
N    gdc_frmbuff_e eBuff;                    /* Frame buffer selection (default/second) */
N    uint32_t      u32Addr;                  /* Frame buffer physical start address */
N    uint16_t      u16Width;                 /* Frame buffer memory width (line width), limited to 13-bits */
N} gdc_fbcfg_st;
N
N/* Synchronization configuration structure */
Ntypedef struct tag_gdc_sync_st
N{
N    gdc_csync_e eSyncType;                  /* Selects between VSYNC and CSYNC type */
N    gdc_pol_e   eVSyncPol;                  /* Polarity of VSYNC */
N    gdc_pol_e   eHSyncPol;                  /* Polarity of HSYNC */
N    uint8_t     u8HsyncWdth;                /* Width of HSYNC (dot-clocks) */
N    uint8_t     u8VsyncWdth;                /* Width of VSYNC (lines) */
N    uint16_t    u16HLineLen;                /* Horizontal line length (dot-clocks) */
N    uint16_t    u16VFrameLen;               /* Vertical frame length (lines) */
N} gdc_sync_st;
N
N/* IRQ configuration structure */
Ntypedef struct tag_gdc_irqcgf_st
N{
N    gdc_en_e eAPCIrqEn;                     /* Automatic Pixel Checker (APC) Mask */
N    uint16_t u16LineNr;                     /* Line Number HSYNCINT [Range 0x0 - 0x7FF] */
N    gdc_en_e eHSyncIrqEn;                   /* HSYNCINT Mask */
N    gdc_en_e eVSyncIrqEn;                   /* VSYNCINT Mask */
N    gdc_en_e eIfurIrqEn;                    /* IFURINT IRQ Mask */
N    gdc_en_e eOfurIrqEn;                    /* IFURINT IRQ Mask */
N} gdc_irqcgf_st;
N
N/* APC configuration structure */
Ntypedef struct tag_gdc_apccfg_st
N{
N    gdc_apcm_e eMode;                       /* APC Mode */
N    uint8_t    u8Frames;                    /* 7 bits:  Computation interval length [in frames] */
N    uint8_t    u8WWidth;                    /* 8 bits:  Window width */
N    uint8_t    u8WHeight;                   /* 7 bits:  Window height */
N    uint16_t   u16HStart;                   /* 12 bits: Horizontal start position */
N    uint16_t   u16VStart;                   /* 11 bits: Vertical start position */
N    uint32_t   u32AutoChkSum;               /* 22 bits: Expected checksum in AUTO mode */
N} gdc_apccfg_st;
N
N/* GDC bus Error Control Signal-Structure */
Ntypedef struct tag_gdc_bus_err_ctrl_st
N{
N    gdc_buserr_dir_e        eDirection;       /* Read / Write direction */
N    gdc_buserr_bursttype_e  eBurstType;       /* Burst type */
N    gdc_buserr_burstsize_e  eBurstSize;       /* Burst size */
N    gdc_buserr_resptype_e   eRespType;        /* Response Type */
N    uint8_t                 u8ByteEnables;    /* Byte-enables for the erroneous transfer. */
N    uint8_t                 u8ID;             /* ID tag of the read/write transaction that triggered an error response. */
N    uint8_t                 u8BurstLength;    /* Burst length of the read/write transaction that triggered an error response */
N} gdc_bus_err_ctrl_st;
N
N
N/* Structure for General Purpose Pulse Generator Registers (GDCPnGxR) */
Ntypedef struct tag_gdc_pulse_config_st
N{
N    gdc_pg_active_level_e   eActiveLevel;    /* Pulse generator active level select: */
N    gdc_pg_input_e          eSelectedInput;  /* Pulse generator input signal select: */
N    gdc_en_e                eByPassEnb;      /* Pulse generator bypass enable: */
N    uint16_t                u16PulseDelay;   /* Delay of generated pulse */
N    gdc_pg_divider_e        ePulseDivider;   /* Divider value is defined by DIV+1 */
N    gdc_en_e                eInvertEnb;      /* Pulse generator inversion enable: */
N    uint16_t                u16PulseWidth;   /* Width of generated pulse, measured in dot clock cycles for all input sources but VSYNC and VDISP */
N} gdc_pulse_config_st;
N
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N
N/****************************************************************************
N *
N * Function:      vGDC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/***************************************************************************
N*
N*                  G E N E R A L    C O N F I G U R A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_Init
N *
N * Purpose:       Initializes the GDC driver and the register shadow list
N *                for the controller specified
N *
N * Inputs:        eGDC     Controller channel
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   The clock gating for the controller must be enabled first!
N *                [Please refer to CCRCR register description]
N *
N ***************************************************************************/
Nvoid vGDC_Init(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_Switch
N *
N * Purpose:       Switch GDC output On/Off
N *
N * Inputs:        eGDC     Controller channel
N *                eSwitch  On/off request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_Switch(gdc_ch_e eGDC, gdc_on_e eSwitch);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetShadowRegUpdateMode
N *
N * Purpose:       Set the mechanism of shadow register updating. 
N *
N * Inputs:        eGDC     Controller channel
N *                eCtrl    Updating mechanism
N *                         Important NOTE: 
N *                         GDC_UPDATE_BY_NEXT_VSYNC_ONLY: this mode can be used to 
N *                         disable update shadow register option. In this case
N *                         user application should wait after after the call, until
N *                         update register bit has been set to 0 by HW (eGetShadowRegUpdateStatus()     
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetShadowRegUpdateMode(gdc_ch_e eGDC, gdc_reg_update_mode_e eCtrl);
N
N
N/****************************************************************************
N *
N * Function:      eGetShadowRegUpdateStatus
N *
N * Purpose:       Gets the actual update mode for shadow register from HW. 
N *                NOTE: If last setting was "GDC_UPDATE_BY_NEXT_VSYNC_ONLY", 
N *                      the HW will reset it to "0" by next VSync.
N *
N * Inputs:        eGDC     Controller channel
N *
N * Outputs:       none
N *
N * Return Values: status of shadow register update
N *
N * Limitations:   none
N *
N ***************************************************************************/
Ngdc_reg_update_status_e eGetShadowRegUpdateStatus(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ADBSEnable
N *
N * Purpose:       Enable/disable the "Automatic buffer switching" for all
N *                layers
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_ADBSEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ColorCorrectEnable
N *
N * Purpose:       Enable/disable the per channel color correction
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_ColorCorrectEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetArthMode
N *
N * Purpose:       Select the artifact handling mode
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Artifact handling mode
N *                eLoc   Artifact handling location
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetArthMode(gdc_ch_e eGDC, gdc_arth_e eMode, gdc_arthcd_e eLoc);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDitheringMode
N *
N * Purpose:       Select the artifact handling mode
N *
N * Inputs:        eGDC   Controller channel
N *                eDith  Deithering mode
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDitheringMode(gdc_ch_e eGDC, gdc_dithering_e eDith);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetBgrColor
N *
N * Purpose:       Set the background color
N *
N * Inputs:        eGDC      Controller channel
N *                u32Color  Background color in a RGB16 format:
N *                              Red   : u32Color[23:16]
N *                              Green : u32Color[15:8]
N *                              Blue  : u32Color[7:0]
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   The color data is internally adjusted to the register layout
N *                [shifted left by 8 bits to adjust the bit values]
N *
N ***************************************************************************/
Nvoid vGDC_SetBgrColor(gdc_ch_e eGDC, uint32_t u32Color);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetDispStat
N *
N * Purpose:       Retrieve the display interface status [enabled/disabled]
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Interface enabled/disabled status
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Ngdc_en_e eGDC_GetDispStat(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetPanelStat
N *
N * Purpose:       Retrieve the panel interface status [enabled/disabled]
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Interface enabled/disabled status
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Ngdc_en_e eGDC_GetPanelStat(gdc_ch_e eGDC);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGDC_SetGdcWriteProtection
N *
N * Purpose:       Defines level of Write protection for GDC control registers
N *                a register .
N *
N * Inputs:        eGDC         Controller channel
N *                eProtection  Protection Level
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetGdcWriteProtection(gdc_ch_e eGDC, gdc_write_protect_e eProtection);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_GAPIFEnable
N *
N * Purpose:       Enable/Disable GA-Programming Interface (GAPIF)
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable GAPIF
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_GAPIFEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_AccessToGapif
N *
N * Purpose:       Check if GA-Programming Interface (GAPIF) has been accessed
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: Access(C_TRUE)/ No access (C_FALSE)
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_AccessToGapif(gdc_ch_e eGDC);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                             D O T  -  C L O C K
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SelDotClkSrc
N *
N * Purpose:       Configure the dot-clock source [internal/external]
N *
N * Inputs:        eGDC  Controller channel
N *                eSel  Source selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   !!! >>>  ATTENTION  <<< !!!
N *                When using internal clock, please pay attention on output
N *                drivers as they can be damaged. For more information about
N *                this topic, please refer to the Capricorn data-book
N *
N ***************************************************************************/
Nvoid vGDC_SelDotClkSrc(gdc_ch_e eGDC, gdc_idc_e eSel);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDotClkPol
N *
N * Purpose:       Configure the dot-clock polarity [positive/negative]
N *
N * Inputs:        eGDC  Controller channel
N *                ePol  Polarity request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDotClkPol(gdc_ch_e eGDC, gdc_pol_e ePol);
N
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                      L A Y E R    M A N I P U L A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      i32GDC_LayerEnable
N *
N * Purpose:       Enable/disable a layer
N *
N * Inputs:        eGDC    Controller channel
N *                eLayer  Layer selection
N *                eEn     Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_LayerEnable(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDataFormat
N *
N * Purpose:       Set the data format (32-bit RGBA/16-bit RGB/32-bit ARGB)
N *                for a layer
N *
N * Inputs:        eGDC    Controller channel
N *                eLayer  Layer selection
N *                eFmt    Data format (32-bit RGBA/16-bit RGB/32-bit ARGB)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid layer or invalid pixel format
N *
N * Limitations:   The proper operation depends on the bit layout, thus it
N *                it must not to be changed: bit 0 of the eFmt parameter
N *                determines the data bit-width, whereas bit 1 determines
N *                the alpha position, which is not appicable and therefore
N *                ignored in 16-bit mode
N *
N ***************************************************************************/
Nint32_t i32GDC_SetDataFormat(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_dfmt_e eFmt);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetLayerStart
N *
N * Purpose:       Configure the layer start position of a layer [A, B, C,
N *                D or E]
N *
N * Inputs:        eGDC       Controller channel
N *                eLayer     Layer selection
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC, being in the range
N *                           [64 - 2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC, being in
N *                           the range [64 - 1023]
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 11 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetLayerStart(gdc_ch_e eGDC, gdc_layer_e eLayer, uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetLayerSize
N *
N * Purpose:       Set the layer size [width * height] for a layer [A, B,
N *                C, D or E]
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection
N *                u16Width  Horizontal size in the range [64-4095]
N *                u16Height Vertical size in the range [32-2047]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
N int32_t i32GDC_SetLayerSize(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                             uint16_t u16Width, uint16_t u16Height);
N 
N 
N/****************************************************************************
N *
N * Function:      vGDC_SetLayerOrder
N *
N * Purpose:       Select the layer order  [A-B-C-D-E or A-C-B-D-E]
N *
N * Inputs:        eGDC    Controller channel
N *                eOrder  Layer order selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetLayerOrder(gdc_ch_e eGDC, gdc_vord_e eOrder);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetCommonAlpha
N *
N * Purpose:       Set the comon alpha value for a layer or a display window
N *                in the range [A, B, C, D, E]
N *
N * Inputs:        eGDC     Controller channel
N *                eEntity  Layer or display window
N *                u8Alpha  Alpha value in the range [0x00 - 0xFF], where:
N *                             0x00 - transparent
N *                             0xFF - opaque
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer/display window
N *
N * Limitations:   Process one layer/display window at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetCommonAlpha(gdc_ch_e eGDC, gdc_seg_e eEntity, uint8_t u8Alpha);
N
N
N/****************************************************************************
N *
N * Function:      u8GDC_GetCommonAlpha
N *
N * Purpose:       Retrieve the comon alpha value for a layer or a display
N *                window in the range [A, B, C, D, E]
N *
N * Inputs:        eGDC      Controller channel
N *                eEntity   Layer or display window
N *                pu8Alpha  Result destination
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer/display window
N *
N * Limitations:   Process one layer/display window at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_GetCommonAlpha(gdc_ch_e eGDC, gdc_seg_e eEntity, uint8_t* pu8Alpha);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                          F R A M E -  B U F F E R
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      i32GDC_FrameBuffConfig
N *
N * Purpose:       Configure a frame buffer for layer A, B, C, D or E
N *
N * Inputs:        eGDC        Controller channel
N *                eLayer      Layer selection [A, B, C, D or E]
N *                pstBuffCfg  Pointer to frame buffer configuration
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time. The scroll bits will
N *                be modified. All reserved bits are hard-wired to
N *                zero and will not be modified even a different
N *                value is passed!
N *
N ***************************************************************************/
Nint32_t i32GDC_FrameBuffConfig(gdc_ch_e eGDC, gdc_layer_e eLayer, gdc_fbcfg_st* pstBuffCfg);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetActiveFrameBuff
N *
N * Purpose:       Check the next active frame buffer for all layers
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Next active buffer
N *
N * Return Values: none
N *
N * Limitations:   Process one layer at a time
N *
N ***************************************************************************/
Ngdc_frmbuff_e eGDC_GetActiveFrameBuff(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetMemWidth
N *
N * Purpose:       Set the image width of the frame buffer memory in number
N *                of dots
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection [A, B, C, D or E]
N *                u16Width  Horizontal line length of the frame buffer image,
N *                          limited to 13-bits for all layers
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one segment at a time. No parameter range check
N *                is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetMemWidth(gdc_ch_e eGDC, gdc_layer_e eLayer, uint16_t u16Width);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetLayerStartAddr
N *
N * Purpose:       Configure the start address of a layer [A, B, C, D or E]
N *
N * Inputs:        eGDC     Controller channel
N *                eLayer   Layer selection
N *                eBuff    Frame Buffer selection [Default or second (in case
N *                         of double buffering only)]
N *                u32Addr  Frame Buffer 32-bit physical start address
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Any previous existing scroll value will be kept. Bit 0 is
N *                hard-wired to zero and will not be modified even a different
N *                value is passed. Process one layer at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetLayerStartAddr(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                                 gdc_frmbuff_e eBuff, uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetScrollVal
N *
N * Purpose:       Set the scroll value of a layer [A, B, C, D or E]
N *
N * Inputs:        eGDC      Controller channel
N *                eLayer    Layer selection
N *                eBuff     Frame Buffer selection [Default or second (in case
N *                         of double buffering only)]
N *                u8ScrVal  Scrolling value
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid layer
N *
N * Limitations:   Process one layer at a time. Both SSCROLL bits will be
N *                set regardless of the data format mode [32-bit/16-bit],
N *                thus scrolling value validation has to be done by the
N *                caller of this API
N *
N ***************************************************************************/
Nint32_t i32GDC_SetScrollVal(gdc_ch_e eGDC, gdc_layer_e eLayer,
N                            gdc_frmbuff_e eBuff, uint8_t u8ScrVal);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetStartAddrCapture
N *
N * Purpose:       Set the start address of a capture buffer
N *
N * Inputs:        eGDC     Controller channel
N *                eBuff    Capture buffer [0, 1 or 2]
N *                u32Addr  Capture buffer physical start address
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   That last three bits of the address [2:0] are hard-wired
N *                to zero, thus will be ignored
N *
N ***************************************************************************/
Nvoid vGDC_SetStartAddrCapture(gdc_ch_e eGDC, gdc_cbuff_e eBuff, uint32_t u32Addr);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*          P E R    C H A N N E L    C O L O R    C O R R E C T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_InitCorrClut
N *
N * Purpose:       Initialize a color correction look-up table [Red, Green, Blue]
N *
N * Inputs:        eGDC     Controller channel
N *                eClut    CLUT table selection
N *                pu8Data  Pointer to buffer with the 256x 8-bit entries
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Access is based on relative controller offset, as defined
N *                in gdc_ch_e. Process one table at a time
N *
N ***************************************************************************/
Nvoid vGDC_InitCorrClut(gdc_ch_e eGDC, gdc_clut_e eClut, const uint8_t* pu8Data);
N
N
N/****************************************************************************
N *
N * Function:      bovGDC_SetSelectCorrCompVal
N *
N * Purpose:       Set a selective color correction compare value
N *
N * Inputs:        eGDC            Controller channel
N *                eSelection      Selected CCV
N *                u32CorrCompVal  Compare value to be set
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one value at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetSelectCorrCompVal(gdc_ch_e eGDC,  gdc_cmp_e eSelection, uint32_t u32CorrCompVal);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_ActivateCorrCompVal
N *
N * Purpose:       Activate a selective color correction compare value
N *
N * Inputs:        eGDC        Controller channel
N *                eSelection  Selected CCV
N *                eActive     Activate/deactivate request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one value at a time
N *
N ***************************************************************************/
Nvoid  vGDC_ActivateCorrCompVal(gdc_ch_e eGDC, gdc_cmp_e eSelection, gdc_active_e eActive);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_EnableSelectiveCorr
N *
N * Purpose:       Enable/disable the selective color correction in a specified
N *                mode
N *
N * Inputs:        eGDC   Controller channel
N *                eEn    Enable/disable request
N *                eMode  Correction mode
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_EnableSelectiveCorr(gdc_ch_e eGDC, gdc_en_e eEn, gdc_ccmode_e eMode);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                               D I S P L A Y
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SetDispConfigType
N *
N * Purpose:       Set display config type
N *
N * Inputs:        eGDC             Controller channel
N *                eDispConfigType  Display config type
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process a controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetDispConfigType(gdc_ch_e eGDC, gdc_disp_config_type_e eDispConfigType);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDisplayStart
N *
N * Purpose:       Configure the display start position
N *
N * Inputs:        eGDC       Controller channel
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC, being in the range
N *                           [64 - 2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC, being in
N *                           the range [64 - 1023]
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 10 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nint32_t i32GDC_SetDisplayStart(gdc_ch_e eGDC, uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetDisplaySize
N *
N * Purpose:       Set the layer size [width * height]
N *
N * Inputs:        eGDC      Controller channel
N *                u16Width  Horizontal display width using number of dots [64-2047]
N *                u16Height Vertical display height using number of lines [1-1023]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one layer at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
N int32_t i32GDC_SetDisplaySize(gdc_ch_e eGDC, uint16_t u16Width, uint16_t u16Height);
N
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                                W I N D O W
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_WindowEnable
N *
N * Purpose:       Enable/disable a layer's display window
N *
N * Inputs:        eGDC     Controller channel
N *                eWindow  Window
N *                eEn      Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one window at a time
N *
N ***************************************************************************/
Nvoid vGDC_WindowEnable(gdc_ch_e eGDC, gdc_win_e eWindow, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetWindowSize
N *
N * Purpose:       Set a display window size [width & height]
N *
N * Inputs:        eGDC       Controller channel
N *                eWindow    Window selection [A, B, C, D or E]
N *                u16Width   Horizontal window size in the range [64-4095]
N *                u16Height  Vertical window size in the range [32-2047]
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on invalid lower width range
N *
N * Limitations:   Process one window at a time. Start position parameters
N *                will be truncated to 12 and 11 bits respectively. All
N *                reserved bits will be kept as zeros. No further parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nint32_t i32GDC_SetWindowSize(gdc_ch_e eGDC, gdc_win_e eWindow,
N                             uint16_t u16Width, uint16_t u16Height);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetWindowStartPos
N *
N * Purpose:       Configure the window start position of a layer [A, B, C,
N *                D or E]
N *
N * Inputs:        eGDC       Controller channel
N *                eWindow    Window selection
N *                u16HStart  Horizontal start position in dot-clocks, counted
N *                           from the leading edge of HSYNC [64..2047]
N *                u16VStart  Vertical start position in number of lines,
N *                           counted from the leading edge of VSYNC [64..1023]
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one window at a time. Start position parameters
N *                will be truncated to 11 and 10 bits respectively. All
N *                reserved bits will be kept as zeros. No parameter
N *                validity check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetWindowStartPos(gdc_ch_e eGDC, gdc_win_e eWindow,
N                            uint16_t u16HStart, uint16_t u16VStart);
N
N
N/****************************************************************************
N *
N * Function:      i32GDC_SetWindowStartAddr
N *
N * Purpose:       Sets the start address of a window [A, B, C, D or E]
N *
N * Inputs:        eGDC     Controller channel
N *                eWindow  Window selection
N *                u32Addr  Frame buffer physical start address
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid window
N *
N * Limitations:   Bits 2-0 are hard-wired to zero and will not be modified
N *                even a different value is passed. Process one window at
N *                a time
N *
N ***************************************************************************/
Nint32_t i32GDC_SetWindowStartAddr(gdc_ch_e eGDC, gdc_win_e eWindow, uint32_t u32Addr);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                       S Y N C H R O N I Z A T I O N
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_SyncConfig
N *
N * Purpose:       Configure the VSYNC and HSYNC signals by setting type,
N *                polarity, signal width, line-length and vertical frame
N *                length for a controller
N *
N * Inputs:        eGDC         Controller channel
N *                pstSyncCfg   Pointer to HSYNC/VSYNC configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter range or
N *                validity checks are performed
N *
N ***************************************************************************/
Nvoid vGDC_SyncConfig(gdc_ch_e eGDC, gdc_sync_st* pstSyncCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetSyncDir
N *
N * Purpose:       Set the direction of VSYNC and HSYNC lines
N *
N * Inputs:        eGDC  Controller channel
N *                eDir  HSYNC/VSYNC signal direction
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N *                                !!! >>>  ATTENTION  <<< !!!
N *                When using external sync signals, the output drivers can
N *                be damaged if the direction is configure to output !!!
N *
N ***************************************************************************/
Nvoid vGDC_SetSyncDir(gdc_ch_e eGDC, gdc_dir_e eDir);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SelectCompSync
N *
N * Purpose:       Set composite signal synchronization
N *
N * Inputs:        eGDC   Controller channel
N *                eSync  VSYNC/CSYNC selection request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SelectCompSync(gdc_ch_e eGDC, gdc_csync_e eSync);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolVSync
N *
N * Purpose:       Select the VSYNC mode [negative/positive], where:
N *                    negative => DISP_vsync is low active
N *                    positive => DISP_vsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolVSync(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolHSync
N *
N * Purpose:       Select the HSYNC mode [negative/positive], where:
N *                    negative => DISP_hsync is low active
N *                    positive => DISP_hsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolHSync(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPolHDisp
N *
N * Purpose:       Select the HDISP mode [negative/positive], where:
N *                    negative => DISP_hdisp is low active
N *                    positive => DISP_hdisp is high active
N *
N * Inputs:        eGDC   Controller channel
N *                eMode  Positive/negative mode request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPolHDisp(gdc_ch_e eGDC, gdc_pol_e eMode);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetHSync
N *
N * Purpose:       Set the HSYNC pulse width and line length
N *
N * Inputs:        eGDC          Controller channel
N *                u8PulseWidth  Pulse width in number of dot-clocks
N *                u16LineLen    Line length in number of dot-clocks
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter validity
N *                check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetHSync(gdc_ch_e eGDC, uint8_t u8PulseWidth, uint16_t u16LineLen);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetVSync
N *
N * Purpose:       Set the VSYNC pulse width and vertical frame length
N *
N * Inputs:        eGDC           Controller channel
N *                u8PulseWidth   Pulse width in number of lines
N *                u16VFrameLen   Vertical frame length in number of lines
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time. No parameter validity
N *                check is performed
N *
N ***************************************************************************/
Nvoid vGDC_SetVSync(gdc_ch_e eGDC, uint8_t u8PulseWidth, uint16_t u16VFrameLen);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetPolVSync
N *
N * Purpose:       Retrieve the current VSYNC mode [negative/positive], where:
N *                    negative => DISP_vsync is low active
N *                    positive => DISP_vsync is high active
N *
N * Inputs:        eGDC   Controller channel
N *
N * Outputs:       Current mode
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetPolVSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatVSync
N *
N * Purpose:       Retrieve the current vertical synchronization signal status
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatVSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatHSync
N *
N * Purpose:       Retrieve the current horizontal synchronization signal status
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatHSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetStatHDisp
N *
N * Purpose:       Retrieve the current status of the horizontal display data
N *                ready signal
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Current signal status
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetStatHDisp(gdc_ch_e eGDC);
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                             I N T E R R U P T S
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      GDC_IrqConfig
N *
N * Purpose:       Configure all GDC related interrupt sources of a controller
N *
N * Inputs:        eGDC    Controller channel
N *                pstCfg  Pointer to interrupt configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_IrqConfig(gdc_ch_e eGDC, gdc_irqcgf_st* pstCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskAPC
N *
N * Purpose:       Enable/disable the Automatic Pixel Checker Interrupt [APCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskAPC(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetHsyncIrqLine
N *
N * Purpose:       Set the number of lines in which the HSYNCINT should be
N *                generated
N *
N * Inputs:        eGDC        Controller channel
N *                u16LineNr   Line number on which the HSYNC interrupt shall
N *                            be generated. Parameter range is [0x0 - 0x7FF]
N *                            If zero is specified, the interrupt will be
N *                            generated on every line
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetHsyncIrqLine(gdc_ch_e eGDC, uint16_t u16LineNr);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskFifoIn
N *
N * Purpose:       Enable/disable the Input FIFO Underrun Interrupt [IFURINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskFifoIn(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskFifoOut
N *
N * Purpose:       Enable/disable the Output FIFO Underrun Interrupt [OFURINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskFifoOut(gdc_ch_e eGDC, gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskVSync
N *
N * Purpose:       Enable/disable the VSYNC Interrupt [VSYNCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskVSync(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetIrqMaskHSync
N *
N * Purpose:       Enable/disable the HSYNC Interrupt [HSYNCINT]
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetIrqMaskHSync(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqHSync
N *
N * Purpose:       Check whether HSYNC Interrupt [HSYNCINT] is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqHSync(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqVSync
N *
N * Purpose:       Check whether VSYNC Interrupt [VSYNCINT] is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqVSync(gdc_ch_e eGDC);
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqFifoIn
N *
N * Purpose:       Check whether Input FIFO Underrun Interrupt [IFURINT]
N *                is active and clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqFifoIn(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqFifoOut
N *
N * Purpose:       Check whether Output FIFO Underrun Interrupt [OFURINT]
N *                is active and clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqFifoOut(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqAPC
N *
N * Purpose:       Check whether APC Interrupt [APCINT] is active and clear
N *                the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqAPC(gdc_ch_e eGDC);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGap
N *
N * Purpose:       The function checks whether APC interrupt (GAPINT) is active 
N *                and if it is, clears the corresponding flag. 
N *                Note:
N *                     By clearing GAPINT the error bit GAPCOL in GDCDCR register
N *                     will also be cleared.
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqGap(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGber
N *
N * Purpose:       Check whether GBUS error Interrupt (GBERINT)is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqGber(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqGpe
N *
N * Purpose:       Check whether GPEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e  eGDC_IsIrqGpe(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqDle
N *
N * Purpose:       Check whether DLEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqDle(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_IsIrqApe
N *
N * Purpose:       Check whether APEINT Interrupt is active and
N *                clear the corresponding flag
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Active status
N *
N * Return Values: none
N *
N * Limitations:   Interrupt flag will be cleared if it was active. Process
N *                one controller at a time
N *
N ***************************************************************************/
Ngdc_irqact_e eGDC_IsIrqApe(gdc_ch_e eGDC);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*                        P A N E L   I N T E R F A C E
N*                  A P I' s   V A L I D  O N L Y   F O R   GDC0
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlGppOutEnable
N *
N * Purpose:       Enable/disable the General Purpose Pulse Output
N *                Valid only for GDC0
N *
N * Inputs:        ePin  General purpose pin [GPPx]
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlGppOutEnable(gdc_gpp_e ePin, gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlPositiveSyncSelect
N *
N * Purpose:       Set positive panel synchronization select
N *                Valid only for GDC0
N *
N * Inputs:        eSync    low-/high-active input
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlPositiveSyncSelect(gdc_ppsync_e eSync);
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlRSPowerUpFinished
N *
N * Purpose:       Check if Reduced Swing Power Up sequence is finished
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  RSDS power up sequence not finished
N *                C_TRUE   RSDS power up sequence finished
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlRSPowerUpFinished(void);
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlRSReady
N *
N * Purpose:       Check if Reduced Swing DS is ready to be used
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  RSDS power up and enable sequence not finished
N *                C_TRUE   RSDS is read to be used
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlRSReady(void);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSEnable
N *
N * Purpose:       Enable Reduced Swing Differential Signaling
N *                Valid only for GDC0
N *
N * Inputs:        eOutput  digital / differential output
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSEnable(gdc_rsdsen_e eOutput);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlSyncModeEnable
N *
N * Purpose:       Panel Synchronization Mode Enable
N *                Valid only for GDC0
N *
N * Inputs:        eEn      disable / enable to trigger PNL_syncin
N *                         Panel Timing Control Interface Output
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlSyncModeEnable(gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSOutputCurrentMode
N *
N * Purpose:       Set RSDS output current mode
N *                Valid only for GDC0
N *
N * Inputs:        eOutMode Output Current mode (high, medium, low, HI-Z)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSOutputCurrentMode(gdc_rsdsoutmode_e eOutMode);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSPreEmphasisMode
N *
N * Purpose:       Set RSDS pre-emphasis mode
N *                Valid only for GDC0
N *
N * Inputs:        ePreEmp  pre-emphasis mode (high, medium, low, disabled)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSPreEmphasisMode(gdc_rsdspreemp_e ePreEmp);
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlRSDSHighImpedanceEnable
N *
N * Purpose:       Enable RSDS high impedance, or select differential output
N *                Valid only for GDC0
N *
N * Inputs:        eEn      enable high impedance
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlRSDSHighImpedanceEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlInputSync
N *
N * Purpose:       Check if monitoring bit for synchronization input signal
N *                from panel is set
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  not synchronized
N *                C_TRUE   synchronized
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlInputSync(void);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsPnlTimingControlInterfaceEnabled
N *
N * Purpose:       Check if panel timing control interface is enabled
N *                Valid only for GDC0
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: C_FALSE  panel timing control interface disabled
N *                C_TRUE   panel timing control interface enabled
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsPnlTimingControlInterfaceEnabled(void);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlAlignData
N *
N * Purpose:       Set the data alignment between DISP_RGB and PNL_ERGB bus
N *                [DISP_RGB and PNL_ERGB can change values at same clock edge
N *                or PNL_ERGB output is delayed by half of PNL_CLOCK cycle]
N *                Valid only for GDC0
N *
N * Inputs:        eAllign  Alignment request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetAlignData(gdc_ddal_e eAllign);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetPnlAlignClock
N *
N * Purpose:       Set the data to clock alignment [DISP_RGB output can change
N *                with rising or falling DISP_dotclk edge]
N *                Valid only for GDC0
N *
N * Inputs:        eEdge  Active DISP_dotclk edge selection
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetPnlAlignClock(gdc_dcal_e eEdge);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlAlterEnable
N *
N * Purpose:       Enable/disable data alternation [DISP_RGB and PNL_ERGB]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlAlterEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlEvenDataInvEnable
N *
N * Purpose:       Enable/disable the even interface data inversion [RGB out]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Please note that inversion can be only achieved when
N *                GPP1 == 1. Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlEvenDataInvEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlEvenRgbOutEnable
N *
N * Purpose:       Enable/disable PNL_ERGB output [Even RGB interface]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlEvenRgbOutEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlOddDataInvEnable
N *
N * Purpose:       Enable/disable the odd interface data inversion [RGB out]
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Please note that inversion can be only achieved when
N *                GPP0 == 1. Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlOddDataInvEnable(gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_PnlOddRgbOutEnable
N *
N * Purpose:       Enables/disables output for DISP_RGB (Odd RGB interface)
N *                Valid only for GDC0
N *
N * Inputs:        eEn   Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_PnlOddRgbOutEnable(gdc_en_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32GDC_PnlSyncMode
N *
N * Purpose:       Affect the delay time between synchronization input and data output.
N *                It is combined out of u16PnlSyncModeDelay  and u16PnlSyncDataDelay.
N *                Valid only for GDC0
N *
N * Inputs:        u16PnlSyncModeDelay:  Panel Synchronization Mode Delay
N *                                        Value may be in the range of 7 to 2047.
N *                u8PnlSyncDataDelay:   Panel Synchronization Mode Data Delay
N *                                        Value may be in the range of 0 to 15.
N * Outputs:       none
N *
N * Return Values: C_SUCCESS : No error
N *                C_FAILED  : parameter range problem
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nint32_t i32GDC_PnlSyncMode(uint16_t u16PnlSyncModeDelay, uint8_t u8PnlSyncDataDelay);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      boGDC_SetPulseGen
N *
N * Purpose:       Set Pulse Generator properties
N *
N * Inputs:        eGDC        Controller channel
N *                ePGenID:    Selected pulse generator (0..11) to configure
N *                ePGenOut:   Combinatorial logic output selection
N *                ePGenClk:   Clock-gating enables Output general purpose pulse 
N *                            or Output dot clock gated with general purpose pulse
N *                ePGenTrig:  Trigger signal selection for related general purpose 
N *                            pulse generator
N * 
N * Outputs:       none
N *
N * Return Values: C_TRUE/C_FALSE
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
N bool_t boGDC_SetPulseGen(gdc_ch_e eGDC,
N                          gdc_pg_gen_id_e   ePGenID,
N                          gdc_pg_outsel_e   ePGenOut,
N                          gdc_pg_cgsel_e    ePGenClk,
N                          gdc_pg_trigger_e  ePGenTrig);
N
N/****************************************************************************
N *
N * Function:      boGDC_ConfigPulseGenA_B
N *
N * Purpose:       Configures One Shot Pulsgenerator A or B
N *
N * Inputs:        eGDC         Controller channel
N *                ePGenID:     Selected pulse generator (0..11) to configure 
N *                eGenA_B:     Selected generator A or B to configure
N *                pstConfig:   Pointer to configuration structure for  pulse generator A or B
N * 
N * Outputs:        none
N *
N * Return Values: C_TRUE/C_FALSE
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_ConfigPulseGenA_B(gdc_ch_e eGDC,
N                               gdc_pg_gen_id_e      ePGenID,
N                               gdc_pg_A_B_e         eGenA_B,
N                               gdc_pulse_config_st  *pstConfig);
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N/****************************************************************************/
N
N
N
N/***************************************************************************
N*
N*            A U T O M A T I C    P I X E L    C H E C K E R
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      vGDC_APCConfigure
N *
N * Purpose:       Configure the automatic pixel checker
N *
N * Inputs:        eGDC    Controller channel
N *                pstCfg  Pointer to configuration structure
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_APCConfigure(gdc_ch_e eGDC, gdc_apccfg_st* pstCfg);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_APCEnable
N *
N * Purpose:       Enable/disable the automatic pixel checker
N *
N * Inputs:        eGDC  Controller channel
N *                eEn   Enable/disable request
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_APCEnable(gdc_ch_e eGDC, gdc_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_IsAPCError
N *
N * Purpose:       Check whether compare error was detected
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE  if detected
N *                C_FALSE if not detected
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_IsAPCError(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      vGDC_SetAPCCR_PolynomialGen
N *
N * Purpose:       Change Polynomial generator (default: 0x23)
N *                NOTE: Changing this value is not recommended!
N *
N * Inputs:        eGDC      Controller channel
N *                u8PgValue PG-Value
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nvoid vGDC_SetAPCCR_PolynomialGen(gdc_ch_e eGDC, uint8_t u8PgValue);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetAPCResult
N *
N * Purpose:       Retrieve the result of the last computation
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       Last computation result
N *
N * Return Values: none
N *
N * Limitations:   The bits will be automatically cleared after the read.
N *                Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetAPCResult(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      u32GDC_GetAPCPixelVal
N *
N * Purpose:       Retrieve current/previous pixel value set
N *
N * Inputs:        eGDC  Controller channel
N *                ePix  Pixel set
N *
N * Outputs:       Pixel value set
N *
N * Return Values: none
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint32_t u32GDC_GetAPCPixelVal(gdc_ch_e eGDC, gdc_apcp_e ePix);
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/*+-----------------------------------------------------------------------+*
N *|     START-Extended new APIs                                           |*
N *+-----------------------------------------------------------------------+*/
N
N/****************************************************************************
N *
N * Function:      vGDC_SetApcWriteProtection
N *
N * Purpose:       Defines level of Write protection for APC control registers
N *
N * Inputs:        eGDC         Controller channel
N *                eProtection  Protection Level
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGDC_SetApcWriteProtection(gdc_ch_e eGDC, gdc_write_protect_e eProtection);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N
N
N#ifndef _EXTENDED_GDC_APIS_DISABLED_
N/***************************************************************************
N*
N*                      Bus Errors and Collision Detection
N*
N****************************************************************************/
N
N/****************************************************************************
N *
N * Function:      u16GDC_GetLastGAPIFColAddr
N *
N * Purpose:       Get last GAPIF colision error address
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       none
N *
N * Return Values: the address
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nuint16_t u16GDC_GetLastGAPIFColAddr(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_GetBusErrAddr
N *
N * Purpose:       Returns the triggering access’s address after bus error on GB 
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       pu32BusErrAddr: Pointer to bus error address
N *
N * Return Values: Any Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_GetBusErrAddr(gdc_ch_e eGDC, uint32_t* pu32BusErrAddr);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_GetBusErrCtrlStatus
N *
N * Purpose:       Returns the triggering access’s control status after bus error on GB
N *
N * Inputs:        eGDC  Controller channel
N *
N * Outputs:       control status structure
N *
N * Return Values: Any Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGDC_GetBusErrCtrlStatus(gdc_ch_e eGDC, gdc_bus_err_ctrl_st* pstCtrlStatus);
N
N
N/****************************************************************************
N *
N * Function:      eGDC_GetDcrBusErrors
N *
N * Purpose:       Get status of bus error in GDCDCR register
N *
N * Inputs:        eGDC      Controller channel
N *
N * Outputs:       none
N *
N * Return Values: evtl. raised errors
N *
N * Limitations:   none
N *
N ***************************************************************************/
Ngdc_dcr_err_e eGDC_GetDcrBusErrors(gdc_ch_e eGDC);
N
N
N/****************************************************************************
N *
N * Function:      boGDC_ClrDcrBusErrors
N *
N * Purpose:       Clears error Bits (GBER, GAPCOL) in GDC register
N *                Note:
N *                     Clear GAPINT by call of function eGDC_IsIrqGap() will also
N *                     clear GAPCOL error bit.
N *
N * Inputs:        eGDC      Controller channel
N *                eClrBits  Clear Bits
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boGDC_ClrDcrBusErrors(gdc_ch_e eGDC, gdc_dcr_err_e eClrBits);
N
N
N#endif /* _EXTENDED_GDC_APIS_DISABLED_ */
N
N
N/*+-----------------------------------------------------------------------+*
N *|     END-Extended new APIs                                             |*
N *+-----------------------------------------------------------------------+*/
N
N/****************************************************************************/
N
N#endif /* GDC_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: gdc.h
N**  $Revision: 1.20 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   :
N** |
N** | CONS.  :
N** |
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N*****************************************************************************
N****************************************************************************/
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\mw\inc\graphics_init.h" 2
N#include "fg.h"
L 1 "..\..\..\..\lldd\inc\fg.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : FG Low Level Device Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : FG
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.11 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef FG_H
N#define FG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"                      /* Core specific primitive type definitions */
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_FG_H_REVISION     "$Revision: 1.11 $"
N#define LLDD_FG_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/**
N* @brief Frame Grabber Colors
N*/
Ntypedef enum tag_fg_color_e
N{
N    FG_RED   = 0,    /*!< color red   */
N    FG_GREEN = 1,    /*!< color green */    
N    FG_BLUE  = 2     /*!< color blue  */    
N} fg_color_e;
N
N
N/**
N* @brief Enable/disable Frame Grabber. Cropping, Color Correction
N*/
Ntypedef enum tag_fg_en_e
N{
N    FG_DISABLE = 0x0U,    /*!< disable */
N    FG_ENABLE  = 0x1U     /*!< enable */
N} fg_en_e;
N
N
N/**
N* @brief Interrupt detected
N*/
Ntypedef enum tag_fg_ir_detected_e
N{
N    FG_IR_NOT_DETECTED = 0x0U,    /*!< no interrupt detected */
N    FG_IR_DETECTED     = 0x1U     /*!< interrupt detected    */
N} fg_ir_detected_e;
N
N
N/**
N* @brief Interrupt clear
N*/
Ntypedef enum tag_fg_ir_clear_e
N{
N    FG_IR_NO_CLEAR = 0x0U,    /*!< interrupt no change */
N    FG_IR_CLEAR    = 0x1U     /*!< interrupt clear     */
N} fg_ir_clear_e;
N
N
N/**
N* @brief RGB parallel input mode
N*/
Ntypedef enum tag_fg_rgbpa_e
N{
N    FG_TWO8BIT_INPUT = 0x0U,    /*!< two 8-bit input channels are used (normal RGB or YCbCr mode) */
N    FG_RGB_PARALLEL  = 0x1U     /*!< select RGB parallel input mode */
N} fg_rgbpa_e;
N
N
N/**
N* @brief RGB parallel input select
N*/
Ntypedef enum tag_fg_rgb24_e
N{
N    FG_RGB565 = 0x0U,    /*!< 16-bit parallel input is decoded 5:6:5 */
N    FG_RGB888 = 0x1U     /*!< 24-bit parallel input is decoded 8:8:8 */
N} fg_rgb24_e;
N
N
N/**
N* @brief Non-video data input mode
N*/
Ntypedef enum tag_fg_nvmd_e
N{
N    FG_VIDEO_DATA     = 0x0U,    /*!< video data input */
N    FG_NON_VIDEO_DATA = 0x1U     /*!< non-video data is selected as input; data is not interpreted as
N                                      video data. (UDSP and USYNC need to be set to 1) */
N} fg_nvmd_e;
N
N
N/**
N* @brief De-interlace output image: Only valid if INT = 1
N*/
Ntypedef enum tag_fg_deinterlace_e
N{
N    FG_DINT_NO_DEINTERLACED = 0x0U,    /*!< no de-interlacing , therefore interlaced output in each Capture Buffer */
N    FG_DINT_INTERLACED      = 0x1U     /*!< output is de-interlaced (interpreted only if INT = 1)*/
N} fg_deinterlace_e;
N
N
N/**
N* @brief Input image interlaced
N*/
Ntypedef enum tag_fg_interlace_e
N{
N    FG_INT_NORMAL_OPERATION = 0x0U,    /*!< normal operation */
N    FG_INT_INTERLACED       = 0x1U     /*!< input data is interlaced */
N} fg_interlace_e;
N
N
N/**
N* @brief YCbCr output selector
N*/
Ntypedef enum tag_fg_ycbro_e
N{
N    FG_YCBRO_RGB      = 0x0U,    /*!< RGBA or reduced RGB output */
N    FG_YCBRO_YCBCR422 = 0x1U     /*!< YCbCr 4:2:2 output, Only used, if COMD = 1. */
N} fg_ycbro_e;
N
N
N/**
N* @brief Reduced RGB mode - Not used, if COMD=1 and YCBRO=1
N*/
Ntypedef enum tag_fg_rrgb_e
N{
N    FG_RRGB_RGBA32 = 0x0U,    /*!< 32-bit RGBA output (data format RGBA32) */
N    FG_RRGB_RGB16  = 0x1U     /*!< 16-bit reduced RGB output (data format RGB16) */
N} fg_rrgb_e;
N
N
N/**
N* @brief Use input as alpha value - Only used in monochrome mode
N*/
Ntypedef enum tag_fg_bwex_e
N{
N    FG_BWEX_INTERPRET_CAMERAINPUT = 0x0U,    /*!< output is generated by normal interpretation of the camera input */
N    FG_BWEX_INTERPRET_COLOR_CIR   = 0x1U     /*!< output is generated using the colour specified in the CIR register and the input signal as alpha value.*/
N} fg_bwex_e;
N
N
N/**
N* @brief Monochrome output mode
N*/
Ntypedef enum tag_fg_mono_e
N{
N    FG_MONO_COLOUR     = 0x0U,     /*!< color mode */
N    FG_MONO_MONOCHROME = 0x1U      /*!< monochrome mode */
N} fg_mono_e;
N
N
N/**
N* @brief YCbCr input to RGB conversion method
N*/
Ntypedef enum tag_fg_cvmd_e
N{
N    FG_YCBCR2RGB_ITU601 = 0x0U,    /*!< converted using ITU R 601 */
N    FG_YCBCR2RGB_ITU709 = 0x1U     /*!< converted using ITU R 709 */
N} fg_cvmd_e;
N
N
N/**
N* @brief Color mode
N*/
Ntypedef enum tag_fg_comd_e
N{
N    FG_INP_COLORMODE_RGB   = 0x0U,    /*!< RGB input mode */
N    FG_INP_COLORMODE_YCBCR = 0x1U     /*!< YCbCr input mode */
N}   fg_comd_e;
N
N
N/**
N* @brief Swap appearance of chrominance (Cb/Cr) values
N*/
Ntypedef enum tag_fg_scbcr_e
N{
N    FG_SCBCR_CB_CR = 0x0U,    /*!< first pixel is Cb, then Cr */
N    FG_SCBCR_CR_CB = 0x1U     /*!< first pixel is Cr, then Cb */
N} fg_scbcr_e;
N
N
N/**
N* @brief Swap appearance of Y and Cb/Cr
N*/
Ntypedef enum tag_fg_sycbcr_e
N{
N    FG_SYCBCR_Y2Y_CBCR2CBCR_CHANNEL = 0x0U,    /*!< Y is transmitted over Y channel, Cb/Cr over CBCR channel */
N    FG_SYCBCR_Y2CBCR_CBCR2Y_CHANNEL = 0x1U     /*!< Y is transmitted over CBCR channel, Cb/Cr over Y channel */
N} fg_sycbcr_e;
N
N
N/**
N* @brief VSYNC and HSYNC signal usage
N*/
Ntypedef enum tag_fg_usync_e
N{
N    FG_USYNC_HVSYNC_IGNORED = 0x0U,    /*!< HSYNC and VSYNC input is ignored, the field and line
N                                            blanking interval is stored in the data stream (ITU-R 656) */
N    FG_USYNC_HVSYNC_USED    = 0x1U     /*!< VSYNC and HSYNC input is used to select the field and line
N                                            blanking interval */
N} fg_usync_e;
N
N
N/**
N* @brief HDISP input usage
N*/
Ntypedef enum tag_fg_udsp_e
N{
N    FG_UDSP_HDISP_IGNORED = 0x0U,    /*!< HDISP input signal is ignored; FGIDR and FGITR have to be set! */
N    FG_UDSP_HDISP_USED    = 0x1U     /*!< HDISP input signal is used for data capturing */
N} fg_udsp_e;
N
N
N/**
N* @brief Defines the active level of the camera’s HDISP signal
N*/
Ntypedef enum tag_fg_active_level_e
N{
N    FG_LOW_ACTIVE  = 0x0U,    /*!< low active */
N    FG_HIGH_ACTIVE = 0x1U     /*!< high active */
N} fg_active_level_e;
N
N
N/**
N* @brief Defines the active level of the camera’s HSYNC signal
N*/
Ntypedef enum tag_fg_hsact_e
N{
N    FG_HSACT_HSYNC_LOW_ACTIVE  = 0x0U,    /*!< HSYNC low active  */
N    FG_HSACT_HSYNC_HIGH_ACTIVE = 0x1U     /*!< HSYNC high active */
N} fg_hsact_e;
N
N
N/**
N* @brief One input channel
N*/
Ntypedef enum tag_fg_onec_e
N{
N    FG_ONEC_DATA_OVER_BOTH_INPCHANNELS = 0x0U,    /*!< both input channels contain data (normal operation) */
N    FG_ONEC_DATA_OVER_Y_INPCHANNEL     = 0x1U     /*!< only luminance (Y) input contains the data => 8-bit data 
N                                                       (also valid for non-video data) */
N} fg_onec_e;
N
N
N/**
N* @brief Pixel clock active edge
N*/
Ntypedef enum tag_fg_negpc_e
N{
N    FG_NEGPC_POS_EDGE = 0x0U,    /*!< pixel valid on positive edge of Pixel clock */
N    FG_NEGPC_NEG_EDGE = 0x1U     /*!< pixel valid on negative edge of pixel clock */
N} fg_negpc_e;
N
N
N/**
N* @brief Negate Odd field signal
N*/
Ntypedef enum tag_fg_nfodd_e
N{
N    FG_NFODD_LOWSIGNAL_FIRST  = 0x0U,    /*!< low level signals first line */
N    FG_NFODD_HIGHSIGNAL_FIRST = 0x1U     /*!< high level signals first line */
N} fg_nfodd_e;
N
N
N/**
N* @brief Indicates the current capture buffer
N*/
Ntypedef enum tag_fg_cbcur_e
N{
N    FG_CBCUR_BUFFER_1_CURR_USED = 0x1U,    /*!< buffer 1 is currently used */
N    FG_CBCUR_BUFFER_2_CURR_USED = 0x2U,    /*!< buffer 2 is currently used */
N    FG_CBCUR_BUFFER_3_CURR_USED = 0x3U     /*!< buffer 3 is currently used */
N} fg_cbcur_e;
N
N
N/**
N* @brief Selects the number of active capture buffers
N*/
Ntypedef enum tag_fg_cbact_e                
N{                                          
N    FG_CBACT_INVALID           = 0x0U,    /*!< invalid setting   */
N    FG_CBACT_USE_ONE_BUFFER    = 0x1U,    /*!< use one buffer    */
N    FG_CBACT_USE_TWO_BUFFERS   = 0x2U,    /*!< use two buffers   */
N    FG_CBACT_USE_THREE_BUFFERS = 0x3U     /*!< use three buffers */
N} fg_cbact_e;
N
N
N/**
N* @brief Can be used for Non-Video mode interrupt, Measurement ready interrupt, Vertical SYNC interrupt,
N         Video-Bus Timeout interrupt, Corrupted data interrupt
N*/
Ntypedef enum tag_fg_fgimr_enable_e
N{
N    FG_IMR_SOURCE_NONE    = 0x0U,    /*!< not source for interrupt */
N    FG_IMR_SOURCE_ENABLED = 0x1U     /*!< interrupt source enabled    */
N} fg_fgimr_enable_e;
N
N
N/**
N* @brief Can be used for Non-video mode status, Measurement ready status, Vertical SYNC status,
N         Video-Bus Timeout status, Corrupted data status
N*/
Ntypedef enum tag_fg_fgisr_detection_e
N{
N    FG_INTR_NOT_DETECTED = 0x0U,    /*!< no interrupt detected */
N    FG_INTR_DETECTED     = 0x1U     /*!< interrupt detected    */
N} fg_fgisr_detection_e;
N
N
N/**
N* @brief No. of used buffers for frame grabber
N*/
Ntypedef enum tag_fg_used_buffer_e
N{
N    FG_INVALID_SETTING  = 0x0U,    /*!< one buffer used */
N    FG_SINGEL_BUFFERING = 0x1U,    /*!< one buffer used */
N    FG_DOUBLE_BUFFERING = 0x2U,    /*!< double buffering used */
N    FG_TRIPEL_BUFFERING = 0x3U     /*!< tripple buffering used */
N} fg_used_buffer_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Signal configuration
N*/
Ntypedef struct tag_fg_signals_st
N{
N  fg_nfodd_e        eNfOdd;    /*!< negate odd field signal */
N  fg_negpc_e        eNegPc;    /*!< pixel clock active edge */
N  fg_onec_e         eOnec;     /*!< one input channel */
N  fg_active_level_e eHsact;    /*!< defines the active level of the camera’s HSYNC signal */
N  fg_active_level_e eVsact;    /*!< defines the active level of the camera’s VSYNC signal */
N  fg_active_level_e eHdact;    /*!< defines the active level of the camera’s HDISP signal */
N  fg_udsp_e         eUdsp;     /*!< HDISP input usage */
N  fg_usync_e        eUsync;    /*!< VSYNC and HSYNC signal usage */
N} fg_signals_st;
N
N
N/**
N* @brief Color swap configuration
N*/
Ntypedef struct tag_fg_swap_ycbcr_st
N{
N  fg_scbcr_e  eScbCr;     /*!< swap appearance of chrominance (Cb/Cr) values */
N  fg_sycbcr_e eSycbcr;    /*!< swap appearance of Y and Cb/Cr */
N} fg_swap_ycbcr_st;
N
N
N/**
N* @brief Input format structure
N*/
Ntypedef struct tag_fg_input_format_st
N{
N  uint8_t           u8Alpha;        /*!< common alpha value used for all incoming dots */
N  fg_rgbpa_e        eRgbPa;         /*!< RGB parallel input mode   */
N  fg_rgb24_e        eRgb16_24;      /*!< RGB parallel input mode   */
N  fg_nvmd_e         eNvmd;          /*!< non-video data input mode */
N  fg_interlace_e    eInterlMode;    /*!< input image interlaced    */
N  fg_bwex_e         eBwex;          /*!< use input as alpha value  */
N  fg_comd_e         eComd;          /*!< color mode */
N  fg_swap_ycbcr_st  stSwapYcbCr;    /*!< swap appearance of Y, Cb, Cr values */  
N} fg_input_format_st;
N
N
N/**
N* @brief Output format structure
N*/
Ntypedef struct tag_fg_output_format_st
N{
N  fg_deinterlace_e  eDeInterl;          /*!< interlace type */
N  fg_ycbro_e        eOutputSelector;    /*!< YCbCr output selector */
N  fg_rrgb_e         eRgbFormat;         /*!< RGB color output */
N  fg_mono_e         eMonochrome;        /*!< monochrome output mode */
N  fg_cvmd_e         eYcbcr2RgbConv;     /*!< YCbCr input to RGB conversion method */
N} fg_output_format_st;
N
N
N/**
N* @brief Input size structure
N*/
Ntypedef struct tag_fg_input_cropp_st
N{
N  uint16_t u16ItrHorizWait;      /*!< horizontal wait */
N  uint16_t u16ItrVertWait;       /*!< vertical wait */
N  
N  uint16_t u16HcrCroppLeftX;     /*!< horizontal cropp window start position */
N  uint16_t u16HcrCroppWidth;     /*!< cropp window width */
N
N  uint16_t u16VcrCroppTopY;      /*!< vertical cropp window start position */
N  uint16_t u16VcrCroppHeight;    /*!< cropp window height */
N} fg_input_cropp_st;
N
N
N/**
N* @brief Frame buffer configuration structure
N*/
Ntypedef struct tag_fg_capture_buffer_st
N{
N  fg_used_buffer_e  eCbactUsedBuffer;     /*!< no. of used buffers for frame grabber */
N  uint16_t          u16LorLineOffset;     /*!< LOR line offset */
N  uint32_t          u32CbaBufferAddr1;    /*!< buffer address 1 */
N  uint32_t          u32CbaBufferAddr2;    /*!< buffer address 2 */
N  uint32_t          u32CbaBufferAddr3;    /*!< buffer address 3 */
N} fg_capture_buffer_st;
N
N
N/**
N* @brief Color informaton
N*/
Ntypedef struct tag_fg_color_exchange_st
N{
N  uint8_t u8Red;      /*!< red color value */
N  uint8_t u8Green;    /*!< green color value */
N  uint8_t u8Blue;     /*!< blue color value */
N} fg_color_exchange_st;
N
N
N/**
N* @brief Measurement properties of the external synchronization signals
N*/
Ntypedef struct tag_fg_measure_extsync_result_st
N{
N  uint16_t  u16Mhcr;     /*!< measured value of the HCR value of the camera input */
N  uint16_t  u16Mhspwr;   /*!< measured value of the HSPWR value of the camera input */
N  uint16_t  u16Mvcr;     /*!< measured value of the VCR value of the camera input */
N  uint16_t  u16Mvspwr;   /*!< measured value of the VSPWR value of the camera input */
N  uint16_t  u16Mhdisp;   /*!< measured value of the HDISP value of the camera input */
N} fg_measurement_extsync_result_st;
N
N
N/**
N* @brief Measurement control of the external synchronization signals
N*/
Ntypedef struct tag_fg_measurement_extync_control_st
N{
N  fg_en_e  eVcr;      /*!< enable or disable VCR measurement */
N  fg_en_e  eHcr;      /*!< enable or disable HSPWR measurement */
N  fg_en_e  eVspwr;    /*!< enable or disable VSPWR measurement */
N  fg_en_e  eHspwr;    /*!< enable or disable HSPWR measurement */
N  fg_en_e  eHdisp;    /*!< enable or disable HDISP measurement */
N} fg_measure_extsync_control_st;
N
N
N/**
N* @brief Selects the interrupt mask for the generation of the Frame Grabber interrupt
N*/
Ntypedef struct tag_fg_irqcgf_st
N{
N  fg_en_e  eCdi;      /*!< enable or disable CFI */
N  fg_en_e  eVbtoi;    /*!< enable or disable VBTOI */
N  fg_en_e  eVsi;      /*!< enable or disable VSI */
N  fg_en_e  eMrdyi;    /*!< enable or disable MRDYI */
N  fg_en_e  eNvi;      /*!< enable or disable NVI */
N} fg_irqcgf_st;
N
N
N/**
N* @brief Clear interrupts
N*/
Ntypedef struct tag_fg_irqclear_st
N{
N  fg_ir_clear_e  eCds;      /*!< clear CDS */
N  fg_ir_clear_e  eVbtos;    /*!< clear VBTOS */
N  fg_ir_clear_e  eVss;      /*!< clear VSS */
N  fg_ir_clear_e  eMrdys;    /*!< clear MRDYS */
N  fg_ir_clear_e  eNvs;      /*!< clear NVS */
N} fg_irqclear_st;
N
N/*********************************************/
N
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vFG_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vFG_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                    uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                    uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vFG_FrameGrabberEnable
N*
N* Enable/Disable Frame grabber
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable the FG
N*
N* @return void
N*/
Nvoid vFG_FrameGrabberEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_CroppingEnable
N*
N* Enable/Disable Cropping function
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable cropping
N*
N* @return void
N*/
Nvoid vFG_CroppingEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_ColorCorrectEnable
N*
N* Enable/Disable color correction
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable color correction
N*
N* @return void
N*/
Nvoid vFG_ColorCorrectEnable(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_ConfigureFgSignal
N*
N* Configure FG-Signal properties
N*
N* @note No Limitations
N*
N* @param[in,out] pstSignal - pointer to FG-signal settings
N*
N* @return void
N*/
Nvoid vFG_ConfigureFgSignal(fg_signals_st * pstSignal);
N
N
N/**
N* @brief Implementation of function vFG_SetInputMode
N*
N* Set properties of FG-input source
N*
N* @note No Limitations
N*
N* @param[in,out] pstMode - pointer to structure of input settings
N*
N* @return void
N*/
Nvoid vFG_SetInputMode(fg_input_format_st * pstMode);
N
N
N/**
N* @brief Implementation of function vFG_SetOutputMode
N*
N* Set properties of FG-output
N*
N* @note No Limitations
N*
N* @param[in,out] pstMode - pointer to structure of output settings
N*
N* @return void
N*/
Nvoid vFG_SetOutputMode(fg_output_format_st * pstMode);
N
N
N/**
N* @brief Implementation of function vFG_SetInputImageSize
N*
N* set width and height of FG-input image
N*
N* @note No Limitations
N*
N* @param[in] u16Width  - width of input image
N* @param[in] u16Height - height of input image 
N*
N* @return void
N*/
Nvoid vFG_SetInputImageSize(uint16_t u16Width,  uint16_t u16Height);
N
N
N/**
N* @brief Implementation of function vFG_SetInputCropp
N*
N* Set properties of cropping
N*
N* @note No Limitations
N*
N* @param[in,out] pstCroppConfig - pointer to cropping properties
N*
N* @return void
N*/
Nvoid vFG_SetInputCropp(fg_input_cropp_st * pstCroppConfig);
N
N
N/**
N* @brief Implementation of function vFG_SetCaptureBuffers
N*
N* Set no. and properties of GH-Capture buffers
N*
N* @note No Limitations
N*
N* @param[in,out] pstCaptureBuffer - pointer to capture settings
N*
N* @return void
N*/
Nvoid vFG_SetCaptureBuffers(fg_capture_buffer_st * pstCaptureBuffer);
N
N
N/**
N* @brief Implementation of function eFG_GetCurrentCaptureBuffer
N*
N* Get number of current capture buffer
N*
N* @note No Limitations
N*
N* @return FG_CBCUR_BUFFER_1_CURR_USED - buffer 1 is currently used
N* @return FG_CBCUR_BUFFER_2_CURR_USED - buffer 2 is currently used
N* @return FG_CBCUR_BUFFER_3_CURR_USED - buffer 3 is currently used
N*/
Nfg_cbcur_e eFG_GetCurrentCaptureBuffer(void);
N
N
N/**
N* @brief Implementation of function vFG_ConfigureMemoryWriteProtection
N*
N* Set lower and upper addresses for memory write protection
N*
N* @note No Limitations
N*
N* @param[in] u32StartAddress - start memory address
N* @param[in] u32EndAddress   - end memory address
N*
N* @return void
N*/
Nvoid vFG_ConfigureMemoryWriteProtection(uint32_t u32StartAddress, uint32_t u32EndAddress);
N
N
N/**
N* @brief Implementation of function vFG_SetScalingFactors
N*
N* Set properties of scaling
N*
N* @note No Limitations
N*
N* @param[in] u16ScaleX - Hoiz. scaling factor
N* @param[in] u16ScaleY - Vert. scaling factor 
N*
N* @return void
N*/
Nvoid vFG_SetScalingFactors(uint16_t u16ScaleX, uint16_t u16ScaleY);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurements
N*
N* Enable several ext. sync measurements together
N*
N* @note No Limitations
N*
N* @param[in,out] pstMeasurement - pointer to propoerties of measurements
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurements(fg_measure_extsync_control_st * pstMeasurement);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementVCR
N*
N* Enable ext. sync measurement VCR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementVCR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHCR
N*
N* Enable ext. sync measurement HCR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHCR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHDISP
N*
N* Enable ext. sync measurement HDISP
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHDISP(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementHSPWR
N*
N* Enable ext. sync measurement HSPWR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementHSPWR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableMeasurementVSPWR
N*
N* Enable ext. sync measurement VSPWR
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable ext. sync measurement
N*
N* @return void
N*/
Nvoid vFG_EnableMeasurementVSPWR(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurements
N*
N* Get results of several ext. sync measurements
N*
N* @note No Limitations
N*
N* @param[in,out] pstMeasurement - pointer to structure for measurements
N*
N* @return void
N*/
Nvoid vFG_GetMeasurements(fg_measurement_extsync_result_st * pstMeasurement);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMVCR
N*
N* Get result ext. sync measurement MVCR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMVCR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHCR
N*
N* Get result ext. sync measurement MHCR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHCR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHSPWR
N*
N* Get result ext. sync measurement MHSPWR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHSPWR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMVSPWR
N*
N* Get result ext. sync measurement MVSPWR
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMVSPWR(void);
N
N
N/**
N* @brief Implementation of function vFG_GetMeasurementMHDISP
N*
N* Get result ext. sync measurement MHDISP
N*
N* @note No Limitations
N*
N* @return Result of measurement
N*/
Nuint16_t vFG_GetMeasurementMHDISP(void);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrq
N*
N* Mask generation of several FG-interrupts
N*
N* @note No Limitations
N*
N* @param[in,out] pstCfg - pointer to IRQ-settings
N*
N* @return void
N*/
Nvoid vFG_EnableIrq(fg_irqcgf_st * pstCfg);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqCDI
N*
N* Mask generation of Fg interrupt CDI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disableirq CDI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqCDI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqVBTOI
N*
N* Mask generation of Fg interrupt VBTOI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq VBTOI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqVBTOI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqVSI
N*
N* Mask generation of Fg interrupt VSI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq VSI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqVSI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqMRDYI
N*
N* Mask generation of Fg interrupt MRDYI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq MRDYI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqMRDYI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_EnableIrqNVI
N*
N* Mask generation of Fg interrupt NVI
N*
N* @note No Limitations
N*
N* @param[in] eEn - enable or disable irq NVI
N*
N* @return void
N*/
Nvoid vFG_EnableIrqNVI(fg_en_e eEn);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqCDS
N*
N* Allows the MPU to check the source of  interrupt CDS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqCDS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqVBTOS
N*
N* Allows the MPU to check the source of  interrupt VBTOS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqVBTOS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqVSS
N*
N* Allows the MPU to check the source of  interrupt VSS
N*
N* @note No Limitations
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqVSS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqMRDYS
N*
N* Allows the MPU to check the source of  interrupt MRDYS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqMRDYS(void);
N
N
N/**
N* @brief Implementation of function vFG_GetIrqNVS
N*
N* Allows the MPU to check the source of  interrupt NVS
N*
N* @note No Limitations
N*
N* @return FG_IR_NOT_DETECTED if no interrupt is detected
N* @return FG_IR_DETECTED if an interrupt is detected
N*/
Nfg_ir_detected_e vFG_GetIrqNVS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClear
N*
N* Clears several interrupts
N*
N* @note No Limitations
N*
N* @param[in,out] pstIrClear - pointer to to be cleared interrupts
N*
N* @return void
N*/
Nvoid vFG_IrqClear(fg_irqclear_st * pstIrClear);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearCDS
N*
N* Clear interrupt CDS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearCDS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearVBTOS
N*
N* Clear interrupt VBTOS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearVBTOS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearVSS
N*
N* Clear interrupt VSS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearVSS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearMRDYS
N*
N* Clear interrupt MRDYS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearMRDYS(void);
N
N
N/**
N* @brief Implementation of function vFG_IrqClearNVS
N*
N* Clear interrupt NVS 
N*
N* @note No Limitations
N*
N* @return void
N*/
Nvoid vFG_IrqClearNVS(void);
N
N
N/**
N* @brief Implementation of function vFG_SetExchColor
N*
N* Definition of the exchange colour and common alpha value
N*
N* @note No Limitations
N*
N* @param[in,out] pstColor - pointer to colors for red, green, blue
N*
N* @return void
N*/
Nvoid vFG_SetExchColor(fg_color_exchange_st * pstColor);
N
N
N/**
N* @brief Implementation of function vFG_SetGlobalInputAlpha
N*
N* Set global alpha value
N*
N* @note No Limitations
N*
N* @param[in] u8Alpha - alpha value
N*
N* @return void
N*/
Nvoid vFG_SetGlobalInputAlpha(uint8_t u8Alpha);
N
N
N/**
N* @brief Implementation of function vFG_SetClutEntry
N*
N* Write access to the colour correction look-up tables for each colour component.
N*
N* @note No Limitations
N*
N* @param[in] eColor   - color-channel
N* @param[in] u16Entry - clut index
N* @param[in] u8Color  - color value to be set
N*
N* @return 0 in case of success
N* @return 1 in case of error
N*/
Nuint16_t vFG_SetClutEntry(fg_color_e eColor, uint16_t u16Entry, uint8_t u8Color);
N
N
N/****************************************************************************/
N
N
N#endif /* FG_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 27 "..\..\..\..\mw\inc\graphics_init.h" 2
N#include "ccr.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GRAPHICS_INIT_H_REVISION     "$Revision: 1.8 $"
N#define MW_GRAPHICS_INIT_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Display configuration
N*/
Ntypedef struct tag_disp_config_st
N{
N		uint8_t                 u8DispRes;                /*!< Display resolution */
N    uint16_t                u16DispStartX;            /*!< Display start position in x-direction */
N    uint16_t                u16DispStartY;            /*!< Display start position in y-direction */
N		uint16_t                u16DispWidth;             /*!< Display width */
N		uint16_t                u16DispHeight;            /*!< Display heigt */
N		gdc_disp_config_type_e  eDispConfigType;          /*!<  */
N
N		uint8_t                 u8VSYNCType;              /*!< VSYNC type */
N		uint8_t                 u8VSYNCPol;               /*!< VSYNC polarity */
N		uint16_t                u16VSYNCWidth;            /*!< VSYNC pulse width */
N		uint16_t                u16VPeriod;               /*!< VSYNC period */
N		uint16_t                u16VBackPorch;            /*!< Vertical back porch */
N		
N		uint8_t                 u8HSYNCPol;               /*!< HSYNC polarity */
N		uint16_t                u16HSYNCWidth;            /*!< HSYNC pulse width */
N		uint16_t                u16HPeriod;               /*!< HSYNC period */
N		uint16_t                u16HBackPorch;            /*!< Horizontal back porch */
N
N		uint8_t                 u8HDISPPol;               /*!< HDISP polarity */
N		
N		uint32_t                u32BGColor;               /*!< Background color */
N		uint8_t                 u8SyncDir;                /*!< Synchronisation direction */
N
N		uint8_t                 u8DotClkPol;              /*!< DotClock polarity */
N		uint8_t                 u8ClkSource;              /*!< DotClock source */
N		ccr_clk_freq_e          eClockFrequency;          /*!< DotClock frequency (division factor) */
N		ccr_modulated_clk_e     eModulated;               /*!< DotClock modulation type */
N
N		gdc_dithering_e         eDithering;               /*!< Dithering type */
N		gdc_vord_e              eLayerOrder;              /*!< Layer viewing order */
N
N    ccr_gdc_sync_e          eGDC1Synchronisation;     /*!< GDC0 - GDC1 synchronisation setting */
N} gf_disp_config_st;
N
N
N/**
N* @brief Layer configuration
N*/
Ntypedef struct tag_layer_config_st
N{
N		uint8_t	 u8LayerActive;              /*!< Indication if layer is active */
N		uint8_t  u8DisplayFormat;            /*!< Display color format */
N		uint8_t  u8DoubleBuffer;             /*!< Indication if layer should be double buffered or not */
N		uint8_t  u8Alpha;                    /*!< Layer alpha value */
N		uint16_t u16StartX;                  /*!< Layer start point in x-direction */
N		uint16_t u16StartY;                  /*!< Layer start point in y-direction */
N		uint16_t u16Width;                   /*!< Layer width */
N		uint16_t u16Height;                  /*!< Layer height */
N		uint32_t u32FB0StartAddress;         /*!< Framebuffer 0 start address */
N		uint32_t u32FB1StartAddress;         /*!< Framebuffer 1 start address */
N} gf_layer_config_st;
N
N
N/**
N* @brief GDC-config structure
N*/
Ntypedef struct tag_gdc_config_st
N{
N		uint8_t            u8GDCActive;             /*!< Indication if GDC is active */
N		gf_disp_config_st  stDispConf;              /*!< Display configuration */
N		gf_layer_config_st stLayerConf_A;           /*!< Configuration of layer A */
N		gf_layer_config_st stLayerConf_B;           /*!< Configuration of layer B */
N		gf_layer_config_st stLayerConf_C;           /*!< Configuration of layer C */
N		gf_layer_config_st stLayerConf_D;           /*!< Configuration of layer D */
N		gf_layer_config_st stLayerConf_E;           /*!< Configuration of layer E */
N} gf_gdc_config_st;
N
N
N/**
N* @brief FG-config structure
N*/
Ntypedef struct tag_fg_config_st
N{
N		uint8_t                       u8FGActive;         /*!< Indication if FG is active */
N		fg_en_e                       eFGEnable;          /*!< Enable FG after configuration*/
N    fg_capture_buffer_st          stFgBuffer;         /*!< Capture buffer configuration */
N    fg_input_format_st            stFgInMode;         /*!< Input format configuration */
N    fg_output_format_st           stFgOutMode;        /*!< Output format configuration */
N    fg_swap_ycbcr_st              stFgSwapYcbCr;      /*!< Color conversion configuration */
N    fg_signals_st                 stFgSignal;         /*!< FG-signal configuration */
N    fg_input_cropp_st             stCroppConfig;      /*!< Cropping configuration */
N		fg_en_e                       eCroppingEnable;    /*!< enable/disable cropping */
N    uint32_t                      u32ScaleX;          /*!< Scaling factor in x-direction */
N    uint32_t                      u32ScaleY;          /*!< Scaling factor in y-direction */
N    fg_measure_extsync_control_st stMeasurement;      /*!< Measurement configuration */
N} gf_fg_config_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of function vGf_Graphics_Init_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N*
N* @return void
N*/
Nvoid vGf_Graphics_Init_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                                  uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N
N/**
N* @brief Implementation of function vGfInitGDC0
N*
N* Initializes the GDC0
N*
N* @note none
N*
N* @param[in] pstGDC - pointer to configuration of GDC0
N*
N* @return void
N*/
Nvoid vGfInitGDC0(gf_gdc_config_st* pstGDC);
N
N
N/**
N* @brief Implementation of function vGfInitGDC1
N*
N* Initializes the GDC1
N*
N* @note none
N*
N* @param[in] pstGDC - pointer to configuration of GDC1
N*
N* @return void
N*/
Nvoid vGfInitGDC1(gf_gdc_config_st* pstGDC);
N
N
N/**
N* @brief Implementation of function vGfInitFG
N*
N* Initializes the FG
N*
N* @note none
N*
N* @param[in] pstFG - pointer to configuration of FG
N*
N* @return void
N*/
Nvoid vGfInitFG(gf_fg_config_st* pstFG);
N
N
N/**
N* @brief Implementation of function vGfInitGA
N*
N* Initializes Graphics Accelerator
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfInitGA(void);
N
N
N/**
N* @brief Implementation of function vGfInitGfxMiddleWare
N*
N* Initializes the Graphics middleware
N*
N* @note none
N*
N* @param[in] pstGDC0 - pointer to configuration of GDC0
N* @param[in] pstGDC1 - pointer to configuration of GDC1
N* @param[in] pstFG   - pointer to configuration of FG
N*
N* @return void
N*/
Nvoid vGfInitGfxMiddleWare(gf_gdc_config_st* pstGDC0, gf_gdc_config_st* pstGDC1, gf_fg_config_st* pstFG);
N
N
N/***************************************************************************/
N
N
N#endif /* GRAPHICS_INIT_H */
N
N/***************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 26 "..\..\..\..\mw\inc\layer.h" 2
N#include "gf.h"
L 1 "..\..\..\..\mw\inc\gf.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronic Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Contains declarations for Image structures
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.8 $
N*   DATE        : $Date: 2015/07/21 12:38:02 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N****************************************************************************/
N#ifndef GF_H
N#define GF_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GF_H_REVISION     "$Revision: 1.8 $"
N#define MW_GF_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N/*---------------------------------------
N|             MATH LIBRARY USE           |
N ---------------------------------------*/
N/* Enables use of standard math library */
N/* if following define is disabled, LLDD/GA rotation and scaling are using integer instead of float */
N/* and sin/cos lookup table is used instead of math library functions */
N
N#define GA_USE_MATH_LIB
N
N#ifdef GA_USE_MATH_LIB
N/* Pi Constant Value */
N#define GA_CONST_PI 3.1415926535897932384626433
N#endif
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Transformation table structure
N*/
Ntypedef struct tag_table_st
N{
N    uint32_t    u32Address;         /*!< Table source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N} gf_table_st;
N
N
N/**
N* @brief Image description structure
N*/
Ntypedef struct tag_image_st
N{
N    uint32_t    u32Address;         /*!< Image source address */
N    uint16_t    u16Width;           /*!< Image width */
N    uint16_t    u16Height;          /*!< Image height */
N    int16_t     i16CenterX;         /*!< Image rotation center X-coord (optional) */
N    int16_t     i16CenterY;         /*!< Image rotation center Y-coord (optional) */
N    uint8_t     eFormat;            /*!< Image Format */
N    uint32_t    u32Paletteaddress;  /*!< palette address for PNG */
N} gf_image_st;
N
N
N/**
N* @brief CLUT description structure
N*/
Ntypedef struct tag_clut_st
N{
N    uint32_t    u32Address;         /*!< CLUT source address */
N    uint8_t     u8Length;           /*!< CLUT length */
N} gf_clut_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N
N/***************************************************************************/
N
N#endif /* GF_H */
N
N/***************************************************************************/
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 27 "..\..\..\..\mw\inc\layer.h" 2
N#include "gdc.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_LAYER_H_REVISION     "$Revision: 1.8 $"
N#define MW_LAYER_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Layer Structure
N*/
Ntypedef struct tag_layer_st
N{
N    gdc_layer_e  eLayer;       /*!< Layer Selection   */
N    gdc_dfmt_e   eFormat;      /*!< Format (RGB/RGBA) */
N    uint16_t     u16StartX;    /*!< X-Start position  */
N    uint16_t     u16StartY;    /*!< Y-Start position  */
N    uint16_t     u16Height;    /*!< Display Height    */
N    uint16_t     u16Width;     /*!< Display Width     */
N    uint8_t      u8Alpha;      /*!< Alpha-blending for the layer */
N    gf_image_st  stDispFB;     /*!< Display Frame-buffer config. */
N    gf_image_st  stWriteFB;    /*!< Write Frame-buffer config. */
N} gf_layer_st;
N
N/**
N* @brief Display parameter
N*/
Ntypedef struct tag_disp_params_st
N{
N    uint16_t     u16VSYNCWidth;    /*!< width of VSYNC pulse  */
N    uint16_t     u16VBackPorch;    /*!< vertical back porch   */
N    uint16_t     u16HSYNCWidth;    /*!< width of HSYNC pulse  */
N    uint16_t     u16HBackPorch;    /*!< horizontal back porch */
N} gf_disp_params_st;
N
N/*********************************************/
N
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/* Layer description structures */
N/* GDC0 */
Nextern gf_layer_st stGDC0LayerA;		/* Layer A */
Nextern gf_layer_st stGDC0LayerB;		/* Layer B */
Nextern gf_layer_st stGDC0LayerC;		/* Layer C */
Nextern gf_layer_st stGDC0LayerD;		/* Layer D */
Nextern gf_layer_st stGDC0LayerE;		/* Layer E */
N
N/* GDC1 */
Nextern gf_layer_st stGDC1LayerA;		/* Layer A */
Nextern gf_layer_st stGDC1LayerB;		/* Layer B */
Nextern gf_layer_st stGDC1LayerC;		/* Layer C */
Nextern gf_layer_st stGDC1LayerD;		/* Layer D */
Nextern gf_layer_st stGDC1LayerE;		/* Layer E */
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of function vGf_Layer_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N*
N* @return void
N*/
Nvoid vGf_Layer_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N
N/**
N* @brief Implementation of function vGfRegisterLayers
N*
N* Registers parameters for all layers
N*
N* @note This function MUST be called before all other layer
N*       manipulation functions.
N*
N* @param[in] eGDCNumber - GDC selection
N* @param[in] stGDC      - Pointer to GDC-configuration
N*
N* @return void
N*/
Nvoid vGfRegisterLayers(gdc_ch_e eGDCNumber, gf_gdc_config_st * stGDC);
N
N
N/**
N* @brief Implementation of function  vGfSetLayer
N*
N* Initializes given layer of the GDC
N*
N* @note The vRegisterLayers() function must be called first
N*
N* @param[in] eGDCNumber    - GDC selection
N* @param[in] pstLayer      - Pinter to Layer selection
N* @param[in] pstDispParams - Pinter to display parameter
N*
N* @return void
N*/
Nvoid vGfSetLayer(gdc_ch_e eGDCNumber, gf_layer_st* pstLayer, gf_disp_params_st* pstDispParams);
N
N
N/**
N* @brief Implementation of function  vGfShowLayer
N*
N* Shows given layer
N*
N* @note none
N*
N* @param[in] eGDCNumber - GDC selection
N* @param[in] pstLayer   - Pointer to Layer selection
N*
N* @return void
N*/
Nvoid vGfShowLayer(gdc_ch_e eGDCNumber, gf_layer_st *pstLayer);
N
N
N/**
N* @brief Implementation of function  vGfHideLayer
N*
N* Hides given layer
N*
N* @note none
N*
N* @param[in] eGDCNumber - GDC selection
N* @param[in] pstLayer   - Pointer to Layer selection
N*
N* @return void
N*/
Nvoid vGfHideLayer(gdc_ch_e eGDCNumber, gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function  vGfPositionLayer
N*
N* Sets the position of the layer
N*
N* @note none
N*
N* @param[in] eGDCNumber    - GDC selection
N* @param[in] pstLayer      - Pointer to Layer selection
N* @param[in] pstDispParams - Pointer to parameter
N*
N* @return void
N*/
Nvoid vGfPositionLayer(gdc_ch_e eGDCNumber, gf_layer_st* pstLayer, gf_disp_params_st* pstDispParams);
N
N
N/**
N* @brief Implementation of function vGfSwitchBuffer
N*
N* GDC0 framebuffer switching
N*
N* @note none
N*
N* @param[in] eGDCNumber - layer selection
N* @param[in] pstLayer   - pointer to layer
N*
N* @return void
N*/
Nvoid vGfLayerSwitchBuffer(gdc_ch_e eGDCNumber, gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function vGfLayerSwitchBufferSync
N*
N* GDC0 framebuffer switching
N*
N* @note none
N*
N* @param[in] eGDCNumber - layer selection
N* @param[in] pstLayer   - pointer to layer selection
N*
N* @return void
N*/
Nvoid vGfLayerSwitchBufferSync(gdc_ch_e eGDCNumber, gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function vGfGetDispLayerAddr
N*
N* Returns the address of the display frame buffer
N*
N* @note none
N*
N* @param[in] pstLayer - pointer to layer selection
N*
N* @return Returns display layer start address
N*/
Nuint32_t uiGfGetDispLayerAddr(gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function vGfGetWriteLayerAddr
N*
N* Returns the address of the write frame buffer
N*
N* @note none
N*
N* @param[in] pstLayer - pointer to layer selection
N*
N* @return Returns write layer start address
N*/
Nuint32_t uiGfGetWriteLayerAddr(gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function vGfGetDispLayerWidth
N*
N* Returns the width of the display frame buffer
N*
N* @note none
N*
N* @param[in] pstLayer - pointer to layer selection
N*
N* @return Returns the display layer width
N*/
Nuint32_t uiGfGetDispLayerWidth(gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function vGfGetWriteLayerWidth
N*
N* Returns the width of the write frame buffer
N*
N* @note none
N*
N* @param[in] pstLayer - pointer to layer selection
N*
N* @return Returns the write layer width
N*/
Nuint32_t uiGfGetWriteLayerWidth(gf_layer_st* pstLayer);
N
N
N/**
N* @brief Implementation of function eGfGetWriteLayerFormat
N*
N* Returns the Format of the frame buffer
N*
N* @note none
N*
N* @param[in] pstLayer - pointer to layer selection
N*
N* @return GDC_RGBA32 in case of RGBA 32-bit
N* @return GDC_RGB16 in case of RGB 16-bit
N* @return GDC_ARGB32 in case of ARGB 32-bit
N*/
Ngdc_dfmt_e eGfGetWriteLayerFormat(gf_layer_st* pstLayer);
N
N
N/***************************************************************************/
N
N#endif /* LAYER_H */
N
N/***************************************************************************/
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 24 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "listmngr.h"
L 1 "..\..\..\..\mw\inc\listmngr.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware listmanagement
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.7 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef LISTMNGR_H
N#define LISTMNGR_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "ga_common.h"
L 1 "..\..\..\..\lldd\inc\ga_common.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/07/21 12:30:20 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_COMMON_H
N#define GA_COMMON_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "captypes.h"
N
N#define LLDD_GA_COMMON_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_GA_COMMON_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*==========================================================================
N|                       GA Configuration Parameters                         |
N ==========================================================================*/
N/*---------------------------------------
N|        GA Sub-Module inclusion         |
N ---------------------------------------*/
N/* Blitting Engine */
N#define GA_USE_BLITTING
N
N/* Transformation Engine */
N#define GA_USE_TRANSFORM
N
N/* Rotation Engine */
N#define GA_USE_ROTATION
N
N/* Drawing Engine */
N#define GA_USE_DRAWING
N
N/*---------------------------------------
N|         GA List Configuration          |
N ---------------------------------------*/
N/* Maximal Number of commands in one list */
N#define GA_CMD_MAX    2048
N
N/*---------------------------------------
N|  Enable/Disable boundary check for     |
N|         GA Command List                |
N ---------------------------------------*/
N/* Enable/Disable boundary check in drivers for command buffer: */
N/* #define GA_CMDSLIST_BOUNDARY_CHECK */
N
N
N/* 1 double word more will be reserved by calculation of needed
N   buffers for GA-API's. This is necesary to add later an END-Command to 
N   finalize the command: 
N*/   
N#define RESERVED_FOR_END_CMD    1
N
N/*======================================
N                Defs
N=======================================*/
N
N/*--------------------------------------
N|     GA General Purpose Registers      |
N --------------------------------------*/
N#define GA_GPR0   0
N#define GA_GPR1   1
N#define GA_GPR2   2
N#define GA_GPR3   3
N#define GA_GPR4   4
N#define GA_GPR5   5
N#define GA_GPR6   6
N#define GA_GPR7   7
N#define GA_GPR8   8
N#define GA_GPR9   9
N#define GA_GPR10  10
N#define GA_GPR11  11
N#define GA_GPR12  12
N#define GA_GPR13  13
N#define GA_GPR14  14
N#define GA_GPR15  15
N#define GA_GPR16  16
N#define GA_GPR17  17
N#define GA_GPR18  18
N#define GA_GPR19  19
N#define GA_GPR20  20
N#define GA_GPR21  21
N#define GA_GPR22  22
N#define GA_GPR23  23
N#define GA_GPR24  24
N#define GA_GPR25  25
N#define GA_GPR26  26
N#define GA_GPR27  27
N#define GA_GPR28  28
N#define GA_GPR29  29
N#define GA_GPR30  30
N#define GA_GPR31  31
N
N
N/*--------------------------------------
N|         GA Command Parameters         |
N --------------------------------------*/
N/* Selection of module to wait on */
Ntypedef enum tag_ga_modul_e
N{
N    GA_GDC0        = 0x0u,
N    GA_FG0         = 0x1u,
N    GA_GDC1        = 0x2u
N} ga_modul_e;
N
N/* Enables/Disables option */
Ntypedef enum tag_ga_en_e
N{
N    GA_DIS         = 0x0u,     /* Disable/off */
N    GA_EN          = 0x1u      /* Enable/on */
N} ga_en_e;
N
N/* Blending Order */
Ntypedef enum tag_blendOrd_e
N{
N    GA_ONTO_DEST   = 0x0u,     /* Onto destination */
N    GA_BEHIND_DEST = 0x1u      /* Behind destination */
N} ga_blendOrd_e;
N
N/* Color format selection */
Ntypedef enum tag_ga_colFmt_e
N{
N    GA_RGB16       = 0x0u,      /* 16-bit RGB format */
N    GA_RGBA32      = 0x1u       /* 32-bit RGBA format */
N} ga_colFmt_e;
N
N/*--------------------------------------
N|        GA Command Construction        |
N --------------------------------------*/
N/* Command Field Masks */
N#define GA_MASK1           0x1u
N#define GA_MASK2           0x3u
N#define GA_MASK3           0x7u
N#define GA_MASK4           0xfu
N#define GA_MASK5           0x1fu
N#define GA_MASK6           0x3fu
N#define GA_MASK7           0x7fu
N#define GA_MASK8           0xffu
N#define GA_MASK9           0x1ffu
N#define GA_MASK10          0x3ffu
N#define GA_MASK12          0xfffu
N#define GA_MASK14          0x3fffu
N#define GA_MASK15          0x7fffu
N#define GA_MASK16          0xffffu
N#define GA_MASK22          0x3fffffu
N#define GA_MASK24          0xffffffu
N#define GA_MASK32          0xffffffffu
N#define GA_MASK36          0xfffffffffull
N#define GA_MASK48          0xffffffffffffull
N#define GA_MASK64          0xffffffffffffffffull
N
N/* GA Unit selection */
N#define GA_SCHED           0x0u
N#define GA_BLITING         0x1u
N#define GA_DRAWING         0x2u
N#define GA_ROTATION        0x3u
N#define GA_TRANSFORM       0x4u
N
N/*** Command Codes ***/
N#define GA_CMC_LGPR        0x1u
N#define GA_CMC_CSWVSYNC    0x2u
N#define GA_CMC_CSUIC	     0x3u
N#define GA_CMC_CSGDC0CC	   0x4u
N#define GA_CMC_CSGDC1CC	   0x5u
N#define GA_CMC_END         0xffu
N
N/* Blitting Engine Command Codes */
N
N#define GA_CMC_BLTO16      0x02u
N#define GA_CMC_BLTO32      0x04u
N#define GA_CMC_BLTORLEI16  0x0au
N#define GA_CMC_BLTORLEI24  0x06u
N#define GA_CMC_BLTORLEI24A 0x0Eu
N#define GA_CMC_BLTORLEI32  0x0cu
N#define GA_CMC_BLTOP16     0x12u
N#define GA_CMC_BLTOP32     0x14u
N#define GA_CMC_BLTB16      0x03u
N#define GA_CMC_BLTB32      0x07u
N#define GA_CMC_BLTBRLEI16  0x0bu
N#define GA_CMC_BLTBRLEI24  0x05u
N#define GA_CMC_BLTBRLEI24A 0x0fu
N#define GA_CMC_BLTBRLEI32  0x0du
N#define GA_CMC_BLTBP16     0x13u
N#define GA_CMC_BLTBP32     0x17u
N
N/* Transformation Engine Command Code */
N#define GA_CMC_TRANSF      0x01u
N#define GA_CMC_TRANSFB     0x00u
N
N/* Rotation Engine Command Code */
N#define GA_CMC_ROT         0x01u
N#define GA_CMC_ROTB        0x00u
N
N/* Drawing Engine Command Codes */
N#define GA_CMC_DE_DLRGBA32 0x03u
N#define GA_CMC_DE_DLRGB16  0x04u
N#define GA_CMC_DE_DTRGBA32 0x05u
N#define GA_CMC_DE_DTRGB16  0x06u
N
N/* Command Field Offsets */
N#define GA_ENG_OFF         60
N#define GA_LEN_OFF         56
N#define GA_CMC_OFF         48
N#define GA_SPC_OFF          0
N
N/* Command Field Masks */
N#define GA_ENG_MSK         (GA_MASK3)
N#define GA_LEN_MSK         (GA_MASK4)
N#define GA_CMC_MSK         (GA_MASK8)
N#define GA_SPC_MSK         (GA_MASK48)
N
N/* Macro for command field positioning */
N#define GA_FP(val, offset, mask) (((uint64_t)(val) & (mask)) << (offset))
N
N/* GA Command Fields (Engine, Length, Command code, Cmd Specific Params.)*/
N#define GA_ENG(Engine) (GA_FP((Engine), GA_ENG_OFF, GA_ENG_MSK))
N#define GA_LEN(Len)    (GA_FP((Len)   , GA_LEN_OFF, GA_LEN_MSK))
N#define GA_CMC(Code)   (GA_FP((Code)  , GA_CMC_OFF, GA_CMC_MSK))
N#define GA_SPC(spec)   (GA_FP((spec)  , GA_SPC_OFF, GA_SPC_MSK))
N
N/* GA Command Construction Macro */
N#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    | \
N                                                GA_ENG((Engine))   | \
N                                                GA_LEN((Len))      | \
N                                                GA_CMC((CmdCode))  | \
N                                                GA_SPC((CmdSpec)))
X#define GA_CMN(Engine, Len, CmdCode, CmdSpec) ((uint64_t)0x0ull    |                                                 GA_ENG((Engine))   |                                                 GA_LEN((Len))      |                                                 GA_CMC((CmdCode))  |                                                 GA_SPC((CmdSpec)))
N
N/*=========================================================================
N|                        SCHEDULER OPERATION COMMANDS                      |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load General-Purpose Register Command (LGPR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to configure
N|             one out of the 32 General-Purpose Registers. The command
N|             specific parameter for this command is the number of the
N|             register that should be loaded and the value itself.
N|
N|  Params:    regNr   - The number of the General-Purpose Register that
N|                       should be loaded
N|
N|             uiVal   - Value that should be stored within the selected
N|                       register. If the register does not encapsulate
N|                       32 bits the value within the command has to be right
N|                       aligned.
N|
N -------------------------------------------------------------------------*/
N#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,       \
N                               GA_FP ((regNr), 32, GA_MASK5)      |   \
N                               GA_FP ((uiVal),  0,  GA_MASK32)))
X#define GA_LOAD(regNr, uiVal) (GA_CMN(GA_SCHED, 1, GA_CMC_LGPR,                                      GA_FP ((regNr), 32, GA_MASK5)      |                                  GA_FP ((uiVal),  0,  GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   END Command (CSEND)
N|
N|  Descr  :   The CSEND command must be placed at the end of every command
N|             list. It signals the Command Scheduler that all commands have
N|             been executed. When the Command Scheduler is detecting this
N|             mark, a flag in the status register signals that the command
N|             list was executed. Optionally an interrupt is generated.
N|
N|  Params:    none
N|
N -------------------------------------------------------------------------*/
N#define GA_END() (GA_CMN(GA_SCHED, 0x1u, GA_CMC_END,0x0u))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Wait VSYNC Command (CSWVSYNC)
N|
N|  Descr  :   The CSWVSYNC command can be used to synchronize parts of the
N|             command list with the vertical synchronization signal VSYNC
N|             from the GDC or the Frame Grabber.
N|
N|             When the Command Scheduler is reading the CSWVSYNC command
N|             it waits until the next vertical synchronization of the
N|             display/camera input takes place before executing the next
N|             command.
N|
N|  Params:    module   -  VSYNC select:
N|                         Use: GA_GDC0     - Wait on GDC0
N|                              GA_FG0      - Wait on FG0
N|                              GA_GDC1     - Wait on GDC1
N|                              GA_FG1      - Wait on FG1
N|
N|
N -------------------------------------------------------------------------*/
N#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,        \
N                         GA_FP ((module), 0, GA_MASK2)))
X#define GA_WAIT(module) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSWVSYNC,                                 GA_FP ((module), 0, GA_MASK2)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   User Interrupt Command (CSUIC)
N|
N|  Descr  :   The CSUIC command can be used to signal the MCU that a
N|             certain part of the Command List is already executed or
N|             will now start execution.
N|
N|  Params:    interrupt number:
N|                          Use: 0 - 23
N|                               values > 23 will be ignored
N|
N -------------------------------------------------------------------------*/
N#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,    \
N                                  GA_FP ((number), 0, GA_MASK6)))
X#define GA_USERINTERRUPT(number) (GA_CMN(GA_SCHED, 0x1u, GA_CMC_CSUIC,                                      GA_FP ((number), 0, GA_MASK6)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC0 Configuration Command (CSGDC0CC)
N|
N|  Descr  :   The CSGDC0CC command can be used to change the content of GDC0 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC0 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC0CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC0CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Command Scheduler GDC1 Configuration Command (CSGDC1CC)
N|
N|  Descr  :   The CSGDC1CC command can be used to change the content of GDC1 registers
N|
N|  Params:    
N|             register offset:
N|                          16-bits GDC1 adress register offest
N|
N|             register value:
N|                          32-bits
N|
N -------------------------------------------------------------------------*/
N#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,  \
N                                         GA_FP((regOffset), 32, GA_MASK16)      |   \
N                                         GA_FP((value),      0, GA_MASK32)))
X#define GA_GDC1CONFIG(regOffset, value) (GA_CMN(GA_SCHED,   0x1u, GA_CMC_CSGDC1CC,                                           GA_FP((regOffset), 32, GA_MASK16)      |                                            GA_FP((value),      0, GA_MASK32)))
N
N
N/*======================================
N              Structures
N=======================================*/
N/* Command List Structure */
Ntypedef struct tag_ga_list_st
N{
N    uint64_t  ullCommands[GA_CMD_MAX] ;
X    uint64_t  ullCommands[2048] ;
N    uint64_t* pu64Current;
N    uint32_t  u32UsedDoubleWords; /* used or needed double words for an  GA-API */
N    int32_t   i32FreeSpaceStat;   /* C_SUCCESS: OK no space free error,
N                                     C_FAILED:  No free space for GA-API */
N} ga_list_st ;
N
N/****************************************************************************/
N
N
N#endif /* GA_COMMON_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: ga_common.h
N**  $Revision: 1.14 $
N**  $Date: 2015/07/21 12:30:20 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** | CONS.  : 
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\mw\inc\listmngr.h" 2
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_LISTMNGR_H_REVISION     "$Revision: 1.7 $"
N#define MW_LISTMNGR_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/**
N* @brief List status
N*/
Ntypedef enum tag_lst_status_e
N{
N    LIST_INUSE    = 0x0U,               /*!< List used by the GA */
N    LIST_FINISH   = 0x1U                /*!< List not used by GA */
N} lst_status_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of function vGf_Listmngr_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N*
N* @return void
N*/
Nvoid vGf_Listmngr_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                             uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N
N/**
N* @brief Implementation of function vGfInitList
N*
N* Initializes the GA lists
N*
N* @note This function needs to be called before any other from this file.
N*
N* @return void
N*/
Nvoid vGfListInit(void);
N
N
N/**
N* @brief Implementation of function vGfStartListExecution
N*
N* Sends the current list to the GA and performs the switching
N* between the active and inactive lists. The list will be closed
N* automatically by this function.
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfStartListExecution(void);
N
N
N/**
N* @brief Implementation of function vGfListExecute
N*
N* Wait till the previous list is executed and the GA is ready.
N* Sends the current list to the GA and performs the switching
N* between the active and inactive lists. The list will be closed
N* automatically by this function.
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfListExecute(void);
N
N
N/**
N* @brief Implementation of function vGfListResetAll
N*
N* Resets both GA lists.
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfListResetAll(void);
N
N
N/**
N* @brief Implementation of function pstGfListGetExec
N*
N* Returns the pointer to the list currently currently being
N* executed by the GA.
N*
N* @note none
N*
N* @return Pointer to the list currently being executed by GA.
N*/
Nga_list_st* pstGfListGetExec(void);
N
N
N/**
N* @brief Implementation of function pstGfListGetWrite
N*
N* Returns the pointer to the list currently currently being
N* written by the software.
N*
N* @note none
N*
N* @return Pointer to the list currently being written by SW.
N*/
Nga_list_st* pstGfListGetWrite(void);
N
N
N/**
N* @brief Implementation of function vGfListWaitToComplete
N*
N* This function waits on GA to execute the current list.
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfListWaitToComplete(void);
N
N
N/***************************************************************************/
N
N
N#endif /* LISTMNGR_H */
N
N/***************************************************************************/
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
L 25 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "gfunctions.h"
L 1 "..\..\..\..\mw\inc\gfunctions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Middleware graphic functions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.18 $
N*   DATE        : $Date: 2015/06/02 11:32:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GFUNCTIONS_H
N#define GFUNCTIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "gf.h"
N#include "layer.h"
N#include "blit.h"
L 1 "..\..\..\..\lldd\inc\blit.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver (Blitting Engine)
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator Blitting Engine
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.15 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef BLIT_H
N#define BLIT_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "ga_common.h"
N
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840   /* Rule 5.7 [A] : identifier reused from declaration of entity-kind "entity" */
S
N#endif
N
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_BLIT_H_REVISION     "$Revision: 1.15 $"
N#define LLDD_GA_BLIT_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*--------------------------------------------------------------------------------------------
N|          ------------------------------------------------------                             |
N|         | >>>>>>     BLITTING ENGINE COMMAND INDEX      <<<<<< |                            |
N|          ------------------------------------------------------                             |
N|---------------------------------------------------------------------------------------------|
N|---------------------------------------------------------------------------------------------|
N|                                                                                             |
N|                      ------------------------------                                         |
N|                     |      OPERATION COMMANDS      |                                        |
N|                      ------------------------------                                         |
N|                                                                                             |
N| - Overwrite:                                                                                |
N|   1. BLT_ORGB16       - Blit Overw. 16-bit RGB                                     (BltO16) |
N|   2. BLT_ORGBA32      - Blit Overw. 32-bit RGB                                     (BltO32) |
N|   3. BLT_ORLEI16      - Blit Overw. Run-Len.Enc. 16-bit RGB                    (BltORLEI16) |
N|   4. BLT_ORLEI24      - Blit Overwriting Run-Length Encoded Image 24-bit RGB   (BltORLEI24) |
N|   5. BLT_ORLEI24A     - Blit Overwriting Run-Length Encoded Image 24-bit RGBA (BltORLEI24A) |
N|   6. BLT_ORLEI32      - Blit Overw. Run-Len.Enc. 32-bit RGBA                   (BltORLEI32) |
N|   7. BLT_OPRST_RGB16  - Blit Overw. Preset 16-bit RGB                             (BltOP16) |
N|   8. BLT_OPRST_RGBA32 - Blit Overw. Preset 32-bit RGBA                            (BltOP32) |
N|                                                                                             |
N| - Blending:                                                                                 |
N|   1. BLT_BRGB16       - Blit Blend. 16-bit RGB                                     (BltB16) |
N|   2. BLT_BRGBA32      - Blit Blend. 32-bit RGBA                                    (BltB32) |
N|   3. BLT_BRLEI16      - Blit Blend. Run-Len. Enc.16-bit RGB                    (BltBRLEI16) |
N|   4. BLT_BRLEI24      - Blit Blending Run-Length Encoded Image 24-bit RGB      (BltBRLEI24) |
N|   5. BLT_BRLEI24A     - Blit Blending Run-Length Encoded Image 24A-bit RGBA   (BltBRLEI24A) |
N|   6. BLT_BRLEI32      - Blit Blend. Run-Len. Enc.32-bit RGBA                   (BltBRLEI32) |
N|   7. BLT_BPRST_RGB16  - Blit Blend. Preset 16-bit RGB                             (BltBP16) |
N|   8. BLT_BPRST_RGBA32 - Blit Blend. Preset 32-bit RGBA                            (BltBP32) |
N|                                                                                             |
N|---------------------------------------------------------------------------------------------|
N|                                                                                             |
N|                    ----------------------------------                                       |
N|                   |      LOAD REGISTER COMMANDS      |                                      |
N|                    ----------------------------------                                       |
N|                                                                                             |
N| - Source Regs:                                                                              |
N|    1. BLT_LOAD_SOURCEADDR     -  Load Source Address Reg.                             (SAR) |
N|    2. BLT_LOAD_SRCWIDTH       -  Load Source Memory Width Reg.                       (SMWR) |
N|                                                                                             |
N| - Destination Regs:                                                                         |
N|    3. BLT_LOAD_DESTADDR       -  Load Destination Address Reg.                        (DAR) |
N|    4. BLT_LOAD_DESTWIDTH      -  Load Destination Memory Width Reg.                  (DMWR) |
N|    5. BLT_LOAD_DESTDOTCNT     -  Load Destination Blit DOT Count Reg.               (DBDCR) |
N|    6. BLT_LOAD_DESTLINECNT    -  Load Destination Blit LINE Count Reg.              (DBLCR) |
N|                                                                                             |
N| - Clipping Window Regs:                                                                     |
N|    9. BLT_LOAD_CLIP_STARTADDR - Load Clipp. Wnd. Start Addr. Reg.                   (CWSAR) |
N|   10. BLT_LOAD_CLIP_WIDTH     - Load Clipping Window Width Reg.                      (CWWR) |
N|   11. BLT_LOAD_CLIP_HEIGHT    - Load Clipping Window Height Reg.                     (CWHR) |
N|                                                                                             |
N| - Conversion Regs:                                                                          |
N|   12. BLT_LOAD_SRCALPHA       - Load Source Alpha Value Reg.                         (SAVR) |
N|   13. BLT_LOAD_SRCTRANSPATT   - Load Source Transp. Pattern Reg.                     (STPR) |
N|   14. BLT_LOAD_DESTALPHA      - Load Destination Alpha Value Reg.                    (DAVR) |
N|   15. BLT_LOAD_DESTTRANSPATT  - Load Destination Transparency Reg.                    (DTR) |
N|                                                                                             |
N| - Filling Regs:                                                                             |
N|   16. BLT_LOAD_FILLRGBA       - Load RGBA Fill Preset Reg.                        (RGBAFPR) |
N|   17. BLT_LOAD_FILLRGB        - Load RGB Fill Preset Reg.                          (RGBFPR) |
N|                                                                                             |
N| - Raster/Fading Regs:                                                                       |
N|   19. BLT_LOAD_FADEFACT       - Load Fading Factor Reg.                               (FFR) |
N|   20. BLT_LOAD_RASTOP         - Load Raster Operation Reg.                            (ROR) |
N|                                                                                             |
N --------------------------------------------------------------------------------------------*/
N
N
N
N/*=========================================================================
N|                            OPERATION COMMANDS                             |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting 16-bit RGB (BltO16)
N|
N|  Descr  :   The BltO16 command triggers a blitting operation that transfers
N|             data from a source stored in the 16-bit RGB format to a
N|             destination area stored either in 16-bit RGB or 32-bit RGBA
N|             format.
N|
N|  Params:    destFrmt   - Destination Format
N|                          Use: GA_RGB16       - dest. stored in 16-bit frmt.
N|                               GA_RGBA32      - dest. stored in 32-bit frmt.
N|
N|             trnspColEn - Transparency Color Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N|             fading     - Fading Option
N|                          Use: BLT_NOFADING   - No fading
N|                               BLT_FADE_ALL   - RGB and Alpha will be faded
N|                               BLT_FADE_ALPHA - Only Alpha will be faded
N|                               BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn  - Clipping Window Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORGB16(destFrmt, trnspColEn, fading, ClipWndEn)             \
N                   (GA_CMN(GA_BLITING,   1, GA_CMC_BLTO16,              \
N                    GA_FP ((destFrmt),   4, GA_MASK1)          |        \
N                    GA_FP ((trnspColEn), 3, GA_MASK1)          |        \
N                    GA_FP ((fading),     1, GA_MASK2)          |        \
N                    GA_FP ((ClipWndEn),  0, GA_MASK1)))
X#define BLT_ORGB16(destFrmt, trnspColEn, fading, ClipWndEn)                                (GA_CMN(GA_BLITING,   1, GA_CMC_BLTO16,                                  GA_FP ((destFrmt),   4, GA_MASK1)          |                            GA_FP ((trnspColEn), 3, GA_MASK1)          |                            GA_FP ((fading),     1, GA_MASK2)          |                            GA_FP ((ClipWndEn),  0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting 32-bit RGBA (BltO32)
N|
N|  Descr  :   The BltO32 command triggers a blitting operation that transfers
N|             data from a source stored in the 32-bit RGB format to a
N|             destination area stored either in 16-bit RGB or 32-bit RGBA
N|             format.
N|
N|  Params:    destFrmt  - Destination Format
N|                         Use: GA_RGB16       - dest. stored in 16-bit frmt.
N|                              GA_RGBA32      - dest. stored in 32-bit frmt.
N|
N|             fading    - Fading Option
N|                         Use: BLT_NOFADING   - No fading
N|                              BLT_FADE_ALL   - RGB and Alpha will be faded
N|                              BLT_FADE_ALPHA - Only Alpha will be faded
N|                              BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn - Clipping Window Option
N|                         Use: GA_EN          - Enable Option
N|                              GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORGBA32(destFrmt, fading, ClipWndEn)                     \
N                    (GA_CMN(GA_BLITING,  1, GA_CMC_BLTO32,           \
N                     GA_FP ((destFrmt),  3, GA_MASK1)       |        \
N                     GA_FP ((fading),    1, GA_MASK2)       |        \
N                     GA_FP ((ClipWndEn), 0, GA_MASK1)))
X#define BLT_ORGBA32(destFrmt, fading, ClipWndEn)                                         (GA_CMN(GA_BLITING,  1, GA_CMC_BLTO32,                                GA_FP ((destFrmt),  3, GA_MASK1)       |                             GA_FP ((fading),    1, GA_MASK2)       |                             GA_FP ((ClipWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Run-Length Encoded Image 16-bit RGB
N|             (BltORLEI16)
N|
N|  Descr  :   The BltORLEI16 command triggers a blitting operation that
N|             transfers data from a source stored in the run-length encoded
N|             16-bit RGB format to a destination area stored either in 16-bit
N|             RGB or 32-bit RGBA format.
N|
N|  Params:    destFrmt   - Destination Format
N|                          Use: GA_RGB16       - dest. stored in 16-bit frmt.
N|                               GA_RGBA32      - dest. stored in 32-bit frmt.
N|
N|             trnspColEn - Transparency Color Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N|             fading     - Fading Option
N|                          Use: BLT_NOFADING   - No fading
N|                               BLT_FADE_ALL   - RGB and Alpha will be faded
N|                               BLT_FADE_ALPHA - Only Alpha will be faded
N|                               BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn  - Clipping Window Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORLEI16(destFrmt, trnspColEn, fading, ClipWndEn)               \
N                      (GA_CMN(GA_BLITING,   1, GA_CMC_BLTORLEI16,          \
N                       GA_FP ((destFrmt),   4, GA_MASK1)        |          \
N                       GA_FP ((trnspColEn), 3, GA_MASK1)        |          \
N                       GA_FP ((fading),     1, GA_MASK2)        |          \
N                       GA_FP ((ClipWndEn),  0, GA_MASK1)))
X#define BLT_ORLEI16(destFrmt, trnspColEn, fading, ClipWndEn)                                     (GA_CMN(GA_BLITING,   1, GA_CMC_BLTORLEI16,                                 GA_FP ((destFrmt),   4, GA_MASK1)        |                                 GA_FP ((trnspColEn), 3, GA_MASK1)        |                                 GA_FP ((fading),     1, GA_MASK2)        |                                 GA_FP ((ClipWndEn),  0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Run-Length Encoded Image 24-bit RGB
N|             (BltORLEI24)
N|
N|  Descr  :   The BltORLEI24 command triggers a blitting operation that
N|             transfers data from a source stored in the run-length encoded
N|             24-bit RGB format to a destination area stored either in 16-bit
N|             RGB or 32-bit RGBA format.
N|
N|  Params:    destFrmt   - Destination Format
N|                          Use: GA_RGB16       - dest. stored in 16-bit frmt.
N|                               GA_RGBA32      - dest. stored in 32-bit frmt.
N|
N|             trnspColEn - Transparency Color Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N|             fading     - Fading Option
N|                          Use: BLT_NOFADING   - No fading
N|                               BLT_FADE_ALL   - RGB and Alpha will be faded
N|                               BLT_FADE_ALPHA - Only Alpha will be faded
N|                               BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn  - Clipping Window Option
N|                          Use: GA_EN          - Enable Option
N|                               GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORLEI24(destFrmt, trnspColEn, fading, ClipWndEn)               \
N                      (GA_CMN(GA_BLITING,   1, GA_CMC_BLTORLEI24,          \
N                       GA_FP ((destFrmt),   4, GA_MASK1)        |          \
N                       GA_FP ((trnspColEn), 3, GA_MASK1)        |          \
N                       GA_FP ((fading),     1, GA_MASK2)        |          \
N                       GA_FP ((ClipWndEn),  0, GA_MASK1)))
X#define BLT_ORLEI24(destFrmt, trnspColEn, fading, ClipWndEn)                                     (GA_CMN(GA_BLITING,   1, GA_CMC_BLTORLEI24,                                 GA_FP ((destFrmt),   4, GA_MASK1)        |                                 GA_FP ((trnspColEn), 3, GA_MASK1)        |                                 GA_FP ((fading),     1, GA_MASK2)        |                                 GA_FP ((ClipWndEn),  0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Run-Length Encoded Image 24-bit RGBA
N|             (BltORLEI24A)
N|
N|  Descr  :   The BltORLEI32 command triggers a blitting operation that
N|             transfers data from a source stored in the run-length encoded
N|             32-bit RGBA format to a destination area stored in 32-bit RGBA
N|             format.
N|
N|  Params:    destFrmt  - Destination Format
N|                         Use: GA_RGB16      - dest. stored in 16-bit frmt.
N|                              GA_RGBA32     - dest. stored in 32-bit frmt.
N|
N|             fading    - Fading Option
N|                         Use: BLT_NOFADING   - No fading
N|                              BLT_FADE_ALL   - RGB and Alpha will be faded
N|                              BLT_FADE_ALPHA - Only Alpha will be faded
N|                              BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn - Clipping Window Option
N|                         Use: GA_EN          - Enable Option
N|                              GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORLEI24A(destFrmt, fading, ClipWndEn)                           \
N                     (GA_CMN(GA_BLITING,  1, GA_CMC_BLTORLEI24A,            \
N                      GA_FP ((destFrmt),  3, GA_MASK1)          |           \
N                      GA_FP ((fading),    1, GA_MASK2)          |           \
N                      GA_FP ((ClipWndEn), 0, GA_MASK1)))
X#define BLT_ORLEI24A(destFrmt, fading, ClipWndEn)                                                (GA_CMN(GA_BLITING,  1, GA_CMC_BLTORLEI24A,                                  GA_FP ((destFrmt),  3, GA_MASK1)          |                                 GA_FP ((fading),    1, GA_MASK2)          |                                 GA_FP ((ClipWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Run-Length Encoded Image 32-bit RGBA
N|             (BltORLEI32)
N|
N|  Descr  :   The BltORLEI32 command triggers a blitting operation that
N|             transfers data from a source stored in the run-length encoded
N|             32-bit RGBA format to a destination area stored in 32-bit RGBA
N|             format.
N|
N|  Params:    destFrmt  - Destination Format
N|                         Use: GA_RGB16      - dest. stored in 16-bit frmt.
N|                              GA_RGBA32     - dest. stored in 32-bit frmt.
N|
N|             fading    - Fading Option
N|                         Use: BLT_NOFADING   - No fading
N|                              BLT_FADE_ALL   - RGB and Alpha will be faded
N|                              BLT_FADE_ALPHA - Only Alpha will be faded
N|                              BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn - Clipping Window Option
N|                         Use: GA_EN          - Enable Option
N|                              GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_ORLEI32(destFrmt, fading, ClipWndEn)                            \
N                     (GA_CMN(GA_BLITING,  1, GA_CMC_BLTORLEI32,             \
N                      GA_FP ((destFrmt),  3, GA_MASK1)          |           \
N                      GA_FP ((fading),    1, GA_MASK2)          |           \
N                      GA_FP ((ClipWndEn), 0, GA_MASK1)))
X#define BLT_ORLEI32(destFrmt, fading, ClipWndEn)                                                 (GA_CMN(GA_BLITING,  1, GA_CMC_BLTORLEI32,                                   GA_FP ((destFrmt),  3, GA_MASK1)          |                                 GA_FP ((fading),    1, GA_MASK2)          |                                 GA_FP ((ClipWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Preset 16-bit RGB (BltOP16)
N|
N|  Descr  :   The BltOP16 command triggers a blitting operation that blits
N|             the data from the RGB Fill Preset Register with to the
N|             destination stored in 16-bit RGB format.
N|
N|  Params:    fading    - Fading Option
N|                         Use: BLT_NOFADING   - No fading
N|                              BLT_FADE_ALL   - RGB and Alpha will be faded
N|                              BLT_FADE_ALPHA - Only Alpha will be faded
N|                              BLT_FADE_RGB   - ONly RGB will be faded
N|
N|             ClipWndEn - Clipping Window Option
N|                         Use: GA_EN          - Enable Option
N|                              GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_OPRST_RGB16(fading, ClipWndEn)                                \
N                       (GA_CMN(GA_BLITING,  1, GA_CMC_BLTOP16,            \
N                        GA_FP ((fading),    1, GA_MASK2)    |             \
N                        GA_FP ((ClipWndEn), 0, GA_MASK1)))
X#define BLT_OPRST_RGB16(fading, ClipWndEn)                                                       (GA_CMN(GA_BLITING,  1, GA_CMC_BLTOP16,                                    GA_FP ((fading),    1, GA_MASK2)    |                                     GA_FP ((ClipWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Overwriting Preset 32-bit RGBA (BltOP32)
N|
N|  Descr  :   The BltOP32 command triggers a blitting operation that blits
N|             the data from the RGBA Fill Preset Register to the destination
N|             stored in 32-bit RGBA format.
N|
N|  Params:    fading    - Fading Option
N|                         Use: BLT_NOFADING   - No fading
N|                              BLT_FADE_ALL   - RGB and Alpha will be faded
N|                              BLT_FADE_ALPHA - Only Alpha will be faded
N|                              BLT_FADE_RGB   - Only RGB will be faded
N|
N|             ClipWndEn - Clipping Window Option
N|                         Use: GA_EN          - Enable Option
N|                              GA_DIS         - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_OPRST_RGBA32(fading, ClipWndEn)                              \
N                        (GA_CMN(GA_BLITING,  1, GA_CMC_BLTOP32,          \
N                         GA_FP ((fading),    1, GA_MASK2)    |           \
N                         GA_FP ((ClipWndEn), 0, GA_MASK1)))
X#define BLT_OPRST_RGBA32(fading, ClipWndEn)                                                      (GA_CMN(GA_BLITING,  1, GA_CMC_BLTOP32,                                   GA_FP ((fading),    1, GA_MASK2)    |                                    GA_FP ((ClipWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending 16-bit RGB (BltB16)
N|
N|  Descr  :   The BltB16 command triggers a blitting operation that blends
N|             data from a source stored in the 16-bit RGB format with a
N|             destination area stored in either 16-bit RGB or 32-bit RGBA
N|             format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             destFrmt    - Destination Format
N|                           Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                                GA_RGBA32       - dest. stored in 32-bit frmt.
N|                         
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - ONly RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N -------------------------------------------------------------------------*/
N#define BLT_BRGB16(redChProt,                                           \
N                   greenChProt,                                         \
N                   blueChProt,                                          \
N                   alphaProt,                                           \
N                   rastOpEn,                                            \
N                   destFrmt,                                            \
N                   blndOrder,                                           \
N                   trnspColEn,                                          \
N                   fading,                                              \
N                   ClipWndEn)                                           \
N                   (GA_CMN((GA_BLITING),  1, GA_CMC_BLTB16,             \
N                    GA_FP ((redChProt),  10, GA_MASK1)          |       \
N                    GA_FP ((greenChProt), 9, GA_MASK1)          |       \
N                    GA_FP ((blueChProt),  8, GA_MASK1)          |       \
N                    GA_FP ((alphaProt),   7, GA_MASK1)          |       \
N                    GA_FP ((rastOpEn),    6, GA_MASK1)          |       \
N                    GA_FP ((destFrmt),    5, GA_MASK1)          |       \
N                    GA_FP ((blndOrder),   4, GA_MASK1)          |       \
N                    GA_FP ((trnspColEn),  3, GA_MASK1)          |       \
N                    GA_FP ((fading),      1, GA_MASK2)          |       \
N                    GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRGB16(redChProt,                                                              greenChProt,                                                            blueChProt,                                                             alphaProt,                                                              rastOpEn,                                                               destFrmt,                                                               blndOrder,                                                              trnspColEn,                                                             fading,                                                                 ClipWndEn)                                                              (GA_CMN((GA_BLITING),  1, GA_CMC_BLTB16,                                 GA_FP ((redChProt),  10, GA_MASK1)          |                           GA_FP ((greenChProt), 9, GA_MASK1)          |                           GA_FP ((blueChProt),  8, GA_MASK1)          |                           GA_FP ((alphaProt),   7, GA_MASK1)          |                           GA_FP ((rastOpEn),    6, GA_MASK1)          |                           GA_FP ((destFrmt),    5, GA_MASK1)          |                           GA_FP ((blndOrder),   4, GA_MASK1)          |                           GA_FP ((trnspColEn),  3, GA_MASK1)          |                           GA_FP ((fading),      1, GA_MASK2)          |                           GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending 32-bit RGBA (BltB32)
N|
N|  Descr  :   The BltB32 command triggers a blitting operation that blends
N|             data from a source stored in the 32-bit RGBA format with a
N|             destination area stored in either 16-bit RGB or 32-bit RGBA
N|             format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             destFrmt    - Destination Format
N|                           Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                                GA_RGBA32       - dest. stored in 32-bit frmt.
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - ONly RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BRGBA32(redChProt,                                           \
N                    greenChProt,                                         \
N                    blueChProt,                                          \
N                    alphaProt,                                           \
N                    rastOpEn,                                            \
N                    destFrmt,                                            \
N                    blndOrder,                                           \
N                    trnspColEn,                                          \
N                    fading,                                              \
N                    ClipWndEn)                                           \
N                    (GA_CMN(GA_BLITING,    1, GA_CMC_BLTB32,             \
N                     GA_FP ((redChProt),  10, GA_MASK1)        |         \
N                     GA_FP ((greenChProt), 9, GA_MASK1)        |         \
N                     GA_FP ((blueChProt),  8, GA_MASK1)        |         \
N                     GA_FP ((alphaProt),   7, GA_MASK1)        |         \
N                     GA_FP ((rastOpEn),    6, GA_MASK1)        |         \
N                     GA_FP ((destFrmt),    5, GA_MASK1)        |         \
N                     GA_FP ((blndOrder),   4, GA_MASK1)        |         \
N                     GA_FP ((trnspColEn),  3, GA_MASK1)        |         \
N                     GA_FP ((fading),      1, GA_MASK2)        |         \
N                     GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRGBA32(redChProt,                                                               greenChProt,                                                             blueChProt,                                                              alphaProt,                                                               rastOpEn,                                                                destFrmt,                                                                blndOrder,                                                               trnspColEn,                                                              fading,                                                                  ClipWndEn)                                                               (GA_CMN(GA_BLITING,    1, GA_CMC_BLTB32,                                  GA_FP ((redChProt),  10, GA_MASK1)        |                              GA_FP ((greenChProt), 9, GA_MASK1)        |                              GA_FP ((blueChProt),  8, GA_MASK1)        |                              GA_FP ((alphaProt),   7, GA_MASK1)        |                              GA_FP ((rastOpEn),    6, GA_MASK1)        |                              GA_FP ((destFrmt),    5, GA_MASK1)        |                              GA_FP ((blndOrder),   4, GA_MASK1)        |                              GA_FP ((trnspColEn),  3, GA_MASK1)        |                              GA_FP ((fading),      1, GA_MASK2)        |                              GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Run-Length Encoded Image 16-bit RGB (BltBRLEI16)
N|
N|  Descr  :   The BltBRLEI16 command triggers a blitting operation that
N|             blends data from a source stored in the run-length encoded
N|             16-bit RGB format with a destination area stored in either
N|             16-bit RGB or 32-bit RGBA format.
N|
N|  Params:    redChProt  - Red Channel Protection
N|                          Use: GA_EN           - Channel Protected
N|                               GA_DIS          - Channel Not Protected
N|
N|             greenChProt- Green Channel Protection
N|                          Use: GA_EN           - Channel Protected
N|                               GA_DIS          - Channel Not Protected
N|
N|             blueChProt - Blue Channel Protection
N|                          Use: GA_EN           - Channel Protected
N|                               GA_DIS          - Channel Not Protected
N|
N|             alphaProt  - Alpha Channel Protection
N|                          Use: GA_EN           - Channel Protected
N|                               GA_DIS          - Channel Not Protected
N|
N|             rastOpEn   - Raster Operation Option
N|                          Use: GA_EN           - Enable Option
N|                               GA_DIS          - Disable Option
N|
N|             blndOrder  - Blending Order
N|                          Use: BLT_ONTO_DEST   - Onto destination
N|                               BLT_BEHIND_DEST - Behind the destination
N|
N|             destFrmt   - Destination Format
N|                          Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                               GA_RGBA32       - dest. stored in 32-bit frmt.
N|
N|             trnspColEn - Transparency Color Option
N|                          Use: GA_EN           - Enable Option
N|                               GA_DIS          - Disable Option
N|
N|             fading     - Fading Option
N|                          Use: BLT_NOFADING    - No fading
N|                               BLT_FADE_ALL    - RGB and Alpha will be faded
N|                               BLT_FADE_ALPHA  - Only Alpha will be faded
N|                               BLT_FADE_RGB    - Only RGB will be faded
N|
N|             ClipWndEn  - Clipping Window Option
N|                          Use: GA_EN           - Enable Option
N|                               GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BRLEI16(redChProt,                                       \
N                    greenChProt,                                     \
N                    blueChProt,                                      \
N                    alphaProt,                                       \
N                    rastOpEn,                                        \
N                    destFrmt,                                        \
N                    blndOrder,                                       \
N                    trnspColEn,                                      \
N                    fading,                                          \
N                    ClipWndEn)                                       \
N                    (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI16,       \
N                     GA_FP ((redChProt),  10, GA_MASK1)        |     \
N                     GA_FP ((greenChProt), 9, GA_MASK1)        |     \
N                     GA_FP ((blueChProt),  8, GA_MASK1)        |     \
N                     GA_FP ((alphaProt),   7, GA_MASK1)        |     \
N                     GA_FP ((rastOpEn),    6, GA_MASK1)        |     \
N                     GA_FP ((destFrmt),    5, GA_MASK1)        |     \
N                     GA_FP ((blndOrder),   4, GA_MASK1)        |     \
N                     GA_FP ((trnspColEn),  3, GA_MASK1)        |     \
N                     GA_FP ((fading),      1, GA_MASK2)        |     \
N                     GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRLEI16(redChProt,                                                           greenChProt,                                                         blueChProt,                                                          alphaProt,                                                           rastOpEn,                                                            destFrmt,                                                            blndOrder,                                                           trnspColEn,                                                          fading,                                                              ClipWndEn)                                                           (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI16,                            GA_FP ((redChProt),  10, GA_MASK1)        |                          GA_FP ((greenChProt), 9, GA_MASK1)        |                          GA_FP ((blueChProt),  8, GA_MASK1)        |                          GA_FP ((alphaProt),   7, GA_MASK1)        |                          GA_FP ((rastOpEn),    6, GA_MASK1)        |                          GA_FP ((destFrmt),    5, GA_MASK1)        |                          GA_FP ((blndOrder),   4, GA_MASK1)        |                          GA_FP ((trnspColEn),  3, GA_MASK1)        |                          GA_FP ((fading),      1, GA_MASK2)        |                          GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Run-Length Encoded Image 24-bit RGB (BltBRLEI24)
N|
N|  Descr  :   The BltBRLEI24 command triggers a blitting operation that
N|             blends data from a source stored in the run-length encoded
N|             16-bit RGB format with a destination area stored in either
N|             16-bit RGB or 32-bit RGBA format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             destFrmt    - Destination Format
N|                           Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                                GA_RGBA32       - dest. stored in 32-bit frmt.
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - Only RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BRLEI24(redChProt,                                       \
N                    greenChProt,                                     \
N                    blueChProt,                                      \
N                    alphaProt,                                       \
N                    rastOpEn,                                        \
N                    destFrmt,                                        \
N                    blndOrder,                                       \
N                    trnspColEn,                                      \
N                    fading,                                          \
N                    ClipWndEn)                                       \
N                    (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI24,       \
N                     GA_FP ((redChProt),  10, GA_MASK1)        |     \
N                     GA_FP ((greenChProt), 9, GA_MASK1)        |     \
N                     GA_FP ((blueChProt),  8, GA_MASK1)        |     \
N                     GA_FP ((alphaProt),   7, GA_MASK1)        |     \
N                     GA_FP ((rastOpEn),    6, GA_MASK1)        |     \
N                     GA_FP ((destFrmt),    5, GA_MASK1)        |     \
N                     GA_FP ((blndOrder),   4, GA_MASK1)        |     \
N                     GA_FP ((trnspColEn),  3, GA_MASK1)        |     \
N                     GA_FP ((fading),      1, GA_MASK2)        |     \
N                     GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRLEI24(redChProt,                                                           greenChProt,                                                         blueChProt,                                                          alphaProt,                                                           rastOpEn,                                                            destFrmt,                                                            blndOrder,                                                           trnspColEn,                                                          fading,                                                              ClipWndEn)                                                           (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI24,                            GA_FP ((redChProt),  10, GA_MASK1)        |                          GA_FP ((greenChProt), 9, GA_MASK1)        |                          GA_FP ((blueChProt),  8, GA_MASK1)        |                          GA_FP ((alphaProt),   7, GA_MASK1)        |                          GA_FP ((rastOpEn),    6, GA_MASK1)        |                          GA_FP ((destFrmt),    5, GA_MASK1)        |                          GA_FP ((blndOrder),   4, GA_MASK1)        |                          GA_FP ((trnspColEn),  3, GA_MASK1)        |                          GA_FP ((fading),      1, GA_MASK2)        |                          GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Run-Length Encoded Image 24A-bit RGBA (BltBRLEI24A)
N|
N|  Descr  :   The BltBRLEI24A command triggers a blitting operation that
N|             blends data from a source stored in the run-length encoded
N|             24-bit RGBA format with a destination area stored in 32-bit
N|             RGBA format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             destFrmt    - Destination Format
N|                           Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                                GA_RGBA32       - dest. stored in 32-bit frmt.
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - Only RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N -------------------------------------------------------------------------*/
N#define BLT_BRLEI24A(redChProt,                                       \
N                     greenChProt,                                     \
N                     blueChProt,                                      \
N                     alphaProt,                                       \
N                     rastOpEn,                                        \
N                     destFrmt,                                        \
N                     blndOrder,                                       \
N                     trnspColEn,                                      \
N                     fading,                                          \
N                     ClipWndEn)                                       \
N                     (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI24A,      \
N                      GA_FP ((redChProt),  10, GA_MASK1)        |     \
N                      GA_FP ((greenChProt), 9, GA_MASK1)        |     \
N                      GA_FP ((blueChProt),  8, GA_MASK1)        |     \
N                      GA_FP ((alphaProt),   7, GA_MASK1)        |     \
N                      GA_FP ((rastOpEn),    6, GA_MASK1)        |     \
N                      GA_FP ((destFrmt),    5, GA_MASK1)        |     \
N                      GA_FP ((blndOrder),   4, GA_MASK1)        |     \
N                      GA_FP ((trnspColEn),  3, GA_MASK1)        |     \
N                      GA_FP ((fading),      1, GA_MASK2)        |     \
N                      GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRLEI24A(redChProt,                                                            greenChProt,                                                          blueChProt,                                                           alphaProt,                                                            rastOpEn,                                                             destFrmt,                                                             blndOrder,                                                            trnspColEn,                                                           fading,                                                               ClipWndEn)                                                            (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI24A,                            GA_FP ((redChProt),  10, GA_MASK1)        |                           GA_FP ((greenChProt), 9, GA_MASK1)        |                           GA_FP ((blueChProt),  8, GA_MASK1)        |                           GA_FP ((alphaProt),   7, GA_MASK1)        |                           GA_FP ((rastOpEn),    6, GA_MASK1)        |                           GA_FP ((destFrmt),    5, GA_MASK1)        |                           GA_FP ((blndOrder),   4, GA_MASK1)        |                           GA_FP ((trnspColEn),  3, GA_MASK1)        |                           GA_FP ((fading),      1, GA_MASK2)        |                           GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Run-Length Encoded Image 32-bit RGBA (BltBRLEI32)
N|
N|  Descr  :   The BltBRLEI32 command triggers a blitting operation that
N|             blends data from a source stored in the run-length encoded
N|             32-bit RGBA format with a destination area stored in 32-bit
N|             RGBA format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             destFrmt    - Destination Format
N|                           Use: GA_RGB16        - dest. stored in 16-bit frmt.
N|                                GA_RGBA32       - dest. stored in 32-bit frmt.
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - Only RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BRLEI32(redChProt,                                       \
N                    greenChProt,                                     \
N                    blueChProt,                                      \
N                    alphaProt,                                       \
N                    rastOpEn,                                        \
N                    destFrmt,                                        \
N                    blndOrder,                                       \
N                    trnspColEn,                                      \
N                    fading,                                          \
N                    ClipWndEn)                                       \
N                    (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI32,       \
N                     GA_FP ((redChProt),  10, GA_MASK1)        |     \
N                     GA_FP ((greenChProt), 9, GA_MASK1)        |     \
N                     GA_FP ((blueChProt),  8, GA_MASK1)        |     \
N                     GA_FP ((alphaProt),   7, GA_MASK1)        |     \
N                     GA_FP ((rastOpEn),    6, GA_MASK1)        |     \
N                     GA_FP ((destFrmt),    5, GA_MASK1)        |     \
N                     GA_FP ((blndOrder),   4, GA_MASK1)        |     \
N                     GA_FP ((trnspColEn),  3, GA_MASK1)        |     \
N                     GA_FP ((fading),      1, GA_MASK2)        |     \
N                     GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BRLEI32(redChProt,                                                           greenChProt,                                                         blueChProt,                                                          alphaProt,                                                           rastOpEn,                                                            destFrmt,                                                            blndOrder,                                                           trnspColEn,                                                          fading,                                                              ClipWndEn)                                                           (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBRLEI32,                            GA_FP ((redChProt),  10, GA_MASK1)        |                          GA_FP ((greenChProt), 9, GA_MASK1)        |                          GA_FP ((blueChProt),  8, GA_MASK1)        |                          GA_FP ((alphaProt),   7, GA_MASK1)        |                          GA_FP ((rastOpEn),    6, GA_MASK1)        |                          GA_FP ((destFrmt),    5, GA_MASK1)        |                          GA_FP ((blndOrder),   4, GA_MASK1)        |                          GA_FP ((trnspColEn),  3, GA_MASK1)        |                          GA_FP ((fading),      1, GA_MASK2)        |                          GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Preset 16-bit RGB (BltBP16)
N|
N|  Descr  :   The BltBP16 command triggers a blitting operation that blends
N|             the data from the RGB Fill Preset Register with a destination
N|             stored in 16-bit RGB format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - Only RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BPRST_RGB16(redChProt,                                        \
N                        greenChProt,                                      \
N                        blueChProt,                                       \
N                        rastOpEn,                                         \
N                        blndOrder,                                        \
N                        fading,                                           \
N                        ClipWndEn)                                        \
N                        (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBP16,           \
N                         GA_FP ((redChProt),  10, GA_MASK1)        |      \
N                         GA_FP ((greenChProt), 9, GA_MASK1)        |      \
N                         GA_FP ((blueChProt),  8, GA_MASK1)        |      \
N                         GA_FP (       0,      7, GA_MASK1)        |      \
N                         GA_FP ((rastOpEn),    6, GA_MASK1)        |      \
N                         GA_FP (       0,      5, GA_MASK1)        |      \
N                         GA_FP (       0,      4, GA_MASK1)        |      \
N                         GA_FP ((blndOrder),   3, GA_MASK1)        |      \
N                         GA_FP ((fading),      1, GA_MASK2)        |      \
N                         GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BPRST_RGB16(redChProt,                                                                greenChProt,                                                              blueChProt,                                                               rastOpEn,                                                                 blndOrder,                                                                fading,                                                                   ClipWndEn)                                                                (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBP16,                                    GA_FP ((redChProt),  10, GA_MASK1)        |                               GA_FP ((greenChProt), 9, GA_MASK1)        |                               GA_FP ((blueChProt),  8, GA_MASK1)        |                               GA_FP (       0,      7, GA_MASK1)        |                               GA_FP ((rastOpEn),    6, GA_MASK1)        |                               GA_FP (       0,      5, GA_MASK1)        |                               GA_FP (       0,      4, GA_MASK1)        |                               GA_FP ((blndOrder),   3, GA_MASK1)        |                               GA_FP ((fading),      1, GA_MASK2)        |                               GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Blit Blending Preset 32-bit RGBA (BltBP32)
N|
N|  Descr  :   The BltBP32 command triggers a blitting operation that blends
N|             the data from the RGBA Fill Preset Register with a destination
N|             stored in 32-bit RGBA format.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             rastOpEn    - Raster Operation Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             trnspColEn  - Transparency Color Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             fading      - Fading Option
N|                           Use: BLT_NOFADING    - No fading
N|                                BLT_FADE_ALL    - RGB and Alpha will be faded
N|                                BLT_FADE_ALPHA  - Only Alpha will be faded
N|                                BLT_FADE_RGB    - Only RGB will be faded
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define BLT_BPRST_RGBA32(redChProt,                                       \
N                         greenChProt,                                     \
N                         blueChProt,                                      \
N                         alphaProt,                                       \
N                         rastOpEn,                                        \
N                         blndOrder,                                       \
N                         fading,                                          \
N                         ClipWndEn)                                       \
N                         (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBP32,          \
N                          GA_FP ((redChProt),  10, GA_MASK1)        |     \
N                          GA_FP ((greenChProt), 9, GA_MASK1)        |     \
N                          GA_FP ((blueChProt),  8, GA_MASK1)        |     \
N                          GA_FP ((alphaProt),   7, GA_MASK1)        |     \
N                          GA_FP ((rastOpEn),    6, GA_MASK1)        |     \
N                          GA_FP (       0,      5, GA_MASK1)        |     \
N                          GA_FP (       0,      4, GA_MASK1)        |     \
N                          GA_FP ((blndOrder),   3, GA_MASK1)        |     \
N                          GA_FP ((fading),      1, GA_MASK2)        |     \
N                          GA_FP ((ClipWndEn),   0, GA_MASK1)))
X#define BLT_BPRST_RGBA32(redChProt,                                                                greenChProt,                                                              blueChProt,                                                               alphaProt,                                                                rastOpEn,                                                                 blndOrder,                                                                fading,                                                                   ClipWndEn)                                                                (GA_CMN(GA_BLITING,  1, GA_CMC_BLTBP32,                                    GA_FP ((redChProt),  10, GA_MASK1)        |                               GA_FP ((greenChProt), 9, GA_MASK1)        |                               GA_FP ((blueChProt),  8, GA_MASK1)        |                               GA_FP ((alphaProt),   7, GA_MASK1)        |                               GA_FP ((rastOpEn),    6, GA_MASK1)        |                               GA_FP (       0,      5, GA_MASK1)        |                               GA_FP (       0,      4, GA_MASK1)        |                               GA_FP ((blndOrder),   3, GA_MASK1)        |                               GA_FP ((fading),      1, GA_MASK2)        |                               GA_FP ((ClipWndEn),   0, GA_MASK1)))
N
N/*=========================================================================
N|                          LOAD REGISTER COMMANDS                           |
N ==========================================================================*/
N/*------------------------------
N|        SOURCE REGISTERS       |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Address Register (SAR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SAR.
N|             The physical 32-bit address within the source address register
N|             is the pointer to the first dot in memory that should be
N|             transferred from the source (within the source segment).
N|
N|  Params:    addr - Source Address
N|                    The lower 32 physical address bits that point to the
N|                    first dot of the source.
N|
N|  Limit.:    Depending on the source format this address has to be
N|             doubleword, word, halfword or byte aligned. The following
N|             table shows the possible alignments:
N|
N|                ---------------------------------------------
N|               |   Src.Frmt.  |Dword | Word |Halfword | Byte |
N|               |=============================================|
N|               |  32-bit RGBA |  X   |  X   |         |      |
N|               |  16-bit RGB  |  X   |  X   |    X    |      |
N|               |  RLE 32      |  X   |      |         |      |
N|               |  RLE 24      |  X   |      |         |      |
N|               |  RLE 24A     |  X   |      |         |      |
N|               |  RLE 16      |  X   |      |         |      |
N|                ---------------------------------------------
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_SOURCEADDR(addr) (GA_LOAD(GA_GPR9, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Memory Width Register (SMWR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SMWR.
N|             The source memory width register specifies the memory reserved
N|             for one line within the source image in number of dots.
N|             (Note that this value can be different to the number of dots
N|             to be blitted per line!)
N|
N|
N|  Params:    width - Source Memory Width
N|                     Memory reserved per line within the source in dots
N|                     (1 up to 4095)
N|
N|  Limit.:    The content of this register is not taken into account when the
N|             Blitting Engine is configured to read a run-length encoded
N|             image. When the source is run-length encoded the destinations
N|             dimensions have to match the dimensions of the source exactly
N|             (number of dots).
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_SRCWIDTH(width) (GA_LOAD(GA_GPR10, ((width) & GA_MASK12)))
N
N/*------------------------------
N|     DESTINATION REGISTERS     |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Address Register (DAR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load DAR.
N|             The physical 32-bit address within the destination address
N|             register is the pointer to the first dot in memory that should
N|             be blitted to the destination (within the destination segment).
N|
N|  Params:    addr - Destination Address
N|                    The lower 32 physical address bits that point to the
N|                    first dot of the destination.
N|
N|  Limit.:    Depending on the destination format this address has to be
N|             doubleword, word, halfword or byte aligned. The following
N|             table shows the possible alignments:
N|
N|                --------------------------------------
N|               |  Dest.Frmt.  | Word |Halfword | Byte |
N|               |======================================|
N|               |  32-bit RGBA |  X   |         |      |
N|               |  16-bit RGB  |  X   |    X    |      |
N|                --------------------------------------
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTADDR(addr) (GA_LOAD(GA_GPR4, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Memory Width Register (DMWR)
N|
N|  Descr  :   The destination memory width register specifies the memory
N|             reserved for one line within the destination image in number
N|             of dots.
N|             Note that this value can be greater than the number of dots
N|             to be blitted per line.
N|
N|  Params:    width - Destination Memory Width
N|                     Memory reserved per line within the source in dots
N|                     (1 up to 4095)
N|
N|  Limit.:    The content of this register is not taken into account when the
N|             Blitting Engine is configured to read a run-length encoded
N|             image. When the source is run-length encoded the destinations
N|             dimensions have to match the dimensions of the source exactly
N|             (number of dots).
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTWIDTH(width) (GA_LOAD(GA_GPR5, ((width) & GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Blit DOT Count Register (DBDCR)
N|
N|  Descr  :   The Destination Blit Dot Count Registers specifies the number
N|             of dots per line that should be blitted into the destination.
N|             If a clipping window is defined, the Blitting Engine could
N|             process less dots per line.
N|
N|  Params:    dotCnt - Destination Blit Dot Count
N|                      Number of dots to be blitted into the destination per
N|                      line (1 up to 4095).
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTDOTCNT(dotCnt) (GA_LOAD(GA_GPR6,                      \
N                                     ((dotCnt) & GA_MASK12)))
X#define BLT_LOAD_DESTDOTCNT(dotCnt) (GA_LOAD(GA_GPR6,                                                           ((dotCnt) & GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Blit LINE Count Register (DBLCR)
N|
N|  Descr  :   The Destination Blit Line Count Register specifies the number
N|             if lines that should be transferred to the destination. If a
N|             clipping window is defined the Blitting Engine could process
N|             less lines.
N|
N|  Params:    lineCnt - Destination Blit Line Count
N|                       Number of lines to be blitted into the destination
N|                       (1 up to 4095).
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTLINECNT(lineCnt) (GA_LOAD(GA_GPR7,                    \
N                                       ((lineCnt) & GA_MASK12)))
X#define BLT_LOAD_DESTLINECNT(lineCnt) (GA_LOAD(GA_GPR7,                                                           ((lineCnt) & GA_MASK12)))
N
N/*------------------------------
N|    CLIPPING WND. REGISTERS    |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Clipping Window Start Address Register (CWSAR)
N|
N|  Descr  :   The Clipping Window Start Address Register keeps the pointer
N|             to the first dot within the clipping window. The upper 4
N|             address bits are taken from the Destination Segment Register,
N|             because the clipping window has to be defined with respect to
N|             the destination.
N|
N|  Params:    addr - Clipping Window Start Address
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_CLIP_STARTADDR(addr) (GA_LOAD(GA_GPR0, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Clipping Window Width Register (CWWR)
N|
N|  Descr  :   The Clipping Window Width Register defines the number of dots
N|             within the clipping window in horizontal direction.
N|
N|  Params:    width - Clipping Window Width
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_CLIP_WIDTH(width) (GA_LOAD(GA_GPR1,                       \
N                                    ((width) & GA_MASK12)))
X#define BLT_LOAD_CLIP_WIDTH(width) (GA_LOAD(GA_GPR1,                                                           ((width) & GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Clipping Window Height Register (CWHR)
N|
N|  Descr  :   The Clipping Window Height Register defines the number of
N|             lines within the clipping window.
N|
N|  Params:    height - Clipping Window Height
N|                      Number of lines within the clipping window in
N|                      horizontal direction (1 up to 4095).
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_CLIP_HEIGHT(height) (GA_LOAD(GA_GPR2,                     \
N                                      ((height) & GA_MASK12)))
X#define BLT_LOAD_CLIP_HEIGHT(height) (GA_LOAD(GA_GPR2,                                                           ((height) & GA_MASK12)))
N
N/*------------------------------
N|   CONVERSION CFG. REGISTERS   |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Alpha Value Register (SAVR)
N|
N|  Descr  :   The Source Alpha Value Register keeps the alpha value for
N|             conversion of the source dots from the 16-bit RGB format
N|             to the 32-bit RGBA format for internal processing.
N|
N|  Params:    alpha - Source Alpha Value
N|                     8-bit Alpha Value used for expanding source dots
N|                     during conversion from 16-bit RGB to 32-bit RGBA
N|                     for internal processing.
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_SRCALPHA(alpha) (GA_LOAD(GA_GPR13,                        \
N                                  ((alpha) & GA_MASK8)))
X#define BLT_LOAD_SRCALPHA(alpha) (GA_LOAD(GA_GPR13,                                                          ((alpha) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Transparency Pattern Register (STPR)
N|
N|  Descr  :   When the transparency color option is enabled the value stored
N|             in this register is the comparison pattern during conversion
N|             from 16-bit RGB to 32-bit RGBA format.
N|
N|  Params:    pattern - Source Transparency Pattern
N|                       Pattern for comparison of source dots
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_SRCTRANSPATT(pattern) (GA_LOAD(GA_GPR14,                  \
N                                        ((pattern) & GA_MASK24)))
X#define BLT_LOAD_SRCTRANSPATT(pattern) (GA_LOAD(GA_GPR14,                                                          ((pattern) & GA_MASK24)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Alpha Value Register (DAVR)
N|
N|  Descr  :   The Destination Alpha Value Register keeps the alpha value
N|             used during conversion of the destination dots from the 16-bit
N|             RGB format to the 32-bit RGBA format.
N|
N|  Params:    alpha - Destination Alpha Value
N|                     8-bit alpha value used for expanding destination dots
N|                     during conversion from 16-bit RGB to 32-bit RGBA
N|                     for internal processing.
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTALPHA(alpha) (GA_LOAD(GA_GPR15,                       \
N                                   ((alpha) & GA_MASK8)))
X#define BLT_LOAD_DESTALPHA(alpha) (GA_LOAD(GA_GPR15,                                                          ((alpha) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Transparency Register (DTR)
N|
N|  Descr  :   When the transparency color option is enabled the value stored
N|             in this register is the comparison pattern during conversion
N|             from 16-bit RGB to 32-bit RGBA format.
N|
N|  Params:    pattern - Destination Transparency Pattern
N|                       Pattern for comparison of destination dots.
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_DESTTRANSPATT(pattern) (GA_LOAD(GA_GPR16,                 \
N                                         ((pattern) & GA_MASK16)))
X#define BLT_LOAD_DESTTRANSPATT(pattern) (GA_LOAD(GA_GPR16,                                                          ((pattern) & GA_MASK16)))
N
N/*------------------------------
N|     FILLING CFG. REGISTERS    |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load RGBA Fill Preset Register (RGBAFPR)
N|
N|  Descr  :   The RGBA Fill Preset Register content is used when the filling
N|             option is enabled and the destination is in 32-bit RGBA mode.
N|
N|  Params:    val - RGBA Fill Preset (32-bit)
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_FILLRGBA(Val) (GA_LOAD(GA_GPR17,(Val)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load RGB Fill Preset Register (RGBFPR)
N|
N|  Descr  :   The content of the RGB Fill Preset Register is used, when the
N|             destination is within the 16-bit RGB mode.
N|
N|  Params:    val - RGB Fill Preset (16-bit)
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_FILLRGB(Val) (GA_LOAD(GA_GPR18,((Val) & GA_MASK16)))
N
N/*------------------------------
N|    FADING/RASTER REGISTERS    |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Fading Factor Register (FFR)
N|
N|  Descr  :   The Fading Factor Register holds the fading factor enumerator
N|             (FFE) of the fading factor.
N|
N|  Params:    factor - Fading Factor Enumerator
N|                      These bits specify the enumerator of the fading
N|                      factor FFACT.
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_FADEFACT(factor) (GA_LOAD(GA_GPR20,                       \
N                                   ((factor) & GA_MASK8)))
X#define BLT_LOAD_FADEFACT(factor) (GA_LOAD(GA_GPR20,                                                          ((factor) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Raster Operation Register (ROR)
N|
N|  Descr  :   The Raster Operation Register consists of the Raster Operation
N|             Mode and the Raster Operation Value.
N|
N|  Params:    rastOpMode - Raster Operation Mode
N|                          This setting determines on which channels the
N|                          raster operation takes place.
N|                          Use following parameters:
N|                          BLT_RGBA_CH
N|                          BLT_RGB_CH
N|                          BLT_ALPHA_CH
N|                          BLT_ALPHA_DEST_CH
N|                          BLT_ALPHA_SRC_CH
N|
N|             rastOpVal  - Raster Operation Value
N|
N -------------------------------------------------------------------------*/
N#define BLT_LOAD_RASTOP(rastOpMode, rastOpVal) (GA_LOAD(GA_GPR21,      \
N                        GA_FP ((rastOpMode), 16, GA_MASK3)   |         \
N                        GA_FP ((rastOpVal),   0, GA_MASK4)))
X#define BLT_LOAD_RASTOP(rastOpMode, rastOpVal) (GA_LOAD(GA_GPR21,                              GA_FP ((rastOpMode), 16, GA_MASK3)   |                                 GA_FP ((rastOpVal),   0, GA_MASK4)))
N
N
N/*======================================
N                Enums
N=======================================*/
N/* RLEI Format in RGB mode without alpha channel */
Ntypedef enum tag_blt_rleifmt_rgb_e
N{
N    RLEI_OVRFMT_RGB16       = 0x0u,     /* Source format in format RLEI-16  */
N    RLEI_OVRFMT_RGB24       = 0x1u      /* Source format in format RLEI-24  */
N} blt_rleifmt_rgb_e;
N
N/* RLEI Format in RGBA mode with alpha channel */
Ntypedef enum tag_blt_rleifmt_rgba_e
N{
N    RLEI_OVRFMT_RGBA24      = 0x2u,     /* Source format in format RLEI-24A */
N    RLEI_OVRFMT_RGBA32      = 0x3u      /* Source format in format RLEI-32  */
N} blt_rleifmt_rgba_e;
N
N/* RLEI Format in RGBx mode with and without alpha channel */
Ntypedef enum tag_blt_rleifmt_rgbx_e
N{
N    RLEI_BLNDFMT_RGB16       = 0x0u,     /* Source format in format RLEI-16  */
N    RLEI_BLNDFMT_RGB24       = 0x1u,     /* Source format in format RLEI-24  */
N    RLEI_BLNDFMT_RGBA24      = 0x2u,     /* Source format in format RLEI-24A */
N    RLEI_BLNDFMT_RGBA32      = 0x3u      /* Source format in format RLEI-32  */
N} blt_rleifmt_rgbx_e;
N
N/* Memory Region Selection */
Ntypedef enum tag_blt_memSel_e
N{
N    BLT_MEM_SRC          = 0x1u,     /* Source Memory Parameters */
N    BLT_MEM_DST          = 0x2u,     /* Destination Memory Parameters */
N    BLT_MEM_ALL          = 0x3u      /* Both Source and Destination */
N} ga_memSel_e;
N
N/* Fading Mode Selection */
Ntypedef enum tag_blt_fadeMode_e
N{
N    BLT_NOFADING         = 0x0u,     /* No fading */
N    BLT_FADE_ALL         = 0x1u,     /* RGB and Alpha will be faded */
N    BLT_FADE_ALPHA       = 0x2u,     /* Only Alpha will be faded */
N    BLT_FADE_RGB         = 0x3u      /* Only RGB will be faded */
N} blt_fadeMode_e;
N
N/* Raster Op. Channel selection */
Ntypedef enum tag_blt_rastChSel_e
N{
N    BLT_RGBA_CH          = 0x0u,     /* Rast op. on all channels */
N    BLT_RGB_CH           = 0x1u,     /* Rast op. on RGB channels */
N    BLT_ALPHA_CH         = 0x2u,     /* Rast op. on Alpha ch. only */
N    BLT_ALPHA_DEST_CH    = 0x3u,     /* Rast op. RGB and keep Dst. alpha ch.*/
N    BLT_ALPHA_SRC_CH     = 0x4u      /* Rast op. RGB and keep Src. alpha ch.*/
N} blt_rastChSel_e;
N
N/* Raster Operation Values */
Ntypedef enum tag_blt_rastOpVal_e
N{
N    /* Source ONLY */
N    BLT_RAST_SOURCE      = 0xcu,     /* Source */
N    BLT_RAST_SRC_INV     = 0x3u,     /* Inverts the Source */
N
N    /* Destination ONLY */
N    BLT_RAST_DEST        = 0xau,     /* Destination */
N    BLT_RAST_DEST_ZERO   = 0x0u,     /* Sets destination to 0  */
N    BLT_RAST_DEST_ONE    = 0xfu,     /* Sets destination to 1  */
N    BLT_RAST_DEST_INV    = 0x5u,     /* Inverts the Destination*/
N
N    /* Boolean AND */
N    BLT_RAST_S_AND_D     = 0x8u,     /*  ( Src. AND  Dest.) */
N    BLT_RAST_NS_AND_D    = 0x2u,     /*  (~Src. AND  Dest.) */
N    BLT_RAST_S_AND_ND    = 0x4u,     /*  ( Src. AND ~Dest.) */
N    BLT_RAST_S_AND_D_INV = 0x7u,     /* ~( Src. AND  Dest.) */
N
N    /* Boolean OR */
N    BLT_RAST_S_OR_D      = 0xeu,     /*  ( Src. OR  Dest.) */
N    BLT_RAST_NS_OR_D     = 0xbu,     /*  (~Src. OR  Dest.) */
N    BLT_RAST_S_OR_ND     = 0xdu,     /*  ( Src. OR ~Dest.) */
N    BLT_RAST_S_OR_D_INV  = 0x1u,     /* ~( Src. OR  Dest.) */
N
N    /* Boolean XOR */
N    BLT_RAST_S_XOR_D     = 0x6u,     /*  ( Src. XOR Dest.) */
N    BLT_RAST_S_XOR_D_INV = 0x9u      /* ~( Src. XOR Dest.) */
N} blt_rastOpVal_e;
N
N
N/*======================================
N              Structures
N=======================================*/
N
N/* Memory Blitting structure */
Ntypedef struct tag_blit_mem_st
N{
N    /* Source Mem. Params */
N    uint16_t      u16SrcWidth;      /* Source Memory Width (Dots Per Line) */
N    uint32_t      u32SrcAddr;       /* Source Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Destination Mem. Params */
N    uint16_t      u16DstWidth;      /* Dest. Memory Width (Dots Per Line) */
N    uint32_t      u32DstAddr;       /* Dest. Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Blitting Area Size */
N    uint16_t      u16DotCnt;         /* Dot Number per line to be blitted */
N    uint16_t      u16LineCnt;        /* Line Number to be blitted */
N
N} blit_mem_st;
N
N/* Clipping Window Structure */
Ntypedef struct tag_blit_ClipWnd_st
N{
N    uint32_t       u32ClipAddr;      /* Start Addr.(first dot within C.Wnd) */
N    uint16_t       u16Width;         /* Width (nr. of dots in horiz. dir.)  */
N    uint16_t       u16Height;        /* Height (nr.of dots in vertic. dir.) */
N} blit_ClipWnd_st;
N
N/* RGB/RGBA Operation parameter structure (Overwrite mode) */
Ntypedef struct tag_blit_OvrRgb_st
N{
N    ga_colFmt_e     eSrcFmt;        /* Source Color format */
N    ga_colFmt_e     eDestFmt;       /* Destination Color format */
N    ga_en_e         eTranspColEn;   /* Transparency Color Option
N                                      (avail. only for 16-bit RGB source) */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint32_t        u32SrcTransVal; /* Src. Transpar. Pattern (STPR reg.) 
N                                       Pattern for comparison of source dots. For 16-bit RGB to 32bit
N                                       RGBA conversion, the bits 15:0 are regarded. For 24-bit RGB to
N                                       32-bit RGBA conversion, the bits 23:0 are regarded. */    
N    uint16_t        u16DstTransVal; /* Dest. Transp. Pattern (DTR reg.) */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N} blit_OvrRgb_st;
N
N
N/* RLEI Operation parameter structure (Overwrite mode) */
Ntypedef struct tag_blit_OvrRlei_st
N{
N    blt_rleifmt_rgb_e  eRleiFmt; /* RLE Format of source image */ 
N    ga_colFmt_e     eDestFmt;       /* Destination Color format */
N    ga_en_e         eTranspColEn;   /* Transparency Color Option */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint32_t        u32SrcTransVal; /* Src. Transpar. Pattern (STPR reg.) 
N                                       Pattern for comparison of source dots. For 16-bit RGB to 32bit
N                                       RGBA conversion, the bits 15:0 are regarded. For 24-bit RGB to
N                                       32-bit RGBA conversion, the bits 23:0 are regarded.  */    
N    uint16_t        u16DstTransVal; /* Dest. Transp. Pattern (DTR reg.) */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N} blit_OvrRlei_st;
N
N/* RLEI24A Operation parameter structure (Overwrite mode) */
Ntypedef struct tag_blit_OvrRleiA_st
N{
N    blt_rleifmt_rgba_e  eRleiFmt; /* RLE Format of source image */
N    ga_colFmt_e     eDestFmt;       /* Destination Color format */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N} blit_OvrRleiA_st;
N
N
N/* RGB Preset Operation parameter structure (Overwrite mode) */
Ntypedef struct tag_blit_OvrRgbP_st
N{
N    uint32_t        u32Color;       /* Fill Colour (RGB/RGBA format),
N                                       depending on eSrcFmt setting */
N    ga_colFmt_e     eSrcFmt;        /* Source Color Format */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N} blit_OvrRgbP_st;
N
N
N/* RGB/RGBA Operation parameter structure (Blending mode) */
Ntypedef struct tag_blit_BlndRgb_st
N{
N    ga_colFmt_e     eSrcFmt;        /* Source Color Format */
N    ga_colFmt_e     eDestFmt;       /* Destination Color Format */
N    ga_en_e         eRedChPrtEn;    /* RED channel Protection enable */
N    ga_en_e         eGreenChPrtEn;  /* GREEN channel Protection enable */
N    ga_en_e         eBlueChPrtEn;   /* BLUE channel Protection enable */
N    ga_en_e         eAlphaChPrtEn;  /* ALPHA channel Protection enable */
N    ga_en_e         eRastOpEn;      /* Enabling the Raster Operation */
N    ga_en_e         eTranspColEn;   /* Transp. Col. Opt. (only 16-bit src) */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N    ga_blendOrd_e   eBlndOrder;     /* Blending Order */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint32_t        u32SrcTransVal; /* Src. Transpar. Pattern (STPR reg.) 
N                                       Pattern for comparison of source dots. For 16-bit RGB to 32bit
N                                       RGBA conversion, the bits 15:0 are regarded. For 24-bit RGB to
N                                       32-bit RGBA conversion, the bits 23:0 are regarded. */    
N    uint16_t        u16DstTransVal; /* Dest. Transp. Pattern (DTR reg.) */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N    blt_rastChSel_e eRastOpMode;    /* Raster Operation Mode */
N    blt_rastOpVal_e eRastOpValue;   /* Raster Operation Value */
N} blit_BlndRgb_st;
N
N/* Run-Length Encoded 16-bit Operation parameter structure (Blending mode) */
Ntypedef struct tag_blit_BlndRlei_st
N{
N    blt_rleifmt_rgbx_e eRleiFmt;
N    ga_colFmt_e     eDestFmt;       /* Destination Color Format */
N    ga_en_e         eRedChPrtEn;    /* RED channel Protection enable */
N    ga_en_e         eGreenChPrtEn;  /* GREEN channel Protection enable */
N    ga_en_e         eBlueChPrtEn;   /* BLUE channel Protection enable */
N    ga_en_e         eAlphaChPrtEn;  /* ALPHA channel Protection enable */
N    ga_en_e         eRastOpEn;      /* Enabling the Raster Operation */
N    ga_en_e         eTranspColEn;   /* Transp. Col. Opt. (only 16-bit src) */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N    ga_blendOrd_e   eBlndOrder;     /* Blending Order */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint32_t        u32SrcTransVal; /* Src. Transpar. Pattern (STPR reg.) 
N                                       Pattern for comparison of source dots. For 16-bit RGB to 32bit
N                                       RGBA conversion, the bits 15:0 are regarded. For 24-bit RGB to
N                                       32-bit RGBA conversion, the bits 23:0 are regarded. */    
N    uint16_t        u16DstTransVal; /* Dest. Transp. Pattern (DTR reg.) */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N    blt_rastChSel_e eRastOpMode;    /* Raster Operation Mode */
N    blt_rastOpVal_e eRastOpValue;   /* Raster Operation Value */
N} blit_BlndRlei_st;
N
N/* 16-bit Fill Operation parameter structure (Blending mode) */
Ntypedef struct tag_blit_BlndFill16_st
N{
N    uint16_t        u16Color;        /* Fill Color RGB - format */
N    ga_en_e         eRedChPrtEn;    /* RED channel Protection enable */
N    ga_en_e         eGreenChPrtEn;  /* GREEN channel Protection enable */
N    ga_en_e         eBlueChPrtEn;   /* BLUE channel Protection enable */
N    ga_en_e         eRastOpEn;      /* Enabling the Raster Operation */
N    ga_blendOrd_e   eBlndOrder;     /* Blending Order */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    uint8_t         u8SrcAlphaVal;  /* Source Alpha Value */
N    uint8_t         u8DstAlphaVal;  /* Destination Alpha Value */
N    blt_rastChSel_e eRastOpMode;    /* Raster Operation Mode */
N    blt_rastOpVal_e eRastOpValue;   /* Raster Operation Value */
N} blit_BlndFill16_st;
N
N/* 32-bit Fill Operation parameter structure (Blending mode) */
Ntypedef struct tag_blit_BlndFill32_st
N{
N    uint32_t        u32Color;       /* Fill Color RGBA - format */
N    ga_en_e         eRedChPrtEn;    /* RED channel Protection enable */
N    ga_en_e         eGreenChPrtEn;  /* GREEN channel Protection enable */
N    ga_en_e         eBlueChPrtEn;   /* BLUE channel Protection enable */
N    ga_en_e         eAlphaChPrtEn;  /* ALPHA channel Protection enable */
N    ga_en_e         eRastOpEn;      /* Enabling the Raster Operation */
N    ga_blendOrd_e   eBlndOrder;     /* Blending Order */
N    blt_fadeMode_e  eFadeMode;      /* Fading Option */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N
N    /* Optional */
N    uint8_t         u8FadingFctr;   /* Fading factor */
N    blt_rastChSel_e eRastOpMode;    /* Raster Operation Mode */
N    blt_rastOpVal_e eRastOpValue;   /* Raster Operation Value */
N} blit_BlndFill32_st;
N
N/*======================================
N      Exported Function Prototypes
N=======================================*/
N
N/****************************************************************************
N *
N * Function:      vBlit_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vBlit_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                      uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N/*-------------------------------------------------------------------------
N|
N|                      B A S I C      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vBlit_SetClippWnd
N *
N * Purpose:       Sets the Clipping Window (Source/Destination/Size)
N *
N * Inputs:        u32ClipAddr - Start Addr.(first dot within C.Wnd)
N *
N *                usWidth     - Clipping Window Width
N *                              (number of dots in horizontal dir.)
N *
N *                usHeight    - Clipping Window Height
N *                              (number of dots in horizontal dir.)
N *
N *                pstCmdList  - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vBlit_SetClippWnd(uint32_t u32ClipAddr, uint16_t u16Width,
N                       uint16_t  u16Height, ga_list_st* pstCmdList);
N
N
N/*-------------------------------------------------------------------------
N|
N|                  O V E R W R I T E      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vBlit_OverwriteRGB
N *
N * Purpose:       Inserts the set of commands into a command list, which are
N *                necessary for starting an Overwrite function.
N *                In this case the source/destination is of RGB/RGBA type.
N *
N *                The function inserts the commands for necessary registers
N *                initialization and inserts the  appropriate Blit overwrite
N *                command (BLT_ORGB16/BLT_ORGBA32) depending of the source
N *                data format type .
N *
N *                     --------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB |RLE |
N *                    |=================================
N *                    |  32-bit RGBA |  X   |  X  |    |
N *                    |  16-bit RGB  |  X   |  X  |    |
N *                    |  RLE 32      |      |     |    |
N *                    |  RLE 24A     |      |     |    |
N *                    |  RLE 24      |      |     |    |
N *                    |  RLE 16      |      |     |    |
N *                     --------------------------------
N *
N * Inputs:        tMem      - Pointer to the Source/Destination Memory params
N *                            as well as the blitting area size.
N *                            (for more details please see struct desc.)
N *
N *                tParam    - Pointer to Parameter Structure which specifies all requred
N *                            input data for overwrite blitting operation
N *                            (for more details please see struct desc.)
N *
N *                ptCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   The source and destination address alignment rules,
N *                as descirbed in BLT_LOAD_SOURCEADDR/BLT_LOAD_DESTADDR
N *                command description, MUST always be obeyed!!!
N *
N ***************************************************************************/
Nvoid vBlit_OverwriteRGB(blit_mem_st* pstMem, blit_OvrRgb_st* pstParam,
N                        ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vBlit_OverwriteRLEI_RGB
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an Overwrite function where the source is of
N *                run-length encoded 16-bit RGB type while the destination
N *                is either of RGB or RGBA type.
N *
N *                This function inserts the commands for initialization of
N *                all necessary registers and inserts the appropriate Blit
N *                overwrite command.
N *
N *                     ---------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE |
N *                    |==================================
N *                    |  32-bit RGBA |      |     |     |
N *                    |  16-bit RGB  |      |     |     |
N *                    |  RLE 32      |      |     |     |
N *                    |  RLE 24A     |      |     |     |
N *                    |  RLE 24      |      |     |     |
N *                    |  RLE 16      |  X   |  X  |     |
N *                     ---------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite blitting operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vBlit_OverwriteRLEI_RGB(blit_mem_st* pstMem, blit_OvrRlei_st* pstParam,
N                             ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vBlit_OverwriteRLEI_RGBA
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an Overwrite function where the source is of
N *                run-length encoded 24-bit RGBA type, while the destination
N *                is stored in RGBA format.
N *
N *                This function inserts the commands for initialization of
N *                all necessary registers and inserts the appropriate Blit
N *                overwrite command.
N *
N *                     ---------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE |
N *                    |==================================
N *                    |  32-bit RGBA |      |     |     |
N *                    |  16-bit RGB  |      |     |     |
N *                    |  RLE 32      |      |     |     |
N *                    |  RLE 24A     |  X   |  X  |     |
N *                    |  RLE 24      |      |     |     |
N *                    |  RLE 16      |      |     |     |
N *                     ---------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite blitting operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vBlit_OverwriteRLEI_RGBA(blit_mem_st* pstMem, blit_OvrRleiA_st* pstParam,
N                              ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vBlit_OverwriteFillRGB
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an Overwrite function where the source is in
N *                RGBFP/RGBAFP Register and the destination is in same format.
N *
N *                This is basically the fill function where the FIll Color
N *                is taken from RGBFPReg.
N *
N *                     ---------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE |
N *                    |==================================
N *                    |  32-bit RGBA |      |     |     |
N *                    |  16-bit RGB  |      |     |     |
N *                    |  RLE 32      |      |     |     |
N *                    |  RLE 16      |      |     |     |
N *                    |  RLE 24A     |      |     |     |
N *                    |  RLE 24      |      |     |     |
N *                    |  RGBFPReg    |      |  X  |     |
N *                    |  RGBAFPReg   |  X   |     |     |
N *                     ---------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite filling operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please notice that the conversion between RGB and RGBA is
N *                not possible. The source format is ALWAYS equal to the
N *                destination format.
N *
N ***************************************************************************/
Nvoid vBlit_OverwriteFillRGB(blit_mem_st* pstMem, blit_OvrRgbP_st* pstParam,
N                            ga_list_st* pstCmdList);
N
N/*--------------------------------------------------------------------------
N|
N|                    B L E N D I N G      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N
N/****************************************************************************
N *
N * Function:      i32Blit_BlendRGB
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an blit blend function where the src/dst. is
N *                of 16/32-bit RGB/RGBA type.
N *
N *
N *                     ----------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE  |
N *                    |===================================
N *                    |  32-bit RGBA |  X   |  X  |      |
N *                    |  16-bit RGB  |  X   |  X  |      |
N *                    |  RLE 32      |      |     |      |
N *                    |  RLE 24A     |      |     |      |
N *                    |  RLE 24      |      |     |      |
N *                    |  RLE 16      |      |     |      |
N *                     ----------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite blitting operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS - All conditions are fulfilled (See. Limitations)
N *                C_FAILED  - All conditions are not met (See. Limitations)
N *
N * Limitations: 1) When Raster Operation is enabled, the Source format MUST
N *                 be the SAME as Destination format. Please have in mind
N *                 that this function will prevent any illegal combination
N *                 to be executed. For this reason, always check the return
N *                 result of this function.
N 
N *              2) When Raster Operation is enabled, then the options 
N *                 Transparency Color and Fading will be assumed as disabled and
N *                 the features in pstParam will be ignored.
N *
N *              3) Please note that Alpha Channel Protection value is ONLY
N *                 used when the destination is in 32-bit RGBA format.
N *
N ***************************************************************************/
Nint32_t i32Blit_BlendRGB(blit_mem_st* pstMem, blit_BlndRgb_st* pstParam,
N                         ga_list_st* pstCmdList);
N	                        
N/****************************************************************************
N *
N * Function:      vBlit_BlendRLEI
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an blit blend function where the src is
N *                stored in run-length encoded 16-bit RGB format, while
N *                a destination is stored in 16-bit RGB or 32-bit RGBA
N *                format.
N *
N *                This function inserts the commands for initialization of
N *                all necessary registers and inserts the appropriate Blit
N *                Blend command.
N *
N *                     ----------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE  |
N *                    |===================================
N *                    |  RLE 32      |  X   |  X  |      |
N *                    |  RLE 24A     |  X   |  X  |      |
N *                    |  RLE 24      |  X   |  X  |      |
N *                    |  RLE 16      |  X   |  X  |      |
N *                     ----------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite blitting operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:    When Raster Operation is enabled, then the options Transparency
N *                 Color and Fading will be assumed as disabled and the features 
N *                 in pstParam will be ignored.
N 
N*
N ***************************************************************************/
Nvoid vBlit_BlendRLEI(blit_mem_st* pstMem, blit_BlndRlei_st* pstParam,
N                     ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vBlit_BlendFillRGB
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an Overwrite function where the source is in
N *                RGBFPReg Register and the destination is in 16-bit RGB
N *                format.
N *
N *                This function inserts the commands for initialization of
N *                all necessary registers and inserts the appropriate Blit
N *                overwrite command.
N *
N *                     ---------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE |
N *                    |==================================
N *                    |  32-bit RGBA |      |     |     |
N *                    |  16-bit RGB  |      |     |     |
N *                    |  RLE 32      |      |     |     |
N *                    |  RLE 24A     |      |     |     |
N *                    |  RLE 24      |      |     |     |
N *                    |  RLE 16      |      |     |     |
N *                    |  RGBFPReg    |      |  X  |     |
N *                    |  RGBAFPReg   |      |     |     |
N *                     ---------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                            ( for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite filling operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:    When Raster Operation is enabled, then the option Fading
N *                 will be assumed as disabled and the feature in pstParam
N *                 will be ognored. 
N *
N ***************************************************************************/
Nvoid vBlit_BlendFillRGB(blit_mem_st* pstMem, blit_BlndFill16_st* pstParam,
N                        ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vBlit_BlendFillRGBA
N *
N * Purpose:       Inserts the commands into command list which are necessary
N *                for starting an Overwrite function where the source is in
N *                RGBAFP Register and the destination is in 32-bit RGBA
N *                format.
N *
N *                This function inserts the commands for initialization of
N *                all necessary registers and inserts the appropriate Blit
N *                overwrite command.
N *
N *                     ---------------------------------
N *                    |  Src.\ Dest  | RGBA | RGB | RLE |
N *                    |==================================
N *                    |  32-bit RGBA |      |     |     |
N *                    |  16-bit RGB  |      |     |     |
N *                    |  RLE 32      |      |     |     |
N *                    |  RLE 24A     |      |     |     |
N *                    |  RLE 24      |      |     |     |
N *                    |  RLE 16      |      |     |     |
N *                    |  RGBFPReg    |      |     |     |
N *                    |  RGBAFPReg   |  X   |     |     |
N *                     ----------------------------------
N *
N * Inputs:        stMem      - Pointer to the Source/Destination Memory params
N *                             as well as the blitting area size.
N *                             (for more details please see struct desc.)
N *
N *                stParam    - Pointer to Parameter Structure which specifies all requred
N *                             input data for overwrite filling operation
N *                             (for more details please see struct desc.)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:    When Raster Operation is enabled, then then the option Fading
N *                 will be assumed as disabled and this feature in pstParam will
N *                 be ignored. 
N *
N ***************************************************************************/
Nvoid vBlit_BlendFillRGBA(blit_mem_st* pstMem, blit_BlndFill32_st* pstParam,
N                         ga_list_st* pstCmdList);
N
N/****************************************************************************/
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N/****************************************************************************/
N#endif /* BLIT_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: blit.h
N**  $Revision: 1.15 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** | CONS.  :
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 28 "..\..\..\..\mw\inc\gfunctions.h" 2
N#include "transf.h"
L 1 "..\..\..\..\lldd\inc\transf.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver (Transformation Engine)
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator Transformation Engine
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.15 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef TRANSF_H
N#define TRANSF_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "captypes.h"
N#include "ga_common.h"
N
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840   /* Rule 5.7 [A] : identifier reused from declaration of entity-kind "entity" */
S
N#endif  
N
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_TRANSF_H_REVISION     "$Revision: 1.15 $"
N#define LLDD_GA_TRANSF_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*--------------------------------------------------------------------------
N|       ------------------------------------------------------------        |
N|      | >>>>>>     TRANSFORMATION ENGINE COMMAND INDEX      <<<<<< |       |
N|       ------------------------------------------------------------        |
N|---------------------------------------------------------------------------|
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                      ------------------------------                       |
N|                     |      OPERATION COMMANDS      |                      |
N|                      ------------------------------                       |
N|                                                                           |
N| - Commands:                                                               |
N|   1. TSF_TRANSF           -Transformation Command                         |
N|   2. TSF_TRANSFB          -Transformation Command with blend              |
N|                                                                           |
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                    ----------------------------------                     |
N|                   |      LOAD REGISTER COMMANDS      |                    |
N|                    ----------------------------------                     |
N|                                                                           |
N| - Source Regs:                                                            |
N|   1. TSF_LOAD_SOURCEADDR  -  Load Source Address Reg.               (SAR) |
N|   2. TSF_LOAD_SRCWIDTH    -  Load Source Memory Width Reg.         (SMWR) |
N|   3. TSF_LOAD_SRCALPHA    -  Load Source Alpha Value Register      (SAVR) |
N|   4. TSF_LOAD_SRCFADEFACT -  Load Source Fading Factor register    (SFFR) |
N|                                                                           |
N| - Destination Regs:                                                       |
N|   5. TSF_LOAD_DESTADDR    -  Load Destination Address Reg.          (DAR) |
N|   6. TSF_LOAD_DESTWIDTH   -  Load Destination Memory Width Reg.    (DMWR) |
N|   7. TSF_LOAD_DEST_IMAGEWIDTH  -  Load Destination Image Width Reg. (DWR) |
N|   8. TSF_LOAD_DESTLINECNT -  Load Destination Blit LINE Count Reg. (DLCR) |
N|   9. TSF_LOAD_DESTALPHA   -  Load Destination Alpha Value Register (DAVR) |
N|                                                                           |
N| - CLUT Regs:                                                              |
N|  10. TSF_LOAD_LUTADDR     -  Load LUT Address Register              (LAR) |
N|  11. TSF_LOAD_LUTWIDTH    -  Load LUT Width Register                (LWR) |
N|  12. TSF_LOAD_LUTLINECNT  -  Load LUT Line Count Register          (LLCR) |
N|                                                                           |
N| - Color Regs:                                                             |
N|  13. TSF_LOAD_COLORFMT    - Load Color Format Register              (CFR) |
N|  14. TSF_LOAD_PRECOLOR    - Load Clipping Window Width Reg.        (CWWR) |
N|                                                                           |
N --------------------------------------------------------------------------*/
N
N/*=========================================================================
N|                            OPERATION COMMANDS                             |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Transform
N|
N|  Descr  :   The Transformation Engine uses only one command pattern to be
N|             triggered.
N|
N|  Params:    modeSel  - Mode Control
N|                        Use: GA_MODE_PIXEL   - Pixel Mode
N|                             GA_MODE_COLORCH - Color channel Mode
N|
N|             filterEn - Filter Control
N|                        Use: GA_EN           - Enable Filter
N|                             GA_DIS          - Disable Filter
N|
N|
N -------------------------------------------------------------------------*/
N#define TSF_TRANSF(modeSel,filterEn)(GA_CMN(GA_TRANSFORM, 1, GA_CMC_TRANSF,\
N                                     GA_FP ((modeSel),    1, GA_MASK1)   | \
N                                     GA_FP ((filterEn),   0, GA_MASK1)))
X#define TSF_TRANSF(modeSel,filterEn)(GA_CMN(GA_TRANSFORM, 1, GA_CMC_TRANSF,                                     GA_FP ((modeSel),    1, GA_MASK1)   |                                      GA_FP ((filterEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Transform blend
N|
N|  Descr  :   The Transformation Engine uses only one command pattern to be
N|             triggered.
N|
N|  Params:   modeSel      - Mode Control
N|                           Use: GA_MODE_PIXEL    - Pixel Mode
N|                                GA_MODE_COLORCH  - Color channel Mode
N|                         
N|            redChProt    - Red Channel Protection
N|                           Use: GA_EN            - Channel Protected
N|                                GA_DIS           - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN            - Channel Protected
N|                                GA_DIS           - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN            - Channel Protected
N|                                GA_DIS           - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN            - Channel Protected
N|                                GA_DIS           - Channel Not Protected
N|                         
N|             redChFad    - Red Channel Fading
N|                            Use: GA_EN           - Channel Protected
N|                                 GA_DIS          - Channel Not Protected
N|                         
N|             greenChFad  - Green Channel Fading
N|                            Use: GA_EN           - Channel Protected
N|                                 GA_DIS          - Channel Not Protected
N|                         
N|             blueChFad   - Blue Channel Fading
N|                            Use: GA_EN           - Channel Protected
N|                                 GA_DIS          - Channel Not Protected
N|                         
N|             alphaFad    - Alpha Channel Fading
N|                            Use: GA_EN           - Channel Protected
N|                                 GA_DIS          - Channel Not Protected
N|                         
N|             blndOrder    - Blending Order
N|                            Use: TSF_ONTO_DEST   - Onto destination
N|                                 TSF_BEHIND_DEST - Behind the destination
N|                         
N|             filterEn     - Filter Control
N|                            Use: GA_EN           - Enable Filter
N|                                 GA_DIS          - Disable Filter
N|
N|
N -------------------------------------------------------------------------*/
N#define TSF_TRANSFB(modeSel,                                               \
N                    redChProt,                                             \
N                    greenChProt,                                           \
N                    blueChProt,                                            \
N                    alphaProt,                                             \
N                    redChFad,                                              \
N                    greenChFad,                                            \
N                    blueChFad,                                             \
N                    alphaFad,                                              \
N                    blndOrder,                                             \
N                    filterEn)                                              \
N                        (GA_CMN(GA_TRANSFORM,  1, GA_CMC_TRANSFB,          \
N                         GA_FP ((redChProt),  15, GA_MASK1)        |       \
N                         GA_FP ((greenChProt),14, GA_MASK1)        |       \
N                         GA_FP ((blueChProt), 13, GA_MASK1)        |       \
N                         GA_FP ((alphaProt),  12, GA_MASK1)        |       \
N                         GA_FP ((redChFad),   11, GA_MASK1)        |       \
N                         GA_FP ((greenChFad), 10, GA_MASK1)        |       \
N                         GA_FP ((blueChFad),   9, GA_MASK1)        |       \
N                         GA_FP ((alphaFad),    8, GA_MASK1)        |       \
N                         GA_FP ((blndOrder),   3, GA_MASK2)        |       \
N                         GA_FP ((modeSel),     1, GA_MASK1)        |       \
N                         GA_FP ((filterEn),    0, GA_MASK1)))
X#define TSF_TRANSFB(modeSel,                                                                   redChProt,                                                                 greenChProt,                                                               blueChProt,                                                                alphaProt,                                                                 redChFad,                                                                  greenChFad,                                                                blueChFad,                                                                 alphaFad,                                                                  blndOrder,                                                                 filterEn)                                                                      (GA_CMN(GA_TRANSFORM,  1, GA_CMC_TRANSFB,                                   GA_FP ((redChProt),  15, GA_MASK1)        |                                GA_FP ((greenChProt),14, GA_MASK1)        |                                GA_FP ((blueChProt), 13, GA_MASK1)        |                                GA_FP ((alphaProt),  12, GA_MASK1)        |                                GA_FP ((redChFad),   11, GA_MASK1)        |                                GA_FP ((greenChFad), 10, GA_MASK1)        |                                GA_FP ((blueChFad),   9, GA_MASK1)        |                                GA_FP ((alphaFad),    8, GA_MASK1)        |                                GA_FP ((blndOrder),   3, GA_MASK2)        |                                GA_FP ((modeSel),     1, GA_MASK1)        |                                GA_FP ((filterEn),    0, GA_MASK1)))
N
N
N/*=========================================================================
N|                          LOAD REGISTER COMMANDS                           |
N ==========================================================================*/
N/*------------------------------
N|        SOURCE REGISTERS       |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Address Register (SAR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SAR.
N|             The physical 32-bit address within the source address register
N|             is the pointer to the first dot of the source.
N|
N|  Params:    addr - Source Address
N|                    The lower 32 physical address bits that point to the
N|                    first dot of the source.
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_SOURCEADDR(addr) (GA_LOAD(GA_GPR9, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Memory Width Register (SMWR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SMWR.
N|             The source memory width register specifies the memory reserved
N|             for one line within the source image in number of dots.
N|
N|
N|  Params:    width - Source Memory Width
N|                     Memory reserved per line within the source in dots
N|                     (1 up to 4095)
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_SRCWIDTH(width) (GA_LOAD(GA_GPR10, (width)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Alpha Value Register (SAVR)
N|
N|  Descr  :   The Source Alpha Value Register keeps the alpha value for
N|             conversion of the source dots from the 16-bit RGB format to
N|             the 32-bit RGBA format for internal processing.
N|
N|  Params:    srcalpha - source alpha value
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_SRCALPHA(srcalpha) (GA_LOAD(GA_GPR27,                     \
N                                     ((srcalpha) & GA_MASK8)))
X#define TSF_LOAD_SRCALPHA(srcalpha) (GA_LOAD(GA_GPR27,                                                          ((srcalpha) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Fading Factor Register (SFFR)
N|
N|  Descr  :   The Source Fading Factor Register holds the fading factor enumerator
N|             (SFFE) of the fading factor.
N|
N|  Params:    factor  - Source Fading Factor Enumerator
N|                       These bits specify the enumerator of the fading
N|                       factor FFACT.
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_SRCFADEFACT(factor) (GA_LOAD(GA_GPR26,                       \
N                                   ((factor) & GA_MASK8)))
X#define TSF_LOAD_SRCFADEFACT(factor) (GA_LOAD(GA_GPR26,                                                          ((factor) & GA_MASK8)))
N
N/*------------------------------
N|     DESTINATION REGISTERS     |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Address Register (DAR)
N|
N|  Descr  :   The physical 32-bit address within the destination address
N|             register is the pointer to the first dot in the memory region,
N|             where the transformed bitmap will be placed. Depending on
N|             the source color format, which is equal to the destination
N|             color format, this address has to be word- (RGBA32) or
N|             halfword- (RGB16) aligned.
N|
N|  Params:    addr - Destination Address
N|                    The lower 32 physical address bits that point to the
N|                    first dot of the destination.
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_DESTADDR(addr) (GA_LOAD(GA_GPR4, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Memory Width Register (DMWR)
N|
N|  Descr  :   The destination memory width register specifies the memory
N|             reserved for one line within the destination image in number
N|             of dots.
N|             Note that this value can be greater than the number of dots
N|             to be blitted per line.
N|
N|  Params:    width - Destination Memory Width
N|                     Memory reserved per line within the source in dots
N|                     (1 up to 4095)
N|
N|  Limit.:    The content of this register is not taken into account when the
N|             Blitting Engine is configured to read a run-length encoded
N|             image. When the source is run-length encoded the destinations
N|             dimensions have to match the dimensions of the source exactly
N|             (number of dots).
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_DESTWIDTH(width) (GA_LOAD(GA_GPR5, (width)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Image Width Register (DWR)
N|
N|  Descr  :   The destination image width register specifies the number of
N|             dots per line of the destination image. In pixel mode, the
N|             least value of LUT Width Register and Destination Image Width
N|             Register is used to determine the width of the processed area.
N|
N|  Params:    width - Destination Image Width
N|                     Dots per line within the destination
N|                     (from 1 up to 1023).
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_DEST_IMAGEWIDTH(width) (GA_LOAD(GA_GPR6,                 \
N                                         ((width)& GA_MASK10)))
X#define TSF_LOAD_DEST_IMAGEWIDTH(width) (GA_LOAD(GA_GPR6,                                                          ((width)& GA_MASK10)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Image Line Count Register (DLCR)
N|
N|  Descr  :   The destination line count register specifies the number of
N|             lines of the destination image. The least value of LUT Line
N|             Count Register and Destination Image Line Count Register is
N|             used to determine the height of the processed area.
N|
N|  Params:    lineCnt - Number of destination lines to be processed
N|                       (from 1 up to 1023).
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_DESTLINECNT(lineCnt) (GA_LOAD(GA_GPR7,                   \
N                                       ((lineCnt) & GA_MASK10)))
X#define TSF_LOAD_DESTLINECNT(lineCnt) (GA_LOAD(GA_GPR7,                                                          ((lineCnt) & GA_MASK10)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Alpha Value Register (DAVR)
N|
N|  Descr  :   The Destination Alpha Value Register keeps the alpha value
N|             used during conversion of the destination dots from the
N|             16-bit RGB format to the 32-bit RGBA format.
N|
N|  Params:    dstalpha - destination alpha value
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_DESTALPHA(dstalpha) (GA_LOAD(GA_GPR28,                    \
N                                      ((dstalpha) & GA_MASK8)))
X#define TSF_LOAD_DESTALPHA(dstalpha) (GA_LOAD(GA_GPR28,                                                          ((dstalpha) & GA_MASK8)))
N
N
N/*------------------------------
N|         L U T REGISTERS       |
N -------------------------------*/
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load LUT Address Register (LAR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load LAR.
N|             The physical 32-bit address within the look-up table address
N|             register is the pointer to the first look-up table entry in
N|             memory. This address has to be word-aligned.
N|
N|  Params:    addr - LUT Address
N|                    The lower 32 physical address bits that point to the
N|                    first entry of the LUT.
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_LUTADDR(addr) (GA_LOAD(GA_GPR13, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load LUT Width Register (LWR)
N|
N|  Descr  :   The LUT width register specifies the number of entries per line
N|             within the look-up table. In pixel mode, the least value of LUT
N|             width register and destination image width register is used to
N|             determine the width of the processed area. In color channel
N|             mode, this width has to be three times the destination image
N|             width for RGB16 color format and four times the destination
N|             image width for RGBA32 color format.
N|
N|
N|  Params:    width - LUT Width
N|                     Entries per line within the look-up table
N|                     (from 1 up to 4095).
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_LUTWIDTH(width) (GA_LOAD(GA_GPR14,                        \
N                                  ((width)& GA_MASK12)))
X#define TSF_LOAD_LUTWIDTH(width) (GA_LOAD(GA_GPR14,                                                          ((width)& GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load LUT Line Count Register (LLCR)
N|
N|  Descr  :   The source line count register specifies the number of lines
N|             of the look-up table. The least value of LUT Line Count
N|             Register and Destination Image Line Count Register is used to
N|             determine the height of the processed area.
N|
N|
N|  Params:    lineCnt - LUT Line Count
N|                       Number of source lines to be transformed
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_LUTLINECNT(lineCnt) (GA_LOAD(GA_GPR15,                   \
N                                      ((lineCnt) & GA_MASK10)))
X#define TSF_LOAD_LUTLINECNT(lineCnt) (GA_LOAD(GA_GPR15,                                                         ((lineCnt) & GA_MASK10)))
N
N
N
N/*------------------------------
N|        COLOR REGISTERS        |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Color Format Register (CFR)
N|
N|  Descr  :   This register specifies the color format of source
N|             and destination.
N|
N|  Params:    srcformat  - Source color format
N|                       	 Use parameters:
N|                       	 GA_RGB16    - 16-bit RGB
N|                       	 GA_RGBA32   - 32-bit RGBA
N|  				 dstformat   - destination color format
N|                       	 Use parameters:
N|                       	 GA_RGB16    - 16-bit RGB
N|                       	 GA_RGBA32   - 32-bit RGBA
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_COLORFMT(dstformat, srcformat) (GA_LOAD(GA_GPR16,        \
N                                   (GA_FP((dstformat), 1, GA_MASK1)   |	  \
N                                    GA_FP((srcformat), 0, GA_MASK1))))
X#define TSF_LOAD_COLORFMT(dstformat, srcformat) (GA_LOAD(GA_GPR16,                                           (GA_FP((dstformat), 1, GA_MASK1)   |	                                      GA_FP((srcformat), 0, GA_MASK1))))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Predefined Color Register (PCR)
N|
N|  Descr  :   The Predefined Color Register gives the color of the
N|             destination dot, if the LUT indexes position 0xFFFF for the x
N|             coordinate and 0xFFFF for the y coordinate.
N|
N|             When using 32-bit RGBA color format, the complete 32 bit of
N|             the register are assigned as color value to the corresponding
N|             pixel. When using 16-bit RGB color format, only the bits [15:0]
N|             are used as predefined color. The bits [31:16] are not
N|             regarded.
N|
N|  Params:    colVal - Predefined Color
N|                      This color is used for LUT entries which point to
N|                      (0xFFFF/0xFFFF).
N|
N -------------------------------------------------------------------------*/
N#define TSF_LOAD_PRECOLOR(colVal) (GA_LOAD(GA_GPR17, (colVal)))
N
N/*======================================
N                Enums
N=======================================*/
N/* Transformation mode */
Ntypedef enum tag_transf_Mode_e
N{
N    TSF_MODE_PIXEL = 0x0u,          /* Pixel Mode Operation */
N    TSF_MODE_COLOR = 0x1u           /* Color Mode Operation */
N} transf_Mode_e;
N
N/*======================================
N              Structures
N=======================================*/
N/* LUT Configuration Strucuture */
Ntypedef struct tag_transf_Lut_st
N{
N    uint32_t u32Addr;               /* Look-up table address */
N    uint16_t u16Width;              /* Look-up table width  (1 to 4095) */
N    uint16_t u16LineCnt;            /* Look-up table line count(1 to 1023) */
N} transf_Lut_st;
N
N/* Memory Configuration structure */
Ntypedef struct tag_transf_mem_st
N{
N    /* Source Mem. Params */
N    uint16_t      u16SrcWidth;      /* Source Memory Width (Dots Per Line) */
N    uint32_t      u32SrcAddr;       /* Source Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Destination Mem. Params */
N    uint16_t      u16DstWidth;      /* Dest. Memory Width (Dots Per Line) */
N    uint32_t      u32DstAddr;       /* Dest. Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Dest. Image Area Size */
N    uint16_t      u16DstImgWidth;   /* Dot Number per line to be blitted */
N    uint16_t      u16LineCnt;       /* Line Number to be blitted */
N} transf_mem_st;
N
N/* Transform Config Struct */
Ntypedef struct tag_transf_Prm_st
N{
N    transf_Mode_e   eTsfMode;       /* Transform. Mode (Pixel-/Color-Mode) */
N    ga_en_e         eFilterEn;      /* Enable Filtering */
N    ga_colFmt_e     eSrcColFmt;     /* Source Color Format selection */
N    ga_colFmt_e     eDstColFmt;     /* Destination Color Format selection */
N    uint32_t        u32Color;       /* Predefined Color (used for
N                                       LUT 0xFFFF entries) */
N    uint8_t        u8SrcAlphaVal;   /* Source Alpha value */
N    uint8_t        u8DstAlphaVal;   /* Destination Alpha value */
N} transf_Prm_st;
N
N/* Transform Blend Config Struct */
Ntypedef struct tag_transf_PrmBlend_st
N{
N    transf_Mode_e   eTsfMode;       /* Transform. Mode (Pixel-/Color-Mode) */
N    ga_en_e         eFilterEn;      /* Enable Filtering */
N    ga_en_e         eDstRedProt;    /* Destination red color protection */
N    ga_en_e         eDstGreenProt;  /* Destination green color protection */
N    ga_en_e         eDstBlueProt;   /* Destination blue color protection */
N    ga_en_e         eDstAlphaProt;  /* Destination alpha protection */
N    ga_en_e         eSrcRedFad;     /* Source red color protection */
N    ga_en_e         eSrcGreenFad;   /* Source green color protection */
N    ga_en_e         eSrcBlueFad;    /* Source blue color protection */
N    ga_en_e         eSrcAlphaFad;   /* Source alpha protection */
N    ga_blendOrd_e   eBldOrd;        /* Blend order */
N    ga_colFmt_e     eSrcColFmt;     /* Source Color Format selection */
N    ga_colFmt_e     eDstColFmt;     /* Destination Color Format selection */
N    uint32_t        u32Color;       /* Predefined Color (used for
N                                       LUT 0xFFFF entries) */
N    uint8_t        u8FadingFctr;    /* Fading facror */
N    uint8_t        u8SrcAlphaVal;   /* Source Alpha value */
N    uint8_t        u8DstAlphaVal;   /* Destination Alpha value */
N} transf_PrmBlend_st;
N
N
N/*======================================
N      Exported Function Prototypes
N=======================================*/
N
N/****************************************************************************
N *
N * Function:      vTransf_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                        uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N/*-------------------------------------------------------------------------
N|
N|                      B A S I C      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vTransf_SetMemSrc
N *
N * Purpose:       Sets Transf source parameters in Command List
N *
N * Inputs:        u32Addr    - Source Memory Address
N *                             (First Dot of the source)
N *
N *                u32Width   - Source Memory Width
N *                             (Memory reserved per line within the source in
N *                              dots: 1 up to 4095)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_SetMemSrc(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_SetDstImgSize
N *
N * Purpose:       Sets in the Command List the size of the destination image
N *                (number of dots per line and number of image lines)
N *
N * Inputs:        u32Width   - Destination Image Width in Dot Number
N *                             (1 up to 4095)
N *                u32Lines   - Destination Image Line Number
N *                             (1 up to 1023)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_SetDstImgSize(uint32_t u32Width, uint32_t u32Lines,
N                           ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_SetMemDest
N *
N * Purpose:       Sets the destination memory parameters in the Command List
N *
N * Inputs:        u32Addr    - Destination Memory Address
N *                             (First Dot of the destination)
N *
N *                u32Width   - Destination Memory Width
N *                             (Memory reserved per line within the destinatio
N *                              in dots: 1 up to 4095)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_SetMemDest(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_ConfigLUT
N *
N * Purpose:       Configures the transformation look-up table parameters
N *                  - Memory location,
N *                  - LUT Width,
N *                  - LUT line count
N *
N * Inputs:        stCfg      - pointer to LUT configuration parameters
N *                             (for more details see the struct. desc.s)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_ConfigLUT(transf_Lut_st* pstCfg, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_SetColorFmt
N *
N * Purpose:       Sets the color format of the both source and destination.
N *
N * Inputs:        eSrcColFormat - Source Color Format Selection
N *                             		(16-bit RGB/ 32-bit RGBA)
N * 								eDstColFormat - Destination Color Format Selection
N *                             	  (16-bit RGB/ 32-bit RGBA)
N *
N *                pstCmdList    - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please note that Transformation Engine cannot convert color
N *                format, therefore formats for both (src. and dst.) must be
N *                the same.
N *
N ***************************************************************************/
Nvoid vTransf_SetColorFmt(ga_colFmt_e eSrcColFormat, ga_colFmt_e eDstColFormat, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_SetPredefColor
N *
N * Purpose:       Sets the predefined color which is used for LUT entries
N *                which point to (0xFFFF/0xFFFF).
N *
N * Inputs:        u32Color   - Color Value. Must be set in the same format as
N *                             the format specified by Transf_SetColorFmt().
N *                             This means that in RGBA format all 32-bits will
N *                             be evaluated and in case of RGB only 16-bits.
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_SetPredefColor(uint32_t u32Color, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_SetTransfCmd
N *
N * Purpose:       Inserts the transformation command in the Command List
N *
N * Inputs:        eOpMode    - Mode Control selects between Pixel Mode and
N *                             Channel Control Mode.
N *
N *                eFilterEn  - Filter Control (Enables/Disables the filter)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_SetTransfCmd(transf_Mode_e eOpMode, ga_en_e eFilterEn,
N                         ga_list_st* pstCmdList);
N
N/*-------------------------------------------------------------------------
N|
N|            T R A N S F O R M A T I O N     O P E R A T I O N
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vTransf_ConfigTransfOp
N *
N * Purpose:       Inserts in the Command List the transformation-command and
N *                commands for loading of all parameters required for the
N *                transformation command execution.
N *
N * Inputs:        stMem      - pointer to memory configuration parameters
N *
N *                tLutCfg    - pointer to look-up table configuration parameters
N *
N *                tColCfg    - pointer to color Config Parameters
N *
N *                pstCmdList - Pointer to the Command List
N *
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_ConfigTransfOp(transf_mem_st* pstMem, transf_Lut_st* pstLutCfg,
N                            transf_Prm_st* pstTsfPrm, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vTransf_ConfigTransfBlendOp
N *
N * Purpose:       Inserts in the Command List the transformation-command and
N *                commands for loading of all parameters required for the
N *                transformation blen command execution.
N *
N * Inputs:        stMem      - pointer to memory configuration parameters
N *
N *                tLutCfg    - pointer to look-up table configuration parameters
N *
N *                tColCfg    - pointer to color Config Parameters
N *
N *                pstCmdList - pointer to the Command List
N *
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vTransf_ConfigTransfBlendOp(transf_mem_st* pstMem, transf_Lut_st* pstLutCfg,
N                                 transf_PrmBlend_st* pstTsfPrm, ga_list_st* pstCmdList);
N
N
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N/****************************************************************************/
N
N#endif /* TRANSF_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: transf.h
N**  $Revision: 1.15 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** |
N** | CONS.  :
N** |
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 29 "..\..\..\..\mw\inc\gfunctions.h" 2
N#include "draw.h"
L 1 "..\..\..\..\lldd\inc\draw.h" 1
N/****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronic Europe GmbH,
N*   European LSI Design and Engineering Centre (ELDEC)
N*****************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver (Drawing Engine)
N*****************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : GA (Drawing Engine)
N*   LIBRARIES   : None
N*****************************************************************************
N*   VERSION     : $Revision: 1.15 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N****************************************************************************/
N#ifndef DRAW_H
N#define DRAW_H
N
N/**********************************************
N*             Include Files                   *
N**********************************************/
N
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S
S#endif/**********************************************
S*                Defs                         *
N**********************************************/
N#define LLDD_GA_DRAW_H_REVISION     "$Revision: 1.15 $"
N#define LLDD_GA_DRAW_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*--------------------------------------------------------------------------
N|       ------------------------------------------------------------        |
N|      | >>>>>>         DRAWING ENGINE COMMAND INDEX         <<<<<< |       |
N|       ------------------------------------------------------------        |
N|---------------------------------------------------------------------------|
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                                                                           |
N|                                                                           |
N|                      ------------------------------                       |
N|                     |      OPERATION COMMANDS      |                      |
N|                      ------------------------------                       |
N|                                                                           |
N| - Commands:                                                               |
N|   1. DRW_LINERGBA32       - Draw Line RGBA32 Command                      |
N|   2. DRW_LINERGB16        - Draw Line RGB16 Command                       |
N|   3. DRW_TRIANGLE_RGBA32  - Draw Triangle RGBA32 Command                  |
N|   4. DRW_TRIANGLE_RGB16   - Draw Triangle RGB16 Command                   |
N|                                                                           |
N|                                                                           |
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                                                                           |
N|                                                                           |
N|                    ----------------------------------                     |
N|                   |      LOAD REGISTER COMMANDS      |                    |
N|                    ----------------------------------                     |
N|                                                                           |
N| - Destination Regs:                                                       |
N|   1. DRW_LOAD_DESTADDR    - Load Destination Address Reg.         (DEDAR) |
N|   2. DRW_LOAD_DESTDIM     - Load Destination Memory Dim. Reg.     (DEMWR) |
N|                                                                           |
N| - Color Regs:                                                             |
N|   3. DRW_LOAD_RGBA32      - Load RGBA32 Color Register        (DERGBA32R) |
N|   4. DRW_LOAD_RGB16       - Load RGB16 Color Register            (DERGBR) |
N|   5. DRW_LOAD_RGBA32BGRND - Load RGBA32 Backgr. Color Register  (DEBKG32) |
N|   6. DRW_LOAD_RGBA16BGRND - Load RGB16 Backgr. Color Register   (DEBKG16) |
N|                                                                           |
N| - Line Regs:                                                              |
N|   7. DRW_LOAD_LINESTART   - Load Line Start Register              (DELSR) |
N|   8. DRW_LOAD_LINEEND     - Load Line End Register                (DELER) |
N|   9. DRW_LOAD_THICKNESS   - Load Line Thickness Register          (DELTR) |
N|                                                                           |
N| - Triangle Regs:                                                          |
N|  10. DRW_LOAD_TRNGLE1     - Load Drw.Eng. Triangle Point 1 Reg.  (DETP1R) |
N|  11. DRW_LOAD_TRNGLE2     - Load Drw.Eng. Triangle Point 2 Reg.  (DETP2R) |
N|  12. DRW_LOAD_TRNGLE3     - Load Drw.Eng. Triangle Point 3 Reg.  (DETP3R) |
N|                                                                           |
N| - Clipping Window:                                                        |
N|  13. DRW_LOAD_CLIPWNDSTART - Load Clipp.Wnd. Start Register      (DECWSR) |
N|  14. DRW_LOAD_CLIPWNDEND   - Load Clipp.Wnd. Upper-Left Corner   (DECWER) |
N|                                                                           |
N --------------------------------------------------------------------------*/
N/*=========================================================================
N|                            OPERATION COMMANDS                             |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Draw Line RGBA32 Command
N|
N|  Descr  :   The Draw Line RGBA32 command is used to trigger the Drawing
N|             Engine to draw a line in the RGBA32 color space, using the
N|             coordinates already programmed in the Line Start Register
N|             (DELSR) and Line End Register (DELER). Additionally the color
N|             of the line will be the color specified in the RGBA32 Color
N|             Register (DERGBAR). The command code is detailed in the
N|             following table.
N|
N|  Params:    startPtStyle - Start point line caps style
N|                            Use: DRW_BUTTEND      - Butt end NOT anti-aliased
N|                                 DRW_BUTTEND_AA   - Butt end anti-aliased
N|                                 DRW_CIRCULAR     - Circular line caps
N|
N|             endPtStyle - End point line caps style
N|                          Use: DRW_BUTTEND        - Butt end NOT anti-aliased
N|                               DRW_BUTTEND_AA     - Butt end anti-aliased
N|                               DRW_CIRCULAR       - Circular line caps
N|
N|             blendMode   - Blending mode
N|                           Use: DRW_BLEND_OPAQUE  - Opaque blending
N|                                DRW_BLEND_TRANSP  - Transparent blending
N|                                DRW_OVERWRITING   - Overwriting
N|                                DRW_SATURATION    - Saturation
N|
N|             clippWndEn - Clipping Window Option
N|                          Use: GA_EN              - Enable Option
N|                               GA_DIS             - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define DRW_LINERGBA32(startPtStyle,                                   \
N                       endPtStyle,                                     \
N                       blendMode,                                      \
N                       clippWndEn)                                     \
N                       (GA_CMN(GA_DRAWING,    1, GA_CMC_DE_DLRGBA32,   \
N                        GA_FP((startPtStyle), 8, GA_MASK4)   |         \
N                        GA_FP((endPtStyle),   4, GA_MASK4)   |         \
N                        GA_FP((blendMode),    1, GA_MASK3)   |         \
N                        GA_FP((clippWndEn),   0, GA_MASK1)))
X#define DRW_LINERGBA32(startPtStyle,                                                          endPtStyle,                                                            blendMode,                                                             clippWndEn)                                                            (GA_CMN(GA_DRAWING,    1, GA_CMC_DE_DLRGBA32,                           GA_FP((startPtStyle), 8, GA_MASK4)   |                                 GA_FP((endPtStyle),   4, GA_MASK4)   |                                 GA_FP((blendMode),    1, GA_MASK3)   |                                 GA_FP((clippWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Draw Line RGB16 Command
N|
N|  Descr  :   The Draw Line command is used to trigger the Drawing Engine to
N|             draw a line in the RGB16 color space, using the coordinates
N|             already programmed in the Line Start Register (DELSR) and Line
N|             End Register(DELER). Additionally the color of the line will be
N|             the color specified in the RGB16 Color Register (DERGBR).
N|             The command code is detailed in the following table.
N|
N|  Params:    startPtStyle - Start point line caps style
N|                            Use: DRW_BUTTEND      - Butt end NOT anti-aliased
N|                                 DRW_BUTTEND_AA   - Butt end anti-aliased
N|                                 DRW_CIRCULAR     - Circular line caps
N|
N|             endPtStyle - End point line caps style
N|                          Use: DRW_BUTTEND        - Butt end NOT anti-aliased
N|                               DRW_BUTTEND_AA     - Butt end anti-aliased
N|                               DRW_CIRCULAR       - Circular line caps
N|
N|             blendMode   - Blending mode
N|                           Use: DRW_BLEND_OPAQUE  - Opaque blending
N|                                DRW_BLEND_TRANSP  - Transparent blending
N|                                DRW_OVERWRITING   - Overwriting
N|
N|             clippWndEn - Clipping Window Option
N|                          Use: GA_EN              - Enable Option
N|                               GA_DIS             - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define DRW_LINERGB16(startPtStyle,                                   \
N                      endPtStyle,                                     \
N                      blendMode,                                      \
N                      clippWndEn)                                     \
N                      (GA_CMN(GA_DRAWING,    1, GA_CMC_DE_DLRGB16,    \
N                       GA_FP((startPtStyle), 8, GA_MASK4)   |         \
N                       GA_FP((endPtStyle),   4, GA_MASK4)   |         \
N                       GA_FP((blendMode),    1, GA_MASK3)   |         \
N                       GA_FP((clippWndEn),   0, GA_MASK1)))
X#define DRW_LINERGB16(startPtStyle,                                                         endPtStyle,                                                           blendMode,                                                            clippWndEn)                                                           (GA_CMN(GA_DRAWING,    1, GA_CMC_DE_DLRGB16,                           GA_FP((startPtStyle), 8, GA_MASK4)   |                                GA_FP((endPtStyle),   4, GA_MASK4)   |                                GA_FP((blendMode),    1, GA_MASK3)   |                                GA_FP((clippWndEn),   0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Draw Triangle RGBA32 Command
N|
N|  Descr  :   The Draw Triangle command is used to trigger the Drawing Engine
N|             to draw a triangle. The triangle will have the vertices
N|             specified in the Triangle Point 1, 2, and 3 Registers (DEPP1,
N|             DEPP2, and DEPP3), and the color specified in the RGBA32 Color
N|             Register (DERGBAR).
N|
N|  Params:    edgAntiEn1,2,3 - Edge 1,2 and 3 antialiasing
N|                              Use: GA_EN            - Anti-aliased is on
N|                                   GA_DIS           - Anti-aliased is off
N|
N|             blendMode      - Blending mode
N|                              Use: DRW_BLEND_OPAQUE - Opaque blending
N|                                   DRW_BLEND_TRANSP - Transparent blending
N|                                   DRW_OVERWRITING  - Overwriting
N|                                   DRW_SATURATION   - Saturation
N|
N|             clippWndEn     - Clipping Window Option
N|                              Use: GA_EN            - Enable Option
N|                                   GA_DIS           - Disable Option
N|
N|
N -------------------------------------------------------------------------*/
N#define DRW_TRIANGLE_RGBA32(edgAntiEn3,                                   \
N                            edgAntiEn2,                                   \
N                            edgAntiEn1,                                   \
N                            blendMode,                                    \
N                            clippWndEn)                                   \
N                            (GA_CMN(GA_DRAWING,  1, GA_CMC_DE_DTRGBA32,   \
N                             GA_FP((edgAntiEn3), 6, GA_MASK1)   |         \
N                             GA_FP((edgAntiEn2), 5, GA_MASK1)   |         \
N                             GA_FP((edgAntiEn1), 4, GA_MASK1)   |         \
N                             GA_FP((blendMode),  1, GA_MASK3)   |         \
N                             GA_FP((clippWndEn), 0, GA_MASK1)))
X#define DRW_TRIANGLE_RGBA32(edgAntiEn3,                                                               edgAntiEn2,                                                               edgAntiEn1,                                                               blendMode,                                                                clippWndEn)                                                               (GA_CMN(GA_DRAWING,  1, GA_CMC_DE_DTRGBA32,                                GA_FP((edgAntiEn3), 6, GA_MASK1)   |                                      GA_FP((edgAntiEn2), 5, GA_MASK1)   |                                      GA_FP((edgAntiEn1), 4, GA_MASK1)   |                                      GA_FP((blendMode),  1, GA_MASK3)   |                                      GA_FP((clippWndEn), 0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Draw Triangle RGB16 Command
N|
N|  Descr  :   The Draw Triangle command is used to trigger the Drawing Engine
N|             to draw a triangle. The triangle will have the vertices
N|             specified in the Triangle Point 1, 2, and 3 Registers (DEPP1,
N|             DEPP2, and DEPP3), and the color specified in the RGB16 Color
N|             Register (DERGBR), according to the color format in use.
N|
N|  Params:    edgAntiEn1,2,3 - Edge 1,2 and 3 anti-aliasing
N|                              Use: GA_EN            - Anti-aliasing is ON
N|                                   GA_DIS           - Anti-aliasing is OFF
N|
N|             blendMode      - Blending mode
N|                              Use: DRW_BLEND_OPAQUE - Opaque blending
N|                                   DRW_BLEND_TRANSP - Transparent blending
N|                                   DRW_OVERWRITING  - Overwriting
N|
N|             clippWndEn     - Clipping Window Option
N|                              Use: GA_EN            - Enable Option
N|                                   GA_DIS           - Disable Option
N|
N -------------------------------------------------------------------------*/
N#define DRW_TRIANGLE_RGB16(edgAntiEn3,                                  \
N                           edgAntiEn2,                                  \
N                           edgAntiEn1,                                  \
N                           blendMode,                                   \
N                           clippWndEn)                                  \
N                           (GA_CMN(GA_DRAWING,  1, GA_CMC_DE_DTRGB16,   \
N                            GA_FP((edgAntiEn3), 6, GA_MASK1)   |        \
N                            GA_FP((edgAntiEn2), 5, GA_MASK1)   |        \
N                            GA_FP((edgAntiEn1), 4, GA_MASK1)   |        \
N                            GA_FP((blendMode),  1, GA_MASK3)   |        \
N                            GA_FP((clippWndEn), 0, GA_MASK1)))
X#define DRW_TRIANGLE_RGB16(edgAntiEn3,                                                             edgAntiEn2,                                                             edgAntiEn1,                                                             blendMode,                                                              clippWndEn)                                                             (GA_CMN(GA_DRAWING,  1, GA_CMC_DE_DTRGB16,                               GA_FP((edgAntiEn3), 6, GA_MASK1)   |                                    GA_FP((edgAntiEn2), 5, GA_MASK1)   |                                    GA_FP((edgAntiEn1), 4, GA_MASK1)   |                                    GA_FP((blendMode),  1, GA_MASK3)   |                                    GA_FP((clippWndEn), 0, GA_MASK1)))
N
N
N/*=========================================================================
N|                          LOAD REGISTER COMMANDS                           |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Clipping Window Start Register (DECWSR)
N|
N|  Descr  :   This register contains X and Y coordinates of the start
N|             (upper left corner) of the clipping window from the origin of
N|             the destination area. The offset is programmed in pixels
N|             coordinates starting from (0,0), no subpixel resolution is
N|             possible in the positioning of the clipping window.
N|
N|  Params:    x - X starting coordinate of the clipping window
N|
N|             y - Y starting coordinate of the clipping window
N|
N|  Limit.:    The contents of this register will be used only if the clipping
N|             window option will be selected in one of the Draw Line or Draw
N|             Triangle commands.
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_CLIPWNDSTART(x,y) (GA_LOAD(GA_GPR1,                \
N                                    GA_FP((y), 16, GA_MASK12)  |    \
N                                    GA_FP((x),  0, GA_MASK12)))
X#define DRW_LOAD_CLIPWNDSTART(x,y) (GA_LOAD(GA_GPR1,                                                    GA_FP((y), 16, GA_MASK12)  |                                        GA_FP((x),  0, GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Clipping Window End Register (DECWER)
N|
N|  Descr  :   The end coordinates (lower right corner) of the clipping window
N|             in pixels, will be programmed into this register. The user has
N|             to take care that the clipping window does not exceed the
N|             destination area where the primitives will be drawn, otherwise
N|             unexpected results may occur.
N|
N|  Params:    x - X ending coordinate of the clipping window
N|
N|             y - Y ending coordinate of the clipping window
N|
N|  Limit.:    The contents of this register will be used only if the clipping
N|             window option will be selected in one of the Draw Line or Draw
N|             Triangle commands.
N|
N|             The maximum allowed values for CYEND and CXEND are (MHEIGHT-1)
N|             and (MWIDTH-1).
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_CLIPWNDEND(x,y) (GA_LOAD(GA_GPR2,                 \
N                                  GA_FP((y), 16, GA_MASK12)  |     \
N                                  GA_FP((x),  0, GA_MASK12)))
X#define DRW_LOAD_CLIPWNDEND(x,y) (GA_LOAD(GA_GPR2,                                                   GA_FP((y), 16, GA_MASK12)  |                                       GA_FP((x),  0, GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Destination Address Register (DEDAR)
N|
N|  Descr  :   This register contains the lower 32 bits of the physical
N|             address of the start location of the destination area, on which
N|             primitives will be drawn. The address should point to the start
N|             of the destination area (e.g. start of frame buffer), since the
N|             offsets will be calculated inside the Drawing Engine according
N|             to start and end coordinates of the primitives.
N|
N|  Params:    addr - Lower 32 bits (address lines [31:0]) of the physical
N|                    address of the starting location of the destination
N|                    memory area.
N|
N|  Limit.:    The address programmed, must be word aligned if an RGBA32 color
N|             space is used,half-word aligned if an RGB16 color space is used.
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_DESTADDR(addr) (GA_LOAD(GA_GPR4,(addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Destination Memory Width and Height
N|             Register (DEMWR)
N|
N|  Descr  :   This register contains the width, in pixels, of the memory area
N|             used as frame buffer or where primitives will be stored.
N|             The value contained in this register is used allow the Drawing
N|             Engine to calculate the correct addresses for read or writes,
N|             given the X,Y offsets of the current calculations.
N|
N|
N|  Params:    width  - Width of display area, in pixels, any value between 16
N|                      and 4095 are allowed.
N|
N|             height - Height of display area, in pixels, any value between
N|                      16 and 4095 are allowed.
N|
N|
N|  Limit.:    Image width can be specified only as an integer number of
N|             pixels, no sub-pixel resolution is available in this register.
N|
N|             If a primitive will be programmed, which partially falls
N|             outside the display area, a hard-clipping of this part will be
N|             performed.
N|
N|             !!! Failing to program this register will lead to malfunction
N|             of the Drawing Engine.!!!
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_DESTDIM(width, height) (GA_LOAD(GA_GPR5,                   \
N                                         GA_FP((height), 16, GA_MASK12)  |  \
N                                         GA_FP((width),   0, GA_MASK12)))
X#define DRW_LOAD_DESTDIM(width, height) (GA_LOAD(GA_GPR5,                                                            GA_FP((height), 16, GA_MASK12)  |                                           GA_FP((width),   0, GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Line Start Register (DELSR)
N|
N|  Descr  :   This register contains the START coordinates of the line to be
N|             drawn. They are expressed as an integer coordinate followed by
N|             a fractional part. The fractional part is not decimal, rather
N|             expressed in 1/16 of a pixelas (see the Capricorn datasheet).
N|
N|
N|  Params:    x - The X coordinate of the start position of the line
N|
N|             y - The Y coordinate of the start position of the line
N|
N|
N|  Limit.:    The integer and sub-pixel position should not be disregarded
N|             (for more details please see the Capricorn M datasheet)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_LINESTART(x,y) (GA_LOAD(GA_GPR6,                 \
N                                 GA_FP ((y), 16, GA_MASK16)   |   \
N                                 GA_FP ((x),  0, GA_MASK16)))
X#define DRW_LOAD_LINESTART(x,y) (GA_LOAD(GA_GPR6,                                                  GA_FP ((y), 16, GA_MASK16)   |                                    GA_FP ((x),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Line End Register (DELER)
N|
N|  Descr  :   This register contains the END coordinates of the line to be
N|             drawn. They are expressed as an integer coordinate followed by
N|             a fractional part. The fractional part is not decimal, rather
N|             expressed in 1/16 of a pixelas (see the Capricorn datasheet).
N|
N|
N|  Params:    x - The X coordinate of the start position of the line
N|
N|             y - The Y coordinate of the start position of the line
N|
N|
N|  Limit.:    The integer and sub-pixel position should not be disregarded
N|             (for more details please see the Capricorn M datasheet)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_LINEEND(x,y) (GA_LOAD(GA_GPR7,                 \
N                               GA_FP((y), 16, GA_MASK16)   |    \
N                               GA_FP((x),  0, GA_MASK16)))
X#define DRW_LOAD_LINEEND(x,y) (GA_LOAD(GA_GPR7,                                                GA_FP((y), 16, GA_MASK16)   |                                   GA_FP((x),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Triangle Point 1 Register (DEPP1R)
N|
N|  Descr  :   This register holds the X and Y coordinates of point 1 of a
N|             triangle. The coordinates are expressed by an integer part and
N|             a fractional part. The fractional part allows positioning the
N|             coordinates with 1/16 of pixel precision.
N|
N|
N|  Params:    x - The X coordinate of point 1
N|
N|             y - The Y coordinate of point 1
N|
N|
N|  Limit.:    The integer and sub-pixel position should not be disregarded
N|             (for more details please see the Capricorn M datasheet)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_TRNGLE1(x,y) (GA_LOAD(GA_GPR6,                  \
N                               GA_FP ((y), 16, GA_MASK16)   |    \
N                               GA_FP ((x),  0, GA_MASK16)))
X#define DRW_LOAD_TRNGLE1(x,y) (GA_LOAD(GA_GPR6,                                                 GA_FP ((y), 16, GA_MASK16)   |                                   GA_FP ((x),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Triangle Point 2 Register (DEPP2R)
N|
N|  Descr  :   This register holds the X and Y coordinates of point 2 of a
N|             triangle. The coordinates are expressed by an integer part and
N|             a fractional part. The fractional part allows positioning the
N|             coordinates with 1/16 of pixel precision.
N|
N|
N|  Params:    x - The X coordinate of point 2
N|
N|             y - The Y coordinate of point 2
N|
N|
N|  Limit.:    The integer and sub-pixel position should not be disregarded
N|             (for more details please see the Capricorn M datasheet)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_TRNGLE2(x,y) (GA_LOAD(GA_GPR7,                 \
N                               GA_FP((y), 16, GA_MASK16)   |    \
N                               GA_FP((x),  0, GA_MASK16)))
X#define DRW_LOAD_TRNGLE2(x,y) (GA_LOAD(GA_GPR7,                                                GA_FP((y), 16, GA_MASK16)   |                                   GA_FP((x),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Triangle Point 3 Register (DEPP3R)
N|
N|  Descr  :   This register holds the X and Y coordinates of point 3 of a
N|             triangle. The coordinates are expressed by an integer part and
N|             a fractional part. The fractional part allows positioning the
N|             coordinates with 1/16 of pixel precision.
N|
N|
N|  Params:    x - The X coordinate of point 3
N|
N|             y - The Y coordinate of point 3
N|
N|
N|  Limit.:    The integer and sub-pixel position should not be disregarded
N|             (for more details please see the Capricorn M datasheet)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_TRNGLE3(x,y) (GA_LOAD(GA_GPR8,                  \
N                               GA_FP ((y), 16, GA_MASK16)   |    \
N                               GA_FP ((x),  0, GA_MASK16)))
X#define DRW_LOAD_TRNGLE3(x,y) (GA_LOAD(GA_GPR8,                                                 GA_FP ((y), 16, GA_MASK16)   |                                   GA_FP ((x),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine Line Thickness Register (DELTR)
N|
N|  Descr  :   This register contains the thickness of the line to be drawn.
N|             The thickness is expressed by an integer value followed by a
N|             four-bit fractional part that allows adjusting line thickness
N|             with a precision of 1/16 of a pixel. Sub-pixel thicknesses are
N|             possible by programming the integer value to zero.
N|
N|
N|  Params:    val - line thickness value
N|
N|  Limit.:    Note that programming a value of zero in both intg and sub
N|             fields is not possible if the register has to be used.
N|
N|             The apparent thickness depends on the filter coefficients
N|             as well.
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_THICKNESS(val) (GA_LOAD(GA_GPR9,                \
N                                 GA_FP((val), 0, GA_MASK9)))
X#define DRW_LOAD_THICKNESS(val) (GA_LOAD(GA_GPR9,                                                 GA_FP((val), 0, GA_MASK9)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine RGBA32 Color Register (DERGBAR)
N|
N|  Descr  :   When using the RGBA32 color space, the color used to draw
N|             primitives has to be programmed into this register.
N|
N|
N|  Params:    color  - Color Component: color[31-24] - Red
N|                                       color[23-16] - Green
N|                                       color[15-8]  - Blue
N|                                       color[7-0]   - Alpha
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_RGBA32(color) (GA_LOAD(GA_GPR10,                 \
N                                GA_FP((color), 0, GA_MASK32)))
X#define DRW_LOAD_RGBA32(color) (GA_LOAD(GA_GPR10,                                                 GA_FP((color), 0, GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine RGB16 Color Register (DERGBR)
N|
N|  Descr  :   When using the RGB16 color space, the color used to draw
N|             primitives has to be programmed into this register.
N|             This register provides also an AVAL field, to set the alpha
N|             value of the primitive. The RGB16 mode does not support alpha,
N|             but this value will be used to set the transparency value of a
N|             primitive.
N|
N|
N|  Params:    color  - Color Component RGB565: color[15-11] - Red
N|                                              color[10-5]  - Green
N|                                              color[4-0]   - Blue
N|
N|             alpha  - Alpha value for RGB16 format alpha[7-0].
N|                      Although RGB16 doesn’t directly support alpha, this
N|                      value will be used as transparency value if the
N|                      transparency blending method is used.
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_RGB16(color,alpha) (GA_LOAD(GA_GPR10,                 \
N                                     GA_FP ((alpha), 16, GA_MASK8)  |  \
N                                     GA_FP ((color),  0, GA_MASK16)))
X#define DRW_LOAD_RGB16(color,alpha) (GA_LOAD(GA_GPR10,                                                      GA_FP ((alpha), 16, GA_MASK8)  |                                       GA_FP ((color),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine RGBA32 Background Color Register (DEBKG32)
N|
N|  Descr  :   When performing operations in non-blending mode, the color of
N|             the background has to be programmed into this register.
N|             The Drawing Engine, in this case, will not read the contents
N|             of memory but only overwrite its contents. The color
N|             information is needed to perform antialiasing against a flat
N|             background.
N|
N|
N|  Params:    color  - Color Component: color[31-24] - Red
N|                                       color[23-16] - Green
N|                                       color[15-8]  - Blue
N|                                       color[7-0]   - Alpha
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_RGBA32BGRND(color) (GA_LOAD(GA_GPR11,               \
N                                     GA_FP ((color), 0, GA_MASK32)))
X#define DRW_LOAD_RGBA32BGRND(color) (GA_LOAD(GA_GPR11,                                                    GA_FP ((color), 0, GA_MASK32)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Drawing Engine RGB16 Background Color Register (DEBKG16R)
N|
N|  Descr  :   When performing operations in non-blending mode, the color of
N|             the background has to be programmed into this register.
N|             The Drawing Engine, in this case, will not read the contents
N|             of memory but only overwrite its contents. The color
N|             information is needed to perform antialiasing against a flat
N|             background.
N|
N|
N|  Params:    color  - Color Component RGB565: color[15-11] - Red
N|                                              color[10-5]  - Green
N|                                              color[4-0]   - Blue
N|
N|             alpha  - Alphablending component value (8-bit)
N|
N -------------------------------------------------------------------------*/
N#define DRW_LOAD_RGB16BGRND(color) (GA_LOAD(GA_GPR11,              \
N                                    GA_FP((color), 0, GA_MASK16)))
X#define DRW_LOAD_RGB16BGRND(color) (GA_LOAD(GA_GPR11,                                                  GA_FP((color), 0, GA_MASK16)))
N
N
N/**********************************************
N*                Enums                        *
N**********************************************/
N#define LAST_FILTER_COEF_INDEX   63 /* 0..63 = 64x4=256 entries */
N/* Start-/End- point line caps style */
Ntypedef enum tag_drw_CapStyle_e
N{
N    DRW_BUTTEND    = 0x0u,          /* Butt-end not anti-aliased */
N    DRW_BUTTEND_AA = 0x1u,          /* Butt-end anti-aliased */
N    DRW_CIRCULAR   = 0x2u           /* Circular line caps */
N} drw_CapStyle_e;
N
N/* Blending Mode */
Ntypedef enum tag_drw_blendMode_e
N{
N    DRW_BLEND_OPAQUE            = 0x0u,    /* Opaque Blending Mode */
N    DRW_BLEND_TRANSP            = 0x1u,    /* Transparent Blending Mode */
N    DRW_OVERWRITING             = 0x2u,    /* Overwriting Mode */
N    DRW_BLEND_RGBA32_SATURATION = 0x3u     /* Saturation Mode - Valid only for RGBA32 mode */
N} drw_blendMode_e;
N
N/**********************************************
N*              Structures                     *
N**********************************************/
N/* Memory Configuration */
Ntypedef struct tag_drw_mem_st
N{
N    /* Destination Mem. Params */
N    uint32_t u32DstAddr;            /* Dest. Memory Addr. First Src. Dot*/
N    uint16_t u16DstImgWidth;        /* Dest. Image Width */
N    uint16_t u16DstImgHeight;       /* Dest. Image Height */
N} drw_mem_st;
N
N/* Point Structure */
Ntypedef struct tag_drw_Point_st
N{
N    uint16_t u16X;                 /* X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels */
N    uint16_t u16Y;                 /* Y- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels */
N} drw_Point_st;
N
N/* Clipping Window Coordinates */
Ntypedef struct tag_drw_clipWnd_st
N{
N    uint16_t u16UlX;                /* Upper Left X-Coord */
N    uint16_t u16UlY;                /* Upper Left Y-Coord */
N    uint16_t u16LrX;                /* Lower Right X-Coord */
N    uint16_t u16LrY;                /* Lower Right Y-Coord */
N} drw_clipWnd_st;
N
N/* Line (RGB16/RGBA32) Command desc. structure */
Ntypedef struct tag_drw_LnOpCfg_st
N{
N    ga_colFmt_e     eColFmt;        /* Line Color fmt. (RGB16/RGBA32)*/
N    drw_blendMode_e eBlndMode;      /* Blending Mode */
N    drw_CapStyle_e  eStartCap;      /* Cap Style of start point */
N    drw_CapStyle_e  eEndCap;        /* Cap Style of end point */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N} drw_LnOpCfg_st;
N
N/* Triangle (RGB16/RGBA32) Command desc. structure */
Ntypedef struct tag_drw_TriOpCfg_st
N{
N    ga_colFmt_e     eColFmt;        /* Line Color fmt. (RGB16/RGBA32)*/
N    drw_blendMode_e eBlndMode;      /* Blending Mode */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N    ga_en_e         eAntialEn1;     /* Antial. Enable for Edge 1 */
N    ga_en_e         eAntialEn2;     /* Antial. Enable for Edge 2 */
N    ga_en_e         eAntialEn3;     /* Antial. Enable for Edge 3 */
N} drw_TriOpCfg_st;
N
N/* Line/Triangle Draw common config. options */
Ntypedef struct tag_drw_OpCfg_st
N{
N    drw_blendMode_e eBlndMode;      /* Blending Mode */
N    uint32_t        u32BgColor;     /* Background color (RGB16/RGBA32) */
N    ga_en_e         eClipWndEn;     /* Clipping Window Enable */
N    drw_clipWnd_st  stClipWnd;      /* Clipping Window Parameters */
N} drw_OpCfg_st;
N
N/* Color config. options */
Ntypedef struct tag_drw_Color_st
N{
N    ga_colFmt_e  eColFmt;           /* Primitive Color fmt. (RGB16/RGBA32)*/
N    uint32_t     u32Color;          /* Primitive color (RGB16/RGBA32) */
N    uint8_t      u8Alpha;           /* Primitive alpha-blending (only if
N                                       Transp. blending mode is used) */
N} drw_Color_st;
N
N/* Line description structure */
Ntypedef struct tag_drw_Line_st
N{
N    drw_Point_st   stPtStart;       /* Line Start Point */
N    drw_Point_st   stPtEnd;         /* Line End Point */
N
N    drw_CapStyle_e eStartCap;       /* Cap Style of start point */
N    drw_CapStyle_e eEndCap;         /* Cap Style of end point */
N
N    drw_Color_st   stColor;         /* Color Configuration */
N    uint16_t u16Thickness;          /* Line Thickness-Integer part 12 bits + 4 bits sub pixels */
N} drw_Line_st;
N
N/* Triangle desription structure */
Ntypedef struct tag_drw_Trngl_st
N{
N    drw_Point_st stPt1;             /* Triangle Point 1 */
N    drw_Point_st stPt2;             /* Triangle Point 2 */
N    drw_Point_st stPt3;             /* Triangle Point 3 */
N
N    ga_en_e      eAntialEn1;        /* Antial. Enable for Edge 1 */
N    ga_en_e      eAntialEn2;        /* Antial. Enable for Edge 2 */
N    ga_en_e      eAntialEn3;        /* Antial. Enable for Edge 3 */
N
N    drw_Color_st stColor;           /* Color Configuration */
N} drw_Trngl_st;
N
N/**********************************************
N*      Exported Function Prototypes           *
N**********************************************/
N/*-------------------------------------------------------------------------
N|
N|                      B A S I C      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vDrw_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetMemDest
N *
N * Purpose:       Sets the destination memory parameters in the Command List
N *
N * Inputs:        pvAddr     - Destination Memory Address
N *                             (First Dot of the destination)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetMemDest(const void* pvAddr, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetMemDim
N *
N * Purpose:       Sets the destination memory size in the Command List
N *
N * Inputs:        u16Width   - Destination Memory Width
N *                             Number of lines of the destination image
N *                             (from 1 up to 4095).
N *
N *                u16Height  - Destination Memory Height
N *                             Memory reserved per line within the destination
N *                             in dots (from 1 up to 4095).
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetMemDim(uint16_t u16Width, uint16_t u16Height, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetColorRGB16
N *
N * Purpose:       Sets the color that will be used for drawing the primitives
N *                when using RGB16 color space.
N *
N * Inputs:        u16Color   - Color 16-bit RGB Value
N *
N *                u8Alpha    - Alpha blending (8-bit)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please note that although RGB16 does not have alpha
N *                blending, the value specified as ucAlpha will be used as
N *                such, but only if transparency blending method is used.
N *
N ***************************************************************************/
Nvoid vDrw_SetColorRGB16(uint16_t u16Color, uint8_t u8Alpha, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetColorRGBA32
N *
N * Purpose:       Sets the color that will be used for drawing the primitives
N *                when using RGBA32 color space.
N *
N * Inputs:        u32Color   - 32-bit RGBA Color Value
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetColorRGBA32(uint32_t u32Color, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetBgColorRGBA32
N *
N * Purpose:       Sets the background color that will be used for drawing
N *                the primitives in non-blending mode and when RGBA32 color
N *                space is used. The Drawing Engine, in this case, will not
N *                read the contents of memory but only overwr. its contents.
N *
N * Inputs:        u32Color   - 32-bit RGBA Color Value
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetBgColorRGBA32(uint32_t u32Color, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetBgColorRGB16
N *
N * Purpose:       Sets the background color that will be used for drawing
N *                the primitives in non-blending mode and when RGB16 color
N *                space is used. The Drawing Engine, in this case, will not
N *                read the contents of memory but only overwr. its contents.
N *
N * Inputs:        u16Color   - 16-bit RGB Color Value
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetBgColorRGB16(uint16_t u16Color, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetLineStart
N *
N * Purpose:       Sets the coordinates of a point where the line should start.
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        u16X        - X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels 
N *
N *                u16Y        - Y Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N *
N ***************************************************************************/
Nvoid vDrw_SetLineStart(uint16_t u16X,  uint16_t u16Y, ga_list_st* pstCmdList);
N/****************************************************************************
N *
N * Function:      vDrw_SetLineEnd
N *
N * Purpose:       Sets the coordinates of a point where the line should end
N *
N * Inputs:        u16X        - X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels 
N *
N *                u16Y        - Y Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N *
N ***************************************************************************/
Nvoid vDrw_SetLineEnd(uint16_t u16X,  uint16_t u16Y, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetLineThickness
N *
N * Purpose:       Sets the line thickness
N *                Note: The line Thickness: Bits: 15..4  integer part
N *                                          Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        u16Val        Line thickness value-Integer part 12 bits + 4 bits sub pixels 
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N *
N ***************************************************************************/
Nvoid vDrw_SetLineThickness(uint16_t u16Val, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetTriangle1
N *
N * Purpose:       Sets the point 1 of the triangle
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        u16X        - X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels 
N *
N *                u16Y        - Y Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N * 
N ***************************************************************************/
Nvoid vDrw_SetTriangle1(uint16_t u16X,  uint16_t u16Y, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetTriangle2
N *
N * Purpose:       Sets the point 2 of the triangle
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        u16X        - X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels 
N *
N *                u16Y        - Y Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N *
N ***************************************************************************/
Nvoid vDrw_SetTriangle2(uint16_t u16X,  uint16_t u16Y, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetTriangle3
N *
N * Purpose:       Sets the point 1 of the triangle
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N  *
N * Inputs:        u16X        - X- Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels 
N *
N *                u16Y        - Y Coordinate of the Point-Integer part 12 bits + 4 bits sub pixels
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   API will not check the range of values (because of performance).
N *
N ***************************************************************************/
Nvoid vDrw_SetTriangle3(uint16_t u16X,  uint16_t u16Y, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetClippWnd
N *
N * Purpose:       Sets the Clipping Window Coordinates
N *
N * Inputs:        pstClipWnd - Pointer to Clipping Window Coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vDrw_SetClippWnd(drw_clipWnd_st* pstClipWnd, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetLineCmd
N *
N * Purpose:       Inserts the appropriate Line (RGBA32/RGB16) command. The
N *                type of the command is determined by the given color space
N *
N * Inputs:        pstParam   - Pointer to Line Command option parameters
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   Blend mode DRW_BLEND_RGBA32_SATURATION in pstParam will be
N *                vaild only for RGBA32 mode. Because of performance reason API
N *                will not check it.
N *
N ***************************************************************************/
Nvoid vDrw_SetLineCmd(drw_LnOpCfg_st* pstParam, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_SetTriangleCmd
N *
N * Purpose:       Inserts the appropriate Triangle (RGBA32/RGB16) command.
N *                The exact type of the command is determined by the given
N *                color space.
N *
N * Inputs:        pstParam   - Pointer to Triangle Command option parameters
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Blend mode DRW_BLEND_RGBA32_SATURATION in pstParam will be
N *                vaild only for RGBA32 mode. Because of performance reason API
N *                will not check it.
N *
N ***************************************************************************/
Nvoid vDrw_SetTriangleCmd(drw_TriOpCfg_st* pstParam, ga_list_st* pstCmdList);
N
N/*-------------------------------------------------------------------------
N|
N|                    D R A W I N G      O P E R A T I O N S
N|
N --------------------------------------------------------------------------*/
N/****************************************************************************
N *
N * Function:      vDrw_DrawLine
N *
N * Purpose:       Inserts all neccessarry commands for drawing the line
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        pstMem     - Pointer to Destination Memory description parameters
N *
N *                pstOption  - Pointer to Configuration options required for line draw
N *                             operation
N *
N *                pstLine    - Pointer to Specifying line that should be drawn
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Blend mode DRW_BLEND_RGBA32_SATURATION in pstParam will be
N *                vaild only for RGBA32 mode. Because of performance reason API
N *                will not check it.
N *
N ***************************************************************************/
Nvoid vDrw_DrawLine(drw_mem_st* pstMem, drw_OpCfg_st *pstOption,
N                   drw_Line_st *pstLine, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vDrw_DrawTriangle
N *
N * Purpose:       Inserts all neccessarry commands for drawing the triangle
N *                Note: The pixel coordinates: Bits: 15..4  integer part
N *                                             Bits:  3..0  sub pixel (in 1/16 steps)
N *
N * Inputs:        stMem      - Destination Memory description parameters
N *
N *                stOption   - Configuration options required for line draw
N *                             operation
N *
N *                stTrngl    - Specifies the triangle that should be drawn
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Blend mode DRW_BLEND_RGBA32_SATURATION in pstParam will be
N *                vaild only for RGBA32 mode. Because of performance reason API
N *                will not check it.
N *
N ***************************************************************************/
Nvoid vDrw_DrawTriangle(drw_mem_st* pstMem, drw_OpCfg_st *pstOption,
N                       drw_Trngl_st *pstTrngl, ga_list_st* pstCmdList);
N                       
N
N/****************************************************************************
N *
N * Function:      boDrw_SetFilterCoefDrawEngine
N *
N * Purpose:       Sets 32-Bit Filter Coeffcients for 4 entries(4 x 8 Bits).
N *
N * Inputs:        u8CoefIndex  - Index of location for Coefficents 
N *                              (0 .. LAST_FILTER_COEF_INDEX)
N *
N *                u32CoefValue - 32 Bit values for 4 entries (4 x 8 Bits).
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE: Ok
N *                C_FALSE: wrong parameter 
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boDrw_SetFilterCoefDrawEngine (uint8_t u8CoefIndex,  
N                                      uint32_t u32CoefValue);
N                       
N
N/****************************************************************************/
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N/****************************************************************************/
N
N
N#endif /* DRAW_H */
N
N/****************************************************************************/
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: draw.h
N**  $Revision: 1.15 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** | CONS.  : 
N** | REASON : 
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices,” or
N  “TOSHIBA Semiconductor Reliability Handbook” etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage”).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCALIMER ****************************/
N
L 30 "..\..\..\..\mw\inc\gfunctions.h" 2
N#include "rotation.h"
L 1 "..\..\..\..\mw\inc\rotation.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Some helper functions for ratation, scaling, shearing, 
N*                 perspective operation.
N*                 Reference Low-Level Driver (Rotation Engine)
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator Rotation Engine
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.10 $
N*   DATE        : $Date: 2015/07/21 12:38:46 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef ROTATION_LIB_H
N#define ROTATION_LIB_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "gf.h"
N#include "rotation_matrix.h"
L 1 "..\..\..\..\lldd\inc\rotation_matrix.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver Matrix Form (Rotation Engine)
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator Rotation Engine
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.15 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef ROTATION_MATRIX_H
N#define ROTATION_MATRIX_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "captypes.h"
N#include "ga_common.h"
N
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840   /* Rule 5.7 [A] : identifier reused from declaration of entity-kind "entity" */
S
N#endif  
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_ROTATE_MATRIX_H_REVISION     "$Revision: 1.15 $"
N#define LLDD_GA_ROTATE_MATRIX_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*--------------------------------------------------------------------------
N|       ------------------------------------------------------------        |
N|      | >>>>>>         ROTATION ENGINE COMMAND INDEX        <<<<<< |       |
N|       ------------------------------------------------------------        |
N|---------------------------------------------------------------------------|
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                      ------------------------------                       |
N|                     |      OPERATION COMMANDS      |                      |
N|                      ------------------------------                       |
N|                                                                           |
N| - Commands:                                                               |
N|   1. ROT_ROTATE           - Rotation Command                              |
N|   2. ROT_ROTATEB          - Rotation Command with blending                |
N|                                                                           |
N|---------------------------------------------------------------------------|
N|                                                                           |
N|                    ----------------------------------                     |
N|                   |      LOAD REGISTER COMMANDS      |                    |
N|                    ----------------------------------                     |
N|                                                                           |
N| - Source Regs:                                                            |
N|   1. ROT_LOAD_SOURCEADDR  -  Load Source Address Reg.               (SAR) |
N|   2. ROT_LOAD_SRCWIDTH    -  Load Source Memory Width Reg.         (SMWR) |
N|                                                                           |
N| - Destination Regs:                                                       |
N|   3. ROT_LOAD_DESTADDR    -  Load Destination Address Reg.          (DAR) |
N|   4. ROT_LOAD_DESTMEMDIM  -  Load Destination Memory Dim. Reg.     (DMDR) |
N|                                                                           |
N| - Color Regs:                                                             |
N|   5. ROT_LOAD_COLORFMT    -  Load Color Format Register             (CFR) |
N|                                                                           |
N| - Alpha Regs:                                                             |
N|   6. ROT_LOAD_SRCALPHAVAL - Load Source Alpha Value Register       (SAVR) |
N|   7. ROT_LOAD_DSTALPHAVAL - Load Destination Alpha Value Register  (DAVR) |
N|                                                                           |
N| - Rotation Regs:                                                          |
N|   8. ROT_LOAD_A11         - Load SXR Register                      (SXR)  |
N|   9. ROT_LOAD_A12         - Load SHXR Register                     (SHXR) |
N|  10. ROT_LOAD_A21         - Load SHYR Register                     (SHYR) |
N|  11. ROT_LOAD_A22         - Load SYR Register                      (SYR)  |
N|  12. ROT_LOAD_A31         - Load W0R Register                      (W0R)  |
N|  13. ROT_LOAD_A32         - Load W1R Register                      (W1R)  |
N|  14. ROT_LOAD_A33         - Load W2R Register                      (W2R)  |
N|                                                                           |
N| - Forward-Rotation Regs:                                                  |
N|  15. ROT_LOAD_SRCADDRPOS  - Load Rotated Src. Address Pos. Reg.     (RSA) |
N|  16. ROT_LOAD_COORD1      - Load Frwd-Rot. Corner Coord. Reg. 1  (FRCCR1) |
N|  17. ROT_LOAD_COORD2      - Load Frwd-Rot. Corner Coord. Reg. 2  (FRCCR2) |
N|  18. ROT_LOAD_COORD3      - Load Frwd-Rot. Corner Coord. Reg. 3  (FRCCR3) |
N|  19. ROT_LOAD_COORD4      - Load Frwd-Rot. Corner Coord. Reg. 4  (FRCCR4) |
N|                                                                           |
N| - Clipping Window:                                                        |
N|  20. ROT_LOAD_CLIPWNDUL   - Load Clipp.Wnd. Upper-Left Corner      (CWUL) |
N|  21. ROT_LOAD_CLIPWNDLR   - Load Clipp.Wnd. Upper-Left Corner      (CWLR) |
N|                                                                           |
N --------------------------------------------------------------------------*/
N/*=========================================================================
N|                            OPERATION COMMANDS                             |
N ==========================================================================*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   ROT_ROTATE
N|
N|  Descr  :   Rotate source to destination without blending.
N|
N|  Params:    clippEn  - Clipping Control
N|                        Use: GA_EN  - Enable Clipping
N|                             GA_DIS - Disable Clipping
N|
N|             filterEn - Filter Control
N|                        Use: GA_EN  - Enable Filter
N|                             GA_DIS - Disable Filter
N|
N|
N -------------------------------------------------------------------------*/
N#define ROT_ROTATE(clippEn, filterEn) (GA_CMN(GA_ROTATION, 1, GA_CMC_ROT,   \
N                                       GA_FP ((clippEn),   1, GA_MASK1)   | \
N                                       GA_FP ((filterEn),  0, GA_MASK1)))
X#define ROT_ROTATE(clippEn, filterEn) (GA_CMN(GA_ROTATION, 1, GA_CMC_ROT,                                          GA_FP ((clippEn),   1, GA_MASK1)   |                                        GA_FP ((filterEn),  0, GA_MASK1)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   ROT_ROTATEB
N|
N|  Descr  :   Rotate source to destination with blending.
N|
N|  Params:    redChProt   - Red Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChProt - Green Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChProt  - Blue Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaProt   - Alpha Channel Protection
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|
N|             redChFad    - Red Channel Fading
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             greenChFad  - Green Channel Fading
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             blueChFad   - Blue Channel Fading
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|                         
N|             alphaFad    - Alpha Channel Fading
N|                           Use: GA_EN           - Channel Protected
N|                                GA_DIS          - Channel Not Protected
N|
N|             blndOrder   - Blending Order
N|                           Use: BLT_ONTO_DEST   - Onto destination
N|                                BLT_BEHIND_DEST - Behind the destination
N|                         
N|             ClipWndEn   - Clipping Window Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|                         
N|             FilterContr - Filter Control Option
N|                           Use: GA_EN           - Enable Option
N|                                GA_DIS          - Disable Option
N|
N|
N -------------------------------------------------------------------------*/
N#define ROT_ROTATEB(redChProt,                                            \
N                    greenChProt,                                          \
N                    blueChProt,                                           \
N                    alphaProt,                                            \
N                    redChFad,                                             \
N                    greenChFad,                                           \
N                    blueChFad,                                            \
N                    alphaFad,                                             \
N                    blndOrder,                                            \
N                    ClipWndEn,                                            \
N                    FilterContr)                                          \
N                    (GA_CMN(GA_ROTATION,   1, GA_CMC_ROTB,                \
N                     GA_FP ((redChProt),  15, GA_MASK1)        |          \
N                     GA_FP ((greenChProt),14, GA_MASK1)        |          \
N                     GA_FP ((blueChProt), 13, GA_MASK1)        |          \
N                     GA_FP ((alphaProt),  12, GA_MASK1)        |          \
N                     GA_FP ((redChFad),   11, GA_MASK1)        |          \
N                     GA_FP ((greenChFad), 10, GA_MASK1)        |          \
N                     GA_FP ((blueChFad),   9, GA_MASK1)        |          \
N                     GA_FP ((alphaFad),    8, GA_MASK1)        |          \
N                     GA_FP ((blndOrder),   3, GA_MASK1)        |          \
N                     GA_FP ((ClipWndEn),   1, GA_MASK1)        |          \
N                     GA_FP ((FilterContr), 0, GA_MASK1)))
X#define ROT_ROTATEB(redChProt,                                                                greenChProt,                                                              blueChProt,                                                               alphaProt,                                                                redChFad,                                                                 greenChFad,                                                               blueChFad,                                                                alphaFad,                                                                 blndOrder,                                                                ClipWndEn,                                                                FilterContr)                                                              (GA_CMN(GA_ROTATION,   1, GA_CMC_ROTB,                                     GA_FP ((redChProt),  15, GA_MASK1)        |                               GA_FP ((greenChProt),14, GA_MASK1)        |                               GA_FP ((blueChProt), 13, GA_MASK1)        |                               GA_FP ((alphaProt),  12, GA_MASK1)        |                               GA_FP ((redChFad),   11, GA_MASK1)        |                               GA_FP ((greenChFad), 10, GA_MASK1)        |                               GA_FP ((blueChFad),   9, GA_MASK1)        |                               GA_FP ((alphaFad),    8, GA_MASK1)        |                               GA_FP ((blndOrder),   3, GA_MASK1)        |                               GA_FP ((ClipWndEn),   1, GA_MASK1)        |                               GA_FP ((FilterContr), 0, GA_MASK1)))
N
N/*=========================================================================
N|                          LOAD REGISTER COMMANDS                           |
N ==========================================================================*/
N/*------------------------------
N|        SOURCE REGISTERS       |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Address Register (SAR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SAR.
N|             The physical 32-bit address within the source address register
N|             is the pointer to the first dot in memory of the source image.
N|
N|  Params:    addr - Source Address
N|                    The lower 32 physical address bits that point to the
N|                    first dot of the source.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_SOURCEADDR(addr) (GA_LOAD(GA_GPR9, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Memory Width Register (SMWR)
N|
N|  Descr  :   The Load General-Purpose Register command is used to load SMWR.
N|             The source memory width register specifies the memory reserved
N|             for one line within the source image in number of dots.
N|
N|
N|  Params:    width - Source Memory Width
N|                     Memory reserved per line within the source in dots
N|                     (1 up to 4095)
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_SRCWIDTH(width) (GA_LOAD(GA_GPR10, (width)))
N
N/*------------------------------
N|     DESTINATION REGISTERS     |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Address Register (DAR)
N|
N|  Descr  :   The physical 32-bit address within the destination address
N|             register is the pointer to the first dot in the memory region,
N|             where the rotated bitmap will be placed. Depending on the
N|             source color format, which is equal to the destination color
N|             format, this address has to be word- (RGBA32) or halfword-
N|             (RGB16) aligned.
N|
N|  Params:    addr   - Destination Address
N|                      The lower 32 physical address bits that point to the
N|                      first dot of the destination.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_DESTADDR(addr) (GA_LOAD(GA_GPR4, (addr)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Memory Dimension Register (DMDR)
N|
N|  Descr  :   The destination memory dimension register specifies the memory
N|             reserved for one line within the destination image in number
N|             of dots. Note that this value does not necessarily have to be
N|             equal to the image width.
N|
N|  Params:    width  - Destination Memory Width
N|                      Memory reserved per line within the source in dots
N|                      (1 up to 4095)
N|
N|             height - Destination Memory Height
N|                      Number of lines of the destination image
N|                      (from 1 up to 4095).
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_DESTMEMDIM(width, height) (GA_LOAD(GA_GPR5,                    \
N                                            GA_FP ((height), 16, GA_MASK12)  |  \
N                                            GA_FP ((width),   0, GA_MASK12)))
X#define ROT_LOAD_DESTMEMDIM(width, height) (GA_LOAD(GA_GPR5,                                                                GA_FP ((height), 16, GA_MASK12)  |                                              GA_FP ((width),   0, GA_MASK12)))
N
N/*------------------------------
N|        COLOR REGISTERS        |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Color Format Register (CFR)
N|
N|  Descr  :   This register specifies the color format of both, source
N|             and destination. As the rotation engine does not perform color
N|             conversion.
N|
N|  Params:    dstformat - Destination color format
N|                         Use parameters:
N|                         GA_RGB16  - 16-bit RGB
N|                         GA_RGBA32 - 32-bit RGBA
N|
N|             srcformat - Source color format
N|                         Use parameters:
N|                         GA_RGB16  - 16-bit RGB
N|                         GA_RGBA32 - 32-bit RGBA
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_COLORFMT(dstformat, srcformat) (GA_LOAD(GA_GPR11,                    \
N                                                 GA_FP ((dstformat), 1, GA_MASK1)  |  \
N                                                 GA_FP ((srcformat), 0, GA_MASK1)))
X#define ROT_LOAD_COLORFMT(dstformat, srcformat) (GA_LOAD(GA_GPR11,                                                                     GA_FP ((dstformat), 1, GA_MASK1)  |                                                   GA_FP ((srcformat), 0, GA_MASK1)))
N
N/*------------------------------
N|        ALPHA REGISTERS        |
N -------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Fading Factor Register (SFFR)
N|
N|  Descr  :   The Source Fading Factor Register holds the fading factor enumerator
N|             (SFFE) of the fading factor.
N|
N|  Params:    factor - Source Fading Factor Enumerator
N|                      These bits specify the enumerator of the fading
N|                      factor FFACT.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_FADEFACT(factor) (GA_LOAD(GA_GPR26,                       \
N                                   ((factor) & GA_MASK8)))
X#define ROT_LOAD_FADEFACT(factor) (GA_LOAD(GA_GPR26,                                                          ((factor) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Source Alpha Value Register (SAVR)
N|
N|  Descr  :   The Source Alpha Value Register keeps the alpha value for
N|             conversion of the source dots from the 16-bit RGB format to
N|             the 32-bit RGBA format for internal processing.
N|
N|  Params:    format - Source alpha value
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_SRCALPHAVAL(value) (GA_LOAD(GA_GPR27,                     \
N                                     ((value) & GA_MASK8)))
X#define ROT_LOAD_SRCALPHAVAL(value) (GA_LOAD(GA_GPR27,                                                          ((value) & GA_MASK8)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Destination Alpha Value Register (DAVR)
N|
N|  Descr  :   The Destination Alpha Value Register keeps the alpha value
N|             used during conversion of the destination dots from the
N|             16-bit RGB format to the 32-bit RGBA format.
N|
N|  Params:    format - Source alpha value
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_DSTALPHAVAL(value) (GA_LOAD(GA_GPR28,                     \
N                                     ((value) & GA_MASK8)))
X#define ROT_LOAD_DSTALPHAVAL(value) (GA_LOAD(GA_GPR28,                                                          ((value) & GA_MASK8)))
N
N/*------------------------------
N|      ROTATION REGISTERS        |
N -------------------------------*/
N               /* Rotation Matrix:
N* 
N*              [  sx   shx  0 ]
N*              [  shy  sy   0 ]
N*              [  w0   w1   w2]
N*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load SXR Register
N|
N|  Descr  :   This register holds the SX value of the rotation matrix 
N              multiplied by 65536. The signed two’s complement integer 
N              value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted SX value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A11(val) (GA_LOAD(GA_GPR12,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A11(val) (GA_LOAD(GA_GPR12,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load SHXR Register
N|
N|  Descr  :   This register holds the SHX value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted SHX value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A12(val) (GA_LOAD(GA_GPR15,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A12(val) (GA_LOAD(GA_GPR15,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load SHYR Register
N|
N|  Descr  :   This register holds the SHY value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted SHY value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A21(val) (GA_LOAD(GA_GPR13,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A21(val) (GA_LOAD(GA_GPR13,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load SYR Register
N|
N|  Descr  :   This register holds the SHY value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted SYR value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A22(val) (GA_LOAD(GA_GPR14,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A22(val) (GA_LOAD(GA_GPR14,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load W0R Register
N|
N|  Descr  :   This register holds the W0 value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted W0 value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A31(val) (GA_LOAD(GA_GPR21,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A31(val) (GA_LOAD(GA_GPR21,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load W1R Register
N|
N|  Descr  :   This register holds the W0 value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted W1 value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A32(val) (GA_LOAD(GA_GPR22,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A32(val) (GA_LOAD(GA_GPR22,                                                          ((val) & GA_MASK22)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load W2R Register
N|
N|  Descr  :   This register holds the W2 value of the rotation matrix 
N|             multiplied by 65536. The signed two’s complement integer 
N|             value is in the range of -2097152 to +2097151.
N|
N|  Params:    val - The shifted and integer converted W2 value of the
N|                   rotation matrix.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_A33(val) (GA_LOAD(GA_GPR23,                               \
N                           ((val) & GA_MASK22)))
X#define ROT_LOAD_A33(val) (GA_LOAD(GA_GPR23,                                                          ((val) & GA_MASK22)))
N
N/*------------------------------
N|    FRWD-ROTATION REGISTERS    |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Rotated Source Address Position (RSA)
N|
N|  Descr  :   This value specifies the index of the rotated corner that at
N|             it’s original position maps to the source image start address.
N|
N|
N|  Params:    position - Rotated Source Address Position
N|                        Use following values:
N|                        GA_FRCCR1 - FRCCR1 maps to the source start addr.
N|                        GA_FRCCR2 - FRCCR2 maps to the source start addr.
N|                        GA_FRCCR3 - FRCCR3 maps to the source start addr.
N|                        GA_FRCCR4 - FRCCR4 maps to the source start addr.
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_SRCADDRPOS(position) (GA_LOAD(GA_GPR20,                   \
N                                       ((position) & GA_MASK2)))
X#define ROT_LOAD_SRCADDRPOS(position) (GA_LOAD(GA_GPR20,                                                          ((position) & GA_MASK2)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Forward-Rotated Corner Coordinates Register 1 (FRCCR1)
N|
N|  Descr  :   For detailed description how to select the please consult the
N|             Capricorn documantation.
N|
N|             Please note that in order To provide a higher accuracy for
N|             the Rotation Engine’s calculations, the forward-rotated
N|             coordinate’s floating point values must be multiplied by 16
N|             (shifted 4 bits to the left) before being converted to integer
N|             and passed to the Rotation Engine.
N|
N|  Params:    x - Forward-rotated x-coordinate of corner 1 times 16.
N|             y - Forward-rotated y-coordinate of corner 1 times 16
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_COORD1(x,y) (GA_LOAD(GA_GPR16,                      \
N                              GA_FP ((x), 16, GA_MASK16)      |      \
N                              GA_FP ((y),  0, GA_MASK16)))
X#define ROT_LOAD_COORD1(x,y) (GA_LOAD(GA_GPR16,                                                    GA_FP ((x), 16, GA_MASK16)      |                                    GA_FP ((y),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Forward-Rotated Corner Coordinates Register 2 (FRCCR2)
N|
N|  Descr  :   For detailed description how to select the please consult the
N|             Capricorn documantation.
N|
N|             Please note that in order To provide a higher accuracy for
N|             the Rotation Engine’s calculations, the forward-rotated
N|             coordinate’s floating point values must be multiplied by 16
N|             (shifted 4 bits to the left) before being converted to integer
N|             and passed to the Rotation Engine.
N|
N|  Params:    x - Forward-rotated x-coordinate of corner 2 times 16.
N|             y - Forward-rotated y-coordinate of corner 2 times 16
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_COORD2(x,y) (GA_LOAD(GA_GPR17,                    \
N                              GA_FP ((x), 16, GA_MASK16)     |     \
N                              GA_FP ((y),  0, GA_MASK16)))
X#define ROT_LOAD_COORD2(x,y) (GA_LOAD(GA_GPR17,                                                  GA_FP ((x), 16, GA_MASK16)     |                                   GA_FP ((y),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Forward-Rotated Corner Coordinates Register 3 (FRCCR3)
N|
N|  Descr  :   For detailed description how to select the please consult the
N|             Capricorn documantation.
N|
N|             Please note that in order To provide a higher accuracy for
N|             the Rotation Engine’s calculations, the forward-rotated
N|             coordinate’s floating point values must be multiplied by 16
N|             (shifted 4 bits to the left) before being converted to integer
N|             and passed to the Rotation Engine.
N|
N|  Params:    x - Forward-rotated x-coordinate of corner 3 times 16.
N|             y - Forward-rotated y-coordinate of corner 3 times 16
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_COORD3(x,y) (GA_LOAD(GA_GPR18,                       \
N                              GA_FP ((x), 16, GA_MASK16)      |       \
N                              GA_FP ((y),  0, GA_MASK16)))
X#define ROT_LOAD_COORD3(x,y) (GA_LOAD(GA_GPR18,                                                     GA_FP ((x), 16, GA_MASK16)      |                                     GA_FP ((y),  0, GA_MASK16)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Forward-Rotated Corner Coordinates Register 4 (FRCCR4)
N|
N|  Descr  :   For detailed description how to select the please consult the
N|             Capricorn documantation.
N|
N|             Please note that in order To provide a higher accuracy for
N|             the Rotation Engine’s calculations, the forward-rotated
N|             coordinate’s floating point values must be multiplied by 16
N|             (shifted 4 bits to the left) before being converted to integer
N|             and passed to the Rotation Engine.
N|
N|  Params:    x - Forward-rotated x-coordinate of corner 4 times 16.
N|             y - Forward-rotated y-coordinate of corner 4 times 16
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_COORD4(x,y) (GA_LOAD(GA_GPR19,                       \
N                              GA_FP ((x), 16, GA_MASK16)      |       \
N                              GA_FP ((y),  0, GA_MASK16)))
X#define ROT_LOAD_COORD4(x,y) (GA_LOAD(GA_GPR19,                                                     GA_FP ((x), 16, GA_MASK16)      |                                     GA_FP ((y),  0, GA_MASK16)))
N
N/*------------------------------
N|    CLIPPING-WND REGISTERS     |
N ------------------------------*/
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Clipping Window Upper Left Corner Coord. Reg. (CWUL)
N|
N|  Descr  :   This register defines the upper left corner coordinate of the
N|             clipping window relative to the destination start address in
N|             number of pixels.
N|
N|  Params:    x - Clipping window upper left corner x-coordinate
N|             y - Clipping window upper left corner y-coordinate
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_CLIPWNDUL(x,y) (GA_LOAD(GA_GPR1,                       \
N                                 GA_FP ((x), 16, GA_MASK12)      |      \
N                                 GA_FP ((y),  0, GA_MASK12)))
X#define ROT_LOAD_CLIPWNDUL(x,y) (GA_LOAD(GA_GPR1,                                                        GA_FP ((x), 16, GA_MASK12)      |                                       GA_FP ((y),  0, GA_MASK12)))
N
N/*--------------------------------------------------------------------------
N|
N|  Command:   Load Clipping Window Lower Right Corner Coord. Reg. (CWLR)
N|
N|  Descr  :   This register defines the upper left corner coordinate of the
N|             clipping window relative to the destination start address in
N|             number of pixels.
N|
N|  Params:    x - Clipping window lower right corner x-coordinate
N|             y - Clipping window lower right corner y-coordinate
N|
N -------------------------------------------------------------------------*/
N#define ROT_LOAD_CLIPWNDLR(x,y) (GA_LOAD(GA_GPR2,                       \
N                                 GA_FP ((x), 16, GA_MASK12)      |      \
N                                 GA_FP ((y),  0, GA_MASK12)))
X#define ROT_LOAD_CLIPWNDLR(x,y) (GA_LOAD(GA_GPR2,                                                        GA_FP ((x), 16, GA_MASK12)      |                                       GA_FP ((y),  0, GA_MASK12)))
N
N/*======================================
N                Enums
N=======================================*/
N/* Rot.Src. Address Position  */
Ntypedef enum tag_rot_SrcSel_e
N{
N    GA_FRCCR1 = 0x0u,
N    GA_FRCCR2 = 0x1u,
N    GA_FRCCR3 = 0x2u,
N    GA_FRCCR4 = 0x3u
N} rot_SrcSel_e;
N
N/*======================================
N              Structures
N=======================================*/
N/* rotation matrix Parameters (all values are mult. by 16) */
Ntypedef struct tag_rot_Mtrx_st
N{
N    uint32_t  u32A11;                /* The shifted and integer conv. sx  */
N    uint32_t  u32A12;                /* The shifted and integer conv. shx */
N    uint32_t  u32A21;                /* The shifted and integer conv. shy */
N    uint32_t  u32A22;                /* The shifted and integer conv. sy  */
N    uint32_t  u32A31;                /* The shifted and integer conv. w0  */
N    uint32_t  u32A32;                /* The shifted and integer conv. w1  */
N    uint32_t  u32A33;                /* The shifted and integer conv. w2  */
N} rot_Mtrx_st;
N
N/* Forward-Rotated Corner Coordinates (all values are mult. by 16) */
Ntypedef struct tag_rot_frccr_st
N{
N    uint16_t  u16X1;                 /* Frwd. Rotd. X-Coord (corner 1) */
N    uint16_t  u16Y1;                 /* Frwd. Rotd. Y-Coord (corner 1) */
N    uint16_t  u16X2;                 /* Frwd. Rotd. X-Coord (corner 2) */
N    uint16_t  u16Y2;                 /* Frwd. Rotd. Y-Coord (corner 2) */
N    uint16_t  u16X3;                 /* Frwd. Rotd. X-Coord (corner 3) */
N    uint16_t  u16Y3;                 /* Frwd. Rotd. Y-Coord (corner 3) */
N    uint16_t  u16X4;                 /* Frwd. Rotd. X-Coord (corner 4) */
N    uint16_t  u16Y4;                 /* Frwd. Rotd. Y-Coord (corner 4) */
N
N    uint8_t  u8ScrAddrPos;           /* Source address position */
N} rot_frccr_st;
N
N/* Memory Configuration */
Ntypedef struct tag_rot_mem_st
N{
N    /* Source Mem. Params */
N    uint16_t      u16SrcHeight;      /* Source Memory Height (Line Number) */
N    uint16_t      u16SrcWidth;       /* Source Memory Width (Dots Per Line) */
N    uint32_t      u32SrcAddr;        /* Source Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N
N    /* Destination Mem. Params */
N    uint32_t      u32DstAddr;        /* Dest. Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Dest. Image Area Size */
N    uint16_t      u16DstImgWidth;    /* Destination Image Width */
N    uint16_t      u16DstImgHeight;   /* Destination Image Height */
N} rot_mem_st;
N
N/* Clipping Window Corner Coordinates */
Ntypedef struct tag_rot_clipWnd_st
N{
N    uint16_t  u16UlX;                /* Upper Left X-Coord */
N    uint16_t  u16UlY;                /* Upper Left Y-Coord */
N    uint16_t  u16LrX;                /* Lower Right X-Coord */
N    uint16_t  u16LrY;                /* Lower Right Y-Coord */
N} rot_clipWnd_st;
N
N
N/* Rotation Config. */
Ntypedef struct tag_rot_rotCfg_st
N{
N    ga_colFmt_e    eSrcColFmt;       /* Source Color Format Selection */
N    ga_colFmt_e    eDstColFmt;       /* Destination Color Format Selection */
N    ga_en_e        eClipWndEn;       /* Clipping Window Enable */
N    ga_en_e        eFilterEn;        /* Enable Filtering */
N    uint8_t        u8FadingFctr;     /* Fading factor */
N    uint8_t        u8SrcAlphaVal;    /* Source Alpha value */
N    uint8_t        u8DstAlphaVal;    /* Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_rotCfg_st;
N
N/* Rotation with blending Config.  */
Ntypedef struct tag_rot_rotblendCfg_st
N{
N    ga_colFmt_e   eSrcColFmt;        /* Source Color Format Selection */
N    ga_colFmt_e   eDstColFmt;        /* Destination Color Format Selection */
N    ga_en_e       eClipWndEn;        /* Clipping Window Enable */
N    ga_en_e       eFilterEn;         /* Enable Filtering */
N    ga_en_e       eDstRedProt;       /* Destination red color protection */
N    ga_en_e       eDstGreenProt;     /* Destination green color protection */
N    ga_en_e       eDstBlueProt;      /* Destination blue color protection */
N    ga_en_e       eDstAlphaProt;     /* Destination alpha protection */
N    ga_en_e       eSrcRedFad;        /* Destination red color protection */
N    ga_en_e       eSrcGreenFad;      /* Destination green color protection */
N    ga_en_e       eSrcBlueFad;       /* Destination blue color protection */
N    ga_en_e       eSrcAlphaFad;      /* Destination alpha protection */
N    uint8_t       u8FadingFctr;      /* Fading factor */
N    ga_blendOrd_e eBldOrd;           /* Blend order */
N    uint8_t       u8SrcAlphaVal;     /* Source Alpha value */
N    uint8_t       u8DstAlphaVal;     /* Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_rotblendCfg_st;
N
N
N/*======================================
N          Function definitions
N=======================================*/
N/****************************************************************************
N *
N * Function:      vRot_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                            uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N/****************************************************************************
N *
N * Function:      vRot_SetMemSrc
N *
N * Purpose:       Sets Transf source parameters in Command List
N *
N * Inputs:        u32Addr    - Source Memory Address
N *                             (First Dot of the source)
N *
N *                u32Width   - Source Memory Width
N *                             (Memory reserved per line within the source in
N *                              dots: 1 up to 4095)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetMemSrc(uint32_t u32Addr, uint32_t u32Width, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetMemDest
N *
N * Purpose:       Sets the destination memory parameters in the Command List
N *
N * Inputs:        u32Addr    - Destination Memory Address
N *                             (First Dot of the destination)
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetMemDest(uint32_t u32Addr, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetMemDim
N *
N * Purpose:       Sets the destination memory size in the Command List
N *
N * Inputs:        u16Width   - Destination Memory Width
N *                             Number of lines of the destination image
N *                             (from 1 up to 4095).
N *
N *                u16Height  - Destination Memory Height
N *                             Memory reserved per line within the destination
N *                             in dots (from 1 up to 4095).
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetMemDim(uint16_t u16Width, uint16_t u16Height, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetColorFmt
N *
N * Purpose:       Sets the color format of the both source and destination.
N *
N * Inputs:        eDstColFormat - Destination Color Format Selection
N *                                (16-bit RGB/ 32-bit RGBA)
N *
N *                eSrcColFormat - SourceColor Format Selection
N *                                (16-bit RGB/ 32-bit RGBA)
N *
N *                pstCmdList    - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please note that Rotation Engine cannot convert color
N *                format, therefore formats for both (src. and dst.) must be
N *                the same.
N *
N ***************************************************************************/
Nvoid vRot_SetColorFmt(ga_colFmt_e eDstColFormat, ga_colFmt_e eSrcColFormat, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetRotMtrx
N *
N * Purpose:       Sets the rotation matrix coefficients.
N *
N * Inputs:        pstMatrix   - Pointer to rotation matrix Coefficients
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please note that the signed two’s complement integer values
N *                are in the range of -2097152 to +2097151.
N *
N ***************************************************************************/
Nvoid vRot_SetRotMtrx(rot_Mtrx_st* pstMatrix, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetFrwdCoord
N *
N * Purpose:       Sets the Forward Rotated Coordinates of all four corners.
N *
N * Inputs:        pstCoord    - Pointer to forward-rotated Corner Coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Please note that if coordinates are not given in required
N *                order it will be automatically re-arranged before they are
N *                inserted in the command list (as described in FRCCReg
N *                chapter).
N *
N ***************************************************************************/
Nvoid vRot_SetFrwdCoord(rot_frccr_st* pstCoord, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetSrcAddrPos
N *
N * Purpose:       Sets the Rotated Source Address Position. This value
N *                specifies the index of the rotated corner that at it’s
N *                original position maps to the source image start address.
N *
N * Inputs:        eSrcSel    - Forward-Rotated Corner Coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetSrcAddrPos(rot_SrcSel_e eSrcSel, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetRotationCmd
N *
N * Purpose:       Inserts the rotation command in the Command List
N *
N * Inputs:        eClipWndEn - Enable Clipping Window
N *
N *                eFilterEn  - Enable Filtering
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetRotationCmd(ga_en_e eClipWndEn, ga_en_e eFilterEn, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_SetClippWnd
N *
N * Purpose:       Sets the Clipping Window Coordinates
N *
N * Inputs:        stClipWnd  - Pointer to clipping Window Coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_SetClippWnd(rot_clipWnd_st* pstClipWnd, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_RotateMatrix
N *
N * Purpose:       Inserts all required parameters for source object rotation
N *                operation
N *
N * Inputs:        pstMem      - Pointer to memory configuration parameters
N *
N *                pstParam    - Pointer to scaling Parameters
N *
N *                pstMatrix   - Pointer to transformation matrix
N *
N *                pstCoord    - Pointer to forward rotated corner coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_RotateMatrix(rot_mem_st* pstMem, rot_rotCfg_st* pstParam, rot_Mtrx_st* pstMatrix,
N                       rot_frccr_st* pstCoord, ga_list_st* pstCmdList);
N
N/****************************************************************************
N *
N * Function:      vRot_RotateBlendMatrix
N *
N * Purpose:       Inserts all required parameters for source object rotation
N *                operation with blending
N *
N * Inputs:        pstMem      - Pointer to memory configuration parameters
N *
N *                pstParam    - Pointer to scaling Parameters
N *
N *                pstMatrix   - Pointer to transformation matrix
N *
N *                pstCoord    - Pointer to forward rotated corner coordinates
N *
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vRot_RotateBlendMatrix(rot_mem_st* pstMem, rot_rotblendCfg_st* pstParam, rot_Mtrx_st* pstMatrix,
N                            rot_frccr_st* pstCoord, ga_list_st* pstCmdList);
N
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N/****************************************************************************/
N
N#endif /* ROATATION_MATRIX_H */
N
N
N/****************************************************************************
N*****************************************************************************
N**             >>>>     MISRA-C 2004 Deviation Report     <<<<
N**                          (MISRA Rule Violation)
N**
N**  File: rotation_matrix.h
N**  $Revision: 1.15 $
N**  $Date: 2015/05/04 09:07:14 $
N**
N** **************************************************************************
N**  ------------------------------------------------------------------------
N** |
N** | RULE   : 
N** |
N** | CONS.  :
N** |
N** | REASON :
N** |
N**  ------------------------------------------------------------------------
N**
N*****************************************************************************
N****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 29 "..\..\..\..\mw\inc\rotation.h" 2
N
N#ifdef GA_USE_MATH_LIB
N#include "math.h"
L 1 "C:\Keil_v5\ARM\ARMCC_505u2\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision: 185525 $ Codemist 0.03
N * Checkin $Date: 2014-05-29 12:44:48 +0100 (Thu, 29 May 2014) $
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5050157
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X  #if 0L || (1L && 199901L <= 199409L)
S    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
S#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199409L)
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF static inline
N#else
N#define _ARMABI_INLINE __inline
N#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
X__inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !1L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    __inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !1L
S    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
N    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
X    __inline float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
X__inline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
X__inline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
X__inline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 0L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#ifdef __USE_C99_MATH
S/*
S * Functions new in C99.
S */
Sextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Sextern _ARMABI float exp2f(float /*x*/);
S_ARMDEFLD1(exp2);
Sextern _ARMABI double fdim(double /*x*/, double /*y*/);
Sextern _ARMABI float fdimf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fdim);
S#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
S#endif
S#ifdef __FP_FAST_FMAF
S#define FP_FAST_FMAF
S#endif
S#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
S#endif
Sextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Sextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
S    { return (long double)fma((double)__x, (double)__y, (double)__z); }
X_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
S#endif
Sextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Sextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fmax);
Sextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Sextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
S_ARMDEFLD2(fmin);
Sextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Sextern _ARMABI float log2f(float /*x*/);
S_ARMDEFLD1(log2);
Sextern _ARMABI long lrint(double /*x*/);
Sextern _ARMABI long lrintf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
S    { return lrint((double)__x); }
X_ARMABI_INLINE _ARMABI long lrintl(long double __x)     { return lrint((double)__x); }
S#endif
Sextern _ARMABI __LONGLONG llrint(double /*x*/);
Sextern _ARMABI __LONGLONG llrintf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
S    { return llrint((double)__x); }
X_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x)     { return llrint((double)__x); }
S#endif
Sextern _ARMABI long lround(double /*x*/);
Sextern _ARMABI long lroundf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
S    { return lround((double)__x); }
X_ARMABI_INLINE _ARMABI long lroundl(long double __x)     { return lround((double)__x); }
S#endif
Sextern _ARMABI __LONGLONG llround(double /*x*/);
Sextern _ARMABI __LONGLONG llroundf(float /*x*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
S    { return llround((double)__x); }
X_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x)     { return llround((double)__x); }
S#endif
Sextern _ARMABI_PURE double nan(const char */*tagp*/);
Sextern _ARMABI_PURE float nanf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
S    { return (long double)nan(__t); }
X_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t)     { return (long double)nan(__t); }
S#endif
S#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
S#endif 
Sextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Sextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
S_ARMDEFLD1(nearbyint);
Sextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Sextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
S    { return (long double)remquo((double)__x, (double)__y, __q); }
X_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
S#endif
Sextern _ARMABI_FPEXCEPT double round(double /*x*/);
Sextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
S_ARMDEFLD1(round);
Sextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Sextern _ARMABI float tgammaf(float /*x*/);
S_ARMDEFLD1(tgamma);
Sextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Sextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
S_ARMDEFLD1(trunc);
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#ifdef __cplusplus
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S#endif
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    using ::std::abs;
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S    #endif
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which appear in C99 or non-strict mode */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #ifdef __USE_C99_MATH
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 32 "..\..\..\..\mw\inc\rotation.h" 2
N#else
S#include "sin_cos.h"
N#endif /* GA_USE_MATH_LIB */
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_GA_ROTATE_LIB_H_REVISION     "$Revision: 1.10 $"
N#define LLDD_GA_ROTATE_LIB_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N
N/**********************************************
N*       TRIGONOMETRY FUNCTION HOOKS           *
N**********************************************/
N
N#ifdef GA_USE_MATH_LIB
N#ifdef __KEIL__
N#define ROT_SIN(angle)((RE_FLOAT64ROUND((sin(angle))*4294967296.0)/4294967296))
N#define ROT_COS(angle)((RE_FLOAT64ROUND((cos(angle))*4294967296.0)/4294967296))
N#else
S/* Standard implementation */
S#define ROT_SIN(angle)(sin((angle)))
S#define ROT_COS(angle)(cos((angle)))
N#endif
N#else
S
S/* Custom Implementation */
S/* Use Sin/Cos lookup table implementation */
S#define ROT_SIN(angle)(i32SinLookup((angle)))
S#define ROT_COS(angle)(i32CosLookup((angle)))
S
N#endif /* GA_USE_MATH_LIB */
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/**
N* @brief Alignment for scale in source image
N*/
Ntypedef enum tag_rot_scaleAlign_e
N{
N    ROT_SCALE_ALIGN_00 = 0,  /*!< alignment to (0,0) */
N    ROT_SCALE_ALIGN_W0 = 1,  /*!< alignment to (width,0) */
N    ROT_SCALE_ALIGN_0H = 2,  /*!< alignment to (0,height) */
N    ROT_SCALE_ALIGN_WH = 3,  /*!< alignment to (width/height) */
N    ROT_SCALE_ALIGN_CC = 4   /*!< alignment to (center, center) */
N} rot_scaleAlign_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/**
N* @brief rotation configuration
N*/
Ntypedef struct tag_rot_cfg_st
N{
N    rot_rotCfg_st  stRotCfg;         /* Rotation configuration */
N    int16_t        i16RotCentX;      /* Source Rotation Center X-Coord */
N    int16_t        i16RotCentY;      /* Source Rotation Center Y-Coord */
N    int16_t        i16OffsetX;       /* Dest. Offset */
N    int16_t        i16OffsetY;       /* Dest. Offset */
N} rot_cfg_st;
N
N
N/**
N* @brief rotation blend configuration
N*/
Ntypedef struct tag_rot_blendcfg_st
N{
N    rot_rotblendCfg_st  stRotBlendCfg;    /* Rotation blend configuration */
N    int16_t             i16RotCentX;      /* Source Rotation Center X-Coord */
N    int16_t             i16RotCentY;      /* Source Rotation Center Y-Coord */
N    int16_t             i16OffsetX;       /* Dest. Offset */
N    int16_t             i16OffsetY;       /* Dest. Offset */
N} rot_blendcfg_st;
N
N
N/**
N* @brief Shear/Scale configuration
N*/
Ntypedef struct tag_rot_sscalCfg_st
N{
N    ga_colFmt_e      eSrcColFmt;    /*!< Source Color Format Selection */
N    ga_colFmt_e      eDstColFmt;    /*!< Destination Color Format Selection */
N    ga_en_e          eClipWndEn;    /*!< Clipping Window Enable */
N    ga_en_e          eFilterEn;     /*!< Enable Filtering */
N    int16_t          i16OffsetX;    /*!< Dest. Offset X-Coord */
N    int16_t          i16OffsetY;    /*!< Dest. Offset Y-Coord */
N#ifdef GA_USE_MATH_LIB
N    float64_t        f64FactorX;    /*!< Shear/Scale Factor X */
N    float64_t        f64FactorY;    /*!< Shear/Scale Factor Y */
N#else
S    int32_t          i32FactorX;    /*!< Shear/Scale Factor X */
S    int32_t          i32FactorY;    /*!< Shear/Scale Factor Y */
N#endif
N    rot_scaleAlign_e eAlignment;    /*!< alignment in source image */
N    uint8_t          u8FadingFctr;  /*!< Fading factor */
N    uint8_t          u8SrcAlphaVal; /*!< Source Alpha value */
N    uint8_t          u8DstAlphaVal; /*!< Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_sscalCfg_st;
N
N
N/**
N* @brief Shear/Scale configuration with blending
N*/
Ntypedef struct tag_rot_sscalblendCfg_st
N{
N    ga_colFmt_e      eSrcColFmt;    /*!< Source Color Format Selection */
N    ga_colFmt_e      eDstColFmt;    /*!< Destination Color Format Selection */
N    ga_en_e          eClipWndEn;    /*!< Clipping Window Enable */
N    ga_en_e          eFilterEn;     /*!< Enable Filtering */
N    int16_t          i16OffsetX;    /*!< Dest. Offset X-Coord */
N    int16_t          i16OffsetY;    /*!< Dest. Offset Y-Coord */
N#ifdef GA_USE_MATH_LIB
N    float64_t        f64FactorX;    /*!< Shear/Scale Factor X */
N    float64_t        f64FactorY;    /*!< Shear/Scale Factor Y */
N#else
S    int32_t          i32FactorX;    /*!< Shear/Scale Factor X */
S    int32_t          i32FactorY;    /*!< Shear/Scale Factor Y */
N#endif
N    rot_scaleAlign_e eAlignment;    /*!< alignment in source image */
N    ga_en_e          eDstRedProt;   /*!< Destination red color protection */
N    ga_en_e          eDstGreenProt; /*!< Destination green color protection */
N    ga_en_e          eDstBlueProt;  /*!< Destination blue color protection */
N    ga_en_e          eDstAlphaProt; /*!< Destination alpha protection */
N    ga_en_e          eSrcRedFad;    /*!< Destination red color protection */
N    ga_en_e          eSrcGreenFad;  /*!< Destination green color protection */
N    ga_en_e          eSrcBlueFad;   /*!< Destination blue color protection */
N    ga_en_e          eSrcAlphaFad;  /*!< Destination alpha protection */
N    uint8_t          u8FadingFctr;  /*!< Fading factor */
N    ga_blendOrd_e    eBldOrd;       /*!< Blend order */
N    uint8_t          u8SrcAlphaVal; /*!< Source Alpha value */
N    uint8_t          u8DstAlphaVal; /*!< Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_sscalblendCfg_st;
N
N
N/**
N* @brief Perspective configuration
N*/
Ntypedef struct tag_rot_perspectiveCfg_st
N{
N    ga_colFmt_e    eSrcColFmt;      /*!< Source Color Format Selection */
N    ga_colFmt_e    eDstColFmt;      /*!< Destination Color Format Selection */
N    ga_en_e        eClipWndEn;      /*!< Clipping Window Enable */
N    ga_en_e        eFilterEn;       /*!< Enable Filtering */
N    int16_t        i16OffsetX;      /*!< Dest. Offset X-Coord */
N    int16_t        i16OffsetY;      /*!< Dest. Offset Y-Coord */
N    uint32_t       u32RotPointX;    /*!< Rotation point X */
N    uint32_t       u32RotPointY;    /*!< Rotation point Y */
N#ifdef GA_USE_MATH_LIB
N    float64_t      f64AngleX;       /*!< Perspective Angle X */
N    float64_t      f64AngleY;       /*!< Perspective Angle Y */
N    float64_t      f64AngleZ;       /*!< Perspective Angle Z */
N    float64_t      f64ScaleX;       /*!< Scale Factor X */
N    float64_t      f64ScaleY;       /*!< Scale Factor Y */
N#else
S    int32_t        i32AngleX;       /*!< Perspective Angle X */
S    int32_t        i32AngleY;       /*!< Perspective Angle Y */
S    int32_t        i32AngleZ;       /*!< Perspective Angle Z */
S    int32_t        i32ScaleX;       /*!< Scale Factor X */
S    int32_t        i32ScaleY;       /*!< Scale Factor Y */
N#endif
N    uint8_t        u8FadingFctr;    /*!< Fading factor */
N    uint8_t        u8SrcAlphaVal;   /*!< Source Alpha value */
N    uint8_t        u8DstAlphaVal;   /*!< Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_perspectiveCfg_st;
N
N
N/**
N* @brief Perspective configuration with blending
N*/
Ntypedef struct tag_rot_perspectiveblendCfg_st
N{
N    ga_colFmt_e    eSrcColFmt;      /*!< Source Color Format Selection */
N    ga_colFmt_e    eDstColFmt;      /*!< Destination Color Format Selection */
N    ga_en_e        eClipWndEn;      /*!< Clipping Window Enable */
N    ga_en_e        eFilterEn;       /*!< Enable Filtering */
N    int16_t        i16OffsetX;      /*!< Dest. Offset X-Coord */
N    int16_t        i16OffsetY;      /*!< Dest. Offset Y-Coord */
N    uint32_t       u32RotPointX;    /*!< Rotation point X */
N    uint32_t       u32RotPointY;    /*!< Rotation point Y */
N#ifdef GA_USE_MATH_LIB
N    float64_t      f64AngleX;       /*!< Perspective Angle X */
N    float64_t      f64AngleY;       /*!< Perspective Angle Y */
N    float64_t      f64AngleZ;       /*!< Perspective Angle Z */
N    float64_t      f64Scale;        /*!< Scale Factor */
N    float64_t      f64ScaleX;       /*!< Scale Factor X */
N    float64_t      f64ScaleY;       /*!< Scale Factor Y */
N#else
S    int32_t        i32AngleX;       /*!< Perspective Angle X */
S    int32_t        i32AngleY;       /*!< Perspective Angle Y */
S    int32_t        i32AngleZ;       /*!< Perspective Angle Z */
S    int32_t        i32ScaleX;       /*!< Scale Factor X */
S    int32_t        i32ScaleY;       /*!< Scale Factor Y */
N#endif
N    ga_en_e        eDstRedProt;     /*!< Destination red color protection */
N    ga_en_e        eDstGreenProt;   /*!< Destination green color protection */
N    ga_en_e        eDstBlueProt;    /*!< Destination blue color protection */
N    ga_en_e        eDstAlphaProt;   /*!< Destination alpha protection */
N    ga_en_e        eSrcRedFad;      /*!< Destination red color protection */
N    ga_en_e        eSrcGreenFad;    /*!< Destination green color protection */
N    ga_en_e        eSrcBlueFad;     /*!< Destination blue color protection */
N    ga_en_e        eSrcAlphaFad;    /*!< Destination alpha protection */
N    uint8_t        u8FadingFctr;    /*!< Fading factor */
N    ga_blendOrd_e  eBldOrd;         /*!< Blend order */
N    uint8_t        u8SrcAlphaVal;   /*!< Source Alpha value */
N    uint8_t        u8DstAlphaVal;   /*!< Destination Alpha value */
N
N    /* Optional */
N    rot_clipWnd_st tClipWnd;
N} rot_perspectiveblendCfg_st;
N
N
N/**
N* @brief Rotation of part of image
N*/
Ntypedef struct tag_rot_mem_part_st
N{
N    /* Source Mem. Params */
N    uint16_t      u16SrcHeight;      /*!< Source Memory Height (Line Number) */
N    uint16_t      u16SrcWidth;       /*!< Source Memory Width (Dots Per Line) */
N    uint32_t      u32SrcAddr;        /*!< Source Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    uint16_t      u16DotCnt;         /*!< Dot Number per line to be blitted */
N
N    /* Destination Mem. Params */
N    uint32_t      u32DstAddr;        /*!< Dest. Memory Addr. First Src. Dot
N                                       (Each function specifies its own
N                                        memory alignment rules) */
N    /* Dest. Image Area Size */
N    uint16_t      u16DstImgWidth;    /*!< Destination Image Width */
N    uint16_t      u16DstImgHeight;   /*!< Destination Image Height */
N} rot_mem_part_st;
N
N
N/**
N* @brief Matrix parameter
N*/
Ntypedef struct tag_GA_MATRIX_t
N{
N    double sx;       /*!< Parameter sx */
N    double shx;      /*!< Parameter shx */
N    double tx;       /*!< Parameter tx */
N    double shy;      /*!< Parameter shy */
N    double sy;       /*!< Parameter sy */
N    double ty;       /*!< Parameter ty */
N    double w0;       /*!< Parameter w0 */
N    double w1;       /*!< Parameter w1 */
N    double w2;       /*!< Parameter w2 */
N} GA_MATRIX_t;
N
N
N/**
N* @brief Coordinate point
N*/
Ntypedef struct tag_GA_COORD_t
N{
N    double x;       /*!< Coordinate x */
N    double y;       /*!< Coordinate y */
N    double z;       /*!< Coordinate z */
N} GA_COORD_t;
N
N
N/**
N* @brief Screenobject
N*/
Ntypedef struct tag_GA_SCREENOBJ_t
N{
N    GA_COORD_t p1;       /*!< Point p1 */
N    GA_COORD_t p2;       /*!< Point p2 */
N    GA_COORD_t p3;       /*!< Point p3 */
N    GA_COORD_t p4;       /*!< Point p4 */
N    GA_COORD_t c;        /*!< Point c */
N} GA_SCREENOBJ_t;
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of round off function for KEIL
N*
N* @note none
N*
N* @param[in] f64Value - The floating point value to be rounded off
N*
N* @return The rounded off value
N*/
N#if defined (__KEIL__)
X#if 1L
Nfloat64_t round(float64_t f64Value);
N#endif
N
N
N/**
N* @brief Implementation of function vRotLib_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N*
N* @return void
N*/
Nvoid vRotLib_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                        uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag);
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Rotate
N*
N* Calculates rotation matrix on hand of angle
N*
N* @note none
N*
N* @param[in] pstMatrix - Pointer to rotation matrix
N* @param[in] f64Angle  - angle in degree 
N*
N* @return void
N*/
Nvoid vRotLib_CalculateTransformationMatrix_Rotate(rot_Mtrx_st* pstMatrix, float64_t f64Angle);
N#else
S/**
S* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Rotate
S*
S* Calculates rotation matrix on hand of angle
S*
S* @note none
S*
S* @param[in] pstMatrix - Pointer to rotation matrix
S* @param[in] i16Angle  - angle in degree 
S*
S* @return void
S*/
Svoid vRotLib_CalculateTransformationMatrix_Rotate(rot_Mtrx_st* pstMatrix, int16_t i16Angle);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Shear
N*
N* Calculates rotation matrix for shear operation
N*
N* @note none
N*
N* @param[in] pstMatrix  - Pointer to rotation matrix
N* @param[in] f64FactorX - Factor X for Shear 
N* @param[in] f64FactorY - Factor Y for Shear 
N*
N* @return void
N*/
Nvoid vRotLib_CalculateTransformationMatrix_Shear(rot_Mtrx_st* pstMatrix, float64_t f64FactorX, float64_t f64FactorY);
N#else
S/**
S* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Shear
S*
S* Calculates rotation matrix for shear operation
S*
S* @note none
S*
S* @param[in] pstMatrix  - Pointer to rotation matrix
S* @param[in] i32FactorX - Factor X for Shear 
S* @param[in] i32FactorY - Factor Y for Shear 
S*
S* @return void
S*/
Svoid vRotLib_CalculateTransformationMatrix_Shear(rot_Mtrx_st* pstMatrix, int32_t i32FactorX, int32_t i32FactorY);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Scale
N*
N* Calculates rotation matrix for scale operation
N*
N* @note none
N*
N* @param[in] pstMatrix  - Pointer to rotation matrix
N* @param[in] f64FactorX - Factor X for scaling 
N* @param[in] f64FactorY - Factor Y for scaling 
N*
N* @return void
N*/
Nvoid vRotLib_CalculateTransformationMatrix_Scale(rot_Mtrx_st* pstMatrix, float64_t f64FactorX, float64_t f64FactorY);
N#else
S/**
S* @brief Implementation of function vRotLib_CalculateTransformationMatrix_Scale
S*
S* Calculates rotation matrix for scale operation
S*
S* @note none
S*
S* @param[in] pstMatrix  - Pointer to rotation matrix
S* @param[in] i32FactorX - Factor X for scaling 
S* @param[in] i32FactorY - Factor Y for scaling 
S*
S* @return void
S*/
Svoid vRotLib_CalculateTransformationMatrix_Scale(rot_Mtrx_st* pstMatrix, int32_t i32FactorX, int32_t i32FactorY);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB 
N/**
N* @brief Implementation of function vRotLib_Rotate
N*
N* Inserts all required parameters for source object rotation
N*
N* @note Please note that this function will perform rotation angle
N*       conversion from degrees to radians.
N*
N* @param[in] pstMem   - Pointer to memory configuration parameters
N* @param[in] pstParam - Pointer to rotation Parameters
N*                       (for more details see struct. desc.)
N* @param[in] f64Angle - Rotation angle (degrees)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_Rotate(rot_mem_st* pstMem, rot_cfg_st* pstParam, float64_t f64Angle,
N                    ga_list_st* pstCmdList);
N#else
S/**
S* @brief Implementation of function vRotLib_Rotate
S*
S* Inserts all required parameters for source object rotation
S*
S* @note Please note that this function will perform rotation angle
S*       conversion from degrees to radians.
S*
S* @param[in] pstMem   - Pointer to memory configuration parameters
S* @param[in] pstParam - Pointer to rotation Parameters
S*                       (for more details see struct. desc.)
S* @param[in] i16Angle - 10times integer rotation angle
S*
S* @param[in,out] pstCmdList - Pointer to the Command List
S*
S* @return void
S*/
Svoid vRotLib_Rotate(rot_mem_st* pstMem, rot_cfg_st* pstParam, int16_t   i16Angle,
S                    ga_list_st* pstCmdList);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB 
N/**
N* @brief Implementation of function vRotLib_Rotate_Part
N*
N* Inserts all required parameters for part source object rotation
N*
N* @note Please note that this function will perform rotation angle
N*       conversion from degrees to radians.
N*
N* @param[in] pstMem   - Pointer to memory configuration parameters
N* @param[in] pstParam - Pointer to rotation Parameters
N*                       (for more details see struct. desc.)
N* @param[in] f64Angle - Rotation angle (degrees)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_Rotate_Part(rot_mem_part_st* pstMem, rot_cfg_st* pstParam, float64_t f64Angle,
N                         ga_list_st* pstCmdList);
N#else
S/**
S* @brief Implementation of function vRotLib_Rotate_Part
S*
S* Inserts all required parameters for part source object rotation
S*
S* @note Please note that this function will perform rotation angle
S*       conversion from degrees to radians.
S*
S* @param[in] pstMem   - Pointer to memory configuration parameters
S* @param[in] pstParam - Pointer to rotation Parameters
S*                       (for more details see struct. desc.)
S* @param[in] i16Angle - 10times integer rotation angle
S*
S* @param[in,out] pstCmdList - Pointer to the Command List
S*
S* @return void
S*/
Svoid vRotLib_Rotate_Part(rot_mem_part_st* pstMem, rot_cfg_st* pstParam, int16_t   i16Angle,
S                         ga_list_st* pstCmdList);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB 
N/**
N* @brief Implementation of function vRotLib_RotateBlend
N*
N* Inserts all required parameters for source object rotation
N*
N* @note Please note that this function will perform rotation angle
N*       conversion from degrees to radians.
N*
N* @param[in] pstMem   - Pointer to memory configuration parameters
N* @param[in] pstParam - Pointer to rotation Parameters
N*                       (for more details see struct. desc.)
N* @param[in] f64Angle - Rotation angle (degrees)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_RotateBlend(rot_mem_st* pstMem, rot_blendcfg_st* pstParam, float64_t f64Angle,
N                         ga_list_st* pstCmdList);
N#else
S/**
S* @brief Implementation of function vRotLib_RotateBlend
S*
S* Inserts all required parameters for source object rotation
S*
S* @note Please note that this function will perform rotation angle
S*       conversion from degrees to radians.
S*
S* @param[in] pstMem   - Pointer to memory configuration parameters
S* @param[in] pstParam - Pointer to rotation Parameters
S*                       (for more details see struct. desc.)
S* @param[in] i16Angle - 10times integer rotation angle
S*
S* @param[in,out] pstCmdList - Pointer to the Command List
S*
S* @return void
S*/
Svoid vRotLib_RotateBlend(rot_mem_st* pstMem, rot_blendcfg_st* pstParam, int16_t   i16Angle,
S                         ga_list_st* pstCmdList);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vRotLib_RotateBlend_Part
N*
N* Inserts all required parameters for part source object rotation
N*
N* @note Please note that this function will perform rotation angle
N*       conversion from degrees to radians.
N*
N* @param[in] pstMem   - Pointer to memory configuration parameters
N* @param[in] pstParam - Pointer to rotation Parameters
N*                       (for more details see struct. desc.)
N* @param[in] f64Angle - Rotation angle (degrees)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_RotateBlend_Part(rot_mem_part_st* pstMem, rot_blendcfg_st* pstParam, float64_t f64Angle,
N                              ga_list_st* pstCmdList);
N#else
S/**
S* @brief Implementation of function vRotLib_RotateBlend_Part
S*
S* Inserts all required parameters for part source object rotation
S*
S* @note Please note that this function will perform rotation angle
S*       conversion from degrees to radians.
S*
S* @param[in] pstMem   - Pointer to memory configuration parameters
S* @param[in] pstParam - Pointer to rotation Parameters
S*                       (for more details see struct. desc.)
S* @param[in] i16Angle - 10times integer rotation angle
S*
S* @param[in,out] pstCmdList - Pointer to the Command List
S*
S* @return void
S*/
Svoid vRotLib_RotateBlend_Part(rot_mem_part_st* pstMem, rot_blendcfg_st* pstParam, int16_t   i16Angle,
S                              ga_list_st* pstCmdList);
N#endif
N
N
N#ifdef GA_USE_MATH_LIB 
N/**
N* @brief Implementation of function vRotLib_Shear
N*
N* Inserts all required parameters for source object shearing operation
N*
N* @note none
N*
N* @param[in] pstMem     - Memory configuration parameters
N* @param[in] pstParam   - Shearing Parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_Shear(rot_mem_st* pstMem, rot_sscalCfg_st* pstParam,
N                   ga_list_st* pstCmdList);
N
N
N/**
N* @brief Implementation of function vRotLib_ShearBlend
N*
N* Inserts all required parameters for source object shearing operation
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to shearing Parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_ShearBlend(rot_mem_st* pstMem, rot_sscalblendCfg_st* pstParam,
N                        ga_list_st* pstCmdList);
N
N#endif /* GA_USE_MATH_LIB */
N
N
N/**
N* @brief Implementation of function vRotLib_Scale
N*
N* Inserts all required parameters for source object scaling operation
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to scaling parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_Scale(rot_mem_st* pstMem, rot_sscalCfg_st* pstParam,
N                   ga_list_st* pstCmdList);
N
N
N/**
N* @brief Implementation of function vRotLib_ScaleBlend
N*
N* Inserts all required parameters for source object scaling operation
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to scaling parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_ScaleBlend(rot_mem_st* pstMem, rot_sscalblendCfg_st* pstParam,
N                        ga_list_st* pstCmdList);
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vRotLib_Perspective
N*
N* Inserts all required parameters for source object perspective operation
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to perspective parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_Perspective(rot_mem_st* pstMem, rot_perspectiveCfg_st* pstParam,
N                         ga_list_st* pstCmdList);
N
N
N/**
N* @brief Implementation of function vRotLib_PerspectiveBlend
N*
N* Inserts all required parameters for source object perspective operation
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to perspective parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_PerspectiveBlend(rot_mem_st* pstMem, rot_perspectiveblendCfg_st* pstParam,
N                              ga_list_st* pstCmdList);
N
N
N/**
N* @brief Implementation of function vRotLib_PerspectiveOGL
N*
N* Inserts all required parameters for source object perspective operation in OpenGL style
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to perspective parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_PerspectiveOGL(rot_mem_st * pstMem, rot_perspectiveCfg_st * pstParam, ga_list_st * pstCmdList);
N
N
N/**
N* @brief Implementation of function vRotLib_PerspectiveOGL
N*
N* Inserts all required parameters for source object perspective operation in OpenGL style
N*
N* @note none
N*
N* @param[in] pstMem     - Pointer to memory configuration parameters
N* @param[in] pstParam   - Pointer to perspective parameters
N*                         (for more details see struct. desc.)
N*
N* @param[in,out] pstCmdList - Pointer to the Command List
N*
N* @return void
N*/
Nvoid vRotLib_PerspectiveBlendOGL(rot_mem_st * pstMem, rot_perspectiveblendCfg_st * pstParam, ga_list_st * pstCmdList);
N
N#endif
N
N
N/****************************************************************************/
N
N
N#endif /* ROTATION_LIB_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 31 "..\..\..\..\mw\inc\gfunctions.h" 2
N#include "ga.h"
L 1 "..\..\..\..\lldd\inc\ga.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : Graphic Accelerator
N*                 Reference Low-Level Driver
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Graphic Accelerator
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.19 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef GA_H
N#define GA_H
N
N/*======================================
N             Include Files
N=======================================*/
N#include "ga_common.h"
N/*======================================
N                Defs
N=======================================*/
N
N#define LLDD_GA_H_REVISION     "$Revision: 1.19 $"
N#define LLDD_GA_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/* Timeout */
N#define GA_TIMEOUT  10000
N
N/* Size of Draw Engine Filter RAM (in doublewords) */
N#define GA_DE_FILTER_SIZE 64
N
N/* GA Interrupt Masks */
N#define GA_IRQ_MASK_CENDIM  0x00000001U    /* GA Command End Interrupt Mask.                          */
N#define GA_IRQ_MASK_CSCEIM  0x00000004U    /* Command Scheduler Command Error Interrupt Mask          */
N#define GA_IRQ_MASK_CSLEIM  0x00000008U    /* Command Scheduler Command List Executed Interrupt Mask  */
N#define GA_IRQ_MASK_WBWIM   0x00000010U    /* GA Write Buffer Write Bus-Error Interrupt Mask          */
N#define GA_IRQ_MASK_WBRIM   0x00000020U    /* GA Write Buffer Read Bus-Error Interrupt Mask           */
N#define GA_IRQ_MASK_CBIM    0x00000040U    /* GA Cache Buffer Bus-Error Interrupt Mask                */
N#define GA_IRQ_MASK_RBIM    0x00000080U    /* GA Read Buffer Bus-Error Interrupt Mask                 */
N#define GA_IRQ_MASK_CSLUIM  0xFFFFFF00U    /* Command List User Interrupt Mask 0 – 23                 */
N
N/*======================================
N                Enums
N=======================================*/
N/****************************************
N*         GAIMR Param.Values
N****************************************/
N/* IRQ Mask */
Ntypedef enum tag_ga_irqen_e
N{
N    GA_IRQ_EN  = 0x1u,     /* Enable IRQ */
N    GA_IRQ_DIS = 0x0u      /* Disable IRQ */
N} ga_irqen_e;
N
N/* Bus type */
Ntypedef enum tag_ga_bus_type_e
N{
N    GA_READ_BUF_BUS        = 0x00U,
N    GA_CACHE_BUF_BUS       = 0x01U,
N    GA_WRITE_BUF_READ_BUS  = 0x02U,
N    GA_WRITE_BUF_WRITE_BUS = 0x03U,
N    GA_MAX_TYPE_BUS        = 0x04U
N} ga_bus_type_e;
N
N/* Read / Write Direction */
Ntypedef enum tag_ga_buserr_dir_e
N{
N    GA_BUSERR_READ_TRANSF   = 0x0U,
N    GA_BUSERR_WRITE_TRANSF  = 0x1U
N} ga_buserr_dir_e;
N
N/* Burs error Type */
Ntypedef enum tag_ga_buserr_bursttype
N{
N    GA_BUSERR_BURST_TYPE_FIXED   = 0x0U,
N    GA_BUSERR_BURST_TYPE_INCR    = 0x1U
N} ga_buserr_bursttype;
N
N/* Burst Size */
Ntypedef enum tag_ga_buserr_burstsize
N{
N    GA_BUSERR_BURST_1BYTE     = 0x0U,
N    GA_BUSERR_BURST_2BYTE     = 0x1U,
N    GA_BUSERR_BURST_4BYTE     = 0x2U,
N    GA_BUSERR_BURST_81BYTE    = 0x3U,
N    GA_BUSERR_BURST_16BYTE    = 0x4U,
N    GA_BUSERR_BURST_32BYTE    = 0x5U,
N    GA_BUSERR_BURST_64BYTE    = 0x6U,
N    GA_BUSERR_BURST_128BYTE   = 0x7U
N} ga_buserr_burstsize;
N
N
N/* Response Type */
Ntypedef enum tag_ga_buserr_resptype
N{
N    GA_BUSERR_RESP_OK        = 0x0U,
N    GA_BUSERR_RESP_EXOKAY    = 0x1U,
N    GA_BUSERR_RESP_SLVERR    = 0x2U,
N    GA_BUSERR_RESP_DECERR    = 0x3U
N} ga_buserr_resptype;
N
N/* Memory Protection Region */
Ntypedef enum tag_ga_memory_region_e
N{
N    GA_MEMORY_PROT_REGION_0   = 0x0U,
N    GA_MEMORY_PROT_REGION_1   = 0x1U,
N    GA_MEMORY_PROT_REGION_MAX = 0x2U
N} ga_memory_region_e;
N
N/*======================================
N              Structures
N=======================================*/
N/* GA bus Error Control Signal-Structure */
Ntypedef struct tag_ga_bus_err_ctrl_st
N{
N    ga_buserr_dir_e      eDirection;       /* Read / Write direction */
N    ga_buserr_bursttype  eBurstType;       /* Burst type */
N    ga_buserr_burstsize  eBurstSize;       /* Burst size */
N    ga_buserr_resptype   eRespType;        /* Response Type */
N    uint8_t              u8ByteEnables;    /* Byte-enables for the erroneous transfer. */
N    uint8_t              u8ID;             /* ID tag of the read/write transaction that triggered an error response. */
N    uint8_t              u8BurstLength;    /* Burst length of the read/write transaction that triggered an error response */
N} ga_bus_err_ctrl_st;
N
N/*======================================
N      Exported Function Prototypes
N=======================================*/
N
N/****************************************************************************
N *
N * Function:      vGA_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8CommonRevision - pointer to common header revision string
N *                pau8CommonTag      - pointer to common header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                    uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                    uint8_t** pau8CommonRevision, uint8_t** pau8CommonTag,
N                    uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetMaxUsedBuffSize
N *
N * Purpose:       Resets the counter for used buffer of command list
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ResetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      u32Ga_GetMaxUsedBuffSize
N *
N * Purpose:       To get max. used size of command buffer. This API can be
N *                used to optimize the need size of "GA_CMD_MAX" in ga_list_st
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: used size buffer in Double Words
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMaxUsedBuffSize(void);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_GetLastCmdBuffStatus
N *
N * Purpose:       returns the information if there was enough space free for
N *                command over API
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: space status for command list
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_GetLastCmdBuffStatus(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetLastCmdSize
N *
N * Purpose:       returns the uesed buffer size for last API call (in case it
N *                was enough memory in buffer) or it returns needed size of buffer
N *                for last API call (if there was not enough memory in command buffer)
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: sized of used buffer
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetLastCmdSize(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_CheckList
N *
N * Purpose:       To check whether there is enough space in command buffer
N *                to wrote some doble words 
N *
N * Inputs:        pstCmdList  - pointer to command list
N *                u32NeededDW - needed double words 
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED  requested number of commands will not fit into list
N *                C_SUCCESS requested number of commands will fit into list   
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32GA_CheckList(ga_list_st* pstCmdList, uint32_t u32NeededDW);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ResetList
N *
N * Purpose:       Resets the Command List
N *
N * Inputs:        pstCmdList - Pointer to command list
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   The pointer to current list position will be reset, the
N *                content of the list will remain un-touched.
N *
N ***************************************************************************/
Nvoid vGA_ResetList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CloseList
N *
N * Purpose:       Closes the given list by inserting CSEND command
N *
N * Inputs:        pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CloseList(ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SyncList
N *
N * Purpose:       Inserts the VSYNC command in the command list in order to
N *                synchronize the execution of the list with vertical (VSYNC)
N *                signal from the GDC or Frame Grabber. When the command
N *                sceduler reaches this command it will stop the list
N *                execution until next VSYNC signal.
N *
N * Inputs:        eModul     - Modul selection to wait on (GDC/FG)
N *                pstCmdList - Pointer to Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SyncList(ga_modul_e eModule, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetUserInt
N *
N * Purpose:       defines Interrupt to CPU
N *
N * Inputs:        u8Number   - Interrupt number
N *                pstCmdList - Pointer to the Command List
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetUserInt(uint8_t u8Number, ga_list_st* pstCmdList);
N
N
N/****************************************************************************
N *
N * Function:      vGA_Enable
N *
N * Purpose:       Enables/Disables the Graphic Accelerator
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_Enable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ReadAheadEnable
N *
N * Purpose:       Enables/Disables ReadBuffer Read Ahead feature
N *
N * Inputs:        eEn - Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ReadAheadEnable(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      i32GA_Reset
N *
N * Purpose:       Resets the Graphic Accelerator
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS - Reset successful
N *                C_FAILED  - Reset timeout (Reset was not completted in
N *                            predefined time interval)
N *
N * Limitations:   The function will wait the reset to complete (it can take
N *                until recent bus cycle execution is finished)
N *
N ***************************************************************************/
Nint32_t i32GA_Reset(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetCmdListAddr
N *
N * Purpose:       Sets the physical address of the current command list
N *
N * Inputs:        u32Addr  - Physical address of the command list
N *                           (Must be 64-bit alligned -> uiAddr[2:0] = 0x0)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   Make sure that when calling this function command scheduler
N *                is NOT executing a command list !!! Please note, that after
N *                the address is once written, the GA will automatically
N *                start the command list execution.
N *
N ***************************************************************************/
Nvoid vGA_SetCmdListAddr(uint32_t u32Addr);
N
N
N/****************************************************************************
N *
N * Function:      u8GA_GetStatus
N *
N * Purpose:       Reads the Graphic Accelerator Status register
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA Status Register (GASR) value
N *
N * Limitations:   The caller must parse returned status byte. For this
N *                purpose see the description of GASR Register.
N *
N ***************************************************************************/
Nuint8_t u8GA_GetStatus(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListFinished
N *
N * Purpose:       Indicates that the operation of a command list was finished or
N *                the GA was reset. This bit will be set to zero, when a new pointer
N *                is written.
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  command List Finished (ready to get new values)
N *                C_FALSE: command List is not Finished (not ready to get new values)
N *
N * Limitations: 
N *
N ***************************************************************************/
Nbool_t boGA_CmdListFinished(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_CmdListError
N *
N * Purpose:       This function shows if the Command Scheduler detects an invalid command
N *                or not. The Graphics Accelerator halts its operation and has to be reset
N *                if error is any detected. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  any Error detected by command list
N *                C_FALSE: no error detected
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdListError(void);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      boGA_CmdReg_IsBusy
N *
N * Purpose:       This function shows when any of the GA engines is currently operating.
N *                Then also the write access to many registers is prohibited.
N *                NOTE:
N *                  This function should be used from user by using direct comamnd 
N *                  registers instead of command list, before writing new commands. 
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: C_TRUE:  GA engine is busy.
N *                C_FALSE: GA engine is ready (not busy).
N *
N * Limitations:   
N *
N ***************************************************************************/
Nbool_t boGA_CmdReg_IsBusy(void);
N#endif
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetIrqCause
N *
N * Purpose:       Reads the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: GA IRQ Cause value
N *
N * Limitations:   The calling function must parse returned IRQ cause byte.
N *                For this purpose see the GAICR register description.
N *                Please note that the funtion will automatically clear
N *                the interrupt source !!!
N *
N ***************************************************************************/
Nuint32_t u32GA_GetIrqCause(void);
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCause
N *
N * Purpose:       Clears the Graphic Accelerator Interrupt Cause
N *
N * Inputs:        u32CauseMask: Mask to clear the bits ("1" in the mask means clear Bit)
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCause(uint32_t u32CauseMask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetIrqMask
N *
N * Purpose:       Sets all GA Interrupt masks in one shot
N *
N * Inputs:        u32Mask - Interrupt Mask. For this purpose you may use defines:
N *                         GA_IRQ_MASK_CENDIM, GA_IRQ_MASK_CSCEIM, GA_IRQ_MASK_CSLEIM,
N *                         GA_IRQ_MASK_WBWIM, GA_IRQ_MASK_WBRIM, GA_IRQ_MASK_CBIM,
N *                         GA_IRQ_MASK_RBIM, GA_IRQ_MASK_CSLUIM   
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetIrqMask(uint32_t u32Mask);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableUserIrq
N *
N * Purpose:       Enables/Disables interrupt to CPU
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *		  u8Number - interrupt line to be enabled/disabled
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableUserIrq(uint8_t u8Number, ga_en_e eEn);
N
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_EnableIrqCmdEnd
N *
N * Purpose:       Enables/Disables GA Command End Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_EnableIrqCmdEnd(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_CmdReg_ClearIrqCmdEnd
N *
N * Purpose:       Clears GA Command End Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_CmdReg_ClearIrqCmdEnd(void);
N
N
N#endif
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSLEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command List
N *                Executed Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSLEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSLEI
N *
N * Purpose:       Clears Command Scheduler Command List Executed Interrupt. 
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSLEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqCSCEI
N *
N * Purpose:       Enables/Disables Command Scheduler Command Error IRQ
N *                Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqCSCEI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqCSCEI
N *
N * Purpose:       Clears GA Command Scheduler Command Error IRQ
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqCSCEI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_SetGADelay
N *
N * Purpose:       Sets the minimum delay in System Clock cycles between two
N *                consecutive memory accesses performed by any Graphics 
N *                Accelerator engine
N *
N * Inputs:        u16Delay: Delay Value (0x0000 .. 0xFFFF)
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_SetGADelay(uint16_t u16Delay);
N
N
N/****************************************************************************/
N
N#ifndef _EXTENDED_GA_APIS_DISABLED_
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBWI
N *
N * Purpose:       Enables/Disables GA Write Buffer Write Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBWI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBWI
N *
N * Purpose:       Clears GA Write Buffer Write Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBWI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGAWBRI
N *
N * Purpose:       Enables/Disables GA Write Buffer Read Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGAWBRI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGAWBRI
N *
N * Purpose:       Clears GA Write Buffer Read Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGAWBRI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGACBIM
N *
N * Purpose:       Enables/Disables GA Cache Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGACBI(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGACBI
N *
N * Purpose:       Clears GA Cache Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGACBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableIrqGARBI
N *
N * Purpose:       Enables/Disables GA Read Buffer Error Interrupt
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableIrqGARBI(ga_en_e eEn);
N
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearIrqGARBI
N *
N * Purpose:       Clears GA Read Buffer Error Interrupt
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearIrqGARBI(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearUserIrq
N *
N * Purpose:       Clears GA Command List User Interrupt 0 - 23
N *
N * Inputs:        u8CmdListIntr: No. of Interruot (0..23) to be cleared
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearUserIrq(uint8_t u8CmdListIntr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrAddr
N *
N * Purpose:       Returns the address after bus error on GA 
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       pu32BusErrAddr: Pointer to bus error address
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: NULL pointer
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrAddr(ga_bus_type_e eBusType, uint32_t* pu32BusErrAddr);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetBusErrCtrlStatus
N *
N * Purpose:       Returns the triggering access’s control status after bus error on GA
N *
N * Inputs:        eBusType  Related Bus
N *
N * Outputs:       control status structure
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_GetBusErrCtrlStatus(ga_bus_type_e eBusType, ga_bus_err_ctrl_st* pstCtrlStatus);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetMemoryProtRegionAddr
N *
N * Purpose:       Defines the lower and upper address of the memory region
N *                0 or 1 (primary, secondary) GA is allowed to perform write accesses.
N *                Write accesses outside the memory regions are discarded.
N *                NOTE:
N *                   The memory regions are defined with a granularity of 4Kbyte.
N *
N * Inputs:        eRegion  Related Region (0/1)
N *                u32LowAddress: Lower protected address
N *                u32HighAddress: Higher protected address
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong parameter
N *
N * Limitations:   Process one controller at a time
N *
N ***************************************************************************/
Nbool_t boGA_SetMemoryProtRegionAddr(ga_memory_region_e eRegion, uint32_t u32LowAddress, uint32_t u32HighAddress);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecConfigIrq
N *
N * Purpose:       Enables/Disables interrupt, set if a non-privileged access 
N *                tries to write to GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR,
N *                or GAMPIMR.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecConfigIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_EnableMemoryProtecAccessIrq
N *
N * Purpose:       Enables/Disables interrupt, set if GA tries to write to 
N *                memory outside the address range defined by GAMR0L-GAMR0H 
N *                and GAMR1L-GAMR1H.
N *
N * Inputs:        eEn - Interrupt Enable/Disable parameter
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_EnableMemoryProtecAccessIrq(ga_en_e eEn);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecConfigIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to have a non-privileged access 
N *                tries to write to protection control registers
N *                (GAMR0L, GAMR0H, GAMR1L, GAMR1H, GAMPICR, or GAMPIMR)
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecConfigIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      vGA_ClearMemoryProtecAccessIrq
N *
N * Purpose:       Clears interrupt generated if GA tries to write to memory 
N *                outside the address range defined by GAMR0L-GAMR0H and GAMR1L-GAMR1H
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vGA_ClearMemoryProtecAccessIrq(void);
N
N
N/****************************************************************************
N *
N * Function:      u32GA_GetMemoryProtecErr_CaptAddr
N *
N * Purpose:       Get the address of the first write access performed by the 
N *                Write Buffer’s write interface that caused a memory protection
N *                violation. The register is automatically set by the Graphics 
N *                Accelerator in case of a protection violation, it is reset to
N *                zero automatically if the corresponding interrupt bit GAMPI is
N *                cleared in the Graphics Accelerator Interrupt Cause Register (GAMPICR).
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: Address caused portection error
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32GA_GetMemoryProtecErr_CaptAddr(void);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetGeneralPurposeRegister
N *
N * Purpose:       Set one of 32 Purpose Registers of GA, which are used to define  
N *                the required parameters for the triggered engine.
N *                Read access is possible all the time, write access is only allowed
N *                if no engine is currently operating (GASR.BUSY=0). Nevertheless, 
N *                it is recommended to configure these registers using Command Lists.
N *
N * Inputs:        u8RegNo      No. of Register (0..31)
N *                u32RegValue: Register value to be written
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo or GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t u32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_GetGeneralPurposeRegister
N *
N * Purpose:       Get content of one of 32 Purpose Registers of GA, which are used   
N *                to define the required parameters for the triggered engine.
N *
N * Inputs:        u8RegNo       No. of Register (0..31)
N *                pu32RegValue: Pointer to Register value to be read
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: Wrong RegNo NULL pointer 
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_GetGeneralPurposeRegister (uint8_t u8RegNo, uint32_t* pu32RegValue);
N
N
N/****************************************************************************
N *
N * Function:      boGA_SetCommandRegisterLowHigh
N *
N * Purpose:       Set command register directly (as alternative to command List).
N *                For this mode, user should take care that GA should be ready 
N *                (not busy) before writng in registers. 
N *
N * Inputs:        u32LowValue:  Lower 32 bits of 64 bits command (0..31)
N *                u32HighValue: Higher 32 bits of 64 bits command (32..63)
N *                NOTE:
N *                  1) API should write first Lowe Part and then higher Part. 
N *                    By writing of higehr word thorugh API GA will be trigegred 
N *                    to execute command if it was not busy before.
N *                  2) Related general purpose registers for command should be
N *                     written before, 
N *
N * Outputs:       none
N *
N * Return Values: No Error?
N *                C_TRUE:  No Error
N *                C_FALSE: GA was busy and cannot accept new register values.
N *
N * Limitations:   Process one controller at a time. Api cannot be executed if GA is busy.
N *
N ***************************************************************************/
Nbool_t boGA_SetCommandRegisterLowHigh (uint32_t u32LowValue,  uint32_t u32HighValue);
N
N
N#endif /* _EXTENDED_GA_APIS_DISABLED_ */
N
N#endif /* GA_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 32 "..\..\..\..\mw\inc\gfunctions.h" 2
N#include "png.h"
L 1 "..\..\..\..\lldd\inc\png.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : PNG-decoder low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : PNG
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.13 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_7_GFX $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef PNG_H
N#define PNG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N/*********************************************
N*           Disable Misra Warnings/Rules     *
N**********************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : No reuse of identifiers */
S
N#endif
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_PNG_H_REVISION     "$Revision: 1.13 $"
N#define LLDD_PNG_H_TAG          "$Name: LLDD_1_7_GFX $"
N
N/*********************************************/
N
N#define PNG_VIRTUAL_START_ADDRESS           (0x70000000)
N#define PNG_VIRTUAL_STREAM_LENGTH           (0x00800000)
N
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_0  (PNG_VIRTUAL_START_ADDRESS + 0x0*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_1  (PNG_VIRTUAL_START_ADDRESS + 0x1*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_2  (PNG_VIRTUAL_START_ADDRESS + 0x2*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_3  (PNG_VIRTUAL_START_ADDRESS + 0x3*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_4  (PNG_VIRTUAL_START_ADDRESS + 0x4*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_5  (PNG_VIRTUAL_START_ADDRESS + 0x5*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_6  (PNG_VIRTUAL_START_ADDRESS + 0x6*PNG_VIRTUAL_STREAM_LENGTH)
N#define PNG_VIRTUAL_START_ADDRESS_STREAM_7  (PNG_VIRTUAL_START_ADDRESS + 0x7*PNG_VIRTUAL_STREAM_LENGTH)
N
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_0    (PNG_VIRTUAL_START_ADDRESS_STREAM_0 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_1    (PNG_VIRTUAL_START_ADDRESS_STREAM_1 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_2    (PNG_VIRTUAL_START_ADDRESS_STREAM_2 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_3    (PNG_VIRTUAL_START_ADDRESS_STREAM_3 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_4    (PNG_VIRTUAL_START_ADDRESS_STREAM_4 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_5    (PNG_VIRTUAL_START_ADDRESS_STREAM_5 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_6    (PNG_VIRTUAL_START_ADDRESS_STREAM_6 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N#define PNG_VIRTUAL_END_ADDRESS_STREAM_7    (PNG_VIRTUAL_START_ADDRESS_STREAM_7 + PNG_VIRTUAL_STREAM_LENGTH - 1)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* stream */
Ntypedef enum tag_png_stream_e
N{
N   PNG_STREAM_0 = 0,                      /* stream 0 */
N   PNG_STREAM_1 = 1,                      /* stream 1 */
N   PNG_STREAM_2 = 2,                      /* stream 2 */
N   PNG_STREAM_3 = 3,                      /* stream 3 */
N   PNG_STREAM_4 = 4,                      /* stream 4 */
N   PNG_STREAM_5 = 5,                      /* stream 5 */
N   PNG_STREAM_6 = 6,                      /* stream 6 */
N   PNG_STREAM_7 = 7                       /* stream 7 */
N} png_stream_e;
N
N/* enable/disable */
Ntypedef enum tag_png_enable_e
N{
N   PNG_DIS = 0,                           /* disable */
N   PNG_EN  = 1                            /* enable  */
N} png_enable_e;
N
N/* interrupt type */
Ntypedef enum tag_png_int_type_e
N{
N   PNG_INT_LEVEL = 0,                     /* level interrupt */
N   PNG_INT_PULSE = 1                      /* pulse interrupt  */
N} png_int_type_e;
N
N/* interrupts */
Ntypedef enum tag_png_int_e
N{
N   PNG_INT_VSWAEI    = 0,                 /* VSWAEI interrupt */
N   PNG_INT_VSUAEI    = 1,                 /* VSUAEI interrupt  */
N   PNG_INT_CW2ROEI   = 2,                 /* CW2ROEI interrupt */
N   PNG_INT_CRSVAEI   = 3,                 /* CRSVAEI interrupt  */
N   PNG_INT_CPEI      = 4,                 /* CPEI interrupt */
N   PNG_INT_SWBEI     = 5,                 /* SWBEI interrupt  */
N   PNG_INT_SSBEI     = 6,                 /* SSBEI interrupt  */
N   /*********************************/
N   PNG_INT_BJMPEI    = 7,                 /* BJMPEI interrupt */
N   PNG_INT_UFMTEI    = 8,                 /* UFMTEI interrupt */
N   PNG_INT_OOCEI     = 9,                 /* OOCEI interrupt */
N   PNG_INT_CHSEI     = 10,                /* CHSEI interrupt */
N   PNG_INT_EYEOSEI   = 11,                /* EYEOSEI interrupt */
N   PNG_INT_NOEOSEI   = 12,                /* NOEOSEI interrupt */
N   PNG_INT_CMPEI     = 13,                /* CMPEI interrupt */
N   PNG_INT_BTYPEEI   = 14,                /* BTYPEEI interrupt */
N   PNG_INT_DISTEI    = 15,                /* DISTEI interrupt */
N   PNG_INT_NCBSEI    = 16,                /* NCBSEI interrupt */
N   PNG_INT_DECEI     = 17,                /* DECEI interrupt */
N   PNG_INT_FJMPWI    = 18,                /* FJMPWI interrupt */
N   PNG_INT_UCHNKWI   = 19,                /* UCHNKWI interrupt */
N   PNG_INT_PDICTWI   = 20,                /* PDICTWI interrupt */
N   PNG_INT_ULLWI     = 21,                /* ULLWI interrupt */
N   PNG_INT_UDISTWI   = 22,                /* UDISTWI interrupt */
N   PNG_INT_OFCWI     = 23,                /* OFCWI interrupt */
N   PNG_INT_IHDRDI    = 24,                /* IHDRDI interrupt */
N   PNG_INT_PLTEDI    = 25,                /* PLTEDI interrupt */
N   PNG_INT_IDATDI    = 26,                /* IDATDI interrupt */
N   PNG_INT_IENDDI    = 27,                /* IENDDI interrupt */
N   PNG_INT_DCDSI     = 28,                /* DCDSI interrupt */
N   PNG_INT_SIDLEI    = 29,                /* SIDLEI interrupt */
N   PNG_INT_DSFFULLIE = 30                 /* DSFFULLIE interrupt */
N} png_int_e;
N
N/* interrupt status */
Ntypedef enum tag_png_int_status_e
N{
N   PNG_INT_NOT_PENDING = 0,               /* interrupt is not pending */
N   PNG_INT_PENDING     = 1                /* interrupt is pending */
N} png_int_status_e;
N
N/* transfer type */
Ntypedef enum tag_png_transfer_type_e
N{
N    PNG_READ_TRANSFER  = 0,               /* read transfer */
N    PNG_WRITE_TRANSFER = 1                /* write transfer */
N} png_transfer_type_e;
N
N/* burst type */
Ntypedef enum tag_png_burst_type_e
N{
N    PNG_FIXED_BURST = 0,                  /* fixed burst */
N    PNG_INCR_BURST  = 1                   /* increment burst */
N} png_burst_type_e;
N
N/* response type */
Ntypedef enum tag_png_response_type_e
N{
N    PNG_RESPONSE_OKAY   = 0,              /* OKAY */
N    PNG_RESPONSE_EXOKAY = 1,              /* EXOKAY */
N    PNG_RESPONSE_SLVERR = 2,              /* SLVERR */
N    PNG_RESPONSE_DECERR = 3               /* DECERR */
N} png_response_type_e;
N
N/* decode mode */
Ntypedef enum tag_png_decode_mode_e
N{
N    PNG_SINGLE_DECODE_MODE = 0,           /* single decode mode */
N    PNG_LOOP_DECODE_MODE   = 1            /* loop decode mode */
N} png_decode_mode_e;
N
N/* decoded output format */
Ntypedef enum tag_png_decoded_output_format_e
N{
N    PNG_OUTPUT_FORMAT_RGBA32 = 0x4,       /* RGBA32 */
N    PNG_OUTPUT_FORMAT_RGB24  = 0x2,       /* RGB24 */
N    PNG_OUTPUT_FORMAT_A8     = 0x1        /* A8 */
N} png_decoded_output_format_e;
N
N/* stream phase status */
Ntypedef enum tag_png_phase_status_e
N{
N   PNG_IDLE_PHASE   = 0,                  /* stream in idle phase */
N   PNG_DECODE_PHASE = 1                   /* stream in decode phase  */
N} png_phase_status_e;
N
N/* palette table loaded */
Ntypedef enum tag_png_pt_loaded_e
N{
N   PNG_PALETTE_TABLE_NOT_LOADED = 0,      /* palette table not loaded */
N   PNG_PALETTE_TABLE_LOADED     = 1       /* palette table loaded  */
N} png_pt_loaded_e;
N
N/* current chunk */
Ntypedef enum tag_png_chunk_e
N{
N    PNG_CHUNK_IHDR  = 0,                  /* IHDR */
N    PNG_CHUNK_IPLTE = 1,                  /* IPLTE */
N    PNG_CHUNK_IDAT  = 2,                  /* IDAT */
N    PNG_CHUNK_IEND  = 3                   /* IEND */
N} png_chunk_e;
N
N/* bit depth */
Ntypedef enum tag_png_bit_depth_e
N{
N    PNG_BIT_DEPTH_1  = 0x1,               /* bit depth 1 */
N    PNG_BIT_DEPTH_2  = 0x2,               /* bit depth 2 */
N    PNG_BIT_DEPTH_4  = 0x4,               /* bit depth 4 */
N    PNG_BIT_DEPTH_8  = 0x8,               /* bit depth 8 */
N    PNG_BIT_DEPTH_16 = 0x10               /* bit depth 16 */
N} png_bit_depth_e;
N
N/* color format */
Ntypedef enum tag_png_color_format_e
N{
N    PNG_COLOR_FORMAT_GRAY     = 0,        /* gray */
N    PNG_COLOR_FORMAT_RGB888   = 2,        /* truecolor */
N    PNG_COLOR_FORMAT_CLUT     = 3,        /* indexed */
N    PNG_COLOR_FORMAT_GRAYA    = 4,        /* gray with alpha */
N    PNG_COLOR_FORMAT_RGBA8888 = 6         /* truecolor with alpha */
N} png_color_format_e;
N
N/* color format */
Ntypedef enum tag_png_burst_size_e
N{
N    PNG_BURST_1_BYTE     = 0,  /* 1 byte burst size   */
N    PNG_BURST_2_BYTE     = 1,  /* 2 byte burst size   */
N    PNG_BURST_4_BYTE     = 2,  /* 4 byte burst size   */
N    PNG_BURST_8_BYTE     = 3,  /* 8 byte burst size   */
N    PNG_BURST_16_BYTE    = 4,  /* 16 byte burst size  */
N    PNG_BURST_32_BYTE    = 5,  /* 32 byte burst size  */
N    PNG_BURST_64_BYTE    = 6,  /* 64 byte burst size  */
N    PNG_BURST_128_BYTE   = 7   /* 128 byte burst size */
N} png_burst_size_e;
N
N/* color format */
Ntypedef enum tag_png_bus_error_type_e
N{
N    PNG_SLIDING_WINDOW_ERR  = 0,  /* Sliding window bus error   */
N    PNG_SOURCE_STREAM_ERR   = 1  /* source stream bus error    */
N} png_bus_error_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/* PNG Bus error */
Ntypedef struct tag_png_bus_error_st
N{
N    uint32_t             u32ErrAddress;  /* Bus error address    */
N    png_transfer_type_e  eRWdir;         /* Read/Write Direction */
N    png_burst_type_e     eBurstType;     /* Burst Type           */
N    png_burst_size_e     eBurstSize;     /* Burst Size           */
N    png_response_type_e  eRespType;      /* Response Type        */
N    png_enable_e         eByteEnable;    /* Byte Enables         */
N    uint8_t              u8ID;           /* ID Tag               */
N    uint8_t              u8BurstLen;     /* Burst Length         */
N} png_bus_error_st;
N
N/* Stream status */
Ntypedef struct tag_png_stream_status_st
N{
N    png_phase_status_e   ePhase;          /* stream phase                  */
N    png_pt_loaded_e      ePalTableLoad;   /* palette table loaded          */
N    png_chunk_e          eTypeOfChunk;    /* Type of chunk being processed */
N    uint16_t             u16NoPalEntries; /* No. of palette entries        */
N    uint8_t              u8NoIdatChunks;  /* No. of IDAT chunks            */
N} png_stream_status_st;
N
N/* Stream IHDR Information */
Ntypedef struct tag_png_stream_ihdr_info_st
N{
N    png_bit_depth_e      eBitDepth;       /* number of bits per sample or number of bits per 
N                                             palette index, as determined from the IHDR chunk.*/
N    png_color_format_e   eColorType;      /* Color Type                     */
N    uint8_t              u8ComprMethod;   /* Compression Method             */
N    uint8_t              u8FilterMethod;  /* Filter Method                  */
N    uint8_t              u8InterlMethod;  /* Interlace Method               */
N} png_stream_ihdr_info_st;
N
N/* Stream ZLIB Information */
Ntypedef struct tag_png_stream_zlib_info_st
N{
N    uint8_t   u8ComprMethod;    /* CMF.CF (Compression Method) filed from the ZLIB stream.      */
N    uint8_t   u8ComprInfo;      /* CMF.CINFO (Compression Info) field from the ZLIB stream.     */
N    uint8_t   u8CheckBits;      /* Check bits for CMF and FLG, as received from the ZLIB stream */
N    uint8_t   u8Fdict;          /* FLG.FDICT (i.e. Preset Dictionary) flag received in the ZLIB stream. */
N    uint8_t   u8Flevel;         /* Compression Level” flags received in the ZLIB stream.         */
N} png_stream_zlib_info_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vPNG_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      vPNG_Init
N *
N * Purpose:       Initialisation of PNG-decoder.
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_Init(void);
N
N/****************************************************************************
N *
N * Function:      i32PNG_SetUpStream
N *
N * Purpose:       Configure png-stream and start
N *
N * Inputs:        eStream            Stream
N *                u32StartAddress    Start address of input image
N *                eDecodeMode        Loop decode mode
N *                eOutputFormat      Color output format
N *                u32Width           Image width
N *                u32Height          Image height
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on stream running
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_SetUpStream(png_stream_e eStream, uint32_t u32StartAddress, png_decode_mode_e eDecodeMode,
N                           png_decoded_output_format_e eOutputFormat, uint32_t u32Width, uint32_t u32Height);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetModuleVersion
N *
N * Purpose:       Return module version
N *
N * Inputs:        none
N *
N * Outputs:       none
N *
N * Return Values: module version
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetModuleVersion(void);
N
N/****************************************************************************
N *
N * Function:      vPNG_SetIntType
N *
N * Purpose:       Set PNG-interrupt type
N *
N * Inputs:        eIntType    Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_SetIntType(png_int_type_e eIntType);
N
N/****************************************************************************
N *
N * Function:      i32PNG_EnableGlobalInterruptSingle
N *
N * Purpose:       Enable or disable single interrupt
N *
N * Inputs:        eInt    Interrupt type
N *                eEn     Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_EnableGlobalInterruptSingle(png_int_e eInt, png_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      i32PNG_EnableStreamInterruptSingle
N *
N * Purpose:       Enable or disable single interrupt
N *
N * Inputs:        eStream    Stream
N *                eInt       Interrupt type
N *                eEn        Enable or disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_EnableStreamInterruptSingle(png_stream_e eStream, png_int_e eInt, png_enable_e eEn);
N
N/****************************************************************************
N *
N * Function:      vPNG_EnableGlobalInterruptAll
N *
N * Purpose:       Enable or disable all interrupt
N *
N * Inputs:        u8Value    Interrupt enable or disable value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_EnableGlobalInterruptAll(uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      vPNG_EnableStreamInterruptAll
N *
N * Purpose:       Enable or disable all interrupt
N *
N * Inputs:        eStream    Stream
N *                u8Value    Interrupt enable or disable value
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_EnableStreamInterruptAll(png_stream_e eStream, uint32_t u32Value);
N
N/****************************************************************************
N *
N * Function:      i32PNG_GetGlobalInterruptStatusSingle
N *
N * Purpose:       Get single interrupt status
N *
N * Inputs:        eInt          Interrupt type
N *
N * Outputs:       peIntStatus   pointer to Interrupt status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_GetGlobalInterruptStatusSingle(png_int_e eInt, png_int_status_e * peIntStatus);
N
N/****************************************************************************
N *
N * Function:      i32PNG_GetStreamInterruptStatusSingle
N *
N * Purpose:       Get single interrupt status
N *
N * Inputs:        eStream       Stream
N *                eInt          Interrupt type
N *
N * Outputs:       peIntStatus   pointer to Interrupt status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_GetStreamInterruptStatusSingle(png_stream_e eStream, png_int_e eInt, png_int_status_e * peIntStatus);
N
N/****************************************************************************
N *
N * Function:      u8PNG_GetGlobalInterruptStatusAll
N *
N * Purpose:       Get interrupt status of all interrupt
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint8_t u8PNG_GetGlobalInterruptStatusAll(void);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetStreamInterruptStatusAll
N *
N * Purpose:       Get interrupt status of all interrupt
N *
N * Inputs:        eStream    Stream
N *
N * Outputs:       none
N *
N * Return Values: Interrupt status
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetStreamInterruptStatusAll(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      i32PNG_ClearGlobalInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eInt    Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_ClearGlobalInterruptSingle(png_int_e eInt);
N
N/****************************************************************************
N *
N * Function:      i32PNG_ClearStreamInterruptSingle
N *
N * Purpose:       Clear single interrupt
N *
N * Inputs:        eStream    Stream
N *                eInt       Interrupt type
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_ClearStreamInterruptSingle(png_stream_e eStream, png_int_e eInt);
N
N/****************************************************************************
N *
N * Function:      vPNG_ClearGlobalInterruptAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ClearGlobalInterruptAll(void);
N
N/****************************************************************************
N *
N * Function:      vPNG_ClearStreamInterruptAll
N *
N * Purpose:       Clear all interrupts
N *
N * Inputs:        eStream    Stream
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ClearStreamInterruptAll(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      vPNG_ResetStream
N *
N * Purpose:       Reset png stream
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vPNG_ResetStream(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetBusError
N *
N * Purpose:       Get information about bus error for sliding window or
N *                source stream including bus error address.
N *
N * Inputs:        eErrType         Type of error to get its information
N *
N * Outputs:       pstBussError     Pointer to structue to get error information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetBusError(png_bus_error_type_e eErrType, png_bus_error_st *pstBussError);
N
N/****************************************************************************
N *
N * Function:      ePNG_GetStreamPhaseStatus
N *
N * Purpose:       Get information about stream phase status
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: Stream phase status(IDLE/DECODE)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Npng_phase_status_e ePNG_GetStreamPhaseStatus (png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamStatus
N *
N * Purpose:       Get information about stream status
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamStatus  Pointer to structue to get stream status
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamStatus (png_stream_e eStream, png_stream_status_st *pstStreamStatus);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamIhdrInfo
N *
N * Purpose:       Get information about stream IHDR
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamIhdrInfo  Pointer to structue to get stream IHDR information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamIhdrInfo (png_stream_e eStream, png_stream_ihdr_info_st *pstStreamIhdrInfo);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetStreamZlibInfo
N *
N * Purpose:       Get information about stream ZLIB information
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pstStreamZlibInfo  Pointer to structue to get stream ZLIB information
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetStreamZlibInfo (png_stream_e eStream, png_stream_zlib_info_st *pstStreamZlibInfo);
N
N/****************************************************************************
N *
N * Function:      boPNG_GetImageSize
N *
N * Purpose:       Get width and height of image
N *
N * Inputs:        eStream       Stream to be decoded
N *
N * Outputs:       pu32Width   Pointer to width variable
N *                pu32Height  Pointer to height variable
N *
N * Return Values: C_TRUE/C_FALSE   OK/Error if parameteer wrong
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boPNG_GetImageSize(png_stream_e eStream, uint32_t *pu32Width, uint32_t *pu32Height);
N
N/****************************************************************************
N *
N * Function:      u8PNG_GetDecodedStreamFIFOFillLevel
N *
N * Purpose:       Read current fill level of the FIFO for decoded stream
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: FIFO fill level
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint8_t u8PNG_GetDecodedStreamFIFOFillLevel(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetSSBCurrentAddress
N *
N * Purpose:       Read SSB current address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: SSB current address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetSSBCurrentAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetSWBCurrentAddress
N *
N * Purpose:       Read SWB current address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: SWB current address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetSWBCurrentAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetFSBStartAddress
N *
N * Purpose:       Read FSB start address
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: FSB start address
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetFSBStartAddress(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      u32PNG_GetCurrentVirtualOffset
N *
N * Purpose:       Read current virtual offset
N *
N * Inputs:        eStream    stream to be decoded
N *
N * Outputs:       none
N *
N * Return Values: current virtual offset
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32PNG_GetCurrentVirtualOffset(png_stream_e eStream);
N
N/****************************************************************************
N *
N * Function:      i32PNG_SetPaletteTable
N *
N * Purpose:       Set palette table
N *
N * Inputs:        eStream             stream
N *                pu32PaletteTable    Pointer to palette table
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32PNG_SetPaletteTable(png_stream_e eStream, uint32_t * pu32PaletteTable);
N
N/****************************************************************************/
N/****************************************************************************/
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs endnowarning
N#endif /* defined(__GHS__) || defined(__ghs__) */
N
N#endif /* PNG_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 33 "..\..\..\..\mw\inc\gfunctions.h" 2
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GFUNCTIONS_H_REVISION     "$Revision: 1.18 $"
N#define MW_GFUNCTIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N#ifdef MEASURE_TX
Nextern uint32_t u32TimeMeasure;
N#endif
N
N/*********************************************/
N
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/**
N* @brief Subpixel format selection
N*/
Ntypedef enum tag_subRes_e
N{
N    GA_PIXEL_RES = 0x0U,    /* !< pixel resolution */
N    GA_HIGH_RES  = 0x1U     /* !< 1/16 resolution  */
N} gf_subRes_e;
N
N
N/*********************************************/
N
N/**
N* @brief Matrix modes
N*/
Ntypedef enum tag_matrixmodes_e
N{
N    GA_RE_PROJECTION = 0x0U,    /* !< Projection */
N    GA_RE_MODELVIEW  = 0x1U,    /* !< Model view */
N    GA_RE_IP         = 0x2U     /* !< IP */
N} gf_matrixmodes_e;
N
N
N/*********************************************/
N
N/**
N* @brief GA status
N*/
Ntypedef enum tag_ga_status_e
N{
N    GA_BUSY = 0x0U,    /* !< GA ist busy */
N    GA_IDLE = 0x1U     /* !< GA is idle */
N} gf_ga_status_e;
N
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/**
N* @brief Clipping rectangle structure
N*/
Ntypedef struct tag_cliprect_st
N{
N    uint16_t u16SrcOffsX;           /*!< Horiz. Offset from the begining of the image/buffer (in dots) */
N    uint16_t u16SrcOffsY;           /*!< Vert. Offset from the begining of the image/buffer (in lines) */
N    uint16_t u16Width;              /*!< Width of the rectangle in dots */
N    uint16_t u16Height;             /*!< Height of the rectangle in lines */
N} gf_cliprect_st;
N
N
N/**
N* @brief State structure
N*/
Ntypedef struct tag_gastate_st
N{
N    ga_en_e         eRedChPrtEn;       /*!< RED channel protection enable */
N    ga_en_e         eGreenChPrtEn;     /*!< GREEN channel protection enable */
N    ga_en_e         eBlueChPrtEn;      /*!< BLUE channel protection enable */
N    ga_en_e         eAlphaChPrtEn;     /*!< ALPHA channel protection enable */
N
N    ga_en_e         eSrcRedFad;        /*!< RED channel fading enable */
N    ga_en_e         eSrcGreenFad;      /*!< GREEN channel fading enable */
N    ga_en_e         eSrcBlueFad;       /*!< BLUE channel fading enable */
N    ga_en_e         eSrcAlphaFad;      /*!< ALPHA channel fading enable */
N
N    ga_en_e         eFilterEn;         /*!< Filter enable */
N
N    ga_blendOrd_e   eBlndOrder;        /*!< Blend order */
N
N    blt_fadeMode_e  eFadeMode;         /*!< Fading option */
N    uint8_t         u8FadingFctr;      /*!< Fading factor */
N
N    ga_en_e         eTranspColEn;      /*!< Transparency color option (only 16-bit src) */
N    uint32_t        u32SrcTransVal;    /*!< Source transparency pattern (STPR register) */
N    uint16_t        u16DstTransVal;    /*!< Destination transparency pattern (DTR register) */
N
N    uint8_t         u8SrcAlphaVal;     /*!< Source alpha value */
N    uint8_t         u8DstAlphaVal;     /*!< Destination alpha value */
N
N    transf_Mode_e   eTsfMode;          /*!< Transformation mode (Pixel-/Color-mode) */
N    uint32_t        u32TsfPredefColor; /*!< Predefined color for transformation */
N
N    ga_en_e         eRastOpEn;         /*!< Enabling the raster operation */
N    blt_rastChSel_e eRastOpMode;       /*!< Raster operation mode */
N    blt_rastOpVal_e eRastOpValue;      /*!< Raster operation value */
N
N    ga_en_e         eClipWndEn;        /*!< Clip window enable */
N    uint16_t        u16ClipC1_X;       /*!< Point C1 x-position */
N    uint16_t        u16ClipC1_Y;       /*!< Point C1 y-position */
N    uint16_t        u16ClipC2_X;       /*!< Point C2 x-position */
N    uint16_t        u16ClipC2_Y;       /*!< Point C2 y-position */
N} gf_gastate_st;
N
N
N/**
N* @brief Color channel protection structure
N*/
Ntypedef struct tag_colorprt_st
N{
N    ga_en_e  eRedChPrtEn;    /*!< RED channel protection enable */
N    ga_en_e  eGreenChPrtEn;  /*!< GREEN channel protection enable */
N    ga_en_e  eBlueChPrtEn;   /*!< BLUE channel protection enable */
N} gf_colorprt_st;
N
N
N/**
N* @brief Transparency value structure
N*/
Ntypedef struct tag_transval_st
N{
N    uint32_t u32SrcTransVal;  /*!< Source transparency value */
N    uint16_t u16DstTransVal;  /*!< Destination transparency value */
N} gf_transval_st;
N
N
N/**
N* @brief Alpha value structure
N*/
Ntypedef struct tag_alphaval_st
N{
N    uint8_t u8SrcAlphaVal;  /*!< Source alpha value */
N    uint8_t u8DstAlphaVal;  /*!< Destination alpha value */
N} gf_alphaval_st;
N
N
N/**
N* @brief Parameter for rotation of one image with base
N*/
Ntypedef struct tag_def_st
N{
N    uint16_t u16BlockHeight;    /*!< Height of block */
N    uint16_t u16TipHeight;      /*!< Height of tip */
N    uint16_t u16TipWidth;       /*!< Width of tip */
N} gf_def_st;
N
N
N/**
N* Circle description structure
N*/
Ntypedef struct tag_circle_st
N{
N    drw_Color_st  stColor;           /*!< Color Configuration */
N    drw_Point_st  stCenter;          /*!< Center points */
N    ga_en_e       eAntialEn;         /*!< Anti aliasing option */
N    uint16_t      u16Radius;         /*!< Radius of the circle */
N} gf_circle_st;
N
N
N/**
N* Polygon description structure 
N*/
Ntypedef struct tag_polygon_st
N{
N    drw_Point_st  *pstPolyVertex;        /*!< pointer to vertices of polygon */
N    ga_en_e       eAntialEn;             /*!< Anti aliasing option */
N    drw_Color_st  stColor;               /*!< Color Configuration */
N    uint16_t      u16NumVert;            /*!< number of vertices */
N} gf_polygon_st;
N
N
N/*********************************************/
N
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/**
N* @brief Implementation of function vGf_Gfunctions_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note none
N*
N* @param[in,out] pau8ModuleRevision    - pointer to module revision string
N* @param[in,out] pau8ModuleTag         - pointer to module tag string
N* @param[in,out] pau8HeaderRevision    - pointer to header revision string
N* @param[in,out] pau8HeaderTag         - pointer to header tag string
N* @param[in,out] pau8GfHeaderRevision  - pointer to gf-header revision string
N* @param[in,out] pau8GfHeaderTag       - pointer to gf-header tag string
N* @param[in,out] pau8DefHeaderRevision - pointer to definition-header revision string
N* @param[in,out] pau8DefHeaderTag      - pointer to definition-header tag string
N*
N* @return void
N*/
Nvoid vGf_Gfunctions_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                               uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                               uint8_t** pau8GfHeaderRevision, uint8_t** pau8GfHeaderTag,
N                               uint8_t** pau8DefHeaderRevision, uint8_t** pau8DefHeaderTag);
N
N
N/**
N* @brief Implementation of function vGfWaitForVSync
N*
N* Waits for V-Sync
N*
N* @note none
N*
N* @param[in] eGDCNumber - GDC to wait on
N*
N* @return void
N*/
Nvoid vGfWaitForVSync(gdc_ch_e eGDCNumber);
N
N
N/**
N* @brief Implementation of function u32GfGetVSyncStatus
N*
N* Returns V-Sync status
N*
N* @note none
N*
N* @param[in] eGDCNumber - GDC to wait on
N*
N* @return void
N*/
Nuint32_t u32GfGetVSyncStatus(gdc_ch_e eGDCNumber);
N
N
N/**
N* @brief Implementation of function eGfGetGAStatus
N*
N* Read status of GA
N*
N* @note none
N*
N* @return GA_BUSY if GA is busy
N* @return GA_IDLE if GA is not busy
N*/
Ngf_ga_status_e eGfGetGAStatus(void);
N
N
N/**
N* @brief Implementation of function vGfWaitForGA
N*
N* Waits for GA ready
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfWaitForGA(void);
N
N
N/**
N* @brief Implementation of function vGfWaitForPNGDecode
N*
N* Waits for PNG decode completion
N*
N* @note none
N*
N* @param[in] eStream - Stream to be decoded
N*
N* @return void
N*/
Nvoid vGfWaitForPNGDecode(png_stream_e eStream);
N
N
N/*****************************************************************************
N *
N *                          STATE-BASED FUNCTIONS
N *
N ****************************************************************************/
N
N/**
N* @brief Implementation of function vGfInitMWStateVariable
N*
N* Initializes the statestructure
N*
N* @note none
N*
N* @return void
N*/
Nvoid vGfInitMWStateVariable(void);
N
N
N/**
N* @brief Implementation of function vGfSetNeedleNumber
N*
N* Sets the needle to be rotated
N*
N* @note none
N*
N* @param[in] u32Number - Number of needle
N*
N* @return void
N*/
Nvoid vGfSetNeedleNumber(uint32_t u32Number);
N
N
N/**
N* @brief Implementation of function u32GfGetNeedleNumber
N*
N* Returns the needle to be rotated
N*
N* @note none
N*
N* @return Current selected needle number for rotation
N*/
Nuint32_t u32GfGetNeedleNumber(void);
N
N
N/**
N* @brief Implementation of function vGfSetPaletteStream
N*
N* Sets the single palette stream flags
N*
N* @note This function MUST be called before calling blit 
N*       functions to reset the palette table values 
N*
N* @return void
N*/
Nvoid vGfSetPaletteStream(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateRedChanProtect
N*
N* Enables red channel protection
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateRedChanProtect(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function vGfSetStateGreenChanProtect
N*
N* Enables green channel protection
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateGreenChanProtect(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function vGfSetStateBlueChanProtect
N*
N* Enables blue channel protection
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateBlueChanProtect(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function vGfSetStateColorChanProtect
N*
N* Sets color channel protection
N*
N* @note none
N*
N* @param[in] stColorPrt - Enable/disable red, green and blue color protection
N*
N* @return void
N*/
Nvoid vGfSetStateColorChanProtect(gf_colorprt_st stColorPrt);
N
N
N/**
N* @brief Implementation of function stGfGetStateColorChanProtect
N*
N* Returns color channel protection values
N*
N* @note none
N*
N* @return Color channel protection values for red, green and blue channel
N*/
Ngf_colorprt_st stGfGetStateColorChanProtect(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateAlphaChanProtect
N*
N* Enables alpha channel protection
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateAlphaChanProtect(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateAlphaChanProtect
N*
N* Return state of alpha channel protection
N*
N* @note none
N*
N* Outputs: eEnable - Enable/disable
N*
N* @return GA_DIS if alpha channel protection is disabled
N* @return GA_EN if alpha channel protection is enabled
N*/
Nga_en_e eGfGetStateAlphaChanProtect(void);
N
N
N/**
N* @brief Implementation of function eGfSetStateRedChanFading
N*
N* Enables red channel fading
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid eGfSetStateRedChanFading(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateRedChanFading
N*
N* Return state of red channel fading
N*
N* @note none
N*
N* @return GA_DIS if red channel fading is disabled
N* @return GA_EN if red channel fading is enabled
N*/
Nga_en_e eGfGetStateRedChanFading(void);
N
N
N/**
N* @brief Implementation of function eGfSetStateGreenChanFading
N*
N* Enables green channel fading
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid eGfSetStateGreenChanFading(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateGreenChanFading
N*
N* Return state of green channel fading
N*
N* @note none
N*
N* @return GA_DIS if green channel fading is disabled
N* @return GA_EN if green channel fading is enabled
N*/
Nga_en_e eGfGetStateGreenChanFading(void);
N
N
N/**
N* @brief Implementation of function eGfSetStateBlueChanFading
N*
N* Enables blue channel fading
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid eGfSetStateBlueChanFading(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateBlueChanFading
N*
N* Return state of blue channel fading
N*
N* @note none
N*
N* @return GA_DIS if blue channel fading is disabled
N* @return GA_EN if blue channel fading is enabled
N*/
Nga_en_e eGfGetStateBlueChanFading(void);
N
N
N/**
N* @brief Implementation of function eGfSetStateAlphaChanFading
N*
N* Enables alpha channel fading
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid eGfSetStateAlphaChanFading(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateAlphaChanFading
N*
N* Return state of alpha channel fading
N*
N* @note none
N*
N* @return GA_DIS if alpha channel fading is disabled
N* @return GA_EN if alpha channel fading is enabled
N*/
Nga_en_e eGfGetStateAlphaChanFading(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateFilter
N*
N* Enables filter
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateFilter(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateFilter
N*
N* Returns if filter is enabled or disabled
N*
N* @note none
N*
N* @return GA_DIS if filter is disabled
N* @return GA_EN if filter is enabled
N*/
Nga_en_e eGfGetStateFilter(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateBlendOrder
N*
N* Sets the blend order
N*
N* @param[in] eBlendOrder - Blend order type
N*
N* @return void
N*/
Nvoid vGfSetStateBlendOrder(ga_blendOrd_e eBlendOrder);
N
N
N/**
N* @brief Implementation of function eGfGetStateBlendOrder
N*
N* Sets the blend order
N*
N* @note none
N*
N* @return GA_ONTO_DEST if source is blended on destination
N* @return GA_BEHIND_DEST if source is blended behind destination
N*/
Nga_blendOrd_e eGfGetStateBlendOrder(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateFadeMode
N*
N* Sets the fade mode
N*
N* @note none
N*
N* @param[in] eFadeMode - Fade mode
N*
N* @return void
N*/
Nvoid vGfSetStateFadeMode(blt_fadeMode_e eFadeMode);
N
N
N/**
N* @brief Implementation of function eGfGetStateFadeMode
N*
N* Returns the fade mode
N*
N* @note none
N*
N* @return BLT_NOFADING if no fading is done
N* @return BLT_FADE_ALL if RGB and Alpha will be faded
N* @return BLT_FADE_ALPHA if only Alpha will be faded
N* @return BLT_FADE_RGB if only RGB will be faded
N*/
Nblt_fadeMode_e eGfGetStateFadeMode(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateFadingFactor
N*
N* Sets the fading factor
N*
N* @note none
N*
N* @param[in] u8FadeFactor - Fading factor
N*
N* @return void
N*/
Nvoid vGfSetStateFadingFactor(uint8_t u8FadeFactor);
N
N
N/**
N* @brief Implementation of function u8GfGetStateFadingFactor
N*
N* Returns the fading factor
N*
N* @note none
N*
N* @return Fading factor value
N*/
Nuint8_t u8GfGetStateFadingFactor(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateTransparentColor
N*
N* Enables or disables color transparency
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateTransparentColor(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateTransparentColor
N*
N* Returns color transparency
N*
N* @note none
N*
N* @return GA_DIS if transparent color is disabled
N* @return GA_EN if transparent color is enabled
N*/
Nga_en_e eGfGetStateTransparentColor(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateTransparencyValues
N*
N* Sets the color transparency values
N*
N* @note none
N*
N* @param[in] stTransVal - Source and destination transparency values
N*
N* @return void
N*/
Nvoid vGfSetStateTransparencyValues(gf_transval_st stTransVal);
N
N
N/**
N* @brief Implementation of function stGfGetStateTransparencyValues
N*
N* Returns the color transparency values
N*
N* @note none
N*
N* @return Source and destination transparency values
N*/
Ngf_transval_st stGfGetStateTransparencyValues(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateAlphaValues
N*
N* Sets the alpha values
N*
N* @note none
N*
N* @param[in] stAlphaVal - Source and destination alpha values
N*
N* @return void
N*/
Nvoid vGfSetStateAlphaValues(gf_alphaval_st stAlphaVal);
N
N
N/**
N* @brief Implementation of function stGfGetStateAlphaValues
N*
N* Returns the alpha values
N*
N* @note none
N*
N* @return Source and destination alpha values
N*/
Ngf_alphaval_st stGfGetStateAlphaValues(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateTransformationMode
N*
N* Sets the transformation mode
N*
N* @note none
N*
N* @param[in] eTsfMode - Transformation mode
N*
N* @return void
N*/
Nvoid vGfSetStateTransformationMode(transf_Mode_e eTsfMode);
N
N
N/**
N* @brief Implementation of function eGfGetStateTransformationMode
N*
N* Returns the transformation mode
N*
N* @note none
N*
N* @return TSF_MODE_PIXEL if pixel mode operation is selected
N* @return TSF_MODE_COLOR if color mode operation is selected
N*/
Ntransf_Mode_e eGfGetStateTransformationMode(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateTransformationPredefinedColor
N*
N* Sets predefined color for transformation
N*
N* @note none
N*
N* @param[in] u32PredefColor - Transformation predefined color
N*
N* @return void
N*/
Nvoid vGfSetStateTransformationPredefinedColor(uint32_t u32PredefColor);
N
N
N/**
N* @brief Implementation of function eGfGetStateTransformationMode
N*
N* Returns the predefined color value for transformation
N*
N* @note none
N*
N* @return Predefined color for transformation
N*/
Nuint32_t eGfGetStateTransformationPredefinedColor(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateRasterOperationModeEnable
N*
N* Enables or disables raster operation mode
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateRasterOperationModeEnable(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateRasterOperationModeEnable
N*
N* Returns raster operation mode
N*
N* @note none
N*
N* @return GA_DIS if raster operation is disabled
N* @return GA_EN if raster operation is enabled
N*/
Nga_en_e eGfGetStateRasterOperationModeEnable(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateRasterOperationMode
N*
N* Sets raster operation mode
N*
N* @note none
N*
N* @param[in] eRastOpMode - Raster operation mode
N*
N* @return void
N*/
Nvoid vGfSetStateRasterOperationMode(blt_rastChSel_e eRastOpMode);
N
N
N/**
N* @brief Implementation of function eGfGetStateRasterOperationMode
N*
N* Returns raster operation mode
N*
N* @note none
N*
N* @return BLT_RGBA_CH if raster operation should be applied on all channels
N* @return BLT_RGB_CH if raster operation should be applied on RGB channels
N* @return BLT_ALPHA_CH if raster operation should be applied on Alpha channel only
N* @return BLT_ALPHA_DEST_CH if raster operation should be applied on RGB and destination alpha channel should be kept
N* @return BLT_ALPHA_SRC_CH if raster operation should be applied on RGB and source alpha channel should be kept
N*/
Nblt_rastChSel_e eGfGetStateRasterOperationMode(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateRasterOperationValue
N*
N* Sets raster operation value
N*
N* @note none
N*
N* @param[in] eRastOpValue - Raster operation value
N*
N* @return void
N*/
Nvoid vGfSetStateRasterOperationValue(blt_rastOpVal_e eRastOpValue);
N
N
N/**
N* @brief Implementation of function eGfGetStateRasterOperationValue
N*
N* Returns raster operation value
N*
N* @note none
N*
N* @return BLT_RAST_SOURCE if source should be taken
N* @return BLT_RAST_SRC_INV if source should be inverted
N* @return BLT_RAST_DEST if destination should be taken
N* @return BLT_RAST_DEST_ZERO if destination should be set to 0
N* @return BLT_RAST_DEST_ONE if destination should be set to 1
N* @return BLT_RAST_DEST_INV if destination should be inverted
N* @return BLT_RAST_S_AND_D if ( source AND  destination)
N* @return BLT_RAST_NS_AND_D if (~source AND  destination)
N* @return BLT_RAST_S_AND_ND if ( source AND ~destination)
N* @return BLT_RAST_S_AND_D_INV if ~( source AND  destination)
N* @return BLT_RAST_S_OR_D if ( source OR  destination)
N* @return BLT_RAST_NS_OR_D if (~source OR  destination)
N* @return BLT_RAST_S_OR_ND if ( source OR ~destination)
N* @return BLT_RAST_S_OR_D_INV if ~( source OR  destination)
N* @return BLT_RAST_S_XOR_D if ( source XOR destination)
N* @return BLT_RAST_S_XOR_D_INV if ~( source XOR destination)
N*/
Nblt_rastOpVal_e eGfGetStateRasterOperationValue(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateClipWindow
N*
N* Activates or deactivates ClipWindow
N*
N* @note none
N*
N* @param[in] eEnable - Enable/disable
N*
N* @return void
N*/
Nvoid vGfSetStateClipWindow(ga_en_e eEnable);
N
N
N/**
N* @brief Implementation of function eGfGetStateClipWindow
N*
N* Returns if ClipWindow is enabled or disabled
N*
N* @note none
N*
N* @return GA_DIS if clip window is disabled
N* @return GA_EN if clip window is enabled
N*/
Nga_en_e eGfGetStateClipWindow(void);
N
N
N/**
N* @brief Implementation of function vGfSetStateClipWindowCoordinates
N*
N* Set clip window parameter
N*
N* @note none
N*
N* @param[in] u16ClipC1_X - clip window upper left point x coordinate
N* @param[in] u16ClipC1_Y - clip window upper left point y coordinate
N* @param[in] u16ClipC2_X - clip window lower left point x coordinate
N* @param[in] u16ClipC2_Y - clip window lower left point y coordinate
N*
N* @return void
N*/
Nvoid vGfSetStateClipWindowCoordinates(uint16_t u16ClipC1_X, uint16_t u16ClipC1_Y, uint16_t u16ClipC2_X, uint16_t u16ClipC2_Y);
N
N/**
N* @brief Implementation of function vGfSetSubRes
N*
N* Sets sub position accuracy for position and rotation center point
N*
N* @note none
N*
N* @param[in] eResPPos - accuracy type for placement position
N* @param[in] eResCPos - accuracy type for rotation center point position
N*
N* @return void
N*/
Nvoid vGfSetSubRes(gf_subRes_e eResPPos, gf_subRes_e eResCPos);
N
N/**
N* @brief Implementation of function f32GA_GetSubRes_Position
N*
N* Return position sub resolution value
N*
N* @note none
N*
N* @return subresolution value in float32_t
N*/
Nfloat32_t f32GfGetSubRes_Position(void);
N
N
N/**
N* @brief Implementation of function u32GA_GetSubRes_Position
N*
N* Return position sub resolution value
N*
N* @note none
N*
N* @return subresolution value in uint32_t
N*/
Nuint32_t u32GfGetSubRes_Position(void);
N
N
N/**
N* @brief Implementation of function f32GA_GetSubRes_CenterPosition
N*
N* Return center position sub resolution value
N*
N* @note none
N*
N* @return subresolution value in float32_t
N*/
Nfloat32_t f32GfGetSubRes_CenterPosition(void);
N
N
N/**
N* @brief Implementation of function u32GA_GetSubRes_CenterPosition
N*
N* Return center position sub resolution value
N*
N* @note none
N*
N* @return subresolution value in uint32_t
N*/
Nuint32_t u32GfGetSubRes_CenterPosition(void);
N
N
N/*****************************************************************************
N *
N *                          BUFFER-BASED FUNCTIONS
N *
N ****************************************************************************/
N
N/**
N* @brief Implementation of function vGfFillArea
N*
N* Fills the buffer area with the specified color
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Pointer to part to be filled
N* @param[in] u32Color    - Color
N*
N* @return void
N*/
Nvoid vGfBuffFillArea(gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart, uint32_t u32Color);
N
N
N/**
N* @brief Implementation of function u32GfBuffBlitBitmapFull
N*
N* Blits entire bitmap into the given destination buffer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfBuffBlitBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                                 int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapFull
N*
N* Blits entire bitmap into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                           int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapPart
N*
N* Blits part of the bitmap into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Part of the image to be copied
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                           uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function u32GfBuffBlitBitmapPart
N*
N* Blits part of the bitmap into the given destination buffer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Part of the image to be copied
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfBuffBlitBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                                 uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapRLE16
N*
N* Blits entire bitmap in RLE16 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapRLE16(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapRLE24
N*
N* Blits entire bitmap in RLE24 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapRLE24(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapRLE24A
N*
N* Blits entire bitmap in RLE24A format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapRLE24A(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitBitmapRLE32
N*
N* Blits entire bitmap in RLE32 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlitBitmapRLE32(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendFillArea
N*
N* Fills the specified area of the buffer with the specified color with blending
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstDstImage - destination image
N* @param[in] pstImgPart  - part to be filled
N* @param[in] u32Color    - color
N*
N* @return void
N*/
Nvoid vGfBuffBlendFillArea(gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart, uint32_t u32Color);
N
N
N/**
N* @brief Implementation of function u32GfBuffBlendBitmapFull
N*
N* Blends entire bitmap into the given destination buffer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfBuffBlendBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                                  int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapFull
N*
N* Blends entire bitmap into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function u32GfBuffBlendBitmapPart
N*
N* Blends given part of the bitmap into the given destination buffer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Pointer to part of the image to be copied
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfBuffBlendBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                                  uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapPart
N*
N* Blends given part of the bitmap into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Pointe to part of the image to be copied
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapPart(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                            uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapRLE16
N*
N* Blends entire bitmap in RLE16 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapRLE16(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapRLE24
N*
N* Blends entire bitmap in RLE24 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapRLE24(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapRLE24A
N*
N* Blends entire bitmap in RLE24A format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapRLE24A(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendBitmapRLE32
N*
N* Blends entire bitmap in RLE32 format into the given destination buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffBlendBitmapRLE32(gf_image_st * pstSrcImage, gf_image_st * pstDstImage,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateBitmapFull
N*
N* Rotates the entire bitmap into the given destination buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32Angle    - Rotation angle
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffRotateBitmapFull(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateBitmapPart
N*
N* Rotates part of the bitmap into the given destination buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32Angle    - Rotation angle
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Pointer to part of the image to be copied
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffRotateBitmapPart(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateBitmapOptimized
N*
N* Rotates the entire bitmap cache optimized into the given
N* destination buffer
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       No subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImage    - Pointer to source image
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstDstImage    - Pointer to destination image
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Width of block
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfBuffRotateBitmapOptimized(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                                  uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateBlendBitmapFull
N*
N* Rotates the entire bitmap and blend it into the given destination buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32Angle    - Rotation angle
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffRotateBlendBitmapFull(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                                  int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateBlendBitmapPart
N*
N* Rotates the entire bitmap and blend it into the given destination buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32Angle    - Rotation angle
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstImgPart  - Pointer to part of the image to be copied
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffRotateBlendBitmapPart(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage, gf_cliprect_st * pstImgPart,
N                                  int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateNeedleFill
N*
N* Rotates the entire needle into the given destination buffer with fill
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible in x-direction. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImage    - Pointer to source image of needle
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstDstImage    - Pointer to destination image
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfBuffRotateNeedleFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                             uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateNeedle
N*
N* Rotates and blends the entire needle image into the given destination
N* buffer
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible in x-direction. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImageBg  - Pointer to background source image
N* @param[in] pstSrcImage    - Pointer to source image of needle
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstDstImage    - Pointer to destination image
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfBuffRotateNeedle(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                         uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateNeedleTipandBaseFill
N*
N* Rotates optimized and blends the entire needle image into the given layer
N* with restoring the background by filling
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       No subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImage  - Pointer to source image of needle
N* @param[in] f32Angle     - Rotation angle
N* @param[in] pstDstImage  - Pointer to destination image
N* @param[in] u32PosX      - X-offset from the destination buffer start
N* @param[in] u32PosY      - Y-offset from the destination buffer start
N* @param[in] pstDef       - Parameter for image
N*
N* @return void
N*/
Nvoid vGfBuffRotateNeedleTipandBaseFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                                       uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef);
N
N
N/**
N* @brief Implementation of function vGfBuffRotateNeedleTipandBase
N*
N* Rotates optimized and blends the entire needle image into the given layer
N* with restoring the background
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       No subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImageBg - Pointer to background source image
N* @param[in] pstSrcImage   - Pointer to source image of needle
N* @param[in] f32Angle      - Rotation angle
N* @param[in] pstDstImage   - Pointer to destination image
N* @param[in] u32PosX       - X-offset from the destination buffer start
N* @param[in] u32PosY       - Y-offset from the destination buffer start
N* @param[in] pstDef        - Parameter for image
N*
N* @return void
N*/
Nvoid vGfBuffRotateNeedleTipandBase(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_image_st * pstDstImage,
N                                   uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef);
N
N
N/**
N* @brief Implementation of function vGfBuffShearFull
N*
N* Shears an image in x- and y-direction by the specified factors into the given destination
N* buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32FactorX  - Shearing factor in x-direction
N* @param[in] f32FactorY  - Shearing factor in y-direction
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffShearFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
N                      int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffShearBlendFull
N*
N* Shears an image in x- and y-direction by the specified factors into the given destination
N* buffer with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32FactorX  - Shearing factor in x-direction
N* @param[in] f32FactorY  - Shearing factor in y-direction
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffShearBlendFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
N                           int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffScaleFull
N*
N* Scales an image in x- and y-direction by the specified factors into the given destination
N* buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32FactorX  - Scaling factor in x-direction
N* @param[in] f32FactorY  - Scaling factor in y-direction
N* @param[in] eAlignment  - Alignment in Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffScaleFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY,
N                      rot_scaleAlign_e eAlignment, gf_image_st * pstDstImage,
N                      int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffScaleBlendFull
N*
N* Scales an image in x- and y-direction by the specified factors into the given destination
N* buffer with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] f32FactorX  - Scaling factor in x-direction
N* @param[in] f32FactorY  - Scaling factor in y-direction
N* @param[in] eAlignment  - Alignment in Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] i32PosX     - X-offset from the destination buffer start
N* @param[in] i32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffScaleBlendFull(gf_image_st * pstSrcImage, float32_t f32FactorX, float32_t f32FactorY,
N                           rot_scaleAlign_e eAlignment, gf_image_st * pstDstImage,
N                           int32_t i32PosX, int32_t i32PosY);
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vGfBuffPerspectiveBlitFull
N*
N* Puts an image into perspective by rotation on x-, y- and z-axis by the specified angle
N* and blits it into the given buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage  - Pointer to source image
N* @param[in] f32AngleX    - Rotation angle x-axis
N* @param[in] f32AngleY    - Rotation angle y-axis
N* @param[in] f32AngleZ    - Rotation angle z-axis
N* @param[in] f32FactorX   - Scaling factor X
N* @param[in] f32FactorY   - Scaling factor Y
N* @param[in] pstDstImage  - Pointer to destination image
N* @param[in] i32PosX      - X-offset from the destination buffer start
N* @param[in] i32PosY      - Y-offset from the destination buffer start
N* @param[in] u32RotPointX - Rotation point X
N* @param[in] u32RotPointY - Rotation point Y
N*
N* @return void
N*/
Nvoid vGfBuffPerspectiveBlitFull(gf_image_st * pstSrcImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
N                                float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
N                                int32_t i32PosX, int32_t i32PosY,
N                                uint32_t u32RotPointX, uint32_t u32RotPointY);
N
N
N/**
N* @brief Implementation of function vGfBuffPerspectiveBlendFull
N*
N* Puts an image into perspective by rotation on x-, y- and z-axis by the specified angle
N* and blends it into the given buffer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstSrcImage  - Pointer to source image
N* @param[in] f32AngleX    - Rotation angle x-axis
N* @param[in] f32AngleY    - Rotation angle y-axis
N* @param[in] f32AngleZ    - Rotation angle z-axis
N* @param[in] f32FactorX   - Scaling factor X
N* @param[in] f32FactorY   - Scaling factor Y
N* @param[in] pstDstImage  - Pointer to destination image
N* @param[in] i32PosX      - X-offset from the destination buffer start
N* @param[in] i32PosY      - Y-offset from the destination buffer start
N* @param[in] u32RotPointX - Rotation point X
N* @param[in] u32RotPointY - Rotation point Y
N*
N* @return void
N*/
Nvoid vGfBuffPerspectiveBlendFull(gf_image_st * pstSrcImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
N                                 float32_t f32FactorX, float32_t f32FactorY, gf_image_st * pstDstImage,
N                                 int32_t i32PosX, int32_t i32PosY,
N                                 uint32_t u32RotPointX, uint32_t u32RotPointY);
N#endif
N
N
N/**
N* @brief Implementation of function vGfBuffTransformationFull
N*
N* Starts the transformation of the entire image into the given destination
N* buffer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstTable    - Pointer to transformation table
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffTransformationFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
N                               uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffTransformationFullOptimized
N*
N* Starts the transformation of the entire image into the given destination
N* buffer cache optimized
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage    - Pointer to source image
N* @param[in] pstDstImage    - Pointer to destination image
N* @param[in] pstTable       - Pointer to transformation table
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Block width
N* @param[in] u32BlockHeight - Block height
N*
N* @return void
N*/
Nvoid vGfBuffTransformationFullOptimized(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
N                                        uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfBuffTransformationBlendFull
N*
N* Starts the transformation of the entire image into the given destination
N* buffer with blending
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N* @param[in] pstTable    - Pointer to transformation table
N* @param[in] u32PosX     - X-offset from the destination buffer start
N* @param[in] u32PosY     - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfBuffTransformationBlendFull(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
N                                    uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfBuffTransformationBlendFull
N*
N* Starts the transformation of the entire image into the given destination
N* buffer with blending cache optimized
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstSrcImage    - Pointer to source image
N* @param[in] pstDstImage    - Pointer to destination image
N* @param[in] pstTable       - Pointer to transformation table
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Block width
N* @param[in] u32BlockHeight - Block height
N*
N* @return void
N*/
Nvoid vGfBuffTransformationBlendFullOptimized(gf_image_st * pstSrcImage, gf_image_st * pstDstImage, gf_table_st * pstTable,
N                                             uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfBuffDrawLine
N*
N* Draw line
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel linewidth possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstDstImage  - destination image
N* @param[in] pstOption    - pointer to option for draw operation
N* @param[in] pstLine      - pointer to line properties for draw operation
N*
N* @return void
N*/
Nvoid vGfBuffDrawLine(gf_image_st * pstDstImage, drw_OpCfg_st *pstOption, drw_Line_st *pstLine);
N
N
N/**
N* @brief Implementation of function vGfBuffDrawTriangle
N*
N* Draw triangle
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstDstImage  - destination image
N* @param[in] pstOption    - pointer to option for draw operation
N* @param[in] pstTrngl     - pointer to triangle properties for draw operation
N*
N* @return void
N*/
Nvoid vGfBuffDrawTriangle(gf_image_st * pstDstImage, drw_OpCfg_st *pstOption, drw_Trngl_st *pstTrngl);
N
N
N/**
N* @brief Implementation of function vGfBuffDrawCircle
N*
N* Draw cirlce
N*
N* @note Subpixel positioning possible. Center Coordinates have to be set accordingly (only using eResPPos parameter of function vGfSetSubRes).
N*       (Do not set eResCPos parameter of function vGfSetSubRes for Subpixel positioning of center coordinates)
N*
N* @param[in] pstDstImage  - destination image
N* @param[in] pstOption    - pointer to option for draw operation
N* @param[in] pstCircle    - pointer to circle properties for draw operation
N*                           like center co-ordinates, radius, draw colour and AA effect
N*
N* Limitation : The center and radius of the circle should be given such that the circle lies completely in the positive quadrant. 
N*
N* @return void
N*/
Nvoid vGfBuffDrawCircle(gf_image_st *pstDstImage, drw_OpCfg_st *pstOption, gf_circle_st *pstCircle);
N
N
N/**
N* @brief Implementation of function vGfBuffDrawPolygon
N*
N* Draw polygon
N*
N* @note Subpixel positioning possible. Coordinates parameter have to be set accordingly (using eResPPos parameter of function vGfSetSubRes).
N*
N* @param[in] pstDstImage  - destination image
N* @param[in] pstOption    - pointer to option for draw operation
N* @param[in] pstPolygon   - Pointer to the vertices of the polygon, Number of vertices, draw colour and AA effects
N*
N* Limitation : The vertices should be given either in clockwise or anticlockwise direction only. The API will support only convex polygons.
N*
N* @return void
N*/
Nvoid vGfBuffDrawPolygon(gf_image_st *pstDstImage, drw_OpCfg_st *pstOption, gf_polygon_st *pstPolygon);
N
N
N/**
N* @brief Implementation of function vGfInsertList
N*
N* Insert commands in commandlist
N*
N* @note none
N*
N* @param[in] pu64Values  - start address
N* @param[in] u32Length   - length of command list to be inserted
N*
N* @return void
N*/
Nvoid vGfInsertList(uint64_t * pu64Values, uint32_t u32Length);
N
N
N/**
N* @brief Implementation of function vGfViewport
N*
N* Function vGfViewport specifies the affine transformation of X and Y from normalised system coordinates to window coordiantes.
N* If (xnd, ynd) are normalised system coordinates the window coordinates (xw, yw) are calculated as defined below:
N*   xw = (xnd + 1)(width / 2)  + x
N*   yw = (ynd + 1)(height / 2) + y
N*
N* @note (vgl. http://wiki.delphigl.com/)
N*
N* @param[in] f64X      - Viewport start in x-direction
N* @param[in] f64Y      - Viewport start in y-direction
N* @param[in] f64Width  - Viewport width
N* @param[in] f64Height - Viewport height
N*
N* @return void
N*/
Nvoid vGfViewport(float64_t f64X, float64_t f64Y, float64_t f64Width, float64_t f64Height);
N
N
N/**
N* @brief Implementation of function vGfFrustum
N*
N* Function vGfFrustum describes a perspective matrix doing a perspektive projection.
N* The current matrix (compare vGfMatrixMode) will be multiplied with this matrix. The result replaces the current matrix.
N*
N* @note none
N*
N* @param[in] f64Left   - Specifies the coordinate for the left (vertical) intersection.
N* @param[in] f64Right  - Specifies the coordinate for the right (vertical)intersection.
N* @param[in] f64Bottom - Specifies the coordinate for the lower (horizontal) intersection.
N* @param[in] f64Top    - Specifies the coordinate for the upper (horizontal) intersection.
N* @param[in] f64zNear  - Specifies the coordinate of the near layer. The value should be positive.
N* @param[in] f64zFar   - Specifies the coordinate of the far layer. The value should be positive.
N*
N* @return void
N*/
Nvoid vGfFrustum(float64_t f64Left, float64_t f64Right, float64_t f64Bottom, float64_t f64Top, float64_t f64zNear, float64_t f64zFar);
N
N
N/**
N* @brief Implementation of function vGfMatrixMode
N*
N* Set current Matrix-mode
N* GA_RE_MODELVIEW  - Apply future matrix operations to modelview-matrixstack.
N* GA_RE_PROJECTION - Apply future matrix operations to projektion-matrixstack.
N*
N* @note none
N*
N* @param[in] eMatrix - Matrix mode type
N*
N* @return void
N*/
Nvoid vGfMatrixMode(gf_matrixmodes_e eMatrix);
N
N
N/**
N* @brief Implementation of function vGfLoadIdentity
N*
N* Function vGfLoadIdentity replaces the current matrix by the identity matrix.
N*
N* @note none
N*
N* @param[in] void
N*
N* @return void
N*/
Nvoid vGfLoadIdentity(void);
N	
N	
N/**
N* @brief Implementation of function vGfLoadIP
N*
N* Function vGfLoadIP loads the IP-matrix.
N*
N* @note none
N*
N* @param[in] void
N*
N* @return void
N*/
Nvoid vGfLoadIP(void);
N
N
N/**
N* @brief Implementation of function vGfTranslate
N*
N* The function vGfTranslate translates the point of origin to the point (x,y,z).
N* Vector (x,y,z) is used to generate a 4x4 translation matix. The current matrix is multiplied by it.
N* The result replaces the current matrix.
N*  | 1  0  0  x |
N*  | 0  1  0  y |
N*  | 0  0  1  z |
N*  | 0  0  0  1 |
N* If the current matrix is GA_RE_MODELVIEW or GA_RE_PROJECTION objects rendered after a call to function vGfTranslate will be translated accordingly.
N*
N* @note none
N*
N* @param[in] f64X - Translation in x direction
N* @param[in] f64X - Translation in y direction
N* @param[in] f64X - Translation in z direction
N*
N* @return void
N*/
Nvoid vGfTranslate(float64_t f64X, float64_t f64Y, float64_t f64Z);
N
N
N/**
N* @brief Implementation of function vGfScale
N*
N* Function vGfScale is doing a distortion or mirowing of the coordinate system.
N* To do this a scaling-matrix is multiplied with the current matrix.
N* The scaling-matrix can be found below:
N*  | x  0  0  0 |
N*  | 0  y  0  0 |
N*  | 0  0  z  0 |
N*  | 0  0  0  1 |
N* Here x, y, z corrspond to the function parameters.
N* Never scale a coordinate sxxis to 0 (x,y and z always <> 0.0)!
N*
N* @note none
N*
N* @param[in] f64X - Scaling factor in x direction
N* @param[in] f64X - Scaling factor in y direction
N* @param[in] f64X - Scaling factor in z direction
N*
N* @return void
N*/
Nvoid vGfScale(float64_t f64X, float64_t f64Y, float64_t f64Z);
N
N
N/**
N* @brief Implementation of function vGfRotate
N*
N* Function vGfRotate multiplies the current matrix with a rotation-matrix R.
N* By this rotationmmatrix all points are rotated counter clockwise by the defined angle around the vector specified by (x,y,z).
N* Below the rotation-matrix R can be found:
N*  | x²(1-c)+c    xy(1-c)-zs   xz(1-c)+ys   0 |
N*  | yx(1-c)+zs   y²(1-c)+c    yz(1-c)-xs   0 |
N*  | xz(1-c)-ys   yz(1-c)+xs   z²(1-c)+c    0 |
N*  |     0            0            0        1 |
N* with
N* c = cos(angle)
N* s = sin(angle)
N* length(x,y,z) = 1
N*
N* @note none
N*
N* @param[in] f64Angle - Rotation angle
N* @param[in] f64X     - X-axxis for rotation
N* @param[in] f64X     - Y-axxis for rotation
N* @param[in] f64X     - Z-axxis for rotation
N*
N* @return void
N*/
Nvoid vGfRotate(float64_t f64Angle, float64_t f64X, float64_t f64Y, float64_t f64Z);
N
N
N/**
N* @brief Implementation of function iGfProject
N*
N* Function iGfProject converts object-coordinates to window-coordinates by using modelview-, projection- and viewport-matrix.
N* The result is stored internally for further calculation.
N*
N* @note Code taken from https://www.opengl.org/wiki/GluProject_and_gluUnProject_code
N*
N* @param[in]     pf64Obj - Pointer to array of 4 valuese (x,y,z,w)
N*
N* @return void
N*/
Nint iGfProject(float64_t * pf64Obj);
N
N
N/**
N* @brief Implementation of function iGfUnProject
N*
N* Function iGfUnProject converts window-coordinates (pf64Win) to object-coordinates by using modelview-, projection- and viewport-matrix.
N* The result is stored in pf64Obj.
N*
N* @note Code taken from https://www.opengl.org/wiki/GluProject_and_gluUnProject_code
N*
N* @param[in,out] pf64Win - Pointer to array of 4 valuese (x,y,z,w)
N* @param[in]     pf64Obj - Pointer to array of 4 valuese (x,y,z,w)
N*
N* @return void
N*/
Nint iGfUnProject(float64_t * pf64Obj, float64_t * pf64Win);
N
N
N/**
N* @brief Implementation of function vGfSetIP
N*
N* Function vGfSetIP calculates the "identityProjection"-matrix for the object to be transformed.
N* Precondition: The height of the objects is normalized to 1, the width is width/height. The center of the object should be positioned in the center of the coordinate system.
N* p1x=-(width/2)*height; 	p1y=-0.5;  	p1z= 0;  	p1w= 1;
N*	p2x=-(width/2)*height; 	p2y= 0.5;  	p2z= 0;  	p2w= 1;
N*	p3x= (width/2)*height; 	p3y= 0.5;  	p3z= 0;  	p3w= 1;
N*	p4x= (width/2)*height; 	p4y=-0.5;  	p4z= 0;  	p4w= 1;
N*
N* @note (c) TEEBEL
N*
N* @param[in] f64ImgWidth  - Image width
N* @param[in] f64ImgHeight - Image height
N* @param[in] f64Znear     - Defines the distance to the near layer. The value should be positive.
N* @param[in] f64Zfar      - Defines the distance to the far layer. The value should be positive.
N*
N* @return void
N*/
Nvoid vGfSetIP(float64_t f64ImgWidth, float64_t f64ImgHeight, float64_t f64Znear, float64_t f64Zfar);
N
N
N/**
N* @brief Implementation of function vGfBuffBlitElement
N*
N* Render an image configured in OpenGL style
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N*
N* @return void
N*/
Nvoid vGfBuffBlitElement(gf_image_st * pstSrcImage, gf_image_st * pstDstImage);
N
N
N/**
N* @brief Implementation of function vGfBuffBlendElement
N*
N* Render an image configured in OpenGL style with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstDstImage - Pointer to destination image
N*
N* @return void
N*/
Nvoid vGfBuffBlendElement(gf_image_st * pstSrcImage, gf_image_st * pstDstImage);
N
N
N/*****************************************************************************
N *
N *                      LAYER-BASED (WRAPPER) FUNCTIONS
N *
N ****************************************************************************/
N
N/**
N* @brief Implementation of function vGfLayerFillArea
N*
N* Fills the layer area with the specified color
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of image
N* @param[in] u32Color   - Height of area to be filled
N*
N* @return void
N*/
Nvoid vGfLayerFillArea(gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                      uint32_t u32Color);
N
N
N/**
N* @brief Implementation of function u32GfLayerBlitBitmapFull
N*
N* Blits entire bitmap into the given layer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfLayerBlitBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                                  int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapFull
N*
N* Blits entire bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlitBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function u32GfLayerBlitBitmapPart
N*
N* Blits part of the bitmap into the given layer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of the image to be copied
N* @param[in] u32PosX    - X-offset from the destination buffer start
N* @param[in] u32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfLayerBlitBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                                  uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapPart
N*
N* Blits part of the bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of the image to be copied
N* @param[in] u32PosX    - X-offset from the destination buffer start
N* @param[in] u32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlitBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                            uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapRLE16
N*
N* Blits entire RLE16 bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlitBitmapRLE16(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapRLE24
N*
N* Blits entire RLE24A bitmap into the given layer
N*
N* @note none
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return No subpixel positioning possible.
N*/
Nvoid vGfLayerBlitBitmapRLE24(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapRLE24A
N*
N* Blits entire RLE24A bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlitBitmapRLE24A(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitBitmapRLE32
N*
N* Blits entire RLE32 bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlitBitmapRLE32(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendFillArea
N*
N* Fills the specified area of the buffer with the specified color with blending
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of image to be filled
N* @param[in] u32Color   - Color
N*
N* @return void
N*/
Nvoid vGfLayerBlendFillArea(gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart, uint32_t u32Color);
N
N
N/**
N* @brief Implementation of function u32GfLayerBlendBitmapFull
N*
N* Blends entire bitmap into the given layer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfLayerBlendBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                                   int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapFull
N*
N* Blends entire bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                             int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function u32GfLayerBlendBitmapPart
N*
N* Blends the given part of the bitmap into the given layer
N* color format is taken into account
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of the image to be copied
N* @param[in] u32PosX    - X-offset from the destination buffer start
N* @param[in] u32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nuint32_t u32GfLayerBlendBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                                   uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapPart
N*
N* Blends the given part of the bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of the image to be copied
N* @param[in] u32PosX    - X-offset from the destination buffer start
N* @param[in] u32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapPart(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                             uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapRLE16
N*
N* Blits entire RLE16 bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapRLE16(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapRLE24
N*
N* Blends entire RLE24A bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapRLE24(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapRLE24A
N*
N* Blends entire RLE24A bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapRLE24A(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                               int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendBitmapRLE32
N*
N* Blits entire RLE32 bitmap into the given layer
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerBlendBitmapRLE32(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateBitmapFull
N*
N* Rotates the entire bitmap into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] f32Angle - Rotation angle
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerRotateBitmapFull(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateBitmapPart
N*
N* Rotates part of a bitmap
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32Angle   - Rotation angle
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Pointer to part of the source image to be rotated
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerRotateBitmapPart(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                              int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateBitmapOptimized
N*
N* Rotates the entire bitmap cache optimized into the given
N* destination layer
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       No subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImage    - Pointer to source image
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstLayer       - Pointer to destination layer
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Width of block
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfLayerRotateBitmapOptimized(gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                                   uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateBlendBitmapFull
N*
N* Rotates entire bitmap and blend it into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] f32Angle - Rotation angle
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] i32PosX  - X-offset from the destination buffer start
N* @param[in] i32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerRotateBlendBitmapFull(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                                   int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateBlendBitmapPart
N*
N* Rotates entire bitmap and blend it into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32Angle   - Rotation angle
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstImgPart - Part of the image to be copied
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerRotateBlendBitmapPart(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer, gf_cliprect_st * pstImgPart,
N                                   int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateNeedleFull
N*
N* Rotates the entire needle into the given layer
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible in x-direction. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstImage       - Pointer to source image of needle
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstLayer       - Pointer to destination layer
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfLayerRotateNeedleFill(gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                              uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateNeedle
N*
N* Rotates optimized and blends the entire needle image into the given layer
N* with restoring the background
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible in x-direction. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstImageBg     - Pointer to background source image
N* @param[in] pstImage       - Pointer to source image of needle
N* @param[in] f32Angle       - Rotation angle
N* @param[in] pstLayer       - Pointer to destination layer
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockHeight - Height of block
N*
N* @return void
N*/
Nvoid vGfLayerRotateNeedle(gf_image_st * pstImageBg, gf_image_st * pstImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                          uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateNeedleTipandBaseFill
N*
N* Rotates optimized and blends the entire needle image into the given layer
N* with restoring the background by filling
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       No subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in]  pstSrcImage - Pointer to source image of needle
N* @param[in]  f32Angle    - Rotation angle
N* @param[in]  pstLayer    - Pointer to destination layer
N* @param[in]  u32PosX     - X-offset from the destination buffer start
N* @param[in]  u32PosY     - Y-offset from the destination buffer start
N* @param[in]  pstDef      - Parameter for image
N*
N* @return void
N*/
Nvoid vGfLayerRotateNeedleTipandBaseFill(gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                                        uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef);
N
N
N/**
N* @brief Implementation of function vGfLayerRotateNeedleTipandBase
N*
N* Rotates optimized and blends the entire needle image into the given layer
N* with restoring the background
N*
N* @note No subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*       The complete output should be inside the destination image for all degrees.
N*
N* @param[in] pstSrcImageBg - Pointer to background source image
N* @param[in] pstSrcImage   - Source image of needle
N* @param[in] f32Angle      - Rotation angle
N* @param[in] pstLayer      - Pointer to destination layer
N* @param[in] u32PosX       - X-offset from the destination buffer start
N* @param[in] u32PosY       - Y-offset from the destination buffer start
N* @param[in] pstDef        - Pointer to parameter for image
N*
N* @return void
N*/
Nvoid vGfLayerRotateNeedleTipandBase(gf_image_st * pstSrcImageBg, gf_image_st * pstSrcImage, float32_t f32Angle, gf_layer_st * pstLayer,
N                                    uint32_t u32PosX, uint32_t u32PosY, gf_def_st * pstDef);
N
N
N/**
N* @brief Implementation of function vGfLayerShearFull
N*
N* Shears an image in x- and y-direction by the specified factors into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32FactorX - Shearing factor in x-direction
N* @param[in] f32FactorY - Shearing factor in y-direction
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerShearFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
N                       int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerShearBlendFull
N*
N* Shears an image in x- and y-direction by the specified factors into the given layer with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32FactorX - Shearing factor in x-direction
N* @param[in] f32FactorY - Shearing factor in y-direction
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerShearBlendFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerScaleFull
N*
N* Scales an image in x- and y-direction by the specified factors into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32FactorX - Scaling factor in x-direction
N* @param[in] f32FactorY - Scaling factor in y-direction
N* @param[in] eAlignment - Alignment in source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerScaleFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY,
N                       rot_scaleAlign_e eAlignment, gf_layer_st * pstLayer,
N                       int32_t i32PosX, int32_t i32PosY);
N
N
N#ifdef GA_USE_MATH_LIB
N/**
N* @brief Implementation of function vGfLayerScaleBlendFull
N*
N* Scales an image in x- and y-direction by the specified factors into the given layer with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstImage   - Pointer to source image
N* @param[in] f32FactorX - Scaling factor in x-direction
N* @param[in] f32FactorY - Scaling factor in y-direction
N* @param[in] eAlignment - Alignment in source image
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] i32PosX    - X-offset from the destination buffer start
N* @param[in] i32PosY    - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerScaleBlendFull(gf_image_st * pstImage, float32_t f32FactorX, float32_t f32FactorY,
N                            rot_scaleAlign_e eAlignment, gf_layer_st * pstLayer,
N                            int32_t i32PosX, int32_t i32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerPerspectiveBlitFull
N*
N* Puts an image into perspective by rotation on x-, y- and z-axis by the specified angle
N* and blits it into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstImage     - Pointer to source image
N* @param[in] f32AngleX    - Rotation angle x-axis
N* @param[in] f32AngleY    - Rotation angle y-axis
N* @param[in] f32AngleZ    - Rotation angle z-axis
N* @param[in] f32FactorX   - Scaling factor X
N* @param[in] f32FactorY   - Scaling factor Y
N* @param[in] pstLayer     - Pointer to destination layer
N* @param[in] i32PosX      - X-offset from the destination buffer start
N* @param[in] i32PosY      - Y-offset from the destination buffer start
N* @param[in] u32RotPointX - Rotation point X
N* @param[in] u32RotPointY - Rotation point Y
N*
N* @return void
N*/
Nvoid vGfLayerPerspectiveBlitFull(gf_image_st * pstImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
N                                 float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
N                                 int32_t i32PosX, int32_t i32PosY,
N                                 uint32_t u32RotPointX, uint32_t u32RotPointY);
N#endif
N
N
N/**
N* @brief Implementation of function vGfLayerPerspectiveBlendFull
N*
N* Puts an image into perspective by rotation on x-, y- and z-axis by the specified angle
N* and blends it into the given layer
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel rotation point positioning possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstImage     - Pointer to source image
N* @param[in] f32AngleX    - Rotation angle x-axis
N* @param[in] f32AngleY    - Rotation angle y-axis
N* @param[in] f32AngleZ    - Rotation angle z-axis
N* @param[in] f32FactorX   - Scaling factor X
N* @param[in] f32FactorY   - Scaling factor Y
N* @param[in] pstLayer     - Pointer to destination layer
N* @param[in] i32PosX      - X-offset from the destination buffer start
N* @param[in] i32PosY      - Y-offset from the destination buffer start
N* @param[in] u32RotPointX - Rotation point X
N* @param[in] u32RotPointY - Rotation point Y
N*
N* @return void
N*/
Nvoid vGfLayerPerspectiveBlendFull(gf_image_st * pstImage, float32_t f32AngleX, float32_t f32AngleY, float32_t f32AngleZ,
N                                  float32_t f32FactorX, float32_t f32FactorY, gf_layer_st * pstLayer,
N                                  int32_t i32PosX, int32_t i32PosY,
N                                  uint32_t u32RotPointX, uint32_t u32RotPointY);
N
N
N/**
N* @brief Implementation of function vGfLayerTransformationFull
N*
N* Transforms an image with the transformation table
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage  - Pointer to source image
N* @param[in] pstLayer  - Pointer to destination layer
N* @param[in] pstTable  - Pointer to transformation table
N* @param[in] u32PosX   - X-offset from the destination buffer start
N* @param[in] u32PosY   - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerTransformationFull(gf_image_st * pstImage, gf_layer_st * pstLayer,
N                                gf_table_st * pstTable, uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerTransformationFullOptimized
N*
N* Transforms an image with the transformation table cache optimized
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage       - Pointer to source image
N* @param[in] pstLayer       - Pointer to destination layer
N* @param[in] pstTable       - Pointer to transformation table
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Block width
N* @param[in] u32BlockHeight - Block height
N*
N* @return void
N*/
Nvoid vGfLayerTransformationFullOptimized(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable,
N                                         uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfLayerTransformationBlendFull
N*
N* Transforms an image with the transformation table with blend
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage - Pointer to source image
N* @param[in] pstLayer - Pointer to destination layer
N* @param[in] pstTable - Pointer to transformation table
N* @param[in] u32PosX  - X-offset from the destination buffer start
N* @param[in] u32PosY  - Y-offset from the destination buffer start
N*
N* @return void
N*/
Nvoid vGfLayerTransformationBlendFull(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable,
N                                     uint32_t u32PosX, uint32_t u32PosY);
N
N
N/**
N* @brief Implementation of function vGfLayerTransformationBlendFullOptimized
N*
N* Transforms an image with the transformation table cache optimized with blend
N*
N* @note No subpixel positioning possible.
N*
N* @param[in] pstImage       - Pointer to source image
N* @param[in] pstLayer       - Pointer to destination layer
N* @param[in] pstTable       - Pointer to transformation table
N* @param[in] u32PosX        - X-offset from the destination buffer start
N* @param[in] u32PosY        - Y-offset from the destination buffer start
N* @param[in] u32BlockWidth  - Block width
N* @param[in] u32BlockHeight - Block height
N*
N* @return void
N*/
Nvoid vGfLayerTransformationBlendFullOptimized(gf_image_st * pstImage, gf_layer_st * pstLayer, gf_table_st * pstTable,
N                                              uint32_t u32PosX, uint32_t u32PosY, uint32_t u32BlockWidth, uint32_t u32BlockHeight);
N
N
N/**
N* @brief Implementation of function vGfLayerDrawLine
N*
N* Draw a line
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*       Subpixel linewidth possible. Parameter (eResCPos of function vGfSetSubRes) has to be set accordingly.
N*
N* @param[in] pstLayer  - Pointer to destination layer
N* @param[in] pstOption - Pointer to option for draw operation
N* @param[in] pstLine   - Pointer to line properties for draw operation
N*
N* @return void
N*/
Nvoid vGfLayerDrawLine(gf_layer_st * pstLayer, drw_OpCfg_st *pstOption, drw_Line_st *pstLine);
N
N
N/**
N* @brief Implementation of function vGfLayerDrawTriangle
N*
N* Draw triangle
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstLayer  - Pointer to destination layer
N* @param[in] pstOption - Pointer to option for draw operation
N* @param[in] pstTrngl  - Pointer to triangle properties for draw operation
N*
N* @return void
N*/
Nvoid vGfLayerDrawTriangle(gf_layer_st * pstLayer, drw_OpCfg_st *pstOption, drw_Trngl_st *pstTrngl);
N
N
N/**
N* @brief Implementation of function vGfLayerDrawCircle
N*
N* Draw circle
N*
N* @note Subpixel positioning possible. Center Coordinates have to be set accordingly(only using eResPPos parameter of function vGfSetSubRes).
N*       (Do not set eResCPos parameter of function vGfSetSubRes for Subpixel positioning of center coordinates)     
N*       
N* @param[in] pstLayer  - Pointer to destination layer
N* @param[in] pstOption - Pointer to option for draw operation
N* @param[in] pstCircle - pointer to circle properties for draw operation
N*                        like center co-ordinates, radius, draw colour and AA effect
N*
N* Limitation : The center and radius of the circle should be given such that the circle lies completely in the positive quadrant.
N*
N* @return void
N*/
Nvoid vGfLayerDrawCircle(gf_layer_st *pstLayer, drw_OpCfg_st *pstOption, gf_circle_st *pstCircle);
N
N
N/**
N* @brief Implementation of function vGfLayerDrawPolygon
N*
N* Draw polygon
N*
N* @note Subpixel positioning possible. Coordinates parameter have to be set accordingly(using eResPPos parameter of function vGfSetSubRes).
N*
N* @param[in] pstLayer   - Pointer to destination layer
N* @param[in] pstOption  - Pointer to option for draw operation
N* @param[in] pstPolygon - Pointer to the vertices of the polygon, Number of vertices, draw colour and AA effects
N*
N* Limitation : The vertices should be given either in clockwise or anticlockwise direction only. The API will support only convex polygons.
N*
N* @return void
N*/
Nvoid vGfLayerDrawPolygon(gf_layer_st *pstLayer, drw_OpCfg_st *pstOption, gf_polygon_st *pstPolygon);
N
N
N/**
N* @brief Implementation of function vGfLayerBlitElement
N*
N* Set image configured in OpenGL style
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstLayer    - Pointer to destination layer
N*
N* @return void
N*/
Nvoid vGfLayerBlitElement(gf_image_st * pstSrcImage, gf_layer_st * pstLayer);
N
N
N/**
N* @brief Implementation of function vGfLayerBlendElement
N*
N* Set image configured in OpenGL style with blending
N*
N* @note Subpixel positioning possible. Coordinates and position parameter (eResPPos of function vGfSetSubRes) have to be set accordingly.
N*
N* @param[in] pstSrcImage - Pointer to source image
N* @param[in] pstLayer    - Pointer to destination layer
N*
N* @return void
N*/
Nvoid vGfLayerBlendElement(gf_image_st * pstSrcImage, gf_layer_st * pstLayer);
N
N
N/***************************************************************************/
N
N#endif /* GFUNCTIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 26 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "graphics_init.h"
N#include "mw_definitions.h"
L 1 "..\..\..\..\mw\inc\mw_definitions.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : MW specific definitions
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : Middleware
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.17 $
N*   DATE        : $Date: 2015/07/03 09:11:57 $
N*   TAG         : $Name: Graphic_Middleware_V1_5 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef MW_DEFINITIONS_H
N#define MW_DEFINITIONS_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_DEFINITIONS_H_REVISION     "$Revision: 1.17 $"
N#define MW_DEFINITIONS_H_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N/* general */
N#define ON      1
N#define OFF	    0
N
N/* Resolution Parameters  */
N#define QVGA_RES_50                   (0)
N#define QVGA_RES_60                   (1)
N#define HNTSC_RES_60                  (2)
N#define HVGA_RES_50                   (3)
N#define HVGA_RES_60                   (4)
N#define WIDE_RES_50                   (5)
N#define WIDE_RES_60                   (6)
N#define VGA_RES_50                    (7)
N#define VGA_RES_60                    (8)
N#define WVGA_RES_45                   (9)
N#define WVGA_RES_50                  (10)
N#define WVGA_RES_55                  (11)
N#define WVGA_RES_60                  (12)
N#define SVGA_RES_50                  (13)
N#define SVGA_RES_60                  (14)
N#define DVGA_RES_50                  (15)
N#define DVGA_RES_60                  (16)
N#define DVGA_1_RES_50                (17)
N#define DVGA_1_RES_60                (18)
N#define XGA_RES_50                   (19)
N#define XGA_RES_60                   (20)
N#define SXGA_RES_50                  (21)
N#define SXGA_RES_60                  (22)
N#define HD_RES                       (23)
N#define HITACHI_TX31D06VM2AAA_RES_50 (24)
N#define HITACHI_TX31D06VM2AAA_RES_60 (25)
N#define SHARP_1280_422_50            (26)
N#define SHARP_1280_422_60            (27)
N#define TX18D35VM0AAA_50             (28)
N#define TX18D35VM0AAA_60             (29)
N#define RES_960_720_50               (30) 
N#define AT070TN94_50             (31)
N#define AT070TN94_60             (32)
N#define  TC90195_60   (33)
N#define  CLAA121WB   (34) 
N#define	CLAA088WA	(35)
N/* definition if layer is not used */
N#define FMT_OFF         (0)
N
N/* Data Formats */
N#define FMT_RGBA32      (1)
N#define FMT_RGBA24      (2)
N#define FMT_RGB24       (3)
N#define FMT_RGB16       (4)
N
N#define FMT_GRAY8A     (10)
N#define FMT_GRAY8      (11)
N#define FMT_GRAY2      (12)
N#define FMT_GRAY1      (13)
N#define FMT_A          (14)
N
N#define FMT_RLERGBA32  (15)
N#define FMT_RLERGBA24  (16)
N#define FMT_RLERGB24   (17)
N#define FMT_RLERGB16   (18)
N#define FMT_RLECLUT8   (19)
N#define FMT_RLECLUT6   (20)
N#define FMT_RLECLUT4   (21)
N#define FMT_RLECLUT2   (22)
N#define FMT_RLECLUT1   (23)
N#define FMT_RLEGRAY8A  (24)
N#define FMT_RLEGRAY8   (25)
N#define FMT_RLEGRAY2   (26)
N#define FMT_RLEGRAY1   (27)
N#define FMT_RLEA       (28)
N
N#define FMT_PNGRGBA32  (29)
N#define FMT_PNGRGB24   (30)
N#define FMT_PNGCLUT8   (31)
N#define FMT_PNGCLUT4   (32)
N#define FMT_PNGCLUT2   (33)
N#define FMT_PNGCLUT1   (34)
N#define FMT_PNGGRAY8A  (35)
N#define FMT_PNGGRAY8   (36)
N#define FMT_PNGGRAY4   (37)
N#define FMT_PNGGRAY2   (38)
N#define FMT_PNGGRAY1   (39)
N
N/*********************************************/
N
N/**********************************************
N*            External variables               *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Function prototypes              *
N**********************************************/
N
N/*********************************************/
N
N#endif /* MW_DEFINITIONS_H */
N
N/***************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 28 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "ga.h"
N#include "png.h"
N#include "pinconfig.h"
L 1 "..\..\inc\pinconfig.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: pinconfig.h,v $
N*   Description : Port configuration header file
N******************************************************************************
N*   PROJECT     : Capricorn-Bt/C
N*   MODULE      : System
N*               : $Name:  $
N*   LIBRARIES   : None
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/pinconfig.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef _PINCONFIG_H
N#define _PINCONFIG_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC0
N *
N * Purpose:       Configure pins of GDC0
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC0(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_GDC1
N *
N * Purpose:       Configure pins of GDC1
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_GDC1(void);
N
N/****************************************************************************
N *
N * Function:      vPinconfig_Buttons
N *
N * Purpose:       Configure pins of Buttons
N *
N * Inputs:        void
N *
N * Outputs:       none
N *
N * Return Values: void
N *
N * Limitations:
N *
N ***************************************************************************/
Nvoid vPinconfig_Buttons(void);
N
N/****************************************************************************/
N
N
N#endif /* _PINCONFIG_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG *****************************
N*
N* $Log: pinconfig.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG *****************************/
L 31 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "dmc.h"
L 1 "..\..\..\..\lldd\inc\dmc.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : DMC low level driver header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : DMC
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/05/18 13:49:55 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef DMC_H
N#define DMC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define LLDD_DMC_H_REVISION     "$Revision: 1.14 $"
N#define LLDD_DMC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1772  /* Rule 5.1 : disable identifier too long */  
N#endif 
N/*********************************************/
N
N#define SDRAM_ADDRESS_BASE (0x40000000)
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N
N/*!< enable/disable */
Ntypedef enum tag_dmc_enable_e
N{
N    DMC_DISABLE = 0U,   /*!< Disable */
N    DMC_ENABLE  = 1U    /*!< Enable */
N} dmc_enable_e;
N
N/*!< Low/High */
Ntypedef enum tag_dmc_high_e
N{
N    DMC_LOW     = 0U,   /*!< Low */
N    DMC_HIGH    = 1U    /*!< High */
N} dmc_high_e;
N
N/*!< Status definitions */
Ntypedef enum tag_dmc_status_e
N{
N    DMC_STATUS_CONFIG    = 0U,   /*!< STATUS_CONFIG */
N    DMC_STATUS_READY     = 1U,   /*!< STATUS_READY */
N    DMC_STATUS_PAUSED    = 2U,   /*!< STATUS_PAUSED */
N    DMC_STATUS_LOW_POWER = 3U    /*!< STATUS_LOW_POWER */
N} dmc_status_e;
N
N/*!< Commands */
Ntypedef enum tag_dmc_cmd_e
N{
N    DMC_CMD_GO           = 0U,   /*!< Command GO */
N    DMC_CMD_SLEEP        = 1U,   /*!< Command SLEEP */
N    DMC_CMD_WAKEUP       = 2U,   /*!< Command WAKEUP */
N    DMC_CMD_PAUSE        = 3U,   /*!< Command PAUSE */
N    DMC_CMD_CONFIGURE    = 4U,   /*!< Command CONFIGURE */
N    DMC_CMD_ACTIVE_PAUSE = 7U    /*!< Command ACTIVE_PAUSE */
N} dmc_cmd_e;
N
N/*!< Memory type */
Ntypedef enum tag_dmc_type_e
N{
N    DMC_TYPE_SDRAM       = 0U,   /*!< SDR SDRAM */
N    DMC_TYPE_LPDDR       = 3U,   /*!< LPDDR */
N    DMC_TYPE_LPDDR_SDRAM = 4U   /*!< Combined SDR-LPDDR SDRAM */
N} dmc_type_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_chips_e
N{
N    DMC_ONE_CHIP       = 0U,   /*!< 1 Chip  */
N    DMC_TWO_CHIPS      = 1U,   /*!< 2 Chips */
N    DMC_THREE_CHIPS    = 2U,   /*!< 3 Chips */
N    DMC_FOUR_CHIPS     = 3U    /*!< 4 Chips */
N} dmc_mem_chips_e;
N
N/*!< Memory chip selects */
Ntypedef enum tag_dmc_mem_banks_e
N{
N    DMC_FOUR_BANKS     = 0U,   /*!< Four Banks */
N    DMC_TWO_BANKS      = 1U    /*!< Two Banks  */
N} dmc_mem_banks_e;
N
N/*!< Access Monitor resources */
Ntypedef enum tag_dmc_monitors_e
N{
N    DMC_ZERO_MONITOR   = 0U,   /*!< 0 Monitors */
N    DMC_ONE_MONITOR    = 1U,   /*!< 1 Monitor  */
N    DMC_TWO_MONITORS   = 2U,   /*!< 2 Monitors */
N    DMC_FOUR_MONITORS  = 3U    /*!< 4 Monitors */
N} dmc_monitors_e;
N
N/*!< DMC Device commands */
Ntypedef enum tag_dmc_direct_cmd_e
N{
N    DMC_PRECHARGEALL   = 0U,   /*!< PRECHARGEALL Command */
N    DMC_AUTO_REFRESH   = 1U,   /*!< AUTO REFRESH Command */
N    DMC_MODEREG        = 2U,   /*!< MODEREG/Extended MODEREG Command */
N    DMC_NOP            = 3U,   /*!< NOP Command */
N    DMC_DPD            = 4U    /*!< DPD Command */
N} dmc_direct_cmd_e;
N
N/*!< DMC Memory Configs */
Ntypedef enum tag_dmc_mem_config_e
N{
N    DMC_MEM_ZERO       = 0U,   /*!< Config value: Zero */
N    DMC_MEM_ONE        = 1U,   /*!< Config value: One */
N    DMC_MEM_TWO        = 2U,   /*!< Config value: Two */
N    DMC_MEM_THREE      = 3U,   /*!< Config value: Three */
N    DMC_MEM_FOUR       = 4U,   /*!< Config value: Four */
N    DMC_MEM_FIVE       = 5U   /*!< Config value: Five */
N} dmc_mem_config_e;
N
N/*!< Auto Precharge */
Ntypedef enum tag_dmc_auto_precharge_e
N{
N    DMC_ADDR_BIT_10    = 0U,   /*!< address bit 10 */
N    DMC_ADDR_BIT_8     = 1U   /*!< address bit 8  */
N} dmc_auto_precharge_e;
N
N/*!< Memory Protocol */
Ntypedef enum tag_dmc_mem_protocol_e
N{
N    DMC_SDR_PROTOCOL   = 0U,   /*!< SDR Protocol */
N    DMC_LPDDR_PROTOCOL = 3U   /*!< LPDDR Protocol */
N} dmc_mem_protocol_e;
N
N/*!< Read Delay Cycles */
Ntypedef enum tag_dmc_read_delay_e
N{
N    DMC_DELAY_ONE_CYCLE   = 1U,   /*!< One Idle Cycle */
N    DMC_DELAY_TWO_CYCLE   = 2U   /*!< Two Idle Cycle */
N} dmc_read_delay_e;
N
N/*!< AXI Address format */
Ntypedef enum tag_dmc_addr_format_e
N{
N    DMC_ADDR_RBC   = 0U,   /*!< One Idle Cycle */
N    DMC_ADDR_BRC   = 1U   /*!< Two Idle Cycle */
N} dmc_addr_format_e;
N
N/*!< Clock rate */
Ntypedef enum tag_dmc_clock_rate_e
N{
N    DMC_CLOCK_RATE_166MHz = 0U,   /*!< 166 MHz */
N    DMC_CLOCK_RATE_133MHz = 1U    /*!< 133 MHz */
N} dmc_clock_rate_e;
N
N/*!< Memory density */
Ntypedef enum tag_dmc_density_e
N{
N    DMC_DENSITY_128Mbit = 0U,   /*!< 128 Mbit */
N    DMC_DENSITY_256Mbit = 1U,   /*!< 256 Mbit */
N    DMC_DENSITY_1Gbit   = 2U,   /*!< 1 Gbit */
N    DMC_DENSITY_2Gbit   = 3U    /*!< 2 Gbit */
N} dmc_density_e;
N
N/*!< Bus width */
Ntypedef enum tag_dmc_width_e
N{
N    DMC_BUSWIDTH_16BIT = 0U,   /*!< 16 Bit */
N    DMC_BUSWIDTH_32BIT = 1U    /*!< 32 Bit */
N} dmc_width_e;
N
N/*!< SDRAM/LPDDR state */
Ntypedef enum tag_dmc_mem_device_state_e
N{
N    DMC_DEV_STATE_POWER_UP        = 0U,   /*!< State POWER_UP */
N    DMC_DEV_STATE_SELF_REFRESH    = 1U,   /*!< State SELF_REFRESH */
N    DMC_DEV_STATE_POWER_DOWN      = 2U,   /*!< State POWER_DOWN */
N    DMC_DEV_STATE_DEEP_POWER_DOWN = 3U    /*!< State DEEP_POWER_DOWN */
N} dmc_mem_device_state_e;
N
N/*!< System Controller Operating mode */
Ntypedef enum tag_sys_ctrl_op_mode_e
N{
N    SYS_STATE_FULL_MODE           = 0U,   /*!< State POWER_UP */
N    SYS_STATE_STOP_MODE           = 1U,   /*!< State POWER_DOWN */
N    SYS_STATE_SLEEP_MODE          = 2U,   /*!< State SLEEP */
N    SYS_STATE_STANDBY_MODE        = 3U   /*!< State STAND BY */
N} sys_ctrl_op_mode_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/*!< DMC status structure */
Ntypedef struct tag_dmc_memc_status_st
N{
N    dmc_status_e    eMemcStatus;        /*!< Status of DMC */
N    dmc_width_e     eMemoryWidth;       /*!< Memory data bus width */
N    dmc_type_e      eMemoryType;        /*!< Type of SDRAM that the DMC Supports */
N    dmc_mem_chips_e eMemChips;          /*!< Number of chip selects that the DMC supports */
N    dmc_mem_banks_e eMemBanks;          /*!< Number of banks that the DMC supports */
N    dmc_monitors_e  eMonitors;          /*!< Number of exclusive access monitor resources */
N} dmc_memc_status_st;
N
N/*!< register description for register user_config */
Ntypedef struct tag_dmc_user_config_bit_view_st
N{
N    uint32_t   gear_ratio0       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 5;   /*!< 11..15 bit(s) */
N    uint32_t   gear_ratio1       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config_bit_view_st;
N
N/*!< register description for register user_config1 */
Ntypedef struct tag_dmc_user_config1_bit_view_st
N{
N    uint32_t   gear_ratio2       : 11;  /*!<  0..10 bit(s) */
N    uint32_t                     : 1;   /*!< 11  bit(s)    */
N    uint32_t   enable            : 1;   /*!< 12  bit(s)    */
N    uint32_t   clock_mode_change : 1;   /*!< 13  bit(s)    */
N    uint32_t   use_min_delay     : 1;   /*!< 14  bit(s)    */
N    uint32_t                     : 1;   /*!< 15 bit(s)     */
N    uint32_t   gear_ratio3       : 11;  /*!< 16..26 bit(s) */
N    uint32_t                     : 5;   /*!< 27..31 bit(s) */
N} dmc_user_config1_bit_view_st;
N
N/* Memory device stucture */
Ntypedef struct tag_mem_device_st
N{
N    dmc_type_e        eType;  /* MEMORY_TYPE */
N    dmc_width_e       eWidth;   /* MEMORY_WIDTH */
N    dmc_clock_rate_e  eClock_rate;  /* MEMORY_CLOCK_RATE */
N    uint32_t          u32GearRatio_0;  /* GEAR_RATIO_0  */
N    uint32_t          u32GearRatio_1;  /* GEAR_RATIO_1  */
N    uint32_t          u32GearRatio_2;  /* GEAR_RATIO_2  */
N    uint32_t          u32GearRatio_3;  /* GEAR_RATIO_3  */
N    uint32_t          u32T_CAS;  /* MEMORY_T_CAS */
N    uint32_t          u32T_RAS;  /* MEMORY_T_RAS */
N    uint32_t          u32T_MRD;  /* MEMORY_T_MRD */
N    uint32_t          u32T_RC;   /* MEMORY_T_RC  */
N    uint32_t          u32T_RCD;  /* MEMORY_T_RCD */
N    uint32_t          u32T_RFC;  /* MEMORY_T_RFC */
N    uint32_t          u32T_RP;   /* MEMORY_T_RP  */
N    uint32_t          u32T_RRD;  /* MEMORY_T_RRD */
N    uint32_t          u32T_WR;   /* MEMORY_T_WR  */
N    uint32_t          u32T_WTR;  /* MEMORY_T_WTR */
N    uint32_t          u32T_XP;   /* MEMORY_T_XP  */
N    uint32_t          u32T_XSR;  /* MEMORY_T_XSR */
N    uint32_t          u32T_ESR;  /* MEMORY_T_ESR */
N} mem_device_st;
N
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/**
N* @brief Implementation of function vDMC_GetVersion
N*
N* Retrieve pointers to module and header revision and tag string
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pau8ModuleRevision - pointer to module revision string
N* @param[in,out] pau8ModuleTag      - pointer to module tag string
N* @param[in,out] pau8HeaderRevision - pointer to header revision string
N* @param[in,out] pau8HeaderTag      - pointer to header tag string
N* @param[in,out] pau8IORevision     - pointer to IO header revision string
N* @param[in,out] pau8IOTag          - pointer to IO header tag string
N*
N* @return void
N*/
Nvoid vDMC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                     uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                     uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N
N/**
N* @brief Implementation of function vDMC_Init
N*
N* Initialisation of memory controller for LPDDR/SDRAM
N*
N* @note No Limitations
N*
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_Init(mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function vDMC_MemoryDeviceInit
N*
N* Initializes the memory device
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vDMC_MemoryDeviceInit(void);
N
N
N/**
N* @brief Implementation of function i32DMC_EnterDeviceMode
N*
N* Changes the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_EnterDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                               mem_device_st *pstDeviceParams)
N;
N
N
N/**
N* @brief Implementation of function i32DMC_ExitDeviceMode
N*
N* Exit from the device(lpddr/sdram) mode based on System controller's 
N* operating mode
N*
N* @note No Limitations
N*
N* @param[in] eOpMode         - System controller operating mode
N* @param[in] eState          - Memory device mode
N* @param[in] pstDeviceParams - Pointer to memory device structure
N*
N* @param[in,out] none
N*
N* @return C_SUCCESS on success
N*         C_FAILED on failure
N*/
Nint32_t i32DMC_ExitDeviceMode(sys_ctrl_op_mode_e eOpMode, dmc_mem_device_state_e eState,
N                              mem_device_st *pstDeviceParams);
N
N
N/**
N* @brief Implementation of function eDMC_GetStatus
N*
N* Reads the status bits of the Memory Controller Status Register to 
N* determine the current state of the memory controller
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] none
N*
N* @return dma status
N*/
Ndmc_status_e eDMC_GetStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_GetFixedConfig
N*
N* Reads the configuration and current state of the DMC
N*
N* @note No Limitations
N*
N* @param[in] none
N*
N* @param[in,out] pstMemcStatus - Pointer to DMC configuration and status
N*
N* @return void
N*/
Nvoid vDMC_GetFixedConfig(dmc_memc_status_st *pstMemcStatus);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCntrlCommand
N*
N* Sets the operating state of the DMC
N*
N* @note Setting is not accessible in the Reset or Power-On Reset
N*
N* @param[in] eCmd - DMC Operating state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCntrlCommand(dmc_cmd_e eCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetDirectCommand
N*
N* Writes data to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u32Value    - Memory device command information
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDirectCommand(uint32_t u32Value);
N
N/**
N* @brief Implementation of function vDMC_SetExternalMemCommand
N*
N* Writes command to the Direct Command Register to generates 
N* commands to external memory device(sdram/lpddr)
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] eDirCmd    - Memory device command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExternalMemCommand(dmc_direct_cmd_e eDirCmd);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipNumber
N*
N* Sets the external memory chip select
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8ChipNo   - Chip Select
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipNumber(uint8_t u8ChipNo);
N
N
N/**
N* @brief Implementation of function vDMC_SetBankAddress
N*
N* Sets external memory bank address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u8BankAddr - External memory bank address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetBankAddress(uint8_t u8BankAddr);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemoryAddress
N*
N* Sets external memory address
N*
N* @note Only accessible when DMC is in Config state
N*
N* @param[in] u16Address - Mapped external memory address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemoryAddress(uint16_t u16Address);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig
N*
N* Sets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config  - Memory configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig
N*
N* Gets memory configuration
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] void
N*
N* @param[in,out] void
N*
N* @return memory configuration
N*/
Nuint32_t u32DMC_GetMemConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigActiveChips
N*
N* Sets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eActChips  - active chip
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigActiveChips(dmc_mem_chips_e eActChips);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigActiveChips
N*
N* Gets number of active chips
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of active chips
N*/
Ndmc_mem_chips_e eDMC_GetMemConfigActiveChips(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigQoS
N*
N* Sets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eQoS  - qos value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigQoS(dmc_mem_config_e eQoS);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigQoS
N*
N* Gets qos value
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return qos value
N*/
Ndmc_mem_config_e eDMC_GetMemConfigQoS(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigBurst
N*
N* Sets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eBurst  - number of data accesses
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigBurst(dmc_mem_config_e eBurst);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigBurst
N*
N* Gets the number of data accesses that DMC performs on memory
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of data accesses
N*/
Ndmc_mem_config_e eDMC_GetMemConfigBurst(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigRowAddr
N*
N* Sets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eRowAddr  - Row address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigRowAddr(dmc_mem_config_e eRowAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigRowAddr
N*
N* Gets the row address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return row address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigRowAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigColAddr
N*
N* Sets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigColAddr(dmc_mem_config_e eColAddr);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigColAddr
N*
N* Gets the column address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Column address
N*/
Ndmc_mem_config_e eDMC_GetMemConfigColAddr(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigStopClk
N*
N* Enable/Disable the memory clock to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eColAddr  - Column address
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigStopClk(dmc_enable_e eStopClk);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigStopClk
N*
N* Gets memory clock state whether its enabled/disabled to stop dynamically
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock state
N*/
Ndmc_enable_e eDMC_GetMemConfigStopClk(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPowerDown
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePoweDown  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPowerDown(dmc_enable_e ePoweDown);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPowerDown
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Ndmc_enable_e eDMC_GetMemConfigAutoPowerDown(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigAutoPreCharge
N*
N* Sets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] ePrecharge  - auto-precharge bit position
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigAutoPreCharge(dmc_auto_precharge_e ePrecharge);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemConfigAutoPreCharge
N*
N* Gets the position of the auto-precharge bit in the memory address
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the position of the auto-precharge bit
N*/
Ndmc_auto_precharge_e eDMC_GetMemConfigAutoPreCharge(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfigPwrDownPrd
N*
N* Sets the number of memory clock cycles for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8PwrDownPrd  - Number of memory clock cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfigPwrDownPrd(uint8_t u8PwrDownPrd);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemConfigPwrDownPrd
N*
N* Gets the number of memory clock cycles that set for auto power-down
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return Number of memory clock cycles
N*/
Nuint8_t u8DMC_GetMemConfigPwrDownPrd(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetRefreshPeriod
N*
N* Sets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16RefPrd  - Refresh period
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetRefreshPeriod(uint16_t u16RefPrd);
N
N
N/**
N* @brief Implementation of function u16DMC_GetRefreshPeriod
N*
N* Gets the refresh period
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the refresh period
N*/
Nuint16_t u16DMC_GetRefreshPeriod(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASLatency
N*
N* Sets the CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASLatency(uint8_t u8CASLatency);
N
N
N/**
N* @brief Implementation of function u8DMC_GetCASLatency
N*
N* Gets CAS latency time in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency time
N*/
Nuint8_t u8DMC_GetCASLatency(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetCASHalfCycle
N*
N* Sets the CAS latency time as 2.5
N*
N* @note Only accessible when DMC is in Config/Low power state,
N* use only when DMC accesses DDR devices and cas_latency field=2.
N*
N* @param[in] eHalfCycle  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetCASHalfCycle(dmc_enable_e eHalfCycle);
N
N
N/**
N* @brief Implementation of function eDMC_GetCASHalfCycle
N*
N* Checks whether CAS latency half cycle is enabled/disabled or not
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the CAS latency half cycle enable/disable status
N*/
Ndmc_enable_e eDMC_GetCASHalfCycle(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetDQSTiming
N*
N* Sets the DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CASLatency  - CAS latency time
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetDQSTiming(uint8_t u8DQSTiming);
N
N
N/**
N* @brief Implementation of function u8DMC_GetDQSTiming
N*
N* Gets DQS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the DQS delay
N*/
Nuint8_t u8DMC_GetDQSTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetModeRegTiming
N*
N* Sets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetModeRegTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetModeRegTiming
N*
N* Gets MODEREG to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the MODEREG to command delay
N*/
Nuint8_t u8DMC_GetModeRegTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToPrechargeTiming
N*
N* Sets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - MODEREG to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToPrechargeTiming
N*
N* Gets ACTIVE to PRECHARGE delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetActiveToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToActiveTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank x delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToActiveTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToActiveTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank x delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank x delay
N*/
Nuint8_t u8DMC_GetActiveToActiveTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveToRWTiming
N*
N* Sets delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - delay between an ACTIVE command 
N*                       and another memory command
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveToRWTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveToRWTiming
N*
N* Gets the delay between an ACTIVE command and another memory command, 
N* other than ACTIVE, to the same bank
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the delay between an ACTIVE command and another 
N*         memory command
N*/
Nuint8_t u8DMC_GetActiveToRWTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRCD
N*
N* Sets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRCD
N*
N* Gets the RAS to CAS delay in module clock cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_GetScheduleRCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RCD
N*
N* Sets t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - RAS to CAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RCD(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RCD
N*
N* Gets the t_RCD, the RAS to CAS delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the RAS to CAS delay
N*/
Nuint8_t u8DMC_Get_T_RCD(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetAutoRefreshTiming
N*
N* Sets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetAutoRefreshTiming(uint16_t u16Timing);
N
N
N/**
N* @brief Implementation of function u16DMC_GetAutoRefreshTiming
N*
N* Gets the AUTO REFRESH to command delay in memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint16_t u16DMC_GetAutoRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRFC
N*
N* Sets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets the AUTO REFRESH to command delay in module clock
N* cycles minus 3
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_GetScheduleRFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RFC
N*
N* Sets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - AUTO REFRESH to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RFC(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRFC
N*
N* Gets t_RFC, the AUTO REFRESH to command delay in
N* memory clock cycles
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the AUTO REFRESH to command delay
N*/
Nuint8_t u8DMC_Get_T_RFC(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetPrechargeTiming
N*
N* Sets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetPrechargeTiming
N*
N* Gets the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetScheduleRP
N*
N* Sets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - PRECHARGE to RAS delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetScheduleRP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetScheduleRP
N*
N* Gets the PRECHARGE to RAS delay in module clock
N* cycles minus 3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the PRECHARGE to RAS delay
N*/
Nuint8_t u8DMC_GetScheduleRP(void);
N
N
N/**
N* @brief Implementation of function vDMC_Set_T_RP
N*
N* Sets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - t_RP
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_Set_T_RP(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_Get_T_RP
N*
N* Gets t_RP, the PRECHARGE to RAS delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the t_RP delay
N*/
Nuint8_t u8DMC_Get_T_RP(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetActiveDiffBankTiming
N*
N* Sets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - ACTIVE bank x to ACTIVE bank y delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetActiveDiffBankTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetActiveDiffBankTiming
N*
N* Gets ACTIVE bank x to ACTIVE bank y delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the ACTIVE bank x to ACTIVE bank y delay
N*/
Nuint8_t u8DMC_GetActiveDiffBankTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToPrechargeTiming
N*
N* Sets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToPrechargeTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToPrechargeTiming
N*
N* Gets Write to PRECHARGE delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToPrechargeTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetWriteToReadTiming
N*
N* Sets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - Write to PRECHARGE delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetWriteToReadTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetWriteToReadTiming
N*
N* Gets Write to Read delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return the Write to PRECHARGE delay
N*/
Nuint8_t u8DMC_GetWriteToReadTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitPowerDownTiming
N*
N* Sets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit power-down to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitPowerDownTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitPowerDownTiming
N*
N* Gets exit power-down to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit power-down to command delay
N*/
Nuint8_t u8DMC_GetExitPowerDownTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetExitSelfRefreshTiming
N*
N* Sets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - exit self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetExitSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetExitSelfRefreshTiming
N*
N* Gets the exit self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return exit self-refresh to command delay
N*/
Nuint8_t u8DMC_GetExitSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetSelfRefreshTiming
N*
N* Sets self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Timing - self-refresh to command delay
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetSelfRefreshTiming(uint8_t u8Timing);
N
N
N/**
N* @brief Implementation of function u8DMC_GetSelfRefreshTiming
N*
N* Gets the self-refresh to command delay in memory clock cycles.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return self-refresh to command delay
N*/
Nuint8_t u8DMC_GetSelfRefreshTiming(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig2
N*
N* Sets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - DMC Configuration
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig2(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig2
N*
N* Gets the configuration of DMC.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return DMC Configuration
N*/
Nuint32_t u32DMC_GetMemConfig2(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2ReadDelay
N*
N* Sets the number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8Delay - memory clock cycles between 0-2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2ReadDelay(uint8_t u8Delay);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg2ReadDelay
N*
N* Gets number of memory clock cycles before the
N* controller captures the read data, from the memory device,
N* into the memory clock domain.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory clock cycles
N*/
Nuint8_t u8DMC_GetMemCfg2ReadDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemProtocol
N*
N* Sets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eProtocol - memory protocal
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemProtocol(dmc_mem_protocol_e eProtocol);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemProtocol
N*
N* Gets the memory protocal that DMC supports.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory protocal
N*/
Ndmc_mem_protocol_e eDMC_GetMemCfg2MemProtocol(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2MemWidth
N*
N* Sets memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eWidth - bus width
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2MemWidth(dmc_width_e eMemWidth);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2MemWidth
N*
N* Gets the memory data bus width.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory data bus width
N*/
Ndmc_width_e eDMC_GetMemCfg2MemWidth(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2CkeInit
N*
N* Sets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of cke(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2CkeInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2CkeInit
N*
N* Gets the state of cke.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of cke.
N*/
Ndmc_high_e eDMC_GetMemCfg2CkeInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg2DqmInit
N*
N* Sets sets the state of the dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eInit - State of dqm(LOW/HIGH)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg2DqmInit(dmc_high_e eInit);
N
N
N/**
N* @brief Implementation of function eDMC_GetMemCfg2DqmInit
N*
N* Gets the state of dqm outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return state of dqm.
N*/
Ndmc_high_e eDMC_GetMemCfg2DqmInit(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemConfig3
N*
N* Sets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - prescalar and number of 
N*                        outstanding AUTO REFRESH commands.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemConfig3(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetMemConfig3
N*
N* Gets the power_dwn_prd prescalar value and
N* number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar and number of 
N*         outstanding AUTO REFRESH commands.
N*/
Nuint32_t u32DMC_GetMemConfig3(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3PreScale
N*
N* Sets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16Prescale - prescalar value
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3PreScale(uint16_t u16Prescale);
N
N
N/**
N* @brief Implementation of function u16DMC_GetMemCfg3PreScale
N*
N* Gets the power_dwn_prd prescalar value.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return prescalar value
N*/
Nuint16_t u16DMC_GetMemCfg3PreScale(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetMemCfg3MaxRefsCmds
N*
N* Sets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8MaxRefsCmds - number of outstanding 
N*                            AUTO REFRESH commands
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetMemCfg3MaxRefsCmds(uint8_t u8MaxRefsCmds);
N
N
N/**
N* @brief Implementation of function u8DMC_GetMemCfg3MaxRefsCmds
N*
N* Gets the number of outstanding AUTO REFRESH commands.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of outstanding AUTO REFRESH commands.
N*/
Nuint8_t u8DMC_GetMemCfg3MaxRefsCmds(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetReadTransferDelay
N*
N* Sets number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eDelay - number of idle cycles
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetReadTransferDelay(dmc_read_delay_e eDelay);
N
N
N/**
N* @brief Implementation of function eDMC_GetReadTransferDelay
N*
N* Gets the number of idle cycles between back-to-back reads 
N* to different memory devices.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return number of idle cycles.
N*/
Ndmc_read_delay_e eDMC_GetReadTransferDelay(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetIdConfig
N*
N* Sets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID    - Configuration ID, between 0 to 15
N* @param[in] u8QosMax   - maximum QoS value, between 0 to 255
N* @param[in] eQosMin    - minimum QoS value
N* @param[in] eQosEnable - enable/disable applying QoS to read transfer
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetIdConfig(uint8_t u8CfgID, uint8_t u8QosMax, 
N                      dmc_enable_e eQosMin, dmc_enable_e eQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_GetIdConfig
N*
N* Gets the value of QoS.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8CfgID  - Configuration ID, between 0 to 15
N*
N* @param[in,out] u8QosMax   - pointer to maximum QoS value
N* @param[in,out] eQosMin    - pointer to minimum QoS value
N* @param[in,out] eQosEnable - pointer to QoS enable/disable state
N*
N* @return void
N*/
Nvoid vDMC_GetIdConfig(uint8_t u8CfgID, uint8_t *pu8QosMax, 
N                        dmc_enable_e *pQosMin, dmc_enable_e *pQosEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfig
N*
N* Sets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - external memory device configuration 
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function u32DMC_GetChipConfig
N*
N* Gets the address decode for chip select bank, row, column 
N* organization of the memory device that connects to chip select.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return external memory device configuration 
N*/
Nuint32_t u32DMC_GetChipConfig(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrFmt
N*
N* Sets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eAddrFmt - memory organization format
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrFmt(dmc_addr_format_e eAddrFmt);
N
N
N/**
N* @brief Implementation of function eDMC_GetChipConfigAddrFmt
N*
N* Gets the memory organization format(RBC/BRC).
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return memory organization format
N*/
Ndmc_addr_format_e eDMC_GetChipConfigAddrFmt(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMatch
N*
N* Sets the reference address field to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMatch - reference address field
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMatch(uint8_t u8AddrMatch);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMatch
N*
N* Gets the reference address field used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return reference address field
N*/
Nuint8_t u8DMC_GetChipConfigAddrMatch(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetChipConfigAddrMask
N*
N* Sets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u8AddrMask - address mask
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetChipConfigAddrMask(uint8_t u8AddrMask);
N
N
N/**
N* @brief Implementation of function u8DMC_GetChipConfigAddrMask
N*
N* Gets the address mask value used to select the memory device.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return address mask
N*/
Nuint8_t u8DMC_GetChipConfigAddrMask(void);
N
N
N/**
N* @brief Implementation of function eDMC_GetUserStatus
N*
N* Gets the status of the user_status inputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] none
N*
N* @param[in,out] void
N*
N* @return user status inputs
N*/
Ndmc_enable_e eDMC_GetUserStatus(void);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig
N*
N* Sets the state of the user config outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config state(gear ratio)
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio0
N*
N* Sets the user config's gear ratio0.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio0.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio0(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfigGearRatio1
N*
N* Sets the user config's gear ratio1.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio1.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfigGearRatio1(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1
N*
N* Sets the state of the user config1 outputs.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u32Config - user config1 state
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1(uint32_t u32Config);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio3
N*
N* Sets the user config1's gear ratio3.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio3.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio3(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1UseMinDelay
N*
N* Sets the delay to compensate the DLLs minimum Delay in LPDDR mode.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] boDelay - delay.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1UseMinDelay(bool_t boDelay);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1ClkModeChange
N*
N* Sets the Clock Mode Change of Leaf DLL cells.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eModeChange - Clock Mode Change
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1ClkModeChange(dmc_enable_e eModeChange);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1SignalEn
N*
N* Enable/Disable signal for Master DLL.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] eEnable - Enable/Disable signal for Master DLL
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1SignalEn(dmc_enable_e eEnable);
N
N
N/**
N* @brief Implementation of function vDMC_SetUserConfig1GearRatio2
N*
N* Sets the user config1's gear ratio2.
N*
N* @note Only accessible when DMC is in Config/Low power state
N*
N* @param[in] u16GearRatio - gear ratio2.
N*
N* @param[in,out] void
N*
N* @return void
N*/
Nvoid vDMC_SetUserConfig1GearRatio2(uint16_t u16GearRatio);
N
N
N/**
N* @brief Implementation of function vSetEarlyWriteResponse
N*
N* Configure Early Write Response
N*
N* @note No Limitations
N*
N* @param[in] eEnable - enable or disable Early Write Response
N*
N* @param[in,out] none
N*
N* @return void
N*/
Nvoid vSetEarlyWriteResponse(dmc_enable_e eEnable);
N
N
N/****************************************************************************/
N
N
N#endif /* DMC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
L 32 "..\..\..\..\mw\src\graphics_init.c" 2
N#include "config.h"
L 1 "..\..\inc\config.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH,
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   File Name   : $RCSfile: config.h,v $
N*   Description :
N******************************************************************************
N*   PROJECT     : Capricorn
N*   MODULE      : config
N*               : $Name:  $
N*   LIBRARIES   :
N*   AUTHOR      : $Author: mto $
N******************************************************************************
N*   VERSION     : $Revision: 1.1 $
N*   RELEASE     : Preliminary & Confidential
N*   DATE        : $Date: 2014/05/09 14:05:53 $
N*   SOURCE MOD. : $Source: /teenet/mpumcu/Capricorn/Capricorn_Bt/bld/Basic_Graphics_Keil/inc/config.h,v $
N*   LOG:        : please have a look at the end of the file
N*****************************************************************************/
N#ifndef CONFIG_H
N#define CONFIG_H
N
N/*****************************************************************************************
N*                Include files
N*****************************************************************************************/
N#include "mw_definitions.h"
N#include "qspi.h"
L 1 "..\..\..\..\hldd\inc\qspi.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI functions header file
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     : TSM-Driver
N*   MODULE      : General
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.14 $
N*   DATE        : $Date: 2015/06/24 15:14:52 $
N*   TAG         : $Name: HLDD_1_1 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef _QSPI_H
N#define _QSPI_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N#include "qspic.h"
L 1 "..\..\..\..\lldd\inc\qspic.h" 1
N/*****************************************************************************
N*   This software is copyright protected. All rights reserved
N*   Toshiba Electronics Europe GmbH
N*   European LSI Design and Engineering Center (ELDEC)
N******************************************************************************
N*   DESCRIPTION : QSPI controler low level register access
N******************************************************************************
N*   PLATFORM    : TMPR46xXBG-300
N*   PROJECT     :
N*   MODULE      : QSPI
N*   LIBRARIES   : None
N******************************************************************************
N*   VERSION     : $Revision: 1.35 $
N*   DATE        : $Date: 2015/05/04 09:07:14 $
N*   TAG         : $Name: LLDD_1_6 $
N*   RELEASE     : Preliminary & Confidential
N*****************************************************************************/
N#ifndef QSPIC_H
N#define QSPIC_H
N
N/**********************************************
N*                Include files                *
N**********************************************/
N#include "captypes.h"
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define LLDD_QSPIC_H_REVISION     "$Revision: 1.35 $"
N#define LLDD_QSPIC_H_TAG          "$Name: LLDD_1_6 $"
N
N#if defined(__GHS__) || defined(__ghs__)
X#if 0L || 0L
S  #pragma ghs nowarning 1840  /* Rule 5.7  [A] : disable No reuse of identifiers */
N#endif
N/****************************************************************************
N*                          CONTROLER SELECTION MACROS
N*             (Please use these macros to select module instances)
N*****************************************************************************/
Ntypedef enum tag_qspic_cntrl_e
N{
N#ifdef FPGA
S  QSPIC_CNTRL_0 = 0x0U,
S  QSPIC_CNTRL_1 = 0x800U,
S  QSPIC_CNTRL_2 = 0x1000
N#else
N  QSPIC_CNTRL_0 = 0,
N  QSPIC_CNTRL_1 = 0xAF8000,  
N  QSPIC_CNTRL_2 = 0x1000
N#endif   
N} qspic_cntrl_e;
N
N/*********************************************/
N
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
Nextern void    read_burst4(int32_t i32addr, uint32_t * pu32Data);
Nextern void    read_burst8(int32_t i32addr, uint32_t * pu32Data);
Nextern void    word_write(int32_t i32addr, int32_t data);
Nextern void    hword_write(int32_t i32addr, int32_t data);
Nextern void    byte_write(int32_t i32addr, int32_t data);
Nextern int32_t word_read(int32_t i32addr);
Nextern int32_t hword_read(int32_t i32addr);
Nextern int32_t byte_read(int32_t i32addr);
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* Command Operation Code */
Ntypedef enum tag_qspic_CmdOp_e
N{
N  QSPI_CMD_READ_SINGLE        = 0x03,
N  QSPI_CMD_FAST_READ_SINGLE   = 0x0B,
N  QSPI_CMD_FAST_READ_DUAL_OUT = 0x3B,
N  QSPI_CMD_FAST_READ_DUAL_IO  = 0xBB,
N  QSPI_CMD_FAST_READ_QUAD_OUT = 0x6B,
N  QSPI_CMD_FAST_READ_QUAD_IO  = 0xEB
N} qspi_CmdOp_e;
N
N/* SPI I/O Control */
Ntypedef enum tag_qspic_IOCtrl_e
N{
N  QSPI_SINGLE = 0,
N  QSPI_DUAL   = 1,
N  QSPI_QUAD   = 2
N} qspi_IOCtrl_e;
N
N/* Address byte count */
Ntypedef enum tag_qspic_AddrByte_e
N{
N  QSPI_ADDR_3BYTE = 0,
N  QSPI_ADDR_4BYTE = 1
N} qspi_AddrByte_e;
N
N/* QSPI flash device no. */
Ntypedef enum tag_qspic_dev_e
N{
N    QSPIC_DEV_0 = 0,                         /* QSPI flash on CS0 */
N    QSPIC_DEV_1 = 1                          /* QSPI flash on CS1 */
N} qspic_dev_e;
N
N/* SPI flash density */
Ntypedef enum tag_qspic_density_e
N{
N    /* dependant on SI_AddrByte */
N    /* SI_AddrByte = 0 */
N    QSPIC_64KB   = 0,                         /*  64 KB */
N    QSPIC_128KB  = 1,                         /* 128 KB */
N    QSPIC_256KB  = 2,                         /* 256 KB */
N    QSPIC_512KB  = 3,                         /* 512 KB */
N    QSPIC_1MB    = 4,                         /*   1 MB */
N    QSPIC_2MB    = 5,                         /*   2 MB */
N    QSPIC_4MB    = 6,                         /*   4 MB */
N    QSPIC_8MB    = 7,                         /*   8 MB */
N    QSPIC_16MB   = 8,                         /*  16 MB */
N    /* SI_AddrByte = 1 */
N    QSPIC_32MB   = 9,                         /*  32 MB */
N    QSPIC_64MB   = 10,                        /*  64 MB */
N    QSPIC_128MB  = 11,                        /* 128 MB */
N    QSPIC_256MB  = 12                         /* 256 MB */
N} qspic_density_e;
N
N/* SPI data capture edge */
Ntypedef enum tag_qspic_sdce_e
N{
N    QSPIC_1ST_POS_EDGE = 0x00,              /* data capture @ 1st positive edge */
N    QSPIC_1ST_NEG_EDGE = 0x01,              /* data capture @ 1st negative edge */ 
N    QSPIC_2ND_POS_EDGE = 0x02,              /* data capture @ 2nd positive edge */
N    QSPIC_2ND_NEG_EDGE = 0x03               /* data capture @ 2nd negative edge */ 
N} qspic_sdce_e;
N
N/* SPI program access opcode */
Ntypedef enum tag_qspic_opcode_e
N{
N    /* read */
N    QSPIC_OPCODE_FAST_READ   = 0x0B,            /* Fast READ opcode */
N    QSPIC_OPCODE_READ_ID     = 0x90,            /* Read ID */   
N    QSPIC_OPCODE_READ_EXTID  = 0x9F,            /* Read Extended ID */
N    /* write control */
N    QSPIC_OPCODE_WRITE_EN    = 0x06,            /* WRITE enable */
N    QSPIC_OPCODE_WRITE_DIS   = 0x04,            /* WRITE disable */
N    /* erase */
N    QSPIC_OPCODE_4KBS_ERASE  = 0x20,            /* 4kB sector ERASE */
N    QSPIC_OPCODE_8KBS_ERASE  = 0x40,            /* 8kB sector ERASE */
N    QSPIC_OPCODE_64KBS_ERASE = 0xD8,            /* 64kB sector ERASE */
N    QSPIC_OPCODE_CHIP_ERASE  = 0xC7,            /* full chip ERASE opcode */
N    /* program */
N    QSPIC_OPCODE_PAGE_PGRM   = 0x02,            /* Page PROGRAM opcode */
N    /* Status */
N    QSPIC_OPCODE_RFST_READ   = 0x70,            /* Read Flag status register */
N    QSPIC_OPCODE_STS_READ    = 0x05,            /* Status read opcode */
N    QSPIC_OPCODE_STS_CLEAR   = 0x30,            /* Status clear */
N    /* Configuration read */
N    QSPIC_OPCODE_CFG_READ    = 0x35,            /* Configuration register read */
N    QSPIC_OPCODE_CFGM_READ   = 0x15,            /* Configuration register read */
N    /* Register write */
N    QSPIC_OPCODE_WRITE_REG   = 0x01,            /* Write Configuration & Status register opcode */
N    /* Release deep power down */
N    QSPIC_OPCODE_RELEASE_DP  = 0xAB,            /* Release from deep power down mode */
N    /* set 3/4 byte mode */
N    QSPIC_OPCODE_3_BYTE_MODE  = 0xE9,           /* Enable 3-byte mode */
N    QSPIC_OPCODE_4_BYTE_MODE  = 0xB7            /* Enable 4-byte mode */
N} qspic_opcode_e;
N
N/* Enable/disable */
Ntypedef enum tag_qspic_en_e
N{
N    QSPIC_DISABLE = 0x0U,                       /* Disable */
N    QSPIC_ENABLE  = 0x1U                        /* Enable */
N} qspic_en_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N/* SPI direct read control strucutre */
Ntypedef struct tag_qspic_direct_rd_ctrl_st
N{
N    qspi_CmdOp_e     eCmd;                  /* Quad-SPI command code   */
N    uint32_t         u32DummyByteCnt;       /* Number of dummy bytes   */
N    qspi_AddrByte_e  eAddrByteCnt;          /* Address mode 3-/4-Byte  */
N    qspi_IOCtrl_e    eSpiDatIOCtrl;         /* SPI Data I/O control    */
N    qspi_IOCtrl_e    eSpiDmyIOCtrl;         /* SPI Dummy I/O control   */
N    qspi_IOCtrl_e    eSpiAdrIOCtrl;         /* SPI Address I/O control */
N} qspic_direct_rd_ctrl_st;
N
Ntypedef struct tag_qspic_directconfig_st
N{
N    uint16_t                u16FlashBaseAddress;   /* physical base address (bits [31:16]), upper 4 bits are fixed and don't care */
N    qspic_density_e         eFlashDensity;         /* flash density */
N    qspic_en_e              eEnableMemMapRd;       /* enable memory map read */
N    qspic_direct_rd_ctrl_st stRdCtrl;              /* SPI mode read */
N    qspic_en_e              eWIPEnable;            /* WIP bit enable */
N    uint8_t                 u8CSTime;              /* deassertion time */
N    qspic_sdce_e            eEdge;                 /* capture edge */
N} qspic_directconfig_st;
N
Ntypedef struct tag_qspic_prgconfig_st
N{
N    uint8_t             u8CSTime;           /* deassertion time */
N    qspic_sdce_e        eEdge;              /* capture edge */
N    qspi_AddrByte_e     eAddrByteCnt;       /* Address mode 3-/4-Byte  */
N} qspic_prgconfig_st;
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vQSPIC_GetVersion
N *
N * Purpose:       Retrieve pointers to module and header revision and tag string
N *
N * Inputs:        none
N *
N * Outputs:       pau8ModuleRevision - pointer to module revision string
N *                pau8ModuleTag      - pointer to module tag string
N *                pau8HeaderRevision - pointer to header revision string
N *                pau8HeaderTag      - pointer to header tag string
N *                pau8IORevision     - pointer to IO header revision string
N *                pau8IOTag          - pointer to IO header tag string
N *
N * Return Values: void
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                       uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
N                       uint8_t** pau8IORevision, uint8_t** pau8IOTag);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigureDirectControl
N *
N * Purpose:       does complete configuration for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                pstDirConf     pointer to configuration for direct access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   The base address must be aligned on a boundary that is an integer
N *                 multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigureDirectControl(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_directconfig_st *pstDirConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_ConfigurePrgControl
N *
N * Purpose:       does complete configuration for program access
N *
N * Inputs:        eController     flash controller no.
N *                pstPrgConf      pointer to configuration for program access
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_ConfigurePrgControl(qspic_cntrl_e eController, qspic_prgconfig_st *pstPrgConf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashBaseAddress
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController           flash controller no.
N *                eDevice               device no.
N *                u16FlashBaseAddress   physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashBaseAddress 
N *
N * Purpose:       Reads memory base address of flash.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashBaseAddress(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t * u16FlashBaseAddress);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashDensity
N *
N * Purpose:       set flash size
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eFlashDensity    flash density (size)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectFlashDensity 
N *
N * Purpose:       Reads flash density.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *
N * Outputs:       flash density (size)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectFlashDensity(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_density_e * eFlashDensity);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableDirectMemMapRd 
N *
N * Purpose:       Enables and disables read access.
N *                If disabled, the SPI Flash device is not memory-mapped.
N *
N * Inputs:        eController      flash controller no.
N *                eDevice          device no.
N *                eEnableMemMap    enable/disable
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableDirectMemMapRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetDirectMemMapStatusRd 
N *
N * Purpose:       Reads status of direct memory map read.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetDirectMemMapStatusRd(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnableMemMap);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_SetDirectFlashMemMap
N *
N * Purpose:       set memory mapping and flash size
N *
N * Inputs:        eController            flash controller no.
N *                eDevice                device no.
N *                u16FlashBaseAddress    physical base address (bits [31:16]), upper 4 bits are fixed and don't care
N *                eFlashDensity          flash density (size)
N *                eEnableMemMapRd        enable/disable read
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   Specifies the base address of a CPU memory space to which SPI Flash #0/1
N *                should be mapped.
N *                The base address must be aligned on a boundary that is an integer
N *                multiple of the density of the SPI Flash selected
N *                otherwise, correct operation is not guaranteed
N *
N ***************************************************************************/
Nint32_t i32QSPIC_SetDirectFlashMemMap(qspic_cntrl_e eController, qspic_dev_e eDevice, uint16_t u16FlashBaseAddress,
N                                      qspic_density_e eFlashDensity, qspic_en_e eEnableMemMapRd);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetReadCtrl  
N *
N * Purpose:       specifies the configuration of the read command 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u32Ctrl        read control value 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   specifies the configuration of the read command
N *                that the hardware sequencer should issue to an
N *                SPI Flash device for direct read accesses.
N *                It affects Dual I/O and Quad I/O reads
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetReadCtrl 
N *
N * Purpose:       Reads the configuration of the read command.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       read control value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetReadCtrl(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t * u32Ctrl);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectEnableWIPPolling      
N *
N * Purpose:       Enables and disables the polling of the WIP bit of the
N *                status register in the SPI Flash (until the SPI Flash write
N *                is completed) before issuing a read command to it. 
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectEnableWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetStatusWIPPolling 
N *
N * Purpose:       Reads Status of WIP polling bit.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       enable/disable
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetStatusWIPPolling(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetCSDeassertionTime
N *
N * Purpose:       Specifies the deassertion time of SPI_CS_N for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time)
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetCSDeassertionTime 
N *
N * Purpose:       Reads Direct Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetCSDeassertionTime(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetCSDeassertionTime
N *
N * Purpose:       specifies the deassertion time of SPI_CS_0/1 for program access
N *
N * Inputs:        eController    flash controller no.
N *                u8CSTime       numerical value = (CSTime / HBUS cycle time) 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetCSDeassertionTime(qspic_cntrl_e eController, uint8_t u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetCSDeassertionTime 
N *
N * Purpose:       Reads Program Deassertion Time.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       numerical value = (CSTime / HBUS cycle time)
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetCSDeassertionTime(qspic_cntrl_e eController, uint8_t * u8CSTime);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for direct access
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                eEdge          1st pos. edge / 1st neg. edge 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectSetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_DirectGetDataCaptureEdge 
N *
N * Purpose:       Reads Direct Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_DirectGetDataCaptureEdge(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSetDataCaptureEdge
N *
N * Purpose:       Selects the active edge of SPI_CLK used to capture
N *                data on the SPI bus for programm access
N *
N * Inputs:        eController    flash controller no.
N *                eEdge          capture edge: 1st pos. edge / 1st neg. edge
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetDataCaptureEdge 
N *
N * Purpose:       Reads Program Capture Edge.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Capture edge: 1st pos. edge / 1st neg. edge
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetDataCaptureEdge(qspic_cntrl_e eController, qspic_sdce_e * eEdge);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_EnableInterrupt      
N *
N * Purpose:       Enables and disables SPI interrupts generated on completion
N *                of a program register access cycle 
N *
N * Inputs:        eController    flash controller no.
N *                eEnable        enable/disable 
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   If enabled, generates an interrupt when the
N *                SPI Cycle Done bit is set to 1.
N *
N ***************************************************************************/
Nint32_t i32QSPIC_EnableInterrupt(qspic_cntrl_e eController, qspic_en_e eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_GetInterruptStatus 
N *
N * Purpose:       Reads Interrupt status.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       Interrupt Status
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_GetInterruptStatus(qspic_cntrl_e eController, qspic_en_e * eEnable);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       C_TRUE or C_FALSE
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_IsSpiCycleDone(qspic_cntrl_e eController, bool_t * bResult);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleInPgrs 
N *
N * Purpose:       checks if SPI cycle is in progress 
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleInPgrs(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      boQSPIC_IsSpiCycleDone 
N *
N * Purpose:       checks if SPI cycle is in progress and clears the cycle
N *                done flag.
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: CC_TRUE or C_FALSE
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nbool_t boQSPIC_IsSpiCycleDone(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WaitForCompletion 
N *
N * Purpose:       Wait for cycle completion of previous program access
N *
N * Inputs:        eController    flash controller no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WaitForCompletion(qspic_cntrl_e eController);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmStatusFlagRead 
N *
N * Purpose:       Retrieve the value of the status register
N *                in the addressed SPI Flash device for Micron
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       *pu8Status    status register of SPI Flash device
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmStatusFlagRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Status);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmClearStatus 
N *
N * Purpose:       Clear the status register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmClearStatus(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmReleaseDP 
N *
N * Purpose:       Release from deep sleep power mode
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       None
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmReleaseDP(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationRead 
N *
N * Purpose:       Retrieve the current value of the configuration register
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Configuration);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmConfigurationWrite 
N *
N * Purpose:       Modify the value of the Status and Configuration registers
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *                u8Status       Desired value of the Status register  
N *                u8Conf         Desired value of the Configuration register  
N *
N * Outputs:       pu8Configuration Handle to the current configuration value
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   None
N *
N ***************************************************************************/
Nextern int32_t i32QSPIC_PgrmConfigurationWrite(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Status,  uint8_t u8Conf);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteEnable
N *
N * Purpose:       Enable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteEnable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteDisable
N *
N * Purpose:       Disable writing
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteDisable(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmSectErase
N *
N * Purpose:       SPI Flash Sector Erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                eOpcode           Sector erase opcode
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmSectErase(qspic_cntrl_e eController, qspic_dev_e eDevice, qspic_opcode_e eOpcode, uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmChipErase
N *
N * Purpose:       Full Chip Erase
N *
N * Inputs:        eController    flash controller no.
N *                eDevice        device no.
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmChipErase(qspic_cntrl_e eController, qspic_dev_e eDevice);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmPagePgrm
N *
N * Purpose:       Programming 256 bytes of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer to be written into
N *                                  flash device
N *
N * Outputs:       
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmPagePgrm(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmFastRead 
N *
N * Purpose:       Perform fast reading of 256 byte of data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u16DataCount      number of bytes to be written
N *
N * Outputs:       pu8Data           pointer to data buffer 
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmFastRead(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint16_t u16DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetID 
N *
N * Purpose:       Retrieve device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8ManID          Manufacturer ID
N *                pu8DevID          Device ID
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8ManID, uint8_t* const pu8DevID);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetExtendedID 
N *
N * Purpose:       Retrieve extended device identification
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetExtendedID(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t* const pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_WriteByte 
N *
N * Purpose:       Write one Byte to the device
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Value           value to be send
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_WriteByte(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Value);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmGetRegister 
N *
N * Purpose:       Retrieve content of register
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *
N * Outputs:       pu8Information    Handle to the infromation buffer
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmGetRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      i32QSPIC_PgrmWriteRegister 
N *
N * Purpose:       Write data
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u8Command         command to be issued
N *                u16Count          number of bytes to be read
N *                pu8Information    Handle to the infromation buffer
N *
N * Outputs:       none
N *
N * Return Values: C_SUCCESS on success
N *                C_FAILED on ivalid parameter range
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32QSPIC_PgrmWriteRegister(qspic_cntrl_e eController, qspic_dev_e eDevice, uint8_t u8Command, uint16_t u16Count, uint8_t* pu8Information);
N
N/****************************************************************************
N *
N * Function:      u32QSPIC_DirectReadWord
N *
N * Purpose:       Perform reading of one word from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *
N * Outputs:       none
N *
N * Return Values: read word
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nuint32_t u32QSPIC_DirectReadWord(uint32_t u32SpiPhysAddr);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst4
N *
N * Purpose:       Perform reading 4 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst4(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************
N *
N * Function:      vQSPIC_DirectReadBurst8
N *
N * Purpose:       Perform reading 8 words in burst from QSPI
N *
N * Inputs:        u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                pu32Data          pointer to return memory
N *
N * Outputs:       none
N *
N * Return Values: none
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nvoid vQSPIC_DirectReadBurst8(uint32_t u32SpiPhysAddr, uint32_t * pu32Data);
N
N/****************************************************************************/
N
N
N#endif /* QSPIC_H */
N
N/****************************************************************************/
N
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
L 26 "..\..\..\..\hldd\inc\qspi.h" 2
N#include "ccr.h"
N
N/*********************************************/
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N#define QSPI_WIP      0x1
N#define QSPI_WE       0x80
N#define SIZE_64KB     0x10000
N#define SIZE_256B     0x100
N#define MASK_64KB     0xFFFF0000
N
N/*********************************************/
N
N/**********************************************
N*                    Macros                   *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*               Enumerations                  *
N**********************************************/
N/* qspi devices */
Ntypedef enum qspi_dev_type_e
N{
N    DEV_MX25L3235E            =  1,   /* QSPI Device Type Micronix  - MX25L3235E */
N    DEV_MX25L6435E            =  2,   /* QSPI Device Type Micronix  - MX25L6435E */
N    DEV_MX25L12835F           =  3,   /* QSPI Device Type Micronix  - MX25L12835F */
N    DEV_MX66L51239F_3BYTE_ADR =  4,   /* QSPI Device Type Micronix  - MX66L51239F 3 Byte Addressing */
N    DEV_MX66L51239F_4BYTE_ADR =  5,   /* QSPI Device Type Micronix  - MX66L51239F 4 Byte Addressing */
N    DEV_N25Q064A              =  6,   /* QSPI Device Type Micron    - DEV_N25Q064A new */
N    DEV_N25Q512A_3BYTE_ADR    =  7,   /* QSPI Device Type Micron    - DEV_N25Q512A 3 Byte Addressing */
N    DEV_N25Q512A_4BYTE_ADR    =  8,   /* QSPI Device Type Micron    - DEV_N25Q512A 4 Byte Addressing */
N    DEV_S25FL032P             =  9,   /* QSPI Device Type Spansion  - S25FL032P */
N    DEV_S25FL064P             = 10,   /* QSPI Device Type Spansion  - S25FL064P */
N    DEV_S25FL127P             = 11,   /* QSPI Device Type Spansion  - S25FL127P */
N    DEV_S25FL116KIF01         = 12,   /* QSPI Device Type Spansion  - DEV_S25FL116KIF01 */
N    DEV_S25FL132KIF01         = 13,   /* QSPI Device Type Spansion  - DEV_S25FL132KIF01 */
N    DEV_S25FL164KIF01         = 14,   /* QSPI Device Type Spansion  - DEV_S25FL164KIF01 */
N    DEV_W25Q32B               = 15,   /* QSPI Device Type Winbond   - W25Q32B */
N    DEV_W25Q64C               = 16,   /* QSPI Device Type Winbond   - W25Q64C */
N    DEV_W25Q256F_3BYTE_ADR    = 17,   /* QSPI Device Type Winbond   - W25Q256F 3 Byte Addressing */
N    DEV_W25Q256F_4BYTE_ADR    = 18,   /* QSPI Device Type Winbond   - W25Q256F 4 Byte Addressing */
N    DEV_INTERNAL_32MBIT       = 19,   /* Internal QSPI (MX25L3235E) - 32MBit */
N    DEV_INTERNAL_64MBIT       = 20,   /* Internal QSPI (MX25L6435E) - 64MBit */
N    DEV_TYPE_INVALID          = 21    /* Device Invalid */
N} qspi_dev_type_e;
N
N/*********************************************/
N
N/**********************************************
N*                 Structures                  *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*            Forward declarations             *
N**********************************************/
N
N/*********************************************/
N
N/**********************************************
N*        Exported function prototypes         *
N**********************************************/
N
N/****************************************************************************
N *
N * Function:      vAssignQSPISettings
N *
N * Purpose:       assign settings dependant on
N *
N * Inputs:        u32QSPI_DeviceType   QSPI device selection (0 uses config in qspi_settings.h)
N *                u16BaseAddress       physical base address
N *
N * Outputs:       peClocFreq           pointer to clock frequence
N *                peModulationType     pointer to clock modulation type
N *                pstDirectConfig      pointer to direct interface configuration
N *                pstProgConfig        pointer to program interface configuration
N *
N * Return Values: C_SUCCESS/C_FAILED (parameter error)
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32AssignQSPISettings(qspi_dev_type_e eQSPI_DeviceType, uint16_t u16BaseAddress,
N                              ccr_clk_freq_e * peClocFreq, ccr_modulated_clk_e * peModulationType,
N                              qspic_directconfig_st * pstDirectConfig, qspic_prgconfig_st * pstProgConfig);
N
N/****************************************************************************
N *
N * Function:      i32ClearFlash
N *
N * Purpose:       clears flash sector by sector
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32SectorCount    number of sectors to be erased
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32ClearFlash(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32SectorCount);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWOE
N *
N * Purpose:       Perform program of Flash without erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWOE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N/****************************************************************************
N *
N * Function:      i32WriteToFlashWE
N *
N * Purpose:       Perform program of Flash with erase
N *
N * Inputs:        eController       flash controller no.
N *                eDevice           device no.
N *                u32SpiPhysAddr    addr [23:0] of phys. SPI flash device
N *                u32DataCount      number of bytes to be written
N *                pu8Data           pointer to data buffer
N *
N * Outputs:       none
N *
N * Return Values: C_FAILED or C_SUCCESS
N *
N * Limitations:   none
N *
N ***************************************************************************/
Nint32_t i32WriteToFlashWE(qspic_cntrl_e eController, qspic_dev_e eDevice, uint32_t u32SpiPhysAddr, uint32_t u32DataCount, uint8_t* const pu8Data);
N
N
N#endif /* _QSPI_H */
N
N
N/************************* BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of its
N  products. Nevertheless, semiconductor devices in general can malfunction or
N  fail due to their inherent electrical sensitivity and vulnerability to
N  physical stress. It is the responsibility of the buyer, when utilizing
N  TOSHIBA products, to comply with the standards of safety in making a safe
N  design for the entire system, and to avoid situations in which a malfunction
N  or failure of such TOSHIBA products could cause loss of human life, bodily
N  injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the ?Handling Guide for Semiconductor Devices,?
N  or ?TOSHIBA Semiconductor Reliability Handbook? etc..
N
N- The Toshiba products listed in this document are intended for usage in
N general electronics applications (computer, personal equipment, office
N  equipment, measuring equipment, industrial robotics, domestic appliances,
N  etc.). These Toshiba products are neither intended nor warranted for usage
N  in equipment that requires extraordinarily high quality and/or reliability
N  or a malfunction or failure of which may cause loss of human life or bodily
N  injury (?Unintended Usage?). Unintended Usage include atomic energy control
N  instruments, airplane or spaceship instruments, transportation instruments,
N  traffic signal instruments, combustion control instruments, medical
N  instruments, all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer?s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit, business interruption, loss of business
N  information, and other pecuniary losses) occurring from the use of, or
N  inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products. No responsibility is assumed by TOSHIBA
N  CORPORATION for any infringements of intellectual property or other rights
N  of the third parties which may result from its use. No license is granted by
N  implication or otherwise under any intellectual property or other rights
N  of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER *****************************/
N
L 29 "..\..\inc\config.h" 2
N
N/*****************************************************************************************
N* select Drehbuch
N* 0: 600-450, 1: 440, 2: 325, 3: 225
N*****************************************************************************************/
N#define DREHBUCH    (2)
N/* select output device
N* 0: monitor
N* 1: displays
N*****************************************************************************************/
N#define OUTPUT_DEVICE    0
N
N/*****************************************************************************************
N* QSPI
N* 1: S25FL032P
N* 2: S25FL064P
N*****************************************************************************************/
N#define QSPI_DEVICE      (DEV_S25FL127P)
N
N/*****************************************************************************************
N* Parallel NOR
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NOR_DEVICE      1
N
N/*****************************************************************************************
N* NAND
N* 1: xxx
N* 2: yyy
N*****************************************************************************************/
N#define NAND_DEVICE      1
N
N/*****************************************************************************************
N* RAM
N*  1: MT46H8M32LFB5-6
N*  2: MT46H16M32LFB5-6
N*  3: IS42S32800D-6
N*****************************************************************************************/
N#define RAM_DEVICE    2
N
N/*****************************************************************************************
N*                 D I S P L A Y   -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* enable GDC0 and / or GDC1 */
N#define GDCx0		ON
N#define GDCx1		OFF
N
N/* TO DO: Set Resolution (QVGA_RES / HNTSC_RES / HVGA_RES / VGA_RES / WVGA_RES / WVGA_1_RES /
N                          SVGA_RES / DVGA_RES / DVGA_1_RES / DVGA_1_RES_60) */
N#define DISPLAY_RESOLUTION_0 CLAA121WB//WVGA_RES_50 //DAL 20151221
N#define DISPLAY_RESOLUTION_1 QVGA_RES_60
N
N/****************************************************************************************
N*                        G D C 0  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC0 */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A 	ON
N#define GDC0_LAYER_B 	OFF
N#define GDC0_LAYER_C 	OFF
N#define GDC0_LAYER_D 	OFF
N#define GDC0_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF (only possible for layer A) / FMT_RGB16 / FMT_RGBA32 */
N#define GDC0_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC0_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC0_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC0_LAYER_D_DOUBLEFUFFERING		OFF
N#define GDC0_LAYER_E_DOUBLEFUFFERING		OFF
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC0_LAYERA_WIDTH     1280
N#define GDC0_LAYERA_HEIGHT    420
N#define GDC0_LAYERA_STARTX      0
N#define GDC0_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC0_LAYERB_WIDTH     400
N#define GDC0_LAYERB_HEIGHT    400
N#define GDC0_LAYERB_STARTX    550
N#define GDC0_LAYERB_STARTY    20
N
N/* Layer C */
N#define GDC0_LAYERC_WIDTH     800
N#define GDC0_LAYERC_HEIGHT    480
N#define GDC0_LAYERC_STARTX      0
N#define GDC0_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC0_LAYERD_WIDTH     800
N#define GDC0_LAYERD_HEIGHT    480
N#define GDC0_LAYERD_STARTX      0
N#define GDC0_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC0_LAYERE_WIDTH     800
N#define GDC0_LAYERE_HEIGHT    480
N#define GDC0_LAYERE_STARTX      0
N#define GDC0_LAYERE_STARTY      0
N
N
N/****************************************************************************************
N*                        G D C 1  -   C O N F I G U R A T I O N
N*****************************************************************************************/
N/* TO DO: Enable Layers that you plan to use with GDC1 */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A 	OFF
N#define GDC1_LAYER_B 	OFF
N#define GDC1_LAYER_C 	OFF
N#define GDC1_LAYER_D 	OFF
N#define GDC1_LAYER_E 	OFF
N
N/* TO DO: Set color format for each layer */
N/* possible values: FMT_OFF / FMT_RGB16 / FMT_RGBA32 */
N#define GDC1_LAYER_A_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_B_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_C_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_D_COLOR_FORMAT		FMT_RGBA32
N#define GDC1_LAYER_E_COLOR_FORMAT		FMT_RGBA32
N
N/* TO DO: select doublebuffering for each layer */
N/* possible values: ON / OFF */
N#define GDC1_LAYER_A_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_B_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_C_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_D_DOUBLEFUFFERING		ON
N#define GDC1_LAYER_E_DOUBLEFUFFERING		ON
N
N
N
N/* TO DO: Set parameters for all layers that you enabled above. */
N/* Layer A */
N#define GDC1_LAYERA_WIDTH     320
N#define GDC1_LAYERA_HEIGHT    240
N#define GDC1_LAYERA_STARTX      0
N#define GDC1_LAYERA_STARTY      0
N
N/* Layer B */
N#define GDC1_LAYERB_WIDTH     640
N#define GDC1_LAYERB_HEIGHT    480
N#define GDC1_LAYERB_STARTX      0
N#define GDC1_LAYERB_STARTY      0
N
N/* Layer C */
N#define GDC1_LAYERC_WIDTH	    640
N#define GDC1_LAYERC_HEIGHT    480
N#define GDC1_LAYERC_STARTX      0
N#define GDC1_LAYERC_STARTY      0
N
N/* Layer D */
N#define GDC1_LAYERD_WIDTH     640
N#define GDC1_LAYERD_HEIGHT    480
N#define GDC1_LAYERD_STARTX      0
N#define GDC1_LAYERD_STARTY      0
N
N/* Layer E */
N#define GDC1_LAYERE_WIDTH     640
N#define GDC1_LAYERE_HEIGHT    480
N#define GDC1_LAYERE_STARTX      0
N#define GDC1_LAYERE_STARTY      0
N
N#endif /* CONFIG_H */
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
N
N/********************************* BEGIN OF LOG ******************************
N*
N* $Log: config.h,v $
N* Revision 1.1  2014/05/09 14:05:53  mto
N* initial version
N*
N*
N*********************************** END OF LOG ******************************/
L 33 "..\..\..\..\mw\src\graphics_init.c" 2
N
N/*********************************************/
N
N
N/**********************************************
N*                 Constants                   *
N**********************************************/
N
N#define MW_GRAPHICS_INIT_C_REVISION     "$Revision: 1.16 $"
N#define MW_GRAPHICS_INIT_C_TAG          "$Name: Graphic_Middleware_V1_5 $"
N
N/*********************************************/
N
N
N/**********************************************
N*  Static variables and forward declarations  *
N**********************************************/ 
N
Nstatic uint8_t au8MW_GRAPHICS_INIT_C_REVISION[] = MW_GRAPHICS_INIT_C_REVISION;
Xstatic uint8_t au8MW_GRAPHICS_INIT_C_REVISION[] = "$Revision: 1.16 $";
Nstatic uint8_t au8MW_GRAPHICS_INIT_C_TAG[]      = MW_GRAPHICS_INIT_C_TAG;
Xstatic uint8_t au8MW_GRAPHICS_INIT_C_TAG[]      = "$Name: Graphic_Middleware_V1_5 $";
Nstatic uint8_t au8MW_GRAPHICS_INIT_H_REVISION[] = MW_GRAPHICS_INIT_H_REVISION;
Xstatic uint8_t au8MW_GRAPHICS_INIT_H_REVISION[] = "$Revision: 1.8 $";
Nstatic uint8_t au8MW_GRAPHICS_INIT_H_TAG[]      = MW_GRAPHICS_INIT_H_TAG;
Xstatic uint8_t au8MW_GRAPHICS_INIT_H_TAG[]      = "$Name: Graphic_Middleware_V1_5 $";
N
N
N/**********************************************
N*             Function definition             *
N**********************************************/
N
N/****************************************************************************/
N
Nvoid vGf_Graphics_Init_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
N                                  uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag)
N{
N   *pau8ModuleRevision = &au8MW_GRAPHICS_INIT_C_REVISION[0];
N   *pau8ModuleTag      = &au8MW_GRAPHICS_INIT_C_TAG[0];
N   *pau8HeaderRevision = &au8MW_GRAPHICS_INIT_H_REVISION[0];
N   *pau8HeaderTag      = &au8MW_GRAPHICS_INIT_H_TAG[0];
N}
N
N
N/****************************************************************************/
N
Nvoid vGfInitGDC0(gf_gdc_config_st * pstGDC)
N{
N    gdc_sync_st       stSyncCfg;
N    gf_disp_params_st stDispParams;
N
N    /* configure GDC0 pins */
N#if (GDCx0 == ON)
X#if (1 == 1)
N    vPinconfig_GDC0();
N#endif
N
N    /* Sync Config */
N    stSyncCfg.eSyncType = (gdc_csync_e)pstGDC->stDispConf.u8VSYNCType;	/* VSYNC type */
N    stSyncCfg.eVSyncPol = (gdc_pol_e)pstGDC->stDispConf.u8VSYNCPol;      /* Polarity of VSYNC */
N    stSyncCfg.eHSyncPol = (gdc_pol_e)pstGDC->stDispConf.u8HSYNCPol;      /* Polarity of HSYNC */
N
N    stSyncCfg.u8HsyncWdth  = (uint8_t)pstGDC->stDispConf.u16HSYNCWidth;  /* Width of HSYNC (dot-clocks) */
N    stSyncCfg.u16HLineLen  = pstGDC->stDispConf.u16HPeriod;              /* Horizontal line length (dot-clocks) */
N    stSyncCfg.u8VsyncWdth  = (uint8_t)pstGDC->stDispConf.u16VSYNCWidth;  /* Width of VSYNC (lines) */
N    stSyncCfg.u16VFrameLen = pstGDC->stDispConf.u16VPeriod;              /* Vertical Frame length (lines) */
N
N    /*** CLOCK ***/
N    /* switch GDC0 module-clock on */
N    i32CCR_EnableModuleClock(CCR_GDC_0, CCR_ENABLE);
N    /* Set Frequency */
N    i32CCR_SetClockFreq(CCR_GDC_0, pstGDC->stDispConf.eClockFrequency, pstGDC->stDispConf.eModulated);
N
N    /* GDC Driver Initialize */
N    vGDC_Init(GDC0);
N
N    /* Background Color */
N    vGDC_SetBgrColor(GDC0, pstGDC->stDispConf.u32BGColor);
N
N    /*** DOT-CLOCK ***/
N    /* Select clock source */
N    vGDC_SelDotClkSrc(GDC0, (gdc_idc_e)pstGDC->stDispConf.u8ClkSource);
N    /* Set Polarity */
N    vGDC_SetDotClkPol(GDC0, (gdc_pol_e)pstGDC->stDispConf.u8DotClkPol);
N
N    /*** SYNCHRONIZATION ***/
N    /* Sync signals direction */
N    vGDC_SetSyncDir(GDC0, (gdc_dir_e)pstGDC->stDispConf.u8SyncDir);
N    /* Synchronization Config.*/
N    vGDC_SyncConfig(GDC0, &stSyncCfg);
N    /* HDISP Polarity */
N    vGDC_SetPolHDisp(GDC0, (gdc_pol_e)pstGDC->stDispConf.u8HDISPPol);
N
N    /* set display parameter */
N    vGDC_SetDispConfigType(GDC0, pstGDC->stDispConf.eDispConfigType);
N    i32GDC_SetDisplayStart(GDC0, pstGDC->stDispConf.u16HSYNCWidth + pstGDC->stDispConf.u16HBackPorch + 64U + pstGDC->stDispConf.u16DispStartX,
N                                 pstGDC->stDispConf.u16VSYNCWidth + pstGDC->stDispConf.u16VBackPorch + 64U + pstGDC->stDispConf.u16DispStartY);
N    i32GDC_SetDisplaySize(GDC0, pstGDC->stDispConf.u16DispWidth, pstGDC->stDispConf.u16DispHeight);
N
N    /* Initialisation of layer structures */
N    vGfRegisterLayers(GDC0, pstGDC);
N
N    /* Layer initialization */
N    stDispParams.u16VSYNCWidth = pstGDC->stDispConf.u16VSYNCWidth;
N    stDispParams.u16VBackPorch = pstGDC->stDispConf.u16VBackPorch;
N    stDispParams.u16HSYNCWidth = pstGDC->stDispConf.u16HSYNCWidth;
N    stDispParams.u16HBackPorch = pstGDC->stDispConf.u16HBackPorch;
N    if (pstGDC->stLayerConf_A.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_A.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC0, &stGDC0LayerA, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_B.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_B.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC0, &stGDC0LayerB, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_C.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_C.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC0, &stGDC0LayerC, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_D.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_D.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC0, &stGDC0LayerD, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_E.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_E.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC0, &stGDC0LayerE, &stDispParams);
N    }
N
N    /* Dithering settings */
N    vGDC_SetDitheringMode(GDC0, pstGDC->stDispConf.eDithering);
N
N    /* set layer viewing order */
N    vGDC_SetLayerOrder(GDC0, pstGDC->stDispConf.eLayerOrder);
N
N    /* Switch-On the GDC */
N    vCCR_EnableGDC0Interface(CCR_ENABLE);
N    vGDC_Switch(GDC0, GDC_ON);
N}
N
N
N/****************************************************************************/
N
Nvoid vGfInitGDC1(gf_gdc_config_st * pstGDC)
N{
N    gdc_sync_st       stSyncCfg;
N    gf_disp_params_st stDispParams;
N
N    /* configure GDC1 pins */
N#if (GDCx1 == ON)
X#if (0 == 1)
S    vPinconfig_GDC1();
N#endif
N
N    /* Sync Config */
N    stSyncCfg.eSyncType = (gdc_csync_e)pstGDC->stDispConf.u8VSYNCType;  /* VSYNC type */
N    stSyncCfg.eVSyncPol = (gdc_pol_e)pstGDC->stDispConf.u8VSYNCPol;     /* Polarity of VSYNC */
N    stSyncCfg.eHSyncPol = (gdc_pol_e)pstGDC->stDispConf.u8HSYNCPol;     /* Polarity of HSYNC */
N
N    stSyncCfg.u8HsyncWdth  = (uint8_t)pstGDC->stDispConf.u16HSYNCWidth; /* Width of HSYNC (dot-clocks) */
N    stSyncCfg.u16HLineLen  = pstGDC->stDispConf.u16HPeriod;             /* Horizontal line length (dot-clocks) */
N    stSyncCfg.u8VsyncWdth  = (uint8_t)pstGDC->stDispConf.u16VSYNCWidth; /* Width of VSYNC (lines) */
N    stSyncCfg.u16VFrameLen = pstGDC->stDispConf.u16VPeriod;             /* Vertical Frame length (lines) */
N
N    /*** CLOCK ***/
N    /* switch GDC1 module-clock on */
N    i32CCR_EnableModuleClock(CCR_GDC_1, CCR_ENABLE);
N    /* Set Frequency */
N    i32CCR_SetClockFreq(CCR_GDC_1, pstGDC->stDispConf.eClockFrequency, pstGDC->stDispConf.eModulated);
N    /* set synchronisation mode between GDC0 and GDC1 */
N    vCCR_SetGDCSynchronisation(pstGDC->stDispConf.eGDC1Synchronisation);
N
N    /* GDC Driver Initialize */
N    vGDC_Init(GDC1);
N
N    /* Background Color */
N    vGDC_SetBgrColor(GDC1, pstGDC->stDispConf.u32BGColor);
N
N    /*** DOT-CLOCK ***/
N    /* Select clock source */
N    vGDC_SelDotClkSrc(GDC1, (gdc_idc_e)pstGDC->stDispConf.u8ClkSource);
N    /* Set Polarity */
N    vGDC_SetDotClkPol(GDC1, (gdc_pol_e)pstGDC->stDispConf.u8DotClkPol);
N
N    /*** SYNCHRONIZATION ***/
N    /* Sync signals direction */
N    vGDC_SetSyncDir(GDC1, (gdc_dir_e)pstGDC->stDispConf.u8SyncDir);
N    /* Synchronization Config.*/
N    vGDC_SyncConfig(GDC1, &stSyncCfg);
N    /* HDISP Polarity */
N    vGDC_SetPolHDisp(GDC1, (gdc_pol_e)pstGDC->stDispConf.u8HDISPPol);
N
N    /* set display parameter */
N    vGDC_SetDispConfigType(GDC1, pstGDC->stDispConf.eDispConfigType);
N    i32GDC_SetDisplayStart(GDC1, pstGDC->stDispConf.u16HSYNCWidth + pstGDC->stDispConf.u16HBackPorch + 64U + pstGDC->stDispConf.u16DispStartX,
N                                 pstGDC->stDispConf.u16VSYNCWidth + pstGDC->stDispConf.u16VBackPorch + 64U + pstGDC->stDispConf.u16DispStartY);
N    i32GDC_SetDisplaySize(GDC1, pstGDC->stDispConf.u16DispWidth, pstGDC->stDispConf.u16DispHeight);
N
N    /* initialisation of display layer */
N    vGfRegisterLayers(GDC1, pstGDC);
N
N    /* Layer initialization */
N    stDispParams.u16VSYNCWidth = pstGDC->stDispConf.u16VSYNCWidth;
N    stDispParams.u16VBackPorch = pstGDC->stDispConf.u16VBackPorch;
N    stDispParams.u16HSYNCWidth = pstGDC->stDispConf.u16HSYNCWidth;
N    stDispParams.u16HBackPorch = pstGDC->stDispConf.u16HBackPorch;
N    if (pstGDC->stLayerConf_A.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_A.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC1, &stGDC1LayerA, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_B.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_B.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC1, &stGDC1LayerB, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_C.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_C.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC1, &stGDC1LayerC, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_D.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_D.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC1, &stGDC1LayerD, &stDispParams);
N    }
N
N    if (pstGDC->stLayerConf_E.u8LayerActive == (uint8_t)ON)
X    if (pstGDC->stLayerConf_E.u8LayerActive == (uint8_t)1)
N    {
N        vGfSetLayer(GDC1, &stGDC1LayerE, &stDispParams);
N    }
N
N    /* Dithering settings */
N    vGDC_SetDitheringMode(GDC1, pstGDC->stDispConf.eDithering);
N
N    /* set layer viewing order */
N    vGDC_SetLayerOrder(GDC1, pstGDC->stDispConf.eLayerOrder);
N
N    /* Switch-On the GDC */
N    vCCR_EnableGDC1Interface(CCR_ENABLE);
N    vGDC_Switch(GDC1, GDC_ON);
N}
N
N
N/****************************************************************************/
N
Nvoid vGfInitFG(gf_fg_config_st* pstFG)
N{
N    /* Configure pins */
N#if (FRAMEGRABBER == ON)
X#if (FRAMEGRABBER == 1)
S    vPinconfig_FG();
N#endif
N
N    /* Enable FG clock */
N    i32CCR_EnableModuleClock(CCR_FG, CCR_ENABLE);
N
N    /* Buffer config */
N    vFG_SetCaptureBuffers(&(pstFG->stFgBuffer));
N
N    /* Set input configuration */
N    pstFG->stFgInMode.stSwapYcbCr = pstFG->stFgSwapYcbCr;
N    vFG_SetInputMode(&(pstFG->stFgInMode));
N
N    /* Set output mode */
N    vFG_SetOutputMode(&(pstFG->stFgOutMode));
N
N    /* Set configuration signals */
N    vFG_ConfigureFgSignal(&(pstFG->stFgSignal));
N
N    /* Configure cropping */
N    vFG_SetInputCropp(&(pstFG->stCroppConfig));
N    vFG_CroppingEnable(pstFG->eCroppingEnable);
N
N    /* Configure scaling */
N    vFG_SetScalingFactors(pstFG->u32ScaleX, pstFG->u32ScaleY);
N
N    /* Enable timing measurement */
N    vFG_EnableMeasurements(&(pstFG->stMeasurement));
N
N    /* Activate FG */
N    vFG_FrameGrabberEnable(pstFG->eFGEnable);
N}
N
N
N/****************************************************************************/
N
Nvoid vGfInitGA(void)
N{
N    uint8_t u8Counter = 0U;
N    uint32_t u32FilterCoefficients[64] =
N    {
N        0xffffffffU, 0xffffffffU, 0xffffffffU, 0xfefefefeU, 0xfefdfdfdU, 0xfdfcfcfcU, 0xfcfbfbfaU, 0xfafaf9f9U,
N        0xf9f8f8f7U, 0xf7f6f6f5U, 0xf5f4f4f3U, 0xf3f2f2f1U, 0xf0f0efeeU, 0xeeededecU, 0xebeaeae9U, 0xe8e8e7e6U,
N        0xe5e4e4e3U, 0xe2e1e0dfU, 0xdfdedddcU, 0xdbdad9d8U, 0xd7d6d5d5U, 0xd4d3d2d1U, 0xd0cfceccU, 0xcbcac9c8U,
N        0xc7c6c5c4U, 0xc3c2c1bfU, 0xbebdbcbbU, 0xbab9b7b6U, 0xb5b4b3b1U, 0xb0afaeadU, 0xabaaa9a8U, 0xa6a5a4a2U,
N        0xa1a09f9dU, 0x9c9b9998U, 0x97969493U, 0x92908f8eU, 0x8c8b8a88U, 0x87868483U, 0x81807f7dU, 0x7c7b7978U,
N        0x77757472U, 0x71706e6dU, 0x6c6a6968U, 0x66656362U, 0x615f5e5dU, 0x5b5a5857U, 0x56545352U, 0x504f4e4cU,
N        0x4b4a4847U, 0x46444342U, 0x403f3e3cU, 0x3b3a3937U, 0x36353332U, 0x31302e2dU, 0x2c2b2928U, 0x27262423U,
N        0x2221201eU, 0x1d1c1b1aU, 0x18171615U, 0x14131210U, 0x0f0e0d0cU, 0x0b0a0908U, 0x07060504U, 0x03020100U
N    };
N
N    /* Enable GA Module Clocks */
N    i32CCR_EnableModuleClock(CCR_GA, CCR_ENABLE);
N
N    /* Enable Graphic Accelerator */
N    vGA_Enable(GA_EN);
N
N    /* disable read ahead */
N    vGA_ReadAheadEnable(GA_DIS);
N
N    /* initialisation of filter coefficients of drawing engine  */
N    for (u8Counter=0U; u8Counter<64U; u8Counter++)
N    {
N        boDrw_SetFilterCoefDrawEngine(u8Counter, u32FilterCoefficients[u8Counter]);
N    }
N}
N
N
N/****************************************************************************/
N
Nvoid vGfInitGfxMiddleWare(gf_gdc_config_st* pstGDC0, gf_gdc_config_st* pstGDC1, gf_fg_config_st* pstFG)
N{
N    /* Init GA */
N    vGfInitGA();
N
N    /* Init PNG-decoder */
N    i32CCR_EnableModuleClock(CCR_PNG, CCR_ENABLE);
N    vPNG_Init();
N    vSetEarlyWriteResponse(DMC_ENABLE);
N
N    vGfInitMWStateVariable();
N
N    /* Initialize GA list management */
N    vGfListInit();
N
N    /* configure GDC0 */
N    if (pstGDC0->u8GDCActive == (uint8_t)ON)
X    if (pstGDC0->u8GDCActive == (uint8_t)1)
N    {
N        vGfInitGDC0(pstGDC0);
N    }
N
N    /* configure GDC1 */
N    if (pstGDC1->u8GDCActive == (uint8_t)ON)
X    if (pstGDC1->u8GDCActive == (uint8_t)1)
N    {
N        vGfInitGDC1(pstGDC1);
N    }
N
N    /* configure FG */
N    if (pstFG->u8FGActive == (uint8_t)ON)
X    if (pstFG->u8FGActive == (uint8_t)1)
N    {
N        vGfInitFG(pstFG);
N    }
N}
N
N/****************************************************************************/
N
N/***********************  BEGIN of DISCLAIMER   *****************************
N
N- TOSHIBA is continually working to improve the quality and reliability of
N  its products.
N  Nevertheless, semiconductor devices in general can malfunction or fail
N  due to their inherent electrical sensitivity and vulnerability to physical
N  stress. It is the responsibility of the buyer, when utilizing TOSHIBA
N  products, to comply with the standards of safety in making a safe design
N  for the entire system, and to avoid situations in which a malfunction or
N  failure of such TOSHIBA products could cause loss of human life,
N  bodily injury or damage to property.
N
N  In developing your designs, please ensure that TOSHIBA products are used
N  within specified operating ranges as set forth in the most recent TOSHIBA
N  products specifications. Also, please keep in mind the precautions and
N  conditions set forth in the “Handling Guide for Semiconductor Devices, or
N  TOSHIBA Semiconductor Reliability Handbook etc..
N
N- The Toshiba products listed in this document are intended for usage in
N  general electronics applications (computer, personal equipment,
N  office equipment, measuring equipment,industrial robotics, domestic
N  appliances, etc.). These Toshiba products are neither intended nor
N  warranted for usage in equipment that requires extraordinarily high quality
N  and/or reliability or a malfunction or failure of which may cause loss
N  of human life or bodily injury (“Unintended Usage).
N  Unintended Usage include atomic energy control instruments, airplane or
N  spaceship instruments, transportation instruments, traffic signal
N  instruments, combustion control instruments, medical instruments,
N  all types of safety devices, etc..
N  Unintended Usage of Toshiba products listed in this document shall be made
N  at the customer’s own risk.
N
N- Toshiba assumes no liability for any damage or losses (including but not
N  limited to, loss of business profit,business interruption, loss of business
N  information,and other pecuniary losses) occurring from the use of,
N  or inability to use, this product.
N
N- The products described in this document are subject to the foreign exchange
N  and foreign trade laws.
N
N- The products described in this document contain components made in the
N  United States and subject to export control of the U.S. authorities.
N  Diversion contrary to the U.S. law is prohibited.
N
N- The information contained herein is presented only as a guide for the
N  applications of our products.
N  No responsibility is assumed by TOSHIBA CORPORATION for any infringements
N  of intellectual property or other rights of the third parties which may
N  result from its use.
N  No license is granted by implication or otherwise under any intellectual
N  property or other rights of TOSHIBA CORPORATION or others.
N
N- The information contained herein is subject to change without notice.
N
N****************************  END of DISCLAIMER ****************************/
