; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\out\gpio.o --asm_dir=..\out\ --list_dir=..\out\ --depend=..\out\gpio.d --cpu=Cortex-R4 --apcs=interwork -O0 --diag_suppress=9931 -I..\..\inc -I..\..\usecases\inc -I..\..\..\..\common\inc -I..\..\..\..\cortex_r4_keil\inc -I..\..\..\..\freetype\inc -I..\..\..\..\hldd\inc -I..\..\..\..\lldd\inc -I..\..\..\..\lldd\hdr -I..\..\..\..\mw\inc -I..\..\usecases\images\inc -I..\..\..\..\cortex_r4\inc -I..\..\src -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=516 -D__KEIL__ -DMEASURE_TX --omf_browse=..\out\gpio.crf ..\..\..\..\lldd\src\gpio.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  vGPIO_GetVersion PROC
;;;410    
;;;411    void vGPIO_GetVersion(uint8_t** pau8ModuleRevision, uint8_t** pau8ModuleTag,
000000  e92d4070          PUSH     {r4-r6,lr}
;;;412                          uint8_t** pau8HeaderRevision, uint8_t** pau8HeaderTag,
;;;413                          uint8_t** pau8IORevision, uint8_t** pau8IOTag)
;;;414    {
000004  e1cd41d0          LDRD     r4,r5,[sp,#0x10]
;;;415       *pau8ModuleRevision = &au8LLDD_GPIO_C_REVISION[0];
000008  e59f68ac          LDR      r6,|L1.2236|
00000c  e5806000          STR      r6,[r0,#0]
;;;416       *pau8ModuleTag      = &au8LLDD_GPIO_C_TAG[0];
000010  e59f68a8          LDR      r6,|L1.2240|
000014  e5816000          STR      r6,[r1,#0]
;;;417       *pau8HeaderRevision = &au8LLDD_GPIO_H_REVISION[0];
000018  e59f68a4          LDR      r6,|L1.2244|
00001c  e5826000          STR      r6,[r2,#0]
;;;418       *pau8HeaderTag      = &au8LLDD_GPIO_H_TAG[0];
000020  e59f68a0          LDR      r6,|L1.2248|
000024  e5836000          STR      r6,[r3,#0]
;;;419       *pau8IORevision     = &au8LLDD_GPIO_IO_H_REVISION[0];
000028  e59f689c          LDR      r6,|L1.2252|
00002c  e5846000          STR      r6,[r4,#0]
;;;420       *pau8IOTag          = &au8LLDD_GPIO_IO_H_TAG[0];
000030  e59f6898          LDR      r6,|L1.2256|
000034  e5856000          STR      r6,[r5,#0]
;;;421    }
000038  e8bd8070          POP      {r4-r6,pc}
;;;422    
                          ENDP

                  i32GPIO_EnablePullUp PROC
;;;424    /****************************************************************************/
;;;425    int32_t i32GPIO_EnablePullUp(gpio_portpin_e ePin, gpio_en_e eEn)
00003c  e92d4010          PUSH     {r4,lr}
;;;426    {
000040  e1a02000          MOV      r2,r0
;;;427        int32_t i32Res = C_SUCCESS;
000044  e3a00000          MOV      r0,#0
;;;428    
;;;429        if(ePin <= PORT_ADC_IN13) 
000048  e3003135          MOV      r3,#0x135
00004c  e1520003          CMP      r2,r3
000050  ca000031          BGT      |L1.284|
;;;430        {
;;;431            /* check if feature available */
;;;432            if ((au8PORTRegisterValue[ePin][2] & 0x02U) > 0)
000054  e0823082          ADD      r3,r2,r2,LSL #1
000058  e59f4874          LDR      r4,|L1.2260|
00005c  e0833004          ADD      r3,r3,r4
000060  e5d33002          LDRB     r3,[r3,#2]
000064  e2033002          AND      r3,r3,#2
000068  e3530000          CMP      r3,#0
00006c  0a000028          BEQ      |L1.276|
;;;433            {
;;;434                if (eEn == GPIO_ENABLE)
000070  e3510001          CMP      r1,#1
000074  1a000013          BNE      |L1.200|
;;;435                {
;;;436                    vSetGPIO_GPIOC_PU(ePin, GPIO_ENABLE);
000078  e1a03082          LSL      r3,r2,#1
00007c  e24335ff          SUB      r3,r3,#0x3fc00000
000080  e2433afe          SUB      r3,r3,#0xfe000
000084  e1d330b0          LDRH     r3,[r3,#0]
000088  e3c33c01          BIC      r3,r3,#0x100
00008c  e2833c01          ADD      r3,r3,#0x100
000090  e1a04082          LSL      r4,r2,#1
000094  e24445ff          SUB      r4,r4,#0x3fc00000
000098  e2444afe          SUB      r4,r4,#0xfe000
00009c  e1c430b0          STRH     r3,[r4,#0]
;;;437                    vSetGPIO_GPIOC_PD(ePin, GPIO_DISABLE);
0000a0  e1a03082          LSL      r3,r2,#1
0000a4  e24335ff          SUB      r3,r3,#0x3fc00000
0000a8  e2433afe          SUB      r3,r3,#0xfe000
0000ac  e1d330b0          LDRH     r3,[r3,#0]
0000b0  e3c33c02          BIC      r3,r3,#0x200
0000b4  e1a04082          LSL      r4,r2,#1
0000b8  e24445ff          SUB      r4,r4,#0x3fc00000
0000bc  e2444afe          SUB      r4,r4,#0xfe000
0000c0  e1c430b0          STRH     r3,[r4,#0]
0000c4  ea000015          B        |L1.288|
                  |L1.200|
;;;438                }
;;;439                else
;;;440                {
;;;441                    vSetGPIO_GPIOC_PU(ePin, GPIO_DISABLE);
0000c8  e1a03082          LSL      r3,r2,#1
0000cc  e24335ff          SUB      r3,r3,#0x3fc00000
0000d0  e2433afe          SUB      r3,r3,#0xfe000
0000d4  e1d330b0          LDRH     r3,[r3,#0]
0000d8  e3c33c01          BIC      r3,r3,#0x100
0000dc  e1a04082          LSL      r4,r2,#1
0000e0  e24445ff          SUB      r4,r4,#0x3fc00000
0000e4  e2444afe          SUB      r4,r4,#0xfe000
0000e8  e1c430b0          STRH     r3,[r4,#0]
;;;442                    vSetGPIO_GPIOC_PD(ePin, GPIO_DISABLE);
0000ec  e1a03082          LSL      r3,r2,#1
0000f0  e24335ff          SUB      r3,r3,#0x3fc00000
0000f4  e2433afe          SUB      r3,r3,#0xfe000
0000f8  e1d330b0          LDRH     r3,[r3,#0]
0000fc  e3c33c02          BIC      r3,r3,#0x200
000100  e1a04082          LSL      r4,r2,#1
000104  e24445ff          SUB      r4,r4,#0x3fc00000
000108  e2444afe          SUB      r4,r4,#0xfe000
00010c  e1c430b0          STRH     r3,[r4,#0]
000110  ea000002          B        |L1.288|
                  |L1.276|
;;;443                }
;;;444            }
;;;445            else
;;;446            {
;;;447                i32Res = C_FAILED;
000114  e3e00000          MVN      r0,#0
000118  ea000000          B        |L1.288|
                  |L1.284|
;;;448            }
;;;449        }
;;;450        else
;;;451        {
;;;452            i32Res = C_FAILED;
00011c  e3e00000          MVN      r0,#0
                  |L1.288|
;;;453        }
;;;454    
;;;455        return i32Res;
;;;456    }
000120  e8bd8010          POP      {r4,pc}
;;;457    
                          ENDP

                  i32GPIO_EnablePullDown PROC
;;;459    /****************************************************************************/
;;;460    int32_t i32GPIO_EnablePullDown(gpio_portpin_e ePin, gpio_en_e eEn)
000124  e92d4010          PUSH     {r4,lr}
;;;461    {
000128  e1a02000          MOV      r2,r0
;;;462        int32_t i32Res = C_SUCCESS;
00012c  e3a00000          MOV      r0,#0
;;;463    
;;;464        if(ePin <= PORT_ADC_IN13) 
000130  e3003135          MOV      r3,#0x135
000134  e1520003          CMP      r2,r3
000138  ca000031          BGT      |L1.516|
;;;465        {
;;;466            /* check if feature available */
;;;467            if ((au8PORTRegisterValue[ePin][2] & 0x04U) > 0)
00013c  e0823082          ADD      r3,r2,r2,LSL #1
000140  e59f478c          LDR      r4,|L1.2260|
000144  e0833004          ADD      r3,r3,r4
000148  e5d33002          LDRB     r3,[r3,#2]
00014c  e2033004          AND      r3,r3,#4
000150  e3530000          CMP      r3,#0
000154  0a000028          BEQ      |L1.508|
;;;468            {
;;;469                if (eEn == GPIO_ENABLE)
000158  e3510001          CMP      r1,#1
00015c  1a000013          BNE      |L1.432|
;;;470                {
;;;471                    vSetGPIO_GPIOC_PU(ePin, GPIO_DISABLE);
000160  e1a03082          LSL      r3,r2,#1
000164  e24335ff          SUB      r3,r3,#0x3fc00000
000168  e2433afe          SUB      r3,r3,#0xfe000
00016c  e1d330b0          LDRH     r3,[r3,#0]
000170  e3c33c01          BIC      r3,r3,#0x100
000174  e1a04082          LSL      r4,r2,#1
000178  e24445ff          SUB      r4,r4,#0x3fc00000
00017c  e2444afe          SUB      r4,r4,#0xfe000
000180  e1c430b0          STRH     r3,[r4,#0]
;;;472                    vSetGPIO_GPIOC_PD(ePin, GPIO_ENABLE);
000184  e1a03082          LSL      r3,r2,#1
000188  e24335ff          SUB      r3,r3,#0x3fc00000
00018c  e2433afe          SUB      r3,r3,#0xfe000
000190  e1d330b0          LDRH     r3,[r3,#0]
000194  e3c33c02          BIC      r3,r3,#0x200
000198  e2833c02          ADD      r3,r3,#0x200
00019c  e1a04082          LSL      r4,r2,#1
0001a0  e24445ff          SUB      r4,r4,#0x3fc00000
0001a4  e2444afe          SUB      r4,r4,#0xfe000
0001a8  e1c430b0          STRH     r3,[r4,#0]
0001ac  ea000015          B        |L1.520|
                  |L1.432|
;;;473                }
;;;474                else
;;;475                {
;;;476                    vSetGPIO_GPIOC_PU(ePin, GPIO_DISABLE);
0001b0  e1a03082          LSL      r3,r2,#1
0001b4  e24335ff          SUB      r3,r3,#0x3fc00000
0001b8  e2433afe          SUB      r3,r3,#0xfe000
0001bc  e1d330b0          LDRH     r3,[r3,#0]
0001c0  e3c33c01          BIC      r3,r3,#0x100
0001c4  e1a04082          LSL      r4,r2,#1
0001c8  e24445ff          SUB      r4,r4,#0x3fc00000
0001cc  e2444afe          SUB      r4,r4,#0xfe000
0001d0  e1c430b0          STRH     r3,[r4,#0]
;;;477                    vSetGPIO_GPIOC_PD(ePin, GPIO_DISABLE);
0001d4  e1a03082          LSL      r3,r2,#1
0001d8  e24335ff          SUB      r3,r3,#0x3fc00000
0001dc  e2433afe          SUB      r3,r3,#0xfe000
0001e0  e1d330b0          LDRH     r3,[r3,#0]
0001e4  e3c33c02          BIC      r3,r3,#0x200
0001e8  e1a04082          LSL      r4,r2,#1
0001ec  e24445ff          SUB      r4,r4,#0x3fc00000
0001f0  e2444afe          SUB      r4,r4,#0xfe000
0001f4  e1c430b0          STRH     r3,[r4,#0]
0001f8  ea000002          B        |L1.520|
                  |L1.508|
;;;478                }
;;;479            }
;;;480            else
;;;481            {
;;;482                i32Res = C_FAILED;
0001fc  e3e00000          MVN      r0,#0
000200  ea000000          B        |L1.520|
                  |L1.516|
;;;483            }
;;;484        }
;;;485        else
;;;486        {
;;;487            i32Res = C_FAILED;
000204  e3e00000          MVN      r0,#0
                  |L1.520|
;;;488        }
;;;489    
;;;490        return i32Res;
;;;491    }
000208  e8bd8010          POP      {r4,pc}
;;;492    
                          ENDP

                  i32GPIO_EnableSchmittTrigger PROC
;;;494    /****************************************************************************/
;;;495    int32_t i32GPIO_EnableSchmittTrigger(gpio_portpin_e ePin, gpio_en_e eEn)
00020c  e92d4010          PUSH     {r4,lr}
;;;496    {
000210  e1a02000          MOV      r2,r0
;;;497        int32_t i32Res = C_SUCCESS;
000214  e3a00000          MOV      r0,#0
;;;498    
;;;499        if(ePin <= PORT_ADC_IN13) 
000218  e3003135          MOV      r3,#0x135
00021c  e1520003          CMP      r2,r3
000220  ca000012          BGT      |L1.624|
;;;500        {
;;;501            /* check if feature available */
;;;502            if ((au8PORTRegisterValue[ePin][2] & 0x08U) > 0)
000224  e0823082          ADD      r3,r2,r2,LSL #1
000228  e59f46a4          LDR      r4,|L1.2260|
00022c  e0833004          ADD      r3,r3,r4
000230  e5d33002          LDRB     r3,[r3,#2]
000234  e2033008          AND      r3,r3,#8
000238  e3530000          CMP      r3,#0
00023c  0a000009          BEQ      |L1.616|
;;;503            {
;;;504                vSetGPIO_GPIOC_SMT(ePin, eEn);
000240  e1a03082          LSL      r3,r2,#1
000244  e24335ff          SUB      r3,r3,#0x3fc00000
000248  e2433afe          SUB      r3,r3,#0xfe000
00024c  e1d330b0          LDRH     r3,[r3,#0]
000250  e7ca3511          BFI      r3,r1,#10,#1
000254  e1a04082          LSL      r4,r2,#1
000258  e24445ff          SUB      r4,r4,#0x3fc00000
00025c  e2444afe          SUB      r4,r4,#0xfe000
000260  e1c430b0          STRH     r3,[r4,#0]
000264  ea000002          B        |L1.628|
                  |L1.616|
;;;505            }
;;;506            else
;;;507            {
;;;508                i32Res = C_FAILED;
000268  e3e00000          MVN      r0,#0
00026c  ea000000          B        |L1.628|
                  |L1.624|
;;;509            }
;;;510        }
;;;511        else
;;;512        {
;;;513            i32Res = C_FAILED;
000270  e3e00000          MVN      r0,#0
                  |L1.628|
;;;514        }
;;;515    
;;;516        return i32Res;
;;;517    }
000274  e8bd8010          POP      {r4,pc}
;;;518    
                          ENDP

                  i32GPIO_SetOutputResistance PROC
;;;520    /****************************************************************************/
;;;521    int32_t i32GPIO_SetOutputResistance(gpio_portpin_e ePin, gpio_output_resistance_e eOutputResistance)
000278  e92d4010          PUSH     {r4,lr}
;;;522    {
00027c  e1a02000          MOV      r2,r0
;;;523        int32_t i32Res = C_SUCCESS;
000280  e3a00000          MOV      r0,#0
;;;524    
;;;525        if(ePin < PORT_ADC_IN13) 
000284  e3520f4d          CMP      r2,#0x134
000288  ca000012          BGT      |L1.728|
;;;526        {
;;;527            /* check if feature available */
;;;528            if ((au8PORTRegisterValue[ePin][2] & 0x10U) > 0)
00028c  e0823082          ADD      r3,r2,r2,LSL #1
000290  e59f463c          LDR      r4,|L1.2260|
000294  e0833004          ADD      r3,r3,r4
000298  e5d33002          LDRB     r3,[r3,#2]
00029c  e2033010          AND      r3,r3,#0x10
0002a0  e3530000          CMP      r3,#0
0002a4  0a000009          BEQ      |L1.720|
;;;529            {
;;;530                vSetGPIO_GPIOC_IMP(ePin, eOutputResistance);
0002a8  e1a03082          LSL      r3,r2,#1
0002ac  e24335ff          SUB      r3,r3,#0x3fc00000
0002b0  e2433afe          SUB      r3,r3,#0xfe000
0002b4  e1d330b0          LDRH     r3,[r3,#0]
0002b8  e7cc3591          BFI      r3,r1,#11,#2
0002bc  e1a04082          LSL      r4,r2,#1
0002c0  e24445ff          SUB      r4,r4,#0x3fc00000
0002c4  e2444afe          SUB      r4,r4,#0xfe000
0002c8  e1c430b0          STRH     r3,[r4,#0]
0002cc  ea000002          B        |L1.732|
                  |L1.720|
;;;531            }
;;;532            else
;;;533            {
;;;534                i32Res = C_FAILED;
0002d0  e3e00000          MVN      r0,#0
0002d4  ea000000          B        |L1.732|
                  |L1.728|
;;;535            }
;;;536        }
;;;537        else
;;;538        {
;;;539            i32Res = C_FAILED;
0002d8  e3e00000          MVN      r0,#0
                  |L1.732|
;;;540        }
;;;541    
;;;542        return i32Res;
;;;543    }
0002dc  e8bd8010          POP      {r4,pc}
;;;544    
                          ENDP

                  i32GPIO_EnableLatchFunction PROC
;;;546    /****************************************************************************/
;;;547    int32_t i32GPIO_EnableLatchFunction(gpio_portpin_e ePin, gpio_en_e eEn)
0002e0  e92d4030          PUSH     {r4,r5,lr}
;;;548    {
0002e4  e1a02000          MOV      r2,r0
0002e8  e1a03001          MOV      r3,r1
;;;549        int32_t  i32Res = C_SUCCESS;
0002ec  e3a00000          MOV      r0,#0
;;;550        uint32_t u32Channel;
;;;551    
;;;552        if(ePin <= PORT_ADC_IN13) 
0002f0  e3004135          MOV      r4,#0x135
0002f4  e1520004          CMP      r2,r4
0002f8  ca00001f          BGT      |L1.892|
;;;553        {
;;;554            /* check if feature available */
;;;555            if ((au8PORTRegisterValue[ePin][2] & 0x20U) > 0)
0002fc  e0824082          ADD      r4,r2,r2,LSL #1
000300  e59f55cc          LDR      r5,|L1.2260|
000304  e0844005          ADD      r4,r4,r5
000308  e5d44002          LDRB     r4,[r4,#2]
00030c  e2044020          AND      r4,r4,#0x20
000310  e3540000          CMP      r4,#0
000314  0a000016          BEQ      |L1.884|
;;;556            {
;;;557                if (eEn == GPIO_ENABLE)
000318  e3530001          CMP      r3,#1
00031c  1a000009          BNE      |L1.840|
;;;558                {
;;;559                    vSetGPIO_GPIOC_LATCH(ePin, GPIO_DISABLE);
000320  e1a04082          LSL      r4,r2,#1
000324  e24445ff          SUB      r4,r4,#0x3fc00000
000328  e2444afe          SUB      r4,r4,#0xfe000
00032c  e1d440b0          LDRH     r4,[r4,#0]
000330  e3c44a02          BIC      r4,r4,#0x2000
000334  e1a05082          LSL      r5,r2,#1
000338  e24555ff          SUB      r5,r5,#0x3fc00000
00033c  e2455afe          SUB      r5,r5,#0xfe000
000340  e1c540b0          STRH     r4,[r5,#0]
000344  ea000028          B        |L1.1004|
                  |L1.840|
;;;560                }
;;;561                else
;;;562                {
;;;563                    vSetGPIO_GPIOC_LATCH(ePin, GPIO_ENABLE);
000348  e1a04082          LSL      r4,r2,#1
00034c  e24445ff          SUB      r4,r4,#0x3fc00000
000350  e2444afe          SUB      r4,r4,#0xfe000
000354  e1d440b0          LDRH     r4,[r4,#0]
000358  e3c44a02          BIC      r4,r4,#0x2000
00035c  e2844a02          ADD      r4,r4,#0x2000
000360  e1a05082          LSL      r5,r2,#1
000364  e24555ff          SUB      r5,r5,#0x3fc00000
000368  e2455afe          SUB      r5,r5,#0xfe000
00036c  e1c540b0          STRH     r4,[r5,#0]
000370  ea00001d          B        |L1.1004|
                  |L1.884|
;;;564                }
;;;565            }
;;;566            else
;;;567            {
;;;568                i32Res = C_FAILED;
000374  e3e00000          MVN      r0,#0
000378  ea00001b          B        |L1.1004|
                  |L1.892|
;;;569            }
;;;570        }
;;;571        else
;;;572        {
;;;573            if (ePin <= PORT_SC4_C1_RIGHT)
00037c  e3520f55          CMP      r2,#0x154
000380  aa000018          BGE      |L1.1000|
;;;574            {
;;;575                /* calculate SMC channel */
;;;576                u32Channel = ((uint32_t)ePin - (uint32_t)PORT_SC0_C0_LEFT) / 4;
000384  e2424d05          SUB      r4,r2,#0x140
000388  e1a01124          LSR      r1,r4,#2
;;;577    
;;;578                if (eEn == GPIO_ENABLE)
00038c  e3530001          CMP      r3,#1
000390  1a000009          BNE      |L1.956|
;;;579                {
;;;580                    vSetSC_LATCHN(u32Channel, GPIO_DISABLE);
000394  e1a04101          LSL      r4,r1,#2
000398  e24445ff          SUB      r4,r4,#0x3fc00000
00039c  e2444afe          SUB      r4,r4,#0xfe000
0003a0  e5944280          LDR      r4,[r4,#0x280]
0003a4  e3c44040          BIC      r4,r4,#0x40
0003a8  e1a05101          LSL      r5,r1,#2
0003ac  e24555ff          SUB      r5,r5,#0x3fc00000
0003b0  e2455afe          SUB      r5,r5,#0xfe000
0003b4  e5854280          STR      r4,[r5,#0x280]
0003b8  ea00000b          B        |L1.1004|
                  |L1.956|
;;;581                }
;;;582                else
;;;583                {
;;;584                    vSetSC_LATCHN(u32Channel, GPIO_ENABLE);
0003bc  e1a04101          LSL      r4,r1,#2
0003c0  e24445ff          SUB      r4,r4,#0x3fc00000
0003c4  e2444afe          SUB      r4,r4,#0xfe000
0003c8  e5944280          LDR      r4,[r4,#0x280]
0003cc  e3c44040          BIC      r4,r4,#0x40
0003d0  e2844040          ADD      r4,r4,#0x40
0003d4  e1a05101          LSL      r5,r1,#2
0003d8  e24555ff          SUB      r5,r5,#0x3fc00000
0003dc  e2455afe          SUB      r5,r5,#0xfe000
0003e0  e5854280          STR      r4,[r5,#0x280]
0003e4  ea000000          B        |L1.1004|
                  |L1.1000|
;;;585                }
;;;586            }
;;;587            else
;;;588            {
;;;589                i32Res = C_FAILED;
0003e8  e3e00000          MVN      r0,#0
                  |L1.1004|
;;;590            }
;;;591        }
;;;592    
;;;593        return i32Res;
;;;594    }
0003ec  e8bd8030          POP      {r4,r5,pc}
;;;595    
                          ENDP

                  i32GPIO_EnableSMCMacro PROC
;;;597    /****************************************************************************/
;;;598    int32_t i32GPIO_EnableSMCMacro(gpio_smcmacro_e eSMCMacro, gpio_en_e eEn)
0003f0  e92d4010          PUSH     {r4,lr}
;;;599    {
0003f4  e1a02000          MOV      r2,r0
;;;600        int32_t i32Res = C_SUCCESS;
0003f8  e3a00000          MOV      r0,#0
;;;601    
;;;602        if (eSMCMacro <= GPIO_SMC_MACRO_4) 
0003fc  e3520004          CMP      r2,#4
000400  ca000009          BGT      |L1.1068|
;;;603        {
;;;604            vSetSC_PWDN(eSMCMacro, eEn);
000404  e1a03102          LSL      r3,r2,#2
000408  e24335ff          SUB      r3,r3,#0x3fc00000
00040c  e2433afe          SUB      r3,r3,#0xfe000
000410  e5933280          LDR      r3,[r3,#0x280]
000414  e7c73391          BFI      r3,r1,#7,#1
000418  e1a04102          LSL      r4,r2,#2
00041c  e24445ff          SUB      r4,r4,#0x3fc00000
000420  e2444afe          SUB      r4,r4,#0xfe000
000424  e5843280          STR      r3,[r4,#0x280]
000428  ea000000          B        |L1.1072|
                  |L1.1068|
;;;605        }
;;;606        else
;;;607        {
;;;608            i32Res = C_FAILED;
00042c  e3e00000          MVN      r0,#0
                  |L1.1072|
;;;609        }
;;;610    
;;;611        return i32Res;
;;;612    }
000430  e8bd8010          POP      {r4,pc}
;;;613    
                          ENDP

                  i32GPIO_SetPinFunction PROC
;;;615    /****************************************************************************/
;;;616    int32_t i32GPIO_SetPinFunction(gpio_portpin_e ePin, uint8_t u8PinFunction)
000434  e92d4070          PUSH     {r4-r6,lr}
;;;617    {
000438  e1a02000          MOV      r2,r0
00043c  e1a03001          MOV      r3,r1
;;;618        int32_t i32Res = C_SUCCESS;
000440  e3a00000          MOV      r0,#0
;;;619        uint32_t u32Pin;
;;;620        uint32_t u32Channel;
;;;621    
;;;622        if (ePin <= PORT_ADC_IN13) 
000444  e3005135          MOV      r5,#0x135
000448  e1520005          CMP      r2,r5
00044c  ca000012          BGT      |L1.1180|
;;;623        {
;;;624            /* check if function available */
;;;625            if ((au8PORTRegisterValue[ePin][2] & 0x01U) > 0)
000450  e0825082          ADD      r5,r2,r2,LSL #1
000454  e59f6478          LDR      r6,|L1.2260|
000458  e0855006          ADD      r5,r5,r6
00045c  e5d55002          LDRB     r5,[r5,#2]
000460  e2055001          AND      r5,r5,#1
000464  e3550000          CMP      r5,#0
000468  0a000009          BEQ      |L1.1172|
;;;626            {
;;;627                /* set pin function */
;;;628                vSetGPIO_GPIOC_SEL(ePin, u8PinFunction);
00046c  e1a05082          LSL      r5,r2,#1
000470  e24555ff          SUB      r5,r5,#0x3fc00000
000474  e2455afe          SUB      r5,r5,#0xfe000
000478  e1d550b0          LDRH     r5,[r5,#0]
00047c  e7c25013          BFI      r5,r3,#0,#3
000480  e1a06082          LSL      r6,r2,#1
000484  e24665ff          SUB      r6,r6,#0x3fc00000
000488  e2466afe          SUB      r6,r6,#0xfe000
00048c  e1c650b0          STRH     r5,[r6,#0]
000490  ea00003c          B        |L1.1416|
                  |L1.1172|
;;;629            }
;;;630            else
;;;631            {
;;;632                i32Res = C_FAILED;
000494  e3e00000          MVN      r0,#0
000498  ea00003a          B        |L1.1416|
                  |L1.1180|
;;;633            }
;;;634        }
;;;635        else
;;;636        {
;;;637            if (ePin <= PORT_SC4_C1_RIGHT)
00049c  e3520f55          CMP      r2,#0x154
0004a0  aa000037          BGE      |L1.1412|
;;;638            {
;;;639                u32Channel = ((uint32_t)ePin - (uint32_t)PORT_SC0_C0_LEFT) / 4;
0004a4  e2425d05          SUB      r5,r2,#0x140
0004a8  e1a01125          LSR      r1,r5,#2
;;;640                u32Pin = ((uint32_t)ePin - (uint32_t)PORT_SC0_C0_LEFT) % 0x4;
0004ac  e2425d05          SUB      r5,r2,#0x140
0004b0  e2054003          AND      r4,r5,#3
;;;641    
;;;642                switch (u32Pin)
0004b4  e3540000          CMP      r4,#0
0004b8  0a000004          BEQ      |L1.1232|
0004bc  e3540001          CMP      r4,#1
0004c0  0a00000d          BEQ      |L1.1276|
0004c4  e3540002          CMP      r4,#2
0004c8  1a000021          BNE      |L1.1364|
0004cc  ea000015          B        |L1.1320|
                  |L1.1232|
;;;643                {
;;;644                    case 0:
0004d0  e320f000          NOP      
;;;645                        vSetSC_C0_LEFT_SEL(u32Channel, u8PinFunction);
0004d4  e1a05101          LSL      r5,r1,#2
0004d8  e24555ff          SUB      r5,r5,#0x3fc00000
0004dc  e2455afe          SUB      r5,r5,#0xfe000
0004e0  e5955280          LDR      r5,[r5,#0x280]
0004e4  e7c25013          BFI      r5,r3,#0,#3
0004e8  e1a06101          LSL      r6,r1,#2
0004ec  e24665ff          SUB      r6,r6,#0x3fc00000
0004f0  e2466afe          SUB      r6,r6,#0xfe000
0004f4  e5865280          STR      r5,[r6,#0x280]
;;;646                        break;
0004f8  ea000020          B        |L1.1408|
                  |L1.1276|
;;;647                    case 1:
0004fc  e320f000          NOP      
;;;648                        vSetSC_C0_RIGHT_SEL(u32Channel, u8PinFunction);
000500  e1a05101          LSL      r5,r1,#2
000504  e24555ff          SUB      r5,r5,#0x3fc00000
000508  e2455afe          SUB      r5,r5,#0xfe000
00050c  e5955280          LDR      r5,[r5,#0x280]
000510  e7ca5413          BFI      r5,r3,#8,#3
000514  e1a06101          LSL      r6,r1,#2
000518  e24665ff          SUB      r6,r6,#0x3fc00000
00051c  e2466afe          SUB      r6,r6,#0xfe000
000520  e5865280          STR      r5,[r6,#0x280]
;;;649                        break;
000524  ea000015          B        |L1.1408|
                  |L1.1320|
;;;650                    case 2:
000528  e320f000          NOP      
;;;651                        vSetSC_C1_LEFT_SEL(u32Channel, u8PinFunction);
00052c  e1a05101          LSL      r5,r1,#2
000530  e24555ff          SUB      r5,r5,#0x3fc00000
000534  e2455afe          SUB      r5,r5,#0xfe000
000538  e5955280          LDR      r5,[r5,#0x280]
00053c  e7d25813          BFI      r5,r3,#16,#3
000540  e1a06101          LSL      r6,r1,#2
000544  e24665ff          SUB      r6,r6,#0x3fc00000
000548  e2466afe          SUB      r6,r6,#0xfe000
00054c  e5865280          STR      r5,[r6,#0x280]
;;;652                        break;
000550  ea00000a          B        |L1.1408|
                  |L1.1364|
;;;653                    default:
000554  e320f000          NOP      
;;;654                        vSetSC_C1_RIGHT_SEL(u32Channel, u8PinFunction);
000558  e1a05101          LSL      r5,r1,#2
00055c  e24555ff          SUB      r5,r5,#0x3fc00000
000560  e2455afe          SUB      r5,r5,#0xfe000
000564  e5955280          LDR      r5,[r5,#0x280]
000568  e7da5c13          BFI      r5,r3,#24,#3
00056c  e1a06101          LSL      r6,r1,#2
000570  e24665ff          SUB      r6,r6,#0x3fc00000
000574  e2466afe          SUB      r6,r6,#0xfe000
000578  e5865280          STR      r5,[r6,#0x280]
;;;655                        break;
00057c  e320f000          NOP      
                  |L1.1408|
000580  ea000000          B        |L1.1416|
                  |L1.1412|
;;;656                }
;;;657            }
;;;658            else
;;;659            {
;;;660                i32Res = C_FAILED;
000584  e3e00000          MVN      r0,#0
                  |L1.1416|
;;;661            }
;;;662        }
;;;663    
;;;664        return i32Res;
;;;665    }
000588  e8bd8070          POP      {r4-r6,pc}
;;;666    
                          ENDP

                  i32GPIO_SetPinDirection PROC
;;;668    /****************************************************************************/
;;;669    int32_t i32GPIO_SetPinDirection(gpio_portpin_e ePin, gpio_direction_e ePinDirection)
00058c  e92d40f0          PUSH     {r4-r7,lr}
;;;670    {
000590  e1a02000          MOV      r2,r0
000594  e1a03001          MOV      r3,r1
;;;671        int32_t i32Res = C_SUCCESS;
000598  e3a00000          MOV      r0,#0
;;;672        uint8_t u8Value;
;;;673        uint32_t u32PinLocal;
;;;674    
;;;675        if (au8PORTRegisterValue[ePin][0] < 30U) 
00059c  e0825082          ADD      r5,r2,r2,LSL #1
0005a0  e59f632c          LDR      r6,|L1.2260|
0005a4  e7d65005          LDRB     r5,[r6,r5]
0005a8  e355001e          CMP      r5,#0x1e
0005ac  2a000065          BCS      |L1.1864|
;;;676        {
;;;677            u8Value = biGetGPIO_GPIO_DIR(au8PORTRegisterValue[ePin][0]);
0005b0  e0825082          ADD      r5,r2,r2,LSL #1
0005b4  e7d65005          LDRB     r5,[r6,r5]
0005b8  e1a05105          LSL      r5,r5,#2
0005bc  e24555ff          SUB      r5,r5,#0x3fc00000
0005c0  e2455afe          SUB      r5,r5,#0xfe000
0005c4  e5955800          LDR      r5,[r5,#0x800]
0005c8  e7e71855          UBFX     r1,r5,#16,#8
;;;678            if (ePinDirection == GPIO_INPUT)
0005cc  e3530001          CMP      r3,#1
0005d0  1a000015          BNE      |L1.1580|
;;;679            {
;;;680                u8Value = u8Value | (1U << au8PORTRegisterValue[ePin][1]);
0005d4  e0825082          ADD      r5,r2,r2,LSL #1
0005d8  e0855006          ADD      r5,r5,r6
0005dc  e5d55001          LDRB     r5,[r5,#1]
0005e0  e3a06001          MOV      r6,#1
0005e4  e1815516          ORR      r5,r1,r6,LSL r5
0005e8  e20510ff          AND      r1,r5,#0xff
;;;681                vSetGPIO_GPIO_DIR(au8PORTRegisterValue[ePin][0], u8Value);
0005ec  e0825082          ADD      r5,r2,r2,LSL #1
0005f0  e59f62dc          LDR      r6,|L1.2260|
0005f4  e7d65005          LDRB     r5,[r6,r5]
0005f8  e1a05105          LSL      r5,r5,#2
0005fc  e24555ff          SUB      r5,r5,#0x3fc00000
000600  e2455afe          SUB      r5,r5,#0xfe000
000604  e5955800          LDR      r5,[r5,#0x800]
000608  e7d75811          BFI      r5,r1,#16,#8
00060c  e0826082          ADD      r6,r2,r2,LSL #1
000610  e59f72bc          LDR      r7,|L1.2260|
000614  e7d76006          LDRB     r6,[r7,r6]
000618  e1a06106          LSL      r6,r6,#2
00061c  e24665ff          SUB      r6,r6,#0x3fc00000
000620  e2466afe          SUB      r6,r6,#0xfe000
000624  e5865800          STR      r5,[r6,#0x800]
000628  ea000047          B        |L1.1868|
                  |L1.1580|
;;;682            }
;;;683            else
;;;684            {
;;;685                /* port can only be changed to output if latchfunction is disabled */
;;;686                if (ePin <= PORT_ADC_IN13) 
00062c  e3005135          MOV      r5,#0x135
000630  e1520005          CMP      r2,r5
000634  ca00001e          BGT      |L1.1716|
;;;687                {
;;;688                    if (biGetGPIO_GPIOC_LATCH(ePin) == GPIO_ENABLE)
000638  e1a05082          LSL      r5,r2,#1
00063c  e24555ff          SUB      r5,r5,#0x3fc00000
000640  e2455afe          SUB      r5,r5,#0xfe000
000644  e1d550b0          LDRH     r5,[r5,#0]
000648  e7e056d5          UBFX     r5,r5,#13,#1
00064c  e3550000          CMP      r5,#0
000650  0a000015          BEQ      |L1.1708|
;;;689                    {
;;;690                        u8Value = u8Value & ~(1U << au8PORTRegisterValue[ePin][1]);
000654  e0825082          ADD      r5,r2,r2,LSL #1
000658  e59f6274          LDR      r6,|L1.2260|
00065c  e0855006          ADD      r5,r5,r6
000660  e5d55001          LDRB     r5,[r5,#1]
000664  e3a06001          MOV      r6,#1
000668  e1c11516          BIC      r1,r1,r6,LSL r5
;;;691                        vSetGPIO_GPIO_DIR(au8PORTRegisterValue[ePin][0], u8Value);
00066c  e0825082          ADD      r5,r2,r2,LSL #1
000670  e59f625c          LDR      r6,|L1.2260|
000674  e7d65005          LDRB     r5,[r6,r5]
000678  e1a05105          LSL      r5,r5,#2
00067c  e24555ff          SUB      r5,r5,#0x3fc00000
000680  e2455afe          SUB      r5,r5,#0xfe000
000684  e5955800          LDR      r5,[r5,#0x800]
000688  e7d75811          BFI      r5,r1,#16,#8
00068c  e0826082          ADD      r6,r2,r2,LSL #1
000690  e59f723c          LDR      r7,|L1.2260|
000694  e7d76006          LDRB     r6,[r7,r6]
000698  e1a06106          LSL      r6,r6,#2
00069c  e24665ff          SUB      r6,r6,#0x3fc00000
0006a0  e2466afe          SUB      r6,r6,#0xfe000
0006a4  e5865800          STR      r5,[r6,#0x800]
0006a8  ea000027          B        |L1.1868|
                  |L1.1708|
;;;692                    }
;;;693                    else
;;;694                    {
;;;695                        i32Res = C_FAILED;
0006ac  e3e00000          MVN      r0,#0
0006b0  ea000025          B        |L1.1868|
                  |L1.1716|
;;;696                    }
;;;697                }
;;;698                else
;;;699                {
;;;700                    if (ePin <= PORT_SC4_C1_RIGHT)
0006b4  e3520f55          CMP      r2,#0x154
0006b8  aa000020          BGE      |L1.1856|
;;;701                    {
;;;702                        u32PinLocal = ((uint32_t)ePin - (uint32_t)PORT_SC0_C0_LEFT) / 0x4;
0006bc  e2425d05          SUB      r5,r2,#0x140
0006c0  e1a04125          LSR      r4,r5,#2
;;;703                        if (biGetSC_LATCHN(u32PinLocal) == GPIO_ENABLE)
0006c4  e1a05104          LSL      r5,r4,#2
0006c8  e24555ff          SUB      r5,r5,#0x3fc00000
0006cc  e2455afe          SUB      r5,r5,#0xfe000
0006d0  e5955280          LDR      r5,[r5,#0x280]
0006d4  e7e05355          UBFX     r5,r5,#6,#1
0006d8  e3550000          CMP      r5,#0
0006dc  0a000015          BEQ      |L1.1848|
;;;704                        {
;;;705                            u8Value = u8Value & ~(1U << au8PORTRegisterValue[ePin][1]);
0006e0  e0825082          ADD      r5,r2,r2,LSL #1
0006e4  e59f61e8          LDR      r6,|L1.2260|
0006e8  e0855006          ADD      r5,r5,r6
0006ec  e5d55001          LDRB     r5,[r5,#1]
0006f0  e3a06001          MOV      r6,#1
0006f4  e1c11516          BIC      r1,r1,r6,LSL r5
;;;706                            vSetGPIO_GPIO_DIR(au8PORTRegisterValue[ePin][0], u8Value);
0006f8  e0825082          ADD      r5,r2,r2,LSL #1
0006fc  e59f61d0          LDR      r6,|L1.2260|
000700  e7d65005          LDRB     r5,[r6,r5]
000704  e1a05105          LSL      r5,r5,#2
000708  e24555ff          SUB      r5,r5,#0x3fc00000
00070c  e2455afe          SUB      r5,r5,#0xfe000
000710  e5955800          LDR      r5,[r5,#0x800]
000714  e7d75811          BFI      r5,r1,#16,#8
000718  e0826082          ADD      r6,r2,r2,LSL #1
00071c  e59f71b0          LDR      r7,|L1.2260|
000720  e7d76006          LDRB     r6,[r7,r6]
000724  e1a06106          LSL      r6,r6,#2
000728  e24665ff          SUB      r6,r6,#0x3fc00000
00072c  e2466afe          SUB      r6,r6,#0xfe000
000730  e5865800          STR      r5,[r6,#0x800]
000734  ea000004          B        |L1.1868|
                  |L1.1848|
;;;707                        }
;;;708                        else
;;;709                        {
;;;710                            i32Res = C_FAILED;
000738  e3e00000          MVN      r0,#0
00073c  ea000002          B        |L1.1868|
                  |L1.1856|
;;;711                        }
;;;712                    }
;;;713                    else
;;;714                    {
;;;715                        i32Res = C_FAILED;
000740  e3e00000          MVN      r0,#0
000744  ea000000          B        |L1.1868|
                  |L1.1864|
;;;716                    }
;;;717                }
;;;718            }
;;;719        }
;;;720        else
;;;721        {
;;;722            i32Res = C_FAILED;
000748  e3e00000          MVN      r0,#0
                  |L1.1868|
;;;723        }
;;;724    
;;;725        return i32Res;
;;;726    }
00074c  e8bd80f0          POP      {r4-r7,pc}
;;;727    
                          ENDP

                  i32GPIO_SetPinState PROC
;;;729    /****************************************************************************/
;;;730    int32_t i32GPIO_SetPinState(gpio_portpin_e ePin, gpio_state_e ePinState)
000750  e92d4070          PUSH     {r4-r6,lr}
;;;731    {
000754  e1a02000          MOV      r2,r0
000758  e1a03001          MOV      r3,r1
;;;732        int32_t i32Res = C_SUCCESS;
00075c  e3a00000          MOV      r0,#0
;;;733        uint8_t u8Value;
;;;734    
;;;735        if (au8PORTRegisterValue[ePin][0] < 30U) 
000760  e0824082          ADD      r4,r2,r2,LSL #1
000764  e59f5168          LDR      r5,|L1.2260|
000768  e7d54004          LDRB     r4,[r5,r4]
00076c  e354001e          CMP      r4,#0x1e
000770  2a000025          BCS      |L1.2060|
;;;736        {
;;;737            u8Value = biGetGPIO_GPIO_WDATA(au8PORTRegisterValue[ePin][0]);
000774  e0824082          ADD      r4,r2,r2,LSL #1
000778  e7d54004          LDRB     r4,[r5,r4]
00077c  e1a04104          LSL      r4,r4,#2
000780  e24445ff          SUB      r4,r4,#0x3fc00000
000784  e2444afe          SUB      r4,r4,#0xfe000
000788  e5944800          LDR      r4,[r4,#0x800]
00078c  e20410ff          AND      r1,r4,#0xff
;;;738            if (ePinState == GPIO_HIGH)
000790  e3530001          CMP      r3,#1
000794  1a000006          BNE      |L1.1972|
;;;739            {
;;;740                u8Value = u8Value | (1U << au8PORTRegisterValue[ePin][1]);
000798  e0824082          ADD      r4,r2,r2,LSL #1
00079c  e0844005          ADD      r4,r4,r5
0007a0  e5d44001          LDRB     r4,[r4,#1]
0007a4  e3a05001          MOV      r5,#1
0007a8  e1814415          ORR      r4,r1,r5,LSL r4
0007ac  e20410ff          AND      r1,r4,#0xff
0007b0  ea000005          B        |L1.1996|
                  |L1.1972|
;;;741            }
;;;742            else
;;;743            {
;;;744                u8Value = u8Value & ~(1U << au8PORTRegisterValue[ePin][1]);
0007b4  e0824082          ADD      r4,r2,r2,LSL #1
0007b8  e59f5114          LDR      r5,|L1.2260|
0007bc  e0844005          ADD      r4,r4,r5
0007c0  e5d44001          LDRB     r4,[r4,#1]
0007c4  e3a05001          MOV      r5,#1
0007c8  e1c11415          BIC      r1,r1,r5,LSL r4
                  |L1.1996|
;;;745            }
;;;746            vSetGPIO_GPIO_WDATA(au8PORTRegisterValue[ePin][0], u8Value);
0007cc  e0824082          ADD      r4,r2,r2,LSL #1
0007d0  e59f50fc          LDR      r5,|L1.2260|
0007d4  e7d54004          LDRB     r4,[r5,r4]
0007d8  e1a04104          LSL      r4,r4,#2
0007dc  e24445ff          SUB      r4,r4,#0x3fc00000
0007e0  e2444afe          SUB      r4,r4,#0xfe000
0007e4  e5944800          LDR      r4,[r4,#0x800]
0007e8  e7c74011          BFI      r4,r1,#0,#8
0007ec  e0825082          ADD      r5,r2,r2,LSL #1
0007f0  e59f60dc          LDR      r6,|L1.2260|
0007f4  e7d65005          LDRB     r5,[r6,r5]
0007f8  e1a05105          LSL      r5,r5,#2
0007fc  e24555ff          SUB      r5,r5,#0x3fc00000
000800  e2455afe          SUB      r5,r5,#0xfe000
000804  e5854800          STR      r4,[r5,#0x800]
000808  ea000000          B        |L1.2064|
                  |L1.2060|
;;;747        }
;;;748        else
;;;749        {
;;;750            i32Res = C_FAILED;
00080c  e3e00000          MVN      r0,#0
                  |L1.2064|
;;;751        }
;;;752    
;;;753        return i32Res;
;;;754    }
000810  e8bd8070          POP      {r4-r6,pc}
;;;755    
                          ENDP

                  i32GPIO_GetPinState PROC
;;;757    /****************************************************************************/
;;;758    int32_t i32GPIO_GetPinState(gpio_portpin_e ePin, gpio_state_e * ePinState)
000814  e92d4030          PUSH     {r4,r5,lr}
;;;759    {
000818  e1a02000          MOV      r2,r0
;;;760        int32_t i32Res = C_SUCCESS;
00081c  e3a00000          MOV      r0,#0
;;;761        uint8_t u8Value;
;;;762    
;;;763        if (au8PORTRegisterValue[ePin][0] < 30) 
000820  e0824082          ADD      r4,r2,r2,LSL #1
000824  e59f50a8          LDR      r5,|L1.2260|
000828  e7d54004          LDRB     r4,[r5,r4]
00082c  e354001e          CMP      r4,#0x1e
000830  aa000013          BGE      |L1.2180|
;;;764        {
;;;765            u8Value = biGetGPIO_GPIO_RDATA(au8PORTRegisterValue[ePin][0]);
000834  e0824082          ADD      r4,r2,r2,LSL #1
000838  e7d54004          LDRB     r4,[r5,r4]
00083c  e1a04104          LSL      r4,r4,#2
000840  e24445ff          SUB      r4,r4,#0x3fc00000
000844  e2444afe          SUB      r4,r4,#0xfe000
000848  e5944800          LDR      r4,[r4,#0x800]
00084c  e7e73454          UBFX     r3,r4,#8,#8
;;;766            u8Value = u8Value & (1U << au8PORTRegisterValue[ePin][1]);
000850  e0824082          ADD      r4,r2,r2,LSL #1
000854  e0844005          ADD      r4,r4,r5
000858  e5d44001          LDRB     r4,[r4,#1]
00085c  e3a05001          MOV      r5,#1
000860  e0033415          AND      r3,r3,r5,LSL r4
;;;767            if (u8Value > 0U)
000864  e3530000          CMP      r3,#0
000868  0a000002          BEQ      |L1.2168|
;;;768            {
;;;769                *ePinState = GPIO_HIGH;
00086c  e3a04001          MOV      r4,#1
000870  e5c14000          STRB     r4,[r1,#0]
000874  ea000003          B        |L1.2184|
                  |L1.2168|
;;;770            }
;;;771            else
;;;772            {
;;;773                *ePinState = GPIO_LOW;
000878  e3a04000          MOV      r4,#0
00087c  e5c14000          STRB     r4,[r1,#0]
000880  ea000000          B        |L1.2184|
                  |L1.2180|
;;;774            }
;;;775        }
;;;776        else
;;;777        {
;;;778            i32Res = C_FAILED;
000884  e3e00000          MVN      r0,#0
                  |L1.2184|
;;;779        }
;;;780    
;;;781        return i32Res;
;;;782    }
000888  e8bd8030          POP      {r4,r5,pc}
;;;783    
                          ENDP

                  i32GPIO_SelectMemoryInterfaceConfiguration PROC
;;;785    /****************************************************************************/
;;;786    int32_t i32GPIO_SelectMemoryInterfaceConfiguration(gpio_mem_config_e eMemConfig)
00088c  e1a01000          MOV      r1,r0
;;;787    {
;;;788        int32_t i32Res = C_SUCCESS;
000890  e3a00000          MOV      r0,#0
;;;789    
;;;790        if (eMemConfig <= GPIO_MEM_CONFIG_LPDDR_16) 
000894  e3510003          CMP      r1,#3
000898  ca000005          BGT      |L1.2228|
;;;791        {
;;;792            vSetSDRAM_CFG_SDRAM_IF_SEL(eMemConfig);
00089c  e59f2034          LDR      r2,|L1.2264|
0008a0  e5d22294          LDRB     r2,[r2,#0x294]
0008a4  e7c12011          BFI      r2,r1,#0,#2
0008a8  e59f3028          LDR      r3,|L1.2264|
0008ac  e5c32294          STRB     r2,[r3,#0x294]
0008b0  ea000000          B        |L1.2232|
                  |L1.2228|
;;;793        }
;;;794        else
;;;795        {
;;;796            i32Res = C_FAILED;
0008b4  e3e00000          MVN      r0,#0
                  |L1.2232|
;;;797        }
;;;798    
;;;799        return i32Res;
;;;800    }
0008b8  e12fff1e          BX       lr
;;;801    
                          ENDP

                  |L1.2236|
                          DCD      au8LLDD_GPIO_C_REVISION
                  |L1.2240|
                          DCD      au8LLDD_GPIO_C_TAG
                  |L1.2244|
                          DCD      au8LLDD_GPIO_H_REVISION
                  |L1.2248|
                          DCD      au8LLDD_GPIO_H_TAG
                  |L1.2252|
                          DCD      au8LLDD_GPIO_IO_H_REVISION
                  |L1.2256|
                          DCD      au8LLDD_GPIO_IO_H_TAG
                  |L1.2260|
                          DCD      au8PORTRegisterValue
                  |L1.2264|
                          DCD      0xc0302000

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  au8PORTRegisterValue
000000  00003f00          DCB      0x00,0x00,0x3f,0x00
000004  013f0002          DCB      0x01,0x3f,0x00,0x02
000008  3f00033f          DCB      0x3f,0x00,0x03,0x3f
00000c  00043f00          DCB      0x00,0x04,0x3f,0x00
000010  053f0006          DCB      0x05,0x3f,0x00,0x06
000014  3f00073f          DCB      0x3f,0x00,0x07,0x3f
000018  01003f01          DCB      0x01,0x00,0x3f,0x01
00001c  013f0102          DCB      0x01,0x3f,0x01,0x02
000020  3f01033f          DCB      0x3f,0x01,0x03,0x3f
000024  01043f01          DCB      0x01,0x04,0x3f,0x01
000028  053f0106          DCB      0x05,0x3f,0x01,0x06
00002c  3f01073f          DCB      0x3f,0x01,0x07,0x3f
000030  02003f02          DCB      0x02,0x00,0x3f,0x02
000034  013f0202          DCB      0x01,0x3f,0x02,0x02
000038  3f02033f          DCB      0x3f,0x02,0x03,0x3f
00003c  02043f02          DCB      0x02,0x04,0x3f,0x02
000040  053f0206          DCB      0x05,0x3f,0x02,0x06
000044  3f1e203e          DCB      0x3f,0x1e,0x20,0x3e
000048  1e203e02          DCB      0x1e,0x20,0x3e,0x02
00004c  073f0300          DCB      0x07,0x3f,0x03,0x00
000050  3f03013f          DCB      0x3f,0x03,0x01,0x3f
000054  03023f03          DCB      0x03,0x02,0x3f,0x03
000058  033f0304          DCB      0x03,0x3f,0x03,0x04
00005c  3f03053f          DCB      0x3f,0x03,0x05,0x3f
000060  03063f03          DCB      0x03,0x06,0x3f,0x03
000064  073f0400          DCB      0x07,0x3f,0x04,0x00
000068  3f04013f          DCB      0x3f,0x04,0x01,0x3f
00006c  04023f04          DCB      0x04,0x02,0x3f,0x04
000070  033f0404          DCB      0x03,0x3f,0x04,0x04
000074  3f04053f          DCB      0x3f,0x04,0x05,0x3f
000078  04063f04          DCB      0x04,0x06,0x3f,0x04
00007c  073f0500          DCB      0x07,0x3f,0x05,0x00
000080  3f1e2000          DCB      0x3f,0x1e,0x20,0x00
000084  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000088  20001e20          DCB      0x20,0x00,0x1e,0x20
00008c  001e2000          DCB      0x00,0x1e,0x20,0x00
000090  05013f05          DCB      0x05,0x01,0x3f,0x05
000094  023f0503          DCB      0x02,0x3f,0x05,0x03
000098  3f05043f          DCB      0x3f,0x05,0x04,0x3f
00009c  05053f05          DCB      0x05,0x05,0x3f,0x05
0000a0  063f0507          DCB      0x06,0x3f,0x05,0x07
0000a4  3f06003f          DCB      0x3f,0x06,0x00,0x3f
0000a8  06013f06          DCB      0x06,0x01,0x3f,0x06
0000ac  023f0603          DCB      0x02,0x3f,0x06,0x03
0000b0  3f06043f          DCB      0x3f,0x06,0x04,0x3f
0000b4  06053f06          DCB      0x06,0x05,0x3f,0x06
0000b8  063f0607          DCB      0x06,0x3f,0x06,0x07
0000bc  3f07003f          DCB      0x3f,0x07,0x00,0x3f
0000c0  07013f07          DCB      0x07,0x01,0x3f,0x07
0000c4  023f0703          DCB      0x02,0x3f,0x07,0x03
0000c8  3f07043f          DCB      0x3f,0x07,0x04,0x3f
0000cc  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0000d0  20001e20          DCB      0x20,0x00,0x1e,0x20
0000d4  001e2000          DCB      0x00,0x1e,0x20,0x00
0000d8  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0000dc  20001e20          DCB      0x20,0x00,0x1e,0x20
0000e0  001e2000          DCB      0x00,0x1e,0x20,0x00
0000e4  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0000e8  20001e20          DCB      0x20,0x00,0x1e,0x20
0000ec  001e2000          DCB      0x00,0x1e,0x20,0x00
0000f0  08003f08          DCB      0x08,0x00,0x3f,0x08
0000f4  013f0802          DCB      0x01,0x3f,0x08,0x02
0000f8  3f08033f          DCB      0x3f,0x08,0x03,0x3f
0000fc  08043f08          DCB      0x08,0x04,0x3f,0x08
000100  053f1e20          DCB      0x05,0x3f,0x1e,0x20
000104  001e2000          DCB      0x00,0x1e,0x20,0x00
000108  1e20001e          DCB      0x1e,0x20,0x00,0x1e
00010c  20001e20          DCB      0x20,0x00,0x1e,0x20
000110  001e2000          DCB      0x00,0x1e,0x20,0x00
000114  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000118  20001e20          DCB      0x20,0x00,0x1e,0x20
00011c  001e2000          DCB      0x00,0x1e,0x20,0x00
000120  09003f09          DCB      0x09,0x00,0x3f,0x09
000124  013f0902          DCB      0x01,0x3f,0x09,0x02
000128  3f09033f          DCB      0x3f,0x09,0x03,0x3f
00012c  09043f09          DCB      0x09,0x04,0x3f,0x09
000130  053f0906          DCB      0x05,0x3f,0x09,0x06
000134  3f09073f          DCB      0x3f,0x09,0x07,0x3f
000138  0a003f0a          DCB      0x0a,0x00,0x3f,0x0a
00013c  013f0a02          DCB      0x01,0x3f,0x0a,0x02
000140  3f0a033f          DCB      0x3f,0x0a,0x03,0x3f
000144  0a043f0a          DCB      0x0a,0x04,0x3f,0x0a
000148  053f0a06          DCB      0x05,0x3f,0x0a,0x06
00014c  3f0a073f          DCB      0x3f,0x0a,0x07,0x3f
000150  0b003f0b          DCB      0x0b,0x00,0x3f,0x0b
000154  013f0b02          DCB      0x01,0x3f,0x0b,0x02
000158  3f0b033f          DCB      0x3f,0x0b,0x03,0x3f
00015c  0b043f0b          DCB      0x0b,0x04,0x3f,0x0b
000160  053f0b06          DCB      0x05,0x3f,0x0b,0x06
000164  3f0b073f          DCB      0x3f,0x0b,0x07,0x3f
000168  0c003f0c          DCB      0x0c,0x00,0x3f,0x0c
00016c  013f0c02          DCB      0x01,0x3f,0x0c,0x02
000170  3f0c033f          DCB      0x3f,0x0c,0x03,0x3f
000174  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000178  20001e20          DCB      0x20,0x00,0x1e,0x20
00017c  001e2000          DCB      0x00,0x1e,0x20,0x00
000180  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000184  20001e20          DCB      0x20,0x00,0x1e,0x20
000188  001e2000          DCB      0x00,0x1e,0x20,0x00
00018c  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000190  20001e20          DCB      0x20,0x00,0x1e,0x20
000194  001e2000          DCB      0x00,0x1e,0x20,0x00
000198  0d003f1e          DCB      0x0d,0x00,0x3f,0x1e
00019c  20001e20          DCB      0x20,0x00,0x1e,0x20
0001a0  3f1e203f          DCB      0x3f,0x1e,0x20,0x3f
0001a4  1e203f1e          DCB      0x1e,0x20,0x3f,0x1e
0001a8  203f0d01          DCB      0x20,0x3f,0x0d,0x01
0001ac  3f0d023f          DCB      0x3f,0x0d,0x02,0x3f
0001b0  0d033f0d          DCB      0x0d,0x03,0x3f,0x0d
0001b4  043f1e20          DCB      0x04,0x3f,0x1e,0x20
0001b8  001e2000          DCB      0x00,0x1e,0x20,0x00
0001bc  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0001c0  20001e20          DCB      0x20,0x00,0x1e,0x20
0001c4  001e2000          DCB      0x00,0x1e,0x20,0x00
0001c8  0e003f0e          DCB      0x0e,0x00,0x3f,0x0e
0001cc  013f0e02          DCB      0x01,0x3f,0x0e,0x02
0001d0  3f0e033f          DCB      0x3f,0x0e,0x03,0x3f
0001d4  0e043f0e          DCB      0x0e,0x04,0x3f,0x0e
0001d8  053f0e06          DCB      0x05,0x3f,0x0e,0x06
0001dc  3f0e073f          DCB      0x3f,0x0e,0x07,0x3f
0001e0  0f003f0f          DCB      0x0f,0x00,0x3f,0x0f
0001e4  013f0f02          DCB      0x01,0x3f,0x0f,0x02
0001e8  3f0f033f          DCB      0x3f,0x0f,0x03,0x3f
0001ec  0f043f0f          DCB      0x0f,0x04,0x3f,0x0f
0001f0  053f0f06          DCB      0x05,0x3f,0x0f,0x06
0001f4  3f0f073f          DCB      0x3f,0x0f,0x07,0x3f
0001f8  10003f10          DCB      0x10,0x00,0x3f,0x10
0001fc  013f1002          DCB      0x01,0x3f,0x10,0x02
000200  3f10033f          DCB      0x3f,0x10,0x03,0x3f
000204  10043f10          DCB      0x10,0x04,0x3f,0x10
000208  053f1006          DCB      0x05,0x3f,0x10,0x06
00020c  3f10073f          DCB      0x3f,0x10,0x07,0x3f
000210  11003f11          DCB      0x11,0x00,0x3f,0x11
000214  013f1102          DCB      0x01,0x3f,0x11,0x02
000218  3f11033f          DCB      0x3f,0x11,0x03,0x3f
00021c  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000220  20001e20          DCB      0x20,0x00,0x1e,0x20
000224  001e2000          DCB      0x00,0x1e,0x20,0x00
000228  1e20001e          DCB      0x1e,0x20,0x00,0x1e
00022c  20001e20          DCB      0x20,0x00,0x1e,0x20
000230  001e2000          DCB      0x00,0x1e,0x20,0x00
000234  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000238  20001e20          DCB      0x20,0x00,0x1e,0x20
00023c  001e2000          DCB      0x00,0x1e,0x20,0x00
000240  12003f12          DCB      0x12,0x00,0x3f,0x12
000244  013f1202          DCB      0x01,0x3f,0x12,0x02
000248  3f12033f          DCB      0x3f,0x12,0x03,0x3f
00024c  12043f12          DCB      0x12,0x04,0x3f,0x12
000250  053f1206          DCB      0x05,0x3f,0x12,0x06
000254  3f12073f          DCB      0x3f,0x12,0x07,0x3f
000258  13003f1e          DCB      0x13,0x00,0x3f,0x1e
00025c  20001301          DCB      0x20,0x00,0x13,0x01
000260  3f13023f          DCB      0x3f,0x13,0x02,0x3f
000264  13033f13          DCB      0x13,0x03,0x3f,0x13
000268  043f1305          DCB      0x04,0x3f,0x13,0x05
00026c  3f13063f          DCB      0x3f,0x13,0x06,0x3f
000270  13073f14          DCB      0x13,0x07,0x3f,0x14
000274  003f1401          DCB      0x00,0x3f,0x14,0x01
000278  3f14023f          DCB      0x3f,0x14,0x02,0x3f
00027c  14033f14          DCB      0x14,0x03,0x3f,0x14
000280  043f1405          DCB      0x04,0x3f,0x14,0x05
000284  3f14063f          DCB      0x3f,0x14,0x06,0x3f
000288  14073f15          DCB      0x14,0x07,0x3f,0x15
00028c  003f1501          DCB      0x00,0x3f,0x15,0x01
000290  3f15023f          DCB      0x3f,0x15,0x02,0x3f
000294  15033f15          DCB      0x15,0x03,0x3f,0x15
000298  043f1e20          DCB      0x04,0x3f,0x1e,0x20
00029c  001e2000          DCB      0x00,0x1e,0x20,0x00
0002a0  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0002a4  20001e20          DCB      0x20,0x00,0x1e,0x20
0002a8  001e2000          DCB      0x00,0x1e,0x20,0x00
0002ac  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0002b0  20001e20          DCB      0x20,0x00,0x1e,0x20
0002b4  001e2000          DCB      0x00,0x1e,0x20,0x00
0002b8  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0002bc  20001e20          DCB      0x20,0x00,0x1e,0x20
0002c0  001e2000          DCB      0x00,0x1e,0x20,0x00
0002c4  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0002c8  20001e20          DCB      0x20,0x00,0x1e,0x20
0002cc  001e2000          DCB      0x00,0x1e,0x20,0x00
0002d0  16003f16          DCB      0x16,0x00,0x3f,0x16
0002d4  013f1602          DCB      0x01,0x3f,0x16,0x02
0002d8  2716033f          DCB      0x27,0x16,0x03,0x3f
0002dc  16042716          DCB      0x16,0x04,0x27,0x16
0002e0  053f1e20          DCB      0x05,0x3f,0x1e,0x20
0002e4  3e1e203e          DCB      0x3e,0x1e,0x20,0x3e
0002e8  1e202e1e          DCB      0x1e,0x20,0x2e,0x1e
0002ec  20001700          DCB      0x20,0x00,0x17,0x00
0002f0  27170127          DCB      0x27,0x17,0x01,0x27
0002f4  17022717          DCB      0x17,0x02,0x27,0x17
0002f8  03271704          DCB      0x03,0x27,0x17,0x04
0002fc  3f17053f          DCB      0x3f,0x17,0x05,0x3f
000300  17063f17          DCB      0x17,0x06,0x3f,0x17
000304  073f1800          DCB      0x07,0x3f,0x18,0x00
000308  3f1e2000          DCB      0x3f,0x1e,0x20,0x00
00030c  18013f18          DCB      0x18,0x01,0x3f,0x18
000310  023f1803          DCB      0x02,0x3f,0x18,0x03
000314  3f18043f          DCB      0x3f,0x18,0x04,0x3f
000318  18053f18          DCB      0x18,0x05,0x3f,0x18
00031c  063f1e20          DCB      0x06,0x3f,0x1e,0x20
000320  001e2000          DCB      0x00,0x1e,0x20,0x00
000324  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000328  20001e20          DCB      0x20,0x00,0x1e,0x20
00032c  001e2000          DCB      0x00,0x1e,0x20,0x00
000330  1e203e1e          DCB      0x1e,0x20,0x3e,0x1e
000334  203e1e20          DCB      0x20,0x3e,0x1e,0x20
000338  3e1e203e          DCB      0x3e,0x1e,0x20,0x3e
00033c  1e203e1e          DCB      0x1e,0x20,0x3e,0x1e
000340  203e1e20          DCB      0x20,0x3e,0x1e,0x20
000344  001e2000          DCB      0x00,0x1e,0x20,0x00
000348  1e202e1e          DCB      0x1e,0x20,0x2e,0x1e
00034c  202e1e20          DCB      0x20,0x2e,0x1e,0x20
000350  2e1e202e          DCB      0x2e,0x1e,0x20,0x2e
000354  1e202e1e          DCB      0x1e,0x20,0x2e,0x1e
000358  201e1e20          DCB      0x20,0x1e,0x1e,0x20
00035c  2e1e201e          DCB      0x2e,0x1e,0x20,0x1e
000360  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000364  20001e20          DCB      0x20,0x00,0x1e,0x20
000368  001e2000          DCB      0x00,0x1e,0x20,0x00
00036c  1e20001e          DCB      0x1e,0x20,0x00,0x1e
000370  20001e20          DCB      0x20,0x00,0x1e,0x20
000374  001e2000          DCB      0x00,0x1e,0x20,0x00
000378  19002f19          DCB      0x19,0x00,0x2f,0x19
00037c  012f1902          DCB      0x01,0x2f,0x19,0x02
000380  2f19032f          DCB      0x2f,0x19,0x03,0x2f
000384  19042f19          DCB      0x19,0x04,0x2f,0x19
000388  052f1906          DCB      0x05,0x2f,0x19,0x06
00038c  2f19072f          DCB      0x2f,0x19,0x07,0x2f
000390  1a002e1a          DCB      0x1a,0x00,0x2e,0x1a
000394  012e1a02          DCB      0x01,0x2e,0x1a,0x02
000398  2e1a032e          DCB      0x2e,0x1a,0x03,0x2e
00039c  1a042e1a          DCB      0x1a,0x04,0x2e,0x1a
0003a0  052e1e20          DCB      0x05,0x2e,0x1e,0x20
0003a4  001e2000          DCB      0x00,0x1e,0x20,0x00
0003a8  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0003ac  20001e20          DCB      0x20,0x00,0x1e,0x20
0003b0  001e2000          DCB      0x00,0x1e,0x20,0x00
0003b4  1e20001e          DCB      0x1e,0x20,0x00,0x1e
0003b8  20001e20          DCB      0x20,0x00,0x1e,0x20
0003bc  001e2000          DCB      0x00,0x1e,0x20,0x00
0003c0  1b00011b          DCB      0x1b,0x00,0x01,0x1b
0003c4  01011b02          DCB      0x01,0x01,0x1b,0x02
0003c8  011b0301          DCB      0x01,0x1b,0x03,0x01
0003cc  1b04011b          DCB      0x1b,0x04,0x01,0x1b
0003d0  05011b06          DCB      0x05,0x01,0x1b,0x06
0003d4  011b0701          DCB      0x01,0x1b,0x07,0x01
0003d8  1c00011c          DCB      0x1c,0x00,0x01,0x1c
0003dc  01011c02          DCB      0x01,0x01,0x1c,0x02
0003e0  011c0301          DCB      0x01,0x1c,0x03,0x01
0003e4  1c04011c          DCB      0x1c,0x04,0x01,0x1c
0003e8  05011c06          DCB      0x05,0x01,0x1c,0x06
0003ec  011c0701          DCB      0x01,0x1c,0x07,0x01
0003f0  1d00011d          DCB      0x1d,0x00,0x01,0x1d
0003f4  01011d02          DCB      0x01,0x01,0x1d,0x02
0003f8  011d0301          DCB      0x01,0x1d,0x03,0x01

                          AREA ||.data||, DATA, ALIGN=0

                  au8LLDD_GPIO_C_REVISION
000000  24526576          DCB      0x24,0x52,0x65,0x76
000004  6973696f          DCB      0x69,0x73,0x69,0x6f
000008  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
00000c  2e323120          DCB      0x2e,0x32,0x31,0x20
000010  2400              DCB      0x24,0x00
                  au8LLDD_GPIO_C_TAG
000012  244e              DCB      0x24,0x4e
000014  616d653a          DCB      0x61,0x6d,0x65,0x3a
000018  204c4c44          DCB      0x20,0x4c,0x4c,0x44
00001c  445f315f          DCB      0x44,0x5f,0x31,0x5f
000020  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_GPIO_H_REVISION
000024  24526576          DCB      0x24,0x52,0x65,0x76
000028  6973696f          DCB      0x69,0x73,0x69,0x6f
00002c  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000030  2e313220          DCB      0x2e,0x31,0x32,0x20
000034  2400              DCB      0x24,0x00
                  au8LLDD_GPIO_H_TAG
000036  244e              DCB      0x24,0x4e
000038  616d653a          DCB      0x61,0x6d,0x65,0x3a
00003c  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000040  445f315f          DCB      0x44,0x5f,0x31,0x5f
000044  36202400          DCB      0x36,0x20,0x24,0x00
                  au8LLDD_GPIO_IO_H_REVISION
000048  24526576          DCB      0x24,0x52,0x65,0x76
00004c  6973696f          DCB      0x69,0x73,0x69,0x6f
000050  6e3a2031          DCB      0x6e,0x3a,0x20,0x31
000054  2e313320          DCB      0x2e,0x31,0x33,0x20
000058  2400              DCB      0x24,0x00
                  au8LLDD_GPIO_IO_H_TAG
00005a  244e              DCB      0x24,0x4e
00005c  616d653a          DCB      0x61,0x6d,0x65,0x3a
000060  204c4c44          DCB      0x20,0x4c,0x4c,0x44
000064  445f315f          DCB      0x44,0x5f,0x31,0x5f
000068  36202400          DCB      0x36,0x20,0x24,0x00
